
.vsteensy/build/mtp-test_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000eb50 l    d  .fini	00000000 .fini
0000eb54 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
0000eb5c l    d  .ARM.exidx	00000000 .ARM.exidx
0000eb5c l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200012c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00008108 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00008bd8 l     F .text.itcm	00000070 schedule_transfer
00008c48 l     F .text.itcm	00000036 run_callbacks
00008c80 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
00008d20 l     F .text.itcm	0000066c isr
200049e4 l     O .bss	00000004 endpointN_notify_mask
200049e8 l     O .bss	00000001 sof_usage
200049f4 l     O .bss	00000004 endpoint0_notify_mask
200049f8 l     O .bss	00000001 usb_reboot_timer
20004a00 l     O .bss	00000008 endpoint0_setupdata
20004a08 l     O .bss	00000008 reply_buffer
20004a10 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20004a28 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20004a2c l     O .bss	00000004 s_hotTemp
20004a30 l     O .bss	00000004 s_hot_ROOM
20004a34 l     O .bss	00000004 s_roomC_hotC
20004a38 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
60001b0c l     O .text.progmem	0000000a qualifier_descriptor
200008d0 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200012c0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200012c4 l       .bss	00000000 object.8610
60001b70 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000001c0 l     F .text.itcm	00000048 logg(unsigned long, char const*) [clone .part.13]
000002c0 l     F .text.itcm	0000009c _GLOBAL__sub_I_storage
200012dc l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 Storage.cpp
00005318 l     F .text.itcm	0000001c MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]
000054b4 l     F .text.itcm	00000094 MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]
00005cfc l     F .text.itcm	00000032 MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]
00005d98 l     F .text.itcm	00000058 _GLOBAL__sub_I__Z8dateTimePtS_Ph
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000d44 l     F .text.itcm	0000001e FsCache::sync() [clone .part.2]
00000dd0 l     F .text.itcm	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00000e04 l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00001ccc l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00001de8 l     F .text.itcm	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
000029d4 l     F .text.itcm	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00002e04 l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
0000378c l     F .text.itcm	00000066 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00003b58 l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]
00003b70 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000413c l     F .text.itcm	00000030 sdIrs()
0000416c l     F .text.itcm	00000018 isBusyCommandComplete()
00004184 l     F .text.itcm	00000010 isBusyCommandInhibit()
00004194 l     F .text.itcm	0000000c isBusyDMA()
000041a0 l     F .text.itcm	00000014 isBusyFifoRead()
000041b4 l     F .text.itcm	00000014 isBusyFifoWrite()
000041c8 l     F .text.itcm	00000018 isBusyTransferComplete()
000041e0 l     F .text.itcm	000000d0 setSdclk(unsigned long)
00004314 l     F .text.itcm	00000028 waitTimeout(bool (*)())
0000433c l     F .text.itcm	0000004c yieldTimeout(bool (*)())
00004398 l     F .text.itcm	00000044 enableGPIO(bool) [clone .part.0]
000043fc l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00004484 l     F .text.itcm	0000005c readReg16(unsigned long, void*)
000044e0 l     F .text.itcm	0000002c isBusyCMD13()
00004528 l     F .text.itcm	00000020 waitDmaStatus() [clone .part.7]
00004548 l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00004740 l     F .text.itcm	0000006c transferStop()
00004ac0 l     F .text.itcm	0000009c cardCMD6(unsigned long, unsigned char*)
20003848 l     O .bss	00000001 m_version2
2000384c l     O .bss	00000010 m_cid
2000385c l     O .bss	00000004 m_busyFcn
20003860 l     O .bss	00000001 m_highCapacity
20003864 l     O .bss	00000004 m_ocr
20003868 l     O .bss	00000004 m_rca
2000386c l     O .bss	00000004 m_irqstat
200008bc l     O .data	00000001 m_errorCode
20003870 l     O .bss	00000001 m_initDone
20003874 l     O .bss	00000010 m_csd
20003884 l     O .bss	00000001 m_dmaBusy
20003888 l     O .bss	00000004 m_sdClkKhz
2000388c l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 MTP.cpp
00005df0 l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.1]
00005f3c l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]
00007300 l     F .text.itcm	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
20000194 l     O .data	00000024 supported_op
200001b8 l     O .data	00000014 propertyList
20003d40 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20003d44 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
00000000 l    df *ABS*	00000000 SPI.cpp
00007db8 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 usb1_mtp.c
00007e18 l     F .text.itcm	00000010 tx_event
00007e28 l     F .text.itcm	00000010 rx_event
00007e38 l     F .text.itcm	0000004c usb_mtp_wait
20003d48 l     O .bss	00000800 txbuffer
20004548 l     O .bss	00000004 mtp_RXcount
2000454c l     O .bss	00000001 tx_head
20004550 l     O .bss	00000200 rx_buffer
20004760 l     O .bss	00000020 rx_transfer
20004780 l     O .bss	00000080 tx_transfer
20004800 l     O .bss	00000004 mtp_TXcount
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000081d4 l     F .text.itcm	0000006c rx_queue_transfer
00008240 l     F .text.itcm	000000b4 rx_event
000082f4 l     F .text.itcm	00000098 usb_serial_flush_callback
0000838c l     F .text.itcm	0000017c usb_serial_write.part.1
20004808 l     O .bss	00000010 rx_index
20004818 l     O .bss	00000002 tx_packet_size
2000481a l     O .bss	00000001 tx_noautoflush
2000481b l     O .bss	00000001 tx_head
20004820 l     O .bss	00000100 rx_transfer
20004920 l     O .bss	00000001 rx_tail
20004924 l     O .bss	00000009 rx_list
2000492e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20004930 l     O .bss	00000010 rx_count
20004940 l     O .bss	00000004 rx_available
20004944 l     O .bss	00000001 rx_head
20004945 l     O .bss	00000001 transmit_previous_timeout
20004946 l     O .bss	00000002 tx_available
20004960 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
000098e4 l     F .text.itcm	0000004c digitalWrite.part.0
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20004a3c l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
20000838 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000c3f8 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
20000858 l     O .data	00000010 zeroes.7258
200008a8 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
20000910 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001b28 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001b30 l     F .text.progmem	00000008 __main_veneer
60001b38 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001b40 l     F .text.progmem	00000008 __pwm_init_veneer
60001b48 l     F .text.progmem	00000008 __memset_veneer
60001b50 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
60001b58 l     F .text.progmem	00000008 __startup_early_hook_veneer
60001b60 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001b68 l     F .text.progmem	00000008 __delay_veneer
0000eb40 l     F .text.itcm	00000008 ___init_veneer
0000544c g     F .text.itcm	00000068 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000a660 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
00008744 g     F .text.itcm	0000000c usb_serial_available
0000a624 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000b6d4 g     F .text.itcm	000000ba strcpy
0000a560 g     F .text.itcm	0000007a .hidden __cmpdf2
00008114 g     F .text.itcm	00000002 startup_default_late_hook
000048d8 g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009a74  w    F .text.itcm	000000a0 yield
200049ec g     O .bss	00000004 usb_timer1_callback
000027ec g     F .text.itcm	000001e8 FatFile::write(void const*, unsigned int)
0000a560 g     F .text.itcm	0000007a .hidden __eqdf2
00003acc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00000818 g     F .text.itcm	000003d8 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
200012e0 g     O .bss	0000010c storage
60001a18 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
600013a0 g     F .text.progmem	0000037c configure_external_ram
20004a5c g     O .bss	00000020 HardwareSerial::serial_event_handler_checks
0000a0d0 g     F .text.itcm	0000005a .hidden __floatdidf
20003840 g     O .bss	00000004 FsDateTime::callback
00009d30 g     F .text.itcm	00000020 Print::println()
00000710 g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
00003aa0  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
0000b28c g     F .text.itcm	00000002 __malloc_unlock
20003844 g     O .bss	00000004 FsVolume::m_cwv
000020c0 g     F .text.itcm	000000c6 FatFile::open(FatFile*, char const*, int)
6000186c g     F .text.progmem	00000058 analog_init
0000b93c g     F .text.itcm	0000004a _vdprintf_r
200008cc g     O .data	00000004 F_CPU_ACTUAL
00009d84 g     F .text.itcm	0000002c HardwareSerial::processSerialEvents()
0000b124 g     F .text.itcm	000000c6 memmove
00009c44 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000bd14 g     F .text.itcm	0000004c _Balloc
00002bf8 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
20004a54 g     O .bss	00000001 EventResponder::runningFromYield
000051f4 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
00003c78 g     F .text.itcm	00000080 SdSpiCard::cardCommand(unsigned char, unsigned long)
00005970 g     F .text.itcm	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000a550 g     F .text.itcm	0000008a .hidden __gtdf2
00002e30 g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
0000aa00 g     F .text.itcm	0000000c __errno
00005be4 g     F .text.itcm	00000118 MTPStorage_SD::ScanDir(unsigned long)
60001000 g     O .text.progmem	00000020 ImageVectorTable
20004a40 g     O .bss	00000004 EventResponder::firstInterrupt
000094d4 g     F .text.itcm	00000004 usb_transfer_status
00006400 g     F .text.itcm	000000ac MTPD::GetObjectHandles(unsigned long, unsigned long)
00003ad0  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
200008fa g     O .data	00000001 usb_enable_serial_event_processing
00001264 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00003aa4  w    F .text.itcm	00000004 SdSpiCard::errorData() const
00009d14  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000218 g     O .data	00000370 digital_pin_to_info_PGM
20006304 g     O .bss	00000004 errno
00003cf8 g     F .text.itcm	00000054 SdSpiCard::readOCR(unsigned long*)
0000520c g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000033f8 g     F .text.itcm	00000394 FatFile::open(FatFile*, fname_t*, int)
00001154 g     F .text.itcm	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000eb50 g       .text.itcm	00000000 _etext
200012c0 g       .bss	00000000 _sbss
0000a5ec g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
000042bc g     F .text.itcm	0000000c SdioCard::errorData() const
000049e8 g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
60001b80 g       *ABS*	00000000 _stextload
0000028c g     F .text.itcm	00000034 loop
0000938c g     F .text.itcm	00000064 usb_config_rx
000062ac g     F .text.itcm	00000154 MTPD::GetStorageInfo(unsigned long)
00000440 g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00004ec0 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
00009bdc g     F .text.itcm	00000068 MillisTimer::addToActiveList()
00005d30 g     F .text.itcm	00000068 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00003bd4 g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
20004a44 g     O .bss	00000004 EventResponder::lastInterrupt
00003814 g     F .text.itcm	00000028 FsBaseFile::close()
00007fc4 g     F .text.itcm	00000134 memcpy
0000a5dc g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
000052fc g     F .text.itcm	0000001c MTPStorage_SD::freeClusters()
00005418 g     F .text.itcm	00000034 Storage_init()
0000118c g     F .text.itcm	00000068 ExFatPartition::freeChain(unsigned long)
00005a44 g     F .text.itcm	00000060 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00002338 g     F .text.itcm	00000028 FatFile::peek()
0000d358 g     F .text.itcm	000016e4 _svfprintf_r
0000a060 g     F .text.itcm	00000022 .hidden __floatsidf
20004a24 g     O .bss	00000004 systick_millis_count
0000a558 g     F .text.itcm	00000082 .hidden __ltdf2
000052b8 g     F .text.itcm	00000020 MTPStorage_SD::clusterCount()
000018c8 g     F .text.itcm	000000ae ExFatFile::rename(ExFatFile*, char const*)
00007fa0 g     F .text.itcm	00000024 usb_mtp_available
00007570 g     F .text.itcm	0000082c MTPD::loop()
0000a6dc g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20004a18 g     O .bss	00000001 usb_configuration
00003a98  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00004a88 g     F .text.itcm	00000038 SdioCard::syncDevice()
000047b0 g     F .text.itcm	000000bc SdioCard::writeData(unsigned char const*)
0000011c  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00002360 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
60001a18  w    O .text.progmem	00000018 usb_string_manufacturer_name
600019e0 g     O .text.progmem	00000008 usb_string_mtp
0000aa5c g     F .text.itcm	00000010 malloc
20000024  w    O .data	00000024 vtable for FsFile
00007d9c  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
20000748 g     O .data	000000c8 __mprec_tens
60001780 g     F .text.progmem	000000ec usb_init
0000383c g     F .text.itcm	00000088 FsBaseFile::operator=(FsBaseFile const&)
00003ab8  w    F .text.itcm	00000004 SdSpiCard::type() const
20004a88 g     O .bss	00000004 __malloc_top_pad
20006300 g     O .bss	00000004 systick_safe_read
00003ae0 g     F .text.itcm	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
00001978 g     F .text.itcm	000000e4 ExFatFile::truncate()
200008b8 g     O .data	00000000 .hidden __dso_handle
0000a040 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000bcf8 g     F .text.itcm	0000001c _localeconv_r
0000519c g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000be90 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
00007e84 g     F .text.itcm	0000006c usb_mtp_configure
60001aa0 g     O .text.progmem	00000069 usb_config_descriptor_480
00002a80 g     F .text.itcm	0000000e FatCache::sync()
0000a70c g     F .text.itcm	000002e2 .hidden __udivmoddi4
00006f44 g     F .text.itcm	000001c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00009dbc g     F .text.itcm	00000000 .hidden __aeabi_drsub
00001d00 g     F .text.itcm	00000034 FatFile::addCluster()
0000b670 g     F .text.itcm	00000024 _sbrk_r
00003d4c g     F .text.itcm	0000004a SdSpiCard::readRegister(unsigned char, void*)
000043dc g     F .text.itcm	00000020 SdioCard::type() const
00008110 g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000274 ResetHandler
000087c4 g     F .text.itcm	00000020 usb_serial_getchar
20004ec0 g     O .bss	00000008 usb_cdc_line_coding
00009930 g     F .text.itcm	0000000a digitalWrite
20004a4c g     O .bss	00000004 EventResponder::lastYield
00000418 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
000000e4  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000a610 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
20004a84 g     O .bss	00000004 __malloc_max_sbrked_mem
0000993c g     F .text.itcm	00000080 pinMode
00005b8c g     F .text.itcm	00000056 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00004044 g     F .text.itcm	00000042 SdSpiCard::writeStop()
0000a084 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000a380 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
00009dc8 g     F .text.itcm	00000276 .hidden __adddf3
00006740 g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
00005e70 g     F .text.itcm	000000cc MTPD::writestring(char const*)
00004108 g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
00002c34 g     F .text.itcm	000000ae FatPartition::freeClusterCount()
20280000 g       .bss.dma	00000000 _heap_end
0000a12c g     F .text.itcm	00000254 .hidden __aeabi_dmul
00003f40 g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
20004a50 g     O .bss	00000004 EventResponder::firstYield
2000062c g     O .data	00000004 _global_impure_ptr
00005334 g     F .text.itcm	00000018 MTPStorage_SD::write(char const*, unsigned long)
00000178  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000b290 g     F .text.itcm	000003de _realloc_r
0000aa0c g     F .text.itcm	00000050 __libc_init_array
00000cf4 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000042c8 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
000016a8 g     F .text.itcm	000000e6 ExFatFile::addDirCluster()
000040b4 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00005624 g     F .text.itcm	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
20000810 g     O .data	00000028 __mprec_bigtens
00008118  w    F .text.itcm	0000008c HardFault_HandlerC
00009cfc  w    F .text.itcm	00000004 usb_serial_class::clear()
0000a040 g     F .text.itcm	0000001e .hidden __floatunsidf
000081a4 g     F .text.itcm	00000030 _sbrk
600106dc g       *ABS*	00000000 _sdataload
0000c124 g     F .text.itcm	00000042 __mcmp
20004a58 g     O .bss	00000004 MillisTimer::listWaiting
200008c4 g     O .data	00000004 __brkval
20004948 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001b18 g     F .text.progmem	00000000 _init
00008508 g     F .text.itcm	00000002 usb_serial_reset
00001dc8 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
60001a34 g     O .text.progmem	00000069 usb_config_descriptor_12
20006340 g       .bss	00000000 _ebss
00004960 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00006004 g     F .text.itcm	0000025c MTPD::WriteDescriptor()
200008c0 g     O .data	00000004 propertyListNum
000000b8  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00002a20 g     F .text.itcm	0000005e FatCache::read(unsigned long, unsigned char)
0000bdf4 g     F .text.itcm	00000040 __hi0bits
0000a68c g     F .text.itcm	0000004e .hidden __fixdfsi
00001790 g     F .text.itcm	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203080 g       .bss.dma	00000000 _heap_start
00006260 g     F .text.itcm	0000004a MTPD::WriteStorageIDs()
00000002 g       *ABS*	00000000 _itcm_block_count
20005000 g     O .bss	00000020 endpoint0_transfer_data
00009d80 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000962c g     F .text.itcm	000002b8 pwm_init
00009dc8 g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000a558 g     F .text.itcm	00000082 .hidden __ledf2
0000b694 g     F .text.itcm	0000003e strcat
6000171c g     F .text.progmem	00000064 usb_pll_start
0000bfd4 g     F .text.itcm	000000a0 __pow5mult
6000102c g     O .text.progmem	00000008 vector_table
00002588 g     F .text.itcm	0000005c FatFile::rmdir()
0000a0c0 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00002b74 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00000000  w      *UND*	00000000 __deregister_frame_info
20005020 g     O .bss	00000020 endpoint0_transfer_ack
20004ec8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009488 g     F .text.itcm	00000028 usb_transmit
00009cdc g     F .text.itcm	00000020 systick_isr
000037f4 g     F .text.itcm	00000020 FatFile::getSFN(char*)
00003e90 g     F .text.itcm	00000074 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200008fc g     O .data	00000010 Serial
20004a7c g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
00009d1c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00003944 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
00008110  w    F .text.itcm	00000002 startup_early_hook
00001314 g     F .text.itcm	0000008e ExFatFile::addCluster()
00008700 g     F .text.itcm	00000044 usb_serial_peekchar
0000a64c g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
0000b020 g     F .text.itcm	00000000 memchr
00002b0c g     F .text.itcm	00000066 FatPartition::fatPut(unsigned long, unsigned long)
00008914 g     F .text.itcm	000002c4 set_arm_clock
20004a1c g     O .bss	00000004 systick_cycle_count
200008e4 g     O .data	00000016 usb_string_serial_number_default
0000bb28 g     F .text.itcm	000001d0 _free_r
000047ac g     F .text.itcm	00000004 SdioCard::readStop()
00000d70 g     F .text.itcm	00000060 FsCache::get(unsigned long, unsigned char)
0000a638 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
00009d0c  w    F .text.itcm	00000004 usb_serial_class::flush()
00009dc4 g     F .text.itcm	0000027a .hidden __aeabi_dsub
00002ce4 g     F .text.itcm	0000011e FatPartition::init(BlockDeviceInterface*, unsigned char)
00001e9c g     F .text.itcm	0000015c FatFile::mkdir(FatFile*, fname_t*)
200012b4 g     O .data	00000004 __malloc_sbrk_base
00009d04  w    F .text.itcm	00000004 usb_serial_class::read()
00003210 g     F .text.itcm	00000128 FatFile::remove()
0000a0c0 g     F .text.itcm	0000006a .hidden __floatundidf
0000c074 g     F .text.itcm	000000ae __lshift
00001ff8 g     F .text.itcm	000000c8 FatFile::mkdir(FatFile*, char const*, bool)
00009458 g     F .text.itcm	0000002e usb_prepare_transfer
000012b8 g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
000080f8 g     F .text.itcm	00000018 unused_interrupt_vector
000055c4 g     F .text.itcm	0000005e MTPStorage_SD::GetNextObjectHandle()
0000ea3c g     F .text.itcm	00000100 __ssprint_r
200049e0 g     O .bss	00000004 usb_timer0_callback
600018c4 g     F .text.progmem	0000011c tempmon_init
0000529c  w    F .text.itcm	00000002 SdFs::~SdFs()
0000c338 g     F .text.itcm	0000005e _vasnprintf_r
00009d24  w    F .text.itcm	0000000c serialEvent()
0000b9e8 g     F .text.itcm	000000a4 __register_exitproc
00000bf0 g     F .text.itcm	00000104 ExFatFile::open(ExFatFile*, char const*, int)
0000b89c g     F .text.itcm	000000a0 strncmp
000017ec g     F .text.itcm	000000dc ExFatFile::mkdir(ExFatFile*, char const*, bool)
00008750 g     F .text.itcm	00000074 usb_serial_flush_input
000011f4 g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
000056c0 g     F .text.itcm	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000bea4 g     F .text.itcm	00000130 __multiply
000087e4 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20004a8c g     O .bss	00000028 __malloc_current_mallinfo
0000c27c g     F .text.itcm	000000ba __d2b
00004388  w    F .text.itcm	0000000e SdioCard::~SdioCard()
00000370 g     F .text.itcm	000000a8 ExFatFile::getName(char*, unsigned int)
00005294 g     F .text.itcm	00000004 MTPStorage_SD::readonly()
0000486c g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00007f38 g     F .text.itcm	00000068 usb_mtp_send
0000a9f4 g     F .text.itcm	0000000c __cxa_atexit
0000053c g     F .text.itcm	000001a8 ExFatFile::read(void*, unsigned int)
0000a060 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00000e30 g     F .text.itcm	0000000e FsCache::sync()
0000b0c0 g     F .text.itcm	00000062 memcmp
20000600  w    O .data	00000028 vtable for usb_serial_class
0000522c g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00007124 g     F .text.itcm	00000126 MTPD::GetObject(unsigned long)
00005290  w    F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20004a20 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20004a48 g     O .bss	00000004 MillisTimer::listActive
0000a9f0  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
0000147c g     F .text.itcm	0000005a ExFatFile::rmdir()
000067d0 g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000a380 g     F .text.itcm	000001d0 .hidden __divdf3
00003da8 g     F .text.itcm	00000098 SdSpiCard::sectorCount()
20000ea8 g     O .data	00000408 __malloc_av_
0000a12c g     F .text.itcm	00000254 .hidden __muldf3
00008874 g     F .text.itcm	000000a0 usb_serial_flush_output
0000b288 g     F .text.itcm	00000002 __malloc_lock
00002f8c g     F .text.itcm	00000284 FatFile::parsePathName(char const*, fname_t*, char const**)
20004c00 g     O .bss	000002c0 _VectorsRam
00005240 g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000c398 g     F .text.itcm	0000005e _calloc_r
0000724c g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
00001648 g     F .text.itcm	0000005e ExFatFile::sync()
200049f0 g     O .bss	00000001 usb_high_speed
000023a4 g     F .text.itcm	000001e2 FatFile::rename(FatFile*, char const*)
0000450c g     F .text.itcm	0000001c SdioCard::isBusy()
00003f04 g     F .text.itcm	0000003a SdSpiCard::readStop()
0000b1ec g     F .text.itcm	0000009a memset
00009a64 g     F .text.itcm	00000010 main
0000529c  w    F .text.itcm	00000002 SdFs::~SdFs()
20004a80 g     O .bss	00000004 __malloc_max_total_mem
00000e40 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203000 g     O .bss.dma	00000069 usb_descriptor_buffer
00001a5c g     F .text.itcm	00000270 ExFatFile::write(void const*, unsigned int)
20000130 g     O .data	00000050 vtable for MTPStorage_SD
0000732c g     F .text.itcm	00000148 MTPD::SendObjectInfo(unsigned long, unsigned long)
000099bc g     F .text.itcm	00000058 usb_init_serialnumber
60001b7c g       .text.progmem	00000000 __init_array_end
0000c520 g     F .text.itcm	00000e34 _dtoa_r
0000aa7c g     F .text.itcm	00000570 _malloc_r
0000b9a0 g     F .text.itcm	0000001a __ascii_wctomb
0000a0d0 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20000120  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00009b14 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00007e10 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
000095a4 g     F .text.itcm	00000064 micros
000014d8 g     F .text.itcm	00000170 ExFatFile::syncDir()
0000ba8c g     F .text.itcm	0000009c _malloc_trim_r
60001a30 g     O .text.progmem	00000004 string0
00008810 g     F .text.itcm	00000018 usb_serial_write
00008114  w    F .text.itcm	00000002 startup_late_hook
00009d08  w    F .text.itcm	00000004 usb_serial_class::available()
000072bc g     F .text.itcm	00000044 MTPD::readstring(char*)
000027e0 g     F .text.itcm	0000000c FatFile::sync()
20006000 g     O .bss	00000300 endpoint_queue_head
600019e8  w    O .text.progmem	0000002e usb_string_product_name
000094d8 g     F .text.itcm	000000cc delay
0000a560 g     F .text.itcm	0000007a .hidden __nedf2
000052a0 g     F .text.itcm	00000016 MTPStorage_SD::CloseIndex()
0000eb50 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00003e40 g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
00000d04 g     F .text.itcm	00000040 ExFatFile::openNext(ExFatFile*, int)
00009d60 g     F .text.itcm	0000001e Print::printf(char const*, ...)
00001e7c g     F .text.itcm	0000001e FatFile::close()
00009608 g     F .text.itcm	00000024 Panic_Temp_isr
00002a90 g     F .text.itcm	0000000c FatPartition::clusterStartSector(unsigned long) const
20003890 g     O .bss	000004b0 sd
00004310  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000cc  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000b9bc g     F .text.itcm	0000002c _write_r
0000466c g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00007ef0 g     F .text.itcm	00000048 usb_mtp_recv
20000d38 g     O .data	00000004 _impure_ptr
000006e4 g     F .text.itcm	0000002c ExFatFile::peek()
20000000  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00003338 g     F .text.itcm	000000be FatFile::lfnUniqueSfn(fname_t*)
00003a6c g     F .text.itcm	00000028 FsVolume::open(char const*, int)
000042b0 g     F .text.itcm	0000000c SdioCard::errorCode() const
00002188 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001ac  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60001b70 g       .text.progmem	00000000 __preinit_array_end
00003acc  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
00000ef4 g     F .text.itcm	000000ec ExFatPartition::init(BlockDeviceInterface*, unsigned char)
000010c4 g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000572c g     F .text.itcm	00000188 MTPStorage_SD::DeleteObject(unsigned long)
00003f90 g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
0000afec g     F .text.itcm	0000002a __ascii_mbtowc
00003b94 g     F .text.itcm	0000003e SdSpiCard::isBusy()
20000070 g     O .data	00000058 vtable for SdSpiCard
00003da0  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
00000208 g     F .text.itcm	00000084 setup
20000588 g     O .data	00000078 usb_descriptor_list
00004464 g     F .text.itcm	00000020 SdioCard::status()
0000534c g     F .text.itcm	000000cc MTPStorage_SD::ResetIndex()
0000710c g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
000021a4 g     F .text.itcm	00000192 FatFile::read(void*, unsigned int)
00002198 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20070000 g       .bss.dma	00000000 _estack
00003a94 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00003d98  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
00008828 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003c48 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
0000a5fc g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
0000850c g     F .text.itcm	00000108 usb_serial_configure
00009d50  w    F .text.itcm	0000000e _write
200012c0 g       .data	00000000 _edata
00001168 g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
20004804 g     O .bss	00000001 external_psram_size
000064ac g     F .text.itcm	00000294 MTPD::GetObjectInfo(unsigned long)
00004310  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004088 g     F .text.itcm	0000002c SdSpiCard::syncDevice()
00001d34 g     F .text.itcm	00000094 FatFile::addDirCluster()
00009d10  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00009a14 g     F .text.itcm	0000004e ultoa
000038c4 g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00005548 g     F .text.itcm	0000007c MTPStorage_SD::ReadIndexRecord(unsigned long)
00009b94 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200012b0 g     O .data	00000004 __malloc_trim_threshold
00009d00  w    F .text.itcm	00000004 usb_serial_class::peek()
00000080  w    F .text.itcm	00000038 MTPStorage_SD::~MTPStorage_SD()
20001400 g     O .bss	00002440 mtpd
0000c168 g     F .text.itcm	00000114 __mdiff
00004300 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000a68c g     F .text.itcm	0000004e .hidden __aeabi_d2iz
000010fc g     F .text.itcm	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000047ac g     F .text.itcm	00000004 SdioCard::writeStop()
00003abc  w    F .text.itcm	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
0000035c g     F .text.itcm	00000014 ExFatFile::close()
20000640 g     O .data	00000101 _ctype_
00003aa8  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
60001b70 g       .text.progmem	00000000 __init_array_start
0000a9f0  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000a660 g     F .text.itcm	0000002c .hidden __unorddf2
200008c8 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
0000b7c0 g     F .text.itcm	000000dc strlen
00002e54 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000a5ec g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000a550 g     F .text.itcm	0000008a .hidden __gedf2
000025e4 g     F .text.itcm	00000092 FatFile::seekSet(unsigned long)
00005aa4 g     F .text.itcm	000000e8 MTPStorage_SD::Create(unsigned long, bool, char const*)
600019e8 g     O .text.progmem	0000002e usb_string_product_name_default
0000b988 g     F .text.itcm	00000018 vdprintf
00004600 g     F .text.itcm	0000006c SdioCard::sectorCount()
000039a4 g     F .text.itcm	000000c8 FsVolume::begin(BlockDeviceInterface*)
00002750 g     F .text.itcm	0000008e FatFile::openNext(FatFile*, int)
200000c8 g     O .data	00000058 vtable for SdioCard
0000a084 g     F .text.itcm	0000003a .hidden __aeabi_f2d
00005678 g     F .text.itcm	00000048 MTPStorage_SD::close()
00002e84 g     F .text.itcm	00000108 FatFile::getName(char*, unsigned int)
600012a8 g     F .text.progmem	000000f8 configure_cache
00000080  w    F .text.itcm	00000038 MTPStorage_SD::~MTPStorage_SD()
000058b4 g     F .text.itcm	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00004f7c g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00005098 g     F .text.itcm	00000104 SdSpiArduinoDriver::activate()
00009dc4 g     F .text.itcm	0000027a .hidden __subdf3
60001b70 g       .text.progmem	00000000 __preinit_array_start
000094b0 g     F .text.itcm	00000024 usb_receive
00000fe0 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00005660 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
0000be34 g     F .text.itcm	0000005a __lo0bits
00005298 g     F .text.itcm	00000004 MTPStorage_SD::has_directories()
0000108c g     F .text.itcm	00000038 ExFatPartition::chainSize(unsigned long)
00002678 g     F .text.itcm	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00011990 g       *ABS*	00000000 _flashimagelen
00009db0 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
000052d8 g     F .text.itcm	00000024 MTPStorage_SD::clusterSize()
000013a4 g     F .text.itcm	000000d6 ExFatFile::remove()
00009bd8 g     F .text.itcm	00000004 pendablesrvreq_isr
00007474 g     F .text.itcm	000000fc MTPD::SendObject()
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
20000d3c g     O .data	0000016c __global_locale
00004b5c g     F .text.itcm	00000364 SdioCard::begin(SdioConfig)
00000d64 g     F .text.itcm	0000000c FsCache::invalidate()
00008614 g     F .text.itcm	000000ec usb_serial_read
000093f0 g     F .text.itcm	00000068 usb_config_tx
00002a9c g     F .text.itcm	00000070 FatPartition::fatGet(unsigned long, unsigned long*)
0000aa6c g     F .text.itcm	00000010 free
0000bd74 g     F .text.itcm	00000080 __multadd
0000bd60 g     F .text.itcm	00000012 _Bfree
200008e4  w    O .data	00000016 usb_string_serial_number
0000127c g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
00004fe8 g     F .text.itcm	000000b0 SdioCard::readSector(unsigned long, unsigned char*)
000042e4 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	................
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`........

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #476]	; (60001214 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #476]	; (60001218 <ResetHandler+0x1e4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #476]	; (6000121c <ResetHandler+0x1e8>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #476]	; (60001220 <ResetHandler+0x1ec>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #472]	; (60001224 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	ldr	r1, [pc, #472]	; (60001228 <ResetHandler+0x1f4>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	beq.n	6000107a <ResetHandler+0x46>
	while (dest < dest_end) {
6000105a:	ldr	r3, [pc, #464]	; (6000122c <ResetHandler+0x1f8>)
6000105c:	cmp	r2, r3
6000105e:	bcs.n	6000107a <ResetHandler+0x46>
60001060:	mvns	r4, r2
60001062:	mov	r0, r1
60001064:	add	r3, r4
60001066:	bic.w	r3, r3, #3
6000106a:	adds	r3, #4
6000106c:	add	r3, r1
		*dest++ = *src++;
6000106e:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	cmp	r0, r3
		*dest++ = *src++;
60001074:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	bne.n	6000106e <ResetHandler+0x3a>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	ldr	r2, [pc, #436]	; (60001230 <ResetHandler+0x1fc>)
6000107c:	ldr	r1, [pc, #436]	; (60001234 <ResetHandler+0x200>)
6000107e:	cmp	r2, r1
60001080:	beq.n	600010a2 <ResetHandler+0x6e>
	while (dest < dest_end) {
60001082:	ldr	r3, [pc, #436]	; (60001238 <ResetHandler+0x204>)
60001084:	cmp	r2, r3
60001086:	bcs.n	600010a2 <ResetHandler+0x6e>
60001088:	mvns	r4, r2
6000108a:	mov	r0, r1
6000108c:	add	r3, r4
6000108e:	bic.w	r3, r3, #3
60001092:	adds	r3, #4
60001094:	add	r3, r1
		*dest++ = *src++;
60001096:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	cmp	r0, r3
		*dest++ = *src++;
6000109c:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	bne.n	60001096 <ResetHandler+0x62>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	ldr	r2, [pc, #408]	; (6000123c <ResetHandler+0x208>)
600010a4:	ldr	r3, [pc, #408]	; (60001240 <ResetHandler+0x20c>)
600010a6:	cmp	r2, r3
600010a8:	bcs.n	600010c2 <ResetHandler+0x8e>
600010aa:	mvns	r0, r2
600010ac:	mov	r1, r2
		*dest++ = 0;
600010ae:	movs	r4, #0
600010b0:	add	r3, r0
600010b2:	bic.w	r3, r3, #3
600010b6:	adds	r3, #4
600010b8:	add	r3, r2
600010ba:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	cmp	r3, r1
600010c0:	bne.n	600010ba <ResetHandler+0x86>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	ldr	r2, [pc, #384]	; (60001244 <ResetHandler+0x210>)
600010c4:	mov.w	r1, #15728640	; 0xf00000
600010c8:	ldr	r3, [pc, #380]	; (60001248 <ResetHandler+0x214>)
600010ca:	str	r1, [r2, #0]
600010cc:	add.w	r1, r3, #704	; 0x2c0
600010d0:	ldr	r2, [pc, #376]	; (6000124c <ResetHandler+0x218>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	str.w	r2, [r3, #4]!
600010d6:	cmp	r1, r3
600010d8:	bne.n	600010d2 <ResetHandler+0x9e>
600010da:	ldr	r3, [pc, #372]	; (60001250 <ResetHandler+0x21c>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	movs	r1, #128	; 0x80
600010de:	ldr	r2, [pc, #372]	; (60001254 <ResetHandler+0x220>)
600010e0:	strb.w	r1, [r3], #1
600010e4:	cmp	r3, r2
600010e6:	bne.n	600010e0 <ResetHandler+0xac>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	ldr	r4, [pc, #364]	; (60001258 <ResetHandler+0x224>)
600010ea:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	ldr	r6, [pc, #364]	; (6000125c <ResetHandler+0x228>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	ldr.w	sl, [pc, #420]	; 6000129c <ResetHandler+0x268>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fa:	ldr.w	r9, [pc, #420]	; 600012a0 <ResetHandler+0x26c>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fe:	ldr.w	r8, [pc, #420]	; 600012a4 <ResetHandler+0x270>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001102:	ldr	r3, [pc, #348]	; (60001260 <ResetHandler+0x22c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001104:	ldr	r1, [pc, #268]	; (60001214 <ResetHandler+0x1e0>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001106:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000110a:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110e:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001112:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001116:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111a:	ldr	r3, [r6, #28]
6000111c:	bic.w	r3, r3, #127	; 0x7f
60001120:	orr.w	r3, r3, #64	; 0x40
60001124:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	ldr	r3, [r6, #36]	; 0x24
60001128:	bic.w	r3, r3, #127	; 0x7f
6000112c:	orr.w	r3, r3, #64	; 0x40
60001130:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	bl	600012a8 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	ldr	r2, [pc, #292]	; (60001264 <ResetHandler+0x230>)
60001140:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	ldr	r3, [pc, #292]	; (60001268 <ResetHandler+0x234>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	ldr	r1, [pc, #292]	; (6000126c <ResetHandler+0x238>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r1, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	ldr	r2, [pc, #284]	; (60001274 <ResetHandler+0x240>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	ldr	r0, [pc, #284]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	ldr	r2, [pc, #280]	; (6000127c <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	ldr	r0, [pc, #276]	; (60001280 <ResetHandler+0x24c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	ldr	r1, [pc, #272]	; (60001284 <ResetHandler+0x250>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	orr.w	r3, r3, #1
60001176:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	ldr	r3, [r0, #0]
6000117a:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	bl	6000171c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	ldr	r0, [pc, #256]	; (60001288 <ResetHandler+0x254>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	bl	60001b38 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
60001196:	nop
60001198:	nop
6000119a:	nop
6000119c:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	ldr	r2, [pc, #232]	; (6000128c <ResetHandler+0x258>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a2:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011a6:	ldr	r3, [pc, #232]	; (60001290 <ResetHandler+0x25c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a8:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011aa:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011ac:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011b0:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011b4:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b8:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011bc:	ldr	r2, [r3, #56]	; 0x38
600011be:	lsls	r2, r2, #31
600011c0:	bmi.n	600011d4 <ResetHandler+0x1a0>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011c6:	ldr	r1, [pc, #204]	; (60001294 <ResetHandler+0x260>)
600011c8:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ca:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011cc:	ldr	r2, [r3, #56]	; 0x38
600011ce:	orr.w	r2, r2, #1
600011d2:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011d4:	ldr	r2, [pc, #184]	; (60001290 <ResetHandler+0x25c>)
600011d6:	ldr	r4, [pc, #192]	; (60001298 <ResetHandler+0x264>)
600011d8:	ldr	r3, [r2, #8]
600011da:	orr.w	r3, r3, #65537	; 0x10001
600011de:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
600011e0:	bl	600013a0 <configure_external_ram>
#endif
	startup_early_hook();
600011e4:	bl	60001b58 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011e8:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011ea:	cmp	r3, #19
600011ec:	bls.n	600011e8 <ResetHandler+0x1b4>
	usb_init();
600011ee:	bl	60001780 <usb_init>
	analog_init();
600011f2:	bl	6000186c <analog_init>
	pwm_init();
600011f6:	bl	60001b40 <__pwm_init_veneer>
	tempmon_init();
600011fa:	bl	600018c4 <tempmon_init>

	startup_late_hook();
600011fe:	bl	60001b60 <__startup_late_hook_veneer>
60001202:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
60001204:	cmp.w	r3, #300	; 0x12c
60001208:	bcc.n	60001202 <ResetHandler+0x1ce>
	//printf("before C++ constructors\n");
	__libc_init_array();
6000120a:	bl	60001b28 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
6000120e:	bl	60001b30 <__main_veneer>
60001212:	b.n	60001212 <ResetHandler+0x1de>
60001214:	.word	0x400ac000
60001218:	.word	0xaaaaaaaf
6000121c:	.word	0x00200007
60001220:	.word	0x20070000
60001224:	.word	0x00000000
60001228:	.word	0x60001b80
6000122c:	.word	0x0000eb50
60001230:	.word	0x20000000
60001234:	.word	0x600106dc
60001238:	.word	0x200012c0
6000123c:	.word	0x200012c0
60001240:	.word	0x20006340
60001244:	.word	0xe000ed88
60001248:	.word	0x20004bfc
6000124c:	.word	0x000080f9
60001250:	.word	0xe000e400
60001254:	.word	0xe000e4a0
60001258:	.word	0x400d8000
6000125c:	.word	0x400fc000
60001260:	.word	0xe000ed08
60001264:	.word	0xe000e014
60001268:	.word	0xe000e018
6000126c:	.word	0x00009bd9
60001270:	.word	0xe000edfc
60001274:	.word	0x20200000
60001278:	.word	0x00009cdd
6000127c:	.word	0xe0001000
60001280:	.word	0xe0001004
60001284:	.word	0x20004a1c
60001288:	.word	0x179a7b00
6000128c:	.word	0x40084000
60001290:	.word	0x400d4000
60001294:	.word	0x56c00000
60001298:	.word	0x20004a24
6000129c:	.word	0x20004c00
600012a0:	.word	0x2018101b
600012a4:	.word	0x13110d0c

600012a8 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a8:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012aa:	ldr	r2, [pc, #160]	; (6000134c <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012ae:	ldr	r3, [pc, #160]	; (60001350 <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012b0:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b4:	ldr	r4, [pc, #156]	; (60001354 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012b6:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b8:	ldr.w	lr, [pc, #216]	; 60001394 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012bc:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012be:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012c0:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012c2:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012c6:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ca:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012cc:	ldr.w	lr, [pc, #200]	; 60001398 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d0:	ldr	r7, [pc, #132]	; (60001358 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012d2:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d6:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012da:	ldr	r6, [pc, #128]	; (6000135c <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012dc:	ldr	r7, [pc, #128]	; (60001360 <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012de:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e0:	ldr	r1, [pc, #128]	; (60001364 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012e2:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	ldr	r6, [pc, #128]	; (60001368 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012e6:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ea:	ldr	r7, [pc, #128]	; (6000136c <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012ec:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012ee:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f0:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f4:	ldr	r6, [pc, #120]	; (60001370 <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012f6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f8:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012fa:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012fc:	ldr.w	lr, [pc, #156]	; 6000139c <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001300:	ldr	r6, [pc, #112]	; (60001374 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001302:	ldr	r1, [pc, #116]	; (60001378 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001304:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001308:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000130a:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000130c:	ldr	r7, [pc, #108]	; (6000137c <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000130e:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001310:	ldr	r6, [pc, #108]	; (60001380 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001312:	ldr	r1, [pc, #112]	; (60001384 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001314:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001316:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001318:	ldr	r7, [pc, #108]	; (60001388 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131a:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000131c:	ldr	r6, [pc, #108]	; (6000138c <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000131e:	ldr	r1, [pc, #112]	; (60001390 <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
60001320:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001322:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001324:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001326:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001328:	dsb	sy
	asm("isb");
6000132c:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001330:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001334:	dsb	sy
	asm("isb");
60001338:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000133c:	ldr.w	r3, [r2, #-136]
60001340:	orr.w	r3, r3, #196608	; 0x30000
60001344:	str.w	r3, [r2, #-136]
60001348:	pop	{r4, r5, r6, r7, pc}
6000134a:	nop
6000134c:	.word	0xe000ed9c
60001350:	.word	0xe000eda0
60001354:	.word	0xe000ed94
60001358:	.word	0x00100009
6000135c:	.word	0x00200013
60001360:	.word	0x07020021
60001364:	.word	0x20006340
60001368:	.word	0x20000014
6000136c:	.word	0x13080025
60001370:	.word	0x10000009
60001374:	.word	0x40000017
60001378:	.word	0x13100033
6000137c:	.word	0x60000018
60001380:	.word	0x070b002f
60001384:	.word	0x70000019
60001388:	.word	0x170b0037
6000138c:	.word	0x7000001a
60001390:	.word	0x130b002f
60001394:	.word	0x1000003f
60001398:	.word	0x03080025
6000139c:	.word	0x20200016

600013a0 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
600013a0:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013a2:	ldr	r3, [pc, #736]	; (60001684 <configure_external_ram+0x2e4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013a4:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013a6:	ldr	r6, [pc, #736]	; (60001688 <configure_external_ram+0x2e8>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013a8:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013aa:	ldr	r1, [pc, #736]	; (6000168c <configure_external_ram+0x2ec>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600013ac:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013b0:	ldr	r5, [pc, #732]	; (60001690 <configure_external_ram+0x2f0>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600013b2:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013b6:	ldr	r4, [pc, #732]	; (60001694 <configure_external_ram+0x2f4>)
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013b8:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600013bc:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600013c0:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600013c2:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600013c6:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600013ca:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013ce:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013d2:	ldr	r1, [pc, #708]	; (60001698 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d4:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013d8:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600013dc:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600013e0:	ldr	r6, [pc, #696]	; (6000169c <configure_external_ram+0x2fc>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600013e2:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600013e4:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600013e6:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600013e8:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600013ea:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600013ec:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600013f0:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600013f4:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600013f8:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600013fc:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001400:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001404:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001408:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000140c:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001410:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001414:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001416:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001418:	ldr	r0, [pc, #644]	; (600016a0 <configure_external_ram+0x300>)
6000141a:	ands	r0, r3
6000141c:	ldr	r3, [pc, #644]	; (600016a4 <configure_external_ram+0x304>)
6000141e:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001420:	ldr	r0, [pc, #644]	; (600016a8 <configure_external_ram+0x308>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001422:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001424:	ldr.w	r3, [r6, #132]	; 0x84
60001428:	orr.w	r3, r3, #12
6000142c:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001430:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001432:	ldr	r3, [r0, #0]
60001434:	orrs	r3, r6
60001436:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001438:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000143a:	and.w	lr, r3, lr
6000143e:	ldr	r3, [pc, #620]	; (600016ac <configure_external_ram+0x30c>)
60001440:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001444:	ldr.w	lr, [pc, #668]	; 600016e4 <configure_external_ram+0x344>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001448:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000144a:	ldr	r3, [pc, #612]	; (600016b0 <configure_external_ram+0x310>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000144c:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000144e:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001452:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001454:	ldr	r7, [pc, #604]	; (600016b4 <configure_external_ram+0x314>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001456:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000145a:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000145c:	ldr	r3, [r0, #12]
6000145e:	bic.w	r3, r3, #120	; 0x78
60001462:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001464:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001466:	ands	r7, r3
60001468:	ldr	r3, [pc, #588]	; (600016b8 <configure_external_ram+0x318>)
6000146a:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000146c:	ldr	r7, [pc, #580]	; (600016b4 <configure_external_ram+0x314>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000146e:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001470:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001472:	ands	r7, r3
60001474:	ldr	r3, [pc, #576]	; (600016b8 <configure_external_ram+0x318>)
60001476:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001478:	ldr	r7, [pc, #576]	; (600016bc <configure_external_ram+0x31c>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000147a:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000147c:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000147e:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001480:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001484:	ldr	r7, [pc, #568]	; (600016c0 <configure_external_ram+0x320>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001486:	bic.w	r3, r3, #63	; 0x3f
6000148a:	orr.w	r3, r3, #1
6000148e:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001492:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001496:	ldr.w	lr, [pc, #564]	; 600016cc <configure_external_ram+0x32c>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000149a:	bic.w	r3, r3, #63	; 0x3f
6000149e:	orr.w	r3, r3, #1
600014a2:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
600014a6:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600014a8:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014aa:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014ac:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600014b0:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600014b2:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600014b4:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014b8:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ba:	ldr	r3, [pc, #520]	; (600016c4 <configure_external_ram+0x324>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014bc:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014c0:	ldr	r2, [pc, #516]	; (600016c8 <configure_external_ram+0x328>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600014c2:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014c4:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014c8:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600014ca:	str.w	r1, [r3], #4
600014ce:	cmp	r3, r2
600014d0:	bne.n	600014ca <configure_external_ram+0x12a>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d2:	ldr	r3, [pc, #468]	; (600016a8 <configure_external_ram+0x308>)
600014d4:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014d6:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600014d8:	orr.w	r2, r2, #1
600014dc:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600014de:	ldr	r3, [r1, #0]
600014e0:	ldr	r2, [pc, #452]	; (600016a8 <configure_external_ram+0x308>)
600014e2:	ands.w	r3, r3, #1
600014e6:	bne.n	600014de <configure_external_ram+0x13e>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014e8:	ldr	r6, [pc, #480]	; (600016cc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600014ea:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600014ec:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600014f0:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600014f4:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600014f8:	ldr	r7, [pc, #468]	; (600016d0 <configure_external_ram+0x330>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600014fa:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600014fc:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001500:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001502:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001506:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000150a:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
6000150e:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001512:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001514:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001518:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000151a:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000151e:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001522:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001526:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000152a:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000152e:	ldr	r6, [pc, #420]	; (600016d4 <configure_external_ram+0x334>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001530:	ldr	r5, [pc, #420]	; (600016d8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001532:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001536:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000153a:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000153e:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001542:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001546:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000154a:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000154e:	ldr	r3, [r1, #20]
60001550:	ldr	r2, [pc, #340]	; (600016a8 <configure_external_ram+0x308>)
60001552:	lsls	r5, r3, #31
60001554:	bpl.n	6000154e <configure_external_ram+0x1ae>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001556:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001558:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000155a:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000155e:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001560:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001562:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001566:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000156a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000156e:	ldr	r3, [r1, #20]
60001570:	ldr	r2, [pc, #308]	; (600016a8 <configure_external_ram+0x308>)
60001572:	lsls	r4, r3, #31
60001574:	bpl.n	6000156e <configure_external_ram+0x1ce>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001576:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001578:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000157a:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000157e:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001580:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001582:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001586:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000158a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000158e:	ldr	r3, [r1, #20]
60001590:	ldr	r2, [pc, #276]	; (600016a8 <configure_external_ram+0x308>)
60001592:	lsls	r0, r3, #31
60001594:	bpl.n	6000158e <configure_external_ram+0x1ee>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001596:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001598:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000159a:	ldr	r0, [pc, #320]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000159c:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000159e:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015a0:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600015a4:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015a8:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ac:	ldr	r3, [r1, #20]
600015ae:	ldr	r2, [pc, #248]	; (600016a8 <configure_external_ram+0x308>)
600015b0:	lsls	r3, r3, #31
600015b2:	bpl.n	600015ac <configure_external_ram+0x20c>
	uint32_t id = FLEXSPI2_RFDR0;
600015b4:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015b8:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015bc:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015be:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600015c0:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
600015c2:	cmp	r3, r1
600015c4:	beq.n	600015c8 <configure_external_ram+0x228>
600015c6:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015c8:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ca:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015ce:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015d0:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015d2:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015d6:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015da:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015de:	ldr	r3, [r1, #20]
600015e0:	ldr	r2, [pc, #196]	; (600016a8 <configure_external_ram+0x308>)
600015e2:	lsls	r7, r3, #31
600015e4:	bpl.n	600015de <configure_external_ram+0x23e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015e6:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015e8:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015ec:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015ee:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600015f0:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600015f2:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600015f6:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600015fa:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600015fe:	ldr	r3, [r1, #20]
60001600:	ldr	r2, [pc, #164]	; (600016a8 <configure_external_ram+0x308>)
60001602:	lsls	r6, r3, #31
60001604:	bpl.n	600015fe <configure_external_ram+0x25e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001606:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001608:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000160c:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001610:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001612:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001614:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001618:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000161c:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001620:	ldr	r3, [r1, #20]
60001622:	ldr	r2, [pc, #132]	; (600016a8 <configure_external_ram+0x308>)
60001624:	lsls	r5, r3, #31
60001626:	bpl.n	60001620 <configure_external_ram+0x280>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001628:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000162a:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000162e:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001632:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001634:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001636:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000163a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000163e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001642:	ldr	r3, [r1, #20]
60001644:	ldr	r2, [pc, #96]	; (600016a8 <configure_external_ram+0x308>)
60001646:	lsls	r4, r3, #31
60001648:	bpl.n	60001642 <configure_external_ram+0x2a2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000164a:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
6000164c:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001650:	ldr	r0, [pc, #136]	; (600016dc <configure_external_ram+0x33c>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001652:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001654:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001656:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000165a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000165e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001662:	ldr	r3, [r1, #20]
60001664:	ldr	r2, [pc, #64]	; (600016a8 <configure_external_ram+0x308>)
60001666:	lsls	r0, r3, #31
60001668:	bpl.n	60001662 <configure_external_ram+0x2c2>
	uint32_t id = FLEXSPI2_RFDR0;
6000166a:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000166e:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001672:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001674:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001676:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001678:	cmp	r3, r1
6000167a:	beq.n	600016e8 <configure_external_ram+0x348>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
6000167c:	ldr	r3, [pc, #96]	; (600016e0 <configure_external_ram+0x340>)
6000167e:	movs	r2, #8
60001680:	strb	r2, [r3, #0]
60001682:	pop	{r4, r5, r6, r7, pc}
60001684:	.word	0x401f8000
60001688:	.word	0x000170f9
6000168c:	.word	0x0001b0f9
60001690:	.word	0x000110f9
60001694:	.word	0x000100f9
60001698:	.word	0x401f8400
6000169c:	.word	0x400fc000
600016a0:	.word	0x1ffffcff
600016a4:	.word	0xa0000300
600016a8:	.word	0x402a4000
600016ac:	.word	0xffff0012
600016b0:	.word	0x00f737ff
600016b4:	.word	0x7cf0ff00
600016b8:	.word	0x80000040
600016bc:	.word	0x830f00ff
600016c0:	.word	0x00020063
600016c4:	.word	0x402a4200
600016c8:	.word	0x402a4300
600016cc:	.word	0x5af05af0
600016d0:	.word	0x3018049f
600016d4:	.word	0x26013206
600016d8:	.word	0x0a180638
600016dc:	.word	0x00030004
600016e0:	.word	0x20004804
600016e4:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016e8:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016ec:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016f0:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600016f2:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
600016f4:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600016f8:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600016fc:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001700:	ldr	r3, [r1, #20]
60001702:	ldr	r2, [pc, #16]	; (60001714 <configure_external_ram+0x374>)
60001704:	lsls	r3, r3, #31
60001706:	bpl.n	60001700 <configure_external_ram+0x360>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001708:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
6000170a:	ldr	r3, [pc, #12]	; (60001718 <configure_external_ram+0x378>)
6000170c:	movs	r1, #16
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000170e:	str	r0, [r2, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001710:	strb	r1, [r3, #0]
60001712:	pop	{r4, r5, r6, r7, pc}
60001714:	.word	0x402a4000
60001718:	.word	0x20004804

6000171c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000171c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000171e:	ldr	r2, [pc, #92]	; (6000177c <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001720:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001722:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001726:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000172a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000172e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001732:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001736:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001738:	tst.w	r3, #2
6000173c:	beq.n	6000174c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000173e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001740:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001742:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001744:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001746:	tst.w	r3, #2
6000174a:	bne.n	6000173e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000174c:	tst.w	r3, #8192	; 0x2000
60001750:	bne.n	60001756 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001752:	str	r5, [r2, #20]
			continue;
60001754:	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001756:	tst.w	r3, #4096	; 0x1000
6000175a:	bne.n	60001760 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000175c:	str	r6, [r2, #20]
			continue;
6000175e:	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001760:	cmp	r3, #0
60001762:	bge.n	60001736 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001764:	tst.w	r3, #65536	; 0x10000
60001768:	beq.n	6000176e <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000176a:	str	r1, [r2, #24]
			continue;
6000176c:	b.n	60001736 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000176e:	lsls	r3, r3, #25
60001770:	bmi.n	60001776 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001772:	str	r7, [r2, #20]
			continue;
60001774:	b.n	60001736 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001776:	pop	{r4, r5, r6, r7}
60001778:	bx	lr
6000177a:	nop
6000177c:	.word	0x400d8000

60001780 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001780:	ldr	r3, [pc, #192]	; (60001844 <usb_init+0xc4>)
60001782:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001786:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001788:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000178c:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001790:	bl	60001b50 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001794:	ldr	r1, [pc, #176]	; (60001848 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001796:	ldr	r0, [pc, #180]	; (6000184c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001798:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000179c:	ldr	r4, [pc, #176]	; (60001850 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000179e:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017a2:	ldr	r3, [pc, #176]	; (60001854 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017a4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600017a8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017ac:	ldr	r2, [r4, #0]
600017ae:	ands	r3, r2
600017b0:	cbnz	r3, 600017ba <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017b2:	ldr.w	r3, [r0, #424]	; 0x1a8
600017b6:	lsls	r2, r3, #30
600017b8:	beq.n	600017f0 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017ba:	ldr	r3, [pc, #144]	; (6000184c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017bc:	mov.w	r1, #2147483648	; 0x80000000
600017c0:	ldr	r2, [pc, #140]	; (60001850 <usb_init+0xd0>)
600017c2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600017c4:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017c6:	ldr.w	r1, [r3, #320]	; 0x140
600017ca:	orr.w	r1, r1, #2
600017ce:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600017d2:	ldr.w	r3, [r2, #320]	; 0x140
600017d6:	lsls	r3, r3, #30
600017d8:	bmi.n	600017d2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017da:	mov.w	r0, #131072	; 0x20000
600017de:	ldr	r1, [pc, #120]	; (60001858 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017e0:	ldr	r3, [pc, #108]	; (60001850 <usb_init+0xd0>)
600017e2:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600017e6:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017e8:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600017ea:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600017ec:	bl	60001b68 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600017f0:	ldr	r5, [pc, #104]	; (6000185c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600017f2:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017f4:	ldr	r3, [pc, #88]	; (60001850 <usb_init+0xd0>)
600017f6:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600017fa:	ldr	r4, [pc, #80]	; (6000184c <usb_init+0xcc>)
600017fc:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600017fe:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001800:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001802:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001804:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001806:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000180a:	mov.w	r2, #768	; 0x300
6000180e:	bl	60001b48 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001812:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001816:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000181a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000181e:	ldr	r2, [pc, #64]	; (60001860 <usb_init+0xe0>)
60001820:	ldr	r1, [pc, #64]	; (60001864 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001822:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001824:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001826:	str.w	r5, [r4, #344]	; 0x158
6000182a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000182e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001832:	ldr	r2, [pc, #52]	; (60001868 <usb_init+0xe8>)
60001834:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001838:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000183a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000183c:	str.w	r3, [r4, #320]	; 0x140
60001840:	pop	{r4, r5, r6, pc}
60001842:	nop
60001844:	.word	0x400d8000
60001848:	.word	0x400fc000
6000184c:	.word	0x402e0000
60001850:	.word	0x400d9000
60001854:	.word	0x001e1c00
60001858:	.word	0xe000e28c
6000185c:	.word	0x20006000
60001860:	.word	0x20004c00
60001864:	.word	0x00008d21
60001868:	.word	0xe000e10c

6000186c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000186c:	ldr	r3, [pc, #68]	; (600018b4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000186e:	ldr	r1, [pc, #72]	; (600018b8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001870:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001872:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001874:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001878:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000187a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000187c:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001880:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001882:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001884:	orr.w	r0, r0, #768	; 0x300
60001888:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000188a:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000188c:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000188e:	ldr	r3, [r2, #72]	; 0x48
60001890:	lsls	r3, r3, #24
60001892:	bmi.n	6000188e <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001894:	ldr	r3, [pc, #36]	; (600018bc <analog_init+0x50>)
60001896:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000189a:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000189c:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000189e:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600018a0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600018a2:	ldr	r3, [r2, #72]	; 0x48
600018a4:	ands.w	r3, r3, #128	; 0x80
600018a8:	bne.n	600018a2 <analog_init+0x36>
	calibrating = 0;
600018aa:	ldr	r2, [pc, #20]	; (600018c0 <analog_init+0x54>)
600018ac:	strb	r3, [r2, #0]
}
600018ae:	pop	{r4, r5}
600018b0:	bx	lr
600018b2:	nop
600018b4:	.word	0x400fc000
600018b8:	.word	0x400c4000
600018bc:	.word	0x400c8000
600018c0:	.word	0x20004a28

600018c4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018c4:	ldr	r2, [pc, #236]	; (600019b4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018c6:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018ca:	ldr	r1, [pc, #236]	; (600019b8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018cc:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018ce:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600018d0:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018d2:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018d6:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018d8:	ldr.w	lr, [pc, #256]	; 600019dc <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018dc:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018de:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018e2:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018e6:	ldr	r7, [pc, #212]	; (600019bc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018e8:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600018ea:	ubfx	r4, r3, #8, #12
600018ee:	ldr	r6, [pc, #208]	; (600019c0 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
600018f0:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600018f4:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018f8:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600018fc:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001900:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001904:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001908:	vmov	s15, r4
6000190c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001910:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001912:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001916:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000191a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000191e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001920:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001924:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001928:	ldr	r5, [pc, #152]	; (600019c4 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000192a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000192e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001930:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001934:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001938:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000193a:	vdiv.f32	s11, s14, s13
6000193e:	ldr	r6, [pc, #136]	; (600019c8 <tempmon_init+0x104>)
60001940:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001942:	ldr	r1, [pc, #136]	; (600019cc <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001944:	ldr	r4, [pc, #136]	; (600019d0 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001946:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000194a:	vmov	s15, r3
6000194e:	ldr	r3, [pc, #132]	; (600019d4 <tempmon_init+0x110>)
60001950:	str.w	r3, [r6, #320]	; 0x140
60001954:	vcvt.f32.u32	s15, s15
60001958:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000195c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001960:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001964:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001968:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000196c:	vmov	r3, s11
60001970:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001974:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001978:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000197c:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000197e:	and.w	r1, r1, r5, lsl #16
60001982:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001986:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000198a:	orrs	r3, r1
6000198c:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001990:	vmov	r3, s15
60001994:	ldr.w	r1, [r2, #272]	; 0x110
60001998:	ubfx	r3, r3, #0, #12
6000199c:	orrs	r3, r1
6000199e:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600019a2:	ldr	r3, [r2, #0]
600019a4:	orr.w	r3, r3, #2
600019a8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019aa:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600019ac:	ldr	r3, [pc, #40]	; (600019d8 <tempmon_init+0x114>)
600019ae:	movs	r2, #1
600019b0:	str	r2, [r3, #0]
600019b2:	pop	{r4, r5, r6, r7, pc}
600019b4:	.word	0x400d8180
600019b8:	.word	0x401f4400
600019bc:	.word	0x20004a34
600019c0:	.word	0x20004a38
600019c4:	.word	0x20004a30
600019c8:	.word	0x20004c00
600019cc:	.word	0x0fff0000
600019d0:	.word	0xe000e440
600019d4:	.word	0x00009609
600019d8:	.word	0xe000e108
600019dc:	.word	0x20004a2c

600019e0 <usb_string_mtp>:
600019e0:	..M.T.P.

600019e8 <usb_string_product_name_default>:
600019e8:	..T.e.e.n.s.y. .
600019f8:	M.T.P. .D.i.s.k.
60001a08:	/.S.e.r.i.a.l...

60001a18 <usb_string_manufacturer_name_default>:
60001a18:	..T.e.e.n.s.y.d.
60001a28:	u.i.n.o.

60001a30 <string0>:
60001a30:	....

60001a34 <usb_config_descriptor_12>:
60001a34:	..i.....2.......
60001a44:	...........$....
60001a54:	$....$...$......
60001a64:	................
60001a74:	.@......@.......
60001a84:	........@......@
60001a94:	............

60001aa0 <usb_config_descriptor_480>:
60001aa0:	..i.....2.......
60001ab0:	...........$....
60001ac0:	$....$...$......
60001ad0:	................
60001ae0:	................
60001af0:	................
60001b00:	............

60001b0c <qualifier_descriptor>:
60001b0c:	.......@....

60001b18 <_init>:
60001b18:	push	{r3, r4, r5, r6, r7, lr}
60001b1a:	nop
60001b1c:	pop	{r3, r4, r5, r6, r7}
60001b1e:	pop	{r3}
60001b20:	mov	lr, r3
60001b22:	bx	lr
60001b24:			; <UNDEFINED> instruction: 0xffffffff

60001b28 <____libc_init_array_veneer>:
60001b28:	ldr.w	pc, [pc]	; 60001b2c <____libc_init_array_veneer+0x4>
60001b2c:	.word	0x0000aa0d

60001b30 <__main_veneer>:
60001b30:	ldr.w	pc, [pc]	; 60001b34 <__main_veneer+0x4>
60001b34:	.word	0x00009a65

60001b38 <__set_arm_clock_veneer>:
60001b38:	ldr.w	pc, [pc]	; 60001b3c <__set_arm_clock_veneer+0x4>
60001b3c:	.word	0x00008915

60001b40 <__pwm_init_veneer>:
60001b40:	ldr.w	pc, [pc]	; 60001b44 <__pwm_init_veneer+0x4>
60001b44:	.word	0x0000962d

60001b48 <__memset_veneer>:
60001b48:	ldr.w	pc, [pc]	; 60001b4c <__memset_veneer+0x4>
60001b4c:	.word	0x0000b1ed

60001b50 <__usb_init_serialnumber_veneer>:
60001b50:	ldr.w	pc, [pc]	; 60001b54 <__usb_init_serialnumber_veneer+0x4>
60001b54:	.word	0x000099bd

60001b58 <__startup_early_hook_veneer>:
60001b58:	ldr.w	pc, [pc]	; 60001b5c <__startup_early_hook_veneer+0x4>
60001b5c:	.word	0x00008111

60001b60 <__startup_late_hook_veneer>:
60001b60:	ldr.w	pc, [pc]	; 60001b64 <__startup_late_hook_veneer+0x4>
60001b64:	.word	0x00008115

60001b68 <__delay_veneer>:
60001b68:	ldr.w	pc, [pc]	; 60001b6c <__delay_veneer+0x4>
60001b6c:	.word	0x000094d9

60001b70 <__init_array_start>:
60001b70:	.word	0x00000045
60001b74:	.word	0x000002c1
60001b78:	.word	0x00005d99

60001b7c <__init_array_end>:
60001b7c:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r0, #11
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	adcs.w	r0, r4, r0

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r0, #11
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	adcs.w	r0, r4, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	asrs	r0, r0, #11
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	.word	0x47702000

00000080 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
      80:	push	{r3, r4, r5, lr}
      82:	mov	r4, r0
      84:	ldr	r3, [pc, #40]	; (b0 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      86:	ldr	r5, [pc, #44]	; (b4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
      88:	adds	r0, #180	; 0xb4
      8a:	str.w	r3, [r0, #-180]
      8e:	str.w	r5, [r4, #164]	; 0xa4
      92:	bl	3814 <FsBaseFile::close()>
      96:	.short	0x6565
      98:	add.w	r0, r4, #100	; 0x64
      9c:	.word	0xfbbaf003
      a0:	str	r5, [r4, #4]
      a2:	.short	0xf104
      a4:	movs	r4, r2
      a6:	.short	0xf003
      a8:			; <UNDEFINED> instruction: 0xfbb54620
      ac:	.word	0xbf00bd38
      b0:	lsls	r0, r7, #4
      b2:	movs	r0, #0
      b4:	.word	0x20000008

000000b8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
      b8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      bc:	mov	r0, r3
      be:	b.w	27e0 <FatFile::sync()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      c6:	.short	0xf001
      c8:	hlt	0x003f
      ca:	bx	lr

000000cc <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
      cc:	.word	0xb1136c83
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
      d0:	mov	r0, r3
      d2:	b.w	2338 <FatFile::peek()>
      d6:	ldr	r0, [r0, #76]	; 0x4c
      d8:	cbz	r0, de <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      da:	b.w	6e4 <ExFatFile::peek()>
    return BaseFile::peek();
  }
      de:	mov.w	r0, #4294967295
      e2:	bx	lr

000000e4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      e4:	ldr	r3, [r0, #72]	; 0x48
      e6:	.short	0xb500
      e8:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
      ea:	.short	0xb163
      ec:	mov	r0, r3
      ee:	.short	0x2201
      f0:	add.w	r1, sp, #7
      f4:	.word	0xf856f002
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
      f8:	cmp	r0, #1
      fa:	.short	0xd10c
      fc:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     100:	.word	0xf85db003
     104:			; <UNDEFINED> instruction: 0xfb046cc0
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     108:	cbz	r0, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10a:	movs	r2, #1
     10c:	add.w	r1, sp, #7
     110:	bl	53c <ExFatFile::read(void*, unsigned int)>
     114:	b.n	f8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     116:	mov.w	r0, #4294967295
     11a:	b.n	100 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000011c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     11c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     11e:	cbz	r2, 13a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     120:	ldrb	r3, [r2, #0]
     122:	.short	0xf003
     124:	lsls	r0, r1, #12
     126:	and.w	r0, r3, #255	; 0xff
     12a:	cbz	r3, 170 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     12c:	ldr	r3, [r2, #28]
     12e:	.short	0x6950
     130:	subs	r0, r3, r0
     132:	.short	0xbf48
     134:	mvnmi.w	r0, #2147483648	; 0x80000000
     138:	bx	lr
     13a:	ldr	r1, [r0, #76]	; 0x4c
     13c:	cbz	r1, 172 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     13e:	ldrb.w	r3, [r1, #49]	; 0x31
     142:	and.w	r3, r3, #8
     146:	and.w	r0, r3, #255	; 0xff
     14a:	cbz	r3, 170 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     14c:	ldrd	r2, r3, [r1, #16]
     150:	.word	0x0100e9d1
     154:	push	{r4, r5}
     156:	.short	0x1a10
     158:	mov.w	r5, #0
     15c:	.word	0x4400f06f
     160:	sbc.w	r1, r3, r1
     164:	cmp	r5, r1
     166:	.short	0xbf08
     168:	cmpeq	r4, r0
     16a:	.short	0xd200
     16c:	mov	r0, r4
    return BaseFile::available();
  }
     16e:	.short	0xbc30
     170:	bx	lr
     172:	mov	r0, r1
     174:	bx	lr
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
     176:	.short	0xbf00

00000178 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     178:	push	{lr}
     17a:	.short	0x6c83
     17c:	sub	sp, #12
     17e:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     182:	.short	0xb143
     184:	mov	r0, r3
     186:	.short	0x2201
     188:	add.w	r1, sp, #7
     18c:	.word	0xfb2ef002
    return BaseFile::write(b);
  }
     190:	add	sp, #12
     192:	.short	0xf85d
     194:			; <UNDEFINED> instruction: 0xfb046cc0
     198:	.word	0xd0f92800
     19c:	movs	r2, #1
     19e:	add.w	r1, sp, #7
     1a2:	.short	0xf001
     1a4:	mrrc2	0, 0, fp, fp, cr3	; <UNPREDICTABLE>
     1a8:	.word	0xfb04f85d

000001ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1ac:	ldr	r3, [r0, #72]	; 0x48
     1ae:	cbz	r3, 1b6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     1b0:	.word	0xf0024618
     1b4:	cbnz	r3, 1fe <logg(unsigned long, char const*) [clone .part.13]+0x3e>
     1b6:	.short	0x6cc0
     1b8:	cbz	r0, 1be <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     1ba:	.short	0xf001
     1bc:	pop	{r0, r1, r2, r3, r6}
    return BaseFile::write(buffer, size);
  }
     1be:	.short	0x4770

000001c0 <logg(unsigned long, char const*) [clone .part.13]>:

  MTPStorage_SD storage;
  MTPD       mtpd(&storage);


void logg(uint32_t del, const char *txt)
     1c0:	push	{r4, lr}
     1c2:	.short	0x4604
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     1c4:	bl	b7c0 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1c8:	.word	0x46204601
     1cc:	bl	8810 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     1d0:	ldr	r0, [pc, #36]	; (1f8 <logg(unsigned long, char const*) [clone .part.13]+0x38>)
     1d2:	.short	0xf009
     1d4:	stc2	11, cr4, [sp, #36]!	; 0x24
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     1d8:	.word	0x0712689a
     1dc:	bpl.n	1ee <logg(unsigned long, char const*) [clone .part.13]+0x2e>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     1de:	.short	0x2208
     1e0:	str.w	r2, [r3, #136]	; 0x88
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     1e4:	.word	0x4b074a06
     1e8:	ldr	r2, [r2, #0]
  {
    Serial.println(txt); 
#if USE_SDIO==1
    digitalWriteFast(13,!digitalReadFast(13));
#endif
    to=millis();
     1ea:	.short	0x601a
     1ec:	pop	{r4, pc}
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     1ee:	.short	0x2208
     1f0:	str.w	r2, [r3, #132]	; 0x84
     1f4:	b.n	1e4 <logg(unsigned long, char const*) [clone .part.13]+0x24>
     1f6:	.short	0xbf00
     1f8:	lsrs	r4, r7, #3
     1fa:	.short	0x2000
     1fc:	ands	r0, r0
     1fe:	.short	0x4200
     200:	ldr	r2, [pc, #144]	; (294 <loop+0x8>)
     202:	.short	0x2000
     204:	asrs	r4, r3, #11
     206:	.short	0x2000

00000208 <setup>:
  }
}

void setup()
{ 
     208:	push	{r4, r5, r6, lr}
     20a:	ldr	r2, [pc, #100]	; (270 <setup+0x68>)
  while(!Serial && millis()<3000); 
     20c:	.word	0x34b7f640
     210:	ldr	r5, [pc, #96]	; (274 <setup+0x6c>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     212:	.short	0x4819
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     214:	ldr	r1, [pc, #100]	; (27c <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     216:	.short	0x782b
     218:	cbz	r3, 244 <setup+0x3c>
     21a:	.short	0x7803
     21c:	lsls	r3, r3, #31
     21e:	.short	0xd511
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     220:	ldr	r3, [r2, #0]
     222:	.short	0x680e
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     224:	subs	r3, r3, r6
     226:	cmp	r3, #14
     228:	bls.n	244 <setup+0x3c>
  usb_mtp_configure();
     22a:	bl	7e84 <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     22e:	bl	5418 <Storage_init()>
     232:	.short	0xb980
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     234:	movs	r1, #10
     236:	.short	0x4812
     238:	bl	8810 <usb_serial_write>
     23c:	.word	0xf0094811
     240:	ldc2l	7, cr14, [r7, #-1016]!	; 0xfffffc08
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
     244:	.word	0x42a36813
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     248:	bls.n	216 <setup+0xe>
  usb_mtp_configure();
     24a:	.short	0xf007
     24c:	cdp2	0, 1, cr15, cr11, cr5, {0}
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     250:	.word	0x2800f8e3
     254:	beq.n	234 <setup+0x2c>
     256:	.short	0x2108
     258:	ldr	r0, [pc, #44]	; (288 <setup+0x80>)
     25a:	bl	8810 <usb_serial_write>
     25e:	ldr	r0, [pc, #36]	; (284 <setup+0x7c>)
     260:	bl	9d30 <Print::println()>

  Serial.println("MTP test");

#if USE_SDIO==1
  pinMode(13,OUTPUT);
     264:	.word	0x200d2101
#endif

}
     268:	ldmia.w	sp!, {r4, r5, r6, lr}
  if(!Storage_init()) {Serial.println("No storage"); while(1);};

  Serial.println("MTP test");

#if USE_SDIO==1
  pinMode(13,OUTPUT);
     26c:	.word	0xbb66f009
     270:	ldr	r2, [pc, #144]	; (304 <_GLOBAL__sub_I_storage+0x44>)
     272:	.short	0x2000
     274:	ldr	r2, [pc, #96]	; (2d8 <_GLOBAL__sub_I_storage+0x18>)
     276:	.short	0x2000
     278:	ldr	r1, [pc, #288]	; (39c <ExFatFile::getName(char*, unsigned int)+0x2c>)
     27a:	movs	r0, #0
     27c:	ldr	r6, [pc, #800]	; (5a0 <ExFatFile::read(void*, unsigned int)+0x64>)
     27e:	.short	0x2000
     280:	lsls	r0, r1, #1
     282:	movs	r0, #0
     284:	lsrs	r4, r7, #3
     286:	.short	0x2000
     288:	lsls	r4, r2, #1
     28a:	.short	0x2000

0000028c <loop>:
#endif

}

void loop()
{ 
     28c:	push	{r3, lr}
  mtpd.loop();
     28e:	ldr	r0, [pc, #32]	; (2b0 <loop+0x24>)
     290:	.word	0xf96ef007
     294:	ldr	r3, [pc, #28]	; (2b4 <loop+0x28>)
  MTPD       mtpd(&storage);


void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
     296:	.short	0x4a08
     298:	ldr	r3, [r3, #0]
     29a:	.short	0x6812
     29c:	subs	r3, r3, r2
     29e:	cmp.w	r3, #1000	; 0x3e8
     2a2:	.short	0xd800
     2a4:	pop	{r3, pc}
     2a6:	ldr	r0, [pc, #20]	; (2bc <loop+0x30>)
{ 
  mtpd.loop();

  logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     2a8:	.word	0x4008e8bd
     2ac:	b.w	1c0 <logg(unsigned long, char const*) [clone .part.13]>
     2b0:	.word	0x20001400
     2b4:	ldr	r2, [pc, #144]	; (348 <_GLOBAL__sub_I_storage+0x88>)
     2b6:	movs	r0, #0
     2b8:	.word	0x200012dc
     2bc:	lsls	r0, r4, #1
     2be:	.short	0x2000

000002c0 <_GLOBAL__sub_I_storage>:
     2c0:	push	{r3, r4, r5, r6, r7, lr}
     2c2:	ldr	r1, [pc, #128]	; (344 <_GLOBAL__sub_I_storage+0x84>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     2c4:	movs	r5, #0
     2c6:	ldr	r4, [pc, #128]	; (348 <_GLOBAL__sub_I_storage+0x88>)
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     2c8:	mov.w	r6, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     2cc:	.word	0xf06f4b1f
     2d0:	lsls	r1, r0, #28
#endif

  #include "MTP.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
     2d2:	.short	0x4a1f
     2d4:	mov	r0, r4
     2d6:	.short	0x6021
     2d8:	str	r3, [r4, #4]
     2da:	.short	0x491e
     2dc:	str	r3, [r4, #84]	; 0x54
     2de:	.short	0xf8c4
     2e0:	adds	r0, #164	; 0xa4
     2e2:	.short	0x7225
     2e4:	strb	r5, [r4, #16]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     2e6:	str	r5, [r4, #76]	; 0x4c
     2e8:	str	r5, [r4, #80]	; 0x50
     2ea:	strb.w	r5, [r4, #88]	; 0x58
     2ee:	strb.w	r5, [r4, #96]	; 0x60
     2f2:	str.w	r5, [r4, #156]	; 0x9c
     2f6:	.short	0xf8c4
     2f8:	str	r0, [r4, r2]
     2fa:	strb.w	r5, [r4, #168]	; 0xa8
     2fe:	.short	0xf884
     300:	str	r0, [r6, r2]
     302:	.short	0xf8c4
     304:	str	r4, [r5, r3]
     306:	str.w	r5, [r4, #240]	; 0xf0
     30a:	.short	0x60e6
     30c:	str	r6, [r4, #92]	; 0x5c
     30e:	.short	0xf8c4
     310:	str	r4, [r5, #8]
     312:	.short	0xf8c4
     314:	strb	r0, [r7, #3]
     316:	.short	0xf8c4
     318:	str	r4, [r6, r3]
     31a:	str.w	r5, [r4, #252]	; 0xfc
     31e:	strb.w	r5, [r4, #256]	; 0x100
     322:	strb.w	r5, [r4, #257]	; 0x101
     326:	bl	9db0 <__aeabi_atexit>
#include "Storage.h"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     32a:	ldr	r3, [pc, #44]	; (358 <_GLOBAL__sub_I_storage+0x98>)
     32c:	movw	r0, #9248	; 0x2420
     330:	movw	r1, #9252	; 0x2424
     334:	movw	r2, #9256	; 0x2428
     338:	str	r4, [r3, #0]
     33a:	.short	0x501d
     33c:	strb	r5, [r3, r1]
     33e:	.short	0x509d
     340:	pop	{r3, r4, r5, r6, r7, pc}
     342:	.short	0xbf00
     344:	lsls	r0, r7, #4
     346:	.short	0x2000
     348:	asrs	r0, r4, #11
     34a:	.short	0x2000
     34c:	movs	r4, r5
     34e:	.short	0x2000
     350:	lsrs	r0, r7, #2
     352:	.short	0x2000
     354:	lsls	r1, r0, #2
     356:	.short	0x0000
     358:	asrs	r0, r0, #16
     35a:	.short	0x2000

0000035c <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
     35c:	push	{r4, lr}
     35e:	.short	0x4604
  bool rtn = sync();
     360:	bl	1648 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
     364:	.word	0xf8842300
     368:	adds	r0, #49	; 0x31
  m_flags = 0;
     36a:	.short	0xf884
     36c:	adds	r0, #51	; 0x33
  return rtn;
}
     36e:	.short	0xbd10

00000370 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     370:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     374:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     378:	.word	0x4606b085
     37c:	mov	r8, r1
     37e:	.short	0x4615
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     380:	add.w	r9, sp, #4
  size_t n = 0;
  if (!isOpen()) {
     384:	.word	0x4031f890
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     388:	ldmia.w	r3, {r0, r1, r2}
     38c:	.word	0x0007e889
  size_t n = 0;
  if (!isOpen()) {
     390:	cmp	r4, #0
     392:	.short	0xd038
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     394:	ldrb.w	r3, [r6, #48]	; 0x30
     398:	.word	0xd93b2b01
     39c:	movs	r7, #1
     39e:	.short	0x2400
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
     3a0:	cmp	r7, #1
     3a2:	.short	0x4649
     3a4:	ldr	r0, [r6, #32]
     3a6:	.short	0xbf0c
     3a8:	moveq	r2, #64	; 0x40
     3aa:	.short	0x2220
     3ac:	bl	10fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>	; unpredictable branch in IT block

     3b0:	.word	0xd1282801
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
     3b4:	movs	r2, #0
     3b6:	.short	0x4649
     3b8:	ldr	r0, [r6, #32]
     3ba:	blne	10c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
     3be:	.short	0xb310
     3c0:	ldrb	r3, [r0, #0]
     3c2:	.short	0x2bc1
     3c4:	bne.n	406 <ExFatFile::getName(char*, unsigned int)+0x96>
     3c6:	add.w	r1, r8, r4
     3ca:	.short	0x4622
     3cc:	add.w	lr, r0, #30
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
     3d0:	.word	0x233f3401
     3d4:	cmp	r4, r5
     3d6:	.short	0xd20f
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
     3d8:	ldrh.w	r2, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     3dc:	.word	0xbf982a7e
     3e0:	uxtbls	r3, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     3e2:	.short	0x4570
     3e4:	mov	r2, r4
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     3e6:	.short	0xf801
     3e8:	subs	r3, #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     3ea:	.short	0xd1f1
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     3ec:	adds	r7, #1
     3ee:	.short	0xf896
     3f0:	adds	r0, #48	; 0x30
     3f2:	.short	0xb2ff
     3f4:	cmp	r3, r7
     3f6:	.short	0xd8d3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     3f8:	movs	r3, #0
  return n;
     3fa:	.short	0x4610
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     3fc:	strb.w	r3, [r8, r2]
  return n;

 fail:
  *name = 0;
  return 0;
}
     400:	.word	0xe8bdb005
     404:	strh	r0, [r6, #30]
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
     406:	.short	0x2300
  return 0;
     408:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
     40a:	strb.w	r3, [r8]
  return 0;
}
     40e:	add	sp, #20
     410:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     414:	movs	r2, #0
     416:	.short	0xe7ef

00000418 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
     418:	ldrb.w	r2, [r0, #49]	; 0x31
     41c:	.word	0x2000b10a
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
     420:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
     422:	push	{r3, r4, r5, lr}
     424:	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     426:	.short	0x4611
     428:	movs	r2, #56	; 0x38
     42a:	.short	0x4604
     42c:	bl	b1ec <memset>
  m_attributes = FILE_ATTR_ROOT;
     430:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     432:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     434:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     436:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     43a:	strb.w	r0, [r4, #51]	; 0x33
     43e:	.short	0xbd38

00000440 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
     440:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
     444:	.word	0x28207808
     448:	bne.n	452 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
     44a:	ldrb.w	r0, [r1, #1]!
     44e:	cmp	r0, #32
     450:	beq.n	44a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
     452:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
     454:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
     456:	cmp	r0, #47	; 0x2f
     458:	beq.n	524 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
     45a:	cmp	r0, #0
     45c:	beq.n	524 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     45e:	cmp	r0, #92	; 0x5c
     460:	beq.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
     462:	sub.w	r4, r0, #34	; 0x22
     466:	uxtb	r4, r4
     468:	.word	0xd9232c1a
     46c:	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
     46e:	.short	0x2600
     470:	ldr.w	lr, [pc, #196]	; 538 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
     474:	b.n	47e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
     476:	cmp	r4, #26
     478:	lsr.w	r7, lr, r4
     47c:	bls.n	4c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
     47e:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     482:	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     484:	.word	0x0c20f1a0
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     488:	mov	r8, r5
     48a:	cmp	r4, #1
     48c:	mov	r7, r6
     48e:	.short	0xd90e
     490:	cmp	r0, #124	; 0x7c
     492:	beq.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     494:	cmp.w	ip, #94	; 0x5e
     498:	bhi.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     49a:	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     49e:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
     4a2:	cbz	r0, 4ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
     4a4:	cmp	r0, #47	; 0x2f
     4a6:	uxtb	r4, r4
     4a8:	beq.n	4ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
     4aa:	cmp	r0, #92	; 0x5c
     4ac:	bne.n	476 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
     4ae:	movs	r0, #0
     4b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4b4:	ldr	r5, [pc, #128]	; (538 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
     4b6:	.short	0xfa25
     4b8:	and.w	r7, r4, #7503872	; 0x728000
     4bc:	bpl.n	46c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
     4be:	movs	r0, #0
     4c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4c4:	lsls	r4, r7, #31
     4c6:	bpl.n	47e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
     4c8:	movs	r0, #0
     4ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
     4ce:	cmp	r0, #47	; 0x2f
     4d0:	beq.n	4d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
     4d2:	cmp	r0, #32
     4d4:	bne.n	51e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
     4d6:	adds	r0, r6, #1
     4d8:	add	r0, r1
     4da:	mov	r5, r0
     4dc:	ldrb.w	r4, [r0], #1
     4e0:	.word	0xd0fa2c20
     4e4:	cmp	r4, #47	; 0x2f
     4e6:	beq.n	4da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
     4e8:	.word	0xb19e601d

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
     4ec:	add	r7, r1
     4ee:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
     4f2:	cmp	r3, #32
     4f4:	.word	0x2b2ed001
     4f8:	bne.n	510 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
     4fa:	subs	r3, r6, #1
     4fc:	add	r1, r3
      break;
    }
    len--;
     4fe:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
     500:	cbz	r3, 516 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
     502:	ldrb.w	r0, [r1, #-1]!
     506:	subs	r3, #1
    if (c != '.' && c != ' ') {
     508:	.word	0xd0f8282e
     50c:	cmp	r0, #32
     50e:	beq.n	4fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
     510:	cmp	r6, #255	; 0xff
     512:	bgt.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
     514:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
     516:	str	r3, [r2, #0]
  return true;
     518:	movs	r0, #1
     51a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     51e:	str.w	r8, [r3]
     522:	b.n	4ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
     524:	cmp	r0, #32
     526:	beq.n	52c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
     528:	cmp	r0, #47	; 0x2f
     52a:	bne.n	532 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
     52c:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     52e:	.short	0x463e
     530:	b.n	4d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     532:	str	r1, [r3, #0]
     534:	movs	r3, #0
     536:	b.n	516 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
     538:	lsls	r1, r0, #4
     53a:	lsls	r0, r0, #20

0000053c <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
     53c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     540:	ldrb.w	r3, [r0, #51]	; 0x33
     544:	sub	sp, #12
     546:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
     548:	lsls	r5, r3, #31
     54a:	.short	0xf140
     54c:	strh	r1, [r6, #4]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     54e:	.short	0x0658
     550:	mov	r5, r1
     552:	mov	r6, r2
     554:	bpl.w	6c6 <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
     558:	ldrd	r0, r1, [r4]
     55c:	ldrd	r2, r3, [r4, #16]
     560:	adds.w	r8, r0, r6
     564:	adc.w	r9, r1, #0
     568:	cmp	r3, r9
     56a:	it	eq
     56c:	cmpeq	r2, r8
     56e:	bcc.w	6d2 <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     572:	cmp	r6, #0
     574:	beq.w	6d6 <ExFatFile::read(void*, unsigned int)+0x19a>
     578:	mov	sl, r4
     57a:	mov	r8, r6
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     57c:	movw	r9, #511	; 0x1ff
     580:	ldrd	r2, r3, [sl], #24
     584:	b.n	62a <ExFatFile::read(void*, unsigned int)+0xee>
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
     586:	orrs	r3, r2
     588:	bne.n	668 <ExFatFile::read(void*, unsigned int)+0x12c>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
     58a:	ldrb.w	r3, [r4, #49]	; 0x31
     58e:	lsls	r2, r3, #25
     590:	ite	mi
     592:	ldrmi.w	r1, [r0, #1068]	; 0x42c
     596:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
     598:	str	r1, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
     59a:	subs	r1, #2
     59c:	lsrs	r7, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
     59e:	ldrb.w	ip, [r0, #1085]	; 0x43d
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     5a2:	cmp	r8, r9
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
     5a4:	ldr.w	r2, [r0, #1060]	; 0x424
     5a8:	lsl.w	lr, r1, ip
     5ac:	add.w	r1, r7, r2
     5b0:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     5b2:	bls.n	63e <ExFatFile::read(void*, unsigned int)+0x102>
     5b4:	cmp.w	fp, #0
     5b8:	bne.n	63e <ExFatFile::read(void*, unsigned int)+0x102>
     5ba:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
     5be:	cmp	r1, r2
     5c0:	beq.n	63e <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
     5c2:	cmp.w	r8, #1024	; 0x400
     5c6:	bcc.n	676 <ExFatFile::read(void*, unsigned int)+0x13a>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
     5c8:	mov.w	lr, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
     5cc:	mov.w	r3, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
     5d0:	lsl.w	ip, lr, ip
     5d4:	rsb	lr, r7, ip
     5d8:	mov	r7, r3
     5da:	cmp	r3, lr
     5dc:	it	cs
     5de:	movcs	r7, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     5e0:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     5e2:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     5e6:	bhi.n	600 <ExFatFile::read(void*, unsigned int)+0xc4>
     5e8:	adds	r3, r1, r7
     5ea:	cmp	r3, r2
     5ec:	bls.n	600 <ExFatFile::read(void*, unsigned int)+0xc4>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
     5ee:	add.w	r0, r0, #524	; 0x20c
     5f2:	str	r1, [sp, #4]
     5f4:	bl	e30 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
     5f8:	cmp	r0, #0
     5fa:	beq.n	6b0 <ExFatFile::read(void*, unsigned int)+0x174>
     5fc:	ldr	r0, [r4, #32]
     5fe:	ldr	r1, [sp, #4]
     600:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
     604:	mov	r3, r7
     606:	mov	r2, r5
     608:	ldr	r7, [r0, #0]
     60a:	ldr	r7, [r7, #12]
     60c:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
     60e:	cmp	r0, #0
     610:	beq.n	6b0 <ExFatFile::read(void*, unsigned int)+0x174>
     612:	mov	r0, fp
     614:	movs	r1, #0
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
     616:	add	r5, fp
    m_curPosition += n;
     618:	ldrd	r2, r3, [r4]
     61c:	adds	r2, r2, r0
     61e:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     620:	subs.w	r8, r8, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
     624:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     628:	beq.n	6d6 <ExFatFile::read(void*, unsigned int)+0x19a>
    clusterOffset = m_curPosition & m_vol->clusterMask();
     62a:	ldr	r0, [r4, #32]
     62c:	ldr.w	r7, [r0, #1072]	; 0x430
     630:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
     632:	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
     636:	cmp	r7, #0
     638:	beq.n	586 <ExFatFile::read(void*, unsigned int)+0x4a>
     63a:	ldr	r1, [r4, #24]
     63c:	b.n	59a <ExFatFile::read(void*, unsigned int)+0x5e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     63e:	add.w	r0, r0, #524	; 0x20c
     642:	movs	r2, #0
     644:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
     648:	cbz	r0, 6b0 <ExFatFile::read(void*, unsigned int)+0x174>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
     64a:	rsb	r3, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
     64e:	add.w	r1, r0, fp
     652:	mov	r0, r5
     654:	cmp	r3, r8
     656:	it	cs
     658:	movcs	r3, r8
     65a:	mov	fp, r3
     65c:	mov	r2, r3
     65e:	bl	7fc4 <memcpy>
     662:	movs	r1, #0
     664:	mov	r0, fp
     666:	b.n	616 <ExFatFile::read(void*, unsigned int)+0xda>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
     668:	ldrb.w	r3, [r4, #51]	; 0x33
     66c:	lsls	r3, r3, #25
     66e:	bpl.n	690 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster++;
     670:	ldr	r1, [r4, #24]
     672:	adds	r1, #1
     674:	b.n	598 <ExFatFile::read(void*, unsigned int)+0x5c>
     676:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
     67a:	mov	r2, r5
     67c:	ldr	r3, [r0, #0]
     67e:	ldr	r3, [r3, #8]
     680:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
     682:	cbz	r0, 6b0 <ExFatFile::read(void*, unsigned int)+0x174>
     684:	mov.w	r0, #512	; 0x200
     688:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     68a:	mov.w	fp, #512	; 0x200
     68e:	b.n	616 <ExFatFile::read(void*, unsigned int)+0xda>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
     690:	mov	r2, sl
     692:	ldr	r1, [r4, #24]
     694:	bl	1154 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     698:	sxtb	r0, r0
        if (fg < 0) {
     69a:	cmp	r0, #0
     69c:	blt.n	6b0 <ExFatFile::read(void*, unsigned int)+0x174>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
     69e:	beq.n	6a6 <ExFatFile::read(void*, unsigned int)+0x16a>
     6a0:	ldr	r0, [r4, #32]
     6a2:	ldr	r1, [r4, #24]
     6a4:	b.n	59a <ExFatFile::read(void*, unsigned int)+0x5e>
          // EOF if directory.
          if (isDir()) {
     6a6:	ldrb.w	r3, [r4, #49]	; 0x31
     6aa:	tst.w	r3, #80	; 0x50
     6ae:	bne.n	6da <ExFatFile::read(void*, unsigned int)+0x19e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     6b0:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
     6b4:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     6b8:	orr.w	r3, r3, #2
     6bc:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
     6c0:	add	sp, #12
     6c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     6c6:	ldrb.w	r3, [r4, #49]	; 0x31
     6ca:	lsls	r1, r3, #28
     6cc:	bmi.w	558 <ExFatFile::read(void*, unsigned int)+0x1c>
     6d0:	b.n	572 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
     6d2:	subs	r6, r2, r0
     6d4:	b.n	572 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     6d6:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
     6da:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
     6de:	add	sp, #12
     6e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000006e4 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
     6e4:	push	{r4, r5, r6, r7, lr}
     6e6:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6e8:	movs	r2, #1
     6ea:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
     6ec:	ldr	r5, [r0, #24]
     6ee:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
     6f2:	ldrd	r6, r7, [r0]
     6f6:	bl	53c <ExFatFile::read(void*, unsigned int)>
     6fa:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
     6fc:	str	r5, [r4, #24]
     6fe:	ite	eq
     700:	ldrbeq.w	r0, [sp, #7]
     704:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
     708:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
     70c:	add	sp, #12
     70e:	pop	{r4, r5, r6, r7, pc}

00000710 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
     710:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     714:	ldrb.w	lr, [r0, #49]	; 0x31
     718:	sub	sp, #20
     71a:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
     71c:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
     71e:	cmp.w	lr, #0
     722:	beq.n	792 <ExFatFile::seekSet(unsigned long long)+0x82>
     724:	mov	r6, r2
     726:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
     728:	ldrd	r0, r1, [r0]
     72c:	cmp	r1, r3
     72e:	it	eq
     730:	cmpeq	r0, r2
     732:	beq.n	800 <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
     734:	orrs.w	r3, r6, r7
     738:	bne.n	79c <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
     73a:	movs	r3, #0
     73c:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
     73e:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     740:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
     744:	add	sp, #20
     746:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     74a:	adds.w	r2, r0, #4294967295
     74e:	adc.w	r3, r1, #4294967295
     752:	lsr.w	ip, r2, ip
     756:	lsl.w	r8, r3, r8
     75a:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
     75e:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     762:	orr.w	ip, ip, r8
     766:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
     76a:	beq.n	804 <ExFatFile::seekSet(unsigned long long)+0xf4>
     76c:	cmp	fp, ip
     76e:	bcc.n	804 <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
     770:	rsb	fp, ip, fp
     774:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     776:	add.w	r8, r4, #24
     77a:	mov	r5, fp
     77c:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     77e:	cmp	r5, #0
     780:	beq.n	73e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     782:	ldr	r1, [r4, #24]
     784:	subs	r5, #1
     786:	ldr	r0, [r4, #32]
     788:	bl	1154 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     78c:	cmp	r0, #0
     78e:	bne.n	77c <ExFatFile::seekSet(unsigned long long)+0x6c>
     790:	mov	r5, r9
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
     792:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
     794:	str	r5, [r4, #24]
  return false;
}
     796:	add	sp, #20
     798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
     79c:	tst.w	lr, #8
     7a0:	bne.n	7f2 <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     7a2:	ldr	r3, [r4, #32]
     7a4:	adds.w	r8, r6, #4294967295
     7a8:	ldrb.w	ip, [r3, #1085]	; 0x43d
     7ac:	adc.w	r9, r7, #4294967295
     7b0:	mov	sl, r8
     7b2:	str	r3, [sp, #12]
     7b4:	add.w	ip, ip, #9
     7b8:	mov	fp, r9
  if (isContiguous()) {
     7ba:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     7be:	uxtb.w	ip, ip
  if (isContiguous()) {
     7c2:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     7c6:	rsb	r8, ip, #32
     7ca:	lsr.w	r2, sl, ip
     7ce:	strd	sl, fp, [sp]
     7d2:	ldr	r3, [sp, #4]
     7d4:	sub.w	sl, ip, #32
     7d8:	lsl.w	fp, r3, r8
     7dc:	lsr.w	r3, r3, sl
     7e0:	orr.w	r2, r2, fp
     7e4:	orr.w	fp, r2, r3
  if (isContiguous()) {
     7e8:	beq.n	74a <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
     7ea:	ldr	r3, [r4, #28]
     7ec:	add	r3, fp
     7ee:	str	r3, [r4, #24]
    goto done;
     7f0:	b.n	73e <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
     7f2:	ldrd	r2, r3, [r4, #16]
     7f6:	cmp	r3, r7
     7f8:	it	eq
     7fa:	cmpeq	r2, r6
     7fc:	bcc.n	792 <ExFatFile::seekSet(unsigned long long)+0x82>
     7fe:	b.n	7a2 <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
     800:	movs	r0, #1
     802:	b.n	796 <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
     804:	tst.w	lr, #64	; 0x40
     808:	bne.n	810 <ExFatFile::seekSet(unsigned long long)+0x100>
     80a:	ldr	r3, [r4, #28]
     80c:	str	r3, [r4, #24]
     80e:	b.n	774 <ExFatFile::seekSet(unsigned long long)+0x64>
     810:	ldr	r3, [sp, #12]
     812:	ldr.w	r3, [r3, #1068]	; 0x42c
     816:	b.n	80c <ExFatFile::seekSet(unsigned long long)+0xfc>

00000818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     818:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     81c:	mov	sl, r3
     81e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     820:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     824:	mov	r5, r0
     826:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     828:	cbnz	r3, 836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     82a:	ldrb.w	r3, [r1, #49]	; 0x31
     82e:	mov	r6, r1
     830:	tst.w	r3, #80	; 0x50
     834:	bne.n	848 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
     836:	movs	r3, #0
  m_flags = 0;
  return false;
     838:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
     83a:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
     83e:	strb.w	r3, [r5, #51]	; 0x33
  return false;
}
     842:	add	sp, #76	; 0x4c
     844:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     848:	ldr	r3, [sp, #112]	; 0x70
     84a:	and.w	r3, r3, #3
     84e:	cmp	r3, #1
     850:	beq.n	860 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
     852:	cmp	r3, #2
     854:	beq.w	a6a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x252>
     858:	cmp	r3, #0
     85a:	bne.n	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     85c:	movs	r3, #1
     85e:	b.n	862 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
     860:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
     862:	ldr	r2, [sp, #112]	; 0x70
     864:	and.w	r2, r2, #8
     868:	orrs	r3, r2
     86a:	str	r3, [sp, #4]
  if (name) {
     86c:	ldr	r3, [sp, #0]
     86e:	cmp	r3, #0
     870:	beq.w	a6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x256>
    nameHash = exFatHashName(name, nameLength, 0);
     874:	mov	r0, r3
     876:	movs	r2, #0
     878:	mov	r1, sl
     87a:	bl	127c <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
     87e:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
     882:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
     884:	cbz	r3, 89a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
     886:	ldrd	r2, r3, [r6]
     88a:	orrs	r3, r2
     88c:	beq.n	89a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
     88e:	movs	r1, #0
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     890:	movs	r2, #0
     892:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
     894:	str	r1, [r6, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     896:	strd	r2, r3, [r6]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     89a:	add.w	r3, sl, #14
     89e:	ldr	r1, [pc, #736]	; (b80 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
     8a0:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     8a4:	smull	r2, r1, r1, r3
     8a8:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
     8aa:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
     8ac:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     8ae:	add	r3, r1
     8b0:	rsb	r3, r2, r3, asr #3
     8b4:	uxtb	r3, r3
     8b6:	str	r3, [sp, #12]
     8b8:	adds	r3, #2
     8ba:	uxtb.w	fp, r3

  while (1) {
    n = dir->read(buf, 32);
     8be:	movs	r2, #32
     8c0:	add	r1, sp, #40	; 0x28
     8c2:	mov	r0, r6
     8c4:	bl	53c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     8c8:	cmp	r0, #0
     8ca:	beq.n	948 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
     8cc:	cmp	r0, #32
     8ce:	bne.n	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
     8d0:	ldrb.w	r3, [sp, #40]	; 0x28
     8d4:	lsls	r2, r3, #24
     8d6:	bmi.n	9a6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
     8d8:	cmp	r4, #0
     8da:	bne.n	9a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
     8dc:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
     8de:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
     8e0:	subs	r2, #32
        freePos.cluster = dir->curCluster();
     8e2:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
     8e4:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
     8e6:	adds	r4, #1
     8e8:	uxtb	r4, r4
      }
      if (!buf[0]) {
     8ea:	cbz	r3, 948 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
     8ec:	cmp	r3, #192	; 0xc0
     8ee:	beq.w	a18 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x200>
     8f2:	cmp	r3, #193	; 0xc1
     8f4:	beq.n	9bc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
     8f6:	cmp	r3, #133	; 0x85
     8f8:	bne.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
     8fa:	movs	r2, #56	; 0x38
     8fc:	movs	r1, #0
     8fe:	mov	r0, r5
     900:	bl	b1ec <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     904:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
     908:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
     90c:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     90e:	mov	r0, r6
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
     910:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     914:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
     918:	it	pl
     91a:	orrpl.w	r2, r2, #8
     91e:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     922:	ldr	r3, [r6, #0]
     924:	ldr	r1, [r6, #32]
     926:	ldr	r2, [r6, #24]
     928:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
     92a:	str	r1, [r5, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     92c:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
     92e:	str	r2, [r5, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     930:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     932:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
     934:	ldrb.w	r3, [r6, #51]	; 0x33
     938:	ubfx	r3, r3, #6, #1
     93c:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     940:	bl	53c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     944:	cmp	r0, #0
     946:	bne.n	8cc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb4>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
     948:	ldr	r3, [sp, #112]	; 0x70
     94a:	lsls	r1, r3, #22
     94c:	bpl.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     950:	ldr	r3, [sp, #4]
     952:	lsls	r2, r3, #30
     954:	bpl.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     958:	ldr	r3, [sp, #0]
     95a:	cmp	r3, #0
     95c:	beq.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     960:	cmp	r4, fp
     962:	bcc.n	97e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
     964:	b.n	a74 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
     966:	cmp	r0, #32
     968:	bne.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
     96c:	cbnz	r4, 978 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
     96e:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
     970:	ldr	r1, [r6, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
     972:	subs	r2, #32
      freePos.cluster = dir->curCluster();
     974:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
     976:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     978:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     97a:	cmp	fp, r4
     97c:	bls.n	a74 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    n = dir->read(buf, 32);
     97e:	movs	r2, #32
     980:	add	r1, sp, #40	; 0x28
     982:	mov	r0, r6
     984:	bl	53c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     988:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
     98a:	cmp	r0, #0
     98c:	bne.n	966 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
     98e:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
     990:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
     992:	bl	16a8 <ExFatFile::addDirCluster()>
     996:	cmp	r0, #0
     998:	beq.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
     99c:	str	r7, [r6, #24]
      continue;
     99e:	b.n	97a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
     9a0:	cmp	r4, fp
     9a2:	bcs.n	8ea <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
     9a4:	b.n	8e6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
     9a6:	cmp.w	r9, #0
     9aa:	bne.n	8ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
     9ac:	cmp	r4, fp
     9ae:	it	cc
     9b0:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
     9b2:	cmp	r3, #133	; 0x85
     9b4:	bne.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        continue;
      }
      inSet = true;
     9b6:	mov.w	r9, #1
     9ba:	b.n	8fa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
     9bc:	rsb	r8, r7, sl
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
     9c0:	mov	r2, r7
     9c2:	ldr	r1, [sp, #0]
     9c4:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
     9c6:	uxtb.w	r8, r8
     9ca:	cmp.w	r8, #15
     9ce:	it	cs
     9d0:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
     9d4:	mov	r3, r8
     9d6:	bl	12b8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
     9da:	cmp	r0, #0
     9dc:	beq.n	a58 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
     9de:	add	r7, r8
     9e0:	uxtb	r7, r7

        if (nameOffset == nameLength) {
     9e2:	cmp	sl, r7
     9e4:	bne.w	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
     9e8:	ldr	r3, [sp, #112]	; 0x70
     9ea:	lsls	r3, r3, #20
     9ec:	bmi.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
     9f0:	ldr	r3, [sp, #112]	; 0x70
     9f2:	tst.w	r3, #17408	; 0x4400
     9f6:	bne.w	b3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
     9fa:	ldrb.w	r3, [r5, #51]	; 0x33
     9fe:	lsls	r7, r3, #30
     a00:	bmi.w	b3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     a04:	ldr	r3, [sp, #112]	; 0x70
     a06:	lsls	r3, r3, #21
     a08:	bmi.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     a0c:	ldr	r3, [sp, #112]	; 0x70
     a0e:	lsls	r0, r3, #17
     a10:	bmi.w	b84 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
     a14:	movs	r0, #1
     a16:	b.n	842 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     a18:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
     a1c:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     a1e:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
     a20:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     a24:	bpl.n	a2e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x216>
          m_flags |= FILE_FLAG_CONTIGUOUS;
     a26:	orr.w	r3, r2, #64	; 0x40
     a2a:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
     a2e:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     a30:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
     a34:	str	r1, [r5, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     a36:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     a3a:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
     a3e:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     a40:	strd	r0, r1, [r5, #8]
        if (!name) {
     a44:	cmp	r3, #0
     a46:	beq.n	9e8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     a48:	ldrb.w	r3, [sp, #43]	; 0x2b
     a4c:	cmp	r3, sl
     a4e:	beq.n	a5c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x244>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
     a50:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     a54:	mov	r7, r9
     a56:	b.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
     a58:	mov	r9, r0
     a5a:	b.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     a5c:	ldrh.w	r3, [sp, #44]	; 0x2c
     a60:	ldr	r2, [sp, #8]
     a62:	cmp	r3, r2
     a64:	bne.n	a50 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x238>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     a66:	movs	r7, #0
     a68:	b.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     a6a:	movs	r3, #3
     a6c:	b.n	862 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
     a6e:	ldr	r3, [sp, #0]
     a70:	str	r3, [sp, #8]
     a72:	b.n	89a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a74:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
     a78:	movs	r1, #0
     a7a:	movs	r2, #56	; 0x38
     a7c:	mov	r0, r5
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a7e:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
     a82:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     a84:	add.w	r8, sp, #28
     a88:	add.w	r4, r5, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a8c:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
     a90:	bl	b1ec <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     a94:	ldr	r2, [sp, #12]
     a96:	ldr	r3, [r6, #32]
     a98:	add.w	r6, sl, #30
     a9c:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
     aa0:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
     aa2:	str	r3, [r5, #32]
     aa4:	uxtb	r6, r6
  m_attributes = FILE_ATTR_FILE;
     aa6:	strb.w	r2, [r5, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     aaa:	uxtb.w	r9, r9
     aae:	str.w	sl, [sp, #12]
     ab2:	ldr.w	sl, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     ab6:	ldmia.w	r8, {r0, r1, r2}
     aba:	stmia.w	r4, {r0, r1, r2}
     abe:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
     ac0:	movs	r2, #1
     ac2:	mov	r1, r8
     ac4:	bl	10c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
     ac8:	mov	r4, r0
     aca:	cmp	r0, #0
     acc:	beq.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     ad0:	ldrsb.w	r3, [r0]
     ad4:	cmp	r3, #0
     ad6:	blt.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
     ada:	movs	r2, #32
     adc:	movs	r1, #0
     ade:	bl	b1ec <memset>
    if (i == 0) {
     ae2:	cmp	r7, #0
     ae4:	beq.n	bb6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39e>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
     ae6:	cmp	r7, #1
     ae8:	beq.n	b96 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37e>
     aea:	rsb	r3, r7, r7, lsl #4
     aee:	cmp	r6, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
     af0:	mov.w	r1, #193	; 0xc1
     af4:	mov	r2, r6
     af6:	sub.w	r3, r3, #30
     afa:	it	cs
     afc:	movcs	r2, #15
     afe:	strb	r1, [r4, #0]
     b00:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     b02:	cbz	r2, b1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
     b04:	adds	r4, #2
     b06:	sxth	r2, r2
     b08:	add	r3, sl
     b0a:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
     b0e:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     b12:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     b16:	cmp	r2, r4
     b18:	bne.n	b0e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f6>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
     b1a:	adds	r7, #1
     b1c:	uxtb	r7, r7
     b1e:	cmp	fp, r7
     b20:	bls.n	b76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
     b22:	movs	r2, #32
     b24:	mov	r1, r8
     b26:	ldr	r0, [r5, #32]
     b28:	bl	10fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
     b2c:	cmp	r0, #1
     b2e:	bne.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b32:	subs	r6, #15
     b34:	ldr	r0, [r5, #32]
     b36:	uxtb	r6, r6
     b38:	b.n	ac0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
     b3a:	ldrb.w	r3, [r5, #49]	; 0x31
     b3e:	tst.w	r3, #17
     b42:	bne.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     b46:	ldr	r3, [sp, #112]	; 0x70
     b48:	lsls	r6, r3, #21
     b4a:	bpl.w	a0c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
     b4e:	ldrb.w	r3, [r5, #51]	; 0x33
     b52:	lsls	r4, r3, #30
     b54:	bpl.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     b58:	movs	r2, #0
     b5a:	movs	r3, #0
     b5c:	mov	r0, r5
     b5e:	bl	710 <ExFatFile::seekSet(unsigned long long)>
     b62:	cmp	r0, #0
     b64:	beq.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b68:	mov	r0, r5
     b6a:	bl	1978 <ExFatFile::truncate()>
     b6e:	cmp	r0, #0
     b70:	beq.w	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b74:	b.n	a14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
     b76:	mov	r0, r5
     b78:	bl	1648 <ExFatFile::sync()>
     b7c:	b.n	842 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
     b7e:	nop
     b80:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     b84:	mov	r0, r5
     b86:	ldrd	r2, r3, [r5, #16]
     b8a:	bl	710 <ExFatFile::seekSet(unsigned long long)>
     b8e:	cmp	r0, #0
     b90:	bne.w	a14 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
     b94:	b.n	836 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     b96:	ldr	r3, [sp, #4]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
     b98:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
     b9a:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     b9c:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
     ba0:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
     ba2:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     ba4:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
     ba8:	ldrb.w	r3, [sp, #12]
     bac:	strb	r3, [r4, #3]
     bae:	ldrh.w	r3, [sp, #8]
     bb2:	strh	r3, [r4, #4]
     bb4:	b.n	b1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
     bb6:	movs	r3, #133	; 0x85
     bb8:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
     bba:	ldr	r3, [pc, #48]	; (bec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d4>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     bbc:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
     bc0:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
     bc4:	ldr	r3, [r3, #0]
     bc6:	cmp	r3, #0
     bc8:	beq.n	b1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
     bca:	add.w	r2, sp, #23
     bce:	add.w	r1, sp, #26
     bd2:	add	r0, sp, #24
     bd4:	blx	r3
        dirFile->createTimeMs = ms10;
     bd6:	ldrb.w	r1, [sp, #23]
     bda:	ldrh.w	r2, [sp, #26]
     bde:	ldrh.w	r3, [sp, #24]
     be2:	strb	r1, [r4, #20]
     be4:	strh	r2, [r4, #8]
     be6:	strh	r3, [r4, #10]
     be8:	b.n	b1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
     bea:	nop
     bec:	.word	0x20003840

00000bf0 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
     bf0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     bf4:	mov	r6, r0
     bf6:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     bf8:	movs	r0, #0
     bfa:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
     bfc:	ldrb.w	r1, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
     c00:	str	r2, [sp, #12]
     c02:	strb.w	r0, [sp, #73]	; 0x49
     c06:	strb.w	r0, [sp, #74]	; 0x4a
     c0a:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
     c0e:	cbnz	r1, c1c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
     c10:	mov	r9, r3
     c12:	ldrb.w	r3, [r5, #49]	; 0x31
     c16:	tst.w	r3, #80	; 0x50
     c1a:	bne.n	c24 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
     c1c:	movs	r0, #0
}
     c1e:	add	sp, #84	; 0x54
     c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
     c24:	ldrb	r3, [r2, #0]
     c26:	mov	r4, r2
     c28:	cmp	r3, #47	; 0x2f
     c2a:	beq.n	c98 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
     c2c:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
     c30:	mov	r1, r4
     c32:	add	r3, sp, #12
     c34:	add	r2, sp, #16
     c36:	mov	r0, r6
     c38:	bl	440 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
     c3c:	cmp	r0, #0
     c3e:	beq.n	c1c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
     c40:	ldr	r3, [sp, #12]
     c42:	ldrb	r3, [r3, #0]
     c44:	cmp	r3, #0
     c46:	beq.n	cc2 <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
     c48:	ldrb.w	r3, [sp, #16]
     c4c:	mov	r1, r5
     c4e:	ldr	r2, [sp, #20]
     c50:	mov	r0, r6
     c52:	str.w	r8, [sp]
     c56:	bl	818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
     c5a:	cmp	r0, #0
     c5c:	beq.n	c1c <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
     c5e:	mov	r4, r6
     c60:	add	r7, sp, #24
     c62:	add.w	lr, r6, #48	; 0x30
     c66:	ldr	r0, [r4, #0]
     c68:	adds	r4, #16
     c6a:	ldr.w	r1, [r4, #-12]
     c6e:	mov	r5, r7
     c70:	ldr.w	r2, [r4, #-8]
     c74:	adds	r7, #16
     c76:	ldr.w	r3, [r4, #-4]
     c7a:	cmp	r4, lr
     c7c:	stmia	r5!, {r0, r1, r2, r3}
     c7e:	bne.n	c66 <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
     c80:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
     c82:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
     c84:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
     c86:	mov	r0, r6
     c88:	bl	1648 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
     c8c:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
     c90:	strb.w	r8, [r6, #51]	; 0x33
     c94:	ldr	r4, [sp, #12]
     c96:	b.n	c30 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
     c98:	adds	r4, #1
     c9a:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
     c9c:	ldrb	r1, [r4, #0]
     c9e:	cmp	r1, #47	; 0x2f
     ca0:	beq.n	c98 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
      path++;
    }
    if (*path == 0) {
     ca2:	cbz	r1, cda <ExFatFile::open(ExFatFile*, char const*, int)+0xea>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     ca4:	add	r0, sp, #24
     ca6:	movs	r2, #56	; 0x38
     ca8:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
     caa:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
     cac:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     cae:	bl	b1ec <memset>
  m_attributes = FILE_ATTR_ROOT;
     cb2:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     cb4:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     cb6:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     cb8:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     cbc:	strb.w	r3, [sp, #75]	; 0x4b
     cc0:	b.n	c2c <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
     cc2:	ldrb.w	r3, [sp, #16]
     cc6:	mov	r1, r5
     cc8:	ldr	r2, [sp, #20]
     cca:	mov	r0, r6
     ccc:	str.w	r9, [sp]
     cd0:	bl	818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
     cd4:	add	sp, #84	; 0x54
     cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     cda:	movs	r2, #56	; 0x38
     cdc:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
     cde:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     ce0:	bl	b1ec <memset>
  m_attributes = FILE_ATTR_ROOT;
     ce4:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     ce6:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     ce8:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     cea:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     cee:	strb.w	r0, [r6, #51]	; 0x33
     cf2:	b.n	c1e <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

00000cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
     cf4:	cbz	r1, cfe <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
     cf6:	add.w	r1, r1, #1088	; 0x440
     cfa:	b.w	bf0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
     cfe:	mov	r0, r1
     d00:	bx	lr
     d02:	nop

00000d04 <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     d04:	ldrb.w	r3, [r0, #49]	; 0x31
     d08:	cbnz	r3, d20 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
     d0a:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     d0c:	ldrb.w	r4, [r1, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
     d10:	sub	sp, #12
     d12:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     d14:	ands.w	r4, r4, #80	; 0x50
     d18:	bne.n	d24 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     d1a:	mov	r0, r4
}
     d1c:	add	sp, #12
     d1e:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     d20:	movs	r0, #0
}
     d22:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     d24:	ldrd	r4, r5, [r5]
     d28:	movs	r5, #0
     d2a:	and.w	r4, r4, #31
     d2e:	orrs	r4, r5
     d30:	beq.n	d38 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     d32:	mov	r0, r3
}
     d34:	add	sp, #12
     d36:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
     d38:	str	r2, [sp, #0]
     d3a:	mov	r2, r3
     d3c:	bl	818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
     d40:	add	sp, #12
     d42:	pop	{r4, r5, pc}

00000d44 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
     d44:	push	{r4, lr}
     d46:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
     d48:	ldr	r0, [r0, #4]
     d4a:	ldr	r3, [r0, #0]
     d4c:	add.w	r2, r4, #12
     d50:	ldr	r1, [r4, #8]
     d52:	ldr	r3, [r3, #24]
     d54:	blx	r3
     d56:	cbz	r0, d60 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
     d58:	ldrb	r3, [r4, #0]
     d5a:	bic.w	r3, r3, #1
     d5e:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
     d60:	pop	{r4, pc}
     d62:	nop

00000d64 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     d64:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
     d66:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     d6a:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
     d6c:	str	r3, [r0, #8]
     d6e:	bx	lr

00000d70 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
     d70:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
     d72:	ldr	r3, [r0, #4]
     d74:	cbz	r3, db6 <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
     d76:	ldr	r3, [r0, #8]
     d78:	mov	r4, r0
     d7a:	mov	r5, r2
     d7c:	mov	r7, r1
     d7e:	cmp	r3, r1
     d80:	beq.n	da0 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
     d82:	ldrb	r3, [r0, #0]
     d84:	lsls	r2, r3, #31
     d86:	bmi.n	dae <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
     d88:	lsls	r3, r5, #30
     d8a:	bpl.n	dba <FsCache::get(unsigned long, unsigned char)+0x4a>
     d8c:	add.w	r6, r4, #12
     d90:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
     d92:	and.w	r5, r5, #1
     d96:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
     d98:	str	r7, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
     d9a:	orrs	r5, r2
     d9c:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
     d9e:	pop	{r3, r4, r5, r6, r7, pc}
     da0:	ldrsb.w	r2, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
     da4:	and.w	r5, r5, #1
     da8:	orrs	r5, r2
     daa:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
     dac:	pop	{r3, r4, r5, r6, r7, pc}
     dae:	bl	d44 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
     db2:	cmp	r0, #0
     db4:	bne.n	d88 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
     db6:	movs	r0, #0
     db8:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
     dba:	ldr	r0, [r4, #4]
     dbc:	add.w	r6, r4, #12
     dc0:	mov	r1, r7
     dc2:	ldr	r3, [r0, #0]
     dc4:	mov	r2, r6
     dc6:	ldr	r3, [r3, #8]
     dc8:	blx	r3
     dca:	cmp	r0, #0
     dcc:	bne.n	d90 <FsCache::get(unsigned long, unsigned char)+0x20>
     dce:	b.n	db6 <FsCache::get(unsigned long, unsigned char)+0x46>

00000dd0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
     dd0:	push	{r3, r4, r5, lr}
     dd2:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     dd4:	ldr.w	r1, [r0, #1052]	; 0x41c
     dd8:	mov	r5, r2
     dda:	add.w	r0, r0, #524	; 0x20c
     dde:	movs	r2, #0
     de0:	add.w	r1, r1, r4, lsr #7
     de4:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
     de8:	cbz	r0, dfc <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
     dea:	lsls	r4, r4, #2
     dec:	ubfx	r4, r4, #0, #9
     df0:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
     df2:	adds	r2, r3, #1
     df4:	beq.n	e00 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
     df6:	str	r3, [r5, #0]
  return 1;
     df8:	movs	r0, #1
     dfa:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
     dfc:	movs	r0, #255	; 0xff
     dfe:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
     e00:	movs	r0, #0
  }
  *value = next;
  return 1;
}
     e02:	pop	{r3, r4, r5, pc}

00000e04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
     e04:	push	{r3, r4, r5, lr}
     e06:	mov	r4, r1
     e08:	ldr.w	r1, [r0, #1052]	; 0x41c
     e0c:	mov	r5, r2
     e0e:	add.w	r0, r0, #524	; 0x20c
     e12:	movs	r2, #1
     e14:	add.w	r1, r1, r4, lsr #7
     e18:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
     e1c:	mov	r3, r0
     e1e:	cbz	r0, e2c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
     e20:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
     e22:	movs	r0, #1
     e24:	ubfx	r4, r4, #0, #9
     e28:	str	r5, [r3, r4]
     e2a:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
     e2c:	pop	{r3, r4, r5, pc}
     e2e:	nop

00000e30 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
     e30:	ldrb	r3, [r0, #0]
     e32:	lsls	r3, r3, #31
     e34:	bmi.n	e3a <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
     e36:	movs	r0, #1
     e38:	bx	lr
     e3a:	b.w	d44 <FsCache::sync() [clone .part.2]>
     e3e:	nop

00000e40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
     e40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e44:	mov	r8, r0
     e46:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
     e48:	mov	fp, r1
     e4a:	cmp	r1, #0
     e4c:	beq.n	ed6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
     e4e:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
     e50:	ldr.w	r3, [r8, #1064]	; 0x428
     e54:	cmp	r7, r3
     e56:	bcs.n	ece <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
     e58:	and.w	r5, r7, #7
     e5c:	movs	r3, #1
     e5e:	ubfx	sl, r7, #3, #9
     e62:	lsl.w	r5, r3, r5
     e66:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
     e68:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
     e6a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
     e6c:	ldr.w	r1, [r8, #1060]	; 0x424
     e70:	movs	r2, #0
     e72:	mov	r0, r8
     e74:	add.w	r1, r1, r4, lsr #12
     e78:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
     e7c:	cbz	r0, eb0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
     e7e:	ldrb.w	r1, [r0, sl]
     e82:	b.n	e9a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
     e84:	cmp	r2, r9
     e86:	beq.n	edc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     e88:	cmp	r7, r4
     e8a:	beq.n	eae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
     e8c:	ldr.w	r2, [r8, #1064]	; 0x428
     e90:	cmp	r4, r2
     e92:	bcs.n	ec2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
     e94:	ands.w	r5, r3, #255	; 0xff
     e98:	beq.n	eb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
     e9a:	adds	r4, #1
        if (!(mask & cache[i])) {
     e9c:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
     e9e:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
     ea2:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
     ea6:	beq.n	e84 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     ea8:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
     eaa:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     eac:	bne.n	e8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
     eae:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
     eb0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eb4:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
     eb8:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
     eba:	cmp.w	sl, #512	; 0x200
     ebe:	bne.n	e7e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
     ec0:	b.n	ec6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
     ec2:	movs	r6, #0
     ec4:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
     ec6:	mov.w	sl, #0
     eca:	movs	r5, #1
     ecc:	b.n	e6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
     ece:	movs	r7, #0
     ed0:	movs	r5, #1
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
     ed2:	mov	sl, r7
     ed4:	b.n	e68 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
     ed6:	ldr.w	r7, [r0, #1048]	; 0x418
     eda:	b.n	e50 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
     edc:	cmp.w	fp, #0
     ee0:	bne.n	eec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
     ee2:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
     ee6:	it	eq
     ee8:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
     eec:	adds	r0, r6, #2
     eee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ef2:	nop

00000ef4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     ef4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
     ef8:	movs	r3, #0

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     efa:	mov	r4, r0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
     efc:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     f00:	add.w	r7, r0, #524	; 0x20c

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     f04:	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
     f06:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
     f0a:	str	r1, [r0, #4]
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     f0c:	mov	r2, r3
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
     f0e:	str.w	r1, [r4, #528]	; 0x210
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     f12:	mov	r0, r7
     f14:	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
     f16:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     f1a:	strb	r3, [r4, #0]
     f1c:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
     f20:	str	r6, [r4, #8]
     f22:	str.w	r6, [r4, #532]	; 0x214
     f26:	bl	d70 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
     f2a:	cmp	r5, #4
     f2c:	bhi.n	f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
     f2e:	mov	r6, r0
     f30:	cbz	r0, f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
     f32:	cbnz	r5, f50 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
     f34:	movs	r2, #5
     f36:	ldr	r1, [pc, #164]	; (fdc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>)
     f38:	adds	r0, r6, #3
     f3a:	bl	b89c <strncmp>
     f3e:	mov	r3, r0
     f40:	cbnz	r0, f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
     f42:	ldrb.w	r2, [r6, #108]	; 0x6c
     f46:	cmp	r2, #9
     f48:	beq.n	f80 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
     f4a:	movs	r0, #0
     f4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
     f50:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
     f52:	add.w	r3, r0, r3, lsl #4
     f56:	ldrb.w	r2, [r3, #446]	; 0x1be
     f5a:	ands.w	r2, r2, #127	; 0x7f
     f5e:	bne.n	f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
     f60:	ldrb.w	r3, [r3, #450]	; 0x1c2
     f64:	cmp	r3, #0
     f66:	beq.n	f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
     f68:	add.w	r5, r0, r5, lsl #4
     f6c:	mov	r0, r7
     f6e:	ldr.w	r5, [r5, #438]	; 0x1b6
     f72:	mov	r1, r5
     f74:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
     f78:	mov	r6, r0
     f7a:	cmp	r0, #0
     f7c:	bne.n	f34 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
     f7e:	b.n	f4a <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f80:	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     f82:	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     f86:	mov	r1, r0
     f88:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f8a:	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     f8e:	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f90:	str.w	lr, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
     f94:	ldr	r7, [r6, #84]	; 0x54
     f96:	str.w	r7, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
     f9a:	ldr	r7, [r6, #88]	; 0x58
     f9c:	add	r5, r7
     f9e:	str.w	r5, [r4, #1060]	; 0x424
     fa2:	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
     fa4:	str.w	r5, [r4, #1064]	; 0x428
     fa8:	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
     faa:	str.w	r5, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
     fae:	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
     fb2:	str.w	r3, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     fb6:	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
     fba:	strb.w	r5, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     fbe:	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
     fc2:	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     fc4:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
     fc8:	str.w	r5, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     fcc:	bl	e40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
     fd0:	movs	r3, #64	; 0x40
  return true;
     fd2:	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
     fd4:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
     fd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fdc:	.word	0x20000068

00000fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
     fe0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
     fe4:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
     fe6:	mov	r5, r2
     fe8:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
     fea:	ldr.w	r2, [r0, #1064]	; 0x428
     fee:	adds	r3, r1, r5
     ff0:	cmp	r3, r2
     ff2:	bhi.n	1066 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
     ff4:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
     ff6:	cmp.w	sl, #0
     ffa:	bne.n	106c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
     ffc:	ldr.w	r3, [r0, #1048]	; 0x418
    1000:	cmp	r1, r3
      m_bitmapStart = start;
    1002:	it	cc
    1004:	strcc.w	r1, [r0, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    1008:	and.w	r4, r1, #7
    100c:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    100e:	ldr.w	r3, [r8, #1060]	; 0x424
  i = (start >> 3) & m_sectorMask;
    1012:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    1016:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    101a:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    101e:	uxtb	r4, r4
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    1020:	movs	r2, #1
    1022:	mov	r1, r9
    1024:	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    1026:	add	r9, r2
    1028:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    102c:	cbz	r0, 1066 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    102e:	adds	r7, r0, r6
    1030:	add.w	r0, r0, #512	; 0x200
    1034:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    1038:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    103a:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    103e:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    1042:	ite	ne
    1044:	movne	r6, #1
    1046:	moveq	r6, #0
    1048:	cmp	r6, sl
    104a:	beq.n	1066 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    104c:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    104e:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    1052:	beq.n	1084 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    1054:	ands.w	r4, r4, #255	; 0xff
    1058:	bne.n	1038 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    105a:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    105c:	mov	r6, r4
    105e:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    1062:	bne.n	1034 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    1064:	b.n	1020 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    1066:	movs	r0, #0
    1068:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    106c:	ldr.w	r0, [r0, #1048]	; 0x418
    1070:	cmp	r3, r0
    1072:	bls.n	1008 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    1074:	cmp	r1, r0
    1076:	bhi.n	1008 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    1078:	cmp	r3, r2
    107a:	it	cs
    107c:	movcs	r3, #0
    107e:	str.w	r3, [r8, #1048]	; 0x418
    1082:	b.n	1008 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    1084:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    1086:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    108a:	nop

0000108c <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    108c:	push	{r4, r5, r6, lr}
    108e:	sub	sp, #8
    1090:	mov	r5, r0
  uint32_t n = 0;
    1092:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    1094:	add	r6, sp, #8
    1096:	str.w	r1, [r6, #-4]!
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    109a:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    109e:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    10a0:	adds	r3, #1
    10a2:	cmp	r1, r3
    10a4:	bls.n	10ac <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    10a6:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    10a8:	add	sp, #8
    10aa:	pop	{r4, r5, r6, pc}
    10ac:	mov	r2, r6
    10ae:	mov	r0, r5
    10b0:	bl	dd0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    10b4:	adds	r4, #1
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    10b6:	sxtb	r0, r0
    if (status < 0) return 0;
    10b8:	cmp	r0, #0
    10ba:	blt.n	10a6 <ExFatPartition::chainSize(unsigned long)+0x1a>
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    10bc:	bne.n	109a <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    10be:	mov	r0, r4
  } while (status);
  return n;
}
    10c0:	add	sp, #8
    10c2:	pop	{r4, r5, r6, pc}

000010c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    10c4:	push	{r4, r5, r6, lr}
    10c6:	mov	r6, r1
    10c8:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    10ca:	ldr.w	r5, [r0, #1072]	; 0x430
    10ce:	add.w	r0, r0, #524	; 0x20c
    10d2:	ldr	r1, [r1, #4]
    10d4:	ldr	r3, [r6, #0]
    10d6:	ands	r1, r5
    10d8:	ldr.w	r5, [r4, #1060]	; 0x424
    10dc:	subs	r3, #2
    10de:	ldrb.w	r4, [r4, #1085]	; 0x43d
    10e2:	add.w	r1, r5, r1, lsr #9
    10e6:	lsls	r3, r4
    10e8:	add	r1, r3
    10ea:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    10ee:	cbz	r0, 10f8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    10f0:	ldr	r3, [r6, #4]
    10f2:	ubfx	r3, r3, #0, #9
    10f6:	add	r0, r3
}
    10f8:	pop	{r4, r5, r6, pc}
    10fa:	nop

000010fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    10fc:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    10fe:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    1100:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    1102:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    1106:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    1108:	adds	r1, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    110a:	ands	r4, r3
  pos->position += offset;
    110c:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    110e:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    1112:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    1114:	adds	r3, #9
    1116:	uxtb	r3, r3
    1118:	lsr.w	r4, r2, r3
  while (tmp--) {
    111c:	cbz	r4, 112e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    111e:	ldrb	r3, [r5, #8]
    1120:	cbz	r3, 1132 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    1122:	ldr	r3, [r5, #0]
    1124:	adds	r3, #1
    1126:	str	r3, [r5, #0]
    1128:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    112a:	cmp	r4, #0
    112c:	bne.n	111e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    112e:	movs	r0, #1
    1130:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1132:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    1136:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1138:	adds	r3, #1
    113a:	cmp	r1, r3
    113c:	bls.n	1144 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    113e:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    1142:	pop	{r4, r5, r6, pc}
    1144:	mov	r2, r5
    1146:	mov	r0, r6
    1148:	bl	dd0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    114c:	sxtb	r0, r0
      if (status != 1) {
    114e:	cmp	r0, #1
    1150:	beq.n	1128 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    1152:	pop	{r4, r5, r6, pc}

00001154 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1154:	ldr.w	r3, [r0, #1064]	; 0x428
    1158:	adds	r3, #1
    115a:	cmp	r3, r1
    115c:	bcs.n	1162 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    115e:	movs	r0, #255	; 0xff
    1160:	bx	lr
    1162:	b.w	dd0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    1166:	nop

00001168 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1168:	cmp	r1, #1
    116a:	bls.n	1188 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    116c:	ldr.w	r3, [r0, #1064]	; 0x428
    1170:	adds	r3, #1
    1172:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    1174:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1176:	bls.n	1180 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    1178:	movs	r0, #0
    117a:	ldr.w	r4, [sp], #4
    117e:	bx	lr
    1180:	ldr.w	r4, [sp], #4
    1184:	b.w	e04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    1188:	movs	r0, #0
    118a:	bx	lr

0000118c <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    118c:	push	{r4, r5, r6, r7, lr}
    118e:	mov	r4, r1
    1190:	sub	sp, #12
    1192:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    1194:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1196:	ldr.w	r3, [r5, #1064]	; 0x428
    119a:	adds	r3, #1
    119c:	cmp	r4, r3
    119e:	bls.n	11a6 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    11a0:	movs	r0, #0
}
    11a2:	add	sp, #12
    11a4:	pop	{r4, r5, r6, r7, pc}
    11a6:	mov	r1, r4
    11a8:	add	r2, sp, #4
    11aa:	mov	r0, r5
    11ac:	bl	dd0 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    11b0:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    11b2:	sxtb	r6, r0
    11b4:	mov	r1, r4
    11b6:	mov	r0, r5
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    11b8:	bls.n	11a0 <ExFatPartition::freeChain(unsigned long)+0x14>
    11ba:	lsrs	r2, r6, #31
    11bc:	bne.n	11a0 <ExFatPartition::freeChain(unsigned long)+0x14>
    11be:	ldr.w	r3, [r5, #1064]	; 0x428
    11c2:	adds	r3, #1
    11c4:	cmp	r4, r3
    11c6:	bhi.n	11a0 <ExFatPartition::freeChain(unsigned long)+0x14>
    11c8:	bl	e04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11cc:	mov	r1, r7
    11ce:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    11d0:	cmp	r0, #0
    11d2:	beq.n	11a0 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    11d4:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11d6:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    11d8:	ldr	r4, [sp, #4]
    11da:	cbz	r6, 11e0 <ExFatPartition::freeChain(unsigned long)+0x54>
    11dc:	cmp	r2, r4
    11de:	beq.n	1196 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11e0:	subs	r2, r2, r7
    11e2:	bl	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    11e6:	cmp	r0, #0
    11e8:	beq.n	11a0 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    11ea:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    11ec:	cmp	r6, #0
    11ee:	beq.n	11a2 <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    11f0:	mov	r7, r4
    11f2:	b.n	1196 <ExFatPartition::freeChain(unsigned long)+0xa>

000011f4 <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    11f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    11f8:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    11fa:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    11fc:	ldr.w	r6, [r0, #1060]	; 0x424
    1200:	add.w	r7, r0, #524	; 0x20c
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    1204:	mov	r5, r4
    1206:	mov	r1, r6
    1208:	movs	r2, #0
    120a:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    120c:	adds	r6, #1
    120e:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    1212:	cbz	r0, 1260 <ExFatPartition::freeClusterCount()+0x6c>
    1214:	add.w	lr, r0, #4294967295
    1218:	ldr.w	ip, [r8, #1064]	; 0x428
    121c:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    1220:	ldrb.w	r0, [lr, #1]!
    1224:	cmp	r0, #255	; 0xff
    1226:	beq.n	1250 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    1228:	cbz	r0, 123e <ExFatPartition::freeClusterCount()+0x4a>
    122a:	movs	r2, #8
    122c:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    122e:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1230:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    1234:	it	ne
    1236:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1238:	subs	r2, #1
    123a:	uxtb	r3, r1
    123c:	bne.n	122e <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    123e:	adds	r5, #8
      if (nc >= m_clusterCount) {
    1240:	cmp	ip, r5
    1242:	bls.n	1258 <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    1244:	cmp	r5, r9
    1246:	beq.n	1206 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    1248:	ldrb.w	r0, [lr, #1]!
    124c:	cmp	r0, #255	; 0xff
    124e:	bne.n	1228 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    1250:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    1252:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    1254:	cmp	ip, r5
    1256:	bhi.n	1244 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    1258:	rsb	r0, r4, ip
    125c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    1260:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001264 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    1264:	push	{r4, lr}
    1266:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    1268:	ldr.w	r1, [r0, #1068]	; 0x42c
    126c:	bl	108c <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    1270:	ldrb.w	r3, [r4, #1085]	; 0x43d
    1274:	adds	r3, #9
    1276:	uxtb	r3, r3
}
    1278:	lsls	r0, r3
    127a:	pop	{r4, pc}

0000127c <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    127c:	cbz	r1, 12b4 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    127e:	add	r1, r0
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    1280:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    1282:	ldrb.w	r4, [r0], #1
    1286:	lsls	r3, r2, #15
    1288:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    128c:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    1290:	sub.w	r5, r4, #32
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    1294:	cmp	r3, #25
      c -= 'a' - 'A';
    1296:	it	ls
    1298:	uxtbls	r4, r5
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    129a:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    129c:	uxtah	r2, r4, r2
    12a0:	uxth	r2, r2
    12a2:	mov.w	r3, r2, lsl #15
    12a6:	orr.w	r2, r3, r2, lsr #1
    12aa:	uxth	r2, r2
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    12ac:	bne.n	1282 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    12ae:	mov	r0, r2
    12b0:	pop	{r4, r5}
    12b2:	bx	lr
    12b4:	mov	r0, r2
    12b6:	bx	lr

000012b8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    12b8:	cbz	r3, 130e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    12ba:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    12bc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    12be:	cmp	r4, #126	; 0x7e
    12c0:	bhi.n	1302 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    12c2:	add	r3, r2
    12c4:	adds	r0, #2
    12c6:	add	r2, r1
    12c8:	add	r1, r3
    12ca:	ldrb.w	r3, [r2], #1
    12ce:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    12d0:	sub.w	r6, r3, #97	; 0x61
    12d4:	sub.w	r5, r4, #97	; 0x61
    12d8:	cmp	r6, #25
    12da:	ite	ls
    12dc:	movls	r6, #32
    12de:	movhi	r6, #0
    12e0:	cmp	r5, #25
    12e2:	sub.w	r3, r3, r6
    12e6:	ite	ls
    12e8:	movls	r5, #32
    12ea:	movhi	r5, #0
    12ec:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    12ee:	subs	r4, r4, r5
    12f0:	uxtb	r4, r4
    12f2:	cmp	r4, r3
    12f4:	bne.n	1302 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    12f6:	cmp	r2, r1
    12f8:	beq.n	1308 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    12fa:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    12fe:	cmp	r4, #126	; 0x7e
    1300:	bls.n	12ca <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    1302:	movs	r0, #0
    }
  }
  return true;
}
    1304:	pop	{r4, r5, r6}
    1306:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    1308:	movs	r0, #1
}
    130a:	pop	{r4, r5, r6}
    130c:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    130e:	movs	r0, #1
}
    1310:	bx	lr
    1312:	nop

00001314 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    1314:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    1316:	push	{r3, r4, r5, r6, r7, lr}
    1318:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    131a:	ldr	r0, [r0, #32]
    131c:	cbz	r1, 1320 <ExFatFile::addCluster()+0xc>
    131e:	adds	r1, #1
    1320:	movs	r2, #1
    1322:	bl	e40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    1326:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    1328:	mov	r6, r0
  if (find < 2) {
    132a:	bls.n	138a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    132c:	movs	r3, #1
    132e:	mov	r1, r0
    1330:	ldr	r0, [r4, #32]
    1332:	mov	r2, r3
    1334:	bl	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    1338:	mov	r7, r0
    133a:	cbz	r0, 138a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    133c:	ldr	r3, [r4, #24]
    133e:	cbz	r3, 1390 <ExFatFile::addCluster()+0x7c>
    1340:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    1344:	lsls	r1, r2, #25
    1346:	bpl.n	136e <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    1348:	adds	r1, r3, #1
    134a:	cmp	r6, r1
    134c:	beq.n	139c <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    134e:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1352:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    1354:	strb.w	r2, [r4, #51]	; 0x33
    1358:	b.n	1366 <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    135a:	ldr	r0, [r4, #32]
    135c:	bl	1168 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1360:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    1362:	cbz	r0, 138a <ExFatFile::addCluster()+0x76>
    1364:	ldr	r3, [r4, #24]
    1366:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1368:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    136a:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    136c:	bcc.n	135a <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    136e:	mov.w	r2, #4294967295
    1372:	mov	r1, r6
    1374:	ldr	r0, [r4, #32]
    1376:	bl	1168 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    137a:	cbz	r0, 138a <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    137c:	ldr	r1, [r4, #24]
    137e:	cbz	r1, 139c <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    1380:	mov	r2, r6
    1382:	ldr	r0, [r4, #32]
    1384:	bl	1168 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1388:	cbnz	r0, 139c <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    138a:	movs	r7, #0
}
    138c:	mov	r0, r7
    138e:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    1390:	ldrb.w	r3, [r4, #51]	; 0x33
    1394:	orr.w	r3, r3, #64	; 0x40
    1398:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    139c:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    139e:	mov	r0, r7
    13a0:	pop	{r3, r4, r5, r6, r7, pc}
    13a2:	nop

000013a4 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    13a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    13a8:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    13ac:	sub	sp, #20
    13ae:	ldrb.w	r4, [r0, #51]	; 0x33
    13b2:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    13b4:	add	r6, sp, #4
    13b6:	ldmia.w	r3, {r0, r1, r2}
    13ba:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    13be:	lsls	r2, r4, #30
    13c0:	bpl.n	13fa <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    13c2:	ldr	r1, [r5, #28]
    13c4:	cbnz	r1, 1402 <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    13c6:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    13c8:	movs	r2, #1
    13ca:	mov	r1, r6
    13cc:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13ce:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    13d0:	bl	10c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    13d4:	cbz	r0, 13fa <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    13d6:	ldrb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13d8:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    13da:	and.w	r3, r3, #127	; 0x7f
    13de:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13e0:	ldrb.w	r3, [r5, #48]	; 0x30
    13e4:	cmp	r3, r4
    13e6:	bcc.n	144c <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    13e8:	cmp	r4, #0
    13ea:	beq.n	13c8 <ExFatFile::remove()+0x24>
    13ec:	movs	r2, #32
    13ee:	mov	r1, r6
    13f0:	ldr	r0, [r5, #32]
    13f2:	bl	10fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    13f6:	cmp	r0, #1
    13f8:	beq.n	13c8 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    13fa:	movs	r0, #0
}
    13fc:	add	sp, #20
    13fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    1402:	lsls	r3, r4, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    1404:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    1406:	bpl.n	1442 <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    1408:	ldrb.w	r2, [r0, #1085]	; 0x43d
    140c:	movs	r3, #0
    140e:	ldrd	r8, r9, [r5, #8]
    1412:	adds	r2, #9
    1414:	adds.w	r8, r8, #4294967295
    1418:	uxtb	r2, r2
    141a:	adc.w	r9, r9, #4294967295
    141e:	rsb	r7, r2, #32
    1422:	sub.w	r4, r2, #32
    1426:	lsr.w	r2, r8, r2
    142a:	lsl.w	r7, r9, r7
    142e:	lsr.w	r4, r9, r4
    1432:	orrs	r2, r7
    1434:	orrs	r2, r4
    1436:	adds	r2, #1
    1438:	bl	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    143c:	cmp	r0, #0
    143e:	bne.n	13c6 <ExFatFile::remove()+0x22>
    1440:	b.n	13fa <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    1442:	bl	118c <ExFatPartition::freeChain(unsigned long)>
    1446:	cmp	r0, #0
    1448:	bne.n	13c6 <ExFatFile::remove()+0x22>
    144a:	b.n	13fa <ExFatFile::remove()+0x56>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    144c:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    144e:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    1450:	strb.w	r3, [r5, #49]	; 0x31
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1454:	mov	r0, r4
  m_flags = 0;
    1456:	strb.w	r3, [r5, #51]	; 0x33
    145a:	bl	e30 <FsCache::sync()>
    145e:	cmp	r0, #0
    1460:	beq.n	13fa <ExFatFile::remove()+0x56>
    1462:	add.w	r0, r4, #524	; 0x20c
    1466:	bl	e30 <FsCache::sync()>
    146a:	cmp	r0, #0
    146c:	beq.n	13fa <ExFatFile::remove()+0x56>
    146e:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1472:	ldr	r3, [r0, #0]
    1474:	ldr	r3, [r3, #20]
    1476:	blx	r3
    1478:	b.n	13fc <ExFatFile::remove()+0x58>
    147a:	nop

0000147c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    147c:	ldrb.w	r3, [r0, #49]	; 0x31
    1480:	lsls	r1, r3, #27
    1482:	bmi.n	1488 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    1484:	movs	r0, #0
}
    1486:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    1488:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    148a:	movs	r2, #0
    148c:	sub	sp, #32
    148e:	movs	r3, #0
    1490:	mov	r4, r0
    1492:	bl	710 <ExFatFile::seekSet(unsigned long long)>
    1496:	b.n	14a6 <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    1498:	cmp	r0, #32
    149a:	bne.n	14d0 <ExFatFile::rmdir()+0x54>
    149c:	ldrb.w	r3, [sp]
    14a0:	lsls	r2, r3, #24
    14a2:	bmi.n	14d0 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    14a4:	cbz	r3, 14b4 <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    14a6:	movs	r2, #32
    14a8:	mov	r1, sp
    14aa:	mov	r0, r4
    14ac:	bl	53c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    14b0:	cmp	r0, #0
    14b2:	bne.n	1498 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    14b4:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    14b8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    14ba:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    14bc:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    14c0:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    14c4:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    14c8:	bl	13a4 <ExFatFile::remove()>

fail:
  return false;
}
    14cc:	add	sp, #32
    14ce:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    14d0:	movs	r0, #0
}
    14d2:	add	sp, #32
    14d4:	pop	{r4, pc}
    14d6:	nop

000014d8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14dc:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14de:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14e0:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14e4:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14e6:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    14ea:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    14ec:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14ee:	ldmia.w	fp, {r0, r1, r2}
    14f2:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    14f6:	movs	r2, #0
    14f8:	mov	r1, r8
    14fa:	ldr	r0, [r6, #32]
    14fc:	uxtb.w	r9, r7
    1500:	bl	10c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    1504:	mov	r5, r0
    1506:	cbz	r0, 1516 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    1508:	ldrb	r2, [r0, #0]
    150a:	cmp	r2, #192	; 0xc0
    150c:	beq.n	15ca <ExFatFile::syncDir()+0xf2>
    150e:	cmp	r2, #193	; 0xc1
    1510:	beq.n	152a <ExFatFile::syncDir()+0x52>
    1512:	cmp	r2, #133	; 0x85
    1514:	beq.n	157e <ExFatFile::syncDir()+0xa6>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    1516:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    151a:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    151c:	orr.w	r3, r3, #1
    1520:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    1524:	add	sp, #28
    1526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    152a:	mov	r3, r2
    152c:	lsls	r1, r4, #15
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    152e:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1532:	movs	r2, #0
    1534:	orr.w	r4, r1, r4, lsr #1
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    1538:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    153c:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    153e:	uxtah	r4, r3, r4
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    1542:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1544:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1546:	add	r2, r1
    1548:	lsls	r3, r4, #15
    154a:	movs	r1, #3
    154c:	cmp	r2, #31
    154e:	orr.w	r3, r3, r4, lsr #1
    1552:	bhi.n	1568 <ExFatFile::syncDir()+0x90>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1554:	ldrb	r4, [r5, r2]
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1556:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1558:	uxtah	r3, r4, r3
    155c:	uxth	r4, r3
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    155e:	bne.n	1564 <ExFatFile::syncDir()+0x8c>
    1560:	cmp	r0, #0
    1562:	bne.n	1546 <ExFatFile::syncDir()+0x6e>
    1564:	movs	r1, #1
    1566:	b.n	1546 <ExFatFile::syncDir()+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    1568:	cmp	sl, r9
    156a:	beq.n	1606 <ExFatFile::syncDir()+0x12e>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    156c:	movs	r2, #32
    156e:	mov	r1, r8
    1570:	ldr	r0, [r6, #32]
    1572:	adds	r7, #1
    1574:	bl	10fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1578:	cmp	r0, #1
    157a:	beq.n	14f6 <ExFatFile::syncDir()+0x1e>
    157c:	b.n	1516 <ExFatFile::syncDir()+0x3e>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    157e:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    1582:	ldr	r3, [pc, #192]	; (1644 <ExFatFile::syncDir()+0x16c>)
    1584:	and.w	r1, r1, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    1588:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    158c:	ldr	r3, [r3, #0]
    158e:	strh	r1, [r0, #4]
    1590:	cmp	r3, #0
    1592:	beq.n	152a <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    1594:	ldr.w	ip, [r6, #32]
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    1598:	add.w	r2, sp, #7
    159c:	add.w	r1, sp, #10
    15a0:	add	r0, sp, #8
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    15a2:	ldrb.w	lr, [ip, #524]	; 0x20c
    15a6:	orr.w	lr, lr, #1
    15aa:	strb.w	lr, [ip, #524]	; 0x20c
    15ae:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    15b0:	ldrh.w	r3, [sp, #8]
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    15b4:	ldrh.w	r2, [sp, #10]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    15b8:	ldrb.w	r1, [sp, #7]
    15bc:	strh	r3, [r5, #14]
    15be:	strh	r3, [r5, #18]
    15c0:	strb	r1, [r5, #21]
    15c2:	strh	r2, [r5, #12]
    15c4:	strh	r2, [r5, #16]
    15c6:	ldrb	r3, [r5, #0]
    15c8:	b.n	152c <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    15ca:	ldrb.w	r3, [r6, #51]	; 0x33
    15ce:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    15d2:	ldrb	r3, [r0, #1]
    15d4:	ite	ne
    15d6:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    15da:	biceq.w	r3, r3, #2
    15de:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    15e0:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    15e2:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    15e4:	ldrd	r2, r3, [r6, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    15e8:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    15ea:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    15ee:	ldrd	r2, r3, [r6, #8]
    15f2:	strd	r2, r3, [r5, #24]
    15f6:	ldrb.w	r3, [r0, #524]	; 0x20c
    15fa:	orr.w	r3, r3, #1
    15fe:	strb.w	r3, [r0, #524]	; 0x20c
    1602:	ldrb	r3, [r5, #0]
    1604:	b.n	152c <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    1606:	mov	r1, fp
    1608:	movs	r2, #1
    160a:	ldr	r0, [r6, #32]
    160c:	bl	10c4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    1610:	cmp	r0, #0
    1612:	beq.n	1516 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    1614:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    1616:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1618:	mov	r0, r5
    161a:	bl	e30 <FsCache::sync()>
    161e:	cmp	r0, #0
    1620:	beq.w	1516 <ExFatFile::syncDir()+0x3e>
    1624:	add.w	r0, r5, #524	; 0x20c
    1628:	bl	e30 <FsCache::sync()>
    162c:	cmp	r0, #0
    162e:	beq.w	1516 <ExFatFile::syncDir()+0x3e>
    1632:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1636:	ldr	r3, [r0, #0]
    1638:	ldr	r3, [r3, #20]
    163a:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    163c:	cmp	r0, #0
    163e:	beq.w	1516 <ExFatFile::syncDir()+0x3e>
    1642:	b.n	1524 <ExFatFile::syncDir()+0x4c>
    1644:	.word	0x20003840

00001648 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    1648:	ldrb.w	r2, [r0, #49]	; 0x31
    164c:	cbz	r2, 1674 <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    164e:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1650:	ldrb.w	r2, [r0, #51]	; 0x33
    1654:	lsls	r1, r2, #24
    1656:	bmi.n	1678 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    1658:	ldr	r5, [r0, #32]
    165a:	mov	r4, r0
    165c:	mov	r0, r5
    165e:	bl	e30 <FsCache::sync()>
    1662:	cbnz	r0, 1688 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    1664:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    1668:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    166a:	orr.w	r3, r3, #1
    166e:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    1672:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    1674:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    1676:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    1678:	and.w	r2, r2, #127	; 0x7f
    167c:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    1680:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    1684:	b.w	14d8 <ExFatFile::syncDir()>
    1688:	add.w	r0, r5, #524	; 0x20c
    168c:	bl	e30 <FsCache::sync()>
    1690:	cmp	r0, #0
    1692:	beq.n	1664 <ExFatFile::sync()+0x1c>
    1694:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1698:	ldr	r3, [r0, #0]
    169a:	ldr	r3, [r3, #20]
    169c:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    169e:	cmp	r0, #0
    16a0:	beq.n	1664 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    16a2:	movs	r0, #1
    16a4:	pop	{r3, r4, r5, pc}
    16a6:	nop

000016a8 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    16a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    16ac:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    16b0:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    16b2:	lsls	r1, r3, #25
    16b4:	bmi.n	177a <ExFatFile::addDirCluster()+0xd2>
    16b6:	ldr	r0, [r0, #8]
    16b8:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    16ba:	ldr.w	r3, [r3, #1076]	; 0x434
    16be:	add	r0, r3
    16c0:	cmp.w	r0, #67108864	; 0x4000000
    16c4:	bcc.n	16cc <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    16c6:	movs	r0, #0
    16c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    16cc:	mov	r0, r4
    16ce:	bl	1314 <ExFatFile::addCluster()>
    16d2:	cmp	r0, #0
    16d4:	beq.n	16c6 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    16d6:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    16d8:	ldrb.w	r3, [r6, #524]	; 0x20c

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    16dc:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    16e0:	lsls	r2, r3, #31
    16e2:	bmi.n	1782 <ExFatFile::addDirCluster()+0xda>
      return nullptr;
    }
    invalidate();
    return m_cacheBuffer;
    16e4:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    16e8:	mov	r0, r5
    16ea:	bl	d64 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    16ee:	mov.w	r2, #512	; 0x200
    16f2:	movs	r1, #0
    16f4:	mov	r0, r6
    16f6:	bl	b1ec <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    16fa:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    16fc:	ldr	r3, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    16fe:	movs	r7, #1
    1700:	ldrb.w	r1, [r2, #1085]	; 0x43d
    1704:	sub.w	r8, r3, #2
    1708:	ldr.w	r3, [r2, #1060]	; 0x424
    170c:	lsl.w	r8, r8, r1
    1710:	add	r8, r3
    1712:	lsls.w	r3, r7, r1
    1716:	beq.n	173e <ExFatFile::addDirCluster()+0x96>
    1718:	movs	r5, #0
    171a:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    171e:	add.w	r1, r8, r5
    1722:	mov	r2, r6
    1724:	adds	r5, #1
    1726:	ldr	r3, [r0, #0]
    1728:	ldr	r3, [r3, #24]
    172a:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    172c:	cmp	r0, #0
    172e:	beq.n	16c6 <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    1730:	ldr	r2, [r4, #32]
    1732:	ldrb.w	r3, [r2, #1085]	; 0x43d
    1736:	lsl.w	r3, r7, r3
    173a:	cmp	r3, r5
    173c:	bhi.n	171a <ExFatFile::addDirCluster()+0x72>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    173e:	ldrb.w	r3, [r4, #49]	; 0x31
    1742:	lsls	r3, r3, #25
    1744:	bmi.n	1770 <ExFatFile::addDirCluster()+0xc8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1746:	ldrb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    174a:	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    174c:	orn	r3, r3, #127	; 0x7f
    1750:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    1754:	ldr.w	r6, [r2, #1076]	; 0x434
    1758:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    175c:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1760:	adds	r2, r2, r6
    1762:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    1764:	adds	r0, r0, r6
    1766:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1768:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    176c:	strd	r0, r1, [r4, #16]
  }
  return sync();
    1770:	mov	r0, r4

 fail:
  return false;
}
    1772:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    1776:	b.w	1648 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    177a:	ldr	r0, [r0, #32]
    177c:	bl	1264 <ExFatPartition::rootLength()>
    1780:	b.n	16b8 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    1782:	mov	r0, r5
    1784:	bl	e30 <FsCache::sync()>
    1788:	cmp	r0, #0
    178a:	bne.n	16e4 <ExFatFile::addDirCluster()+0x3c>
    178c:	b.n	16c6 <ExFatFile::addDirCluster()+0x1e>
    178e:	nop

00001790 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    1790:	ldrb.w	r3, [r1, #49]	; 0x31
    1794:	tst.w	r3, #80	; 0x50
    1798:	bne.n	179e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    179a:	movs	r0, #0
    179c:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    179e:	push	{r4, r5, lr}
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    17a0:	movw	r5, #2562	; 0xa02
    17a4:	sub	sp, #12
    17a6:	ldrb	r3, [r2, #0]
    17a8:	mov	r4, r0
    17aa:	ldr	r2, [r2, #4]
    17ac:	str	r5, [sp, #0]
    17ae:	bl	818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    17b2:	cbnz	r0, 17ba <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    17b4:	movs	r0, #0
    17b6:	add	sp, #12
    17b8:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    17ba:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    17bc:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    17be:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    17c2:	bl	16a8 <ExFatFile::addDirCluster()>
    17c6:	cmp	r0, #0
    17c8:	beq.n	17b4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    17ca:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    17cc:	movs	r2, #0
    17ce:	movs	r3, #0
    17d0:	mov	r0, r4
    17d2:	str	r1, [r4, #28]
    17d4:	bl	710 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    17d8:	movs	r3, #193	; 0xc1
  return sync();
    17da:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    17dc:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    17e0:	add	sp, #12
    17e2:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    17e6:	b.w	1648 <ExFatFile::sync()>
    17ea:	nop

000017ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    17ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17f0:	mov	r6, r0
    17f2:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    17f4:	movs	r0, #0
    17f6:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    17f8:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    17fc:	str	r2, [sp, #12]
    17fe:	strb.w	r0, [sp, #73]	; 0x49
    1802:	strb.w	r0, [sp, #74]	; 0x4a
    1806:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    180a:	cbnz	r1, 1818 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    180c:	mov	r9, r3
    180e:	ldrb.w	r3, [r4, #49]	; 0x31
    1812:	tst.w	r3, #80	; 0x50
    1816:	bne.n	1820 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    1818:	movs	r0, #0
}
    181a:	add	sp, #84	; 0x54
    181c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    1820:	ldrb	r3, [r2, #0]
    1822:	mov	r1, r2
    1824:	cmp	r3, #47	; 0x2f
    1826:	beq.n	189c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    1828:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    182c:	add	r3, sp, #12
    182e:	add	r2, sp, #16
    1830:	mov	r0, r6
    1832:	bl	440 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    1836:	cmp	r0, #0
    1838:	beq.n	1818 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    183a:	ldr	r3, [sp, #12]
    183c:	ldrb	r3, [r3, #0]
    183e:	cmp	r3, #0
    1840:	beq.n	18b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    1842:	ldrb.w	r3, [sp, #16]
    1846:	mov	r1, r4
    1848:	ldr	r2, [sp, #20]
    184a:	mov	r0, r6
    184c:	str.w	r8, [sp]
    1850:	bl	818 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    1854:	cbnz	r0, 186a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    1856:	cmp.w	r9, #0
    185a:	beq.n	1818 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    185c:	mov	r1, r4
    185e:	add	r2, sp, #16
    1860:	mov	r0, r6
    1862:	bl	1790 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    1866:	cmp	r0, #0
    1868:	beq.n	1818 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    186a:	mov	r4, r6
    186c:	add	r7, sp, #24
    186e:	add.w	lr, r6, #48	; 0x30
    1872:	ldr	r0, [r4, #0]
    1874:	adds	r4, #16
    1876:	ldr.w	r1, [r4, #-12]
    187a:	mov	r5, r7
    187c:	ldr.w	r2, [r4, #-8]
    1880:	adds	r7, #16
    1882:	ldr.w	r3, [r4, #-4]
    1886:	cmp	r4, lr
    1888:	stmia	r5!, {r0, r1, r2, r3}
    188a:	bne.n	1872 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    188c:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    188e:	add	r4, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    1890:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    1892:	mov	r0, r6
    1894:	bl	35c <ExFatFile::close()>
    1898:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    189a:	b.n	182c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    189c:	adds	r1, #1
    189e:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    18a0:	ldrb	r3, [r1, #0]
    18a2:	cmp	r3, #47	; 0x2f
    18a4:	beq.n	189c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    18a6:	ldr	r1, [r4, #32]
    18a8:	add	r0, sp, #24
    18aa:	bl	418 <ExFatFile::openRoot(ExFatVolume*)>
    18ae:	cmp	r0, #0
    18b0:	beq.n	1818 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    18b2:	add	r4, sp, #24
    18b4:	ldr	r1, [sp, #12]
    18b6:	b.n	1828 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    18b8:	add	r2, sp, #16
    18ba:	mov	r1, r4
    18bc:	mov	r0, r6
    18be:	bl	1790 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    18c2:	add	sp, #84	; 0x54
    18c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000018c8 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    18c8:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    18ca:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    18ce:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    18d0:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    18d2:	tst.w	r4, #24
    18d6:	strb.w	r3, [sp, #49]	; 0x31
    18da:	strb.w	r3, [sp, #50]	; 0x32
    18de:	strb.w	r3, [sp, #51]	; 0x33
    18e2:	strb.w	r3, [sp, #105]	; 0x69
    18e6:	strb.w	r3, [sp, #106]	; 0x6a
    18ea:	strb.w	r3, [sp, #107]	; 0x6b
    18ee:	beq.n	18f8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    18f0:	ldr	r3, [r1, #32]
    18f2:	ldr	r4, [r0, #32]
    18f4:	cmp	r4, r3
    18f6:	beq.n	18fe <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    18f8:	movs	r0, #0
}
    18fa:	add	sp, #116	; 0x74
    18fc:	pop	{r4, r5, r6, r7, pc}
    18fe:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    1900:	movw	r3, #2561	; 0xa01
    1904:	mov	r0, sp
    1906:	bl	bf0 <ExFatFile::open(ExFatFile*, char const*, int)>
    190a:	cmp	r0, #0
    190c:	beq.n	18f8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    190e:	mov	r5, r4
    1910:	add.w	lr, r4, #48	; 0x30
    1914:	add	r7, sp, #56	; 0x38
    1916:	ldr	r0, [r5, #0]
    1918:	adds	r5, #16
    191a:	ldr.w	r1, [r5, #-12]
    191e:	mov	r6, r7
    1920:	ldr.w	r2, [r5, #-8]
    1924:	adds	r7, #16
    1926:	ldr.w	r3, [r5, #-4]
    192a:	cmp	r5, lr
    192c:	stmia	r6!, {r0, r1, r2, r3}
    192e:	bne.n	1916 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    1930:	ldr	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    1932:	add	r2, sp, #36	; 0x24
    1934:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    1938:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    193a:	ldrb.w	r5, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    193e:	ldmia	r2, {r0, r1, r2}
    1940:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1944:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    1948:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    194a:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    194e:	orn	r3, r3, #127	; 0x7f
    1952:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    1956:	bl	1648 <ExFatFile::sync()>
    195a:	cmp	r0, #0
    195c:	beq.n	18f8 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    195e:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    1960:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    1962:	movs	r3, #8
  return oldFile.remove();
    1964:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    1966:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    1968:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    196c:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    1970:	bl	13a4 <ExFatFile::remove()>
    1974:	b.n	18fa <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    1976:	nop

00001978 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    1978:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    197c:	lsls	r2, r3, #30
    197e:	bpl.n	19b2 <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    1980:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    1982:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    1984:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    1986:	cbz	r5, 19ac <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    1988:	and.w	r3, r3, #64	; 0x40
    198c:	mov	r4, r0
    198e:	and.w	r6, r3, #255	; 0xff
    1992:	cbnz	r3, 19b6 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    1994:	ldr	r1, [r0, #24]
    1996:	cmp	r1, #0
    1998:	bne.n	1a20 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    199a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    199c:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    199e:	mov	r1, r5
    19a0:	ldr	r0, [r4, #32]
    19a2:	bl	118c <ExFatPartition::freeChain(unsigned long)>
    19a6:	cbnz	r0, 19f8 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    19a8:	movs	r0, #0
    19aa:	b.n	19ae <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    19ac:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    19ae:	add	sp, #12
    19b0:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    19b2:	movs	r0, #0
}
    19b4:	bx	lr
    19b6:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    19b8:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    19ba:	ldrb.w	r2, [r0, #1085]	; 0x43d
    19be:	ldrd	r6, r7, [r4, #8]
    19c2:	adds	r2, #9
    19c4:	adds.w	r6, r6, #4294967295
    19c8:	uxtb	r2, r2
    19ca:	adc.w	r7, r7, #4294967295
    19ce:	rsb	lr, r2, #32
    19d2:	sub.w	r3, r2, #32
    19d6:	lsr.w	r2, r6, r2
    19da:	lsl.w	lr, r7, lr
    19de:	lsr.w	r3, r7, r3
    19e2:	orr.w	r2, r2, lr
    19e6:	orrs	r2, r3
    19e8:	adds	r2, #1
    if (m_curCluster) {
    19ea:	cbz	r1, 1a1a <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    19ec:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    19ee:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    19f0:	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    19f2:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    19f4:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    19f6:	cbnz	r2, 1a3c <ExFatFile::truncate()+0xc4>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    19f8:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    19fc:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    19fe:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1a02:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    1a06:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1a0a:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    1a0e:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    1a12:	bl	1648 <ExFatFile::sync()>

 fail:
  return false;
}
    1a16:	add	sp, #12
    1a18:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    1a1a:	str	r5, [sp, #4]
      m_firstCluster = 0;
    1a1c:	str	r1, [r4, #28]
    1a1e:	b.n	19f6 <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    1a20:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    1a22:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    1a24:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    1a28:	bl	1154 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1a2c:	sxtb	r0, r0
      if (fg < 0) {
    1a2e:	cmp	r0, #0
    1a30:	blt.n	19a8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    1a32:	bne.n	1a4a <ExFatFile::truncate()+0xd2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    1a34:	ldr	r5, [sp, #4]
    1a36:	cmp	r5, #0
    1a38:	beq.n	19f8 <ExFatFile::truncate()+0x80>
    1a3a:	b.n	199e <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    1a3c:	movs	r3, #0
    1a3e:	ldr	r1, [sp, #4]
    1a40:	bl	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    1a44:	cmp	r0, #0
    1a46:	bne.n	19f8 <ExFatFile::truncate()+0x80>
    1a48:	b.n	19a8 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    1a4a:	mov.w	r2, #4294967295
    1a4e:	ldr	r1, [r4, #24]
    1a50:	ldr	r0, [r4, #32]
    1a52:	bl	1168 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1a56:	cmp	r0, #0
    1a58:	bne.n	1a34 <ExFatFile::truncate()+0xbc>
    1a5a:	b.n	19a8 <ExFatFile::truncate()+0x30>

00001a5c <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    1a5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a60:	ldrb.w	r3, [r0, #51]	; 0x33
    1a64:	sub	sp, #20
    1a66:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    1a68:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    1a6a:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    1a6c:	bmi.n	1a84 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    1a6e:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    1a72:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    1a76:	orr.w	r3, r3, #1
    1a7a:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    1a7e:	add	sp, #20
    1a80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    1a84:	lsls	r2, r3, #28
    1a86:	mov	r8, r1
    1a88:	bmi.w	1c98 <ExFatFile::write(void const*, unsigned int)+0x23c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    1a8c:	ldr	r3, [sp, #4]
    1a8e:	cmp	r3, #0
    1a90:	beq.w	1cc0 <ExFatFile::write(void const*, unsigned int)+0x264>
    1a94:	mov	r1, r4
    1a96:	ldr	r5, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    1a98:	mov.w	sl, #1
    1a9c:	mov	r9, r8
    1a9e:	ldrd	r2, r3, [r1], #24
    1aa2:	mov	fp, r2
    1aa4:	str	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1aa6:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    1aa8:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1aaa:	ldr.w	r6, [r0, #1072]	; 0x430
    1aae:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1ab2:	ubfx	r8, r6, #0, #9
    if (clusterOffset == 0) {
    1ab6:	cbnz	r6, 1b0e <ExFatFile::write(void const*, unsigned int)+0xb2>
      // start of new cluster
      if (m_curCluster != 0) {
    1ab8:	cmp	r1, #0
    1aba:	beq.w	1c32 <ExFatFile::write(void const*, unsigned int)+0x1d6>
        int fg;

        if (isContiguous()) {
    1abe:	ldrb.w	r3, [r4, #51]	; 0x33
    1ac2:	lsls	r3, r3, #25
    1ac4:	bpl.w	1c66 <ExFatFile::write(void const*, unsigned int)+0x20a>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    1ac8:	ldrb.w	r2, [r0, #1085]	; 0x43d
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    1acc:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    1ace:	adds	r2, #9
    1ad0:	ldrd	fp, ip, [r4, #8]
    1ad4:	uxtb	r2, r2
    1ad6:	adds.w	fp, fp, #4294967295
    1ada:	rsb	lr, r2, #32
    1ade:	sub.w	r7, r2, #32
    1ae2:	adc.w	ip, ip, #4294967295
    1ae6:	lsr.w	r2, fp, r2
    1aea:	lsl.w	lr, ip, lr
    1aee:	lsr.w	r7, ip, r7
    1af2:	orr.w	r2, r2, lr
    1af6:	orrs	r2, r7
    1af8:	add	r2, r3
    1afa:	cmp	r1, r2
    1afc:	bcc.w	1c60 <ExFatFile::write(void const*, unsigned int)+0x204>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    1b00:	mov	r0, r4
    1b02:	bl	1314 <ExFatFile::addCluster()>
    1b06:	cmp	r0, #0
    1b08:	beq.n	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
    1b0a:	ldr	r0, [r4, #32]
    1b0c:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1b0e:	lsrs	r6, r6, #9
    1b10:	subs	r1, #2
    1b12:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1b16:	ldrb.w	r3, [r0, #1085]	; 0x43d
    1b1a:	add	r7, r6
    1b1c:	lsls	r1, r3
    1b1e:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    1b20:	cmp.w	r8, #0
    1b24:	bne.n	1bda <ExFatFile::write(void const*, unsigned int)+0x17e>
    1b26:	cmp.w	r5, #512	; 0x200
    1b2a:	bcc.n	1bda <ExFatFile::write(void const*, unsigned int)+0x17e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    1b2c:	cmp.w	r5, #1024	; 0x400
    1b30:	bcc.w	1c3a <ExFatFile::write(void const*, unsigned int)+0x1de>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1b34:	lsl.w	r2, sl, r3
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    1b38:	lsrs	r7, r5, #9
    1b3a:	ldr.w	r3, [r0, #532]	; 0x214
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1b3e:	subs	r2, r2, r6
    1b40:	mov	r6, r7
    1b42:	cmp	r7, r2
    1b44:	it	cs
    1b46:	movcs	r6, r2
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    1b48:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1b4a:	mov.w	r7, r6, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    1b4e:	bhi.n	1b64 <ExFatFile::write(void const*, unsigned int)+0x108>
    1b50:	adds	r2, r6, r1
    1b52:	cmp	r2, r3
    1b54:	bls.n	1b64 <ExFatFile::write(void const*, unsigned int)+0x108>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    1b56:	add.w	r0, r0, #524	; 0x20c
    1b5a:	str	r1, [sp, #8]
    1b5c:	bl	d64 <FsCache::invalidate()>
    1b60:	ldr	r0, [r4, #32]
    1b62:	ldr	r1, [sp, #8]
    1b64:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    1b68:	mov	r3, r6
    1b6a:	mov	r2, r9
    1b6c:	ldr	r6, [r0, #0]
    1b6e:	ldr	r6, [r6, #28]
    1b70:	blx	r6
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    1b72:	cmp	r0, #0
    1b74:	beq.w	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
    1b78:	mov	r0, r7
    1b7a:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    1b7c:	add	r9, r7
    toWrite -= n;
    1b7e:	subs	r5, r5, r7
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b80:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b84:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b88:	adds.w	fp, r2, r0
    1b8c:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b90:	cmp	r7, ip
    1b92:	it	eq
    1b94:	cmpeq	r6, fp
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b96:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b9a:	bcs.n	1bac <ExFatFile::write(void const*, unsigned int)+0x150>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    1b9c:	ldrb.w	r1, [r4, #51]	; 0x33
    1ba0:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    1ba4:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    1ba8:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    1bac:	cmp	r5, #0
    1bae:	bne.w	1aa6 <ExFatFile::write(void const*, unsigned int)+0x4a>
    1bb2:	mov	r2, fp
    1bb4:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    1bb6:	ldrd	r0, r1, [r4, #8]
    1bba:	cmp	r1, r3
    1bbc:	it	eq
    1bbe:	cmpeq	r0, r2
    1bc0:	bcc.n	1ca8 <ExFatFile::write(void const*, unsigned int)+0x24c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    1bc2:	ldr	r3, [pc, #260]	; (1cc8 <ExFatFile::write(void const*, unsigned int)+0x26c>)
    1bc4:	ldr	r3, [r3, #0]
    1bc6:	cmp	r3, #0
    1bc8:	beq.n	1cbc <ExFatFile::write(void const*, unsigned int)+0x260>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1bca:	ldrb.w	r3, [r4, #51]	; 0x33
    1bce:	ldr	r0, [sp, #4]
    1bd0:	orn	r3, r3, #127	; 0x7f
    1bd4:	strb.w	r3, [r4, #51]	; 0x33
    1bd8:	b.n	1a7e <ExFatFile::write(void const*, unsigned int)+0x22>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    1bda:	cmp.w	r8, #0
    1bde:	bne.n	1c2e <ExFatFile::write(void const*, unsigned int)+0x1d2>
    1be0:	ldrd	r2, r3, [r4, #16]
    1be4:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    1be8:	cmp	r7, r3
    1bea:	it	eq
    1bec:	cmpeq	r6, r2
    1bee:	ite	cc
    1bf0:	movcc	r2, #1
    1bf2:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    1bf4:	add.w	r0, r0, #524	; 0x20c
    1bf8:	bl	d70 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    1bfc:	cmp	r0, #0
    1bfe:	beq.w	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    1c02:	rsb	r7, r8, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    1c06:	add	r0, r8
    1c08:	mov	r1, r9
    1c0a:	cmp	r7, r5
    1c0c:	it	cs
    1c0e:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    1c10:	add	r8, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    1c12:	mov	r2, r7
    1c14:	bl	7fc4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    1c18:	cmp.w	r8, #512	; 0x200
    1c1c:	bne.n	1b78 <ExFatFile::write(void const*, unsigned int)+0x11c>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    1c1e:	ldr	r0, [r4, #32]
    1c20:	add.w	r0, r0, #524	; 0x20c
    1c24:	bl	e30 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    1c28:	cmp	r0, #0
    1c2a:	bne.n	1b78 <ExFatFile::write(void const*, unsigned int)+0x11c>
    1c2c:	b.n	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    1c2e:	movs	r2, #1
    1c30:	b.n	1bf4 <ExFatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    1c32:	ldr	r1, [r4, #28]
    1c34:	cbz	r1, 1c74 <ExFatFile::write(void const*, unsigned int)+0x218>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    1c36:	str	r1, [r4, #24]
    1c38:	b.n	1b0e <ExFatFile::write(void const*, unsigned int)+0xb2>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    1c3a:	ldr.w	r3, [r0, #532]	; 0x214
    1c3e:	cmp	r1, r3
    1c40:	beq.n	1c88 <ExFatFile::write(void const*, unsigned int)+0x22c>
    1c42:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    1c46:	mov	r2, r9
    1c48:	ldr	r3, [r0, #0]
    1c4a:	ldr	r3, [r3, #24]
    1c4c:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    1c4e:	cmp	r0, #0
    1c50:	beq.w	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
    1c54:	mov.w	r0, #512	; 0x200
    1c58:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    1c5a:	mov.w	r7, #512	; 0x200
    1c5e:	b.n	1b7c <ExFatFile::write(void const*, unsigned int)+0x120>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    1c60:	adds	r1, #1
    1c62:	str	r1, [r4, #24]
    1c64:	b.n	1b0e <ExFatFile::write(void const*, unsigned int)+0xb2>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1c66:	ldr	r2, [sp, #12]
    1c68:	bl	1154 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    1c6c:	cmp	r0, #0
    1c6e:	bne.w	1b0a <ExFatFile::write(void const*, unsigned int)+0xae>
    1c72:	b.n	1b00 <ExFatFile::write(void const*, unsigned int)+0xa4>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    1c74:	mov	r0, r4
    1c76:	bl	1314 <ExFatFile::addCluster()>
    1c7a:	cmp	r0, #0
    1c7c:	beq.w	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    1c80:	ldr	r1, [r4, #24]
    1c82:	ldr	r0, [r4, #32]
    1c84:	str	r1, [r4, #28]
    1c86:	b.n	1b0e <ExFatFile::write(void const*, unsigned int)+0xb2>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    1c88:	add.w	r0, r0, #524	; 0x20c
    1c8c:	str	r1, [sp, #8]
    1c8e:	bl	d64 <FsCache::invalidate()>
    1c92:	ldr	r0, [r4, #32]
    1c94:	ldr	r1, [sp, #8]
    1c96:	b.n	1c42 <ExFatFile::write(void const*, unsigned int)+0x1e6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    1c98:	ldrd	r2, r3, [r0, #16]
    1c9c:	bl	710 <ExFatFile::seekSet(unsigned long long)>
    1ca0:	cmp	r0, #0
    1ca2:	beq.w	1a6e <ExFatFile::write(void const*, unsigned int)+0x12>
    1ca6:	b.n	1a8c <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1ca8:	ldrb.w	r1, [r4, #51]	; 0x33
    1cac:	ldr	r0, [sp, #4]
    1cae:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    1cb2:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1cb6:	strb.w	r1, [r4, #51]	; 0x33
    1cba:	b.n	1a7e <ExFatFile::write(void const*, unsigned int)+0x22>
    1cbc:	ldr	r0, [sp, #4]
    1cbe:	b.n	1a7e <ExFatFile::write(void const*, unsigned int)+0x22>
    1cc0:	ldrd	r2, r3, [r4]
    1cc4:	b.n	1bb6 <ExFatFile::write(void const*, unsigned int)+0x15a>
    1cc6:	nop
    1cc8:	.word	0x20003840

00001ccc <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    1ccc:	push	{r3, r4, r5, lr}
    1cce:	mov	r5, r1
    1cd0:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    1cd2:	movs	r2, #36	; 0x24
    1cd4:	movs	r1, #0
    1cd6:	bl	b1ec <memset>

  m_vol = vol;
    1cda:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    1cdc:	ldrb	r3, [r5, #7]
    1cde:	cmp	r3, #16
    1ce0:	beq.n	1cf4 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    1ce2:	cmp	r3, #32
    1ce4:	bne.n	1cf0 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    1ce6:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1ce8:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    1cea:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cec:	strb	r0, [r4, #2]
    1cee:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    1cf0:	movs	r0, #0
}
    1cf2:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    1cf4:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cf6:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    1cf8:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cfa:	strb	r0, [r4, #2]
    1cfc:	pop	{r3, r4, r5, pc}
    1cfe:	nop

00001d00 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    1d00:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    1d02:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    1d04:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    1d08:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    1d0a:	ldr	r0, [r0, #8]
    1d0c:	mov	r1, r5
    1d0e:	bl	2b74 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    1d12:	cbz	r0, 1d2a <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    1d14:	cbz	r5, 1d2c <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    1d16:	ldr	r3, [r4, #16]
    1d18:	adds	r5, #1
    1d1a:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    1d1c:	ldrb	r3, [r4, #2]
    1d1e:	it	ne
    1d20:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1d24:	orn	r3, r3, #127	; 0x7f
    1d28:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    1d2a:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    1d2c:	ldrb	r3, [r4, #2]
    1d2e:	orr.w	r3, r3, #64	; 0x40
    1d32:	b.n	1d24 <FatFile::addCluster()+0x24>

00001d34 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    1d34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    1d38:	ldrb	r3, [r0, #0]
    1d3a:	and.w	r3, r3, #32
    1d3e:	cbnz	r3, 1d4c <FatFile::addDirCluster()+0x18>
    1d40:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    1d44:	ldr	r1, [r0, #20]
    1d46:	ldr	r3, [pc, #124]	; (1dc4 <FatFile::addDirCluster()+0x90>)
    1d48:	cmp	r1, r3
    1d4a:	bls.n	1d54 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    1d4c:	movs	r6, #0
}
    1d4e:	mov	r0, r6
    1d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d54:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    1d56:	bl	1d00 <FatFile::addCluster()>
    1d5a:	mov	r6, r0
    1d5c:	cmp	r0, #0
    1d5e:	beq.n	1d4c <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    1d60:	ldr	r1, [r5, #16]
    1d62:	ldr	r0, [r5, #8]
    1d64:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
    1d68:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1d6a:	ldr	r0, [r5, #8]
    1d6c:	movs	r2, #5
    1d6e:	mov	r1, r7
    1d70:	adds	r0, #36	; 0x24
    1d72:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    1d76:	mov	r8, r0
    1d78:	cmp	r0, #0
    1d7a:	beq.n	1d4c <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    1d7c:	mov.w	r2, #512	; 0x200
    1d80:	mov	r1, r4
    1d82:	bl	b1ec <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    1d86:	ldr	r3, [r5, #8]
    1d88:	ldrb	r2, [r3, #4]
    1d8a:	cmp	r2, #1
    1d8c:	bls.n	1db0 <FatFile::addDirCluster()+0x7c>
    1d8e:	movs	r4, #1
    1d90:	b.n	1d9c <FatFile::addDirCluster()+0x68>
    1d92:	ldr	r3, [r5, #8]
    1d94:	uxtb	r4, r4
    1d96:	ldrb	r2, [r3, #4]
    1d98:	cmp	r2, r4
    1d9a:	bls.n	1db0 <FatFile::addDirCluster()+0x7c>
    1d9c:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    1d9e:	adds	r1, r4, r7
    1da0:	mov	r2, r8
    1da2:	adds	r4, #1
    1da4:	ldr	r3, [r0, #0]
    1da6:	ldr	r3, [r3, #24]
    1da8:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    1daa:	cmp	r0, #0
    1dac:	bne.n	1d92 <FatFile::addDirCluster()+0x5e>
    1dae:	b.n	1d4c <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    1db0:	ldrb	r3, [r3, #6]
    1db2:	mov.w	r2, #512	; 0x200
    1db6:	ldr	r1, [r5, #20]
    1db8:	lsl.w	r3, r2, r3
    1dbc:	uxtah	r3, r1, r3
    1dc0:	str	r3, [r5, #20]
    1dc2:	b.n	1d4e <FatFile::addDirCluster()+0x1a>
    1dc4:	.word	0x001ffdff

00001dc8 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    1dc8:	push	{r4, lr}
    1dca:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1dcc:	ldr	r0, [r0, #8]
    1dce:	mov	r2, r1
    1dd0:	adds	r0, #36	; 0x24
    1dd2:	ldr	r1, [r4, #24]
    1dd4:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    1dd8:	cbz	r0, 1de4 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    1dda:	ldrh	r3, [r4, #4]
    1ddc:	and.w	r3, r3, #15
    1de0:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    1de4:	pop	{r4, pc}
    1de6:	nop

00001de8 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    1de8:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1dea:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    1dee:	sub	sp, #12
    1df0:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1df2:	cmp	r3, #0
    1df4:	blt.n	1e2a <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    1df6:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1df8:	add.w	r0, r5, #36	; 0x24
    1dfc:	bl	2a80 <FatCache::sync()>
    1e00:	cbnz	r0, 1e10 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    1e02:	ldrb	r3, [r4, #1]
  return false;
    1e04:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    1e06:	orr.w	r3, r3, #1
    1e0a:	strb	r3, [r4, #1]
  return false;
}
    1e0c:	add	sp, #12
    1e0e:	pop	{r4, r5, pc}
    1e10:	add.w	r0, r5, #560	; 0x230
    1e14:	bl	2a80 <FatCache::sync()>
    1e18:	cmp	r0, #0
    1e1a:	beq.n	1e02 <FatFile::sync() [clone .part.40]+0x1a>
    1e1c:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1e1e:	ldr	r3, [r0, #0]
    1e20:	ldr	r3, [r3, #20]
    1e22:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1e24:	cmp	r0, #0
    1e26:	beq.n	1e02 <FatFile::sync() [clone .part.40]+0x1a>
    1e28:	b.n	1e0c <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    1e2a:	movs	r1, #1
    1e2c:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    1e30:	mov	r5, r0
    1e32:	cmp	r0, #0
    1e34:	beq.n	1e02 <FatFile::sync() [clone .part.40]+0x1a>
    1e36:	ldrb	r3, [r0, #0]
    1e38:	cmp	r3, #229	; 0xe5
    1e3a:	beq.n	1e02 <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    1e3c:	ldrb	r3, [r4, #0]
    1e3e:	lsls	r3, r3, #28
    1e40:	bpl.n	1e46 <FatFile::sync() [clone .part.40]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    1e42:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    1e44:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    1e46:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    1e48:	ldr	r1, [pc, #44]	; (1e78 <FatFile::sync() [clone .part.40]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    1e4a:	lsrs	r2, r3, #16
    1e4c:	strh	r3, [r5, #26]
    1e4e:	ldr	r3, [r1, #0]
    1e50:	strh	r2, [r5, #20]
    1e52:	cbz	r3, 1e6e <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    1e54:	add.w	r2, sp, #3
    1e58:	add.w	r1, sp, #6
    1e5c:	add	r0, sp, #4
    1e5e:	blx	r3
      setLe16(dir->modifyDate, date);
    1e60:	ldrh.w	r3, [sp, #4]
    1e64:	ldrh.w	r2, [sp, #6]
    1e68:	strh	r3, [r5, #24]
    1e6a:	strh	r3, [r5, #18]
    1e6c:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    1e6e:	ldrb	r3, [r4, #2]
    1e70:	and.w	r3, r3, #127	; 0x7f
    1e74:	strb	r3, [r4, #2]
    1e76:	b.n	1df6 <FatFile::sync() [clone .part.40]+0xe>
    1e78:	.word	0x20003840

00001e7c <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    1e7c:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    1e7e:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    1e80:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    1e82:	cbnz	r3, 1e8e <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e84:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    1e86:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e88:	strb	r3, [r4, #0]
  m_flags = 0;
    1e8a:	strb	r3, [r4, #2]
  return rtn;
}
    1e8c:	pop	{r4, pc}
    1e8e:	bl	1de8 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e92:	movs	r3, #0
    1e94:	strb	r3, [r4, #0]
  m_flags = 0;
    1e96:	strb	r3, [r4, #2]
  return rtn;
}
    1e98:	pop	{r4, pc}
    1e9a:	nop

00001e9c <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    1e9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    1ea0:	ldrb	r5, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    1ea2:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    1ea4:	tst.w	r5, #112	; 0x70
    1ea8:	bne.n	1eb2 <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    1eaa:	movs	r0, #0
    1eac:	add	sp, #32
    1eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    1eb2:	movw	r3, #2562	; 0xa02
    1eb6:	mov	r4, r0
    1eb8:	mov	r5, r1
    1eba:	bl	33f8 <FatFile::open(FatFile*, fname_t*, int)>
    1ebe:	cmp	r0, #0
    1ec0:	beq.n	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    1ec2:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    1ec4:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1ec6:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    1ec8:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    1eca:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1ecc:	bl	1d34 <FatFile::addDirCluster()>
    1ed0:	cmp	r0, #0
    1ed2:	beq.n	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    1ed4:	ldr	r2, [r4, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    1ed6:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    1ed8:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    1eda:	cmp	r3, #0
    1edc:	bne.n	1fd8 <FatFile::mkdir(FatFile*, fname_t*)+0x13c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    1ede:	movs	r1, #1
    1ee0:	mov	r0, r4
    1ee2:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    1ee6:	mov	r7, r0
    1ee8:	cmp	r0, #0
    1eea:	beq.n	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    1eec:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1eee:	ldr	r0, [r0, #0]
    1ef0:	ldr	r1, [r7, #4]
    1ef2:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    1ef4:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    1ef6:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1efa:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    1efc:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1efe:	ldr	r3, [r7, #12]
    1f00:	ldrh.w	r8, [r7, #20]
    1f04:	stmia.w	lr!, {r0, r1, r2, r3}
    1f08:	ldr	r2, [r7, #24]
    1f0a:	ldr	r3, [r7, #28]
    1f0c:	ldr	r0, [r7, #16]
    1f0e:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    1f10:	strb.w	ip, [r6, #-32]!
    1f14:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1f18:	ldrh	r7, [r7, #26]
    1f1a:	stmia.w	lr!, {r0, r1, r2, r3}
    1f1e:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    1f20:	movs	r2, #32
    1f22:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    1f26:	cmp	ip, r3
    1f28:	bne.n	1f22 <FatFile::mkdir(FatFile*, fname_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    1f2a:	ldr	r1, [r4, #32]
    1f2c:	ldr	r0, [r4, #8]
    1f2e:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1f32:	ldr	r3, [r4, #8]
    1f34:	mov	r1, r0
    1f36:	movs	r2, #1
    1f38:	add.w	r0, r3, #36	; 0x24
    1f3c:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    1f40:	mov	lr, r0
    1f42:	cmp	r0, #0
    1f44:	beq.n	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f46:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    1f4a:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f4e:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    1f52:	mov	r7, r6
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f54:	ldmia	r6!, {r0, r1, r2, r3}
    1f56:	str.w	r0, [lr]
    1f5a:	str.w	r1, [lr, #4]
    1f5e:	str.w	r2, [lr, #8]
    1f62:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    1f66:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f6a:	ldmia	r6!, {r0, r1, r2, r3}
    1f6c:	str.w	r0, [lr, #16]
    1f70:	str.w	r1, [lr, #20]
    1f74:	str.w	r2, [lr, #24]
    1f78:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    1f7c:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    1f7e:	lsrs	r2, r3, #16
    1f80:	strh.w	r3, [sp, #26]
    1f84:	strh.w	r2, [sp, #20]
    1f88:	ldmia	r7!, {r0, r1, r2, r3}
    1f8a:	str.w	r0, [lr, #32]
    1f8e:	str.w	r1, [lr, #36]	; 0x24
    1f92:	str.w	r2, [lr, #40]	; 0x28
    1f96:	str.w	r3, [lr, #44]	; 0x2c
    1f9a:	ldmia	r7!, {r0, r1, r2, r3}
    1f9c:	str.w	r0, [lr, #48]	; 0x30
    1fa0:	str.w	r1, [lr, #52]	; 0x34
    1fa4:	str.w	r2, [lr, #56]	; 0x38
    1fa8:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    1fac:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1fae:	add.w	r0, r4, #36	; 0x24
    1fb2:	bl	2a80 <FatCache::sync()>
    1fb6:	cmp	r0, #0
    1fb8:	beq.w	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1fbc:	add.w	r0, r4, #560	; 0x230
    1fc0:	bl	2a80 <FatCache::sync()>
    1fc4:	cmp	r0, #0
    1fc6:	beq.w	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1fca:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1fcc:	ldr	r3, [r0, #0]
    1fce:	ldr	r3, [r3, #20]

fail:
  return false;
}
    1fd0:	add	sp, #32
    1fd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1fd6:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1fd8:	ldr	r3, [r4, #20]
    1fda:	cbz	r3, 1fea <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fdc:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    1fde:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fe0:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    1fe4:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    1fe6:	str	r2, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fe8:	strb	r3, [r4, #2]
    1fea:	mov	r0, r4
    1fec:	bl	1de8 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    1ff0:	cmp	r0, #0
    1ff2:	beq.w	1eaa <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1ff6:	b.n	1ede <FatFile::mkdir(FatFile*, fname_t*)+0x42>

00001ff8 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    1ff8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ffc:	mov	r6, r0
    1ffe:	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    2000:	movs	r0, #0
    2002:	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    2004:	ldrb	r1, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    2006:	str	r2, [sp, #4]
    2008:	strb.w	r0, [sp, #36]	; 0x24
    200c:	strb.w	r0, [sp, #37]	; 0x25
    2010:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    2014:	cbnz	r1, 2020 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    2016:	mov	r8, r3
    2018:	ldrb	r3, [r4, #0]
    201a:	tst.w	r3, #112	; 0x70
    201e:	bne.n	2028 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    2020:	movs	r0, #0
}
    2022:	add	sp, #72	; 0x48
    2024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    2028:	ldrb	r3, [r2, #0]
    202a:	mov	r0, r2
    202c:	cmp	r3, #47	; 0x2f
    202e:	beq.n	208c <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2030:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2032:	add	r2, sp, #4
    2034:	add	r1, sp, #12
    2036:	bl	2f8c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    203a:	add	r2, sp, #12
    203c:	mov	r1, r4
    203e:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2040:	cmp	r0, #0
    2042:	beq.n	2020 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    2044:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2046:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    2048:	ldrb	r5, [r5, #0]
    204a:	cmp	r5, #0
    204c:	beq.n	20b0 <FatFile::mkdir(FatFile*, char const*, bool)+0xb8>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    204e:	bl	33f8 <FatFile::open(FatFile*, fname_t*, int)>
    2052:	cbnz	r0, 2068 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    2054:	cmp.w	r8, #0
    2058:	beq.n	2020 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    205a:	mov	r1, r4
    205c:	add	r2, sp, #12
    205e:	mov	r0, r6
    2060:	bl	1e9c <FatFile::mkdir(FatFile*, fname_t*)>
    2064:	cmp	r0, #0
    2066:	beq.n	2020 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2068:	mov	r5, r6
    206a:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    206c:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2070:	ldmia	r5!, {r0, r1, r2, r3}
    2072:	stmia	r4!, {r0, r1, r2, r3}
    2074:	ldmia	r5!, {r0, r1, r2, r3}
    2076:	ldr	r5, [r5, #0]
    2078:	stmia	r4!, {r0, r1, r2, r3}
    207a:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    207c:	cmp.w	lr, #0
    2080:	bne.n	20a8 <FatFile::mkdir(FatFile*, char const*, bool)+0xb0>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    2082:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    2084:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    2086:	strb	r7, [r6, #2]
    2088:	ldr	r0, [sp, #4]
    208a:	b.n	2032 <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    208c:	adds	r0, #1
    208e:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2090:	ldrb	r3, [r0, #0]
    2092:	cmp	r3, #47	; 0x2f
    2094:	beq.n	208c <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
    2096:	ldr	r1, [r4, #8]
    2098:	add	r0, sp, #36	; 0x24
    209a:	bl	1ccc <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    209e:	cmp	r0, #0
    20a0:	beq.n	2020 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    20a2:	add	r4, sp, #36	; 0x24
    20a4:	ldr	r0, [sp, #4]
    20a6:	b.n	2030 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    20a8:	mov	r0, r6
    20aa:	bl	1de8 <FatFile::sync() [clone .part.40]>
    20ae:	b.n	2082 <FatFile::mkdir(FatFile*, char const*, bool)+0x8a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    20b0:	add	r2, sp, #12
    20b2:	mov	r1, r4
    20b4:	mov	r0, r6
    20b6:	bl	1e9c <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    20ba:	add	sp, #72	; 0x48
    20bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000020c0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    20c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20c4:	mov	r6, r0
    20c6:	sub	sp, #72	; 0x48
    20c8:	movs	r0, #0
    20ca:	mov	r5, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    20cc:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    20ce:	str	r2, [sp, #4]
    20d0:	strb.w	r0, [sp, #36]	; 0x24
    20d4:	strb.w	r0, [sp, #37]	; 0x25
    20d8:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    20dc:	cbnz	r1, 20e8 <FatFile::open(FatFile*, char const*, int)+0x28>
    20de:	mov	r8, r3
    20e0:	ldrb	r3, [r5, #0]
    20e2:	tst.w	r3, #112	; 0x70
    20e6:	bne.n	20f0 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    20e8:	movs	r0, #0
}
    20ea:	add	sp, #72	; 0x48
    20ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    20f0:	ldrb	r3, [r2, #0]
    20f2:	mov	r0, r2
    20f4:	cmp	r3, #47	; 0x2f
    20f6:	beq.n	214c <FatFile::open(FatFile*, char const*, int)+0x8c>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20f8:	movs	r7, #0
    20fa:	b.n	2102 <FatFile::open(FatFile*, char const*, int)+0x42>
    20fc:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    20fe:	strb	r7, [r6, #0]
  m_flags = 0;
    2100:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2102:	add	r2, sp, #4
    2104:	add	r1, sp, #12
    2106:	bl	2f8c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    210a:	add	r2, sp, #12
    210c:	mov	r1, r5
    210e:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2110:	cmp	r0, #0
    2112:	beq.n	20e8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    2114:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2116:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    2118:	ldrb	r4, [r4, #0]
    211a:	cbz	r4, 216a <FatFile::open(FatFile*, char const*, int)+0xaa>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    211c:	bl	33f8 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2120:	mov	r5, r6
    2122:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2124:	cmp	r0, #0
    2126:	beq.n	20e8 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2128:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    212c:	ldmia	r5!, {r0, r1, r2, r3}
    212e:	stmia	r4!, {r0, r1, r2, r3}
    2130:	ldmia	r5!, {r0, r1, r2, r3}
    2132:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    2136:	add	r5, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2138:	stmia	r4!, {r0, r1, r2, r3}
    213a:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    213e:	cmp.w	lr, #0
    2142:	beq.n	20fc <FatFile::open(FatFile*, char const*, int)+0x3c>
    2144:	mov	r0, r6
    2146:	bl	1de8 <FatFile::sync() [clone .part.40]>
    214a:	b.n	20fc <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    214c:	adds	r0, #1
    214e:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2150:	ldrb	r3, [r0, #0]
    2152:	cmp	r3, #47	; 0x2f
    2154:	beq.n	214c <FatFile::open(FatFile*, char const*, int)+0x8c>
      path++;
    }
    if (*path == 0) {
    2156:	cbz	r3, 217c <FatFile::open(FatFile*, char const*, int)+0xbc>
    2158:	ldr	r1, [r5, #8]
    215a:	add	r0, sp, #36	; 0x24
    215c:	bl	1ccc <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2160:	cmp	r0, #0
    2162:	beq.n	20e8 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    2164:	add	r5, sp, #36	; 0x24
    2166:	ldr	r0, [sp, #4]
    2168:	b.n	20f8 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    216a:	mov	r3, r8
    216c:	add	r2, sp, #12
    216e:	mov	r1, r5
    2170:	mov	r0, r6
    2172:	bl	33f8 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    2176:	add	sp, #72	; 0x48
    2178:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    217c:	ldr	r1, [r5, #8]
    217e:	mov	r0, r6
    2180:	bl	1ccc <FatFile::openRoot(FatVolume*) [clone .part.36]>
    2184:	b.n	20ea <FatFile::open(FatFile*, char const*, int)+0x2a>
    2186:	nop

00002188 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    2188:	cbz	r1, 2192 <FatFile::open(FatVolume*, char const*, int)+0xa>
    218a:	addw	r1, r1, #1084	; 0x43c
    218e:	b.w	20c0 <FatFile::open(FatFile*, char const*, int)>
}
    2192:	mov	r0, r1
    2194:	bx	lr
    2196:	nop

00002198 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    2198:	ldrb	r3, [r0, #0]
    219a:	cbz	r3, 21a0 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    219c:	movs	r0, #0
    219e:	bx	lr
    21a0:	b.w	1ccc <FatFile::openRoot(FatVolume*) [clone .part.36]>

000021a4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    21a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    21a8:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    21aa:	sub	sp, #12
    21ac:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    21ae:	lsls	r7, r3, #31
    21b0:	bpl.w	22cc <FatFile::read(void*, unsigned int)+0x128>
    21b4:	mov	r7, r1
    21b6:	ldrb	r1, [r0, #0]
    21b8:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    21ba:	lsls	r6, r1, #28
    21bc:	bmi.w	22de <FatFile::read(void*, unsigned int)+0x13a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    21c0:	lsls	r4, r1, #26
    21c2:	bpl.n	21d6 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    21c4:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    21c6:	ldr	r3, [r0, #20]
    21c8:	ldrh	r2, [r2, #8]
    21ca:	rsb	r3, r3, r2, lsl #5
    21ce:	uxth	r3, r3
    21d0:	cmp	r9, r3
    21d2:	it	cs
    21d4:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    21d6:	cmp.w	r9, #0
    21da:	beq.w	232a <FatFile::read(void*, unsigned int)+0x186>
    21de:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    21e0:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    21e2:	mov	r6, r9
    21e4:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    21e8:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    21ec:	ldr	r2, [r5, #8]
    21ee:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    21f2:	bpl.n	2272 <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    21f4:	ldr	r1, [r2, #32]
    21f6:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    21fa:	cmp	r4, #0
    21fc:	bne.n	22a0 <FatFile::read(void*, unsigned int)+0xfc>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    21fe:	cmp.w	r6, #512	; 0x200
    2202:	bcc.n	22a0 <FatFile::read(void*, unsigned int)+0xfc>
    2204:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    2206:	cmp	r1, r3
    2208:	beq.n	22a0 <FatFile::read(void*, unsigned int)+0xfc>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    220a:	cmp.w	r6, #1024	; 0x400
    220e:	bcc.n	2300 <FatFile::read(void*, unsigned int)+0x15c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    2210:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    2212:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    2216:	lsls	r0, r0, #26
    2218:	bmi.n	2226 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    221a:	ldrb	r0, [r2, #4]
    221c:	rsb	r0, r8, r0
    2220:	cmp	fp, r0
    2222:	it	cs
    2224:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    2226:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    2228:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    222c:	bhi.n	2246 <FatFile::read(void*, unsigned int)+0xa2>
    222e:	add	r3, fp
    2230:	cmp	r1, r3
    2232:	bcs.n	2246 <FatFile::read(void*, unsigned int)+0xa2>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    2234:	add.w	r0, r2, #36	; 0x24
    2238:	str	r1, [sp, #4]
    223a:	bl	2a80 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    223e:	cmp	r0, #0
    2240:	beq.n	22cc <FatFile::read(void*, unsigned int)+0x128>
    2242:	ldr	r2, [r5, #8]
    2244:	ldr	r1, [sp, #4]
    2246:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    2248:	mov	r3, fp
    224a:	mov	r2, r7
    224c:	ldr.w	lr, [r0]
    2250:	ldr.w	fp, [lr, #12]
    2254:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    2256:	cmp	r0, #0
    2258:	beq.n	22cc <FatFile::read(void*, unsigned int)+0x128>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    225a:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    225c:	subs	r6, r6, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    225e:	add	r7, r4
    m_curPosition += n;
    2260:	add	r3, r4
    2262:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    2264:	beq.n	232a <FatFile::read(void*, unsigned int)+0x186>
    2266:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    2268:	ubfx	r4, r3, #0, #9
    226c:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    226e:	lsls	r0, r1, #26
    2270:	bmi.n	21f4 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    2272:	ldrb.w	r8, [r2, #5]
    2276:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    227a:	cmp	r4, #0
    227c:	bne.n	22fc <FatFile::read(void*, unsigned int)+0x158>
    227e:	cmp.w	r8, #0
    2282:	bne.n	22fc <FatFile::read(void*, unsigned int)+0x158>
        // start of new cluster
        if (m_curPosition == 0) {
    2284:	cbnz	r3, 22ec <FatFile::read(void*, unsigned int)+0x148>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    2286:	lsls	r0, r1, #25
    2288:	ite	mi
    228a:	ldrmi	r1, [r2, #32]
    228c:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    228e:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    2290:	mov	r0, r2
    2292:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
    2296:	ldr	r2, [r5, #8]
    2298:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    229c:	cmp	r4, #0
    229e:	beq.n	21fe <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    22a0:	add.w	r0, r2, #36	; 0x24
    22a4:	movs	r2, #0
    22a6:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    22aa:	cbz	r0, 22cc <FatFile::read(void*, unsigned int)+0x128>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    22ac:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    22b0:	adds	r1, r0, r4
    22b2:	mov	r0, r7
    22b4:	cmp	r3, r6
    22b6:	it	cs
    22b8:	movcs	r3, r6
    22ba:	mov	r2, r3
    22bc:	mov	r4, r3
    22be:	bl	7fc4 <memcpy>
    22c2:	b.n	225a <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    22c4:	ldrb	r3, [r5, #0]
    22c6:	tst.w	r3, #112	; 0x70
    22ca:	bne.n	232c <FatFile::read(void*, unsigned int)+0x188>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    22cc:	ldrb	r3, [r5, #1]
  return -1;
    22ce:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    22d2:	orr.w	r3, r3, #2
    22d6:	strb	r3, [r5, #1]
  return -1;
}
    22d8:	add	sp, #12
    22da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    22de:	ldr	r3, [r0, #28]
    22e0:	ldr	r2, [r0, #20]
    22e2:	subs	r3, r3, r2
    22e4:	cmp	r9, r3
    22e6:	it	cs
    22e8:	movcs	r9, r3
    22ea:	b.n	21d6 <FatFile::read(void*, unsigned int)+0x32>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    22ec:	lsls	r1, r1, #28
    22ee:	bpl.n	2314 <FatFile::read(void*, unsigned int)+0x170>
    22f0:	ldrb	r3, [r5, #2]
    22f2:	lsls	r3, r3, #25
    22f4:	bpl.n	2314 <FatFile::read(void*, unsigned int)+0x170>
          m_curCluster++;
    22f6:	ldr	r1, [r5, #16]
    22f8:	adds	r1, #1
    22fa:	b.n	228e <FatFile::read(void*, unsigned int)+0xea>
    22fc:	ldr	r1, [r5, #16]
    22fe:	b.n	2290 <FatFile::read(void*, unsigned int)+0xec>
    2300:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    2302:	mov	r2, r7
    2304:	ldr	r3, [r0, #0]
    2306:	ldr	r3, [r3, #8]
    2308:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    230a:	cmp	r0, #0
    230c:	beq.n	22cc <FatFile::read(void*, unsigned int)+0x128>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    230e:	mov.w	r4, #512	; 0x200
    2312:	b.n	225a <FatFile::read(void*, unsigned int)+0xb6>
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2314:	mov	r0, r2
    2316:	ldr	r1, [r5, #16]
    2318:	mov	r2, sl
    231a:	bl	2a9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    231e:	cmp	r0, #0
    2320:	blt.n	22cc <FatFile::read(void*, unsigned int)+0x128>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    2322:	beq.n	22c4 <FatFile::read(void*, unsigned int)+0x120>
    2324:	ldr	r2, [r5, #8]
    2326:	ldr	r1, [r5, #16]
    2328:	b.n	2290 <FatFile::read(void*, unsigned int)+0xec>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    232a:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    232c:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    2330:	add	sp, #12
    2332:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2336:	nop

00002338 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    2338:	push	{r4, r5, r6, lr}
    233a:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    233c:	movs	r2, #1
    233e:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    2340:	ldr	r6, [r0, #20]
    2342:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    2346:	ldr	r5, [r0, #16]
    2348:	bl	21a4 <FatFile::read(void*, unsigned int)>
    234c:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    234e:	str	r6, [r4, #20]
    2350:	ite	eq
    2352:	ldrbeq.w	r0, [sp, #7]
    2356:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    235a:	str	r5, [r4, #16]
  return c;
}
    235c:	add	sp, #8
    235e:	pop	{r4, r5, r6, pc}

00002360 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    2360:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    2362:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    2364:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    2368:	sub	sp, #12
    236a:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    236c:	clz	r2, r5
    2370:	lsrs	r2, r2, #5
    2372:	cmp	r2, r1
    2374:	bcs.n	2386 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    2376:	adds	r3, #32
    2378:	str	r3, [r0, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    237a:	ldr	r0, [r4, #8]
    237c:	adds	r0, #48	; 0x30
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    237e:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    2382:	add	sp, #12
    2384:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    2386:	movs	r2, #1
    2388:	add.w	r1, sp, #7
    238c:	bl	21a4 <FatFile::read(void*, unsigned int)>
    2390:	sxtb	r0, r0
    if  (n != 1) {
    2392:	cmp	r0, #1
    2394:	bne.n	239e <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    2396:	ldr	r3, [r4, #20]
    2398:	adds	r3, #31
    239a:	str	r3, [r4, #20]
    239c:	b.n	237a <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    239e:	movs	r0, #0
    23a0:	b.n	2382 <FatFile::readDirCache(bool)+0x22>
    23a2:	nop

000023a4 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    23a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    23a8:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    23aa:	sub	sp, #108	; 0x6c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    23ac:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    23ae:	tst.w	r5, #24
    23b2:	strb.w	r4, [sp, #32]
    23b6:	strb.w	r4, [sp, #33]	; 0x21
    23ba:	strb.w	r4, [sp, #34]	; 0x22
    23be:	strb.w	r4, [sp, #68]	; 0x44
    23c2:	strb.w	r4, [sp, #69]	; 0x45
    23c6:	strb.w	r4, [sp, #70]	; 0x46
    23ca:	beq.n	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    23cc:	ldr	r6, [r0, #8]
    23ce:	mov	r3, r0
    23d0:	ldr	r5, [r1, #8]
    23d2:	cmp	r6, r5
    23d4:	beq.n	23de <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    23d6:	movs	r0, #0
}
    23d8:	add	sp, #108	; 0x6c
    23da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    23de:	mov	r5, r3
    23e0:	mov	r8, r2
    23e2:	mov	r6, r1
    23e4:	bl	1de8 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    23e8:	mov	lr, r5
    23ea:	add	r7, sp, #68	; 0x44
    23ec:	ldmia.w	lr!, {r0, r1, r2, r3}
    23f0:	stmia	r7!, {r0, r1, r2, r3}
    23f2:	ldmia.w	lr!, {r0, r1, r2, r3}
    23f6:	ldr.w	lr, [lr]
    23fa:	stmia	r7!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    23fc:	mov	r1, r4
    23fe:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    2400:	str.w	lr, [r7]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    2404:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    2408:	mov	lr, r0
    240a:	cmp	r0, #0
    240c:	beq.n	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    240e:	ldr	r0, [r0, #0]
    2410:	mov	r7, sp
    2412:	ldr.w	r1, [lr, #4]
    2416:	ldr.w	r2, [lr, #8]
    241a:	ldr.w	r3, [lr, #12]
  // make directory entry for new path
  if (isFile()) {
    241e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    2422:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    2424:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    2428:	ldr.w	r0, [lr, #16]
    242c:	ldr.w	r1, [lr, #20]
    2430:	ldr.w	r2, [lr, #24]
  // make directory entry for new path
  if (isFile()) {
    2434:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    2438:	ldr.w	r3, [lr, #28]
    243c:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    243e:	cmp.w	ip, #0
    2442:	beq.w	2570 <FatFile::rename(FatFile*, char const*)+0x1cc>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    2446:	mov	r2, r8
    2448:	mov	r1, r6
    244a:	movw	r3, #2561	; 0xa01
    244e:	add	r0, sp, #32
    2450:	bl	20c0 <FatFile::open(FatFile*, char const*, int)>
    2454:	cmp	r0, #0
    2456:	beq.n	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    2458:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    245a:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    245c:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    2460:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    2462:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    2464:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    2466:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    2468:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    246c:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    246e:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    2470:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    2472:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    2476:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    247a:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    247e:	cmp	r0, #0
    2480:	beq.n	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    2482:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    2484:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    2488:	ldr.w	r7, [r3, #-91]!
  dir->attributes = entry.attributes;
    248c:	strb	r2, [r0, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    248e:	ldr.w	lr, [r3, #4]
    2492:	str.w	r7, [r0, #13]
    2496:	ldr	r7, [r3, #8]
    2498:	str.w	lr, [r0, #17]
    249c:	str.w	r7, [r0, #21]
    24a0:	ldr.w	lr, [r3, #12]
    24a4:	ldrh	r7, [r3, #16]
    24a6:	ldrb	r3, [r3, #18]
    24a8:	str.w	lr, [r0, #25]
    24ac:	strh.w	r7, [r0, #29]
    24b0:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    24b2:	cmp	r4, #0
    24b4:	beq.n	252c <FatFile::rename(FatFile*, char const*)+0x188>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    24b6:	mov	r1, r4
    24b8:	ldr	r0, [r5, #8]
    24ba:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    24be:	ldr	r3, [r5, #8]
    24c0:	mov	r1, r0
    24c2:	mov	r2, r6
    24c4:	add.w	r0, r3, #36	; 0x24
    24c8:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    24cc:	cmp	r0, #0
    24ce:	beq.n	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    24d0:	mov	r6, r0
    24d2:	mov	r7, sp
    24d4:	ldr.w	r0, [r6, #32]!
    24d8:	ldr	r1, [r6, #4]
    24da:	ldr	r2, [r6, #8]
    24dc:	ldr	r3, [r6, #12]
    24de:	stmia	r7!, {r0, r1, r2, r3}
    24e0:	ldr	r0, [r6, #16]
    24e2:	ldr	r1, [r6, #20]
    24e4:	ldr	r2, [r6, #24]
    24e6:	ldr	r3, [r6, #28]
    24e8:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    24ea:	mov	r1, r4
    24ec:	ldr	r0, [r5, #8]
    24ee:	bl	2bf8 <FatPartition::freeChain(unsigned long)>
    24f2:	cmp	r0, #0
    24f4:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    24f8:	ldr	r1, [r5, #32]
    24fa:	ldr	r0, [r5, #8]
    24fc:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
    2500:	ldr	r3, [r5, #8]
    2502:	mov	r1, r0
    2504:	movs	r2, #1
    2506:	add.w	r0, r3, #36	; 0x24
    250a:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    250e:	mov	r7, r0
    2510:	cmp	r0, #0
    2512:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    2516:	mov	r4, sp
    2518:	ldmia	r4!, {r0, r1, r2, r3}
    251a:	str	r0, [r7, #32]
    251c:	str	r1, [r7, #36]	; 0x24
    251e:	str	r2, [r7, #40]	; 0x28
    2520:	str	r3, [r7, #44]	; 0x2c
    2522:	ldmia	r4!, {r0, r1, r2, r3}
    2524:	str	r0, [r7, #48]	; 0x30
    2526:	str	r1, [r7, #52]	; 0x34
    2528:	str	r2, [r7, #56]	; 0x38
    252a:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    252c:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    252e:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    2530:	movs	r3, #8
  if (!oldFile.remove()) {
    2532:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    2534:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    2536:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    253a:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    253e:	bl	3210 <FatFile::remove()>
    2542:	cmp	r0, #0
    2544:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    2548:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    254a:	add.w	r0, r4, #36	; 0x24
    254e:	bl	2a80 <FatCache::sync()>
    2552:	cmp	r0, #0
    2554:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    2558:	add.w	r0, r4, #560	; 0x230
    255c:	bl	2a80 <FatCache::sync()>
    2560:	cmp	r0, #0
    2562:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
    2566:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    2568:	ldr	r3, [r0, #0]
    256a:	ldr	r3, [r3, #20]
    256c:	blx	r3
    256e:	b.n	23d8 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    2570:	mov	r3, r9
    2572:	mov	r2, r8
    2574:	mov	r1, r6
    2576:	add	r0, sp, #32
    2578:	bl	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)>
    257c:	cmp	r0, #0
    257e:	beq.w	23d6 <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    2582:	ldr	r4, [sp, #64]	; 0x40
    2584:	b.n	2458 <FatFile::rename(FatFile*, char const*)+0xb4>
    2586:	nop

00002588 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    2588:	ldrb	r3, [r0, #0]
    258a:	lsls	r2, r3, #27
    258c:	bpl.n	25c4 <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    258e:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    2590:	push	{r4, lr}
    2592:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2594:	cbz	r3, 25a4 <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2596:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2598:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    259a:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    259e:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    25a0:	str	r2, [r0, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    25a2:	strb	r3, [r0, #2]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    25a4:	movs	r1, #1
    25a6:	mov	r0, r4
    25a8:	bl	2360 <FatFile::readDirCache(bool)>
    if (!dir) {
    25ac:	cbz	r0, 25c8 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    25ae:	ldrb	r3, [r0, #0]
    25b0:	cbz	r3, 25ce <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    25b2:	cmp	r3, #229	; 0xe5
    25b4:	beq.n	25a4 <FatFile::rmdir()+0x1c>
    25b6:	cmp	r3, #46	; 0x2e
    25b8:	beq.n	25a4 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    25ba:	ldrb	r3, [r0, #11]
    25bc:	lsls	r3, r3, #28
    25be:	bmi.n	25a4 <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    25c0:	movs	r0, #0
    25c2:	pop	{r4, pc}
    25c4:	movs	r0, #0
    25c6:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    25c8:	ldrb	r3, [r4, #1]
    25ca:	cmp	r3, #0
    25cc:	bne.n	25c0 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    25ce:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    25d0:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    25d2:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    25d4:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    25d8:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    25da:	strb	r3, [r4, #2]
  return remove();

fail:
  return false;
}
    25dc:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    25e0:	b.w	3210 <FatFile::remove()>

000025e4 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    25e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25e8:	ldrb	r3, [r0, #0]
    25ea:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    25ec:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    25ee:	cbz	r3, 261e <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    25f0:	ldr	r2, [r0, #20]
    25f2:	mov	r6, r1
    25f4:	cmp	r2, r1
    25f6:	beq.n	2662 <FatFile::seekSet(unsigned long)+0x7e>
    return true;
  }
  if (pos == 0) {
    25f8:	cbnz	r1, 260c <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    25fa:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    25fc:	ldrb	r3, [r4, #2]
  return true;
    25fe:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2600:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2602:	bic.w	r3, r3, #32
    2606:	strb	r3, [r4, #2]
  return true;
    2608:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    260c:	lsls	r0, r3, #28
    260e:	bmi.n	2626 <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    2610:	lsls	r1, r3, #26
    2612:	bpl.n	262c <FatFile::seekSet(unsigned long)+0x48>
    2614:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    2616:	ldrh	r3, [r3, #8]
    2618:	cmp.w	r6, r3, lsl #5
    261c:	bls.n	25fc <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    261e:	str	r7, [r4, #16]
  return false;
    2620:	movs	r0, #0
    2622:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    2626:	ldr	r1, [r4, #28]
    2628:	cmp	r6, r1
    262a:	bhi.n	261e <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    262c:	ldr.w	lr, [r4, #8]
    2630:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    2632:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    2634:	ldrb.w	r1, [lr, #6]
    2638:	adds	r1, #9
    263a:	uxtb	r1, r1
    263c:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    263e:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    2640:	cbz	r2, 2668 <FatFile::seekSet(unsigned long)+0x84>
    2642:	cmp	r0, r5
    2644:	bhi.n	2668 <FatFile::seekSet(unsigned long)+0x84>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    2646:	subs	r5, r5, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2648:	add.w	r8, r4, #16
    264c:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    264e:	cmp	r5, #0
    2650:	beq.n	25fc <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2652:	ldr	r1, [r4, #16]
    2654:	subs	r5, #1
    2656:	ldr	r0, [r4, #8]
    2658:	bl	2a9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    265c:	cmp	r0, #0
    265e:	bgt.n	264c <FatFile::seekSet(unsigned long)+0x68>
    2660:	b.n	261e <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    2662:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    2664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    2668:	lsls	r3, r3, #25
    266a:	ite	mi
    266c:	ldrmi.w	r3, [lr, #32]
    2670:	ldrpl	r3, [r4, #32]
    2672:	str	r3, [r4, #16]
    2674:	b.n	2648 <FatFile::seekSet(unsigned long)+0x64>
    2676:	nop

00002678 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    2678:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    267c:	mov	r5, r1
    267e:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    2680:	movs	r1, #0
    2682:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    2684:	mov	r4, r0
    2686:	mov	r7, r3
    2688:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    268c:	bl	b1ec <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    2690:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    2692:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    2696:	ldr	r1, [r5, #32]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    2698:	add.w	r2, r0, #48	; 0x30
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    269c:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    269e:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    26a0:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    26a4:	strh.w	r8, [r4, #4]
    26a8:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    26aa:	lsls	r5, r1, #28
    26ac:	bmi.n	26d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    26ae:	and.w	r1, r1, #23
    26b2:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    26b4:	ldrb	r3, [r2, #11]
    26b6:	tst.w	r3, #24
    26ba:	bne.n	26c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    26bc:	orr.w	r1, r1, #8
    26c0:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    26c2:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    26c6:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    26c8:	cmp	r3, #1
    26ca:	beq.n	26de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    26cc:	cmp	r3, #2
    26ce:	beq.n	2726 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    26d0:	cbz	r3, 271c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    26d2:	movs	r3, #0
    26d4:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    26d6:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    26d8:	strb	r3, [r4, #2]
  return false;
    26da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    26de:	movs	r3, #2
    26e0:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    26e2:	ldrb	r1, [r4, #0]
    26e4:	tst.w	r1, #17
    26e8:	bne.n	26d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    26ea:	sxtb	r1, r3
    26ec:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    26f0:	and.w	r3, r7, #8
    26f4:	orrs	r3, r1
    26f6:	uxtb	r3, r3
    26f8:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    26fa:	ldrh.w	lr, [r2, #20]
    26fe:	ldrh	r1, [r2, #26]
    2700:	ldr	r6, [r0, #44]	; 0x2c
    2702:	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    2706:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    2708:	cbz	r5, 272c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    270a:	cbnz	r1, 2742 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    270c:	orn	r3, r3, #127	; 0x7f
    2710:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    2712:	lsls	r3, r7, #17
    2714:	bmi.n	2734 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    2716:	movs	r0, #1
    2718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    271c:	ands.w	r5, r7, #1024	; 0x400
    2720:	bne.n	26d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    2722:	movs	r1, #1
    2724:	b.n	26f0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    2726:	movs	r3, #3
    2728:	strb	r3, [r4, #2]
      break;
    272a:	b.n	26e2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    272c:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    272e:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    2730:	str	r3, [r4, #28]
    2732:	b.n	2712 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    2734:	ldr	r1, [r4, #28]
    2736:	mov	r0, r4
    2738:	bl	25e4 <FatFile::seekSet(unsigned long)>
    273c:	cmp	r0, #0
    273e:	bne.n	2716 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    2740:	b.n	26d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    2742:	bl	2bf8 <FatPartition::freeChain(unsigned long)>
    2746:	cmp	r0, #0
    2748:	beq.n	26d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    274a:	ldrb	r3, [r4, #2]
    274c:	b.n	270c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    274e:	nop

00002750 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2750:	ldrb	r3, [r0, #0]
    2752:	cbnz	r3, 275c <FatFile::openNext(FatFile*, int)+0xc>
    2754:	ldrb	r3, [r1, #0]
    2756:	tst.w	r3, #112	; 0x70
    275a:	bne.n	2760 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    275c:	movs	r0, #0
}
    275e:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    2760:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2764:	ldr	r6, [r1, #20]
    2766:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2768:	ands.w	r7, r6, #31
    276c:	bne.n	27b2 <FatFile::openNext(FatFile*, int)+0x62>
    276e:	mov	r9, r2
    2770:	mov	r5, r1
    2772:	mov	r8, r0
    2774:	mov	sl, r7
    2776:	b.n	2794 <FatFile::openNext(FatFile*, int)+0x44>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    2778:	sub.w	r2, r3, #229	; 0xe5
    277c:	clz	r2, r2
    2780:	lsrs	r2, r2, #5
    2782:	cbnz	r2, 27a6 <FatFile::openNext(FatFile*, int)+0x56>
    2784:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    2786:	tst.w	r1, #8
    278a:	beq.n	27c8 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    278c:	cmp	r1, #15
    278e:	beq.n	27ba <FatFile::openNext(FatFile*, int)+0x6a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    2790:	mov	r7, r2
    2792:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    2794:	movs	r1, #0
    2796:	mov	r0, r5
    2798:	bl	2360 <FatFile::readDirCache(bool)>
    if (!dir) {
    279c:	cbz	r0, 27b2 <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    279e:	ldrb	r3, [r0, #0]
    27a0:	cbz	r3, 27b2 <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    27a2:	cmp	r3, #46	; 0x2e
    27a4:	bne.n	2778 <FatFile::openNext(FatFile*, int)+0x28>
      lfnOrd = 0;
    27a6:	movs	r7, #0
    27a8:	b.n	2792 <FatFile::openNext(FatFile*, int)+0x42>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    27aa:	bl	2e30 <FatFile::lfnChecksum(unsigned char*)>
    27ae:	cmp	r0, sl
    27b0:	beq.n	27cc <FatFile::openNext(FatFile*, int)+0x7c>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    27b2:	movs	r0, #0
}
    27b4:	add	sp, #8
    27b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    27ba:	lsls	r2, r3, #25
    27bc:	bpl.n	2792 <FatFile::openNext(FatFile*, int)+0x42>
        lfnOrd = ldir->order & 0X1F;
    27be:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    27c2:	ldrb.w	sl, [r0, #13]
    27c6:	b.n	2792 <FatFile::openNext(FatFile*, int)+0x42>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    27c8:	cmp	r7, #0
    27ca:	bne.n	27aa <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    27cc:	str	r7, [sp, #0]
    27ce:	mov	r3, r9
    27d0:	ubfx	r2, r6, #5, #16
    27d4:	mov	r1, r5
    27d6:	mov	r0, r8
    27d8:	bl	2678 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    27dc:	b.n	27b4 <FatFile::openNext(FatFile*, int)+0x64>
    27de:	nop

000027e0 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    27e0:	ldrb	r3, [r0, #0]
    27e2:	cbz	r3, 27e8 <FatFile::sync()+0x8>
    27e4:	b.w	1de8 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    27e8:	movs	r0, #1
    27ea:	bx	lr

000027ec <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    27ec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27f0:	ldrb	r3, [r0, #2]
    27f2:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    27f4:	lsls	r5, r3, #30
    27f6:	bmi.n	2808 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    27f8:	ldrb	r3, [r4, #1]
  return -1;
    27fa:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    27fe:	orr.w	r3, r3, #1
    2802:	strb	r3, [r4, #1]
  return -1;
    2804:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2808:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    280a:	lsls	r2, r3, #28
    280c:	mov	r8, r1
    280e:	bmi.w	299c <FatFile::write(void const*, unsigned int)+0x1b0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    2812:	ldr	r2, [r4, #20]
    2814:	mvns	r3, r2
    2816:	cmp	r9, r3
    2818:	bhi.n	27f8 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    281a:	cmp.w	r9, #0
    281e:	beq.n	28a8 <FatFile::write(void const*, unsigned int)+0xbc>
    2820:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2822:	mov.w	fp, #0
    m_lbn = 0XFFFFFFFF;
    2826:	mov.w	sl, #4294967295
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    282a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    282c:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    2830:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    2832:	ldrb	r5, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    2834:	ands.w	r5, r5, r2, lsr #9
    2838:	bne.n	2924 <FatFile::write(void const*, unsigned int)+0x138>
    283a:	cmp	r7, #0
    283c:	bne.n	2924 <FatFile::write(void const*, unsigned int)+0x138>
      // start of new cluster
      if (m_curCluster != 0) {
    283e:	cmp	r1, #0
    2840:	beq.n	28c8 <FatFile::write(void const*, unsigned int)+0xdc>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    2842:	ldrb	r3, [r4, #2]
    2844:	lsls	r3, r3, #25
    2846:	bpl.n	293e <FatFile::write(void const*, unsigned int)+0x152>
    2848:	ldr	r3, [r4, #28]
    284a:	cmp	r3, r2
    284c:	bls.n	293e <FatFile::write(void const*, unsigned int)+0x152>
          m_curCluster++;
    284e:	adds	r1, #1
    2850:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    2852:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    2856:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    2858:	cmp.w	r6, #512	; 0x200
    285c:	bcc.w	29aa <FatFile::write(void const*, unsigned int)+0x1be>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    2860:	cmp.w	r6, #1024	; 0x400
    2864:	ldr	r2, [r4, #8]
    2866:	bcc.n	2960 <FatFile::write(void const*, unsigned int)+0x174>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    2868:	ldrb	r7, [r2, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    286a:	lsrs	r3, r6, #9
    286c:	ldr	r0, [r2, #44]	; 0x2c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    286e:	subs	r5, r7, r5
    2870:	cmp	r3, r5
    2872:	it	cs
    2874:	movcs	r3, r5
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    2876:	cmp	r0, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    2878:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    287c:	bcc.n	288e <FatFile::write(void const*, unsigned int)+0xa2>
    287e:	add	r0, r3
    2880:	cmp	r0, r1
    2882:	bls.n	288e <FatFile::write(void const*, unsigned int)+0xa2>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2884:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    2888:	str.w	sl, [r2, #44]	; 0x2c
    288c:	ldr	r2, [r4, #8]
    288e:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    2890:	mov	r2, r8
    2892:	ldr	r7, [r0, #0]
    2894:	ldr	r7, [r7, #28]
    2896:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    2898:	cmp	r0, #0
    289a:	beq.n	27f8 <FatFile::write(void const*, unsigned int)+0xc>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    289c:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    289e:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    28a0:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    28a2:	add	r2, r5
    28a4:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    28a6:	bne.n	282a <FatFile::write(void const*, unsigned int)+0x3e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    28a8:	ldr	r3, [r4, #28]
    28aa:	cmp	r3, r2
    28ac:	bcc.w	29ba <FatFile::write(void const*, unsigned int)+0x1ce>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    28b0:	ldr	r3, [pc, #284]	; (29d0 <FatFile::write(void const*, unsigned int)+0x1e4>)
    28b2:	ldr	r3, [r3, #0]
    28b4:	cmp	r3, #0
    28b6:	beq.w	29ca <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    28ba:	ldrb	r3, [r4, #2]
    28bc:	mov	r0, r9
    28be:	orn	r3, r3, #127	; 0x7f
    28c2:	strb	r3, [r4, #2]
    28c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    28c8:	ldr	r1, [r4, #32]
    28ca:	cmp	r1, #0
    28cc:	beq.n	297c <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    28ce:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    28d0:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    28d4:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    28d8:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    28da:	bcs.n	2860 <FatFile::write(void const*, unsigned int)+0x74>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    28dc:	rsb	r5, r7, #512	; 0x200
    28e0:	ldr	r0, [r4, #8]
    28e2:	cmp	r5, r6
    28e4:	it	cs
    28e6:	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    28e8:	ldr	r2, [r4, #20]
    28ea:	ldr	r3, [r4, #28]
    28ec:	cmp	r2, r3
    28ee:	bcs.n	28f6 <FatFile::write(void const*, unsigned int)+0x10a>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    28f0:	ldrb	r3, [r4, #2]
    28f2:	lsls	r3, r3, #26
    28f4:	bpl.n	293a <FatFile::write(void const*, unsigned int)+0x14e>
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    28f6:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    28f8:	adds	r0, #36	; 0x24
    28fa:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    28fe:	cmp	r0, #0
    2900:	beq.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    2904:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2906:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    2908:	mov	r2, r5
    290a:	mov	r1, r8
    290c:	bl	7fc4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2910:	cmp.w	r7, #512	; 0x200
    2914:	bne.n	289c <FatFile::write(void const*, unsigned int)+0xb0>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    2916:	ldr	r0, [r4, #8]
    2918:	adds	r0, #36	; 0x24
    291a:	bl	2a80 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    291e:	cmp	r0, #0
    2920:	bne.n	289c <FatFile::write(void const*, unsigned int)+0xb0>
    2922:	b.n	27f8 <FatFile::write(void const*, unsigned int)+0xc>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    2924:	bl	2a90 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    2928:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    292a:	cmp	r7, #0
    292c:	beq.n	2858 <FatFile::write(void const*, unsigned int)+0x6c>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    292e:	rsb	r5, r7, #512	; 0x200
    2932:	ldr	r0, [r4, #8]
    2934:	cmp	r5, r6
    2936:	it	cs
    2938:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    293a:	movs	r2, #1
    293c:	b.n	28f8 <FatFile::write(void const*, unsigned int)+0x10c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    293e:	add.w	r2, r4, #16
    2942:	bl	2a9c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    2946:	cmp	r0, #0
    2948:	blt.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    294c:	bne.n	295a <FatFile::write(void const*, unsigned int)+0x16e>
          // add cluster if at end of chain
          if (!addCluster()) {
    294e:	mov	r0, r4
    2950:	bl	1d00 <FatFile::addCluster()>
    2954:	cmp	r0, #0
    2956:	beq.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
    295a:	ldr	r0, [r4, #8]
    295c:	ldr	r1, [r4, #16]
    295e:	b.n	28d0 <FatFile::write(void const*, unsigned int)+0xe4>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    2960:	ldr	r3, [r2, #44]	; 0x2c
    2962:	cmp	r3, r1
    2964:	beq.n	2990 <FatFile::write(void const*, unsigned int)+0x1a4>
    2966:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    2968:	mov	r2, r8
    296a:	ldr	r3, [r0, #0]
    296c:	ldr	r3, [r3, #24]
    296e:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    2970:	cmp	r0, #0
    2972:	beq.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    2976:	mov.w	r5, #512	; 0x200
    297a:	b.n	289c <FatFile::write(void const*, unsigned int)+0xb0>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    297c:	mov	r0, r4
    297e:	bl	1d00 <FatFile::addCluster()>
    2982:	cmp	r0, #0
    2984:	beq.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    2988:	ldr	r1, [r4, #16]
    298a:	ldr	r0, [r4, #8]
    298c:	str	r1, [r4, #32]
    298e:	b.n	28d0 <FatFile::write(void const*, unsigned int)+0xe4>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2990:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    2994:	str.w	sl, [r2, #44]	; 0x2c
    2998:	ldr	r2, [r4, #8]
    299a:	b.n	2966 <FatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    299c:	ldr	r1, [r0, #28]
    299e:	bl	25e4 <FatFile::seekSet(unsigned long)>
    29a2:	cmp	r0, #0
    29a4:	beq.w	27f8 <FatFile::write(void const*, unsigned int)+0xc>
    29a8:	b.n	2812 <FatFile::write(void const*, unsigned int)+0x26>
    29aa:	cmp.w	r6, #512	; 0x200
    29ae:	mov	r5, r6
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    29b0:	ldr	r0, [r4, #8]
    29b2:	it	cs
    29b4:	movcs.w	r5, #512	; 0x200
    29b8:	b.n	28e8 <FatFile::write(void const*, unsigned int)+0xfc>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    29ba:	ldrb	r3, [r4, #2]
    29bc:	mov	r0, r9
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    29be:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    29c0:	orn	r3, r3, #127	; 0x7f
    29c4:	strb	r3, [r4, #2]
    29c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29ca:	mov	r0, r9
    29cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29d0:	.word	0x20003840

000029d4 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    29d4:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    29d6:	ldr	r1, [r0, #8]
    29d8:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    29da:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    29de:	mov	r4, r0
    29e0:	ldr	r0, [r3, #0]
    29e2:	mov	r2, r6
    29e4:	ldr	r3, [r0, #0]
    29e6:	ldr	r3, [r3, #24]
    29e8:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    29ea:	cbz	r0, 29fe <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    29ec:	ldrb	r3, [r4, #0]
    29ee:	mov	r5, r0
    29f0:	lsls	r2, r3, #30
    29f2:	bmi.n	2a04 <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    29f4:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    29f8:	mov	r0, r5
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    29fa:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    29fc:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    29fe:	movs	r5, #0
}
    2a00:	mov	r0, r5
    2a02:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    2a04:	ldr	r3, [r4, #4]
    2a06:	mov	r2, r6
    2a08:	ldr	r1, [r4, #8]
    2a0a:	ldr	r0, [r3, #0]
    2a0c:	ldr	r6, [r3, #16]
    2a0e:	ldr	r3, [r0, #0]
    2a10:	add	r1, r6
    2a12:	ldr	r3, [r3, #24]
    2a14:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    2a16:	cmp	r0, #0
    2a18:	beq.n	29fe <FatCache::sync() [clone .part.8]+0x2a>
    2a1a:	ldrb	r3, [r4, #0]
    2a1c:	b.n	29f4 <FatCache::sync() [clone .part.8]+0x20>
    2a1e:	nop

00002a20 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    2a20:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    2a22:	ldr	r3, [r0, #8]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    2a24:	mov	r6, r0
    2a26:	mov	r4, r2
  if (m_lbn != sector) {
    2a28:	cmp	r3, r1
    2a2a:	beq.n	2a4c <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    2a2c:	ldrb	r3, [r0, #0]
    2a2e:	mov	r7, r1
    2a30:	lsls	r2, r3, #31
    2a32:	bmi.n	2a5a <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    2a34:	lsls	r3, r4, #29
    2a36:	bpl.n	2a66 <FatCache::read(unsigned long, unsigned char)+0x46>
    2a38:	add.w	r5, r6, #12
    2a3c:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a3e:	and.w	r4, r4, #3
    2a42:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    2a44:	str	r7, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a46:	orrs	r4, r3
    2a48:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    2a4a:	pop	{r3, r4, r5, r6, r7, pc}
    2a4c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a50:	and.w	r4, r4, #3
    2a54:	orrs	r4, r3
    2a56:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    2a58:	pop	{r3, r4, r5, r6, r7, pc}
    2a5a:	bl	29d4 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    2a5e:	cmp	r0, #0
    2a60:	bne.n	2a34 <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    2a62:	movs	r0, #0
    2a64:	pop	{r3, r4, r5, r6, r7, pc}
    2a66:	ldr	r3, [r6, #4]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    2a68:	add.w	r5, r6, #12
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    2a6c:	mov	r1, r7
    2a6e:	ldr	r0, [r3, #0]
    2a70:	mov	r2, r5
    2a72:	ldr	r3, [r0, #0]
    2a74:	ldr	r3, [r3, #8]
    2a76:	blx	r3
    2a78:	cmp	r0, #0
    2a7a:	bne.n	2a3c <FatCache::read(unsigned long, unsigned char)+0x1c>
    2a7c:	b.n	2a62 <FatCache::read(unsigned long, unsigned char)+0x42>
    2a7e:	nop

00002a80 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    2a80:	ldrb	r3, [r0, #0]
    2a82:	lsls	r3, r3, #31
    2a84:	bmi.n	2a8a <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    2a86:	movs	r0, #1
    2a88:	bx	lr
    2a8a:	b.w	29d4 <FatCache::sync() [clone .part.8]>
    2a8e:	nop

00002a90 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    2a90:	ldrb	r3, [r0, #6]
    2a92:	subs	r1, #2
    2a94:	ldr	r0, [r0, #20]
    2a96:	lsls	r1, r3
}
    2a98:	add	r0, r1
    2a9a:	bx	lr

00002a9c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2a9c:	cmp	r1, #1
    2a9e:	bls.n	2b06 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
    2aa0:	ldr	r3, [r0, #28]
    2aa2:	cmp	r1, r3
    2aa4:	bhi.n	2b06 <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2aa6:	push	{r4, r5, r6, lr}
    2aa8:	ldrb	r3, [r0, #7]
    2aaa:	mov	r6, r2
    2aac:	mov	r5, r0
    2aae:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    2ab0:	cmp	r3, #32
    2ab2:	beq.n	2ae8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    2ab4:	cmp	r3, #16
    2ab6:	bne.n	2ae2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    2ab8:	ldr	r3, [r0, #24]
    2aba:	ubfx	r1, r1, #8, #8
    2abe:	movs	r2, #2
    2ac0:	add.w	r0, r0, #560	; 0x230
    2ac4:	add	r1, r3
    2ac6:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    2aca:	cbz	r0, 2ae2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2acc:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    2ace:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    2ad2:	ldr	r2, [r5, #28]
    2ad4:	cmp	r3, r2
    2ad6:	bhi.n	2ade <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    2ad8:	str	r3, [r6, #0]
  return 1;
    2ada:	movs	r0, #1
    2adc:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    2ade:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    2ae0:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    2ae2:	mov.w	r0, #4294967295
    2ae6:	pop	{r4, r5, r6, pc}
    2ae8:	ldr	r1, [r0, #24]
    2aea:	movs	r2, #2
    2aec:	add.w	r0, r0, #560	; 0x230
    2af0:	add.w	r1, r1, r4, lsr #7
    2af4:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    2af8:	cmp	r0, #0
    2afa:	beq.n	2ae2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2afc:	and.w	r1, r4, #127	; 0x7f
    2b00:	ldr.w	r3, [r0, r1, lsl #2]
    2b04:	b.n	2ad2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    2b06:	mov.w	r0, #4294967295
}
    2b0a:	bx	lr

00002b0c <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2b0c:	cmp	r1, #1
    2b0e:	bls.n	2b4c <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2b10:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2b12:	ldr	r3, [r0, #28]
    2b14:	cmp	r1, r3
    2b16:	bhi.n	2b26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    2b18:	ldrb	r3, [r0, #7]
    2b1a:	mov	r5, r2
    2b1c:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    2b1e:	cmp	r3, #32
    2b20:	beq.n	2b50 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    2b22:	cmp	r3, #16
    2b24:	beq.n	2b2a <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    2b26:	movs	r0, #0
    2b28:	pop	{r3, r4, r5, pc}
    2b2a:	ldr	r3, [r0, #24]
    2b2c:	ubfx	r1, r1, #8, #8
    2b30:	add.w	r0, r0, #560	; 0x230
    2b34:	movs	r2, #3
    2b36:	add	r1, r3
    2b38:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    2b3c:	mov	r3, r0
    2b3e:	cmp	r0, #0
    2b40:	beq.n	2b26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2b42:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    2b44:	movs	r0, #1
    2b46:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    2b4a:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    2b4c:	movs	r0, #0
}
    2b4e:	bx	lr
    2b50:	ldr	r1, [r0, #24]
    2b52:	movs	r2, #3
    2b54:	add.w	r0, r0, #560	; 0x230
    2b58:	add.w	r1, r1, r4, lsr #7
    2b5c:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    2b60:	mov	r3, r0
    2b62:	cmp	r0, #0
    2b64:	beq.n	2b26 <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2b66:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    2b6a:	movs	r0, #1
    2b6c:	str.w	r5, [r3, r1, lsl #2]
    2b70:	pop	{r3, r4, r5, pc}
    2b72:	nop

00002b74 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b78:	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b7a:	sub	sp, #8
    2b7c:	mov	r5, r0
    2b7e:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b80:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b82:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b84:	bcs.n	2bf2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    2b86:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    2b88:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    2b8a:	adds	r4, #1
    2b8c:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b8e:	add	r2, sp, #4
    2b90:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2b92:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b94:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2b96:	bls.n	2baa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    2b98:	cbnz	r6, 2be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    2b9a:	ldr	r4, [r5, #12]
      setStart = true;
    2b9c:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b9e:	add	r2, sp, #4
    2ba0:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    2ba2:	adds	r4, #1
    if (find > m_lastCluster) {
    2ba4:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2ba6:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2ba8:	bhi.n	2b98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    2baa:	cmp	r7, r4
    2bac:	beq.n	2be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2bae:	bl	2a9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    2bb2:	cmp	r0, #0
    2bb4:	blt.n	2be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    2bb6:	beq.n	2b8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    2bb8:	ldr	r3, [sp, #4]
    2bba:	cmp	r3, #0
    2bbc:	bne.n	2b8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    2bbe:	cbz	r6, 2bc2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    2bc0:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2bc2:	mvn.w	r2, #4026531840	; 0xf0000000
    2bc6:	mov	r1, r4
    2bc8:	mov	r0, r5
    2bca:	bl	2b0c <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    2bce:	mov	r6, r0
    2bd0:	cbz	r0, 2be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    2bd2:	cbnz	r7, 2bda <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    2bd4:	str.w	r4, [r8]
  return true;
    2bd8:	b.n	2bea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    2bda:	mov	r1, r7
    2bdc:	mov	r0, r5
    2bde:	mov	r2, r4
    2be0:	bl	2b0c <FatPartition::fatPut(unsigned long, unsigned long)>
    2be4:	cmp	r0, #0
    2be6:	bne.n	2bd4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    2be8:	movs	r6, #0
}
    2bea:	mov	r0, r6
    2bec:	add	sp, #8
    2bee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    2bf2:	movs	r6, #1
    2bf4:	b.n	2b8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    2bf6:	nop

00002bf8 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    2bf8:	push	{r4, r5, r6, lr}
    2bfa:	mov	r5, r0
    2bfc:	sub	sp, #8
    2bfe:	mov	r4, r1
    2c00:	b.n	2c16 <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2c02:	bl	2b0c <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    2c06:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2c08:	cbz	r0, 2c2c <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    2c0a:	ldr	r3, [r5, #12]
    2c0c:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    2c0e:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    2c10:	it	cc
    2c12:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    2c14:	cbz	r6, 2c2e <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    2c16:	add	r2, sp, #4
    2c18:	mov	r1, r4
    2c1a:	mov	r0, r5
    2c1c:	bl	2a9c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    2c20:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2c22:	mov	r1, r4
    2c24:	mov.w	r2, #0
    2c28:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    2c2a:	bge.n	2c02 <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    2c2c:	movs	r0, #0
}
    2c2e:	add	sp, #8
    2c30:	pop	{r4, r5, r6, pc}
    2c32:	nop

00002c34 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    2c34:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c38:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    2c3a:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    2c3c:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    2c3e:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    2c42:	beq.n	2c50 <FatPartition::freeClusterCount()+0x1c>
    2c44:	cmp	r3, #16
    2c46:	beq.n	2c50 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    2c48:	mov.w	r0, #4294967295
    2c4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    2c50:	ldr	r5, [r0, #24]
    while (todo) {
    2c52:	cmp.w	r8, #0
    2c56:	beq.n	2cd4 <FatPartition::freeClusterCount()+0xa0>
    2c58:	mov	r6, r0
    2c5a:	add.w	r7, r0, #560	; 0x230
    2c5e:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    2c60:	mov	r1, r5
    2c62:	movs	r2, #2
    2c64:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    2c66:	adds	r5, #1
    2c68:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    2c6c:	cmp	r0, #0
    2c6e:	beq.n	2c48 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2c70:	ldrb	r3, [r6, #7]
    2c72:	cmp	r3, #16
    2c74:	beq.n	2ca2 <FatPartition::freeClusterCount()+0x6e>
      if (todo < n) {
    2c76:	cmp.w	r8, #127	; 0x7f
    2c7a:	bls.n	2ccc <FatPartition::freeClusterCount()+0x98>
    2c7c:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2c7e:	mov	r2, r1
    2c80:	subs	r2, #1
    2c82:	subs	r3, r0, #4
    2c84:	uxth	r2, r2
    2c86:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    2c8a:	ldr.w	r2, [r3, #4]!
    2c8e:	cbnz	r2, 2c92 <FatPartition::freeClusterCount()+0x5e>
            free++;
    2c90:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    2c92:	cmp	r3, r0
    2c94:	bne.n	2c8a <FatPartition::freeClusterCount()+0x56>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2c96:	subs.w	r8, r8, r1
    2c9a:	bne.n	2c60 <FatPartition::freeClusterCount()+0x2c>
    2c9c:	mov	r0, r4
    2c9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    2ca2:	cmp.w	r8, #255	; 0xff
    2ca6:	bhi.n	2cda <FatPartition::freeClusterCount()+0xa6>
        n = todo;
    2ca8:	uxth.w	r3, r8
    2cac:	mov	r1, r8
    2cae:	subs	r2, r3, #1
    2cb0:	subs	r3, r0, #2
    2cb2:	uxth	r2, r2
    2cb4:	add.w	r0, r0, r2, lsl #1
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    2cb8:	ldrh.w	r2, [r3, #2]!
    2cbc:	cbnz	r2, 2cc0 <FatPartition::freeClusterCount()+0x8c>
            free++;
    2cbe:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    2cc0:	cmp	r0, r3
    2cc2:	bne.n	2cb8 <FatPartition::freeClusterCount()+0x84>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2cc4:	subs.w	r8, r8, r1
    2cc8:	bne.n	2c60 <FatPartition::freeClusterCount()+0x2c>
    2cca:	b.n	2c9c <FatPartition::freeClusterCount()+0x68>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    2ccc:	uxth.w	r2, r8
    2cd0:	mov	r1, r8
    2cd2:	b.n	2c80 <FatPartition::freeClusterCount()+0x4c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2cd4:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    2cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    2cda:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2cde:	mov	r3, r1
    2ce0:	b.n	2cae <FatPartition::freeClusterCount()+0x7a>
    2ce2:	nop

00002ce4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    2ce4:	push	{r3, r4, r5, r6, r7, lr}
    2ce6:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    2ce8:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    2cea:	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    2cee:	movs	r5, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    2cf0:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2cf2:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    2cf4:	str	r4, [r4, #40]	; 0x28
    2cf6:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    2cfa:	str	r5, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    2cfc:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2cfe:	strb.w	r3, [r4, #36]	; 0x24
    2d02:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    2d06:	str	r0, [r4, #44]	; 0x2c
    2d08:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2d0c:	cbz	r2, 2d46 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    2d0e:	cmp	r2, #4
    2d10:	bls.n	2d16 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2d12:	movs	r0, #0
    2d14:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2d16:	add.w	r5, r4, #36	; 0x24
    2d1a:	mov	r2, r3
    2d1c:	mov	r1, r3
    2d1e:	mov	r0, r5
    2d20:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    2d24:	mvn.w	r3, #4026531840	; 0xf0000000
    2d28:	add.w	r1, r0, #446	; 0x1be
    2d2c:	add	r3, r6
    2d2e:	lsls	r3, r3, #4
    2d30:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    2d32:	cmp	r0, #0
    2d34:	beq.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d36:	ldrb	r0, [r2, #4]
    2d38:	cmp	r0, #0
    2d3a:	beq.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d3c:	ldrb	r3, [r1, r3]
    2d3e:	lsls	r3, r3, #25
    2d40:	bne.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2d42:	ldr	r6, [r2, #8]
    2d44:	b.n	2d4a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    2d46:	add.w	r5, r4, #36	; 0x24
    2d4a:	mov	r0, r5
    2d4c:	movs	r2, #0
    2d4e:	mov	r1, r6
    2d50:	bl	2a20 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    2d54:	cmp	r0, #0
    2d56:	beq.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d58:	ldrb	r3, [r0, #16]
    2d5a:	cmp	r3, #2
    2d5c:	bne.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d5e:	ldrh.w	r3, [r0, #11]
    2d62:	cmp.w	r3, #512	; 0x200
    2d66:	bne.n	2d12 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    2d68:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    2d6a:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    2d6c:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    2d6e:	cmp	r2, #1

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    2d70:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    2d72:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    2d74:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    2d76:	beq.n	2d98 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    2d78:	movs	r5, #1
    2d7a:	mov	r1, r5
    2d7c:	b.n	2d80 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    2d7e:	mov	r5, r3
    2d80:	lsls	r1, r1, #1
    2d82:	adds	r3, r5, #1
    2d84:	uxtb	r1, r1
    2d86:	uxtb	r3, r3
    2d88:	cmp	r2, r1
    2d8a:	beq.n	2d96 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    2d8c:	cmp	r3, #9
    2d8e:	bne.n	2d7e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    2d90:	strb	r5, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2d92:	movs	r0, #0
    2d94:	pop	{r3, r4, r5, r6, r7, pc}
    2d96:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    2d98:	ldrh	r3, [r0, #22]
    2d9a:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    2d9c:	cbnz	r3, 2da2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    2d9e:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    2da0:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    2da2:	ldrh	r2, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2da4:	ldrh.w	r7, [r0, #17]
    2da8:	add	r2, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2daa:	lsls	r1, r7, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    2dac:	strh	r7, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    2dae:	add.w	r3, r2, r3, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    2db2:	str	r2, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2db4:	addw	r1, r1, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    2db8:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    2dbc:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2dbe:	add.w	r3, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    2dc2:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    2dc4:	cbz	r2, 2dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10a>
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    2dc6:	subs	r3, r6, r3
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2dc8:	movw	r1, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    2dcc:	add	r3, r2

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    2dce:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    2dd2:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2dd4:	cmp	r5, r1
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    2dd6:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2dd8:	bls.n	2dfa <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x116>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    2dda:	movw	r3, #65524	; 0xfff4
    2dde:	cmp	r5, r3
    2de0:	bls.n	2df2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2de2:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    2de4:	movs	r3, #32
  }
  return true;
    2de6:	movs	r0, #1
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    2de8:	str	r2, [r4, #32]
    m_fatType = 32;
    2dea:	strb	r3, [r4, #7]
    2dec:	pop	{r3, r4, r5, r6, r7, pc}
    2dee:	ldr	r2, [r0, #32]
    2df0:	b.n	2dc6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    2df2:	movs	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
  }
  return true;
    2df4:	movs	r0, #1
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    2df6:	strb	r3, [r4, #7]
    2df8:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    2dfa:	movs	r3, #12
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2dfc:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    2dfe:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    2e00:	pop	{r3, r4, r5, r6, r7, pc}
    2e02:	nop

00002e04 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    2e04:	cmp	r1, #4
    2e06:	bls.n	2e20 <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    2e08:	cmp	r1, #10
    2e0a:	bls.n	2e18 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    2e0c:	cmp	r1, #12
    2e0e:	bhi.n	2e2a <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2e10:	add.w	r1, r0, r1, lsl #1
    2e14:	ldrh	r0, [r1, #6]
    2e16:	bx	lr
    2e18:	add.w	r1, r0, r1, lsl #1
    2e1c:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    2e1e:	bx	lr
    2e20:	add.w	r1, r0, r1, lsl #1
    2e24:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    2e28:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    2e2a:	movs	r0, #0
}
    2e2c:	bx	lr
    2e2e:	nop

00002e30 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    2e30:	push	{r4}
    2e32:	mov	r4, r0
  uint8_t sum = 0;
    2e34:	movs	r0, #0
    2e36:	subs	r2, r4, #1
    2e38:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    2e3a:	lsrs	r3, r0, #1
    2e3c:	ldrb.w	r1, [r2, #1]!
    2e40:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    2e44:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    2e46:	uxtab	r0, r1, r0
    2e4a:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    2e4c:	bne.n	2e3a <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    2e4e:	ldr.w	r4, [sp], #4
    2e52:	bx	lr

00002e54 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    2e54:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    2e56:	ldr	r3, [r1, #12]
    2e58:	cbz	r3, 2e78 <FatFile::openCluster(FatFile*)+0x24>
    2e5a:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    2e5c:	movs	r2, #36	; 0x24
    2e5e:	movs	r1, #0
    2e60:	mov	r5, r0
    2e62:	bl	b1ec <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    2e66:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    2e68:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    2e6a:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    2e6c:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    2e6e:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    2e70:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    2e72:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    2e74:	str	r3, [r5, #32]
  return true;
}
    2e76:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    2e78:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    2e7a:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    2e7e:	b.w	2198 <FatFile::openRoot(FatVolume*)>
    2e82:	nop

00002e84 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    2e84:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e88:	movs	r3, #0
    2e8a:	sub	sp, #52	; 0x34
    2e8c:	mov	r5, r2
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    2e8e:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    2e90:	mov	r9, r1
    2e92:	strb.w	r3, [sp, #12]
    2e96:	strb.w	r3, [sp, #13]
    2e9a:	strb.w	r3, [sp, #14]
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    2e9e:	cmp	r2, #0
    2ea0:	beq.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
    2ea2:	cmp	r5, #12
    2ea4:	ite	hi
    2ea6:	movhi	r4, #0
    2ea8:	movls	r4, #1
    2eaa:	cmp	r4, #0
    2eac:	bne.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    2eae:	ldrb	r3, [r0, #3]
    2eb0:	mov	r8, r0
    2eb2:	cmp	r3, #0
    2eb4:	beq.n	2f7a <FatFile::getName(char*, unsigned int)+0xf6>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    2eb6:	mov	r1, r8
    2eb8:	add	r0, sp, #12
    2eba:	bl	2e54 <FatFile::openCluster(FatFile*)>
    2ebe:	cmp	r0, #0
    2ec0:	beq.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    2ec2:	ldrb.w	r3, [r8, #3]
    2ec6:	cmp	r3, #0
    2ec8:	beq.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
    2eca:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    2ecc:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    2ece:	ldrh.w	r1, [r8, #4]
    2ed2:	add	r0, sp, #12
    2ed4:	subs	r1, r1, r6
    2ed6:	lsls	r1, r1, #5
    2ed8:	bl	25e4 <FatFile::seekSet(unsigned long)>
    2edc:	mov	r7, r0
    2ede:	cmp	r0, #0
    2ee0:	beq.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    2ee2:	movs	r1, #0
    2ee4:	add	r0, sp, #12
    2ee6:	bl	2360 <FatFile::readDirCache(bool)>
    if (!ldir) {
    2eea:	mov	sl, r0
    2eec:	cmp	r0, #0
    2eee:	beq.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    2ef0:	ldrb	r3, [r0, #11]
    2ef2:	cmp	r3, #15
    2ef4:	bne.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    2ef6:	ldrb	r3, [r0, #0]
    2ef8:	and.w	r3, r3, #31
    2efc:	cmp	r6, r3
    2efe:	bne.n	2f6c <FatFile::getName(char*, unsigned int)+0xe8>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    2f00:	subs	r3, r6, #1
    2f02:	add.w	r4, r3, r3, lsl #1
    2f06:	add.w	r4, r3, r4, lsl #2
    2f0a:	mov	r3, r4
    2f0c:	add.w	r2, r9, r4
    2f10:	add.w	fp, r4, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    2f14:	subs	r1, r3, r4
    2f16:	mov	r0, sl
    2f18:	uxtb	r1, r1
    2f1a:	bl	2e04 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2f1e:	movs	r1, #63	; 0x3f
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    2f20:	cbz	r0, 2f88 <FatFile::getName(char*, unsigned int)+0x104>
    2f22:	cmp	r5, r3
    2f24:	bls.n	2f88 <FatFile::getName(char*, unsigned int)+0x104>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2f26:	cmp	r0, #126	; 0x7e
    2f28:	add.w	r3, r3, #1
    2f2c:	it	ls
    2f2e:	uxtbls	r1, r0
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    2f30:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2f32:	strb.w	r1, [r2], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    2f36:	bne.n	2f14 <FatFile::getName(char*, unsigned int)+0x90>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    2f38:	cmp	r5, fp
    2f3a:	bls.n	2f4c <FatFile::getName(char*, unsigned int)+0xc8>
    2f3c:	ldrb.w	r3, [sl]
    2f40:	lsls	r2, r3, #25
    2f42:	bpl.n	2f4c <FatFile::getName(char*, unsigned int)+0xc8>
    name[k] = 0;
    2f44:	ldrb.w	r3, [sp, #4]
    2f48:	strb.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    2f4c:	add.w	r3, r9, r5
    2f50:	ldrb.w	r2, [sp, #4]
    2f54:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    2f58:	ldrb.w	r3, [sl]
    2f5c:	lsls	r3, r3, #25
    2f5e:	bmi.n	2f72 <FatFile::getName(char*, unsigned int)+0xee>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    2f60:	adds	r6, #1
    2f62:	ldrb.w	r3, [r8, #3]
    2f66:	uxtb	r6, r6
    2f68:	cmp	r3, r6
    2f6a:	bcs.n	2ece <FatFile::getName(char*, unsigned int)+0x4a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    2f6c:	movs	r7, #0
    2f6e:	strb.w	r7, [r9]
  return false;
}
    2f72:	mov	r0, r7
    2f74:	add	sp, #52	; 0x34
    2f76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    2f7a:	bl	37f4 <FatFile::getSFN(char*)>
    2f7e:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    2f80:	mov	r0, r7
    2f82:	add	sp, #52	; 0x34
    2f84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    2f88:	mov	fp, r3
    2f8a:	b.n	2f38 <FatFile::getName(char*, unsigned int)+0xb4>

00002f8c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    2f8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    2f90:	ldrb	r3, [r0, #0]
    2f92:	cmp	r3, #32
    2f94:	bne.n	2f9e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    2f96:	ldrb.w	r3, [r0, #1]!
    2f9a:	cmp	r3, #32
    2f9c:	beq.n	2f96 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    2f9e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    2fa0:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    2fa2:	cmp	r3, #47	; 0x2f
    2fa4:	beq.w	31ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
    2fa8:	cmp	r3, #0
    2faa:	beq.w	31ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fae:	cmp	r3, #92	; 0x5c
    2fb0:	beq.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    2fb2:	sub.w	r4, r3, #34	; 0x22
    2fb6:	uxtb	r4, r4
    2fb8:	cmp	r4, #26
    2fba:	bls.n	3004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x78>
    2fbc:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    2fbe:	movs	r5, #0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fc0:	ldr.w	lr, [pc, #584]	; 320c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>
    2fc4:	b.n	2fce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    2fc6:	cmp	r4, #26
    2fc8:	lsr.w	r7, lr, r4
    2fcc:	bls.n	3014 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x88>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fce:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    2fd2:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    2fd4:	sub.w	ip, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fd8:	mov	r8, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fda:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fdc:	mov	r7, r5
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fde:	bls.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    2fe0:	cmp	r3, #124	; 0x7c
    2fe2:	beq.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    2fe4:	cmp.w	ip, #94	; 0x5e
    2fe8:	bhi.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fea:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fee:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    2ff2:	cmp	r3, #47	; 0x2f
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2ff4:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    2ff6:	beq.n	301e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    2ff8:	cbz	r3, 301e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2ffa:	cmp	r3, #92	; 0x5c
    2ffc:	bne.n	2fc6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x3a>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    2ffe:	movs	r0, #0
    3000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3004:	ldr	r5, [pc, #516]	; (320c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>)
    3006:	lsr.w	r4, r5, r4
    300a:	lsls	r5, r4, #31
    300c:	bpl.n	2fbc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x30>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    300e:	movs	r0, #0
    3010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3014:	lsls	r4, r7, #31
    3016:	bpl.n	2fce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    3018:	movs	r0, #0
    301a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    301e:	cmp	r3, #32
    3020:	beq.n	3028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
    3022:	cmp	r3, #47	; 0x2f
    3024:	bne.w	31e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x25a>
    3028:	adds	r3, r5, #1
    302a:	add	r3, r0
    302c:	mov	r6, r3
    302e:	ldrb.w	r4, [r3], #1
    3032:	cmp	r4, #32
    3034:	beq.n	302c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
    3036:	cmp	r4, #47	; 0x2f
    3038:	beq.n	302c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  *ptr = &path[end];
    303a:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    303c:	cbz	r5, 306c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    303e:	add	r7, r0
    3040:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    3044:	cmp	r3, #32
    3046:	beq.n	304c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    3048:	cmp	r3, #46	; 0x2e
    304a:	bne.n	3062 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    304c:	subs	r3, r5, #1
    304e:	adds	r4, r0, r3
      break;
    }
    len--;
    3050:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3052:	cbz	r3, 306c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    3054:	ldrb.w	r2, [r4, #-1]!
    3058:	subs	r3, #1
    if (c != '.' && c != ' ') {
    305a:	cmp	r2, #46	; 0x2e
    305c:	beq.n	3050 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
    305e:	cmp	r2, #32
    3060:	beq.n	3050 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    3062:	cmp	r5, #255	; 0xff
    3064:	bgt.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    3066:	mov	r7, r5
    3068:	subs	r4, r5, #1
    306a:	b.n	3072 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    306c:	mov.w	r4, #4294967295
    3070:	mov	r7, r5
    3072:	add.w	r3, r1, #12
    3076:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    307a:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    307c:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    307e:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    3082:	cmp	r3, r6
    3084:	bne.n	307e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    3086:	ldrb	r3, [r0, #0]
    3088:	cmp	r3, #46	; 0x2e
    308a:	beq.n	3092 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
    308c:	cmp	r3, #32
    308e:	bne.w	31de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    3092:	mov	r6, r0
    3094:	movs	r3, #0
    3096:	ldrb.w	r2, [r6, #1]!
    309a:	adds	r3, #1
    309c:	cmp	r2, #46	; 0x2e
    309e:	beq.n	3096 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    30a0:	cmp	r2, #32
    30a2:	beq.n	3096 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    30a4:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    30a8:	adds	r2, r4, #1
    30aa:	beq.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    30ac:	ldrb	r6, [r0, r4]
    30ae:	adds	r2, r0, r4
    30b0:	cmp	r6, #46	; 0x2e
    30b2:	bne.n	30be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
    30b4:	b.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    30b6:	ldrb.w	r6, [r2, #-1]!
    30ba:	cmp	r6, #46	; 0x2e
    30bc:	beq.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    30be:	adds.w	r4, r4, #4294967295
    30c2:	bcs.n	30b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  for (; si < len; si++) {
    30c4:	cmp	r5, r3
    30c6:	mov.w	r9, #0
    30ca:	ble.w	3206 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    30ce:	mov.w	ip, #7
    30d2:	mov.w	r8, #8
    30d6:	mov	r6, r9
    30d8:	mov	sl, r9
    c = path[si];
    30da:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    30dc:	cmp	r2, #32
    30de:	beq.n	30e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15c>
    30e0:	cmp	r2, #46	; 0x2e
    30e2:	bne.n	3114 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
    30e4:	cmp	r4, r3
    30e6:	beq.n	3114 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      is83 = false;
    30e8:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    30ec:	adds	r3, #1
    30ee:	cmp	r3, r5
    30f0:	blt.n	30da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    30f2:	ldrb	r3, [r1, #13]
    30f4:	cmp	r3, #32
    30f6:	beq.n	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    30f8:	cmp.w	lr, #0
    30fc:	beq.n	31ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    30fe:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    3102:	mov.w	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3106:	it	ne
    3108:	movne.w	r9, #2
    310c:	strb.w	r9, [r1]
    3110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    3114:	cmp	r2, #34	; 0x22
    3116:	beq.n	3128 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    3118:	cmp	r2, #124	; 0x7c
    311a:	beq.n	3128 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    311c:	sub.w	r7, r2, #42	; 0x2a
    3120:	cmp	r7, #5
    3122:	bhi.n	314e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    3124:	cmp	r2, #45	; 0x2d
    3126:	beq.n	314e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    3128:	cmp	r4, r3
    312a:	beq.n	3166 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1da>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    312c:	cmp	r6, ip
    312e:	ite	ls
    3130:	movls	r2, #0
    3132:	movhi	r2, #1
    3134:	cbnz	r2, 31a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x214>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    3136:	mov	lr, r2
      c = '_';
    3138:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    313a:	adds	r7, r6, #1
    313c:	add.w	fp, r1, r6
    3140:	uxtb	r6, r7
    3142:	strb.w	r2, [fp, #13]
      if (i < 7) {
    3146:	cmp	r6, #6
    3148:	bhi.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
        fname->seqPos = i;
    314a:	strb	r6, [r1, #12]
    314c:	b.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    314e:	sub.w	r7, r2, #58	; 0x3a
    3152:	cmp	r7, #5
    3154:	bls.n	3128 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    3156:	sub.w	r7, r2, #91	; 0x5b
    315a:	cmp	r7, #2
    315c:	bls.n	3128 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    315e:	sub.w	r7, r2, #33	; 0x21
    3162:	cmp	r7, #93	; 0x5d
    3164:	bhi.n	3128 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    3166:	cmp	r4, r3
    3168:	beq.n	3180 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    316a:	cmp	r6, ip
    316c:	bhi.n	3180 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    316e:	sub.w	r7, r2, #97	; 0x61
    3172:	cmp	r7, #25
    3174:	bhi.n	31d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
        c += 'A' - 'a';
    3176:	subs	r2, #32
        lc |= bit;
    3178:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    317c:	uxtb	r2, r2
    317e:	b.n	313a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    3180:	cmp.w	ip, #10
    3184:	beq.n	31a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    3186:	cmp	r4, r3
    3188:	beq.n	31c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    318a:	cmp	r4, r3
    318c:	blt.n	31a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    318e:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    3190:	mov.w	ip, #10
      i = 8;    // Place for extension.
    3194:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3196:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    319a:	mov.w	lr, #0
    319e:	b.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    31a0:	cmp.w	ip, #10
    31a4:	bne.n	318a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    31a6:	ldrb	r3, [r1, #13]
    31a8:	cmp	r3, #32
    31aa:	beq.w	2ffe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    31ae:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    31b0:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    31b2:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    31b4:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    31b6:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    31b8:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    31ba:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    31bc:	strb	r2, [r3, #14]
    31be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31c2:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    31c4:	mov.w	ip, #10
      i = 8;    // Place for extension.
    31c8:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    31ca:	mov.w	r8, #16
    31ce:	b.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    31d0:	sub.w	r7, r2, #65	; 0x41
    31d4:	cmp	r7, #25
    31d6:	bhi.n	313a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
        uc |= bit;
    31d8:	orr.w	sl, r8, sl
    31dc:	b.n	313a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    31de:	mov.w	lr, #1
    31e2:	movs	r3, #0
    31e4:	b.n	30a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    31e6:	str.w	r8, [r2]
    31ea:	b.n	303e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    31ec:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    31ee:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    31f2:	beq.n	31f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26c>
    31f4:	cmp	r3, #32
    31f6:	bne.n	31fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x270>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    31f8:	mov	r5, r7
    31fa:	b.n	3028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    31fc:	str	r0, [r2, #0]
    31fe:	mov.w	r4, #4294967295
    3202:	mov	r5, r7
    3204:	b.n	3072 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    3206:	mov	sl, r9
    3208:	b.n	30f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    320a:	nop
    320c:	.word	0x05000101

00003210 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    3210:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    3214:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    3216:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3218:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    321a:	lsls	r2, r2, #30
    321c:	strb.w	r3, [sp, #4]
    3220:	strb.w	r3, [sp, #5]
    3224:	strb.w	r3, [sp, #6]
    3228:	bpl.n	3270 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    322a:	ldr	r1, [r0, #32]
    322c:	mov	r5, r0
    322e:	cbnz	r1, 327a <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    3230:	movs	r1, #1
    3232:	mov	r0, r5
    3234:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3238:	cbz	r0, 3270 <FatFile::remove()+0x60>
    323a:	subs	r1, r0, #1
    323c:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    3240:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3242:	lsrs	r2, r4, #1
    3244:	ldrb.w	r6, [r1, #1]!
    3248:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    324c:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    324e:	uxtab	r3, r6, r3
    3252:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3254:	bne.n	3242 <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    3256:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    325a:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    325c:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    3260:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    3262:	strb	r3, [r5, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3264:	add.w	r0, r6, #36	; 0x24
  m_flags = 0;
    3268:	strb	r3, [r5, #2]
    326a:	bl	2a80 <FatCache::sync()>
    326e:	cbnz	r0, 3286 <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3270:	movs	r6, #0
}
    3272:	mov	r0, r6
    3274:	add	sp, #40	; 0x28
    3276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    327a:	ldr	r0, [r0, #8]
    327c:	bl	2bf8 <FatPartition::freeChain(unsigned long)>
    3280:	cmp	r0, #0
    3282:	bne.n	3230 <FatFile::remove()+0x20>
    3284:	b.n	3270 <FatFile::remove()+0x60>
    3286:	add.w	r0, r6, #560	; 0x230
    328a:	bl	2a80 <FatCache::sync()>
    328e:	cmp	r0, #0
    3290:	beq.n	3270 <FatFile::remove()+0x60>
    3292:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3294:	ldr	r3, [r0, #0]
    3296:	ldr	r3, [r3, #20]
    3298:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    329a:	mov	r6, r0
    329c:	cmp	r0, #0
    329e:	beq.n	3270 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    32a0:	ldrb	r3, [r5, #3]
    32a2:	cmp	r3, #0
    32a4:	beq.n	3272 <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    32a6:	mov	r1, r5
    32a8:	add	r0, sp, #4
    32aa:	bl	2e54 <FatFile::openCluster(FatFile*)>
    32ae:	cmp	r0, #0
    32b0:	beq.n	3270 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32b2:	ldrb	r3, [r5, #3]
    32b4:	cmp	r3, #0
    32b6:	beq.n	3270 <FatFile::remove()+0x60>
    32b8:	movs	r7, #1
    32ba:	b.n	32fc <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    32bc:	add	r0, sp, #4
    32be:	bl	2360 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32c2:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    32c4:	cmp	r0, #0
    32c6:	beq.n	3270 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32c8:	ldrb	r2, [r0, #11]
    32ca:	cmp	r2, #15
    32cc:	bne.n	3270 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    32ce:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32d0:	and.w	r1, r2, #31
    32d4:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32d6:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32d8:	bne.n	3270 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    32da:	ldrb	r3, [r0, #13]
    32dc:	cmp	r3, r4
    32de:	bne.n	3270 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    32e0:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    32e4:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    32e6:	ldrb.w	r3, [r1, #36]	; 0x24
    32ea:	orr.w	r3, r3, #1
    32ee:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    32f2:	lsls	r3, r2, #25
    32f4:	bmi.n	3310 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32f6:	ldrb	r3, [r5, #3]
    32f8:	cmp	r3, r7
    32fa:	bcc.n	3270 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    32fc:	ldrh	r1, [r5, #4]
    32fe:	add	r0, sp, #4
    3300:	subs	r1, r1, r7
    3302:	lsls	r1, r1, #5
    3304:	bl	25e4 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3308:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    330a:	cmp	r0, #0
    330c:	bne.n	32bc <FatFile::remove()+0xac>
    330e:	b.n	3270 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    3310:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3312:	add.w	r0, r4, #36	; 0x24
    3316:	bl	2a80 <FatCache::sync()>
    331a:	cmp	r0, #0
    331c:	beq.n	3270 <FatFile::remove()+0x60>
    331e:	add.w	r0, r4, #560	; 0x230
    3322:	bl	2a80 <FatCache::sync()>
    3326:	cmp	r0, #0
    3328:	beq.n	3270 <FatFile::remove()+0x60>
    332a:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    332c:	ldr	r3, [r0, #0]
    332e:	ldr	r3, [r3, #20]
    3330:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3332:	cmp	r0, #0
    3334:	beq.n	3270 <FatFile::remove()+0x60>
    3336:	b.n	3272 <FatFile::remove()+0x62>

00003338 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    3338:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    333c:	mov	r6, r1
    333e:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    3340:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    3344:	mov.w	r9, #126	; 0x7e
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    3348:	ldrb	r7, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    334a:	add.w	r5, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    334e:	ldr	r0, [r6, #4]
    3350:	ldr	r1, [r6, #8]
    3352:	add.w	r3, r8, r0
    3356:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    3358:	cbz	r0, 336e <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    335a:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    335c:	ldrb.w	r2, [r1], #1
    3360:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    3364:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    3366:	eor.w	r3, r3, r2
    336a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    336c:	bne.n	335c <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    336e:	cmp	r7, #3
    3370:	it	cs
    3372:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    3374:	adds	r2, r7, #4
    3376:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    3378:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    337c:	add.w	lr, r2, #4294967295
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    3380:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3382:	cmp	r1, #9
    3384:	add.w	r0, r1, #55	; 0x37
    3388:	it	ls
    338a:	addls.w	r0, r1, #48	; 0x30
    338e:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    3390:	uxtb.w	r2, lr
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    3394:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    3396:	cmp	r7, r2
    3398:	bcc.n	3378 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    339a:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    339c:	movs	r1, #0
    339e:	mov	r0, r4
    33a0:	strb.w	r9, [r3, #13]
    33a4:	bl	25e4 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    33a8:	movs	r1, #1
    33aa:	mov	r0, r4
    33ac:	bl	2360 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    33b0:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    33b2:	mov	r3, r0
    33b4:	cbz	r0, 33e4 <FatFile::lfnUniqueSfn(fname_t*)+0xac>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    33b6:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    33ba:	mov	r1, r0
    33bc:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    33be:	cmp.w	lr, #0
    33c2:	beq.n	33f0 <FatFile::lfnUniqueSfn(fname_t*)+0xb8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    33c4:	ldrb	r3, [r3, #11]
    33c6:	lsls	r3, r3, #28
    33c8:	bmi.n	33a8 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    33ca:	bl	b0c0 <memcmp>
    33ce:	cmp	r0, #0
    33d0:	bne.n	33a8 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    33d2:	add.w	r8, r8, #1
    33d6:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    33da:	cmp.w	r8, #100	; 0x64
    33de:	bne.n	334e <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    33e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    33e4:	ldrb	r0, [r4, #1]
    33e6:	clz	r0, r0
    33ea:	lsrs	r0, r0, #5
    33ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    33f0:	movs	r0, #1
    33f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33f6:	nop

000033f8 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    33f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    33fc:	ldrb	r4, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    33fe:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    3400:	tst.w	r4, #112	; 0x70
    3404:	beq.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    3406:	ldrb	r4, [r0, #0]
    3408:	cbz	r4, 3412 <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    340a:	movs	r0, #0
}
    340c:	add	sp, #52	; 0x34
    340e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    3412:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    3414:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    3418:	lsls	r4, r4, #30
    341a:	bne.n	34ae <FatFile::open(FatFile*, fname_t*, int)+0xb6>
    341c:	movs	r7, #1
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    341e:	mov.w	r9, #0
    3422:	mov	r6, r1
    3424:	str	r3, [sp, #28]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3426:	add.w	r3, r2, #13
    342a:	str	r0, [sp, #36]	; 0x24
    342c:	mov	r1, r9
    342e:	mov	r0, r6
    3430:	mov	fp, r2
    3432:	str	r3, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    3434:	mov	r4, r9
  uint8_t order = 0;
  uint8_t checksum = 0;
    3436:	str.w	r9, [sp, #24]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    343a:	mov	r8, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    343c:	str.w	r9, [sp, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    3440:	str.w	r9, [sp, #20]
    3444:	bl	25e4 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    3448:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    344a:	movs	r1, #1
    344c:	mov	r0, r6
    344e:	bl	2360 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    3452:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    3456:	mov	r3, r0
    3458:	cmp	r0, #0
    345a:	beq.w	35c6 <FatFile::open(FatFile*, fname_t*, int)+0x1ce>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    345e:	ldrb	r2, [r0, #0]
    3460:	sub.w	r1, r2, #229	; 0xe5
    3464:	clz	r1, r1
    3468:	lsrs	r1, r1, #5
    346a:	cmp	r2, #0
    346c:	beq.n	34da <FatFile::open(FatFile*, fname_t*, int)+0xe2>
    346e:	cmp	r1, #0
    3470:	bne.n	34da <FatFile::open(FatFile*, fname_t*, int)+0xe2>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    3472:	cmp	r4, r7
    3474:	it	cc
    3476:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    3478:	cmp	r2, #46	; 0x2e
    347a:	beq.n	34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    347c:	cbnz	r1, 34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    347e:	ldrb	r0, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    3480:	cmp	r0, #15
    3482:	beq.n	3540 <FatFile::open(FatFile*, fname_t*, int)+0x148>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    3484:	lsls	r2, r0, #28
    3486:	bmi.n	34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (lfnOrd) {
    3488:	cmp.w	r8, #0
    348c:	bne.w	3748 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3490:	mov	r0, r3
    3492:	movs	r2, #11
    3494:	ldr	r1, [sp, #16]
    3496:	bl	b0c0 <memcmp>
    349a:	cmp	r0, #0
    349c:	bne.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    349e:	ldrb.w	r3, [fp]
    34a2:	lsls	r0, r3, #31
    34a4:	bpl.w	3772 <FatFile::open(FatFile*, fname_t*, int)+0x37a>
          goto found;
        }
        fnameFound = true;
    34a8:	movs	r3, #1
    34aa:	str	r3, [sp, #20]
    34ac:	b.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    34ae:	add.w	r4, sl, #12
    34b2:	ldr	r7, [pc, #720]	; (3784 <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    34b4:	umull	r4, r7, r7, r4
    34b8:	lsrs	r7, r7, #2
    34ba:	adds	r7, #1
    34bc:	uxtb	r7, r7
    34be:	b.n	341e <FatFile::open(FatFile*, fname_t*, int)+0x26>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    34c0:	ldr	r0, [sp, #12]
    34c2:	subs	r0, #1
    34c4:	uxtb	r0, r0
    34c6:	cmp	r2, r0
    34c8:	str	r0, [sp, #12]
    34ca:	bne.n	34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    34cc:	ldrb	r2, [r3, #13]
    34ce:	ldr	r0, [sp, #24]
    34d0:	cmp	r0, r2
    34d2:	beq.n	3558 <FatFile::open(FatFile*, fname_t*, int)+0x160>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    34d4:	mov.w	r8, #0
    34d8:	b.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    34da:	cmp	r4, #0
    34dc:	it	eq
    34de:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    34e0:	cmp	r4, r7
    34e2:	bcs.n	34e8 <FatFile::open(FatFile*, fname_t*, int)+0xf0>
        freeFound++;
    34e4:	adds	r4, #1
    34e6:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    34e8:	cmp	r2, #0
    34ea:	bne.n	3478 <FatFile::open(FatFile*, fname_t*, int)+0x80>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    34ec:	ldr	r2, [sp, #28]
    34ee:	mov	r3, r2
    34f0:	lsls	r2, r3, #22
    34f2:	bpl.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    34f4:	and.w	r3, r3, #3
    34f8:	subs	r3, #1
    34fa:	cmp	r3, #1
    34fc:	bhi.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    34fe:	cmp	r4, #0
    3500:	it	eq
    3502:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    3504:	cmp	r4, r7
    3506:	bcc.n	3510 <FatFile::open(FatFile*, fname_t*, int)+0x118>
    3508:	b.n	35e0 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    350a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    350c:	cmp	r7, r4
    350e:	bls.n	35e0 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    dir = dirFile->readDirCache();
    3510:	movs	r1, #0
    3512:	mov	r0, r6
    3514:	bl	2360 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    3518:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    351a:	cmp	r0, #0
    351c:	bne.n	350a <FatFile::open(FatFile*, fname_t*, int)+0x112>
      if (dirFile->getError()) {
    351e:	ldrb	r3, [r6, #1]
    3520:	cbz	r3, 352e <FatFile::open(FatFile*, fname_t*, int)+0x136>
    3522:	b.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    3524:	ldr	r3, [r6, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    3526:	uxtb	r4, r4
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    3528:	ldrb	r3, [r3, #4]
    352a:	cmp	r3, #1
    352c:	bhi.n	35e0 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    352e:	cmp	r7, r4
    3530:	bls.n	35e0 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    3532:	mov	r0, r6
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    3534:	adds	r4, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    3536:	bl	1d34 <FatFile::addDirCluster()>
    353a:	cmp	r0, #0
    353c:	bne.n	3524 <FatFile::open(FatFile*, fname_t*, int)+0x12c>
    353e:	b.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    3540:	cmp.w	r8, #0
    3544:	bne.n	34c0 <FatFile::open(FatFile*, fname_t*, int)+0xc8>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    3546:	lsls	r1, r2, #25
    3548:	bpl.w	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    354c:	and.w	r8, r2, #31
        checksum = ldir->checksum;
    3550:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    3552:	str.w	r8, [sp, #12]
        checksum = ldir->checksum;
    3556:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    3558:	ldr	r2, [sp, #12]
    355a:	subs	r2, #1
    355c:	add.w	r5, r2, r2, lsl #1
    3560:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    3564:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    3566:	mov	r2, r5
      if (k >= len) {
    3568:	bls.n	34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    356a:	add.w	r1, r5, #13
    356e:	str.w	r8, [sp, #32]
    3572:	mov	r8, r1
    3574:	b.n	35a2 <FatFile::open(FatFile*, fname_t*, int)+0x1aa>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    3576:	cmp.w	ip, #25
    357a:	add.w	r0, r1, #32
    357e:	it	ls
    3580:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3582:	ldr.w	r0, [fp, #8]
    3586:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    3588:	sub.w	r0, r2, #65	; 0x41
    358c:	add.w	ip, r2, #32
    3590:	cmp	r0, #25
    3592:	it	ls
    3594:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3598:	cmp	r2, r1
    359a:	bne.n	34d4 <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    359c:	cmp	lr, r8
    359e:	mov	r2, lr
    35a0:	beq.n	35da <FatFile::open(FatFile*, fname_t*, int)+0x1e2>
        uint16_t u = lfnGetChar(ldir, i);
    35a2:	subs	r1, r2, r5
    35a4:	mov	r0, r3
    35a6:	uxtb	r1, r1
    35a8:	bl	2e04 <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    35ac:	cmp	sl, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    35ae:	add.w	lr, r2, #1
    35b2:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    35b4:	beq.w	373a <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    35b8:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    35ba:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    35be:	bls.n	3576 <FatFile::open(FatFile*, fname_t*, int)+0x17e>
          // Not found.
          lfnOrd = 0;
    35c0:	mov.w	r8, #0
    35c4:	b.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    35c6:	ldrb	r3, [r6, #1]
    35c8:	cmp	r3, #0
    35ca:	bne.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    35ce:	ldr	r2, [sp, #28]
    35d0:	mov	r3, r2
    35d2:	lsls	r2, r3, #22
    35d4:	bpl.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    35d8:	b.n	34f4 <FatFile::open(FatFile*, fname_t*, int)+0xfc>
    35da:	ldr.w	r8, [sp, #32]
    35de:	b.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    35e0:	ldr	r3, [sp, #20]
    35e2:	cbz	r3, 35f2 <FatFile::open(FatFile*, fname_t*, int)+0x1fa>
    if (!dirFile->lfnUniqueSfn(fname)) {
    35e4:	mov	r1, fp
    35e6:	mov	r0, r6
    35e8:	bl	3338 <FatFile::lfnUniqueSfn(fname_t*)>
    35ec:	cmp	r0, #0
    35ee:	beq.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    35f2:	mov.w	r1, r9, lsl #5
    35f6:	mov	r0, r6
    35f8:	bl	25e4 <FatFile::seekSet(unsigned long)>
    35fc:	cmp	r0, #0
    35fe:	beq.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    3602:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    3604:	ands.w	r8, r7, #255	; 0xff
    3608:	beq.n	36b4 <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    360a:	mov	r7, r8
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    360c:	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    360e:	movs	r5, #15
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    3610:	movs	r1, #0
    3612:	mov	r0, r6
    3614:	bl	2360 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3618:	cmp	r0, #0
    361a:	beq.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    361e:	ldr	r2, [r6, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3620:	cmp	r7, r8
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    3622:	ldrb.w	r3, [r2, #36]	; 0x24
    3626:	orr.w	r3, r3, #1
    362a:	strb.w	r3, [r2, #36]	; 0x24
    362e:	beq.w	377a <FatFile::open(FatFile*, fname_t*, int)+0x382>
    3632:	mov	r1, r7
    3634:	add.w	lr, fp, #12
    3638:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    363c:	movs	r3, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    363e:	strb	r1, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3640:	strb	r5, [r0, #11]
    ldir->mustBeZero1 = 0;
    3642:	strb	r4, [r0, #12]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3644:	lsrs	r2, r3, #1
    3646:	ldrb.w	r9, [lr, #1]!
    364a:	orr.w	r3, r2, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    364e:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3650:	uxtab	r3, r9, r3
    3654:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3656:	bne.n	3644 <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    3658:	and.w	r1, r1, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    365c:	strb	r3, [r0, #13]
    365e:	add.w	lr, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    3662:	ldr.w	ip, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    3666:	subs	r1, #1
  for (uint8_t i = 0; i < 13; i++, k++) {
    3668:	movs	r3, #0
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    366a:	strh	r4, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    366c:	add.w	r2, r1, r1, lsl #1
    3670:	add.w	r2, r1, r2, lsl #2
    3674:	b.n	3690 <FatFile::open(FatFile*, fname_t*, int)+0x298>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    3676:	cmp	r3, #10
    3678:	ite	ls
    367a:	strhls.w	r1, [lr]
    367e:	strhhi.w	r1, [lr, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    3682:	adds	r3, #1
    3684:	adds	r2, #1
    3686:	add.w	lr, lr, #2
    368a:	uxtb	r3, r3
    368c:	cmp	r3, #13
    368e:	beq.n	36ac <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    3690:	cmp	sl, r2
    3692:	ite	ne
    3694:	movne.w	r1, #4294967295
    3698:	moveq	r1, #0
    369a:	ite	hi
    369c:	ldrbhi.w	r1, [ip, r2]
    36a0:	uxthls	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    36a2:	cmp	r3, #4
    36a4:	bhi.n	3676 <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    36a6:	strh.w	r1, [lr, #-3]
    36aa:	b.n	3682 <FatFile::open(FatFile*, fname_t*, int)+0x28a>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    36ac:	subs	r7, #1
    36ae:	ands.w	r7, r7, #255	; 0xff
    36b2:	bne.n	3610 <FatFile::open(FatFile*, fname_t*, int)+0x218>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    36b4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    36b6:	movs	r1, #0
    36b8:	mov	r0, r6
    36ba:	bl	2360 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    36be:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    36c2:	mov	r4, r0
    36c4:	cmp	r0, #0
    36c6:	beq.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    36ca:	movs	r2, #32
    36cc:	movs	r1, #0
    36ce:	bl	b1ec <memset>
  memcpy(dir->name, fname->sfn, 11);
    36d2:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    36d4:	ldr	r2, [pc, #176]	; (3788 <FatFile::open(FatFile*, fname_t*, int)+0x390>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    36d6:	ldr.w	r0, [r3, #13]!
    36da:	ldr	r1, [r3, #4]
    36dc:	str	r0, [r4, #0]
    36de:	str	r1, [r4, #4]
    36e0:	ldrh	r1, [r3, #8]
    36e2:	ldrb	r3, [r3, #10]
    36e4:	strh	r1, [r4, #8]
    36e6:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    36e8:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    36ec:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    36ee:	and.w	r3, r3, #24
    36f2:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    36f4:	cbz	r7, 371a <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    36f6:	add.w	r2, sp, #43	; 0x2b
    36fa:	add.w	r1, sp, #46	; 0x2e
    36fe:	add	r0, sp, #44	; 0x2c
    3700:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    3702:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    3706:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    370a:	ldrb.w	r1, [sp, #43]	; 0x2b
    370e:	strh	r3, [r4, #16]
    3710:	strb	r1, [r4, #13]
    3712:	strh	r3, [r4, #18]
    3714:	strh	r3, [r4, #24]
    3716:	strh	r2, [r4, #14]
    3718:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    371a:	ldr	r2, [r6, #8]
    371c:	ldrb.w	r3, [r2, #36]	; 0x24
    3720:	orr.w	r3, r3, #1
    3724:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    3728:	str.w	r8, [sp]
    372c:	mov	r2, r5
    372e:	ldr	r3, [sp, #28]
    3730:	mov	r1, r6
    3732:	ldr	r0, [sp, #36]	; 0x24
    3734:	bl	2678 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    3738:	b.n	340c <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    373a:	cmp	r0, #0
    373c:	ldr.w	r8, [sp, #32]
    3740:	it	ne
    3742:	movne.w	r8, #0
    3746:	b.n	3448 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    3748:	ldr	r2, [sp, #12]
    374a:	cmp	r2, #1
    374c:	bne.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    3750:	subs	r4, r3, #1
    3752:	mov	r2, r1
    3754:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3756:	lsrs	r0, r2, #1
    3758:	ldrb.w	r1, [r4, #1]!
    375c:	orr.w	r2, r0, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3760:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3762:	uxtab	r2, r1, r2
    3766:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3768:	bne.n	3756 <FatFile::open(FatFile*, fname_t*, int)+0x35e>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    376a:	ldr	r3, [sp, #24]
    376c:	cmp	r3, r2
    376e:	bne.w	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    3772:	ldr	r3, [sp, #28]
    3774:	lsls	r1, r3, #20
    3776:	bpl.n	3728 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    3778:	b.n	340a <FatFile::open(FatFile*, fname_t*, int)+0x12>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    377a:	orr.w	r1, r7, #64	; 0x40
    377e:	uxtb	r1, r1
    3780:	b.n	3634 <FatFile::open(FatFile*, fname_t*, int)+0x23c>
    3782:	nop
    3784:	.word	0x4ec4ec4f
    3788:	.word	0x20003840

0000378c <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    378c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3790:	mov	r7, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    3792:	movs	r1, #0
    3794:	bl	1dc8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3798:	cbz	r0, 37de <FatFile::getSFN(char*) [clone .part.2]+0x52>
    379a:	movs	r2, #0
    379c:	subs	r5, r0, #1
    379e:	mov.w	ip, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    37a2:	mov.w	r8, #46	; 0x2e
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    37a6:	mov	r4, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    37a8:	ldrb.w	r3, [r5, #1]!
    37ac:	cmp	r3, #32
    37ae:	beq.n	37d2 <FatFile::getSFN(char*) [clone .part.2]+0x46>
      continue;
    }
    if (i == 8) {
    37b0:	cmp	r2, #8
    37b2:	beq.n	37e2 <FatFile::getSFN(char*) [clone .part.2]+0x56>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    37b4:	sub.w	r1, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    37b8:	adds	r6, r4, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    37ba:	cmp	r1, #25
    37bc:	bhi.n	37ce <FatFile::getSFN(char*) [clone .part.2]+0x42>
    37be:	ldrb	r1, [r0, #12]
      c += 'a' - 'A';
    37c0:	add.w	lr, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    37c4:	tst.w	ip, r1
      c += 'a' - 'A';
    37c8:	it	ne
    37ca:	uxtbne.w	r3, lr
    }
    name[j++] = c;
    37ce:	strb	r3, [r7, r4]
    37d0:	uxtb	r4, r6
    37d2:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    37d4:	cmp	r2, #11
    37d6:	bne.n	37a8 <FatFile::getSFN(char*) [clone .part.2]+0x1c>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    37d8:	movs	r3, #0
  return true;
    37da:	movs	r0, #1
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    37dc:	strb	r3, [r7, r4]
  return true;

fail:
  return false;
}
    37de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    37e2:	adds	r1, r4, #1
    37e4:	strb.w	r8, [r7, r4]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    37e8:	mov.w	ip, #16
    37ec:	ldrb	r3, [r5, #0]
      name[j++] = '.';
    37ee:	uxtb	r4, r1
    37f0:	b.n	37b4 <FatFile::getSFN(char*) [clone .part.2]+0x28>
    37f2:	nop

000037f4 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    37f4:	ldrb	r3, [r0, #0]
    37f6:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    37f8:	cbz	r3, 3810 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    37fa:	tst.w	r3, #96	; 0x60
    37fe:	beq.n	380c <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    3800:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    3802:	movs	r3, #0
    return true;
    3804:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    3806:	strb	r1, [r2, #0]
    name[1] = '\0';
    3808:	strb	r3, [r2, #1]
    return true;
    380a:	bx	lr
    380c:	b.w	378c <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    3810:	mov	r0, r3
}
    3812:	bx	lr

00003814 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    3814:	push	{r4, lr}
    3816:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    3818:	ldr	r0, [r0, #56]	; 0x38
    381a:	cbz	r0, 3828 <FsBaseFile::close()+0x14>
    381c:	bl	1e7c <FatFile::close()>
    3820:	cbz	r0, 3828 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    3822:	movs	r3, #0
    3824:	str	r3, [r4, #56]	; 0x38
    return true;
    3826:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    3828:	ldr	r0, [r4, #60]	; 0x3c
    382a:	cbz	r0, 3838 <FsBaseFile::close()+0x24>
    382c:	bl	35c <ExFatFile::close()>
    3830:	cbz	r0, 3838 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    3832:	movs	r3, #0
    3834:	str	r3, [r4, #60]	; 0x3c
    3836:	pop	{r4, pc}
    return true;
  }
  return false;
    3838:	movs	r0, #0
}
    383a:	pop	{r4, pc}

0000383c <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    383c:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    383e:	push	{r3, r4, r5, r6, r7, lr}
    3840:	mov	r6, r0
  if (this == &from) return *this;
    3842:	beq.n	3870 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    3844:	mov	r5, r1
  close();
    3846:	bl	3814 <FsBaseFile::close()>
  if (from.m_fFile) {
    384a:	ldr	r4, [r5, #56]	; 0x38
    384c:	cbz	r4, 3874 <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    384e:	mov	r1, r6
    3850:	movs	r0, #36	; 0x24
    3852:	bl	3a94 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3856:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    3858:	mov	r4, r0
    385a:	strb	r3, [r0, #0]
    385c:	strb	r3, [r0, #1]
    385e:	strb	r3, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    3860:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    3862:	ldr	r5, [r5, #56]	; 0x38
    3864:	ldmia	r5!, {r0, r1, r2, r3}
    3866:	stmia	r4!, {r0, r1, r2, r3}
    3868:	ldmia	r5!, {r0, r1, r2, r3}
    386a:	stmia	r4!, {r0, r1, r2, r3}
    386c:	ldr	r3, [r5, #0]
    386e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    3870:	mov	r0, r6
    3872:	pop	{r3, r4, r5, r6, r7, pc}
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    3874:	ldr	r3, [r5, #60]	; 0x3c
    3876:	cmp	r3, #0
    3878:	beq.n	3870 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    387a:	mov	r1, r6
    387c:	movs	r0, #56	; 0x38
    387e:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    3882:	strb.w	r4, [r0, #49]	; 0x31
    3886:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    388a:	mov	r2, r0
    388c:	strb.w	r4, [r0, #51]	; 0x33
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    3890:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    3892:	ldr	r3, [r5, #60]	; 0x3c
    3894:	add.w	r1, r3, #48	; 0x30
    3898:	ldr	r7, [r3, #0]
    389a:	adds	r3, #16
    389c:	ldr.w	r5, [r3, #-12]
    38a0:	adds	r2, #16
    38a2:	ldr.w	r4, [r3, #-8]
    38a6:	ldr.w	r0, [r3, #-4]
    38aa:	cmp	r3, r1
    38ac:	str.w	r7, [r2, #-16]
    38b0:	str.w	r5, [r2, #-12]
    38b4:	str.w	r4, [r2, #-8]
    38b8:	str.w	r0, [r2, #-4]
    38bc:	bne.n	3898 <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    38be:	ldr	r3, [r3, #0]
    38c0:	str	r3, [r2, #0]
    38c2:	b.n	3870 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

000038c4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    38c4:	cbz	r1, 393a <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    38c6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38ca:	mov	r4, r1
    38cc:	mov	r5, r0
    38ce:	mov	r8, r3
    38d0:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    38d2:	bl	3814 <FsBaseFile::close()>
  if (vol->m_fVol) {
    38d6:	ldr.w	r6, [r4, #1144]	; 0x478
    38da:	cbz	r6, 3908 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    38dc:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    38de:	mov	r1, r5
    38e0:	movs	r0, #36	; 0x24
    38e2:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    38e6:	mov	r3, r8
    38e8:	strb	r6, [r0, #0]
    38ea:	mov	r2, r7
    38ec:	strb	r6, [r0, #1]
    38ee:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    38f0:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    38f2:	ldr.w	r1, [r4, #1144]	; 0x478
    38f6:	bl	2188 <FatFile::open(FatVolume*, char const*, int)>
    38fa:	cbz	r0, 3902 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    38fc:	movs	r0, #1
    38fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    3902:	str	r0, [r5, #56]	; 0x38
    return false;
    3904:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    3908:	ldr.w	r3, [r4, #1148]	; 0x47c
    390c:	cbz	r3, 393e <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    390e:	mov	r1, r5
    3910:	movs	r0, #56	; 0x38
    3912:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    3916:	mov	r3, r8
    3918:	strb.w	r6, [r0, #49]	; 0x31
    391c:	mov	r2, r7
    391e:	strb.w	r6, [r0, #50]	; 0x32
    3922:	strb.w	r6, [r0, #51]	; 0x33
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    3926:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    3928:	ldr.w	r1, [r4, #1148]	; 0x47c
    392c:	bl	cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3930:	cmp	r0, #0
    3932:	bne.n	38fc <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    3934:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    3936:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    393a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    393c:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    393e:	movs	r0, #0
    3940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003944 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    3944:	push	{r3, r4, r5, r6, r7, lr}
    3946:	mov	r5, r1
    3948:	mov	r7, r2
    394a:	mov	r4, r0
  close();
    394c:	bl	3814 <FsBaseFile::close()>
  if (dir->m_fFile) {
    3950:	ldr	r6, [r5, #56]	; 0x38
    3952:	cbz	r6, 3978 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    3954:	mov	r1, r4
    3956:	movs	r0, #36	; 0x24
    3958:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    395c:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    395e:	mov	r2, r7
    3960:	strb	r1, [r0, #0]
    3962:	strb	r1, [r0, #1]
    3964:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    3966:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    3968:	ldr	r1, [r5, #56]	; 0x38
    396a:	bl	2750 <FatFile::openNext(FatFile*, int)>
    396e:	cbz	r0, 3974 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    3970:	movs	r0, #1
    3972:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    3974:	str	r0, [r4, #56]	; 0x38
    3976:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    3978:	ldr	r0, [r5, #60]	; 0x3c
    397a:	cbz	r0, 39a0 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    397c:	mov	r1, r4
    397e:	movs	r0, #56	; 0x38
    3980:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    3984:	mov	r2, r7
    3986:	strb.w	r6, [r0, #49]	; 0x31
    398a:	strb.w	r6, [r0, #50]	; 0x32
    398e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    3992:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    3994:	ldr	r1, [r5, #60]	; 0x3c
    3996:	bl	d04 <ExFatFile::openNext(ExFatFile*, int)>
    399a:	cmp	r0, #0
    399c:	bne.n	3970 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    399e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    39a0:	pop	{r3, r4, r5, r6, r7, pc}
    39a2:	nop

000039a4 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    39a4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    39a6:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    39a8:	mov	r5, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    39aa:	mov.w	r0, #1144	; 0x478
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    39ae:	str.w	r1, [r5, #1152]	; 0x480
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    39b2:	mov	r1, r5
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    39b4:	str.w	r6, [r5, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    39b8:	bl	3a94 <operator new(unsigned int, unsigned long*)>
    39bc:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    39be:	str	r6, [r0, #4]
    invalidate();
    39c0:	bl	d64 <FsCache::invalidate()>
    39c4:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    39c8:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    39cc:	bl	d64 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    39d0:	strb.w	r6, [r4, #1084]	; 0x43c
    39d4:	strb.w	r6, [r4, #1137]	; 0x471
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    39d8:	mov	r0, r4
    39da:	strb.w	r6, [r4, #1138]	; 0x472
    39de:	movs	r2, #1
    39e0:	strb.w	r6, [r4, #1139]	; 0x473
    39e4:	str.w	r4, [r5, #1148]	; 0x47c
    39e8:	ldr.w	r1, [r5, #1152]	; 0x480
    39ec:	bl	ef4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    39f0:	cbnz	r0, 3a30 <FsVolume::begin(BlockDeviceInterface*)+0x8c>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    39f2:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    39f4:	mov	r1, r5
    39f6:	mov.w	r0, #1120	; 0x460
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    39fa:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    39fe:	bl	3a94 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    3a02:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    3a04:	strb	r6, [r0, #7]
    3a06:	mov	r4, r0
    3a08:	strb.w	r6, [r0, #1084]	; 0x43c
    3a0c:	strb.w	r6, [r0, #1085]	; 0x43d
    3a10:	strb.w	r6, [r0, #1086]	; 0x43e
    3a14:	str.w	r0, [r5, #1144]	; 0x478
    3a18:	ldr.w	r1, [r5, #1152]	; 0x480
    3a1c:	bl	2ce4 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    3a20:	cbnz	r0, 3a4e <FsVolume::begin(BlockDeviceInterface*)+0xaa>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    3a22:	movs	r3, #0
    3a24:	ldr	r2, [pc, #64]	; (3a68 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  m_fVol = nullptr;
  return false;
    3a26:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    3a28:	str	r3, [r2, #0]
  m_fVol = nullptr;
    3a2a:	str.w	r3, [r5, #1144]	; 0x478
  return false;
    3a2e:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    3a30:	add.w	r6, r4, #1088	; 0x440
    3a34:	mov	r0, r6
    3a36:	bl	35c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    3a3a:	mov	r1, r4
    3a3c:	mov	r0, r6
    3a3e:	bl	418 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    3a42:	cmp	r0, #0
    3a44:	beq.n	39f2 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    3a46:	ldr	r3, [pc, #32]	; (3a68 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  return true;
    3a48:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    3a4a:	str	r5, [r3, #0]
  return true;
    3a4c:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    3a4e:	addw	r6, r4, #1084	; 0x43c
    3a52:	mov	r0, r6
    3a54:	bl	1e7c <FatFile::close()>
    return m_vwd.openRoot(this);
    3a58:	mov	r1, r4
    3a5a:	mov	r0, r6
    3a5c:	bl	2198 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    3a60:	cmp	r0, #0
    3a62:	bne.n	3a46 <FsVolume::begin(BlockDeviceInterface*)+0xa2>
    3a64:	b.n	3a22 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    3a66:	nop
    3a68:	.word	0x20003844

00003a6c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    3a6c:	push	{r3, r4, r5, r6, r7, lr}
    3a6e:	movs	r5, #0
    3a70:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3a74:	ldr	r6, [pc, #24]	; (3a90 <FsVolume::open(char const*, int)+0x24>)
    3a76:	mov	r4, r0
    3a78:	str	r7, [r0, #8]
    3a7a:	strb	r5, [r0, #4]
    3a7c:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    3a7e:	str	r5, [r0, #72]	; 0x48
    3a80:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3a82:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    3a86:	bl	38c4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    3a8a:	mov	r0, r4
    3a8c:	pop	{r3, r4, r5, r6, r7, pc}
    3a8e:	nop
    3a90:	.word	0x2000002c

00003a94 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    3a94:	mov	r0, r1
    3a96:	bx	lr

00003a98 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    3a98:	mov.w	r0, #4294967295
    3a9c:	bx	lr
    3a9e:	nop

00003aa0 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    3aa0:	ldrb	r0, [r0, #23]
    3aa2:	bx	lr

00003aa4 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    3aa4:	ldrb	r0, [r0, #25]
    3aa6:	bx	lr

00003aa8 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    3aa8:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    3aaa:	ldr	r4, [r0, #0]
    3aac:	movs	r3, #1
    3aae:	ldr	r4, [r4, #12]
    3ab0:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    3ab2:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    3ab6:	bx	ip

00003ab8 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    3ab8:	ldrb	r0, [r0, #26]
    3aba:	bx	lr

00003abc <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    3abc:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    3abe:	ldr	r4, [r0, #0]
    3ac0:	movs	r3, #1
    3ac2:	ldr	r4, [r4, #28]
    3ac4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    3ac6:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    3aca:	bx	ip

00003acc <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    3acc:	bx	lr
    3ace:	nop

00003ad0 <SdSpiCard::~SdSpiCard()>:
    3ad0:	push	{r4, lr}
    3ad2:	mov	r4, r0
    3ad4:	movs	r1, #28
    3ad6:	bl	9d80 <operator delete(void*, unsigned int)>
    3ada:	mov	r0, r4
    3adc:	pop	{r4, pc}
    3ade:	nop

00003ae0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3ae0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ae4:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3ae6:	ldrb	r3, [r0, #20]
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3ae8:	mov	r4, r0
    3aea:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3aec:	cmp	r3, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3aee:	mov	r5, r2
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3af0:	beq.n	3b02 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    3af2:	ldr	r3, [r4, #0]
    3af4:	mov	r0, r4
    3af6:	ldr	r3, [r3, #20]
    3af8:	blx	r3
    3afa:	cbnz	r0, 3b34 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    3afc:	movs	r0, #0
    3afe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3b02:	ldr	r3, [r0, #16]
    3b04:	cmp	r3, r1
    3b06:	bne.n	3af2 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3b08:	cbz	r7, 3b24 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    3b0a:	movs	r6, #0
    if (!writeData(src)) {
    3b0c:	ldr	r3, [r4, #0]
    3b0e:	mov	r1, r5
    3b10:	mov	r0, r4
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3b12:	adds	r6, #1
    if (!writeData(src)) {
    3b14:	ldr	r3, [r3, #68]	; 0x44
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3b16:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    3b1a:	blx	r3
    3b1c:	cmp	r0, #0
    3b1e:	beq.n	3afc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3b20:	cmp	r7, r6
    3b22:	bne.n	3b0c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    3b24:	ldr	r3, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    3b26:	ldrb	r2, [r4, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    3b28:	add	r7, r3
    3b2a:	str	r7, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    3b2c:	cbnz	r2, 3b4a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    3b2e:	movs	r0, #1
    3b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    3b34:	ldr	r3, [r4, #0]
    3b36:	mov	r1, r6
    3b38:	mov	r0, r4
    3b3a:	ldr	r3, [r3, #72]	; 0x48
    3b3c:	blx	r3
    3b3e:	cmp	r0, #0
    3b40:	beq.n	3afc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    3b42:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    3b44:	str	r6, [r4, #16]
    m_curState = WRITE_STATE;
    3b46:	strb	r3, [r4, #20]
    3b48:	b.n	3b08 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3b4a:	ldr	r3, [r4, #0]
    3b4c:	mov	r0, r4
    3b4e:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    3b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3b54:	bx	r3
    3b56:	nop

00003b58 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    3b58:	push	{r4, lr}
    3b5a:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    3b5c:	adds	r0, #4
    3b5e:	bl	5098 <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    3b62:	movs	r1, #0
    3b64:	ldrb	r0, [r4, #22]
    3b66:	bl	5290 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    3b6a:	movs	r3, #1
    3b6c:	strb	r3, [r4, #24]
    3b6e:	pop	{r4, pc}

00003b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    3b70:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3b72:	adds	r5, r0, #4
    3b74:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    3b76:	movs	r1, #1
    3b78:	ldrb	r0, [r0, #22]
    3b7a:	bl	5290 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3b7e:	movs	r1, #255	; 0xff
    3b80:	mov	r0, r5
    3b82:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    3b86:	mov	r0, r5
    3b88:	bl	519c <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    3b8c:	movs	r3, #0
    3b8e:	strb	r3, [r4, #24]
    3b90:	pop	{r3, r4, r5, pc}
    3b92:	nop

00003b94 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3b94:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    3b96:	ldrb	r7, [r0, #24]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3b98:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    3b9a:	cbnz	r7, 3ba0 <SdSpiCard::isBusy()+0xc>
    3b9c:	bl	3b58 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    3ba0:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3ba2:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3ba4:	mov	r0, r5
    3ba6:	bl	51f4 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    3baa:	cmp	r0, #255	; 0xff
    3bac:	add.w	r3, r4, #4294967295
    3bb0:	beq.n	3bce <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    3bb2:	ands.w	r4, r3, #255	; 0xff
    3bb6:	bne.n	3ba4 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    3bb8:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    3bba:	cbnz	r7, 3bc0 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3bbc:	ldrb	r3, [r6, #24]
    3bbe:	cbnz	r3, 3bc4 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    3bc0:	mov	r0, r4
    3bc2:	pop	{r3, r4, r5, r6, r7, pc}
    3bc4:	mov	r0, r6
    3bc6:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3bca:	mov	r0, r4
    3bcc:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    3bce:	movs	r4, #0
    3bd0:	b.n	3bba <SdSpiCard::isBusy()+0x26>
    3bd2:	nop

00003bd4 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    3bd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3bd8:	ldr	r6, [pc, #104]	; (3c44 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    3bda:	mov	r4, r0
    3bdc:	mov	r8, r1
    3bde:	mov	r9, r2
    3be0:	ldr	r5, [r6, #0]
    3be2:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    3be4:	uxth	r5, r5
    3be6:	b.n	3bf4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    3be8:	ldr	r3, [r6, #0]
    3bea:	uxth	r3, r3
    3bec:	subs	r3, r3, r5
    3bee:	cmp.w	r3, #300	; 0x12c
    3bf2:	bgt.n	3c18 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    3bf4:	mov	r0, r7
    3bf6:	bl	51f4 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    3bfa:	cmp	r0, #255	; 0xff
    3bfc:	strb	r0, [r4, #25]
    3bfe:	beq.n	3be8 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    3c00:	cmp	r0, #254	; 0xfe
    3c02:	beq.n	3c1e <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3c04:	movs	r3, #24
    3c06:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3c08:	ldrb	r0, [r4, #24]
    3c0a:	cbz	r0, 3c14 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    3c0c:	mov	r0, r4
    3c0e:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    3c12:	movs	r0, #0
}
    3c14:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c18:	movs	r3, #29
    3c1a:	strb	r3, [r4, #23]
    3c1c:	b.n	3c08 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    3c1e:	mov	r2, r9
    3c20:	mov	r1, r8
    3c22:	mov	r0, r7
    3c24:	bl	520c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    3c28:	strb	r0, [r4, #25]
    3c2a:	cbz	r0, 3c32 <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3c2c:	movs	r3, #36	; 0x24
    3c2e:	strb	r3, [r4, #23]
    3c30:	b.n	3c08 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3c32:	mov	r0, r7
    3c34:	bl	51f4 <SdSpiArduinoDriver::receive()>
    3c38:	mov	r0, r7
    3c3a:	bl	51f4 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    3c3e:	movs	r0, #1
    3c40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c44:	.word	0x20004a24

00003c48 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    3c48:	push	{r3, r4, r5, r6, r7, lr}
    3c4a:	ldr	r5, [pc, #40]	; (3c74 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    3c4c:	mov	r7, r1
    3c4e:	adds	r6, r0, #4
    3c50:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    3c52:	uxth	r4, r4
    3c54:	b.n	3c60 <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    3c56:	ldr	r3, [r5, #0]
    3c58:	uxth	r3, r3
    3c5a:	subs	r3, r3, r4
    3c5c:	cmp	r3, r7
    3c5e:	bgt.n	3c6e <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    3c60:	mov	r0, r6
    3c62:	bl	51f4 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    3c66:	cmp	r0, #255	; 0xff
    3c68:	bne.n	3c56 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    3c6a:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    3c6c:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    3c6e:	movs	r0, #0
    3c70:	pop	{r3, r4, r5, r6, r7, pc}
    3c72:	nop
    3c74:	.word	0x20004a24

00003c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    3c78:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    3c7c:	ldrb	r3, [r0, #24]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    3c7e:	sub	sp, #8
    3c80:	mov	r6, r0
    3c82:	mov	r8, r1
    3c84:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    3c86:	cbnz	r3, 3c8c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    3c88:	bl	3b58 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    3c8c:	cmp.w	r8, #0
    3c90:	bne.n	3cec <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3c92:	adds	r5, r6, #4
    3c94:	orr.w	r1, r8, #64	; 0x40
    3c98:	add	r7, sp, #4
    3c9a:	add	r4, sp, #8
    3c9c:	mov	r0, r5
    3c9e:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
    3ca2:	ldrb.w	r1, [r4, #-1]!
    3ca6:	mov	r0, r5
    3ca8:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    3cac:	cmp	r4, r7
    3cae:	bne.n	3ca2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    3cb0:	cmp.w	r8, #0
    3cb4:	mov	r0, r5
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3cb6:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3cba:	ite	eq
    3cbc:	moveq	r1, #149	; 0x95
    3cbe:	movne	r1, #135	; 0x87
    3cc0:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3cc4:	mov	r0, r5
    3cc6:	bl	51f4 <SdSpiArduinoDriver::receive()>
    3cca:	mov	r0, r5
    3ccc:	bl	51f4 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    3cd0:	strb	r0, [r6, #25]
    3cd2:	uxtb	r3, r4
    3cd4:	adds	r4, #1
    3cd6:	lsrs	r2, r0, #7
    3cd8:	cmp	r3, #9
    3cda:	ite	hi
    3cdc:	movhi	r3, #0
    3cde:	andls.w	r3, r2, #1
    3ce2:	cmp	r3, #0
    3ce4:	bne.n	3cca <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
  }
  return m_status;
}
    3ce6:	add	sp, #8
    3ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    3cec:	mov.w	r1, #300	; 0x12c
    3cf0:	mov	r0, r6
    3cf2:	bl	3c48 <SdSpiCard::waitNotBusy(unsigned short)>
    3cf6:	b.n	3c92 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00003cf8 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    3cf8:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    3cfa:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    3cfc:	mov	r5, r0
    3cfe:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    3d00:	ldr	r3, [r3, #20]
    3d02:	blx	r3
  if (cardCommand(CMD58, 0)) {
    3d04:	mov	r0, r5
    3d06:	movs	r2, #0
    3d08:	movs	r1, #58	; 0x3a
    3d0a:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3d0e:	cbnz	r0, 3d2c <SdSpiCard::readOCR(unsigned long*)+0x34>
    3d10:	adds	r7, r5, #4
    3d12:	adds	r4, r6, #4
    3d14:	mov	r0, r7
    3d16:	bl	51f4 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    3d1a:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    3d1e:	cmp	r6, r4
    3d20:	bne.n	3d14 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3d22:	ldrb	r4, [r5, #24]
    3d24:	cbnz	r4, 3d42 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    3d26:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    3d28:	mov	r0, r4
    3d2a:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3d2c:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3d2e:	ldrb	r4, [r5, #24]
    3d30:	strb	r3, [r5, #23]
    3d32:	cmp	r4, #0
    3d34:	beq.n	3d28 <SdSpiCard::readOCR(unsigned long*)+0x30>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    3d36:	movs	r4, #0
    3d38:	mov	r0, r5
    3d3a:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    3d3e:	mov	r0, r4
    3d40:	pop	{r3, r4, r5, r6, r7, pc}
    3d42:	mov	r0, r5
    3d44:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3d48:	mov	r0, r4
    3d4a:	pop	{r3, r4, r5, r6, r7, pc}

00003d4c <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3d4c:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    3d4e:	push	{r4, r5, r6, lr}
    3d50:	mov	r4, r0
    3d52:	mov	r5, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3d54:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    3d56:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3d58:	blx	r3
  if (cardCommand(cmd, 0)) {
    3d5a:	mov	r1, r5
    3d5c:	mov	r0, r4
    3d5e:	movs	r2, #0
    3d60:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3d64:	cbz	r0, 3d78 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    3d66:	movs	r3, #27
    3d68:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3d6a:	ldrb	r0, [r4, #24]
    3d6c:	cbz	r0, 3d76 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    3d6e:	mov	r0, r4
    3d70:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    3d74:	movs	r0, #0
}
    3d76:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    3d78:	mov	r1, r6
    3d7a:	movs	r2, #16
    3d7c:	mov	r0, r4
    3d7e:	bl	3bd4 <SdSpiCard::readData(unsigned char*, unsigned int)>
    3d82:	cmp	r0, #0
    3d84:	beq.n	3d6a <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3d86:	ldrb	r5, [r4, #24]
    3d88:	cmp	r5, #0
    3d8a:	beq.n	3d76 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    3d8c:	mov	r0, r4
    3d8e:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3d92:	mov	r0, r5
    3d94:	pop	{r4, r5, r6, pc}
    3d96:	nop

00003d98 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    3d98:	mov	r2, r1
    3d9a:	movs	r1, #9
    3d9c:	b.w	3d4c <SdSpiCard::readRegister(unsigned char, void*)>

00003da0 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    3da0:	mov	r2, r1
    3da2:	movs	r1, #10
    3da4:	b.w	3d4c <SdSpiCard::readRegister(unsigned char, void*)>

00003da8 <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3da8:	ldr	r3, [r0, #0]
    3daa:	ldr	r2, [pc, #144]	; (3e3c <SdSpiCard::sectorCount()+0x94>)
    3dac:	ldr	r3, [r3, #52]	; 0x34
    3dae:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    3db0:	push	{r4, r5, lr}
    3db2:	sub	sp, #20
    3db4:	bne.n	3e16 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    3db6:	mov	r2, sp
    3db8:	movs	r1, #9
    3dba:	bl	3d4c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3dbe:	cbz	r0, 3dd0 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    3dc0:	ldrb.w	r3, [sp]
    3dc4:	ands.w	r3, r3, #192	; 0xc0
    3dc8:	beq.n	3dd4 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    3dca:	cmp	r3, #64	; 0x40
    3dcc:	beq.n	3e1c <SdSpiCard::sectorCount()+0x74>
    3dce:	movs	r0, #0
}
    3dd0:	add	sp, #20
    3dd2:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    3dd4:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    3dd8:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3ddc:	ldrb.w	r2, [sp, #7]
    3de0:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    3de4:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3de8:	and.w	r3, r3, #3
    3dec:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    3dee:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3df2:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    3df4:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3df8:	orr.w	r0, r4, r0, lsr #7
    3dfc:	and.w	r1, r1, #15
    3e00:	orr.w	r3, r2, r3, lsl #10
    3e04:	add	r0, r1
    3e06:	orr.w	r3, r3, r5, lsr #6
    3e0a:	subs	r0, #7
    3e0c:	adds	r3, #1
    3e0e:	lsl.w	r0, r3, r0
    3e12:	add	sp, #20
    3e14:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3e16:	mov	r1, sp
    3e18:	blx	r3
    3e1a:	b.n	3dbe <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    3e1c:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    3e20:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    3e24:	adds	r2, r3, #1
    3e26:	ldrb.w	r0, [sp, #8]
    3e2a:	and.w	r3, r1, #63	; 0x3f
    3e2e:	add.w	r3, r2, r3, lsl #16
    3e32:	add.w	r0, r3, r0, lsl #8
    3e36:	lsls	r0, r0, #10
}
    3e38:	add	sp, #20
    3e3a:	pop	{r4, r5, pc}
    3e3c:	.word	0x00003d99

00003e40 <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    3e40:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    3e42:	mov	r2, r1
    3e44:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    3e46:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    3e48:	sub	sp, #12
    3e4a:	ldr	r5, [pc, #64]	; (3e8c <SdSpiCard::readStart(unsigned long)+0x4c>)
    3e4c:	mov	r4, r0
    3e4e:	cmp	r3, r5
    3e50:	bne.n	3e84 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    3e52:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    3e54:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    3e56:	mov.w	r1, #18
    3e5a:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    3e5c:	it	ne
    3e5e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    3e60:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3e64:	cbz	r0, 3e7e <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3e66:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3e68:	ldrb	r0, [r4, #24]
    3e6a:	strb	r3, [r4, #23]
    3e6c:	cbnz	r0, 3e72 <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    3e6e:	add	sp, #12
    3e70:	pop	{r4, r5, pc}
    3e72:	mov	r0, r4
    3e74:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3e78:	movs	r0, #0
    3e7a:	add	sp, #12
    3e7c:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    3e7e:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    3e80:	add	sp, #12
    3e82:	pop	{r4, r5, pc}
    3e84:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    3e86:	blx	r3
    3e88:	ldr	r2, [sp, #4]
    3e8a:	b.n	3e54 <SdSpiCard::readStart(unsigned long)+0x14>
    3e8c:	.word	0x00003ab9

00003e90 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    3e90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e94:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    3e96:	ldrb	r3, [r0, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    3e98:	mov	r6, r0
    3e9a:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    3e9c:	cmp	r3, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    3e9e:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    3ea0:	beq.n	3eb2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    3ea2:	ldr	r3, [r6, #0]
    3ea4:	mov	r0, r6
    3ea6:	ldr	r3, [r3, #20]
    3ea8:	blx	r3
    3eaa:	cbnz	r0, 3ee4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
      return false;
    3eac:	movs	r0, #0
    3eae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    3eb2:	ldr	r3, [r0, #16]
    3eb4:	cmp	r3, r1
    3eb6:	bne.n	3ea2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    3eb8:	cbz	r7, 3ed4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    3eba:	movs	r5, #0
    if (!readData(dst, 512)) {
    3ebc:	mov.w	r2, #512	; 0x200
    3ec0:	mov	r1, r4
    3ec2:	mov	r0, r6
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    3ec4:	adds	r5, #1
    3ec6:	add	r4, r2
    if (!readData(dst, 512)) {
    3ec8:	bl	3bd4 <SdSpiCard::readData(unsigned char*, unsigned int)>
    3ecc:	cmp	r0, #0
    3ece:	beq.n	3eac <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    3ed0:	cmp	r7, r5
    3ed2:	bne.n	3ebc <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    3ed4:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    3ed6:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    3ed8:	add	r7, r3
    3eda:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    3edc:	cbnz	r2, 3ef8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
    3ede:	movs	r0, #1
    3ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    3ee4:	mov	r1, r5
    3ee6:	mov	r0, r6
    3ee8:	bl	3e40 <SdSpiCard::readStart(unsigned long)>
    3eec:	cmp	r0, #0
    3eee:	beq.n	3eac <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    3ef0:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    3ef2:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    3ef4:	strb	r3, [r6, #20]
    3ef6:	b.n	3eb8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3ef8:	ldr	r3, [r6, #0]
    3efa:	mov	r0, r6
    3efc:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    3efe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3f02:	bx	r3

00003f04 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    3f04:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    3f06:	movs	r2, #0
    3f08:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    3f0a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    3f0c:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3f10:	cbz	r0, 3f1e <SdSpiCard::readStop()+0x1a>
    3f12:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3f14:	ldrb	r4, [r5, #24]
    3f16:	strb	r3, [r5, #23]
    3f18:	cbnz	r4, 3f32 <SdSpiCard::readStop()+0x2e>
  return true;

fail:
  spiStop();
  return false;
}
    3f1a:	mov	r0, r4
    3f1c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3f1e:	ldrb	r4, [r5, #24]
    3f20:	cbnz	r4, 3f28 <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    3f22:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    3f24:	mov	r0, r4
    3f26:	pop	{r3, r4, r5, pc}
    3f28:	mov	r0, r5
    3f2a:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3f2e:	mov	r0, r4
    3f30:	pop	{r3, r4, r5, pc}
    3f32:	movs	r4, #0
    3f34:	mov	r0, r5
    3f36:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3f3a:	mov	r0, r4
    3f3c:	pop	{r3, r4, r5, pc}
    3f3e:	nop

00003f40 <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    3f40:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    3f42:	mov	r2, r1
    3f44:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    3f46:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    3f48:	sub	sp, #12
    3f4a:	ldr	r5, [pc, #64]	; (3f8c <SdSpiCard::writeStart(unsigned long)+0x4c>)
    3f4c:	mov	r4, r0
    3f4e:	cmp	r3, r5
    3f50:	bne.n	3f84 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    3f52:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    3f54:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    3f56:	mov.w	r1, #25
    3f5a:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    3f5c:	it	ne
    3f5e:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    3f60:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3f64:	cbz	r0, 3f7e <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3f66:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3f68:	ldrb	r0, [r4, #24]
    3f6a:	strb	r3, [r4, #23]
    3f6c:	cbnz	r0, 3f72 <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    3f6e:	add	sp, #12
    3f70:	pop	{r4, r5, pc}
    3f72:	mov	r0, r4
    3f74:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3f78:	movs	r0, #0
    3f7a:	add	sp, #12
    3f7c:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    3f7e:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    3f80:	add	sp, #12
    3f82:	pop	{r4, r5, pc}
    3f84:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    3f86:	blx	r3
    3f88:	ldr	r2, [sp, #4]
    3f8a:	b.n	3f54 <SdSpiCard::writeStart(unsigned long)+0x14>
    3f8c:	.word	0x00003ab9

00003f90 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    3f90:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    3f92:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    3f94:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    3f96:	sub	sp, #20
    3f98:	ldr	r7, [pc, #164]	; (4040 <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    3f9a:	mov	r4, r0
    3f9c:	mov	r5, r1
    3f9e:	mov	r6, r2
    3fa0:	cmp	r3, r7
    3fa2:	bne.n	3ffc <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    3fa4:	mov	r2, sp
    3fa6:	movs	r1, #9
    3fa8:	bl	3d4c <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    3fac:	cbz	r0, 3fd0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    3fae:	ldrb.w	r3, [sp, #10]
    3fb2:	lsls	r2, r3, #25
    3fb4:	bpl.n	3fe0 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    3fb6:	ldrb	r3, [r4, #26]
    3fb8:	cmp	r3, #3
    3fba:	beq.n	3fc0 <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    3fbc:	lsls	r5, r5, #9
    lastSector <<= 9;
    3fbe:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    3fc0:	mov	r2, r5
    3fc2:	movs	r1, #32
    3fc4:	mov	r0, r4
    3fc6:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    3fca:	cbz	r0, 4002 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3fcc:	movs	r3, #37	; 0x25
    3fce:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3fd0:	ldrb	r0, [r4, #24]
    3fd2:	cbz	r0, 3fdc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    3fd4:	mov	r0, r4
    3fd6:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    3fda:	movs	r0, #0
}
    3fdc:	add	sp, #20
    3fde:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    3fe0:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    3fe4:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    3fe8:	adds	r2, r6, #1
    3fea:	lsls	r3, r3, #1
    3fec:	orrs	r2, r5
    3fee:	orr.w	r3, r3, r1, lsr #7
    3ff2:	tst	r3, r2
    3ff4:	beq.n	3fb6 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    3ff6:	movs	r3, #38	; 0x26
    3ff8:	strb	r3, [r4, #23]
    3ffa:	b.n	3fd0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    3ffc:	mov	r1, sp
    3ffe:	blx	r3
    4000:	b.n	3fac <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    4002:	mov	r2, r6
    4004:	movs	r1, #33	; 0x21
    4006:	mov	r0, r4
    4008:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    400c:	cmp	r0, #0
    400e:	bne.n	3fcc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    4010:	mov	r2, r0
    4012:	movs	r1, #38	; 0x26
    4014:	mov	r0, r4
    4016:	bl	3c78 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    401a:	cmp	r0, #0
    401c:	bne.n	3fcc <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    401e:	movw	r1, #10000	; 0x2710
    4022:	mov	r0, r4
    4024:	bl	3c48 <SdSpiCard::waitNotBusy(unsigned short)>
    4028:	cbnz	r0, 4030 <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    402a:	movs	r3, #39	; 0x27
    402c:	strb	r3, [r4, #23]
    402e:	b.n	3fd0 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4030:	ldrb	r5, [r4, #24]
    4032:	cmp	r5, #0
    4034:	beq.n	3fdc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    4036:	mov	r0, r4
    4038:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    403c:	mov	r0, r5
    403e:	b.n	3fdc <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    4040:	.word	0x00003d99

00004044 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    4044:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4046:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    404a:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    404c:	bl	3c48 <SdSpiCard::waitNotBusy(unsigned short)>
    4050:	mov	r6, r0
    4052:	cbnz	r0, 406c <SdSpiCard::writeStop()+0x28>
    4054:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4056:	ldrb	r4, [r5, #24]
    4058:	strb	r3, [r5, #23]
    405a:	cbnz	r4, 4060 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    405c:	mov	r0, r4
    405e:	pop	{r4, r5, r6, pc}
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    4060:	mov	r4, r6
    4062:	mov	r0, r5
    4064:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    4068:	mov	r0, r4
    406a:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    406c:	movs	r1, #253	; 0xfd
    406e:	adds	r0, r5, #4
    4070:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4074:	ldrb	r4, [r5, #24]
    4076:	cbnz	r4, 407e <SdSpiCard::writeStop()+0x3a>
    4078:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    407a:	mov	r0, r4
    407c:	pop	{r4, r5, r6, pc}
    407e:	mov	r0, r5
    4080:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    4084:	b.n	405c <SdSpiCard::writeStop()+0x18>
    4086:	nop

00004088 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    4088:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    408a:	ldrb	r3, [r0, #20]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    408c:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    408e:	cmp	r3, #1
    4090:	beq.n	409e <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    4092:	cmp	r3, #2
    4094:	beq.n	40aa <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    4096:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    4098:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    409a:	strb	r3, [r4, #20]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    409c:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    409e:	bl	3f04 <SdSpiCard::readStop()>
    40a2:	cmp	r0, #0
    40a4:	bne.n	4096 <SdSpiCard::syncDevice()+0xe>
      return false;
    40a6:	movs	r0, #0
    40a8:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    40aa:	bl	4044 <SdSpiCard::writeStop()>
    40ae:	cmp	r0, #0
    40b0:	bne.n	4096 <SdSpiCard::syncDevice()+0xe>
    40b2:	b.n	40a6 <SdSpiCard::syncDevice()+0x1e>

000040b4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    40b4:	push	{r4, r5, r6, lr}
    40b6:	adds	r4, r0, #4
    40b8:	mov	r6, r2
    40ba:	mov	r5, r0
    40bc:	mov	r0, r4
    40be:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    40c2:	mov.w	r2, #512	; 0x200
    40c6:	mov	r1, r6
    40c8:	mov	r0, r4
    40ca:	bl	5240 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    40ce:	mov	r0, r4
    40d0:	movs	r1, #255	; 0xff
    40d2:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
    40d6:	mov	r0, r4
    40d8:	movs	r1, #255	; 0xff
    40da:	bl	522c <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    40de:	mov	r0, r4
    40e0:	bl	51f4 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    40e4:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    40e8:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    40ea:	cmp	r3, #5
    40ec:	beq.n	4102 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    40ee:	movs	r3, #31
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    40f0:	ldrb	r0, [r5, #24]
    40f2:	strb	r3, [r5, #23]
    40f4:	cbnz	r0, 40f8 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    40f6:	pop	{r4, r5, r6, pc}
    40f8:	mov	r0, r5
    40fa:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    40fe:	movs	r0, #0
    4100:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    4102:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    4104:	pop	{r4, r5, r6, pc}
    4106:	nop

00004108 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    4108:	push	{r3, r4, r5, lr}
    410a:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    410c:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    4110:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4112:	bl	3c48 <SdSpiCard::waitNotBusy(unsigned short)>
    4116:	cbnz	r0, 412a <SdSpiCard::writeData(unsigned char const*)+0x22>
    4118:	movs	r3, #35	; 0x23
    411a:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    411c:	ldrb	r0, [r4, #24]
    411e:	cbz	r0, 4128 <SdSpiCard::writeData(unsigned char const*)+0x20>
    4120:	mov	r0, r4
    4122:	bl	3b70 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    4126:	movs	r0, #0
}
    4128:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    412a:	mov	r2, r5
    412c:	movs	r1, #252	; 0xfc
    412e:	mov	r0, r4
    4130:	bl	40b4 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    4134:	cmp	r0, #0
    4136:	beq.n	411c <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    4138:	pop	{r3, r4, r5, pc}
    413a:	nop

0000413c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    413c:	ldr	r3, [pc, #32]	; (4160 <sdIrs()+0x24>)
    413e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    4140:	ldr	r2, [pc, #32]	; (4164 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    4142:	ldr	r0, [pc, #36]	; (4168 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    4144:	push	{r4}
  SDHC_IRQSIGEN = 0;
    4146:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    4148:	ldr	r4, [r3, #48]	; 0x30
    414a:	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    414c:	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    414e:	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    4152:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    4154:	ldr	r2, [r3, #72]	; 0x48
    4156:	bic.w	r2, r2, #129	; 0x81
    415a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    415c:	strb	r1, [r0, #0]
}
    415e:	bx	lr
    4160:	.word	0x402c0000
    4164:	.word	0x2000386c
    4168:	.word	0x20003884

0000416c <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    416c:	ldr	r3, [pc, #12]	; (417c <isBusyCommandComplete()+0x10>)
    416e:	ldr	r0, [pc, #16]	; (4180 <isBusyCommandComplete()+0x14>)
    4170:	ldr	r3, [r3, #48]	; 0x30
    4172:	ands	r0, r3
}
    4174:	clz	r0, r0
    4178:	lsrs	r0, r0, #5
    417a:	bx	lr
    417c:	.word	0x402c0000
    4180:	.word	0x000f0001

00004184 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    4184:	ldr	r3, [pc, #8]	; (4190 <isBusyCommandInhibit()+0xc>)
    4186:	ldr	r0, [r3, #36]	; 0x24
}
    4188:	and.w	r0, r0, #1
    418c:	bx	lr
    418e:	nop
    4190:	.word	0x402c0000

00004194 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    4194:	ldr	r3, [pc, #4]	; (419c <isBusyDMA()+0x8>)
    4196:	ldrb	r0, [r3, #0]
}
    4198:	bx	lr
    419a:	nop
    419c:	.word	0x20003884

000041a0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    41a0:	ldr	r3, [pc, #12]	; (41b0 <isBusyFifoRead()+0x10>)
    41a2:	ldr	r0, [r3, #36]	; 0x24
    41a4:	eor.w	r0, r0, #2048	; 0x800
}
    41a8:	ubfx	r0, r0, #11, #1
    41ac:	bx	lr
    41ae:	nop
    41b0:	.word	0x402c0000

000041b4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    41b4:	ldr	r3, [pc, #12]	; (41c4 <isBusyFifoWrite()+0x10>)
    41b6:	ldr	r0, [r3, #36]	; 0x24
    41b8:	eor.w	r0, r0, #1024	; 0x400
}
    41bc:	ubfx	r0, r0, #10, #1
    41c0:	bx	lr
    41c2:	nop
    41c4:	.word	0x402c0000

000041c8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    41c8:	ldr	r3, [pc, #12]	; (41d8 <isBusyTransferComplete()+0x10>)
    41ca:	ldr	r0, [pc, #16]	; (41dc <isBusyTransferComplete()+0x14>)
    41cc:	ldr	r3, [r3, #48]	; 0x30
    41ce:	ands	r0, r3
}
    41d0:	clz	r0, r0
    41d4:	lsrs	r0, r0, #5
    41d6:	bx	lr
    41d8:	.word	0x402c0000
    41dc:	.word	0x117f0002

000041e0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    41e0:	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    41e4:	ldr	r3, [pc, #172]	; (4294 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    41e6:	ldr	r1, [pc, #176]	; (4298 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    41e8:	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    41ec:	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    41ee:	ldr.w	r2, [r3, #256]	; 0x100
    41f2:	ldr	r3, [pc, #168]	; (429c <setSdclk(unsigned long)+0xbc>)
    41f4:	ubfx	r1, r1, #11, #3
    41f8:	and.w	r2, r2, #63	; 0x3f
    41fc:	adds	r1, #1
    41fe:	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    4202:	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    4204:	lsrs	r3, r3, #2
    4206:	ldr	r5, [pc, #152]	; (42a0 <setSdclk(unsigned long)+0xc0>)
    4208:	udiv	r5, r5, r3
    420c:	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    4210:	cmp.w	r0, r5, lsr #4
    4214:	bcs.n	4288 <setSdclk(unsigned long)+0xa8>
    4216:	movs	r2, #1
    4218:	b.n	421e <setSdclk(unsigned long)+0x3e>
    421a:	cmp	r2, #255	; 0xff
    421c:	bhi.n	422a <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    421e:	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    4220:	lsls	r3, r2, #4
    4222:	udiv	r3, r5, r3
    4226:	cmp	r0, r3
    4228:	bcc.n	421a <setSdclk(unsigned long)+0x3a>
    422a:	lsrs	r1, r2, #1
    422c:	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    422e:	udiv	r3, r5, r2
    4232:	cmp	r0, r3
    4234:	bcs.n	428e <setSdclk(unsigned long)+0xae>
    4236:	lsls	r4, r2, #1
    4238:	movs	r1, #1
    423a:	b.n	423e <setSdclk(unsigned long)+0x5e>
    423c:	mov	r4, r3
    dvs++;
    423e:	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    4240:	udiv	r3, r5, r4
    4244:	cmp	r0, r3
    4246:	add.w	r3, r2, r4
    424a:	bcs.n	4284 <setSdclk(unsigned long)+0xa4>
    424c:	cmp	r6, #16
    424e:	mov	r1, r6
    4250:	bne.n	423c <setSdclk(unsigned long)+0x5c>
    4252:	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    4254:	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    4258:	ldr	r6, [pc, #72]	; (42a4 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    425a:	ldr	r1, [pc, #76]	; (42a8 <setSdclk(unsigned long)+0xc8>)
    425c:	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    4260:	ldr	r0, [pc, #72]	; (42ac <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    4262:	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    4264:	udiv	r5, r5, r4
    4268:	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    426a:	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    426c:	ands	r0, r1
    426e:	orr.w	r0, r0, #917504	; 0xe0000
    4272:	orr.w	r1, r0, r7
    4276:	orrs	r1, r3
    4278:	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    427a:	ldr	r3, [r2, #36]	; 0x24
    427c:	lsls	r3, r3, #28
    427e:	bpl.n	427a <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    4280:	pop	{r4, r5, r6, r7}
    4282:	bx	lr
    4284:	lsls	r3, r1, #4
    4286:	b.n	4254 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    4288:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    428a:	movs	r2, #1
    428c:	b.n	422e <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    428e:	mov	r4, r2
    4290:	movs	r3, #0
    4292:	b.n	4254 <setSdclk(unsigned long)+0x74>
    4294:	.word	0x400d8000
    4298:	.word	0x400fc000
    429c:	.word	0xaaaaaaab
    42a0:	.word	0x5e69ec00
    42a4:	.word	0x402c0000
    42a8:	.word	0x20003888
    42ac:	.word	0xfff0000f

000042b0 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    42b0:	ldr	r3, [pc, #4]	; (42b8 <SdioCard::errorCode() const+0x8>)
}
    42b2:	ldrb	r0, [r3, #0]
    42b4:	bx	lr
    42b6:	nop
    42b8:	.word	0x200008bc

000042bc <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    42bc:	ldr	r3, [pc, #4]	; (42c4 <SdioCard::errorData() const+0x8>)
    42be:	ldr	r0, [r3, #0]
}
    42c0:	bx	lr
    42c2:	nop
    42c4:	.word	0x2000386c

000042c8 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    42c8:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    42ca:	ldr	r4, [pc, #20]	; (42e0 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    42cc:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    42ce:	ldmia	r4!, {r0, r1, r2, r3}
    42d0:	str	r0, [r5, #0]
  return true;
}
    42d2:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    42d4:	str	r1, [r5, #4]
    42d6:	str	r2, [r5, #8]
    42d8:	str	r3, [r5, #12]
  return true;
}
    42da:	pop	{r4, r5}
    42dc:	bx	lr
    42de:	nop
    42e0:	.word	0x2000384c

000042e4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    42e4:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    42e6:	ldr	r4, [pc, #20]	; (42fc <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    42e8:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    42ea:	ldmia	r4!, {r0, r1, r2, r3}
    42ec:	str	r0, [r5, #0]
  return true;
}
    42ee:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    42f0:	str	r1, [r5, #4]
    42f2:	str	r2, [r5, #8]
    42f4:	str	r3, [r5, #12]
  return true;
}
    42f6:	pop	{r4, r5}
    42f8:	bx	lr
    42fa:	nop
    42fc:	.word	0x20003874

00004300 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    4300:	ldr	r3, [pc, #8]	; (430c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    4302:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    4304:	ldr	r3, [r3, #0]
    4306:	str	r3, [r1, #0]
  return true;
}
    4308:	bx	lr
    430a:	nop
    430c:	.word	0x20003864

00004310 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    4310:	bx	lr
    4312:	nop

00004314 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    4314:	push	{r3, r4, r5, r6, r7, lr}
    4316:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    4318:	ldr	r7, [pc, #28]	; (4338 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    431a:	bl	95a4 <micros>
    431e:	mov	r6, r0
    4320:	b.n	432c <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    4322:	bl	95a4 <micros>
    4326:	subs	r0, r0, r6
    4328:	cmp	r0, r7
    432a:	bhi.n	4334 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    432c:	blx	r5
    432e:	mov	r4, r0
    4330:	cmp	r0, #0
    4332:	bne.n	4322 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    4334:	mov	r0, r4
    4336:	pop	{r3, r4, r5, r6, r7, pc}
    4338:	.word	0x000f4240

0000433c <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    433c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    4340:	ldr.w	r8, [pc, #64]	; 4384 <yieldTimeout(bool (*)())+0x48>
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    4344:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    4346:	ldr	r7, [pc, #56]	; (4380 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    4348:	str.w	r0, [r8]
  uint32_t m = micros();
    434c:	bl	95a4 <micros>
    4350:	mov	r6, r0
    4352:	b.n	4362 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    4354:	bl	95a4 <micros>
    4358:	subs	r0, r0, r6
    435a:	cmp	r0, r7
    435c:	bhi.n	4374 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    435e:	bl	9a74 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    4362:	blx	r5
    4364:	mov	r4, r0
    4366:	cmp	r0, #0
    4368:	bne.n	4354 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    436a:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    436e:	mov	r0, r4
    4370:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    4374:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    4376:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    4378:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    437c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4380:	.word	0x000f4240
    4384:	.word	0x2000385c

00004388 <SdioCard::~SdioCard()>:
    4388:	push	{r4, lr}
    438a:	mov	r4, r0
    438c:	movs	r1, #12
    438e:	bl	9d80 <operator delete(void*, unsigned int)>
    4392:	mov	r0, r4
    4394:	pop	{r4, pc}
    4396:	nop

00004398 <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    4398:	ldr	r3, [pc, #60]	; (43d8 <enableGPIO(bool) [clone .part.0]+0x40>)
    439a:	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    439c:	movw	r1, #28808	; 0x7088
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    43a0:	movw	r0, #4232	; 0x1088
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    43a4:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    43a8:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    43ac:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    43b0:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    43b4:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    43b8:	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    43bc:	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    43c0:	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    43c4:	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    43c8:	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    43cc:	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    43d0:	str.w	r1, [r3, #952]	; 0x3b8
    43d4:	bx	lr
    43d6:	nop
    43d8:	.word	0x401f8000

000043dc <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    43dc:	ldr	r3, [pc, #20]	; (43f4 <SdioCard::type() const+0x18>)
    43de:	ldrb	r3, [r3, #0]
    43e0:	cbz	r3, 43f0 <SdioCard::type() const+0x14>
    43e2:	ldr	r3, [pc, #20]	; (43f8 <SdioCard::type() const+0x1c>)
    43e4:	ldrb	r3, [r3, #0]
    43e6:	cmp	r3, #0
    43e8:	ite	ne
    43ea:	movne	r0, #3
    43ec:	moveq	r0, #2
    43ee:	bx	lr
    43f0:	movs	r0, #1
}
    43f2:	bx	lr
    43f4:	.word	0x20003848
    43f8:	.word	0x20003860

000043fc <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    43fc:	push	{r3, r4, r5, lr}
    43fe:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    4400:	ldr	r0, [pc, #80]	; (4454 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    4402:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    4404:	bl	4314 <waitTimeout(bool (*)())>
    4408:	cbnz	r0, 444e <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    440a:	ldr	r3, [pc, #76]	; (4458 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    440c:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    440e:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    4410:	bpl.n	4422 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    4412:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    4414:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    4416:	bic.w	r1, r1, #255	; 0xff
    441a:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    441c:	ldr	r1, [r3, #72]	; 0x48
    441e:	orrs	r2, r1
    4420:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    4422:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    4426:	ldr	r5, [pc, #48]	; (4458 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    4428:	ldr	r0, [pc, #48]	; (445c <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    442a:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    442c:	bl	4314 <waitTimeout(bool (*)())>
    4430:	cbnz	r0, 444e <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    4432:	ldr	r2, [r5, #48]	; 0x30
    4434:	ldr	r3, [pc, #40]	; (4460 <cardCommand(unsigned long, unsigned long)+0x64>)
    4436:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4438:	ldr	r2, [r3, #0]
    443a:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    443c:	ldr	r2, [r3, #0]
    443e:	lsls	r2, r2, #31
    4440:	bpl.n	444e <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    4442:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    4444:	tst.w	r3, #983040	; 0xf0000
    4448:	bne.n	444e <cardCommand(unsigned long, unsigned long)+0x52>
    444a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    444c:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    444e:	movs	r0, #0
    4450:	pop	{r3, r4, r5, pc}
    4452:	nop
    4454:	.word	0x00004185
    4458:	.word	0x402c0000
    445c:	.word	0x0000416d
    4460:	.word	0x2000386c

00004464 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    4464:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    4466:	ldr	r3, [pc, #16]	; (4478 <SdioCard::status()+0x14>)
    4468:	ldr	r0, [pc, #16]	; (447c <SdioCard::status()+0x18>)
    446a:	ldr	r1, [r3, #0]
    446c:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4470:	cbz	r0, 4476 <SdioCard::status()+0x12>
    4472:	ldr	r3, [pc, #12]	; (4480 <SdioCard::status()+0x1c>)
    4474:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    4476:	pop	{r3, pc}
    4478:	.word	0x20003868
    447c:	.word	0x0d1a0000
    4480:	.word	0x402c0000

00004484 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    4484:	ldr	r3, [pc, #80]	; (44d8 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    4486:	push	{r4, r5, r6, lr}
    4488:	mov	r6, r1
    448a:	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    448c:	ldr	r1, [r3, #0]
    448e:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4492:	cbz	r0, 44d2 <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    4494:	ldr	r1, [pc, #68]	; (44dc <readReg16(unsigned long, void*)+0x58>)
    4496:	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    449a:	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    449c:	ldr	r2, [r1, #16]
    449e:	str	r2, [sp, #0]
    44a0:	ldr	r4, [r1, #20]
    44a2:	str	r4, [sp, #4]
    44a4:	ldr	r4, [r1, #24]
    44a6:	str	r4, [sp, #8]
    44a8:	ldr	r1, [r1, #28]
    44aa:	str	r1, [sp, #12]
    44ac:	b.n	44b2 <readReg16(unsigned long, void*)+0x2e>
    44ae:	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    44b2:	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    44b6:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    44b8:	lsls	r1, r1, #3
    44ba:	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    44be:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    44c0:	lsr.w	r2, r2, r1
    44c4:	add	r1, sp, #16
    44c6:	strb.w	r2, [r5, #-1]!
    44ca:	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    44cc:	bne.n	44ae <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    44ce:	movs	r3, #0
    44d0:	strb	r3, [r6, #15]
  return true;
}
    44d2:	add	sp, #16
    44d4:	pop	{r4, r5, r6, pc}
    44d6:	nop
    44d8:	.word	0x20003868
    44dc:	.word	0x402c0000

000044e0 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    44e0:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    44e2:	ldr	r3, [pc, #28]	; (4500 <isBusyCMD13()+0x20>)
    44e4:	ldr	r0, [pc, #28]	; (4504 <isBusyCMD13()+0x24>)
    44e6:	ldr	r1, [r3, #0]
    44e8:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    44ec:	cbz	r0, 44fc <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    44ee:	ldr	r3, [pc, #24]	; (4508 <isBusyCMD13()+0x28>)
    44f0:	ldr	r0, [r3, #16]
    44f2:	eor.w	r0, r0, #256	; 0x100
    44f6:	ubfx	r0, r0, #8, #1
    44fa:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    44fc:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    44fe:	pop	{r3, pc}
    4500:	.word	0x20003868
    4504:	.word	0x0d1a0000
    4508:	.word	0x402c0000

0000450c <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    450c:	ldr	r3, [pc, #16]	; (4520 <SdioCard::isBusy()+0x14>)
    450e:	ldr	r3, [r3, #0]
    4510:	cbz	r3, 4514 <SdioCard::isBusy()+0x8>
    4512:	bx	r3
    4514:	ldr	r3, [pc, #12]	; (4524 <SdioCard::isBusy()+0x18>)
    4516:	ldrb	r0, [r3, #0]
    4518:	cbnz	r0, 451c <SdioCard::isBusy()+0x10>
}
    451a:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    451c:	b.w	44e0 <isBusyCMD13()>
    4520:	.word	0x2000385c
    4524:	.word	0x20003870

00004528 <waitDmaStatus() [clone .part.7]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    4528:	ldr	r3, [pc, #20]	; (4540 <waitDmaStatus() [clone .part.7]+0x18>)
    452a:	ldr	r0, [r3, #0]
    452c:	ands.w	r0, r0, #2
    4530:	beq.n	453e <waitDmaStatus() [clone .part.7]+0x16>
    4532:	ldr	r3, [r3, #0]
    4534:	ldr	r0, [pc, #12]	; (4544 <waitDmaStatus() [clone .part.7]+0x1c>)
    4536:	ands	r0, r3
    4538:	clz	r0, r0
    453c:	lsrs	r0, r0, #5
}
    453e:	bx	lr
    4540:	.word	0x2000386c
    4544:	.word	0x117f0000

00004548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    4548:	push	{r3, r4, r5, r6, r7, lr}
    454a:	ands.w	r4, r2, #3
    454e:	it	ne
    4550:	movne	r4, #1
    4552:	cmp	r3, #0
    4554:	it	eq
    4556:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    455a:	cbz	r4, 456e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    455c:	ldr	r1, [pc, #120]	; (45d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    455e:	movs	r0, #36	; 0x24
  m_errorLine = line;
    4560:	ldr	r3, [pc, #120]	; (45dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    4562:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4566:	strb	r0, [r1, #0]
  m_errorLine = line;
    4568:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    456a:	movs	r0, #0
    456c:	pop	{r3, r4, r5, r6, r7, pc}
    456e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    4570:	ldr	r0, [pc, #108]	; (45e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    4572:	mov	r5, r3
    4574:	mov	r7, r1
    4576:	mov	r4, r2
    4578:	bl	433c <yieldTimeout(bool (*)())>
    457c:	cbnz	r0, 45c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    457e:	lsls	r3, r5, #16
    4580:	ldr	r2, [pc, #96]	; (45e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    4582:	ldr	r5, [pc, #100]	; (45e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    4584:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    4588:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    458a:	ldr	r1, [pc, #96]	; (45ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    458c:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    4590:	ldr	r3, [pc, #92]	; (45f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    4592:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    4596:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    4598:	ldr	r5, [pc, #88]	; (45f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    459a:	ldr	r1, [pc, #92]	; (45f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    459c:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    459e:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    45a0:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    45a2:	ldrb	r3, [r1, #0]
    45a4:	cbnz	r3, 45d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    45a6:	lsls	r1, r7, #9
    45a8:	mov	r0, r6
    45aa:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    45ae:	cmp	r0, #0
    45b0:	beq.n	456a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    45b2:	ldr	r0, [pc, #72]	; (45fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    45b4:	bl	433c <yieldTimeout(bool (*)())>
    45b8:	cmp	r0, #0
    45ba:	bne.n	456a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    45bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    45c0:	b.w	4528 <waitDmaStatus() [clone .part.7]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    45c4:	ldr	r1, [pc, #16]	; (45d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    45c6:	movs	r0, #10
  m_errorLine = line;
    45c8:	ldr	r3, [pc, #16]	; (45dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    45ca:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    45ce:	strb	r0, [r1, #0]
  m_errorLine = line;
    45d0:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    45d2:	b.n	456a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    45d4:	mov	r1, r7
    45d6:	b.n	45a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    45d8:	.word	0x200008bc
    45dc:	.word	0x2000388c
    45e0:	.word	0x000044e1
    45e4:	.word	0x1fff0000
    45e8:	.word	0x20003884
    45ec:	.word	0x2000386c
    45f0:	.word	0x402c0000
    45f4:	.word	0x117f0002
    45f8:	.word	0x20003860
    45fc:	.word	0x00004195

00004600 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    4600:	ldr	r1, [pc, #100]	; (4668 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    4602:	push	{r4, r5, r6}
    4604:	ldrb	r3, [r1, #0]
    4606:	ands.w	r3, r3, #192	; 0xc0
    460a:	beq.n	4630 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    460c:	cmp	r3, #64	; 0x40
    460e:	beq.n	4616 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    4610:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    4612:	pop	{r4, r5, r6}
    4614:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4616:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    4618:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    461a:	adds	r2, r3, #1
    461c:	ldrb	r0, [r1, #8]
    461e:	and.w	r3, r4, #63	; 0x3f
    4622:	add.w	r3, r2, r3, lsl #16
    4626:	add.w	r0, r3, r0, lsl #8
    462a:	pop	{r4, r5, r6}
    462c:	lsls	r0, r0, #10
    462e:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    4630:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    4632:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4634:	ldrb	r2, [r1, #7]
    4636:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    463a:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    463c:	and.w	r3, r3, #3
    4640:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    4642:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4644:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4646:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4648:	orr.w	r0, r5, r0, lsr #7
    464c:	and.w	r1, r4, #15
    4650:	orr.w	r3, r2, r3, lsl #10
    4654:	add	r0, r1
    4656:	orr.w	r3, r3, r6, lsr #6
    465a:	subs	r0, #7
    465c:	adds	r3, #1
    465e:	pop	{r4, r5, r6}
    4660:	lsl.w	r0, r3, r0
    4664:	bx	lr
    4666:	nop
    4668:	.word	0x20003874

0000466c <SdioCard::erase(unsigned long, unsigned long)>:
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    466c:	ldr	r0, [pc, #176]	; (4720 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    466e:	push	{r3, r4, r5, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    4670:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4672:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    4674:	and.w	r2, r3, #64	; 0x40
    4678:	cbnz	r2, 4692 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    467a:	and.w	r3, r3, #63	; 0x3f
    467e:	and.w	r4, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    4682:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    4684:	adds	r0, r5, #1
    4686:	lsls	r3, r3, #1
    4688:	orrs	r0, r1
    468a:	orr.w	r3, r3, r2, lsr #7
    468e:	tst	r3, r0
    4690:	bne.n	46d6 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    4692:	ldr	r3, [pc, #144]	; (4724 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    4694:	ldrb	r3, [r3, #0]
    4696:	cbnz	r3, 469c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    4698:	lsls	r1, r1, #9
    lastSector <<= 9;
    469a:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    469c:	ldr	r0, [pc, #136]	; (4728 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    469e:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    46a2:	mov	r4, r0
    46a4:	cbnz	r0, 46b8 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46a6:	ldr	r1, [pc, #132]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46a8:	movs	r0, #15
  m_errorLine = line;
    46aa:	ldr	r3, [pc, #132]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46ac:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46b0:	strb	r0, [r1, #0]
  m_errorLine = line;
    46b2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46b4:	mov	r0, r4
    46b6:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    46b8:	mov	r1, r5
    46ba:	ldr	r0, [pc, #120]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    46bc:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    46c0:	mov	r4, r0
    46c2:	cbnz	r0, 46e8 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46c4:	ldr	r1, [pc, #100]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46c6:	movs	r0, #16
  m_errorLine = line;
    46c8:	ldr	r3, [pc, #100]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46ca:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46ce:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46d0:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    46d2:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46d4:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46d6:	ldr	r1, [pc, #84]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46d8:	movs	r0, #38	; 0x26
  m_errorLine = line;
    46da:	ldr	r3, [pc, #84]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46dc:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46e0:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46e2:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    46e4:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46e6:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    46e8:	movs	r1, #0
    46ea:	ldr	r0, [pc, #76]	; (4738 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    46ec:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    46f0:	mov	r4, r0
    46f2:	cbnz	r0, 4704 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46f4:	ldr	r1, [pc, #52]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46f6:	movs	r0, #17
  m_errorLine = line;
    46f8:	ldr	r3, [pc, #52]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46fa:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46fe:	strb	r0, [r1, #0]
  m_errorLine = line;
    4700:	str	r2, [r3, #0]
    4702:	b.n	46b4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    4704:	ldr	r0, [pc, #52]	; (473c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    4706:	bl	4314 <waitTimeout(bool (*)())>
    470a:	cmp	r0, #0
    470c:	beq.n	46b4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    470e:	ldr	r1, [pc, #28]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    4710:	movs	r0, #39	; 0x27
  m_errorLine = line;
    4712:	ldr	r3, [pc, #28]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    4714:	movw	r2, #701	; 0x2bd
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    4718:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    471a:	strb	r0, [r1, #0]
  m_errorLine = line;
    471c:	str	r2, [r3, #0]
    471e:	b.n	46b4 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    4720:	.word	0x20003874
    4724:	.word	0x20003860
    4728:	.word	0x201a0000
    472c:	.word	0x200008bc
    4730:	.word	0x2000388c
    4734:	.word	0x211a0000
    4738:	.word	0x261b0000
    473c:	.word	0x000044e1

00004740 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    4740:	push	{r4, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    4742:	movs	r1, #0
    4744:	ldr	r0, [pc, #80]	; (4798 <transferStop()+0x58>)
    4746:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    474a:	mov	r4, r0
    474c:	cbnz	r0, 4760 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    474e:	ldr	r1, [pc, #76]	; (479c <transferStop()+0x5c>)
    4750:	movs	r0, #9
  m_errorLine = line;
    4752:	ldr	r3, [pc, #76]	; (47a0 <transferStop()+0x60>)
    4754:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4758:	strb	r0, [r1, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    475a:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    475c:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    475e:	pop	{r4, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    4760:	ldr	r0, [pc, #64]	; (47a4 <transferStop()+0x64>)
    4762:	bl	433c <yieldTimeout(bool (*)())>
    4766:	cbnz	r0, 4782 <transferStop()+0x42>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    4768:	ldr	r3, [pc, #60]	; (47a8 <transferStop()+0x68>)
    476a:	ldr	r0, [r3, #52]	; 0x34
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    476c:	ldr	r2, [r3, #40]	; 0x28
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    476e:	ldr	r1, [r3, #44]	; 0x2c
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    4770:	bic.w	r2, r2, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    4774:	orr.w	r1, r1, #67108864	; 0x4000000
    4778:	str	r1, [r3, #44]	; 0x2c
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    477a:	str	r0, [r3, #52]	; 0x34
  SDHC_PROCTL = proctl;
  return true;
}
    477c:	mov	r0, r4
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
    477e:	str	r2, [r3, #40]	; 0x28
  return true;
}
    4780:	pop	{r4, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4782:	ldr	r1, [pc, #24]	; (479c <transferStop()+0x5c>)
    4784:	movs	r0, #10
  m_errorLine = line;
    4786:	ldr	r3, [pc, #24]	; (47a0 <transferStop()+0x60>)
    4788:	movw	r2, #543	; 0x21f
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    478c:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    478e:	strb	r0, [r1, #0]
  m_errorLine = line;
    4790:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    4792:	mov	r0, r4
    4794:	pop	{r4, pc}
    4796:	nop
    4798:	.word	0x0cdb0000
    479c:	.word	0x200008bc
    47a0:	.word	0x2000388c
    47a4:	.word	0x000044e1
    47a8:	.word	0x402c0000

000047ac <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    47ac:	b.w	4740 <transferStop()>

000047b0 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    47b0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    47b2:	ldr	r3, [pc, #156]	; (4850 <SdioCard::writeData(unsigned char const*)+0xa0>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    47b4:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    47b6:	ldr	r2, [r3, #36]	; 0x24
    47b8:	lsls	r0, r2, #23
    47ba:	bmi.n	47cc <SdioCard::writeData(unsigned char const*)+0x1c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    47bc:	ldr	r2, [r3, #40]	; 0x28
    47be:	bic.w	r2, r2, #65536	; 0x10000
    47c2:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    47c4:	ldr	r2, [r3, #40]	; 0x28
    47c6:	orr.w	r2, r2, #131072	; 0x20000
    47ca:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    47cc:	ldr	r4, [pc, #128]	; (4850 <SdioCard::writeData(unsigned char const*)+0xa0>)
  if (waitTimeout(isBusyFifoWrite)) {
    47ce:	ldr	r0, [pc, #132]	; (4854 <SdioCard::writeData(unsigned char const*)+0xa4>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    47d0:	ldr	r3, [r4, #40]	; 0x28
    47d2:	orr.w	r3, r3, #65536	; 0x10000
    47d6:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    47d8:	bl	4314 <waitTimeout(bool (*)())>
    47dc:	cmp	r0, #0
    47de:	bne.n	483c <SdioCard::writeData(unsigned char const*)+0x8c>
    47e0:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    47e2:	mov	r0, r4
    47e4:	add.w	r5, r5, #508	; 0x1fc
    47e8:	ldr	r2, [r0, #36]	; 0x24
    47ea:	lsls	r1, r2, #21
    47ec:	bpl.n	47e8 <SdioCard::writeData(unsigned char const*)+0x38>
    47ee:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    47f2:	ldr.w	r2, [r3, #4]!
    47f6:	ldr	r4, [pc, #88]	; (4850 <SdioCard::writeData(unsigned char const*)+0xa0>)
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    47f8:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    47fa:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    47fc:	bne.n	47f2 <SdioCard::writeData(unsigned char const*)+0x42>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    47fe:	cmp	r5, r1
    4800:	mov	r3, r1
    4802:	bne.n	47e8 <SdioCard::writeData(unsigned char const*)+0x38>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    4804:	ldr	r0, [pc, #80]	; (4858 <SdioCard::writeData(unsigned char const*)+0xa8>)
    4806:	bl	4314 <waitTimeout(bool (*)())>
    480a:	cbnz	r0, 482a <SdioCard::writeData(unsigned char const*)+0x7a>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    480c:	ldr	r2, [r4, #48]	; 0x30
    480e:	ldr	r3, [pc, #76]	; (485c <SdioCard::writeData(unsigned char const*)+0xac>)
    4810:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4812:	ldr	r2, [r3, #0]
    4814:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    4816:	ldr	r2, [r3, #0]
    4818:	lsls	r2, r2, #30
    481a:	bpl.n	484c <SdioCard::writeData(unsigned char const*)+0x9c>
    481c:	ldr	r3, [r3, #0]
    481e:	ldr	r0, [pc, #64]	; (4860 <SdioCard::writeData(unsigned char const*)+0xb0>)
    4820:	ands	r0, r3
    4822:	clz	r0, r0
    4826:	lsrs	r0, r0, #5
    4828:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    482a:	ldr	r1, [pc, #56]	; (4864 <SdioCard::writeData(unsigned char const*)+0xb4>)
    482c:	movs	r0, #35	; 0x23
  m_errorLine = line;
    482e:	ldr	r3, [pc, #56]	; (4868 <SdioCard::writeData(unsigned char const*)+0xb8>)
    4830:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4834:	strb	r0, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    4836:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4838:	str	r2, [r3, #0]
    483a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    483c:	ldr	r1, [pc, #36]	; (4864 <SdioCard::writeData(unsigned char const*)+0xb4>)
    483e:	movs	r4, #32
  m_errorLine = line;
    4840:	ldr	r3, [pc, #36]	; (4868 <SdioCard::writeData(unsigned char const*)+0xb8>)
    4842:	movw	r2, #894	; 0x37e
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    4846:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4848:	strb	r4, [r1, #0]
  m_errorLine = line;
    484a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    484c:	pop	{r3, r4, r5, pc}
    484e:	nop
    4850:	.word	0x402c0000
    4854:	.word	0x000041b5
    4858:	.word	0x000041c9
    485c:	.word	0x2000386c
    4860:	.word	0x117f0000
    4864:	.word	0x200008bc
    4868:	.word	0x2000388c

0000486c <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    486c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    486e:	ldr	r0, [pc, #80]	; (48c0 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    4870:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    4872:	bl	433c <yieldTimeout(bool (*)())>
    4876:	cbnz	r0, 48ac <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    4878:	ldr	r3, [pc, #72]	; (48c4 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    487a:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    487e:	ldr	r1, [pc, #72]	; (48c8 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    4880:	ldr	r2, [r3, #40]	; 0x28
    4882:	bic.w	r2, r2, #65536	; 0x10000
    4886:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    4888:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    488a:	ldrb	r3, [r1, #0]
    488c:	cbnz	r3, 48a8 <SdioCard::writeStart(unsigned long)+0x3c>
    488e:	lsls	r1, r4, #9
    4890:	ldr	r0, [pc, #56]	; (48cc <SdioCard::writeStart(unsigned long)+0x60>)
    4892:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4896:	cbnz	r0, 48a6 <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4898:	ldr	r1, [pc, #52]	; (48d0 <SdioCard::writeStart(unsigned long)+0x64>)
    489a:	movs	r4, #14
  m_errorLine = line;
    489c:	ldr	r3, [pc, #52]	; (48d4 <SdioCard::writeStart(unsigned long)+0x68>)
    489e:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48a2:	strb	r4, [r1, #0]
  m_errorLine = line;
    48a4:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    48a6:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    48a8:	mov	r1, r4
    48aa:	b.n	4890 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48ac:	ldr	r1, [pc, #32]	; (48d0 <SdioCard::writeStart(unsigned long)+0x64>)
    48ae:	movs	r0, #10
  m_errorLine = line;
    48b0:	ldr	r3, [pc, #32]	; (48d4 <SdioCard::writeStart(unsigned long)+0x68>)
    48b2:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48b6:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    48b8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    48ba:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    48bc:	pop	{r4, pc}
    48be:	nop
    48c0:	.word	0x000044e1
    48c4:	.word	0x402c0000
    48c8:	.word	0x20003860
    48cc:	.word	0x193a0020
    48d0:	.word	0x200008bc
    48d4:	.word	0x2000388c

000048d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48d8:	push	{r3, r4, r5, r6, r7, lr}
    48da:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    48dc:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48de:	mov	r4, r1
    48e0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    48e2:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48e4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    48e6:	bmi.n	4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    48e8:	cbz	r3, 490c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    48ea:	add	r7, r1
    48ec:	b.n	48f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    48ee:	cmp	r4, r7
    48f0:	beq.n	490c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    48f2:	ldr	r3, [r6, #0]
    48f4:	mov	r2, r5
    48f6:	mov	r1, r4
    48f8:	mov	r0, r6
    48fa:	ldr	r3, [r3, #8]
    48fc:	add.w	r5, r5, #512	; 0x200
    4900:	adds	r4, #1
    4902:	blx	r3
    4904:	cmp	r0, #0
    4906:	bne.n	48ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    4908:	movs	r0, #0
    490a:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    490c:	movs	r0, #1
    490e:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    4910:	lsls	r0, r2, #30
    4912:	beq.n	493a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    4914:	cmp	r3, #0
    4916:	beq.n	490c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    4918:	add	r7, r1
    491a:	b.n	4920 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    491c:	cmp	r7, r4
    491e:	beq.n	490c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    4920:	ldr	r3, [r6, #0]
    4922:	mov	r2, r5
    4924:	mov	r1, r4
    4926:	mov	r0, r6
    4928:	ldr	r3, [r3, #8]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    492a:	add.w	r5, r5, #512	; 0x200
    492e:	adds	r4, #1
        if (!readSector(sector, dst)) {
    4930:	blx	r3
    4932:	cmp	r0, #0
    4934:	bne.n	491c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    4936:	movs	r0, #0
    4938:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    493a:	ldr	r0, [pc, #24]	; (4954 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    493c:	bl	4548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4940:	cmp	r0, #0
    4942:	bne.n	490c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4944:	ldr	r1, [pc, #16]	; (4958 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    4946:	movs	r4, #12
  m_errorLine = line;
    4948:	ldr	r3, [pc, #16]	; (495c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    494a:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    494e:	strb	r4, [r1, #0]
  m_errorLine = line;
    4950:	str	r2, [r3, #0]
    4952:	pop	{r3, r4, r5, r6, r7, pc}
    4954:	.word	0x123a0037
    4958:	.word	0x200008bc
    495c:	.word	0x2000388c

00004960 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    4960:	push	{r3, r4, r5, r6, r7, lr}
    4962:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    4964:	ldrb	r0, [r0, #8]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    4966:	mov	r4, r1
    4968:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    496a:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    496c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    496e:	bmi.n	4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    4970:	cbz	r3, 4994 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    4972:	add	r7, r1
    4974:	b.n	497a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    4976:	cmp	r4, r7
    4978:	beq.n	4994 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    497a:	ldr	r3, [r6, #0]
    497c:	mov	r2, r5
    497e:	mov	r1, r4
    4980:	mov	r0, r6
    4982:	ldr	r3, [r3, #24]
    4984:	add.w	r5, r5, #512	; 0x200
    4988:	adds	r4, #1
    498a:	blx	r3
    498c:	cmp	r0, #0
    498e:	bne.n	4976 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    4990:	movs	r0, #0
    4992:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    4994:	movs	r0, #1
    4996:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    4998:	lsls	r0, r2, #30
    499a:	beq.n	49c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    499c:	cmp	r3, #0
    499e:	beq.n	4994 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    49a0:	add	r7, r1
    49a2:	b.n	49a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    49a4:	cmp	r7, r4
    49a6:	beq.n	4994 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    49a8:	ldr	r3, [r6, #0]
    49aa:	mov	r2, r5
    49ac:	mov	r1, r4
    49ae:	mov	r0, r6
    49b0:	ldr	r3, [r3, #24]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    49b2:	add.w	r5, r5, #512	; 0x200
    49b6:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    49b8:	blx	r3
    49ba:	cmp	r0, #0
    49bc:	bne.n	49a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    49be:	movs	r0, #0
    49c0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    49c2:	ldr	r0, [pc, #24]	; (49dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    49c4:	bl	4548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    49c8:	cmp	r0, #0
    49ca:	bne.n	4994 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    49cc:	ldr	r1, [pc, #16]	; (49e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    49ce:	movs	r4, #14
  m_errorLine = line;
    49d0:	ldr	r3, [pc, #16]	; (49e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    49d2:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    49d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    49d8:	str	r2, [r3, #0]
    49da:	pop	{r3, r4, r5, r6, r7, pc}
    49dc:	.word	0x193a0027
    49e0:	.word	0x200008bc
    49e4:	.word	0x2000388c

000049e8 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    49e8:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    49ea:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    49ec:	mov	r5, r2
    49ee:	sub.w	sp, sp, #512	; 0x200
    49f2:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    49f4:	lsls	r2, r3, #31
    49f6:	bpl.n	4a2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    49f8:	lsls	r3, r5, #30
    49fa:	beq.n	4a0a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    49fc:	mov	r1, r5
    49fe:	mov.w	r2, #512	; 0x200
    4a02:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    4a04:	mov	r5, sp
      memcpy(aligned, src, 512);
    4a06:	bl	7fc4 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    4a0a:	mov	r2, r5
    4a0c:	mov	r1, r6
    4a0e:	movs	r3, #1
    4a10:	ldr	r0, [pc, #104]	; (4a7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    4a12:	bl	4548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4a16:	cbnz	r0, 4a26 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4a18:	ldr	r1, [pc, #100]	; (4a80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    4a1a:	movs	r4, #13
  m_errorLine = line;
    4a1c:	ldr	r3, [pc, #100]	; (4a84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    4a1e:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4a22:	strb	r4, [r1, #0]
  m_errorLine = line;
    4a24:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a26:	add.w	sp, sp, #512	; 0x200
    4a2a:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    4a2c:	ldrb	r3, [r0, #9]
    4a2e:	mov	r4, r0
    4a30:	cmp	r3, #2
    4a32:	beq.n	4a46 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    4a34:	ldr	r3, [r4, #0]
    4a36:	mov	r0, r4
    4a38:	ldr	r3, [r3, #20]
    4a3a:	blx	r3
    4a3c:	cbnz	r0, 4a66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
        return false;
    4a3e:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a40:	add.w	sp, sp, #512	; 0x200
    4a44:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    4a46:	ldr	r3, [r0, #4]
    4a48:	cmp	r1, r3
    4a4a:	bne.n	4a34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    4a4c:	ldr	r3, [r4, #0]
    4a4e:	mov	r1, r5
    4a50:	mov	r0, r4
    4a52:	ldr	r3, [r3, #68]	; 0x44
    4a54:	blx	r3
    4a56:	cmp	r0, #0
    4a58:	beq.n	4a3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    4a5a:	ldr	r3, [r4, #4]
    4a5c:	adds	r3, #1
    4a5e:	str	r3, [r4, #4]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a60:	add.w	sp, sp, #512	; 0x200
    4a64:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    4a66:	ldr	r3, [r4, #0]
    4a68:	mov	r1, r6
    4a6a:	mov	r0, r4
    4a6c:	ldr	r3, [r3, #72]	; 0x48
    4a6e:	blx	r3
    4a70:	cmp	r0, #0
    4a72:	beq.n	4a3e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    4a74:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    4a76:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    4a78:	strb	r3, [r4, #9]
    4a7a:	b.n	4a4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    4a7c:	.word	0x183a0001
    4a80:	.word	0x200008bc
    4a84:	.word	0x2000388c

00004a88 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    4a88:	ldrb	r3, [r0, #9]
    4a8a:	cmp	r3, #1
    4a8c:	beq.n	4aae <SdioCard::syncDevice()+0x26>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    4a8e:	cmp	r3, #2
    4a90:	beq.n	4a96 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    4a92:	movs	r0, #1
    4a94:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    4a96:	push	{r4}
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    4a98:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    4a9a:	movs	r4, #0
    4a9c:	ldr	r1, [pc, #28]	; (4abc <SdioCard::syncDevice()+0x34>)
    4a9e:	strb	r4, [r0, #9]
    if (!writeStop()) {
    4aa0:	ldr	r3, [r3, #76]	; 0x4c
    4aa2:	cmp	r3, r1
    4aa4:	bne.n	4ab6 <SdioCard::syncDevice()+0x2e>
      return false;
    }
  }
  return true;
}
    4aa6:	ldr.w	r4, [sp], #4
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    4aaa:	b.w	4740 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    4aae:	movs	r3, #0
    4ab0:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    4ab2:	b.w	4740 <transferStop()>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    4ab6:	ldr.w	r4, [sp], #4
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    4aba:	bx	r3
    4abc:	.word	0x000047ad

00004ac0 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    4ac0:	push	{r3, r4, r5, r6, r7, lr}
    4ac2:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    4ac4:	ldr	r0, [pc, #108]	; (4b34 <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    4ac6:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    4ac8:	bl	4314 <waitTimeout(bool (*)())>
    4acc:	cbz	r0, 4ae0 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4ace:	ldr	r1, [pc, #104]	; (4b38 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    4ad0:	movs	r0, #10
  m_errorLine = line;
    4ad2:	ldr	r3, [pc, #104]	; (4b3c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    4ad4:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4ad8:	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4ada:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4adc:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4ade:	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    4ae0:	ldr	r2, [pc, #92]	; (4b40 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    4ae2:	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    4ae4:	ldr	r3, [pc, #92]	; (4b44 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    4ae6:	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    4ae8:	strb	r7, [r2, #0]
  m_irqstat = 0;
    4aea:	ldr	r6, [pc, #92]	; (4b48 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    4aec:	ldr	r5, [pc, #92]	; (4b4c <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    4aee:	ldr	r2, [pc, #96]	; (4b50 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    4af0:	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    4af2:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    4af4:	ldr	r0, [pc, #92]	; (4b54 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    4af6:	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    4af8:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    4afa:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4afe:	cbnz	r0, 4b10 <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b00:	ldr	r1, [pc, #52]	; (4b38 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    4b02:	movs	r4, #4
  m_errorLine = line;
    4b04:	ldr	r3, [pc, #52]	; (4b3c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    4b06:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b0a:	strb	r4, [r1, #0]
  m_errorLine = line;
    4b0c:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    4b0e:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    4b10:	ldr	r0, [pc, #68]	; (4b58 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    4b12:	bl	433c <yieldTimeout(bool (*)())>
    4b16:	cbnz	r0, 4b20 <cardCMD6(unsigned long, unsigned char*)+0x60>
    4b18:	bl	4528 <waitDmaStatus() [clone .part.7]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    4b1c:	cbz	r0, 4b20 <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    4b1e:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b20:	ldr	r1, [pc, #20]	; (4b38 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    4b22:	movs	r0, #36	; 0x24
  m_errorLine = line;
    4b24:	ldr	r3, [pc, #20]	; (4b3c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    4b26:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b2a:	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    4b2c:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4b2e:	str	r2, [r3, #0]
    4b30:	pop	{r3, r4, r5, r6, r7, pc}
    4b32:	nop
    4b34:	.word	0x000044e1
    4b38:	.word	0x200008bc
    4b3c:	.word	0x2000388c
    4b40:	.word	0x20003884
    4b44:	.word	0x402c0000
    4b48:	.word	0x2000386c
    4b4c:	.word	0x00010040
    4b50:	.word	0x117f0002
    4b54:	.word	0x063a0011
    4b58:	.word	0x00004195

00004b5c <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    4b5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    4b60:	ldr	r2, [pc, #732]	; (4e40 <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    4b62:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    4b64:	ldr	r5, [pc, #732]	; (4e44 <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    4b66:	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    4b68:	strb	r1, [r0, #8]
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    4b6a:	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    4b6c:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    4b6e:	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    4b70:	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    4b74:	ldr	r7, [pc, #720]	; (4e48 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    4b76:	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    4b7a:	ldr	r6, [pc, #720]	; (4e4c <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    4b7c:	ldr.w	r8, [pc, #820]	; 4eb4 <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    4b80:	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    4b82:	strb	r3, [r6, #0]
  m_version2 = false;
    4b84:	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    4b88:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    4b8c:	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    4b90:	ldr	r3, [pc, #700]	; (4e50 <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    4b92:	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    4b96:	ldr	r1, [pc, #700]	; (4e54 <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    4b98:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    4b9c:	ldr.w	r0, [r2, #256]	; 0x100
    4ba0:	orr.w	r0, r0, #24
    4ba4:	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    4ba8:	ldr.w	r0, [r2, #256]	; 0x100
    4bac:	bic.w	r0, r0, #128	; 0x80
    4bb0:	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    4bb4:	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    4bb8:	ldr	r0, [pc, #668]	; (4e58 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    4bba:	orr.w	r2, r2, #12
    4bbe:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    4bc2:	ldr	r2, [r3, #36]	; 0x24
    4bc4:	bic.w	r2, r2, #14336	; 0x3800
    4bc8:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    4bca:	ldr	r2, [r3, #28]
    4bcc:	orr.w	r2, r2, #65536	; 0x10000
    4bd0:	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    4bd2:	ldr	r2, [r3, #36]	; 0x24
    4bd4:	orr.w	r2, r2, #2048	; 0x800
    4bd8:	str	r2, [r3, #36]	; 0x24
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    4bda:	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    4bdc:	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    4be0:	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    4be4:	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    4be8:	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    4bec:	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    4bf0:	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    4bf4:	ldr	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    4bf6:	ldr	r3, [pc, #612]	; (4e5c <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    4bf8:	orr.w	r1, r1, #2147483648	; 0x80000000
    4bfc:	str	r1, [r0, #72]	; 0x48
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    4bfe:	ldr	r1, [r0, #44]	; 0x2c
    4c00:	orrs	r3, r1
    4c02:	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    4c04:	ldr	r3, [r2, #44]	; 0x2c
    4c06:	ldr	r4, [pc, #592]	; (4e58 <SdioCard::begin(SdioConfig)+0x2fc>)
    4c08:	lsls	r1, r3, #7
    4c0a:	bmi.n	4c04 <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    4c0c:	mov.w	r0, #400	; 0x190
    4c10:	bl	41e0 <setSdclk(unsigned long)>
    4c14:	bl	4398 <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    4c18:	ldr	r1, [pc, #580]	; (4e60 <SdioCard::begin(SdioConfig)+0x304>)
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    4c1a:	ldr	r3, [pc, #584]	; (4e64 <SdioCard::begin(SdioConfig)+0x308>)
    4c1c:	ldr	r2, [pc, #584]	; (4e68 <SdioCard::begin(SdioConfig)+0x30c>)
    4c1e:	str	r1, [r4, #52]	; 0x34
    4c20:	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    4c24:	ldr	r3, [pc, #580]	; (4e6c <SdioCard::begin(SdioConfig)+0x310>)
    4c26:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    4c28:	ldr	r2, [pc, #580]	; (4e70 <SdioCard::begin(SdioConfig)+0x314>)
    4c2a:	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    4c2e:	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    4c30:	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    4c32:	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    4c34:	ldr	r2, [r4, #44]	; 0x2c
    4c36:	orr.w	r2, r2, #134217728	; 0x8000000
    4c3a:	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    4c3c:	ldr	r1, [r3, #44]	; 0x2c
    4c3e:	ands.w	r1, r1, #134217728	; 0x8000000
    4c42:	bne.n	4c3c <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    4c44:	mov	r0, r1
    4c46:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4c4a:	mov	r4, r0
    4c4c:	cmp	r0, #0
    4c4e:	beq.n	4cec <SdioCard::begin(SdioConfig)+0x190>
    4c50:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    4c52:	mov.w	r1, #426	; 0x1aa
    4c56:	ldr	r0, [pc, #540]	; (4e74 <SdioCard::begin(SdioConfig)+0x318>)
    4c58:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4c5c:	cmp	r0, #0
    4c5e:	bne.n	4d1a <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    4c60:	subs	r4, #1
    4c62:	bne.n	4c52 <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    4c64:	ldrb.w	r3, [r8]
    4c68:	ldr	r4, [pc, #524]	; (4e78 <SdioCard::begin(SdioConfig)+0x31c>)
    4c6a:	cmp	r3, #0
    4c6c:	it	eq
    4c6e:	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    4c72:	bl	95a4 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    4c76:	ldr.w	r8, [pc, #576]	; 4eb8 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    4c7a:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    4c7c:	movs	r1, #0
    4c7e:	ldr	r0, [pc, #508]	; (4e7c <SdioCard::begin(SdioConfig)+0x320>)
    4c80:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4c84:	cbnz	r0, 4c9c <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4c86:	movs	r1, #23
  m_errorLine = line;
    4c88:	ldr	r3, [pc, #500]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4c8a:	movw	r2, #621	; 0x26d
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    4c8e:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4c90:	strb	r1, [r5, #0]
  m_errorLine = line;
    4c92:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    4c94:	mov	r0, r4
    4c96:	add	sp, #68	; 0x44
    4c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    4c9c:	mov	r1, r4
    4c9e:	ldr	r0, [pc, #484]	; (4e84 <SdioCard::begin(SdioConfig)+0x328>)
    4ca0:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4ca4:	cmp	r0, #0
    4ca6:	beq.n	4c86 <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    4ca8:	bl	95a4 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    4cac:	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    4cb0:	ldr	r2, [pc, #420]	; (4e58 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    4cb2:	cmp	r0, r8
    4cb4:	bhi.n	4c86 <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    4cb6:	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    4cb8:	cmp	r3, #0
    4cba:	bge.n	4c7c <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    4cbc:	ldr	r1, [r2, #16]
    4cbe:	ldr	r3, [pc, #456]	; (4e88 <SdioCard::begin(SdioConfig)+0x32c>)
    4cc0:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    4cc2:	ldr	r3, [r2, #16]
    4cc4:	lsls	r2, r3, #1
    4cc6:	bpl.n	4ccc <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    4cc8:	movs	r3, #1
    4cca:	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    4ccc:	movs	r1, #0
    4cce:	ldr	r0, [pc, #444]	; (4e8c <SdioCard::begin(SdioConfig)+0x330>)
    4cd0:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4cd4:	mov	r4, r0
    4cd6:	cbnz	r0, 4d00 <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4cd8:	movs	r1, #2
  m_errorLine = line;
    4cda:	ldr	r3, [pc, #420]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4cdc:	movw	r2, #630	; 0x276

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    4ce0:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4ce2:	strb	r1, [r5, #0]
  m_errorLine = line;
    4ce4:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    4ce6:	add	sp, #68	; 0x44
    4ce8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4cec:	movs	r1, #1
  m_errorLine = line;
    4cee:	ldr	r3, [pc, #400]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4cf0:	mov.w	r2, #604	; 0x25c

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    4cf4:	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4cf6:	strb	r1, [r5, #0]
  m_errorLine = line;
    4cf8:	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    4cfa:	add	sp, #68	; 0x44
    4cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    4d00:	movs	r1, #0
    4d02:	ldr	r0, [pc, #396]	; (4e90 <SdioCard::begin(SdioConfig)+0x334>)
    4d04:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4d08:	mov	r4, r0
    4d0a:	cbnz	r0, 4d3e <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d0c:	movs	r1, #3
  m_errorLine = line;
    4d0e:	ldr	r3, [pc, #368]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4d10:	movw	r2, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d14:	strb	r1, [r5, #0]
  m_errorLine = line;
    4d16:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    4d18:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    4d1a:	ldr	r3, [pc, #316]	; (4e58 <SdioCard::begin(SdioConfig)+0x2fc>)
    4d1c:	ldr	r3, [r3, #16]
    4d1e:	cmp.w	r3, #426	; 0x1aa
    4d22:	beq.n	4d34 <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d24:	movs	r1, #6
  m_errorLine = line;
    4d26:	ldr	r3, [pc, #344]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4d28:	movw	r2, #610	; 0x262
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    4d2c:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d2e:	strb	r1, [r5, #0]
  m_errorLine = line;
    4d30:	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    4d32:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    4d34:	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    4d36:	ldr	r4, [pc, #320]	; (4e78 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    4d38:	strb.w	r3, [r8]
    4d3c:	b.n	4c72 <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    4d3e:	ldr	r6, [pc, #280]	; (4e58 <SdioCard::begin(SdioConfig)+0x2fc>)
    4d40:	ldr	r3, [pc, #336]	; (4e94 <SdioCard::begin(SdioConfig)+0x338>)
    4d42:	ldr	r2, [r6, #16]
    4d44:	ldr.w	r8, [pc, #372]	; 4ebc <SdioCard::begin(SdioConfig)+0x360>
    4d48:	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    4d4a:	ldr	r1, [pc, #332]	; (4e98 <SdioCard::begin(SdioConfig)+0x33c>)
    4d4c:	ldr	r0, [pc, #332]	; (4e9c <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    4d4e:	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    4d52:	bl	4484 <readReg16(unsigned long, void*)>
    4d56:	mov	r4, r0
    4d58:	cbnz	r0, 4d68 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d5a:	movs	r1, #7
  m_errorLine = line;
    4d5c:	ldr	r3, [pc, #288]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4d5e:	movw	r2, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d62:	strb	r1, [r5, #0]
  m_errorLine = line;
    4d64:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    4d66:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    4d68:	ldr	r1, [pc, #308]	; (4ea0 <SdioCard::begin(SdioConfig)+0x344>)
    4d6a:	ldr	r0, [pc, #312]	; (4ea4 <SdioCard::begin(SdioConfig)+0x348>)
    4d6c:	bl	4484 <readReg16(unsigned long, void*)>
    4d70:	mov	r4, r0
    4d72:	cbnz	r0, 4d82 <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d74:	movs	r1, #8
  m_errorLine = line;
    4d76:	ldr	r3, [pc, #264]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4d78:	movw	r2, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d7c:	strb	r1, [r5, #0]
  m_errorLine = line;
    4d7e:	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    4d80:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    4d82:	ldr.w	r1, [r8]
    4d86:	ldr	r0, [pc, #288]	; (4ea8 <SdioCard::begin(SdioConfig)+0x34c>)
    4d88:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4d8c:	mov	r4, r0
    4d8e:	cbnz	r0, 4d9e <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d90:	movs	r1, #5
  m_errorLine = line;
    4d92:	ldr	r3, [pc, #236]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4d94:	mov.w	r2, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4d98:	strb	r1, [r5, #0]
  m_errorLine = line;
    4d9a:	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    4d9c:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    4d9e:	ldr.w	r1, [r8]
    4da2:	ldr	r0, [pc, #216]	; (4e7c <SdioCard::begin(SdioConfig)+0x320>)
    4da4:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4da8:	cbnz	r0, 4dba <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4daa:	movs	r1, #20
  m_errorLine = line;
    4dac:	ldr	r3, [pc, #208]	; (4e80 <SdioCard::begin(SdioConfig)+0x324>)
    4dae:	mov.w	r2, #648	; 0x288
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    4db2:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4db4:	strb	r1, [r5, #0]
  m_errorLine = line;
    4db6:	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    4db8:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    4dba:	movs	r1, #2
    4dbc:	ldr	r0, [pc, #236]	; (4eac <SdioCard::begin(SdioConfig)+0x350>)
    4dbe:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4dc2:	mov	r4, r0
    4dc4:	cmp	r0, #0
    4dc6:	beq.n	4daa <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    4dc8:	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    4dca:	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    4dce:	mvn.w	r0, #4278190080	; 0xff000000
    4dd2:	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    4dd4:	bic.w	r3, r3, #6
    4dd8:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    4dda:	ldr	r3, [r6, #40]	; 0x28
    4ddc:	orr.w	r3, r3, #2
    4de0:	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    4de2:	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    4de4:	bl	4ac0 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    4de8:	cbz	r0, 4df2 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    4dea:	ldrb.w	r3, [sp, #13]
    4dee:	lsls	r3, r3, #30
    4df0:	bmi.n	4e20 <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    4df2:	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    4df6:	ldr	r3, [pc, #92]	; (4e54 <SdioCard::begin(SdioConfig)+0x2f8>)
    4df8:	movs	r2, #5
    4dfa:	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    4dfe:	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    4e02:	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    4e06:	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    4e0a:	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    4e0e:	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    4e12:	bl	41e0 <setSdclk(unsigned long)>
    4e16:	bl	4398 <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    4e1a:	movs	r3, #1
    4e1c:	strb	r3, [r7, #0]
  return true;
    4e1e:	b.n	4c94 <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    4e20:	mov	r1, sp
    4e22:	ldr	r0, [pc, #140]	; (4eb0 <SdioCard::begin(SdioConfig)+0x354>)
    4e24:	bl	4ac0 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    4e28:	cmp	r0, #0
    4e2a:	beq.n	4df2 <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    4e2c:	ldrb.w	r3, [sp, #16]
    4e30:	and.w	r3, r3, #15
    4e34:	cmp	r3, #1
    4e36:	bne.n	4df2 <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    4e38:	movw	r0, #50000	; 0xc350
    4e3c:	b.n	4df6 <SdioCard::begin(SdioConfig)+0x29a>
    4e3e:	nop
    4e40:	.word	0x400d8000
    4e44:	.word	0x200008bc
    4e48:	.word	0x20003870
    4e4c:	.word	0x20003860
    4e50:	.word	0x400fc000
    4e54:	.word	0x401f8000
    4e58:	.word	0x402c0000
    4e5c:	.word	0x01008000
    4e60:	.word	0x117f000b
    4e64:	.word	0x20004c00
    4e68:	.word	0x0000413d
    4e6c:	.word	0xe000e46e
    4e70:	.word	0xe000e10c
    4e74:	.word	0x081a0000
    4e78:	.word	0x40300000
    4e7c:	.word	0x371a0000
    4e80:	.word	0x2000388c
    4e84:	.word	0x29020000
    4e88:	.word	0x20003864
    4e8c:	.word	0x02090000
    4e90:	.word	0x031a0000
    4e94:	.word	0xffff0000
    4e98:	.word	0x20003874
    4e9c:	.word	0x09090000
    4ea0:	.word	0x2000384c
    4ea4:	.word	0x0a090000
    4ea8:	.word	0x071b0000
    4eac:	.word	0x061a0000
    4eb0:	.word	0x80fffff1
    4eb4:	.word	0x20003848
    4eb8:	.word	0x000f4240
    4ebc:	.word	0x20003868

00004ec0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    4ec0:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    4ec2:	ldr	r3, [pc, #156]	; (4f60 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    4ec4:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    4ec6:	ldr	r2, [r3, #36]	; 0x24
    4ec8:	lsls	r4, r2, #22
    4eca:	bmi.n	4ee8 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    4ecc:	ldr	r2, [r3, #40]	; 0x28
    4ece:	bic.w	r2, r2, #65536	; 0x10000
    4ed2:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    4ed4:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    4ed6:	ldr	r2, [r3, #40]	; 0x28
    4ed8:	orr.w	r2, r2, #131072	; 0x20000
    4edc:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4ede:	ldr	r2, [r3, #40]	; 0x28
    4ee0:	orr.w	r2, r2, #65536	; 0x10000
    4ee4:	str	r2, [r3, #40]	; 0x28
    interrupts();
    4ee6:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    4ee8:	ldr	r0, [pc, #120]	; (4f64 <SdioCard::readData(unsigned char*)+0xa4>)
    4eea:	bl	4314 <waitTimeout(bool (*)())>
    4eee:	cmp	r0, #0
    4ef0:	bne.n	4f4e <SdioCard::readData(unsigned char*)+0x8e>
    4ef2:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    4ef4:	ldr	r1, [pc, #104]	; (4f60 <SdioCard::readData(unsigned char*)+0xa0>)
    4ef6:	add.w	r5, r5, #508	; 0x1fc
    4efa:	ldr	r2, [r1, #36]	; 0x24
    4efc:	lsls	r0, r2, #20
    4efe:	bpl.n	4efa <SdioCard::readData(unsigned char*)+0x3a>
    4f00:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    4f04:	ldr	r2, [r1, #32]
    4f06:	ldr	r4, [pc, #88]	; (4f60 <SdioCard::readData(unsigned char*)+0xa0>)
    4f08:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    4f0c:	cmp	r0, r3
    4f0e:	bne.n	4f04 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    4f10:	cmp	r5, r0
    4f12:	mov	r3, r0
    4f14:	bne.n	4efa <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    4f16:	ldr	r0, [pc, #80]	; (4f68 <SdioCard::readData(unsigned char*)+0xa8>)
    4f18:	bl	4314 <waitTimeout(bool (*)())>
    4f1c:	cbnz	r0, 4f3c <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    4f1e:	ldr	r2, [r4, #48]	; 0x30
    4f20:	ldr	r3, [pc, #72]	; (4f6c <SdioCard::readData(unsigned char*)+0xac>)
    4f22:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4f24:	ldr	r2, [r3, #0]
    4f26:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    4f28:	ldr	r2, [r3, #0]
    4f2a:	lsls	r2, r2, #30
    4f2c:	bpl.n	4f5e <SdioCard::readData(unsigned char*)+0x9e>
    4f2e:	ldr	r3, [r3, #0]
    4f30:	ldr	r0, [pc, #60]	; (4f70 <SdioCard::readData(unsigned char*)+0xb0>)
    4f32:	ands	r0, r3
    4f34:	clz	r0, r0
    4f38:	lsrs	r0, r0, #5
    4f3a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4f3c:	ldr	r1, [pc, #52]	; (4f74 <SdioCard::readData(unsigned char*)+0xb4>)
    4f3e:	movs	r0, #29
  m_errorLine = line;
    4f40:	ldr	r3, [pc, #52]	; (4f78 <SdioCard::readData(unsigned char*)+0xb8>)
    4f42:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4f46:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    4f48:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4f4a:	str	r2, [r3, #0]
    4f4c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4f4e:	ldr	r1, [pc, #36]	; (4f74 <SdioCard::readData(unsigned char*)+0xb4>)
    4f50:	movs	r4, #26
  m_errorLine = line;
    4f52:	ldr	r3, [pc, #36]	; (4f78 <SdioCard::readData(unsigned char*)+0xb8>)
    4f54:	mov.w	r2, #748	; 0x2ec
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    4f58:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4f5a:	strb	r4, [r1, #0]
  m_errorLine = line;
    4f5c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    4f5e:	pop	{r3, r4, r5, pc}
    4f60:	.word	0x402c0000
    4f64:	.word	0x000041a1
    4f68:	.word	0x000041c9
    4f6c:	.word	0x2000386c
    4f70:	.word	0x117f0000
    4f74:	.word	0x200008bc
    4f78:	.word	0x2000388c

00004f7c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    4f7c:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    4f7e:	ldr	r0, [pc, #80]	; (4fd0 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    4f80:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    4f82:	bl	433c <yieldTimeout(bool (*)())>
    4f86:	cbnz	r0, 4fbc <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4f88:	ldr	r3, [pc, #72]	; (4fd4 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    4f8a:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4f8e:	ldr	r1, [pc, #72]	; (4fd8 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4f90:	ldr	r2, [r3, #40]	; 0x28
    4f92:	orr.w	r2, r2, #65536	; 0x10000
    4f96:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    4f98:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4f9a:	ldrb	r3, [r1, #0]
    4f9c:	cbnz	r3, 4fb8 <SdioCard::readStart(unsigned long)+0x3c>
    4f9e:	lsls	r1, r4, #9
    4fa0:	ldr	r0, [pc, #56]	; (4fdc <SdioCard::readStart(unsigned long)+0x60>)
    4fa2:	bl	43fc <cardCommand(unsigned long, unsigned long)>
    4fa6:	cbnz	r0, 4fb6 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4fa8:	ldr	r1, [pc, #52]	; (4fe0 <SdioCard::readStart(unsigned long)+0x64>)
    4faa:	movs	r4, #12
  m_errorLine = line;
    4fac:	ldr	r3, [pc, #52]	; (4fe4 <SdioCard::readStart(unsigned long)+0x68>)
    4fae:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4fb2:	strb	r4, [r1, #0]
  m_errorLine = line;
    4fb4:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    4fb6:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4fb8:	mov	r1, r4
    4fba:	b.n	4fa0 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4fbc:	ldr	r1, [pc, #32]	; (4fe0 <SdioCard::readStart(unsigned long)+0x64>)
    4fbe:	movs	r0, #10
  m_errorLine = line;
    4fc0:	ldr	r3, [pc, #32]	; (4fe4 <SdioCard::readStart(unsigned long)+0x68>)
    4fc2:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4fc6:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4fc8:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4fca:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4fcc:	pop	{r4, pc}
    4fce:	nop
    4fd0:	.word	0x000044e1
    4fd4:	.word	0x402c0000
    4fd8:	.word	0x20003860
    4fdc:	.word	0x123a0030
    4fe0:	.word	0x200008bc
    4fe4:	.word	0x2000388c

00004fe8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    4fe8:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    4fea:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    4fec:	sub.w	sp, sp, #512	; 0x200
    4ff0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    4ff2:	lsls	r4, r3, #31
    4ff4:	bpl.n	501a <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    4ff6:	lsls	r3, r2, #30
    4ff8:	beq.n	5036 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    4ffa:	movs	r3, #1
    4ffc:	ldr	r0, [pc, #140]	; (508c <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    4ffe:	mov	r2, sp
    5000:	bl	4548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5004:	cbz	r0, 5042 <SdioCard::readSector(unsigned long, unsigned char*)+0x5a>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    5006:	mov	r1, sp
    5008:	mov	r0, r5
    500a:	mov.w	r2, #512	; 0x200
    500e:	bl	7fc4 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    5012:	movs	r0, #1
}
    5014:	add.w	sp, sp, #512	; 0x200
    5018:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    501a:	ldrb	r3, [r0, #9]
    501c:	mov	r4, r0
    501e:	mov	r6, r1
    5020:	cmp	r3, #1
    5022:	beq.n	5058 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
      if (!syncDevice()) {
    5024:	ldr	r3, [r4, #0]
    5026:	mov	r0, r4
    5028:	ldr	r3, [r3, #20]
    502a:	blx	r3
    502c:	cbnz	r0, 5076 <SdioCard::readSector(unsigned long, unsigned char*)+0x8e>
        return false;
    502e:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    5030:	add.w	sp, sp, #512	; 0x200
    5034:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    5036:	movs	r3, #1
    5038:	ldr	r0, [pc, #80]	; (508c <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    503a:	bl	4548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    503e:	cmp	r0, #0
    5040:	bne.n	5012 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5042:	ldr	r1, [pc, #76]	; (5090 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    5044:	movs	r0, #11
  m_errorLine = line;
    5046:	ldr	r3, [pc, #76]	; (5094 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    5048:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    504c:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    504e:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5050:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    5052:	add.w	sp, sp, #512	; 0x200
    5056:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    5058:	ldr	r3, [r0, #4]
    505a:	cmp	r1, r3
    505c:	bne.n	5024 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    505e:	mov	r1, r5
    5060:	mov	r0, r4
    5062:	bl	4ec0 <SdioCard::readData(unsigned char*)>
    5066:	cmp	r0, #0
    5068:	beq.n	502e <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    506a:	ldr	r3, [r4, #4]
    506c:	adds	r3, #1
    506e:	str	r3, [r4, #4]
  }
  return true;
}
    5070:	add.w	sp, sp, #512	; 0x200
    5074:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    5076:	mov	r1, r6
    5078:	mov	r0, r4
    507a:	bl	4f7c <SdioCard::readStart(unsigned long)>
    507e:	cmp	r0, #0
    5080:	beq.n	502e <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    5082:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    5084:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    5086:	strb	r3, [r4, #9]
    5088:	b.n	505e <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    508a:	nop
    508c:	.word	0x113a0011
    5090:	.word	0x200008bc
    5094:	.word	0x2000388c

00005098 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    5098:	ldr	r3, [r0, #0]
    509a:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    509c:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    509e:	ldrb	r2, [r3, #19]
    50a0:	ldr	r4, [r0, #8]
    50a2:	cmp	r2, #0
    50a4:	beq.n	50f8 <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    50a6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    50a8:	ldrb	r2, [r3, #19]
    50aa:	lsls	r5, r2, #31
    50ac:	bpl.n	50bc <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    50ae:	ldr	r0, [pc, #204]	; (517c <SdSpiArduinoDriver::activate()+0xe4>)
    50b0:	ldr	r2, [r3, #20]
    50b2:	ldr	r5, [r0, #0]
    50b4:	ands	r2, r5
    50b6:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    50b8:	str	r2, [r0, #0]
    50ba:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    50bc:	lsls	r0, r2, #30
    50be:	bpl.n	50ce <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    50c0:	ldr	r0, [pc, #188]	; (5180 <SdSpiArduinoDriver::activate()+0xe8>)
    50c2:	ldr	r2, [r3, #24]
    50c4:	ldr	r5, [r0, #0]
    50c6:	ands	r2, r5
    50c8:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    50ca:	str	r2, [r0, #0]
    50cc:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    50ce:	lsls	r5, r2, #29
    50d0:	bpl.n	50e0 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    50d2:	ldr	r0, [pc, #176]	; (5184 <SdSpiArduinoDriver::activate()+0xec>)
    50d4:	ldr	r2, [r3, #28]
    50d6:	ldr	r5, [r0, #0]
    50d8:	ands	r2, r5
    50da:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    50dc:	str	r2, [r0, #0]
    50de:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    50e0:	lsls	r0, r2, #28
    50e2:	bpl.n	50f2 <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    50e4:	ldr	r0, [pc, #160]	; (5188 <SdSpiArduinoDriver::activate()+0xf0>)
    50e6:	ldr	r2, [r3, #32]
    50e8:	ldr	r5, [r0, #0]
    50ea:	ands	r2, r5
    50ec:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    50ee:	str	r2, [r0, #0]
    50f0:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    50f2:	lsls	r2, r2, #27
    50f4:	bmi.n	514e <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    50f6:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    50f8:	ldr	r2, [r3, #8]
    50fa:	cmp	r2, r1
    50fc:	beq.n	515c <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    50fe:	ldr	r2, [pc, #140]	; (518c <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    5100:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    5102:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    5104:	ldr	r0, [pc, #136]	; (5190 <SdSpiArduinoDriver::activate()+0xf8>)
    5106:	ubfx	r5, r2, #4, #2
    510a:	ubfx	r2, r2, #26, #3
    510e:	ldr.w	r0, [r0, r5, lsl #2]
    5112:	adds	r2, #1
    5114:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    5118:	cbz	r1, 514a <SdSpiArduinoDriver::activate()+0xb2>
    511a:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    511e:	cbz	r2, 5132 <SdSpiArduinoDriver::activate()+0x9a>
    5120:	udiv	r0, r0, r2
    5124:	cmp	r0, r1
    5126:	it	hi
    5128:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    512a:	cmp.w	r2, #258	; 0x102
    512e:	bcc.n	5160 <SdSpiArduinoDriver::activate()+0xc8>
    5130:	ldr	r2, [pc, #96]	; (5194 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    5132:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5134:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    5136:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    5138:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    513a:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    513c:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    513e:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    5140:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    5142:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    5144:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    5146:	pop	{r4, r5}
    5148:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    514a:	mov	r2, r0
    514c:	b.n	511e <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    514e:	ldr	r0, [pc, #72]	; (5198 <SdSpiArduinoDriver::activate()+0x100>)
    5150:	ldr	r2, [r3, #36]	; 0x24
    5152:	ldr	r5, [r0, #0]
    5154:	ands	r2, r5
    5156:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    5158:	str	r2, [r0, #0]
    515a:	b.n	50f6 <SdSpiArduinoDriver::activate()+0x5e>
    515c:	ldr	r2, [r3, #12]
    515e:	b.n	5134 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    5160:	cmp	r2, #2
    5162:	it	ls
    5164:	movls	r2, #0
    5166:	bls.n	5132 <SdSpiArduinoDriver::activate()+0x9a>
    5168:	subs	r2, #2
    516a:	lsrs	r0, r2, #1
    516c:	lsls	r1, r0, #16
    516e:	orr.w	r2, r2, r0, lsl #8
    5172:	and.w	r1, r1, #16711680	; 0xff0000
    5176:	orrs	r2, r1
    5178:	b.n	5132 <SdSpiArduinoDriver::activate()+0x9a>
    517a:	nop
    517c:	.word	0xe000e180
    5180:	.word	0xe000e184
    5184:	.word	0xe000e188
    5188:	.word	0xe000e18c
    518c:	.word	0x400fc000
    5190:	.word	0x20000120
    5194:	.word	0x007f7fff
    5198:	.word	0xe000e190

0000519c <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    519c:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    519e:	ldrb	r3, [r2, #19]
    51a0:	cbz	r3, 51dc <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    51a2:	lsls	r0, r3, #31
    51a4:	bpl.n	51ae <SdSpiArduinoDriver::deactivate()+0x12>
    51a6:	ldr	r3, [pc, #56]	; (51e0 <SdSpiArduinoDriver::deactivate()+0x44>)
    51a8:	ldr	r1, [r2, #40]	; 0x28
    51aa:	str	r1, [r3, #0]
    51ac:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    51ae:	lsls	r1, r3, #30
    51b0:	bpl.n	51ba <SdSpiArduinoDriver::deactivate()+0x1e>
    51b2:	ldr	r3, [pc, #48]	; (51e4 <SdSpiArduinoDriver::deactivate()+0x48>)
    51b4:	ldr	r1, [r2, #44]	; 0x2c
    51b6:	str	r1, [r3, #0]
    51b8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    51ba:	lsls	r0, r3, #29
    51bc:	bpl.n	51c6 <SdSpiArduinoDriver::deactivate()+0x2a>
    51be:	ldr	r3, [pc, #40]	; (51e8 <SdSpiArduinoDriver::deactivate()+0x4c>)
    51c0:	ldr	r1, [r2, #48]	; 0x30
    51c2:	str	r1, [r3, #0]
    51c4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    51c6:	lsls	r1, r3, #28
    51c8:	bpl.n	51d2 <SdSpiArduinoDriver::deactivate()+0x36>
    51ca:	ldr	r3, [pc, #32]	; (51ec <SdSpiArduinoDriver::deactivate()+0x50>)
    51cc:	ldr	r1, [r2, #52]	; 0x34
    51ce:	str	r1, [r3, #0]
    51d0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    51d2:	lsls	r3, r3, #27
    51d4:	bpl.n	51dc <SdSpiArduinoDriver::deactivate()+0x40>
    51d6:	ldr	r2, [r2, #56]	; 0x38
    51d8:	ldr	r3, [pc, #20]	; (51f0 <SdSpiArduinoDriver::deactivate()+0x54>)
    51da:	str	r2, [r3, #0]
    51dc:	bx	lr
    51de:	nop
    51e0:	.word	0xe000e100
    51e4:	.word	0xe000e104
    51e8:	.word	0xe000e108
    51ec:	.word	0xe000e10c
    51f0:	.word	0xe000e110

000051f4 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    51f4:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    51f6:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    51f8:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    51fa:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    51fc:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    51fe:	tst.w	r3, #2031616	; 0x1f0000
    5202:	beq.n	51fc <SdSpiArduinoDriver::receive()+0x8>
    5204:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    5206:	uxtb	r0, r0
    5208:	bx	lr
    520a:	nop

0000520c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    520c:	push	{r4, r5, r6, lr}
    520e:	mov	r4, r1
    5210:	mov	r6, r2
    5212:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    5214:	movs	r1, #255	; 0xff
    5216:	mov	r0, r4
    5218:	bl	b1ec <memset>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    521c:	ldr	r0, [r5, #0]
    521e:	mov	r3, r6
    5220:	mov	r2, r4
    5222:	mov	r1, r4
    5224:	bl	7e10 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    5228:	movs	r0, #0
    522a:	pop	{r4, r5, r6, pc}

0000522c <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    522c:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    522e:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    5230:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    5232:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    5234:	tst.w	r3, #2031616	; 0x1f0000
    5238:	beq.n	5232 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    523a:	ldr	r3, [r2, #116]	; 0x74
    523c:	bx	lr
    523e:	nop

00005240 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    5240:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    5242:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    5244:	sub.w	sp, sp, #516	; 0x204
    5248:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    524a:	cmp.w	r5, #512	; 0x200
    524e:	bcc.n	5272 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    5250:	cbz	r2, 526c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    5252:	ldr	r2, [r0, #0]
    5254:	adds	r0, r1, r3
    5256:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    5258:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    525c:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    525e:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    5260:	tst.w	r3, #2031616	; 0x1f0000
    5264:	beq.n	525e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    5266:	cmp	r1, r0
    5268:	ldr	r3, [r2, #116]	; 0x74
    526a:	bne.n	5258 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    526c:	add.w	sp, sp, #516	; 0x204
    5270:	pop	{r4, r5, pc}
    5272:	mov	r4, r2
    5274:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    5276:	mov	r0, sp
    5278:	bl	7fc4 <memcpy>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    527c:	mov	r3, r4
    527e:	mov	r2, sp
    5280:	mov	r1, sp
    5282:	ldr	r0, [r5, #0]
    5284:	bl	7e10 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    5288:	add.w	sp, sp, #516	; 0x204
    528c:	pop	{r4, r5, pc}
    528e:	nop

00005290 <sdCsWrite(unsigned char, bool)>:
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    5290:	b.w	9930 <digitalWrite>

00005294 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
    5294:	movs	r0, #0
    5296:	bx	lr

00005298 <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
    5298:	movs	r0, #1
    529a:	bx	lr

0000529c <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume> {
    529c:	bx	lr
    529e:	nop

000052a0 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
    52a0:	push	{r4, lr}
    52a2:	mov	r4, r0
    mtp_lock_storage(true);
    index_.close();
    52a4:	adds	r0, #20
    52a6:	bl	3814 <FsBaseFile::close()>
    mtp_lock_storage(false);
    index_generated = false;
    52aa:	movs	r3, #0
    52ac:	strb.w	r3, [r4, #256]	; 0x100
    index_entries_ = 0;
    52b0:	str.w	r3, [r4, #252]	; 0xfc
    52b4:	pop	{r4, pc}
    52b6:	nop

000052b8 <MTPStorage_SD::clusterCount()>:
  bool MTPStorage_SD::has_directories() { return true; }
  

//  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
//  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
    52b8:	ldr	r2, [pc, #24]	; (52d4 <MTPStorage_SD::clusterCount()+0x1c>)
    52ba:	ldr.w	r3, [r2, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    52be:	cbz	r3, 52c6 <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    52c0:	ldr	r0, [r3, #28]
    52c2:	subs	r0, #1
    52c4:	bx	lr
    52c6:	ldr.w	r0, [r2, #1148]	; 0x47c
    52ca:	cbz	r0, 52d0 <MTPStorage_SD::clusterCount()+0x18>
    52cc:	ldr.w	r0, [r0, #1064]	; 0x428
    52d0:	bx	lr
    52d2:	nop
    52d4:	.word	0x20003890

000052d8 <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
    52d8:	ldr	r2, [pc, #28]	; (52f8 <MTPStorage_SD::clusterSize()+0x20>)
    52da:	ldr.w	r3, [r2, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    52de:	cbz	r3, 52e4 <MTPStorage_SD::clusterSize()+0xc>
    52e0:	ldrb	r0, [r3, #4]
    52e2:	bx	lr
    52e4:	ldr.w	r0, [r2, #1148]	; 0x47c
    52e8:	cbz	r0, 52f4 <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
    52ea:	ldrb.w	r0, [r0, #1085]	; 0x43d
    52ee:	movs	r3, #1
    52f0:	lsl.w	r0, r3, r0
    52f4:	bx	lr
    52f6:	nop
    52f8:	.word	0x20003890

000052fc <MTPStorage_SD::freeClusters()>:
  

//  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
//  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
    52fc:	ldr	r3, [pc, #20]	; (5314 <MTPStorage_SD::freeClusters()+0x18>)
    52fe:	ldr.w	r0, [r3, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5302:	cbz	r0, 5308 <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    5304:	b.w	2c34 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5308:	ldr.w	r0, [r3, #1148]	; 0x47c
    530c:	cbz	r0, 5312 <MTPStorage_SD::freeClusters()+0x16>
    530e:	b.w	11f4 <ExFatPartition::freeClusterCount()>
    5312:	bx	lr
    5314:	.word	0x20003890

00005318 <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]>:
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    5318:	ldr	r3, [pc, #16]	; (532c <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]+0x14>)
    531a:	ldr	r1, [r3, #0]
    531c:	cbz	r1, 532a <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]+0x12>
    531e:	adds	r0, #20
    5320:	movw	r3, #16898	; 0x4202
    5324:	ldr	r2, [pc, #8]	; (5330 <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]+0x18>)
    5326:	b.w	38c4 <FsBaseFile::open(FsVolume*, char const*, int)>
    532a:	bx	lr
    532c:	.word	0x20003844
    5330:	.word	0x20000180

00005334 <MTPStorage_SD::write(char const*, unsigned long)>:
    }
    return ret;
  }

  void MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    5334:	ldr.w	r3, [r0, #156]	; 0x9c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    5338:	cbz	r3, 5340 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    533a:	mov	r0, r3
    533c:	b.w	27ec <FatFile::write(void const*, unsigned int)>
    5340:	ldr.w	r0, [r0, #160]	; 0xa0
    5344:	cbz	r0, 534a <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    5346:	b.w	1a5c <ExFatFile::write(void const*, unsigned int)>
    534a:	bx	lr

0000534c <MTPStorage_SD::ResetIndex()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    534c:	ldr	r3, [r0, #76]	; 0x4c
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }


  void MTPStorage_SD::ResetIndex() {
    534e:	push	{r4, r5, r6, r7, lr}
    5350:	sub	sp, #84	; 0x54
    5352:	cmp	r3, #0
    5354:	beq.n	5404 <MTPStorage_SD::ResetIndex()+0xb8>
    if(!index_) return;
    
    mtp_lock_storage(true);
    if(index_.isOpen()) index_.close();
    5356:	add.w	r7, r0, #20
    535a:	mov	r4, r0
    535c:	mov	r0, r7
    535e:	bl	3814 <FsBaseFile::close()>
    5362:	ldr	r3, [pc, #168]	; (540c <MTPStorage_SD::ResetIndex()+0xc0>)
    5364:	ldr.w	r5, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    5368:	cmp	r5, #0
    536a:	beq.n	53d8 <MTPStorage_SD::ResetIndex()+0x8c>
    536c:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5370:	mov	r1, r5
    5372:	movs	r3, #1
    5374:	mov	r0, sp
    5376:	ldr	r2, [pc, #152]	; (5410 <MTPStorage_SD::ResetIndex()+0xc4>)
    5378:	mov	r6, sp
    537a:	strb.w	lr, [sp]
    537e:	strb.w	lr, [sp, #1]
    5382:	strb.w	lr, [sp, #2]
    5386:	bl	2188 <FatFile::open(FatVolume*, char const*, int)>
    538a:	cbz	r0, 5392 <MTPStorage_SD::ResetIndex()+0x46>
    538c:	mov	r0, sp
    538e:	bl	3210 <FatFile::remove()>
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    5392:	mov	r0, r6
    5394:	movw	r3, #16898	; 0x4202
    5398:	ldr	r2, [pc, #116]	; (5410 <MTPStorage_SD::ResetIndex()+0xc4>)
    539a:	ldr	r1, [pc, #112]	; (540c <MTPStorage_SD::ResetIndex()+0xc0>)
    539c:	bl	3a6c <FsVolume::open(char const*, int)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    53a0:	ldr	r2, [sp, #8]
    53a2:	ldrb.w	r3, [sp, #12]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    53a6:	add	r1, sp, #16
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    53a8:	ldrb.w	r5, [sp, #4]
    53ac:	mov	r0, r7
    53ae:	str	r2, [r4, #12]
    53b0:	strb	r3, [r4, #16]
    53b2:	strb	r5, [r4, #8]
    53b4:	bl	383c <FsBaseFile::operator=(FsBaseFile const&)>
    53b8:	ldr	r3, [pc, #88]	; (5414 <MTPStorage_SD::ResetIndex()+0xc8>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    53ba:	add	r0, sp, #16
    53bc:	str	r3, [sp, #0]
    53be:	bl	3814 <FsBaseFile::close()>
    mtp_lock_storage(false);

    all_scanned_ = false;
    53c2:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
    53c4:	mvn.w	r2, #1
    if(index_.isOpen()) index_.close();
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
    53c8:	strb.w	r3, [r4, #257]	; 0x101
    index_generated=false;
    53cc:	strb.w	r3, [r4, #256]	; 0x100
    open_file_ = 0xFFFFFFFEUL;
    53d0:	str.w	r2, [r4, #248]	; 0xf8
  }
    53d4:	add	sp, #84	; 0x54
    53d6:	pop	{r4, r5, r6, r7, pc}
    53d8:	ldr.w	r1, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    53dc:	mov	r6, sp
    53de:	cmp	r1, #0
    53e0:	beq.n	5392 <MTPStorage_SD::ResetIndex()+0x46>
    53e2:	movs	r3, #1
    53e4:	ldr	r2, [pc, #40]	; (5410 <MTPStorage_SD::ResetIndex()+0xc4>)
    53e6:	mov	r0, sp
    53e8:	strb.w	r5, [sp, #49]	; 0x31
    53ec:	strb.w	r5, [sp, #50]	; 0x32
    53f0:	strb.w	r5, [sp, #51]	; 0x33
    53f4:	bl	cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    53f8:	cmp	r0, #0
    53fa:	beq.n	5392 <MTPStorage_SD::ResetIndex()+0x46>
    53fc:	mov	r0, sp
    53fe:	bl	13a4 <ExFatFile::remove()>
    5402:	b.n	5392 <MTPStorage_SD::ResetIndex()+0x46>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5404:	ldr	r3, [r0, #80]	; 0x50
    5406:	cmp	r3, #0
    5408:	bne.n	5356 <MTPStorage_SD::ResetIndex()+0xa>
    540a:	b.n	53d4 <MTPStorage_SD::ResetIndex()+0x88>
    540c:	.word	0x20003890
    5410:	.word	0x20000180
    5414:	.word	0x20000008

00005418 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
 bool Storage_init(void)
  { 
    5418:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    541a:	ldr	r5, [pc, #44]	; (5448 <Storage_init()+0x30>)
    541c:	mov.w	r1, #0
    5420:	add.w	r4, r5, #1160	; 0x488
    5424:	mov	r0, r4
    5426:	bl	4b5c <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    542a:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    542c:	str.w	r4, [r5, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    5430:	bl	42b0 <SdioCard::errorCode() const>
    5434:	cbz	r0, 543a <Storage_init()+0x22>
	} else {
		return true;
	}
    // Set Time callback
    FsDateTime::callback = dateTime;
  }
    5436:	movs	r0, #0
    5438:	pop	{r3, r4, r5, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    543a:	ldr.w	r1, [r5, #1156]	; 0x484
    543e:	mov	r0, r5
    5440:	ldmia.w	sp!, {r3, r4, r5, lr}
    5444:	b.w	39a4 <FsVolume::begin(BlockDeviceInterface*)>
    5448:	.word	0x20003890

0000544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    index_.open((char*)"mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    544c:	ldr	r3, [r0, #76]	; 0x4c
    544e:	push	{r4, r5, r6, lr}
    5450:	mov	r5, r0
    5452:	mov	r4, r1
    5454:	mov	r6, r2
    5456:	cbz	r3, 5484 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x38>
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    5458:	add.w	r4, r1, r1, lsl #2
    545c:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    545e:	mov	r0, r3
    5460:	bl	25e4 <FatFile::seekSet(unsigned long)>
    5464:	ldr	r0, [r5, #76]	; 0x4c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    5466:	cbz	r0, 5474 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x28>
    5468:	mov	r1, r6
    546a:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    546c:	ldmia.w	sp!, {r4, r5, r6, lr}
    5470:	b.w	27ec <FatFile::write(void const*, unsigned int)>
    5474:	ldr	r0, [r5, #80]	; 0x50
    5476:	cbz	r0, 54b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x66>
    5478:	mov	r1, r6
    547a:	movs	r2, #80	; 0x50
    547c:	ldmia.w	sp!, {r4, r5, r6, lr}
    5480:	b.w	1a5c <ExFatFile::write(void const*, unsigned int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5484:	ldr	r3, [r0, #80]	; 0x50
    5486:	cbz	r3, 5498 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x4c>

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    5488:	add.w	r4, r1, r1, lsl #2
    548c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    548e:	mov	r0, r3
    5490:	movs	r3, #0
    5492:	bl	710 <ExFatFile::seekSet(unsigned long long)>
    5496:	b.n	5464 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x18>
    5498:	add.w	r4, r4, r4, lsl #2
    549c:	bl	5318 <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]>
    54a0:	ldr	r3, [r5, #76]	; 0x4c
    54a2:	lsls	r2, r4, #4
    54a4:	mov	r1, r2
    54a6:	cmp	r3, #0
    54a8:	bne.n	545e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x12>
    54aa:	ldr	r3, [r5, #80]	; 0x50
    54ac:	cmp	r3, #0
    54ae:	bne.n	548e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x42>
    54b0:	pop	{r4, r5, r6, pc}
    54b2:	pop	{r4, r5, r6, pc}

000054b4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    54b4:	ldr	r2, [pc, #136]	; (5540 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x8c>)
  {
    if (index_generated) return;
    index_generated = true;
    54b6:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    54b8:	push	{r4, r5, r6, r7, lr}
    54ba:	ldr.w	r5, [r2, #1144]	; 0x478
    54be:	sub	sp, #84	; 0x54
    54c0:	mov	r4, r0
  {
    if (index_generated) return;
    index_generated = true;
    54c2:	strb.w	r3, [r0, #256]	; 0x100
    54c6:	cbz	r5, 5516 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x62>
    54c8:	movs	r7, #0
    54ca:	mov	r1, r5
    54cc:	mov	r0, sp
    54ce:	ldr	r2, [pc, #116]	; (5544 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x90>)
    54d0:	mov	r6, sp
    54d2:	strb.w	r7, [sp]
    54d6:	strb.w	r7, [sp, #1]
    54da:	strb.w	r7, [sp, #2]
    54de:	bl	2188 <FatFile::open(FatVolume*, char const*, int)>
    54e2:	cbnz	r0, 550e <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x5a>
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    54e4:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    54e6:	movs	r5, #1
    r.scanned = false;
    strcpy(r.name, "/");
    54e8:	movs	r7, #47	; 0x2f
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    54ea:	mov	r2, r6
    54ec:	mov	r1, r3
    54ee:	mov	r0, r4
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    54f0:	str.w	r5, [r4, #252]	; 0xfc
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    54f4:	str	r3, [sp, #0]
    r.sibling = 0;
    54f6:	str	r3, [sp, #8]
    r.child = 0;
    54f8:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    54fa:	strb.w	r3, [sp, #13]

    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    54fe:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    5502:	strh.w	r7, [sp, #14]
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    5506:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    550a:	add	sp, #84	; 0x54
    550c:	pop	{r4, r5, r6, r7, pc}
    550e:	mov	r0, sp
    5510:	bl	3210 <FatFile::remove()>
    5514:	b.n	54e4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x30>
    5516:	ldr.w	r1, [r2, #1148]	; 0x47c
    551a:	mov	r6, sp
    551c:	cmp	r1, #0
    551e:	beq.n	54e4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x30>
    5520:	ldr	r2, [pc, #32]	; (5544 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x90>)
    5522:	mov	r0, sp
    5524:	strb.w	r5, [sp, #49]	; 0x31
    5528:	strb.w	r5, [sp, #50]	; 0x32
    552c:	strb.w	r5, [sp, #51]	; 0x33
    5530:	bl	cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5534:	cmp	r0, #0
    5536:	beq.n	54e4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x30>
    5538:	mov	r0, sp
    553a:	bl	13a4 <ExFatFile::remove()>
    553e:	b.n	54e4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]+0x30>
    5540:	.word	0x20003890
    5544:	.word	0x20000180

00005548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    5548:	ldr.w	r3, [r1, #252]	; 0xfc
    554c:	cmp	r3, r2
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    554e:	push	{r4, r5, r6, lr}
    5550:	mov	r6, r0
    Record ret;
    if (i > index_entries_) 
    5552:	bcc.n	5588 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    5554:	ldr	r0, [r1, #76]	; 0x4c
    5556:	mov	r5, r1
    5558:	mov	r4, r2
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    555a:	cbz	r0, 5594 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x4c>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    555c:	add.w	r4, r2, r2, lsl #2
    5560:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5562:	bl	25e4 <FatFile::seekSet(unsigned long)>
    5566:	ldr	r0, [r5, #76]	; 0x4c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    5568:	cbz	r0, 5576 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    556a:	movs	r2, #80	; 0x50
    556c:	mov	r1, r6
    556e:	bl	21a4 <FatFile::read(void*, unsigned int)>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    5572:	mov	r0, r6
    5574:	pop	{r4, r5, r6, pc}
    5576:	ldr	r0, [r5, #80]	; 0x50
    5578:	cmp	r0, #0
    557a:	beq.n	5572 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    557c:	movs	r2, #80	; 0x50
    557e:	mov	r1, r6
    5580:	bl	53c <ExFatFile::read(void*, unsigned int)>
    5584:	mov	r0, r6
    5586:	pop	{r4, r5, r6, pc}
  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    5588:	movs	r2, #80	; 0x50
    558a:	movs	r1, #0
    558c:	bl	b1ec <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    5590:	mov	r0, r6
    5592:	pop	{r4, r5, r6, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5594:	ldr	r0, [r1, #80]	; 0x50
    5596:	cbz	r0, 55a6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x5e>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    5598:	add.w	r4, r2, r2, lsl #2
    559c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    559e:	movs	r3, #0
    55a0:	bl	710 <ExFatFile::seekSet(unsigned long long)>
    55a4:	b.n	5566 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
    55a6:	add.w	r4, r4, r4, lsl #2
    55aa:	mov	r0, r1
    55ac:	bl	5318 <MTPStorage_SD::OpenIndex() [clone .part.38] [clone .constprop.59]>
    55b0:	ldr	r0, [r5, #76]	; 0x4c
    55b2:	lsls	r2, r4, #4
    55b4:	mov	r1, r2
    55b6:	cmp	r0, #0
    55b8:	bne.n	5562 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    55ba:	ldr	r0, [r5, #80]	; 0x50
    55bc:	cmp	r0, #0
    55be:	bne.n	559e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x56>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    55c0:	mov	r0, r6
    55c2:	pop	{r4, r5, r6, pc}

000055c4 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    55c4:	push	{r4, r5, lr}
    while (true) {
      if (next_ == 0) return 0;
    55c6:	ldr.w	r5, [r0, #260]	; 0x104
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    55ca:	sub	sp, #84	; 0x54
    while (true) {
      if (next_ == 0) return 0;
    55cc:	cbz	r5, 561a <MTPStorage_SD::GetNextObjectHandle()+0x56>
    55ce:	mov	r4, r0
    55d0:	b.n	55e4 <MTPStorage_SD::GetNextObjectHandle()+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    55d2:	ldr	r3, [sp, #8]
    55d4:	str.w	r3, [r4, #260]	; 0x104
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    55d8:	ldrb.w	r3, [sp, #14]
    55dc:	cbnz	r3, 5614 <MTPStorage_SD::GetNextObjectHandle()+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    55de:	ldr.w	r5, [r4, #260]	; 0x104
    55e2:	cbz	r5, 561a <MTPStorage_SD::GetNextObjectHandle()+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    55e4:	mov	r2, r5
    55e6:	mov	r1, r4
    55e8:	mov	r0, sp
    55ea:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    55ee:	ldrb.w	r2, [r4, #264]	; 0x108
    55f2:	cmp	r2, #0
    55f4:	bne.n	55d2 <MTPStorage_SD::GetNextObjectHandle()+0xe>
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    55f6:	ldr.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    55fa:	ldr.w	r1, [r4, #252]	; 0xfc
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    55fe:	adds	r3, #1
    5600:	str.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    5604:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    5606:	ldrb.w	r3, [sp, #14]
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
    560a:	it	cs
    560c:	strcs.w	r2, [r4, #260]	; 0x104
      }
      if (r.name[0]) return ret;
    5610:	cmp	r3, #0
    5612:	beq.n	55de <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    }
  }
    5614:	mov	r0, r5
    5616:	add	sp, #84	; 0x54
    5618:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    561a:	movs	r5, #0
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    561c:	mov	r0, r5
    561e:	add	sp, #84	; 0x54
    5620:	pop	{r4, r5, pc}
    5622:	nop

00005624 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    5624:	push	{r4, r5, r6, lr}
    5626:	sub	sp, #80	; 0x50
    5628:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    562a:	mov	r2, r1
    562c:	mov	r1, r0
    562e:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    5630:	mov	r4, r3
    5632:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    5634:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    5638:	mov	r0, r6
    563a:	add.w	r1, sp, #14
    563e:	bl	b6d4 <strcpy>
    *parent = r.parent;
    5642:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5644:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    5648:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    564a:	cbnz	r3, 5654 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    564c:	ldr	r3, [sp, #4]
    564e:	str	r3, [r4, #0]
  }
    5650:	add	sp, #80	; 0x50
    5652:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5654:	mov.w	r3, #4294967295
    5658:	str	r3, [r4, #0]
  }
    565a:	add	sp, #80	; 0x50
    565c:	pop	{r4, r5, r6, pc}
    565e:	nop

00005660 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    5660:	push	{lr}
    5662:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    5664:	mov	r2, r1
    5666:	mov	r1, r0
    5668:	mov	r0, sp
    566a:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    566e:	ldr	r0, [sp, #4]
    5670:	add	sp, #84	; 0x54
    5672:	ldr.w	pc, [sp], #4
    5676:	nop

00005678 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    5678:	ldr.w	r3, [r0, #156]	; 0x9c
    567c:	push	{r4, r5, lr}
    567e:	mov	r4, r0
    5680:	sub	sp, #84	; 0x54
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    5682:	cbz	r3, 56b4 <MTPStorage_SD::close()+0x3c>
    5684:	ldr	r5, [r3, #28]
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    5686:	add.w	r0, r4, #100	; 0x64
    568a:	bl	3814 <FsBaseFile::close()>
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    568e:	ldr.w	r2, [r4, #248]	; 0xf8
    5692:	mov	r0, sp
    5694:	mov	r1, r4
    5696:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    569a:	mov	r2, sp
    569c:	ldr.w	r1, [r4, #248]	; 0xf8
    56a0:	mov	r0, r4
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    56a2:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    56a4:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    56a8:	mvn.w	r3, #1
    56ac:	str.w	r3, [r4, #248]	; 0xf8
  }
    56b0:	add	sp, #84	; 0x54
    56b2:	pop	{r4, r5, pc}
    56b4:	ldr.w	r5, [r0, #160]	; 0xa0
    56b8:	cmp	r5, #0
    56ba:	beq.n	5686 <MTPStorage_SD::close()+0xe>
    56bc:	ldr	r5, [r5, #16]
    56be:	b.n	5686 <MTPStorage_SD::close()+0xe>

000056c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    56c0:	cbz	r1, 5710 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    56c2:	push	{r4, r5, r6, lr}
    56c4:	sub	sp, #80	; 0x50
    56c6:	mov	r5, r2
    56c8:	mov	r4, r0
    56ca:	mov	r6, r3
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    56cc:	mov	r2, r1
    56ce:	mov	r1, r0
    56d0:	mov	r0, sp
    56d2:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    56d6:	mov	r3, r6
    56d8:	mov	r0, r4
    56da:	mov	r2, r5
    56dc:	ldr	r1, [sp, #0]
    56de:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    56e2:	mov	r0, r5
    56e4:	bl	b7c0 <strlen>
    56e8:	adds	r3, r5, r0
    56ea:	mov	r4, r0
    56ec:	ldrb.w	r3, [r3, #-1]
    56f0:	cmp	r3, #47	; 0x2f
    56f2:	beq.n	56fc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    56f4:	ldr	r3, [pc, #48]	; (5728 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    56f6:	adds	r4, #1
    56f8:	ldrh	r3, [r3, #0]
    56fa:	strh	r3, [r5, r0]
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    56fc:	add.w	r0, sp, #14
    5700:	bl	b7c0 <strlen>
    5704:	add	r0, r4
    5706:	adds	r0, #1
    5708:	cmp	r0, r6
    570a:	bcc.n	5718 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    570c:	add	sp, #80	; 0x50
    570e:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    5710:	ldr	r3, [pc, #20]	; (5728 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    5712:	ldrh	r3, [r3, #0]
    5714:	strh	r3, [r2, #0]
    5716:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    5718:	add.w	r1, sp, #14
    571c:	mov	r0, r5
    571e:	bl	b694 <strcat>
    }
  }
    5722:	add	sp, #80	; 0x50
    5724:	pop	{r4, r5, r6, pc}
    5726:	nop
    5728:	.word	0x20000190

0000572c <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    572c:	adds	r2, r1, #1
    572e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5732:	mov	r6, r1
    5734:	sub	sp, #496	; 0x1f0
    5736:	mov	r4, r0
    5738:	ite	ne
    573a:	movne	r5, r1
    573c:	moveq	r5, #0
    573e:	b.n	5750 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    5740:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    5742:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    5744:	cbz	r3, 5770 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    5746:	ldr	r3, [r4, #0]
    5748:	ldr	r3, [r3, #52]	; 0x34
    574a:	blx	r3
    574c:	cmp	r0, #0
    574e:	beq.n	5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    5750:	mov	r2, r5
    5752:	mov	r1, r4
    5754:	mov	r0, sp
    5756:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    575a:	movs	r2, #80	; 0x50
    575c:	mov	r1, sp
    575e:	add.w	r0, sp, r2
    5762:	bl	7fc4 <memcpy>
      if (!r.isdir) break;
    5766:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    576a:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    576c:	cmp	r3, #0
    576e:	bne.n	5740 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    5770:	adds	r3, r6, #1
    5772:	beq.n	5836 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    5774:	mov.w	r3, #256	; 0x100
    5778:	mov	r1, r6
    577a:	mov	r0, r4
    577c:	add	r2, sp, #240	; 0xf0
    577e:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    5782:	ldrb.w	r7, [sp, #92]	; 0x5c
    5786:	ldr	r3, [pc, #296]	; (58b0 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    5788:	cmp	r7, #0
    578a:	beq.n	583e <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    578c:	ldr.w	r7, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    5790:	cbz	r7, 57fe <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    5792:	add	r5, sp, #160	; 0xa0
    5794:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5798:	add	r2, sp, #240	; 0xf0
    579a:	mov	r1, r7
    579c:	mov	r0, r5
    579e:	mov	r3, lr
    57a0:	strb.w	lr, [r5]
    57a4:	strb.w	lr, [r5, #1]
    57a8:	strb.w	lr, [r5, #2]
    57ac:	bl	2188 <FatFile::open(FatVolume*, char const*, int)>
    57b0:	cbz	r0, 5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    57b2:	mov	r0, r5
    57b4:	bl	2588 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    57b8:	cbz	r0, 5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    57ba:	movs	r3, #0
    int p = r.parent;
    57bc:	ldr.w	r8, [sp, #80]	; 0x50
    WriteIndexRecord(object, r);
    57c0:	add	r2, sp, #80	; 0x50
    57c2:	mov	r1, r6
    57c4:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    57c6:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    57ca:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    57ce:	mov	r2, r8
    57d0:	mov	r1, r4
    57d2:	mov	r0, r5
    57d4:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    57d8:	ldr	r7, [r5, #4]
    57da:	cmp	r6, r7
    57dc:	beq.n	5828 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    57de:	cbz	r7, 5836 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    57e0:	mov	r2, r7
    57e2:	mov	r1, r4
    57e4:	mov	r0, sp
    57e6:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    57ea:	movs	r2, #80	; 0x50
    57ec:	mov	r1, sp
    57ee:	mov	r0, r5
    57f0:	bl	7fc4 <memcpy>
        if (tmp.sibling == object) 
    57f4:	ldr	r3, [r5, #8]
    57f6:	cmp	r6, r3
    57f8:	beq.n	5894 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    57fa:	mov	r7, r3
    57fc:	b.n	57de <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    57fe:	ldr.w	r1, [r3, #1148]	; 0x47c
    5802:	cbz	r1, 5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5804:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5806:	add	r2, sp, #240	; 0xf0
    5808:	mov	r3, r7
    580a:	strb.w	r7, [r5, #49]	; 0x31
    580e:	mov	r0, r5
    5810:	strb.w	r7, [r5, #50]	; 0x32
    5814:	strb.w	r7, [r5, #51]	; 0x33
    5818:	bl	cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    581c:	cmp	r0, #0
    581e:	bne.n	58a6 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    5820:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    5822:	add	sp, #496	; 0x1f0
    5824:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    5828:	ldr	r3, [sp, #88]	; 0x58
      WriteIndexRecord(p, tmp);
    582a:	mov	r2, r5
    582c:	mov	r1, r8
    582e:	mov	r0, r4
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    5830:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    5832:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    5836:	movs	r0, #1
  }
    5838:	add	sp, #496	; 0x1f0
    583a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    583e:	ldr.w	lr, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    5842:	cmp.w	lr, #0
    5846:	beq.n	5868 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    5848:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    584a:	add	r2, sp, #240	; 0xf0
    584c:	mov	r1, lr
    584e:	movs	r3, #1
    5850:	mov	r0, r5
    5852:	strb	r7, [r5, #0]
    5854:	strb	r7, [r5, #1]
    5856:	strb	r7, [r5, #2]
    5858:	bl	2188 <FatFile::open(FatVolume*, char const*, int)>
    585c:	cmp	r0, #0
    585e:	beq.n	5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5860:	mov	r0, r5
    5862:	bl	3210 <FatFile::remove()>
    5866:	b.n	57b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    5868:	ldr.w	r1, [r3, #1148]	; 0x47c
    586c:	cmp	r1, #0
    586e:	beq.n	5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5870:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5872:	add	r2, sp, #240	; 0xf0
    5874:	movs	r3, #1
    5876:	strb.w	lr, [r5, #49]	; 0x31
    587a:	mov	r0, r5
    587c:	strb.w	lr, [r5, #50]	; 0x32
    5880:	strb.w	lr, [r5, #51]	; 0x33
    5884:	bl	cf4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5888:	cmp	r0, #0
    588a:	beq.n	5820 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    588c:	mov	r0, r5
    588e:	bl	13a4 <ExFatFile::remove()>
    5892:	b.n	57b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    5894:	ldr	r3, [sp, #88]	; 0x58
          WriteIndexRecord(c, tmp);
    5896:	mov	r0, r4
    5898:	mov	r2, r5
    589a:	mov	r1, r7
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    589c:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    589e:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    58a2:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    58a4:	b.n	5822 <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    58a6:	mov	r0, r5
    58a8:	bl	147c <ExFatFile::rmdir()>
    58ac:	b.n	57b8 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    58ae:	nop
    58b0:	.word	0x20003890

000058b4 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    58b4:	push	{r4, r5, r6, lr}
    58b6:	sub.w	sp, sp, #648	; 0x288
    58ba:	mov	r4, r0
    58bc:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    58be:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    58c2:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    58c4:	add	r2, sp, #136	; 0x88
    58c6:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    58ca:	mov	r2, r5
    58cc:	mov	r1, r4
    58ce:	add	r0, sp, #56	; 0x38
    58d0:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    58d4:	mov	r1, r6
    58d6:	add.w	r0, sp, #70	; 0x46
    58da:	bl	b6d4 <strcpy>
    WriteIndexRecord(handle, p1);
    58de:	mov	r0, r4
    58e0:	add	r2, sp, #56	; 0x38
    58e2:	mov	r1, r5
    58e4:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    58e8:	mov	r0, r4
    58ea:	mov.w	r3, #256	; 0x100
    58ee:	mov	r1, r5
    58f0:	add	r2, sp, #392	; 0x188
    58f2:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    58f6:	ldr	r3, [pc, #116]	; (596c <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    58f8:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    58fc:	cbz	r4, 5934 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    58fe:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    5900:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5904:	add	r2, sp, #136	; 0x88
    5906:	mov	r0, sp
    5908:	mov	r1, r4
    590a:	mov	r3, r5
    590c:	strb.w	r5, [sp]
    5910:	strb.w	r5, [sp, #1]
    5914:	strb.w	r5, [sp, #2]
    5918:	bl	20c0 <FatFile::open(FatFile*, char const*, int)>
    591c:	cbnz	r0, 5924 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd.rename(oldName,newName);
  }
    591e:	add.w	sp, sp, #648	; 0x288
    5922:	pop	{r4, r5, r6, pc}
    5924:	add	r2, sp, #392	; 0x188
    5926:	mov	r1, r4
    5928:	mov	r0, sp
    592a:	bl	23a4 <FatFile::rename(FatFile*, char const*)>
    592e:	add.w	sp, sp, #648	; 0x288
    5932:	pop	{r4, r5, r6, pc}
    5934:	ldr.w	r1, [r3, #1148]	; 0x47c
    5938:	cmp	r1, #0
    593a:	beq.n	591e <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    593c:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5940:	add	r2, sp, #136	; 0x88
    5942:	mov	r3, r4
    5944:	mov	r0, sp
    5946:	mov	r1, r5
    5948:	strb.w	r4, [sp, #49]	; 0x31
    594c:	strb.w	r4, [sp, #50]	; 0x32
    5950:	strb.w	r4, [sp, #51]	; 0x33
    5954:	bl	bf0 <ExFatFile::open(ExFatFile*, char const*, int)>
    5958:	cmp	r0, #0
    595a:	beq.n	591e <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    595c:	add	r2, sp, #392	; 0x188
    595e:	mov	r1, r5
    5960:	mov	r0, sp
    5962:	bl	18c8 <ExFatFile::rename(ExFatFile*, char const*)>
    5966:	add.w	sp, sp, #648	; 0x288
    596a:	pop	{r4, r5, r6, pc}
    596c:	.word	0x20003890

00005970 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    5970:	push	{r4, r5, r6, lr}
    5972:	sub.w	sp, sp, #728	; 0x2d8
    5976:	mov	r5, r0
    5978:	mov	r6, r1
    597a:	mov	r4, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    597c:	mov.w	r3, #256	; 0x100
    5980:	add	r2, sp, #216	; 0xd8
    5982:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    5986:	mov	r2, r6
    5988:	mov	r1, r5
    598a:	add	r0, sp, #56	; 0x38
    598c:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    5990:	adds	r3, r4, #1
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    5992:	mov	r1, r5
    5994:	add	r0, sp, #136	; 0x88
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    5996:	it	eq
    5998:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    599a:	mov	r2, r4
    599c:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    59a0:	ldr	r3, [sp, #140]	; 0x8c
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    59a2:	add	r2, sp, #56	; 0x38
    59a4:	mov	r1, r6
    59a6:	mov	r0, r5
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    59a8:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;
    59aa:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    59ac:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    59ae:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    59b2:	mov	r1, r4
    59b4:	add	r2, sp, #136	; 0x88
    59b6:	mov	r0, r5
    59b8:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    59bc:	mov.w	r3, #256	; 0x100
    59c0:	mov	r1, r6
    59c2:	mov	r0, r5
    59c4:	add	r2, sp, #472	; 0x1d8
    59c6:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    59ca:	ldr	r3, [pc, #116]	; (5a40 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    59cc:	ldr.w	r4, [r3, #1144]	; 0x478
    59d0:	cbz	r4, 5a08 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    59d2:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    59d4:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    59d8:	add	r2, sp, #216	; 0xd8
    59da:	mov	r0, sp
    59dc:	mov	r1, r4
    59de:	mov	r3, r5
    59e0:	strb.w	r5, [sp]
    59e4:	strb.w	r5, [sp, #1]
    59e8:	strb.w	r5, [sp, #2]
    59ec:	bl	20c0 <FatFile::open(FatFile*, char const*, int)>
    59f0:	cbnz	r0, 59f8 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd.rename(oldName,newName);
  }
    59f2:	add.w	sp, sp, #728	; 0x2d8
    59f6:	pop	{r4, r5, r6, pc}
    59f8:	add	r2, sp, #472	; 0x1d8
    59fa:	mov	r1, r4
    59fc:	mov	r0, sp
    59fe:	bl	23a4 <FatFile::rename(FatFile*, char const*)>
    5a02:	add.w	sp, sp, #728	; 0x2d8
    5a06:	pop	{r4, r5, r6, pc}
    5a08:	ldr.w	r1, [r3, #1148]	; 0x47c
    5a0c:	cmp	r1, #0
    5a0e:	beq.n	59f2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    5a10:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5a14:	add	r2, sp, #216	; 0xd8
    5a16:	mov	r3, r4
    5a18:	mov	r0, sp
    5a1a:	mov	r1, r5
    5a1c:	strb.w	r4, [sp, #49]	; 0x31
    5a20:	strb.w	r4, [sp, #50]	; 0x32
    5a24:	strb.w	r4, [sp, #51]	; 0x33
    5a28:	bl	bf0 <ExFatFile::open(ExFatFile*, char const*, int)>
    5a2c:	cmp	r0, #0
    5a2e:	beq.n	59f2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    5a30:	add	r2, sp, #472	; 0x1d8
    5a32:	mov	r1, r5
    5a34:	mov	r0, sp
    5a36:	bl	18c8 <ExFatFile::rename(ExFatFile*, char const*)>
    5a3a:	add.w	sp, sp, #728	; 0x2d8
    5a3e:	pop	{r4, r5, r6, pc}
    5a40:	.word	0x20003890

00005a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    5a44:	ldr.w	r3, [r0, #248]	; 0xf8
    5a48:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    5a4a:	push	{r4, r5, r6, r7, lr}
    5a4c:	sub	sp, #260	; 0x104
    if (open_file_ == i && mode_ == mode) return;
    5a4e:	beq.n	5a8c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x48>
    5a50:	mov	r4, r0
    char filename[256];
    ConstructFilename(i, filename, 256);
    5a52:	mov.w	r3, #256	; 0x100
    5a56:	mov	r6, r2
    5a58:	mov	r2, sp
    5a5a:	mov	r5, r1
    5a5c:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5a60:	ldr.w	r3, [r4, #156]	; 0x9c
    mtp_lock_storage(true);
    if(file_) file_.close();
    5a64:	add.w	r7, r4, #100	; 0x64
    5a68:	cbz	r3, 5a96 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x52>
    5a6a:	mov	r0, r7
    5a6c:	bl	3814 <FsBaseFile::close()>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    5a70:	ldr	r3, [pc, #44]	; (5aa0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x5c>)
    5a72:	ldr	r1, [r3, #0]
    5a74:	cbz	r1, 5a80 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5a76:	mov	r2, sp
    5a78:	mov	r0, r7
    5a7a:	mov	r3, r6
    5a7c:	bl	38c4 <FsBaseFile::open(FsVolume*, char const*, int)>
    file_.open(filename,mode);
    open_file_ = i;
    5a80:	str.w	r5, [r4, #248]	; 0xf8
    mode_ = mode;
    5a84:	str.w	r6, [r4, #244]	; 0xf4
    mtp_lock_storage(false);
  }
    5a88:	add	sp, #260	; 0x104
    5a8a:	pop	{r4, r5, r6, r7, pc}
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    5a8c:	ldr.w	r3, [r0, #244]	; 0xf4
    5a90:	cmp	r3, r2
    5a92:	bne.n	5a50 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    5a94:	b.n	5a88 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5a96:	ldr.w	r3, [r4, #160]	; 0xa0
    5a9a:	cmp	r3, #0
    5a9c:	bne.n	5a6a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x26>
    5a9e:	b.n	5a70 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c>
    5aa0:	.word	0x20003844

00005aa4 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5aa4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    5aa8:	cmp.w	r1, #4294967295
    5aac:	ite	ne
    5aae:	movne	r6, r1
    5ab0:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5ab2:	sub	sp, #476	; 0x1dc
    5ab4:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    5ab6:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5ab8:	mov	r4, r0
    5aba:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    5abc:	add	r0, sp, #56	; 0x38
    5abe:	mov	r2, r6
    5ac0:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    5ac4:	mov	r0, r5
    5ac6:	bl	b7c0 <strlen>
    5aca:	cmp	r0, #62	; 0x3e
    5acc:	bls.n	5ad8 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    5ace:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    5ad0:	mov	r0, r5
    5ad2:	add	sp, #476	; 0x1dc
    5ad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    5ad8:	adds	r2, r0, #1
    5ada:	mov	r1, r5
    5adc:	add.w	r0, sp, #150	; 0x96
    r.parent = parent;
    r.child = 0;
    5ae0:	mov.w	r8, #0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    5ae4:	bl	7fc4 <memcpy>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5ae8:	ldr.w	r5, [r4, #252]	; 0xfc
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    5aec:	ldr	r3, [sp, #60]	; 0x3c
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    5aee:	mov.w	r9, #1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5af2:	adds	r2, r5, #1
    WriteIndexRecord(new_record, r);
    5af4:	mov	r1, r5
    5af6:	mov	r0, r4
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    5af8:	str	r3, [sp, #144]	; 0x90
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5afa:	str.w	r2, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    5afe:	add	r2, sp, #136	; 0x88
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    5b00:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    5b02:	strb.w	r7, [sp, #148]	; 0x94
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    5b06:	str.w	r8, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    5b0a:	strb.w	r9, [sp, #149]	; 0x95
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    5b0e:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    5b12:	mov	r0, r4
    5b14:	add	r2, sp, #56	; 0x38
    5b16:	mov	r1, r6
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    5b18:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    5b1a:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    5b1e:	mov	r0, r4
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    5b20:	cbnz	r7, 5b34 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x90>
      sd.mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    5b22:	movw	r2, #16898	; 0x4202
    5b26:	mov	r1, r5
    5b28:	bl	5a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    5b2c:	mov	r0, r5
    5b2e:	add	sp, #476	; 0x1dc
    5b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    5b34:	mov.w	r3, #256	; 0x100
    5b38:	mov	r1, r5
    5b3a:	add	r2, sp, #216	; 0xd8
    5b3c:	bl	56c0 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5b40:	ldr	r3, [pc, #68]	; (5b88 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe4>)
    5b42:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5b46:	cbz	r4, 5b64 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xc0>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    5b48:	mov	r3, r9
    5b4a:	add	r2, sp, #216	; 0xd8
    5b4c:	addw	r1, r4, #1084	; 0x43c
    5b50:	mov	r0, sp
    5b52:	strb.w	r8, [sp]
    5b56:	strb.w	r8, [sp, #1]
    5b5a:	strb.w	r8, [sp, #2]
    5b5e:	bl	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)>
    5b62:	b.n	5ad0 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    5b64:	ldr.w	r1, [r3, #1148]	; 0x47c
    5b68:	cmp	r1, #0
    5b6a:	beq.n	5ad0 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    5b6c:	mov	r3, r9
    5b6e:	add	r2, sp, #216	; 0xd8
    5b70:	add.w	r1, r1, #1088	; 0x440
    5b74:	mov	r0, sp
    5b76:	strb.w	r4, [sp, #49]	; 0x31
    5b7a:	strb.w	r4, [sp, #50]	; 0x32
    5b7e:	strb.w	r4, [sp, #51]	; 0x33
    5b82:	bl	17ec <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5b86:	b.n	5ad0 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    5b88:	.word	0x20003890

00005b8c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    5b8c:	push	{r3, r4, r5, r6, r7, lr}
    5b8e:	mov	r4, r0
    5b90:	mov	r7, r2
    OpenFileByIndex(handle);
    5b92:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    5b94:	mov	r5, r3
    5b96:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    5b98:	bl	5a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    5b9c:	ldr.w	r0, [r4, #156]	; 0x9c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    5ba0:	cbz	r0, 5bcc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x40>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5ba2:	mov	r1, r7
    5ba4:	bl	25e4 <FatFile::seekSet(unsigned long)>
    5ba8:	ldr.w	r0, [r4, #156]	; 0x9c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    5bac:	cbz	r0, 5bba <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2e>
    5bae:	mov	r2, r6
    5bb0:	mov	r1, r5
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    5bb2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5bb6:	b.w	21a4 <FatFile::read(void*, unsigned int)>
    5bba:	ldr.w	r0, [r4, #160]	; 0xa0
    5bbe:	cbz	r0, 5be0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x54>
    5bc0:	mov	r2, r6
    5bc2:	mov	r1, r5
    5bc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5bc8:	b.w	53c <ExFatFile::read(void*, unsigned int)>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    5bcc:	ldr.w	r1, [r4, #160]	; 0xa0
    5bd0:	cbz	r1, 5bde <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x52>
    5bd2:	mov	r3, r0
    5bd4:	mov	r2, r7
    5bd6:	mov	r0, r1
    5bd8:	bl	710 <ExFatFile::seekSet(unsigned long long)>
    5bdc:	b.n	5ba8 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1c>
    5bde:	pop	{r3, r4, r5, r6, r7, pc}
    5be0:	pop	{r3, r4, r5, r6, r7, pc}
    5be2:	nop

00005be4 <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    5be4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5be8:	sub	sp, #164	; 0xa4
    Record record = ReadIndexRecord(i);
    5bea:	mov	r2, r1
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    5bec:	mov	r4, r0
    5bee:	mov	r5, r1
    Record record = ReadIndexRecord(i);
    5bf0:	mov	r1, r0
    5bf2:	mov	r0, sp
    5bf4:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    5bf8:	ldrb.w	r3, [sp, #12]
    5bfc:	cbz	r3, 5c04 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    5bfe:	ldrb.w	r2, [sp, #13]
    5c02:	cbz	r2, 5c0a <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    5c04:	add	sp, #164	; 0xa4
    5c06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    5c0a:	mov	r1, r5
    5c0c:	mov	r0, r4
    5c0e:	bl	5a44 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5c12:	ldr.w	r3, [r4, #156]	; 0x9c
    5c16:	cmp	r3, #0
    5c18:	beq.n	5cdc <MTPStorage_SD::ScanDir(unsigned long)+0xf8>
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    5c1a:	mov.w	r9, #0
    5c1e:	add.w	r6, r4, #180	; 0xb4
    5c22:	add.w	r8, r4, #100	; 0x64
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    5c26:	mov	r7, r9
    5c28:	b.n	5c58 <MTPStorage_SD::ScanDir(unsigned long)+0x74>

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    5c2a:	str	r7, [sp, #84]	; 0x54
        r.scanned = false;
    5c2c:	strb.w	r7, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5c30:	strb.w	r7, [sp, #94]	; 0x5e
    return m_fFile ? m_fFile->getName(name, len) :
    5c34:	movs	r2, #64	; 0x40
    5c36:	add.w	r1, sp, #94	; 0x5e
    5c3a:	bl	2e84 <FatFile::getName(char*, unsigned int)>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5c3e:	ldr.w	r1, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    5c42:	mov	r0, r4
    5c44:	add	r2, sp, #80	; 0x50
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5c46:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
    5c48:	mov	r9, r1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5c4a:	str.w	r3, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    5c4e:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
    5c52:	mov	r0, r6
    5c54:	bl	3814 <FsBaseFile::close()>
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    5c58:	movs	r2, #0
    5c5a:	mov	r1, r8
    5c5c:	mov	r0, r6
    5c5e:	bl	3944 <FsBaseFile::openNext(FsBaseFile*, int)>
    5c62:	ldr.w	r0, [r4, #236]	; 0xec
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5c66:	cbz	r0, 5c90 <MTPStorage_SD::ScanDir(unsigned long)+0xac>
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    5c68:	str	r5, [sp, #80]	; 0x50
        r.sibling = sibling;
    5c6a:	str.w	r9, [sp, #88]	; 0x58
    5c6e:	ldrb	r3, [r0, #0]
    5c70:	and.w	r3, r3, #112	; 0x70
        r.isdir = child_.isDirectory();
    5c74:	cmp	r3, #0
    5c76:	ite	ne
    5c78:	movne	r2, #1
    5c7a:	moveq	r2, #0
    5c7c:	strb.w	r2, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    5c80:	bne.n	5c2a <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    5c82:	ldr	r2, [r0, #28]
        r.scanned = false;
    5c84:	strb.w	r3, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5c88:	strb.w	r3, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    5c8c:	str	r2, [sp, #84]	; 0x54
    5c8e:	b.n	5c34 <MTPStorage_SD::ScanDir(unsigned long)+0x50>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5c90:	ldr.w	r3, [r4, #240]	; 0xf0
    5c94:	cbz	r3, 5ce6 <MTPStorage_SD::ScanDir(unsigned long)+0x102>
    5c96:	ldrb.w	r2, [r3, #49]	; 0x31
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    5c9a:	str	r5, [sp, #80]	; 0x50
    5c9c:	and.w	r2, r2, #80	; 0x50
        r.sibling = sibling;
    5ca0:	str.w	r9, [sp, #88]	; 0x58
        r.isdir = child_.isDirectory();
    5ca4:	cmp	r2, #0
    5ca6:	ite	ne
    5ca8:	movne	r1, #1
    5caa:	moveq	r1, #0
    5cac:	strb.w	r1, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    5cb0:	bne.n	5cd0 <MTPStorage_SD::ScanDir(unsigned long)+0xec>
    5cb2:	ldr	r1, [r3, #16]
        r.scanned = false;
    5cb4:	strb.w	r2, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5cb8:	strb.w	r2, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    5cbc:	str	r1, [sp, #84]	; 0x54
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    5cbe:	cmp	r3, #0
    5cc0:	beq.n	5c3e <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    5cc2:	mov	r0, r3
    5cc4:	movs	r2, #64	; 0x40
    5cc6:	add.w	r1, sp, #94	; 0x5e
    5cca:	bl	370 <ExFatFile::getName(char*, unsigned int)>
    5cce:	b.n	5c3e <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    5cd0:	str	r0, [sp, #84]	; 0x54
        r.scanned = false;
    5cd2:	strb.w	r0, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5cd6:	strb.w	r0, [sp, #94]	; 0x5e
    5cda:	b.n	5cbe <MTPStorage_SD::ScanDir(unsigned long)+0xda>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5cdc:	ldr.w	r3, [r4, #160]	; 0xa0
    5ce0:	cmp	r3, #0
    5ce2:	bne.n	5c1a <MTPStorage_SD::ScanDir(unsigned long)+0x36>
    5ce4:	b.n	5c04 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    5ce6:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    5ce8:	mov	r2, sp
    5cea:	mov	r1, r5
    5cec:	mov	r0, r4
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    5cee:	str.w	r9, [sp, #4]
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    5cf2:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    5cf6:	bl	544c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5cfa:	b.n	5c04 <MTPStorage_SD::ScanDir(unsigned long)+0x20>

00005cfc <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]>:
    }
  }

  void MTPStorage_SD::ScanAll() 
    5cfc:	push	{r3, r4, r5, lr}
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    5cfe:	movs	r2, #1
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    5d00:	ldrb.w	r3, [r0, #256]	; 0x100
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    5d04:	mov	r5, r0
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    5d06:	strb.w	r2, [r0, #257]	; 0x101
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    5d0a:	cbz	r3, 5d28 <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]+0x2c>
  {
    if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    5d0c:	ldr.w	r3, [r5, #252]	; 0xfc
    5d10:	cbz	r3, 5d26 <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]+0x2a>
    5d12:	movs	r4, #0
    5d14:	mov	r1, r4
    5d16:	mov	r0, r5
    5d18:	bl	5be4 <MTPStorage_SD::ScanDir(unsigned long)>
    5d1c:	adds	r4, #1
    5d1e:	ldr.w	r3, [r5, #252]	; 0xfc
    5d22:	cmp	r3, r4
    5d24:	bhi.n	5d14 <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]+0x18>
    5d26:	pop	{r3, r4, r5, pc}
    5d28:	bl	54b4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]>
    5d2c:	b.n	5d0c <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]+0x10>
    5d2e:	nop

00005d30 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    5d30:	ldrb.w	r3, [r0, #256]	; 0x100
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    5d34:	push	{r4, r5, lr}
    5d36:	mov	r4, r0
    5d38:	sub	sp, #84	; 0x54
    5d3a:	mov	r5, r1
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    5d3c:	cbz	r3, 5d7e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4e>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    5d3e:	cbz	r5, 5d68 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x38>
    { if (parent == 0xFFFFFFFF) parent = 0;
    5d40:	adds	r3, r5, #1

      ScanDir(parent);
    5d42:	mov	r0, r4

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = 0;
    5d44:	it	eq
    5d46:	moveq	r5, #0

      ScanDir(parent);
    5d48:	mov	r1, r5
    5d4a:	bl	5be4 <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    5d4e:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    5d50:	mov	r2, r5
    5d52:	mov	r1, r4
    GenerateIndex();
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = 0;

      ScanDir(parent);
      follow_sibling_ = true;
    5d54:	strb.w	r3, [r4, #264]	; 0x108
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    5d58:	mov	r0, sp
    5d5a:	bl	5548 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5d5e:	ldr	r3, [sp, #4]
    5d60:	str.w	r3, [r4, #260]	; 0x104
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    5d64:	add	sp, #84	; 0x54
    5d66:	pop	{r4, r5, pc}
    }
  }

  void MTPStorage_SD::ScanAll() 
  {
    if (all_scanned_) return;
    5d68:	ldrb.w	r3, [r4, #257]	; 0x101
    5d6c:	cbz	r3, 5d84 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x54>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5d6e:	movs	r2, #0
      next_ = 1;
    5d70:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5d72:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    5d76:	str.w	r3, [r4, #260]	; 0x104
    }
  }
    5d7a:	add	sp, #84	; 0x54
    5d7c:	pop	{r4, r5, pc}
    5d7e:	bl	54b4 <MTPStorage_SD::GenerateIndex() [clone .part.39] [clone .constprop.58]>
    5d82:	b.n	5d3e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    5d84:	mov	r0, r4
    5d86:	bl	5cfc <MTPStorage_SD::ScanAll() [clone .part.42] [clone .constprop.55]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5d8a:	movs	r2, #0
      next_ = 1;
    5d8c:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5d8e:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    5d92:	str.w	r3, [r4, #260]	; 0x104
    5d96:	b.n	5d7a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>

00005d98 <_GLOBAL__sub_I__Z8dateTimePtS_Ph>:
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    5d98:	push	{r4, r5, r6, r7}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    5d9a:	ldr	r3, [pc, #60]	; (5dd8 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x40>)
    5d9c:	movs	r4, #0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5d9e:	movs	r6, #7
    5da0:	ldr	r2, [pc, #56]	; (5ddc <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x44>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    5da2:	movs	r5, #40	; 0x28
    5da4:	ldr	r1, [pc, #56]	; (5de0 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x48>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    5da6:	ldr	r7, [pc, #60]	; (5de4 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x4c>)
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    5da8:	mov	r0, r3
    5daa:	str.w	r2, [r3, #1160]	; 0x488
    5dae:	str.w	r1, [r3, #1172]	; 0x494
    5db2:	str.w	r7, [r3, #1180]	; 0x49c
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5db6:	str.w	r6, [r3, #1184]	; 0x4a0
    5dba:	strb.w	r5, [r3, #1195]	; 0x4ab
    5dbe:	str.w	r4, [r3, #1144]	; 0x478
    5dc2:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    5dc6:	strb.w	r4, [r3, #1168]	; 0x490
    5dca:	strb.w	r4, [r3, #1198]	; 0x4ae
    5dce:	ldr	r2, [pc, #24]	; (5de8 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x50>)
    5dd0:	ldr	r1, [pc, #24]	; (5dec <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x54>)
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    5dd2:	pop	{r4, r5, r6, r7}
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    5dd4:	b.w	9db0 <__aeabi_atexit>
    5dd8:	.word	0x20003890
    5ddc:	.word	0x200000d0
    5de0:	.word	0x20000078
    5de4:	.word	0x003d0900
    5de8:	.word	0x200008b8
    5dec:	.word	0x0000529d

00005df0 <MTPD::write(char const*, int) [clone .part.1]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5df0:	movw	r3, #9256	; 0x2428
    5df4:	ldr	r3, [r0, r3]
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    5df6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5dfa:	mov	r5, r1
    5dfc:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5dfe:	cbnz	r3, 5e08 <MTPD::write(char const*, int) [clone .part.1]+0x18>
    5e00:	ldr	r7, [pc, #104]	; (5e6c <MTPD::write(char const*, int) [clone .part.1]+0x7c>)
    5e02:	add.w	r2, r0, #544	; 0x220
    5e06:	str	r2, [r7, #0]
    5e08:	add	r3, r8
    5e0a:	movw	r2, #9256	; 0x2428
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e0e:	cmp.w	r8, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5e12:	str	r3, [r0, r2]
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e14:	ble.n	5e4e <MTPD::write(char const*, int) [clone .part.1]+0x5e>
    5e16:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { int ret=push_packet(tx_data_buffer,MTP_TX_SIZE);
    5e1a:	add.w	r6, r0, #544	; 0x220
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e1e:	movs	r4, #0
    5e20:	ldr	r7, [pc, #72]	; (5e6c <MTPD::write(char const*, int) [clone .part.1]+0x7c>)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5e22:	ldr	r3, [r7, #0]
    5e24:	rsb	r2, r4, r8
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    5e28:	mov	r1, r5
    5e2a:	rsb	sl, r3, r9
    5e2e:	mov	r0, r3
    5e30:	cmp	sl, r2
    5e32:	it	ge
    5e34:	movge	sl, r2
    5e36:	mov	r2, sl
          pos += to_copy;
    5e38:	add	r4, sl
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    5e3a:	bl	7fc4 <memcpy>
    5e3e:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    5e40:	add	r5, sl
          dst += to_copy;
    5e42:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e44:	cmp	r3, r9
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e46:	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e48:	beq.n	5e54 <MTPD::write(char const*, int) [clone .part.1]+0x64>
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e4a:	cmp	r8, r4
    5e4c:	bgt.n	5e22 <MTPD::write(char const*, int) [clone .part.1]+0x32>
    5e4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    5e52:	wfi
    5e54:	movs	r2, #60	; 0x3c
    5e56:	mov.w	r1, #512	; 0x200
    5e5a:	mov	r0, r6
    5e5c:	bl	7f38 <usb_mtp_send>
    5e60:	cmp	r0, #0
    5e62:	ble.n	5e52 <MTPD::write(char const*, int) [clone .part.1]+0x62>
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e64:	cmp	r8, r4
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { int ret=push_packet(tx_data_buffer,MTP_TX_SIZE);
//            printf("write %d\n",ret);
            dst=tx_data_buffer;
    5e66:	str	r6, [r7, #0]
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e68:	bgt.n	5e22 <MTPD::write(char const*, int) [clone .part.1]+0x32>
    5e6a:	b.n	5e4e <MTPD::write(char const*, int) [clone .part.1]+0x5e>
    5e6c:	.word	0x20003d40

00005e70 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    5e70:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    5e72:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    5e74:	sub	sp, #12
    5e76:	mov	r6, r0
    if (*str) 
    5e78:	cmp	r3, #0
    5e7a:	beq.n	5ef0 <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e7c:	movw	r5, #9252	; 0x2424
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    5e80:	mov	r0, r1
    5e82:	mov	r4, r1
    5e84:	bl	b7c0 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e88:	ldrb	r2, [r6, r5]
    5e8a:	adds	r0, #1
    5e8c:	strb.w	r0, [sp, #3]
    5e90:	cmp	r2, #0
    5e92:	beq.n	5f18 <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    5e94:	movw	r1, #9256	; 0x2428
    5e98:	ldr	r3, [r6, r1]
    5e9a:	adds	r3, #1
    5e9c:	str	r3, [r6, r1]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5e9e:	ldrb	r3, [r4, #0]
    5ea0:	cbz	r3, 5ee2 <MTPD::writestring(char const*)+0x72>
    5ea2:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5ea6:	movw	r5, #9256	; 0x2428
    5eaa:	add	r7, r6
    5eac:	add	r5, r6
    5eae:	b.n	5ebc <MTPD::writestring(char const*)+0x4c>
    5eb0:	ldr	r3, [r5, #0]
    5eb2:	adds	r3, #2
    5eb4:	str	r3, [r5, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5eb6:	ldrb.w	r3, [r4, #1]!
    5eba:	cbz	r3, 5eda <MTPD::writestring(char const*)+0x6a>
    5ebc:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ec0:	cmp	r2, #0
    5ec2:	bne.n	5eb0 <MTPD::writestring(char const*)+0x40>
    5ec4:	movs	r2, #2
    5ec6:	add.w	r1, sp, #6
    5eca:	mov	r0, r6
    5ecc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5ed0:	ldrb.w	r3, [r4, #1]!
    5ed4:	ldrb	r2, [r7, #0]
    5ed6:	cmp	r3, #0
    5ed8:	bne.n	5ebc <MTPD::writestring(char const*)+0x4c>
    5eda:	movs	r3, #0
    5edc:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ee0:	cbz	r2, 5f2e <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    5ee2:	movw	r2, #9256	; 0x2428
    5ee6:	ldr	r3, [r6, r2]
    5ee8:	adds	r3, #2
    5eea:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5eec:	add	sp, #12
    5eee:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ef0:	movw	r2, #9252	; 0x2424
    5ef4:	strb.w	r3, [sp, #2]
    5ef8:	ldrb	r3, [r0, r2]
    5efa:	cbz	r3, 5f0a <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    5efc:	movw	r2, #9256	; 0x2428
    5f00:	ldr	r3, [r0, r2]
    5f02:	adds	r3, #1
    5f04:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5f06:	add	sp, #12
    5f08:	pop	{r4, r5, r6, r7, pc}
    5f0a:	movs	r2, #1
    5f0c:	add.w	r1, sp, #2
    5f10:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    5f14:	add	sp, #12
    5f16:	pop	{r4, r5, r6, r7, pc}
    5f18:	movs	r2, #1
    5f1a:	add.w	r1, sp, #3
    5f1e:	mov	r0, r6
    5f20:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5f24:	ldrb	r3, [r4, #0]
    5f26:	ldrb	r2, [r6, r5]
    5f28:	cmp	r3, #0
    5f2a:	bne.n	5ea2 <MTPD::writestring(char const*)+0x32>
    5f2c:	b.n	5eda <MTPD::writestring(char const*)+0x6a>
    5f2e:	mov	r0, r6
    5f30:	movs	r2, #2
    5f32:	add	r1, sp, #4
    5f34:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    } else 
    { write8(0);
    }
  }
    5f38:	add	sp, #12
    5f3a:	pop	{r4, r5, r6, r7, pc}

00005f3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>:
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5f3c:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f3e:	movw	r6, #9252	; 0x2424
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5f42:	sub	sp, #12
    5f44:	mov	r4, r0
    5f46:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f48:	ldrb	r3, [r0, r6]
    5f4a:	strh.w	r1, [sp, #4]
    5f4e:	cmp	r3, #0
    5f50:	beq.n	5fc4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x88>
      {
        write_length_ += len;
    5f52:	movw	r2, #9256	; 0x2428
    5f56:	movw	r1, #65535	; 0xffff
    5f5a:	ldr	r3, [r0, r2]
    5f5c:	strh.w	r1, [sp, #6]
    5f60:	adds	r3, #2
    5f62:	str	r3, [r0, r2]
    5f64:	movw	r2, #9256	; 0x2428
    5f68:	movs	r1, #0
    5f6a:	ldr	r3, [r4, r2]
    5f6c:	strb.w	r1, [sp, #2]
    5f70:	adds	r3, #2
    5f72:	str	r3, [r4, r2]
    5f74:	movw	r2, #9256	; 0x2428
    5f78:	ldr	r3, [r4, r2]
    5f7a:	adds	r3, #1
    5f7c:	str	r3, [r4, r2]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5f7e:	movw	r3, #54274	; 0xd402
    5f82:	cmp	r5, r3
    5f84:	beq.n	5fb2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f86:	movw	r3, #9252	; 0x2424
    5f8a:	movs	r2, #0
    5f8c:	ldrb	r3, [r4, r3]
    5f8e:	strb.w	r2, [sp, #3]
    5f92:	cbz	r3, 5fa2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x66>
      {
        write_length_ += len;
    5f94:	movw	r2, #9256	; 0x2428
    5f98:	ldr	r3, [r4, r2]
    5f9a:	adds	r3, #1
    5f9c:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5f9e:	add	sp, #12
    5fa0:	pop	{r4, r5, r6, r7, pc}
    5fa2:	mov	r0, r4
    5fa4:	movs	r2, #1
    5fa6:	add.w	r1, sp, #3
    5faa:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    5fae:	add	sp, #12
    5fb0:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    5fb2:	mov	r0, r4
    5fb4:	ldr	r1, [pc, #72]	; (6000 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    5fb6:	bl	5e70 <MTPD::writestring(char const*)>
    5fba:	ldr	r1, [pc, #68]	; (6000 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    5fbc:	mov	r0, r4
    5fbe:	bl	5e70 <MTPD::writestring(char const*)>
    5fc2:	b.n	5f86 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x4a>
    5fc4:	movs	r2, #2
    5fc6:	add	r1, sp, #4
    5fc8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    5fcc:	movw	r3, #65535	; 0xffff
    5fd0:	ldrb	r7, [r4, r6]
    5fd2:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5fd6:	cmp	r7, #0
    5fd8:	bne.n	5f64 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x28>
    5fda:	movs	r2, #2
    5fdc:	add.w	r1, sp, #6
    5fe0:	mov	r0, r4
    5fe2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    5fe6:	ldrb	r3, [r4, r6]
    5fe8:	strb.w	r7, [sp, #2]
    5fec:	cmp	r3, #0
    5fee:	bne.n	5f74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x38>
    5ff0:	movs	r2, #1
    5ff2:	add.w	r1, sp, #2
    5ff6:	mov	r0, r4
    5ff8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    5ffc:	b.n	5f7e <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x42>
    5ffe:	nop
    6000:	.word	0x200001cc

00006004 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    6004:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6008:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    600c:	sub	sp, #44	; 0x2c
    600e:	movs	r6, #100	; 0x64
    6010:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6012:	ldrb	r3, [r0, r4]
    6014:	strh.w	r6, [sp, #6]
    6018:	cmp	r3, #0
    601a:	beq.w	6154 <MTPD::WriteDescriptor()+0x150>
      {
        write_length_ += len;
    601e:	movw	r2, #9256	; 0x2428
    6022:	movs	r1, #6
    6024:	ldr	r3, [r0, r2]
    6026:	str	r1, [sp, #20]
    6028:	adds	r3, #2
    602a:	str	r3, [r0, r2]
    602c:	movw	r2, #9256	; 0x2428
    6030:	movs	r1, #100	; 0x64
    6032:	ldr	r3, [r5, r2]
    6034:	strh.w	r1, [sp, #4]
    6038:	adds	r3, #4
    603a:	str	r3, [r5, r2]
    603c:	movw	r2, #9256	; 0x2428
    6040:	ldr	r3, [r5, r2]
    6042:	adds	r3, #2
    6044:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6046:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    604a:	ldr	r1, [pc, #508]	; (6248 <MTPD::WriteDescriptor()+0x244>)
    604c:	mov	r0, r5
    604e:	bl	5e70 <MTPD::writestring(char const*)>
    6052:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6054:	ldrb	r3, [r5, r4]
    6056:	strh.w	r2, [sp, #2]
    605a:	cmp	r3, #0
    605c:	beq.w	6222 <MTPD::WriteDescriptor()+0x21e>
      {
        write_length_ += len;
    6060:	movw	r2, #9256	; 0x2428
    6064:	movs	r1, #18
    6066:	ldr	r3, [r5, r2]
    6068:	str	r1, [sp, #16]
    606a:	adds	r3, #2
    606c:	str	r3, [r5, r2]
    606e:	movw	r2, #9256	; 0x2428
    6072:	movs	r7, #1
    6074:	ldr	r3, [r5, r2]
    6076:	adds	r3, #4
    6078:	str	r3, [r5, r2]
    607a:	ldr	r4, [pc, #464]	; (624c <MTPD::WriteDescriptor()+0x248>)
    607c:	movw	r8, #9252	; 0x2424
    6080:	movw	r6, #9256	; 0x2428
    6084:	movw	r3, #4097	; 0x1001
    6088:	add.w	r9, r4, #34	; 0x22
    608c:	add	r8, r5
    608e:	add	r6, r5
    6090:	b.n	60a2 <MTPD::WriteDescriptor()+0x9e>
    6092:	ldr	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    6094:	cmp	r9, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6096:	add.w	r3, r3, #2
    609a:	str	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    609c:	beq.n	60bc <MTPD::WriteDescriptor()+0xb8>
    609e:	ldrh.w	r3, [r4, #2]!
    60a2:	strh.w	r3, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60a6:	cmp	r7, #0
    60a8:	bne.n	6092 <MTPD::WriteDescriptor()+0x8e>
    60aa:	movs	r2, #2
    60ac:	add	r1, sp, #8
    60ae:	mov	r0, r5
    60b0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    60b4:	cmp	r9, r4
    60b6:	ldrb.w	r7, [r8]
    60ba:	bne.n	609e <MTPD::WriteDescriptor()+0x9a>
    60bc:	movs	r3, #0
    60be:	str	r3, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60c0:	cmp	r7, #0
    60c2:	beq.n	618c <MTPD::WriteDescriptor()+0x188>
      {
        write_length_ += len;
    60c4:	movw	r2, #9256	; 0x2428
    60c8:	movs	r1, #1
    60ca:	ldr	r3, [r5, r2]
    60cc:	str	r1, [sp, #32]
    60ce:	adds	r3, #4
    60d0:	str	r3, [r5, r2]
    60d2:	movw	r2, #9256	; 0x2428
    60d6:	movw	r1, #54274	; 0xd402
    60da:	ldr	r3, [r5, r2]
    60dc:	strh.w	r1, [sp, #14]
    60e0:	adds	r3, #4
    60e2:	str	r3, [r5, r2]
    60e4:	movw	r2, #9256	; 0x2428
    60e8:	movs	r1, #0
    60ea:	ldr	r3, [r5, r2]
    60ec:	str	r1, [sp, #28]
    60ee:	adds	r3, #2
    60f0:	str	r3, [r5, r2]
    60f2:	movw	r2, #9256	; 0x2428
    60f6:	movs	r1, #2
    60f8:	ldr	r3, [r5, r2]
    60fa:	str	r1, [sp, #24]
    60fc:	adds	r3, #4
    60fe:	str	r3, [r5, r2]
    6100:	movw	r2, #9256	; 0x2428
    6104:	mov.w	r1, #12288	; 0x3000
    6108:	ldr	r3, [r5, r2]
    610a:	strh.w	r1, [sp, #12]
    610e:	adds	r3, #4
    6110:	str	r3, [r5, r2]
    6112:	movw	r2, #9256	; 0x2428
    6116:	movw	r1, #12289	; 0x3001
    611a:	ldr	r3, [r5, r2]
    611c:	strh.w	r1, [sp, #10]
    6120:	adds	r3, #2
    6122:	str	r3, [r5, r2]
    6124:	movw	r2, #9256	; 0x2428
    6128:	ldr	r3, [r5, r2]
    612a:	adds	r3, #2
    612c:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring("PJRC");     // Manufacturer
    612e:	mov	r0, r5
    6130:	ldr	r1, [pc, #284]	; (6250 <MTPD::WriteDescriptor()+0x24c>)
    6132:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("Teensy");   // Model
    6136:	mov	r0, r5
    6138:	ldr	r1, [pc, #280]	; (6254 <MTPD::WriteDescriptor()+0x250>)
    613a:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("1.0");      // version
    613e:	mov	r0, r5
    6140:	ldr	r1, [pc, #276]	; (6258 <MTPD::WriteDescriptor()+0x254>)
    6142:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("???");      // serial
    6146:	mov	r0, r5
    6148:	ldr	r1, [pc, #272]	; (625c <MTPD::WriteDescriptor()+0x258>)
    614a:	bl	5e70 <MTPD::writestring(char const*)>
  }
    614e:	add	sp, #44	; 0x2c
    6150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6154:	movs	r2, #2
    6156:	add.w	r1, sp, #6
    615a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    615e:	movs	r2, #6
    6160:	ldrb	r3, [r5, r4]
    6162:	str	r2, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6164:	cmp	r3, #0
    6166:	bne.w	602c <MTPD::WriteDescriptor()+0x28>
    616a:	movs	r2, #4
    616c:	add	r1, sp, #20
    616e:	mov	r0, r5
    6170:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6174:	ldrb	r3, [r5, r4]
    6176:	strh.w	r6, [sp, #4]
    617a:	cmp	r3, #0
    617c:	bne.w	603c <MTPD::WriteDescriptor()+0x38>
    6180:	movs	r2, #2
    6182:	add	r1, sp, #4
    6184:	mov	r0, r5
    6186:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    618a:	b.n	6046 <MTPD::WriteDescriptor()+0x42>
    618c:	movw	r4, #9252	; 0x2424
    6190:	movs	r2, #4
    6192:	add	r1, sp, #36	; 0x24
    6194:	mov	r0, r5
    6196:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    619a:	movs	r2, #1
    619c:	ldrb	r3, [r5, r4]
    619e:	str	r2, [sp, #32]
    61a0:	cmp	r3, #0
    61a2:	bne.n	60d2 <MTPD::WriteDescriptor()+0xce>
    61a4:	movs	r2, #4
    61a6:	add	r1, sp, #32
    61a8:	mov	r0, r5
    61aa:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    61ae:	movw	r2, #54274	; 0xd402
    61b2:	ldrb	r3, [r5, r4]
    61b4:	strh.w	r2, [sp, #14]
    61b8:	cmp	r3, #0
    61ba:	bne.n	60e4 <MTPD::WriteDescriptor()+0xe0>
    61bc:	movs	r2, #2
    61be:	add.w	r1, sp, #14
    61c2:	mov	r0, r5
    61c4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    61c8:	ldrb	r3, [r5, r4]
    61ca:	str	r7, [sp, #28]
    61cc:	cmp	r3, #0
    61ce:	bne.n	60f2 <MTPD::WriteDescriptor()+0xee>
    61d0:	movs	r2, #4
    61d2:	add	r1, sp, #28
    61d4:	mov	r0, r5
    61d6:	movs	r6, #2
    61d8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    61dc:	ldrb	r3, [r5, r4]
    61de:	str	r6, [sp, #24]
    61e0:	cmp	r3, #0
    61e2:	bne.n	6100 <MTPD::WriteDescriptor()+0xfc>
    61e4:	movs	r2, #4
    61e6:	add	r1, sp, #24
    61e8:	mov	r0, r5
    61ea:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    61ee:	mov.w	r2, #12288	; 0x3000
    61f2:	ldrb	r3, [r5, r4]
    61f4:	strh.w	r2, [sp, #12]
    61f8:	cmp	r3, #0
    61fa:	bne.n	6112 <MTPD::WriteDescriptor()+0x10e>
    61fc:	mov	r2, r6
    61fe:	add	r1, sp, #12
    6200:	mov	r0, r5
    6202:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6206:	movw	r2, #12289	; 0x3001
    620a:	ldrb	r3, [r5, r4]
    620c:	strh.w	r2, [sp, #10]
    6210:	cmp	r3, #0
    6212:	bne.n	6124 <MTPD::WriteDescriptor()+0x120>
    6214:	mov	r2, r6
    6216:	add.w	r1, sp, #10
    621a:	mov	r0, r5
    621c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6220:	b.n	612e <MTPD::WriteDescriptor()+0x12a>
    6222:	movs	r2, #2
    6224:	mov	r0, r5
    6226:	add.w	r1, sp, r2
    622a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    622e:	movs	r2, #18
    6230:	ldrb	r3, [r5, r4]
    6232:	str	r2, [sp, #16]
    6234:	cmp	r3, #0
    6236:	bne.w	606e <MTPD::WriteDescriptor()+0x6a>
    623a:	movs	r2, #4
    623c:	add	r1, sp, #16
    623e:	mov	r0, r5
    6240:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6244:	ldrb	r7, [r5, r4]
    6246:	b.n	607a <MTPD::WriteDescriptor()+0x76>
    6248:	.word	0x200001d4
    624c:	.word	0x20000194
    6250:	.word	0x200001e8
    6254:	.word	0x200001cc
    6258:	.word	0x200001f0
    625c:	.word	0x200001f4

00006260 <MTPD::WriteStorageIDs()>:
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    6260:	push	{r4, r5, r6, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6262:	movw	r6, #9252	; 0x2424
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    6266:	sub	sp, #8
    6268:	movs	r5, #1
    626a:	mov	r4, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    626c:	ldrb	r3, [r0, r6]
    626e:	str	r5, [sp, #4]
    6270:	cbz	r3, 628a <MTPD::WriteStorageIDs()+0x2a>
      {
        write_length_ += len;
    6272:	movw	r2, #9256	; 0x2428
    6276:	ldr	r3, [r0, r2]
    6278:	adds	r3, #4
    627a:	str	r3, [r0, r2]
    627c:	movw	r2, #9256	; 0x2428
    6280:	ldr	r3, [r4, r2]
    6282:	adds	r3, #4
    6284:	str	r3, [r4, r2]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    6286:	add	sp, #8
    6288:	pop	{r4, r5, r6, pc}
    628a:	movs	r2, #4
    628c:	add.w	r1, sp, r2
    6290:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6294:	ldrb	r3, [r4, r6]
    6296:	str	r5, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6298:	cmp	r3, #0
    629a:	bne.n	627c <MTPD::WriteStorageIDs()+0x1c>
    629c:	mov	r0, r4
    629e:	movs	r2, #4
    62a0:	mov	r1, sp
    62a2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    62a6:	add	sp, #8
    62a8:	pop	{r4, r5, r6, pc}
    62aa:	nop

000062ac <MTPD::GetStorageInfo(unsigned long)>:

  void MTPD::GetStorageInfo(uint32_t storage) {
    62ac:	push	{r4, r5, r6, lr}
    62ae:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    62b0:	ldr	r0, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    62b2:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    62b4:	ldr	r3, [r0, #0]
    62b6:	ldr	r3, [r3, #0]
    62b8:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62ba:	movw	r3, #9252	; 0x2424
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    62be:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62c0:	ldrb	r3, [r4, r3]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    62c2:	ite	eq
    62c4:	moveq	r2, #4
    62c6:	movne	r2, #1
    62c8:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62cc:	cmp	r3, #0
    62ce:	beq.n	6398 <MTPD::GetStorageInfo(unsigned long)+0xec>
      {
        write_length_ += len;
    62d0:	movw	r2, #9256	; 0x2428
    62d4:	ldr	r3, [r4, r2]
    62d6:	adds	r3, #2
    62d8:	str	r3, [r4, r2]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    62da:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62dc:	movw	r6, #9252	; 0x2424
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    62e0:	ldr	r3, [r0, #0]
    62e2:	ldr	r3, [r3, #4]
    62e4:	blx	r3
    62e6:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62e8:	ldrb	r5, [r4, r6]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    62ea:	ite	eq
    62ec:	moveq	r3, #1
    62ee:	movne	r3, #2
    62f0:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62f4:	cmp	r5, #0
    62f6:	beq.n	63d4 <MTPD::GetStorageInfo(unsigned long)+0x128>
      {
        write_length_ += len;
    62f8:	movw	r2, #9256	; 0x2428
    62fc:	movs	r1, #0
    62fe:	ldr	r3, [r4, r2]
    6300:	strh.w	r1, [sp, #8]
    6304:	adds	r3, #2
    6306:	str	r3, [r4, r2]
    6308:	movw	r2, #9256	; 0x2428
    630c:	ldr	r3, [r4, r2]
    630e:	adds	r3, #2
    6310:	str	r3, [r4, r2]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    6312:	ldr	r0, [r4, #0]
    6314:	ldr	r3, [r0, #0]
    6316:	ldr	r3, [r3, #8]
    6318:	blx	r3
    631a:	mov	r6, r0
  uint64_t nsect = storage_->clusterSize() ;
    631c:	ldr	r0, [r4, #0]
    631e:	ldr	r3, [r0, #0]
    6320:	ldr	r3, [r3, #16]
    6322:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6324:	movw	r3, #9252	; 0x2424
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    6328:	mov	r5, r0
    632a:	umull	r0, r1, r6, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    632e:	ldrb	r2, [r4, r3]
    6330:	lsls	r3, r1, #9
    6332:	lsls	r1, r0, #9
    6334:	orr.w	r3, r3, r0, lsr #23
    6338:	str	r1, [sp, #24]
    633a:	str	r3, [sp, #28]
    633c:	cmp	r2, #0
    633e:	beq.n	63c8 <MTPD::GetStorageInfo(unsigned long)+0x11c>
      {
        write_length_ += len;
    6340:	movw	r2, #9256	; 0x2428
    6344:	ldr	r3, [r4, r2]
    6346:	adds	r3, #8
    6348:	str	r3, [r4, r2]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    634a:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    634c:	movw	r6, #9252	; 0x2424
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    6350:	ldr	r3, [r0, #0]
    6352:	ldr	r3, [r3, #12]
    6354:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6356:	ldrb	r1, [r4, r6]
    6358:	lsls	r2, r5, #9
    635a:	lsrs	r5, r5, #23
    635c:	umull	r2, r3, r2, r0
    6360:	mla	r3, r0, r5, r3
    6364:	strd	r2, r3, [sp, #16]
    6368:	cbz	r1, 63a6 <MTPD::GetStorageInfo(unsigned long)+0xfa>
      {
        write_length_ += len;
    636a:	movw	r2, #9256	; 0x2428
    636e:	mov.w	r1, #4294967295
    6372:	ldr	r3, [r4, r2]
    6374:	str	r1, [sp, #12]
    6376:	adds	r3, #8
    6378:	str	r3, [r4, r2]
    637a:	movw	r2, #9256	; 0x2428
    637e:	ldr	r3, [r4, r2]
    6380:	adds	r3, #4
    6382:	str	r3, [r4, r2]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring("SD Card");  // storage descriptor
    6384:	mov	r0, r4
    6386:	ldr	r1, [pc, #112]	; (63f8 <MTPD::GetStorageInfo(unsigned long)+0x14c>)
    6388:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    638c:	mov	r0, r4
    638e:	ldr	r1, [pc, #108]	; (63fc <MTPD::GetStorageInfo(unsigned long)+0x150>)
    6390:	bl	5e70 <MTPD::writestring(char const*)>
  }
    6394:	add	sp, #32
    6396:	pop	{r4, r5, r6, pc}
    6398:	movs	r2, #2
    639a:	add.w	r1, sp, #6
    639e:	mov	r0, r4
    63a0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63a4:	b.n	62da <MTPD::GetStorageInfo(unsigned long)+0x2e>
    63a6:	movs	r2, #8
    63a8:	add	r1, sp, #16
    63aa:	mov	r0, r4
    63ac:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63b0:	mov.w	r2, #4294967295
    63b4:	ldrb	r3, [r4, r6]
    63b6:	str	r2, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    63b8:	cmp	r3, #0
    63ba:	bne.n	637a <MTPD::GetStorageInfo(unsigned long)+0xce>
    63bc:	movs	r2, #4
    63be:	add	r1, sp, #12
    63c0:	mov	r0, r4
    63c2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63c6:	b.n	6384 <MTPD::GetStorageInfo(unsigned long)+0xd8>
    63c8:	movs	r2, #8
    63ca:	add	r1, sp, #24
    63cc:	mov	r0, r4
    63ce:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63d2:	b.n	634a <MTPD::GetStorageInfo(unsigned long)+0x9e>
    63d4:	movs	r2, #2
    63d6:	add.w	r1, sp, #10
    63da:	mov	r0, r4
    63dc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63e0:	ldrb	r3, [r4, r6]
    63e2:	strh.w	r5, [sp, #8]
    63e6:	cmp	r3, #0
    63e8:	bne.n	6308 <MTPD::GetStorageInfo(unsigned long)+0x5c>
    63ea:	movs	r2, #2
    63ec:	add	r1, sp, #8
    63ee:	mov	r0, r4
    63f0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    63f4:	b.n	6312 <MTPD::GetStorageInfo(unsigned long)+0x66>
    63f6:	nop
    63f8:	.word	0x200001f8
    63fc:	.word	0x200001ec

00006400 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    6400:	movw	r3, #9252	; 0x2424
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    6404:	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    6406:	ldrb	r5, [r0, r3]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    6408:	mov	r4, r0
    640a:	sub	sp, #12
    640c:	mov	r7, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    640e:	ldr	r0, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    6410:	cbz	r5, 6436 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    6412:	ldr	r3, [r0, #0]
    6414:	mov	r1, r2
    int num = 0;
    6416:	movs	r5, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    6418:	ldr	r3, [r3, #20]
    641a:	blx	r3
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    641c:	ldr	r0, [r4, #0]
    641e:	adds	r5, #1
    6420:	ldr	r3, [r0, #0]
    6422:	ldr	r3, [r3, #24]
    6424:	blx	r3
    6426:	cmp	r0, #0
    6428:	bne.n	641c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    642a:	movw	r3, #9256	; 0x2428
    642e:	lsls	r5, r5, #2
    6430:	str	r5, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    6432:	add	sp, #12
    6434:	pop	{r4, r5, r6, r7, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    6436:	ldr	r3, [r0, #0]
    6438:	mov	r1, r2
    643a:	ldr	r3, [r3, #20]
    643c:	blx	r3
    643e:	b.n	6442 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    6440:	adds	r5, #1
    6442:	ldr	r0, [r4, #0]
    6444:	ldr	r3, [r0, #0]
    6446:	ldr	r3, [r3, #24]
    6448:	blx	r3
    644a:	cmp	r0, #0
    644c:	bne.n	6440 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    644e:	movw	r3, #9252	; 0x2424
    6452:	str	r5, [sp, #4]
    6454:	ldrb	r3, [r4, r3]
    6456:	cbz	r3, 649e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x9e>
      {
        write_length_ += len;
    6458:	movw	r2, #9256	; 0x2428
    645c:	ldr	r3, [r4, r2]
    645e:	adds	r3, #4
    6460:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    6462:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6464:	movw	r6, #9252	; 0x2424
      {
        write_length_ += len;
    6468:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    646c:	mov	r1, r7
    646e:	ldr	r3, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6470:	add	r6, r4
      {
        write_length_ += len;
    6472:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    6474:	ldr	r3, [r3, #20]
    6476:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    6478:	ldr	r0, [r4, #0]
    647a:	ldr	r3, [r0, #0]
    647c:	ldr	r3, [r3, #24]
    647e:	blx	r3
    6480:	cmp	r0, #0
    6482:	beq.n	6432 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x32>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6484:	ldrb	r3, [r6, #0]
    6486:	str	r0, [sp, #0]
    6488:	cbz	r3, 6492 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x92>
      {
        write_length_ += len;
    648a:	ldr	r3, [r5, #0]
    648c:	adds	r3, #4
    648e:	str	r3, [r5, #0]
    6490:	b.n	6478 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    6492:	movs	r2, #4
    6494:	mov	r1, sp
    6496:	mov	r0, r4
    6498:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    649c:	b.n	6478 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    649e:	movs	r2, #4
    64a0:	mov	r0, r4
    64a2:	add.w	r1, sp, r2
    64a6:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    64aa:	b.n	6462 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>

000064ac <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    64ac:	push	{r4, r5, r6, r7, lr}
    64ae:	mov	r4, r0
    64b0:	sub	sp, #332	; 0x14c
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    64b2:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    64b4:	movw	r6, #9252	; 0x2424
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    64b8:	add	r7, sp, #24
    64ba:	add	r3, sp, #20
    64bc:	ldr	r5, [r0, #0]
    64be:	add	r2, sp, #72	; 0x48
    64c0:	str	r7, [sp, #0]
    64c2:	ldr	r5, [r5, #28]
    64c4:	blx	r5
    64c6:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    64c8:	ldrb	r3, [r4, r6]
    64ca:	str	r2, [sp, #28]
    64cc:	cmp	r3, #0
    64ce:	beq.w	65e0 <MTPD::GetObjectInfo(unsigned long)+0x134>
      {
        write_length_ += len;
    64d2:	movw	r2, #9256	; 0x2428
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    64d6:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    64d8:	ldr	r3, [r4, r2]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    64da:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    64dc:	add.w	r3, r3, #4
    64e0:	str	r3, [r4, r2]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    64e2:	beq.w	6730 <MTPD::GetObjectInfo(unsigned long)+0x284>
    64e6:	movs	r3, #0
    64e8:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    64ec:	movw	r2, #9256	; 0x2428
    64f0:	movs	r1, #0
    64f2:	ldr	r3, [r4, r2]
    64f4:	strh.w	r1, [sp, #14]
    64f8:	adds	r3, #2
    64fa:	str	r3, [r4, r2]
    64fc:	movw	r2, #9256	; 0x2428
    6500:	ldr	r1, [sp, #20]
    6502:	ldr	r3, [r4, r2]
    6504:	str	r1, [sp, #60]	; 0x3c
    6506:	adds	r3, #2
    6508:	str	r3, [r4, r2]
    650a:	movw	r2, #9256	; 0x2428
    650e:	movs	r1, #0
    6510:	ldr	r3, [r4, r2]
    6512:	strh.w	r1, [sp, #12]
    6516:	adds	r3, #4
    6518:	str	r3, [r4, r2]
    651a:	movw	r2, #9256	; 0x2428
    651e:	movs	r1, #0
    6520:	ldr	r3, [r4, r2]
    6522:	str	r1, [sp, #56]	; 0x38
    6524:	adds	r3, #2
    6526:	str	r3, [r4, r2]
    6528:	movw	r2, #9256	; 0x2428
    652c:	movs	r1, #0
    652e:	ldr	r3, [r4, r2]
    6530:	str	r1, [sp, #52]	; 0x34
    6532:	adds	r3, #4
    6534:	str	r3, [r4, r2]
    6536:	movw	r2, #9256	; 0x2428
    653a:	movs	r1, #0
    653c:	ldr	r3, [r4, r2]
    653e:	str	r1, [sp, #48]	; 0x30
    6540:	adds	r3, #4
    6542:	str	r3, [r4, r2]
    6544:	movw	r2, #9256	; 0x2428
    6548:	movs	r1, #0
    654a:	ldr	r3, [r4, r2]
    654c:	str	r1, [sp, #44]	; 0x2c
    654e:	adds	r3, #4
    6550:	str	r3, [r4, r2]
    6552:	movw	r2, #9256	; 0x2428
    6556:	movs	r1, #0
    6558:	ldr	r3, [r4, r2]
    655a:	str	r1, [sp, #40]	; 0x28
    655c:	adds	r3, #4
    655e:	str	r3, [r4, r2]
    6560:	movw	r2, #9256	; 0x2428
    6564:	movs	r1, #0
    6566:	ldr	r3, [r4, r2]
    6568:	str	r1, [sp, #36]	; 0x24
    656a:	adds	r3, #4
    656c:	str	r3, [r4, r2]
    656e:	movw	r2, #9256	; 0x2428
    6572:	ldr	r1, [r7, #0]
    6574:	ldr	r3, [r4, r2]
    6576:	str	r1, [sp, #32]
    6578:	adds	r3, #4
    657a:	str	r3, [r4, r2]
    657c:	ldr	r2, [sp, #20]
    657e:	movw	r1, #9256	; 0x2428
    6582:	sub.w	r2, r2, #4294967295
    6586:	ldr	r3, [r4, r1]
    6588:	clz	r2, r2
    658c:	adds	r3, #4
    658e:	lsrs	r2, r2, #5
    6590:	str	r3, [r4, r1]
    6592:	strh.w	r2, [sp, #18]
    6596:	movw	r2, #9256	; 0x2428
    659a:	movs	r1, #0
    659c:	ldr	r3, [r4, r2]
    659e:	str	r1, [sp, #68]	; 0x44
    65a0:	adds	r3, #2
    65a2:	str	r3, [r4, r2]
    65a4:	movw	r2, #9256	; 0x2428
    65a8:	movs	r1, #0
    65aa:	ldr	r3, [r4, r2]
    65ac:	str	r1, [sp, #64]	; 0x40
    65ae:	adds	r3, #4
    65b0:	str	r3, [r4, r2]
    65b2:	movw	r2, #9256	; 0x2428
    65b6:	ldr	r3, [r4, r2]
    65b8:	adds	r3, #4
    65ba:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    65bc:	add	r1, sp, #72	; 0x48
    65be:	mov	r0, r4
    65c0:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("");  // date created
    65c4:	mov	r0, r4
    65c6:	ldr	r1, [pc, #372]	; (673c <MTPD::GetObjectInfo(unsigned long)+0x290>)
    65c8:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    65cc:	mov	r0, r4
    65ce:	ldr	r1, [pc, #364]	; (673c <MTPD::GetObjectInfo(unsigned long)+0x290>)
    65d0:	bl	5e70 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    65d4:	mov	r0, r4
    65d6:	ldr	r1, [pc, #356]	; (673c <MTPD::GetObjectInfo(unsigned long)+0x290>)
    65d8:	bl	5e70 <MTPD::writestring(char const*)>
  }
    65dc:	add	sp, #332	; 0x14c
    65de:	pop	{r4, r5, r6, r7, pc}
    65e0:	movs	r2, #4
    65e2:	add	r1, sp, #28
    65e4:	mov	r0, r4
    65e6:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    65ea:	ldr	r2, [sp, #20]
    65ec:	movw	r3, #12289	; 0x3001
    65f0:	ldrb	r5, [r4, r6]
    65f2:	adds	r2, #1
    65f4:	it	ne
    65f6:	movne	r3, #0
    65f8:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    65fc:	cmp	r5, #0
    65fe:	bne.w	64ec <MTPD::GetObjectInfo(unsigned long)+0x40>
    6602:	add	r1, sp, #16
    6604:	movs	r2, #2
    6606:	mov	r0, r4
    6608:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    660c:	ldrb	r3, [r4, r6]
    660e:	strh.w	r5, [sp, #14]
    6612:	cmp	r3, #0
    6614:	bne.w	64fc <MTPD::GetObjectInfo(unsigned long)+0x50>
    6618:	movs	r2, #2
    661a:	add.w	r1, sp, #14
    661e:	mov	r0, r4
    6620:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6624:	ldr	r2, [sp, #20]
    6626:	ldrb	r3, [r4, r6]
    6628:	str	r2, [sp, #60]	; 0x3c
    662a:	cmp	r3, #0
    662c:	bne.w	650a <MTPD::GetObjectInfo(unsigned long)+0x5e>
    6630:	add	r1, sp, #60	; 0x3c
    6632:	movs	r2, #4
    6634:	mov	r0, r4
    6636:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    663a:	ldrb	r3, [r4, r6]
    663c:	strh.w	r5, [sp, #12]
    6640:	cmp	r3, #0
    6642:	bne.w	651a <MTPD::GetObjectInfo(unsigned long)+0x6e>
    6646:	add	r1, sp, #12
    6648:	movs	r2, #2
    664a:	mov	r0, r4
    664c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6650:	ldrb	r3, [r4, r6]
    6652:	str	r5, [sp, #56]	; 0x38
    6654:	cmp	r3, #0
    6656:	bne.w	6528 <MTPD::GetObjectInfo(unsigned long)+0x7c>
    665a:	add	r1, sp, #56	; 0x38
    665c:	movs	r2, #4
    665e:	mov	r0, r4
    6660:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6664:	ldrb	r3, [r4, r6]
    6666:	str	r5, [sp, #52]	; 0x34
    6668:	cmp	r3, #0
    666a:	bne.w	6536 <MTPD::GetObjectInfo(unsigned long)+0x8a>
    666e:	add	r1, sp, #52	; 0x34
    6670:	movs	r2, #4
    6672:	mov	r0, r4
    6674:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6678:	ldrb	r3, [r4, r6]
    667a:	str	r5, [sp, #48]	; 0x30
    667c:	cmp	r3, #0
    667e:	bne.w	6544 <MTPD::GetObjectInfo(unsigned long)+0x98>
    6682:	add	r1, sp, #48	; 0x30
    6684:	movs	r2, #4
    6686:	mov	r0, r4
    6688:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    668c:	ldrb	r3, [r4, r6]
    668e:	str	r5, [sp, #44]	; 0x2c
    6690:	cmp	r3, #0
    6692:	bne.w	6552 <MTPD::GetObjectInfo(unsigned long)+0xa6>
    6696:	add	r1, sp, #44	; 0x2c
    6698:	movs	r2, #4
    669a:	mov	r0, r4
    669c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    66a0:	ldrb	r3, [r4, r6]
    66a2:	str	r5, [sp, #40]	; 0x28
    66a4:	cmp	r3, #0
    66a6:	bne.w	6560 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    66aa:	add	r1, sp, #40	; 0x28
    66ac:	movs	r2, #4
    66ae:	mov	r0, r4
    66b0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    66b4:	ldrb	r3, [r4, r6]
    66b6:	str	r5, [sp, #36]	; 0x24
    66b8:	cmp	r3, #0
    66ba:	bne.w	656e <MTPD::GetObjectInfo(unsigned long)+0xc2>
    66be:	movw	r5, #9252	; 0x2424
    66c2:	movs	r2, #4
    66c4:	add	r1, sp, #36	; 0x24
    66c6:	mov	r0, r4
    66c8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    66cc:	ldr	r2, [r7, #0]
    66ce:	ldrb	r3, [r4, r5]
    66d0:	str	r2, [sp, #32]
    66d2:	cmp	r3, #0
    66d4:	bne.w	657c <MTPD::GetObjectInfo(unsigned long)+0xd0>
    66d8:	add	r1, sp, #32
    66da:	movs	r2, #4
    66dc:	mov	r0, r4
    66de:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    66e2:	ldr	r3, [sp, #20]
    66e4:	ldrb	r7, [r4, r5]
    66e6:	sub.w	r3, r3, #4294967295
    66ea:	clz	r3, r3
    66ee:	lsrs	r3, r3, #5
    66f0:	strh.w	r3, [sp, #18]
    66f4:	cmp	r7, #0
    66f6:	bne.w	6596 <MTPD::GetObjectInfo(unsigned long)+0xea>
    66fa:	add.w	r1, sp, #18
    66fe:	movs	r2, #2
    6700:	mov	r0, r4
    6702:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6706:	ldrb	r6, [r4, r5]
    6708:	str	r7, [sp, #68]	; 0x44
    670a:	cmp	r6, #0
    670c:	bne.w	65a4 <MTPD::GetObjectInfo(unsigned long)+0xf8>
    6710:	add	r1, sp, #68	; 0x44
    6712:	movs	r2, #4
    6714:	mov	r0, r4
    6716:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    671a:	ldrb	r3, [r4, r5]
    671c:	str	r6, [sp, #64]	; 0x40
    671e:	cmp	r3, #0
    6720:	bne.w	65b2 <MTPD::GetObjectInfo(unsigned long)+0x106>
    6724:	add	r1, sp, #64	; 0x40
    6726:	movs	r2, #4
    6728:	mov	r0, r4
    672a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    672e:	b.n	65bc <MTPD::GetObjectInfo(unsigned long)+0x110>
    6730:	movw	r3, #12289	; 0x3001
    6734:	strh.w	r3, [sp, #16]
    6738:	b.n	64ec <MTPD::GetObjectInfo(unsigned long)+0x40>
    673a:	nop
    673c:	.word	0x200001ec

00006740 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    6740:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6744:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    6748:	ldr.w	r8, [pc, #128]	; 67cc <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    674c:	sub	sp, #12
    674e:	mov	r9, r0
      write32(propertyListNum);
    6750:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6754:	ldrb	r2, [r0, r2]
    6756:	str	r3, [sp, #4]
    6758:	cbz	r2, 67b6 <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    675a:	movw	r1, #9256	; 0x2428
    675e:	ldr	r2, [r0, r1]
    6760:	adds	r2, #4
    6762:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6764:	cbz	r3, 67b0 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    6766:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    676a:	movw	r6, #9256	; 0x2428
    676e:	ldr	r5, [pc, #88]	; (67c8 <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6770:	movw	r2, #56321	; 0xdc01
    6774:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6776:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6778:	movs	r4, #0
    677a:	b.n	6790 <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    677c:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    677e:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6780:	adds	r3, #2
    6782:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6784:	ldr.w	r3, [r8]
    6788:	cmp	r3, r4
    678a:	bls.n	67b0 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    678c:	ldrh.w	r2, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6790:	ldrb	r3, [r7, #0]
    6792:	strh.w	r2, [sp, #2]
    6796:	cmp	r3, #0
    6798:	bne.n	677c <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    679a:	movs	r2, #2
    679c:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    679e:	adds	r4, #1
    67a0:	add.w	r1, sp, r2
    67a4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    67a8:	ldr.w	r3, [r8]
    67ac:	cmp	r3, r4
    67ae:	bhi.n	678c <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    67b0:	add	sp, #12
    67b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    67b6:	movs	r2, #4
    67b8:	add.w	r1, sp, r2
    67bc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    67c0:	ldr.w	r3, [r8]
    67c4:	b.n	6764 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    67c6:	nop
    67c8:	.word	0x200001b8
    67cc:	.word	0x200008c0

000067d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    67d0:	mvn.w	r3, #56320	; 0xdc00
    67d4:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    67d6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67da:	mov	r4, r0
    67dc:	sub	sp, #148	; 0x94
      switch(p1)
    67de:	cmp	r3, #67	; 0x43
    67e0:	bhi.w	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    67e4:	tbh	[pc, r3, lsl #1]
    67e8:	.word	0x00d900ba
    67ec:	.word	0x014200f8
    67f0:	.word	0x008c008c
    67f4:	.word	0x01af0161
    67f8:	.word	0x008c01f9
    67fc:	.word	0x008c0243
    6800:	.word	0x008c008c
    6804:	.word	0x008c008c
    6808:	.word	0x008c008c
    680c:	.word	0x008c008c
    6810:	.word	0x008c008c
    6814:	.word	0x008c008c
    6818:	.word	0x008c008c
    681c:	.word	0x008c008c
    6820:	.word	0x008c008c
    6824:	.word	0x008c008c
    6828:	.word	0x008c008c
    682c:	.word	0x008c008c
    6830:	.word	0x008c008c
    6834:	.word	0x008c008c
    6838:	.word	0x008c008c
    683c:	.word	0x008c008c
    6840:	.word	0x008c008c
    6844:	.word	0x008c008c
    6848:	.word	0x008c008c
    684c:	.word	0x008c008c
    6850:	.word	0x008c008c
    6854:	.word	0x008c008c
    6858:	.word	0x008c008c
    685c:	.word	0x008c008c
    6860:	.word	0x008c008c
    6864:	.word	0x008c008c
    6868:	.word	0x008c028b
    686c:	.word	0x008f008c
    6870:	movs	r2, #2
    6872:	add.w	r1, sp, #66	; 0x42
    6876:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    687a:	movs	r3, #10
    687c:	ldrb	r6, [r4, r5]
    687e:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6882:	cmp	r6, #0
    6884:	bne.w	6d1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    6888:	movs	r2, #2
    688a:	add	r1, sp, #64	; 0x40
    688c:	mov	r0, r4
    688e:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6892:	ldrb	r3, [r4, r5]
    6894:	strb.w	r6, [sp, #24]
    6898:	cmp	r3, #0
    689a:	bne.w	6d26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    689e:	movs	r2, #1
    68a0:	add	r1, sp, #24
    68a2:	mov	r0, r4
    68a4:	mov.w	r8, #0
    68a8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    68ac:	mov.w	r9, #0
    68b0:	ldrb	r3, [r4, r5]
    68b2:	strd	r8, r9, [sp, #136]	; 0x88
    68b6:	cmp	r3, #0
    68b8:	bne.w	6d30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    68bc:	movs	r2, #8
    68be:	add	r1, sp, #136	; 0x88
    68c0:	mov	r0, r4
    68c2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    68c6:	ldrb	r7, [r4, r5]
    68c8:	strd	r8, r9, [sp, #128]	; 0x80
    68cc:	cmp	r7, #0
    68ce:	bne.w	6a9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    68d2:	movs	r2, #8
    68d4:	add	r1, sp, #128	; 0x80
    68d6:	mov	r0, r4
    68d8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    68dc:	ldrb	r6, [r4, r5]
    68de:	str	r7, [sp, #112]	; 0x70
    68e0:	cbnz	r6, 6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    68e2:	movs	r2, #4
    68e4:	add	r1, sp, #112	; 0x70
    68e6:	mov	r0, r4
    68e8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    68ec:	ldrb	r3, [r4, r5]
    68ee:	strb.w	r6, [sp, #23]
    68f2:	cbnz	r3, 694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    68f4:	mov	r0, r4
    68f6:	movs	r2, #1
    68f8:	add.w	r1, sp, #23
    68fc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    6900:	add	sp, #148	; 0x94
    6902:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6906:	movw	r5, #9252	; 0x2424
    690a:	movw	r2, #56388	; 0xdc44
    690e:	ldrb	r3, [r0, r5]
    6910:	strh.w	r2, [sp, #70]	; 0x46
    6914:	cmp	r3, #0
    6916:	beq.w	6ec0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    691a:	movw	r2, #9256	; 0x2428
    691e:	ldr	r3, [r4, r2]
    6920:	adds	r3, #2
    6922:	str	r3, [r4, r2]
    6924:	movw	r2, #9256	; 0x2428
    6928:	ldr	r3, [r4, r2]
    692a:	adds	r3, #2
    692c:	str	r3, [r4, r2]
    692e:	movw	r2, #9256	; 0x2428
    6932:	ldr	r3, [r4, r2]
    6934:	adds	r3, #1
    6936:	str	r3, [r4, r2]
    6938:	movw	r2, #9256	; 0x2428
    693c:	ldr	r3, [r4, r2]
    693e:	adds	r3, #1
    6940:	str	r3, [r4, r2]
    6942:	movw	r2, #9256	; 0x2428
    6946:	ldr	r3, [r4, r2]
    6948:	adds	r3, #4
    694a:	str	r3, [r4, r2]
    694c:	movw	r2, #9256	; 0x2428
    6950:	ldr	r3, [r4, r2]
    6952:	adds	r3, #1
    6954:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    6956:	add	sp, #148	; 0x94
    6958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    695c:	movw	r5, #9252	; 0x2424
    6960:	movw	r2, #56321	; 0xdc01
    6964:	ldrb	r3, [r0, r5]
    6966:	strh.w	r2, [sp, #30]
    696a:	cmp	r3, #0
    696c:	beq.w	6e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    6970:	movw	r2, #9256	; 0x2428
    6974:	ldr	r3, [r4, r2]
    6976:	adds	r3, #2
    6978:	str	r3, [r4, r2]
    697a:	movw	r2, #9256	; 0x2428
    697e:	ldr	r3, [r4, r2]
    6980:	adds	r3, #2
    6982:	str	r3, [r4, r2]
    6984:	movw	r2, #9256	; 0x2428
    6988:	ldr	r3, [r4, r2]
    698a:	adds	r3, #1
    698c:	str	r3, [r4, r2]
    698e:	movw	r2, #9256	; 0x2428
    6992:	ldr	r3, [r4, r2]
    6994:	adds	r3, #4
    6996:	str	r3, [r4, r2]
    6998:	b.n	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    699a:	movw	r5, #9252	; 0x2424
    699e:	movw	r2, #56322	; 0xdc02
    69a2:	ldrb	r3, [r0, r5]
    69a4:	strh.w	r2, [sp, #36]	; 0x24
    69a8:	cmp	r3, #0
    69aa:	beq.w	6dbe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    69ae:	movw	r2, #9256	; 0x2428
    69b2:	ldr	r3, [r4, r2]
    69b4:	adds	r3, #2
    69b6:	str	r3, [r4, r2]
    69b8:	movw	r2, #9256	; 0x2428
    69bc:	ldr	r3, [r4, r2]
    69be:	adds	r3, #2
    69c0:	str	r3, [r4, r2]
    69c2:	movw	r2, #9256	; 0x2428
    69c6:	ldr	r3, [r4, r2]
    69c8:	adds	r3, #1
    69ca:	str	r3, [r4, r2]
    69cc:	movw	r2, #9256	; 0x2428
    69d0:	ldr	r3, [r4, r2]
    69d2:	adds	r3, #2
    69d4:	str	r3, [r4, r2]
    69d6:	b.n	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    69d8:	movw	r5, #9252	; 0x2424
    69dc:	movw	r2, #56323	; 0xdc03
    69e0:	ldrb	r3, [r0, r5]
    69e2:	strh.w	r2, [sp, #42]	; 0x2a
    69e6:	cmp	r3, #0
    69e8:	bne.n	69ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    69ea:	movs	r2, #2
    69ec:	add.w	r1, sp, #42	; 0x2a
    69f0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    69f4:	movs	r7, #4
    69f6:	ldrb.w	r8, [r4, r5]
    69fa:	strh.w	r7, [sp, #40]	; 0x28
    69fe:	cmp.w	r8, #0
    6a02:	bne.n	69b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6a04:	movs	r2, #2
    6a06:	add	r1, sp, #40	; 0x28
    6a08:	mov	r0, r4
    6a0a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6a0e:	ldrb	r6, [r4, r5]
    6a10:	strb.w	r8, [sp, #9]
    6a14:	cmp	r6, #0
    6a16:	bne.n	69c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6a18:	movs	r2, #1
    6a1a:	add.w	r1, sp, #9
    6a1e:	mov	r0, r4
    6a20:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6a24:	ldrb.w	r8, [r4, r5]
    6a28:	strh.w	r6, [sp, #38]	; 0x26
    6a2c:	cmp.w	r8, #0
    6a30:	bne.n	69cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    6a32:	movs	r2, #2
    6a34:	add.w	r1, sp, #38	; 0x26
    6a38:	mov	r0, r4
    6a3a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6a3e:	ldrb	r6, [r4, r5]
    6a40:	str.w	r8, [sp, #84]	; 0x54
    6a44:	cmp	r6, #0
    6a46:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6a4a:	mov	r2, r7
    6a4c:	add	r1, sp, #84	; 0x54
    6a4e:	mov	r0, r4
    6a50:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6a54:	ldrb	r3, [r4, r5]
    6a56:	strb.w	r6, [sp, #8]
    6a5a:	cmp	r3, #0
    6a5c:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6a60:	mov	r0, r4
    6a62:	movs	r2, #1
    6a64:	add	r1, sp, #8
    6a66:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6a6a:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6a6c:	movw	r5, #9252	; 0x2424
    6a70:	movw	r2, #56324	; 0xdc04
    6a74:	ldrb	r3, [r0, r5]
    6a76:	strh.w	r2, [sp, #46]	; 0x2e
    6a7a:	cmp	r3, #0
    6a7c:	beq.w	6d3c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    6a80:	movw	r2, #9256	; 0x2428
    6a84:	ldr	r3, [r0, r2]
    6a86:	adds	r3, #2
    6a88:	str	r3, [r0, r2]
    6a8a:	movw	r2, #9256	; 0x2428
    6a8e:	ldr	r3, [r4, r2]
    6a90:	adds	r3, #2
    6a92:	str	r3, [r4, r2]
    6a94:	movw	r2, #9256	; 0x2428
    6a98:	ldr	r3, [r4, r2]
    6a9a:	adds	r3, #1
    6a9c:	str	r3, [r4, r2]
    6a9e:	movw	r2, #9256	; 0x2428
    6aa2:	ldr	r3, [r4, r2]
    6aa4:	adds	r3, #8
    6aa6:	str	r3, [r4, r2]
    6aa8:	b.n	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6aaa:	movw	r5, #9252	; 0x2424
    6aae:	movw	r2, #56327	; 0xdc07
    6ab2:	ldrb	r3, [r0, r5]
    6ab4:	strh.w	r2, [sp, #50]	; 0x32
    6ab8:	cmp	r3, #0
    6aba:	bne.w	691a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6abe:	movs	r2, #2
    6ac0:	add.w	r1, sp, #50	; 0x32
    6ac4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ac8:	movw	r2, #65535	; 0xffff
    6acc:	ldrb	r3, [r4, r5]
    6ace:	strh.w	r2, [sp, #48]	; 0x30
    6ad2:	cmp	r3, #0
    6ad4:	bne.w	6924 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6ad8:	movs	r2, #2
    6ada:	add	r1, sp, #48	; 0x30
    6adc:	mov	r0, r4
    6ade:	movs	r6, #1
    6ae0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ae4:	ldrb	r7, [r4, r5]
    6ae6:	strb.w	r6, [sp, #14]
    6aea:	cmp	r7, #0
    6aec:	bne.w	692e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6af0:	mov	r2, r6
    6af2:	add.w	r1, sp, #14
    6af6:	mov	r0, r4
    6af8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6afc:	ldrb.w	r8, [r4, r5]
    6b00:	strb.w	r7, [sp, #13]
    6b04:	cmp.w	r8, #0
    6b08:	bne.w	6938 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6b0c:	mov	r2, r6
    6b0e:	add.w	r1, sp, #13
    6b12:	mov	r0, r4
    6b14:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b18:	ldrb	r7, [r4, r5]
    6b1a:	str.w	r8, [sp, #92]	; 0x5c
    6b1e:	cmp	r7, #0
    6b20:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6b24:	movs	r2, #4
    6b26:	add	r1, sp, #92	; 0x5c
    6b28:	mov	r0, r4
    6b2a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b2e:	ldrb	r3, [r4, r5]
    6b30:	strb.w	r7, [sp, #12]
    6b34:	cmp	r3, #0
    6b36:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6b3a:	mov	r2, r6
    6b3c:	mov	r0, r4
    6b3e:	add	r1, sp, #12
    6b40:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b44:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6b46:	movw	r5, #9252	; 0x2424
    6b4a:	movw	r2, #56328	; 0xdc08
    6b4e:	ldrb	r3, [r0, r5]
    6b50:	strh.w	r2, [sp, #54]	; 0x36
    6b54:	cmp	r3, #0
    6b56:	bne.w	691a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6b5a:	movs	r2, #2
    6b5c:	add.w	r1, sp, #54	; 0x36
    6b60:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b64:	movw	r3, #65535	; 0xffff
    6b68:	ldrb	r7, [r4, r5]
    6b6a:	strh.w	r3, [sp, #52]	; 0x34
    6b6e:	cmp	r7, #0
    6b70:	bne.w	6924 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6b74:	movs	r2, #2
    6b76:	add	r1, sp, #52	; 0x34
    6b78:	mov	r0, r4
    6b7a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b7e:	ldrb	r6, [r4, r5]
    6b80:	strb.w	r7, [sp, #17]
    6b84:	cmp	r6, #0
    6b86:	bne.w	692e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6b8a:	movs	r2, #1
    6b8c:	add.w	r1, sp, #17
    6b90:	mov	r0, r4
    6b92:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6b96:	ldrb	r7, [r4, r5]
    6b98:	strb.w	r6, [sp, #16]
    6b9c:	cmp	r7, #0
    6b9e:	bne.w	6938 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6ba2:	movs	r2, #1
    6ba4:	add	r1, sp, #16
    6ba6:	mov	r0, r4
    6ba8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6bac:	ldrb	r6, [r4, r5]
    6bae:	str	r7, [sp, #96]	; 0x60
    6bb0:	cmp	r6, #0
    6bb2:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6bb6:	movs	r2, #4
    6bb8:	add	r1, sp, #96	; 0x60
    6bba:	mov	r0, r4
    6bbc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6bc0:	ldrb	r3, [r4, r5]
    6bc2:	strb.w	r6, [sp, #15]
    6bc6:	cmp	r3, #0
    6bc8:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6bcc:	mov	r0, r4
    6bce:	movs	r2, #1
    6bd0:	add.w	r1, sp, #15
    6bd4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6bd8:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6bda:	movw	r5, #9252	; 0x2424
    6bde:	movw	r2, #56329	; 0xdc09
    6be2:	ldrb	r3, [r0, r5]
    6be4:	strh.w	r2, [sp, #58]	; 0x3a
    6be8:	cmp	r3, #0
    6bea:	bne.w	691a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6bee:	movs	r2, #2
    6bf0:	add.w	r1, sp, #58	; 0x3a
    6bf4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6bf8:	movw	r3, #65535	; 0xffff
    6bfc:	ldrb	r7, [r4, r5]
    6bfe:	strh.w	r3, [sp, #56]	; 0x38
    6c02:	cmp	r7, #0
    6c04:	bne.w	6924 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6c08:	movs	r2, #2
    6c0a:	add	r1, sp, #56	; 0x38
    6c0c:	mov	r0, r4
    6c0e:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c12:	ldrb	r6, [r4, r5]
    6c14:	strb.w	r7, [sp, #20]
    6c18:	cmp	r6, #0
    6c1a:	bne.w	692e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6c1e:	movs	r2, #1
    6c20:	add	r1, sp, #20
    6c22:	mov	r0, r4
    6c24:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c28:	ldrb	r7, [r4, r5]
    6c2a:	strb.w	r6, [sp, #19]
    6c2e:	cmp	r7, #0
    6c30:	bne.w	6938 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6c34:	movs	r2, #1
    6c36:	add.w	r1, sp, #19
    6c3a:	mov	r0, r4
    6c3c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c40:	ldrb	r6, [r4, r5]
    6c42:	str	r7, [sp, #100]	; 0x64
    6c44:	cmp	r6, #0
    6c46:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6c4a:	movs	r2, #4
    6c4c:	add	r1, sp, #100	; 0x64
    6c4e:	mov	r0, r4
    6c50:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c54:	ldrb	r3, [r4, r5]
    6c56:	strb.w	r6, [sp, #18]
    6c5a:	cmp	r3, #0
    6c5c:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6c60:	mov	r0, r4
    6c62:	movs	r2, #1
    6c64:	add.w	r1, sp, #18
    6c68:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c6c:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6c6e:	movw	r5, #9252	; 0x2424
    6c72:	movw	r2, #56331	; 0xdc0b
    6c76:	ldrb	r3, [r0, r5]
    6c78:	strh.w	r2, [sp, #62]	; 0x3e
    6c7c:	cmp	r3, #0
    6c7e:	bne.w	6970 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    6c82:	movs	r2, #2
    6c84:	add.w	r1, sp, #62	; 0x3e
    6c88:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6c8c:	movs	r3, #6
    6c8e:	ldrb	r7, [r4, r5]
    6c90:	strh.w	r3, [sp, #60]	; 0x3c
    6c94:	cmp	r7, #0
    6c96:	bne.w	697a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    6c9a:	movs	r2, #2
    6c9c:	add	r1, sp, #60	; 0x3c
    6c9e:	mov	r0, r4
    6ca0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ca4:	ldrb	r6, [r4, r5]
    6ca6:	strb.w	r7, [sp, #22]
    6caa:	cmp	r6, #0
    6cac:	bne.w	6984 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6cb0:	movs	r2, #1
    6cb2:	add.w	r1, sp, #22
    6cb6:	mov	r0, r4
    6cb8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6cbc:	ldrb	r7, [r4, r5]
    6cbe:	str	r6, [sp, #108]	; 0x6c
    6cc0:	cmp	r7, #0
    6cc2:	bne.w	698e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    6cc6:	movs	r2, #4
    6cc8:	add	r1, sp, #108	; 0x6c
    6cca:	mov	r0, r4
    6ccc:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6cd0:	ldrb	r6, [r4, r5]
    6cd2:	str	r7, [sp, #104]	; 0x68
    6cd4:	cmp	r6, #0
    6cd6:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6cda:	movs	r2, #4
    6cdc:	add	r1, sp, #104	; 0x68
    6cde:	mov	r0, r4
    6ce0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ce4:	ldrb	r3, [r4, r5]
    6ce6:	strb.w	r6, [sp, #21]
    6cea:	cmp	r3, #0
    6cec:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6cf0:	mov	r0, r4
    6cf2:	movs	r2, #1
    6cf4:	add.w	r1, sp, #21
    6cf8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6cfc:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6cfe:	movw	r5, #9252	; 0x2424
    6d02:	movw	r2, #56385	; 0xdc41
    6d06:	ldrb	r3, [r0, r5]
    6d08:	strh.w	r2, [sp, #66]	; 0x42
    6d0c:	cmp	r3, #0
    6d0e:	beq.w	6870 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    6d12:	movw	r2, #9256	; 0x2428
    6d16:	ldr	r3, [r0, r2]
    6d18:	adds	r3, #2
    6d1a:	str	r3, [r0, r2]
    6d1c:	movw	r2, #9256	; 0x2428
    6d20:	ldr	r3, [r4, r2]
    6d22:	adds	r3, #2
    6d24:	str	r3, [r4, r2]
    6d26:	movw	r2, #9256	; 0x2428
    6d2a:	ldr	r3, [r4, r2]
    6d2c:	adds	r3, #1
    6d2e:	str	r3, [r4, r2]
    6d30:	movw	r2, #9256	; 0x2428
    6d34:	ldr	r3, [r4, r2]
    6d36:	adds	r3, #8
    6d38:	str	r3, [r4, r2]
    6d3a:	b.n	6a9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6d3c:	movs	r2, #2
    6d3e:	add.w	r1, sp, #46	; 0x2e
    6d42:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6d46:	movs	r6, #8
    6d48:	ldrb	r7, [r4, r5]
    6d4a:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6d4e:	cmp	r7, #0
    6d50:	bne.w	6a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    6d54:	movs	r2, #2
    6d56:	add	r1, sp, #44	; 0x2c
    6d58:	mov	r0, r4
    6d5a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6d5e:	ldrb	r3, [r4, r5]
    6d60:	strb.w	r7, [sp, #11]
    6d64:	cmp	r3, #0
    6d66:	bne.w	6a94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    6d6a:	movs	r2, #1
    6d6c:	add.w	r1, sp, #11
    6d70:	mov	r0, r4
    6d72:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6d76:	movs	r2, #0
    6d78:	movs	r3, #0
    6d7a:	ldrb	r7, [r4, r5]
    6d7c:	strd	r2, r3, [sp, #120]	; 0x78
    6d80:	cmp	r7, #0
    6d82:	bne.w	6a9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6d86:	mov	r2, r6
    6d88:	add	r1, sp, #120	; 0x78
    6d8a:	mov	r0, r4
    6d8c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6d90:	ldrb	r6, [r4, r5]
    6d92:	str	r7, [sp, #88]	; 0x58
    6d94:	cmp	r6, #0
    6d96:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6d9a:	movs	r2, #4
    6d9c:	add	r1, sp, #88	; 0x58
    6d9e:	mov	r0, r4
    6da0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6da4:	ldrb	r3, [r4, r5]
    6da6:	strb.w	r6, [sp, #10]
    6daa:	cmp	r3, #0
    6dac:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6db0:	mov	r0, r4
    6db2:	movs	r2, #1
    6db4:	add.w	r1, sp, #10
    6db8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6dbc:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6dbe:	movs	r2, #2
    6dc0:	add	r1, sp, #36	; 0x24
    6dc2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6dc6:	movs	r7, #4
    6dc8:	ldrb.w	r8, [r4, r5]
    6dcc:	strh.w	r7, [sp, #34]	; 0x22
    6dd0:	cmp.w	r8, #0
    6dd4:	bne.w	69b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6dd8:	movs	r2, #2
    6dda:	add.w	r1, sp, #34	; 0x22
    6dde:	mov	r0, r4
    6de0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6de4:	ldrb	r6, [r4, r5]
    6de6:	strb.w	r8, [sp, #7]
    6dea:	cmp	r6, #0
    6dec:	bne.w	69c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6df0:	movs	r2, #1
    6df2:	add.w	r1, sp, #7
    6df6:	mov	r0, r4
    6df8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6dfc:	ldrb.w	r8, [r4, r5]
    6e00:	strh.w	r6, [sp, #32]
    6e04:	cmp.w	r8, #0
    6e08:	bne.w	69cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    6e0c:	movs	r2, #2
    6e0e:	add	r1, sp, #32
    6e10:	mov	r0, r4
    6e12:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e16:	ldrb	r6, [r4, r5]
    6e18:	str.w	r8, [sp, #80]	; 0x50
    6e1c:	cmp	r6, #0
    6e1e:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6e22:	mov	r2, r7
    6e24:	add	r1, sp, #80	; 0x50
    6e26:	mov	r0, r4
    6e28:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e2c:	ldrb	r3, [r4, r5]
    6e2e:	strb.w	r6, [sp, #6]
    6e32:	cmp	r3, #0
    6e34:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6e38:	mov	r0, r4
    6e3a:	movs	r2, #1
    6e3c:	add.w	r1, sp, #6
    6e40:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e44:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6e46:	movs	r2, #2
    6e48:	add.w	r1, sp, #30
    6e4c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e50:	movs	r3, #6
    6e52:	ldrb	r7, [r4, r5]
    6e54:	strh.w	r3, [sp, #28]
    6e58:	cmp	r7, #0
    6e5a:	bne.w	697a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    6e5e:	movs	r2, #2
    6e60:	add	r1, sp, #28
    6e62:	mov	r0, r4
    6e64:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e68:	ldrb	r6, [r4, r5]
    6e6a:	strb.w	r7, [sp, #5]
    6e6e:	cmp	r6, #0
    6e70:	bne.w	6984 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6e74:	movs	r2, #1
    6e76:	add.w	r1, sp, #5
    6e7a:	mov	r0, r4
    6e7c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e80:	ldrb	r7, [r4, r5]
    6e82:	str	r6, [sp, #76]	; 0x4c
    6e84:	cmp	r7, #0
    6e86:	bne.w	698e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    6e8a:	movs	r2, #4
    6e8c:	add	r1, sp, #76	; 0x4c
    6e8e:	mov	r0, r4
    6e90:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6e94:	ldrb	r6, [r4, r5]
    6e96:	str	r7, [sp, #72]	; 0x48
    6e98:	cmp	r6, #0
    6e9a:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6e9e:	movs	r2, #4
    6ea0:	add	r1, sp, #72	; 0x48
    6ea2:	mov	r0, r4
    6ea4:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ea8:	ldrb	r3, [r4, r5]
    6eaa:	strb.w	r6, [sp, #4]
    6eae:	cmp	r3, #0
    6eb0:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6eb4:	mov	r0, r4
    6eb6:	movs	r2, #1
    6eb8:	add	r1, sp, #4
    6eba:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ebe:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6ec0:	movs	r2, #2
    6ec2:	add.w	r1, sp, #70	; 0x46
    6ec6:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6eca:	movw	r3, #65535	; 0xffff
    6ece:	ldrb	r7, [r4, r5]
    6ed0:	strh.w	r3, [sp, #68]	; 0x44
    6ed4:	cmp	r7, #0
    6ed6:	bne.w	6924 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6eda:	movs	r2, #2
    6edc:	add	r1, sp, #68	; 0x44
    6ede:	mov	r0, r4
    6ee0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6ee4:	ldrb	r6, [r4, r5]
    6ee6:	strb.w	r7, [sp, #27]
    6eea:	cmp	r6, #0
    6eec:	bne.w	692e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6ef0:	movs	r2, #1
    6ef2:	add.w	r1, sp, #27
    6ef6:	mov	r0, r4
    6ef8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6efc:	ldrb	r7, [r4, r5]
    6efe:	strb.w	r6, [sp, #26]
    6f02:	cmp	r7, #0
    6f04:	bne.w	6938 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6f08:	movs	r2, #1
    6f0a:	add.w	r1, sp, #26
    6f0e:	mov	r0, r4
    6f10:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6f14:	ldrb	r6, [r4, r5]
    6f16:	str	r7, [sp, #116]	; 0x74
    6f18:	cmp	r6, #0
    6f1a:	bne.w	6942 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6f1e:	movs	r2, #4
    6f20:	add	r1, sp, #116	; 0x74
    6f22:	mov	r0, r4
    6f24:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6f28:	ldrb	r3, [r4, r5]
    6f2a:	strb.w	r6, [sp, #25]
    6f2e:	cmp	r3, #0
    6f30:	bne.w	694c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6f34:	mov	r0, r4
    6f36:	movs	r2, #1
    6f38:	add.w	r1, sp, #25
    6f3c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    6f40:	b.n	6900 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6f42:	nop

00006f44 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6f44:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f48:	mov	r4, r0
    6f4a:	sub	sp, #184	; 0xb8
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6f4c:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6f4e:	mov	r5, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6f50:	add	r7, sp, #20
    6f52:	add	r3, sp, #16
    6f54:	ldr	r6, [r0, #0]
    6f56:	add	r2, sp, #56	; 0x38
    6f58:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6f5a:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6f5c:	ldr	r6, [r6, #28]
    6f5e:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    6f60:	mvn.w	r3, #56320	; 0xdc00
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    6f64:	ldr	r2, [sp, #16]
      switch(p2)
    6f66:	add	r3, r5
    6f68:	cmp	r3, #67	; 0x43
    6f6a:	bhi.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6f6c:	tbb	[pc, r3]
    6f70:	.word	0xab9c6354
    6f74:	.word	0x464d4343
    6f78:	.word	0x43784346
    6f7c:	.word	0x43434343
    6f80:	.word	0x43434343
    6f84:	.word	0x43434343
    6f88:	.word	0x43434343
    6f8c:	.word	0x43434343
    6f90:	.word	0x43434343
    6f94:	.word	0x43434343
    6f98:	.word	0x43434343
    6f9c:	.word	0x43434343
    6fa0:	.word	0x43434343
    6fa4:	.word	0x43434343
    6fa8:	.word	0x43434343
    6fac:	.word	0x43434343
    6fb0:	.word	0x4d434385
    6fb4:	movs	r2, #4
    6fb6:	add	r1, sp, #52	; 0x34
    6fb8:	mov	r0, r4
    6fba:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6fbe:	ldr	r2, [sp, #20]
    6fc0:	ldrb	r3, [r4, r5]
    6fc2:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6fc4:	cmp	r3, #0
    6fc6:	bne.n	7092 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x14e>
    6fc8:	movs	r2, #4
    6fca:	add	r1, sp, #48	; 0x30
    6fcc:	mov	r0, r4
    6fce:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6fd2:	movs	r3, #1
    6fd4:	ldrb	r6, [r4, r5]
    6fd6:	str	r3, [sp, #44]	; 0x2c
    6fd8:	cmp	r6, #0
    6fda:	bne.n	709c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
    6fdc:	movs	r2, #4
    6fde:	add	r1, sp, #44	; 0x2c
    6fe0:	mov	r0, r4
    6fe2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    6fe6:	ldrb	r3, [r4, r5]
    6fe8:	str	r6, [sp, #40]	; 0x28
    6fea:	cbnz	r3, 7026 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    6fec:	mov	r0, r4
    6fee:	movs	r2, #4
    6ff0:	add	r1, sp, #40	; 0x28
    6ff2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6ff6:	add	sp, #184	; 0xb8
    6ff8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    6ffc:	mov	r0, r4
    6ffe:	ldr	r1, [pc, #264]	; (7108 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c4>)
    7000:	bl	5e70 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    7004:	add	sp, #184	; 0xb8
    7006:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    700a:	add	r1, sp, #56	; 0x38
    700c:	mov	r0, r4
    700e:	bl	5e70 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    7012:	add	sp, #184	; 0xb8
    7014:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    7018:	movw	r3, #9252	; 0x2424
    701c:	str.w	r8, [sp, #24]
    7020:	ldrb	r3, [r4, r3]
    7022:	cmp	r3, #0
    7024:	beq.n	70fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>
      {
        write_length_ += len;
    7026:	movw	r2, #9256	; 0x2428
    702a:	ldr	r3, [r4, r2]
    702c:	adds	r3, #4
    702e:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    7030:	add	sp, #184	; 0xb8
    7032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    7036:	adds	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    7038:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    703c:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    7040:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    7042:	it	ne
    7044:	movne.w	r3, #12288	; 0x3000
    7048:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    704c:	cmp	r2, #0
    704e:	beq.n	70f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ac>
      {
        write_length_ += len;
    7050:	movw	r2, #9256	; 0x2428
    7054:	ldr	r3, [r4, r2]
    7056:	adds	r3, #2
    7058:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    705a:	add	sp, #184	; 0xb8
    705c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    7060:	movw	r3, #9252	; 0x2424
    7064:	ldr	r2, [sp, #20]
    7066:	ldrb	r3, [r4, r3]
    7068:	str	r2, [sp, #36]	; 0x24
    706a:	cmp	r3, #0
    706c:	bne.n	7026 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    706e:	mov	r0, r4
    7070:	movs	r2, #4
    7072:	add	r1, sp, #36	; 0x24
    7074:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7078:	b.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    707a:	movw	r5, #9252	; 0x2424
    707e:	str.w	r8, [sp, #52]	; 0x34
    7082:	ldrb	r3, [r4, r5]
    7084:	cmp	r3, #0
    7086:	beq.n	6fb4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
      {
        write_length_ += len;
    7088:	movw	r2, #9256	; 0x2428
    708c:	ldr	r3, [r4, r2]
    708e:	adds	r3, #4
    7090:	str	r3, [r4, r2]
    7092:	movw	r2, #9256	; 0x2428
    7096:	ldr	r3, [r4, r2]
    7098:	adds	r3, #4
    709a:	str	r3, [r4, r2]
    709c:	movw	r2, #9256	; 0x2428
    70a0:	ldr	r3, [r4, r2]
    70a2:	adds	r3, #4
    70a4:	str	r3, [r4, r2]
    70a6:	b.n	7026 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    70a8:	movw	r3, #9252	; 0x2424
    70ac:	movs	r2, #0
    70ae:	ldrb	r3, [r4, r3]
    70b0:	strh.w	r2, [sp, #14]
    70b4:	cmp	r3, #0
    70b6:	bne.n	7050 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10c>
    70b8:	mov	r0, r4
    70ba:	movs	r2, #2
    70bc:	add.w	r1, sp, #14
    70c0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    70c4:	b.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    70c6:	movw	r6, #9252	; 0x2424
    70ca:	str	r2, [sp, #32]
    70cc:	ldrb	r5, [r4, r6]
    70ce:	cmp	r5, #0
    70d0:	bne.n	709c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
    70d2:	movs	r2, #4
    70d4:	add	r1, sp, #32
    70d6:	mov	r0, r4
    70d8:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    70dc:	ldrb	r3, [r4, r6]
    70de:	str	r5, [sp, #28]
    70e0:	cmp	r3, #0
    70e2:	bne.n	7026 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    70e4:	mov	r0, r4
    70e6:	movs	r2, #4
    70e8:	add	r1, sp, #28
    70ea:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    70ee:	b.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    70f0:	mov	r0, r4
    70f2:	movs	r2, #2
    70f4:	add	r1, sp, #12
    70f6:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    70fa:	b.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    70fc:	mov	r0, r4
    70fe:	movs	r2, #4
    7100:	add	r1, sp, #24
    7102:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7106:	b.n	6ff6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    7108:	.word	0x200001ec

0000710c <MTPD::pull_packet(unsigned char*)>:
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
      return 1;
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    710c:	push	{r4, lr}
    710e:	mov	r4, r1
      while(!usb_mtp_available());
    7110:	bl	7fa0 <usb_mtp_available>
    7114:	cmp	r0, #0
    7116:	beq.n	7110 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    7118:	mov	r0, r4
    711a:	movs	r1, #60	; 0x3c
    }
    711c:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    7120:	b.w	7ef0 <usb_mtp_recv>

00007124 <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    7124:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7128:	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    712a:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    712c:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    712e:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    7130:	str	r1, [sp, #16]
      uint32_t size = storage_->GetSize(object_id);
    7132:	ldr	r3, [r3, #32]
    7134:	blx	r3

      if (write_get_length_) {
    7136:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    713a:	mov	sl, r0

      if (write_get_length_) {
    713c:	ldrb.w	r7, [fp, r3]
    7140:	cmp	r7, #0
    7142:	bne.n	7230 <MTPD::GetObject(unsigned long)+0x10c>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    7144:	movw	r2, #9248	; 0x2420
    7148:	mov.w	r3, #8192	; 0x2000
    714c:	str.w	r3, [fp, r2]
        while(pos<size)
    7150:	cmp	r0, #0
    7152:	beq.n	7244 <MTPD::GetObject(unsigned long)+0x120>
    7154:	mov	r8, r3
    7156:	add.w	r6, fp, #544	; 0x220
    715a:	add.w	r3, fp, #1056	; 0x420
    715e:	movw	r9, #9248	; 0x2420
    7162:	str.w	fp, [sp, #20]
    7166:	movs	r5, #12
    7168:	add	r9, fp
    716a:	mov	fp, r3
    716c:	mov	r3, r6
    716e:	mov	r6, r8
    7170:	mov	r8, r3
    7172:	b.n	71b8 <MTPD::GetObject(unsigned long)+0x94>
    7174:	str	r3, [sp, #12]
    7176:	rsb	r3, r6, #8192	; 0x2000
    717a:	ldr	r2, [sp, #12]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    717c:	add.w	r0, r8, r5
    7180:	add.w	r1, fp, r6
    7184:	cmp	r2, r3
    7186:	it	cs
    7188:	movcs	r2, r3
    718a:	rsb	r3, r5, #512	; 0x200
    718e:	cmp	r2, r3
    7190:	mov	r4, r2
    7192:	it	cs
    7194:	movcs	r4, r3
    7196:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    7198:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    719a:	bl	7fc4 <memcpy>
          disk_pos += to_copy;
    719e:	ldr.w	r3, [r9]
          pos += to_copy;
    71a2:	add	r7, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    71a4:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    71a8:	add	r4, r3
    71aa:	str.w	r4, [r9]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    71ae:	beq.n	71f6 <MTPD::GetObject(unsigned long)+0xd2>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    71b0:	cmp	sl, r7
    71b2:	bls.n	720e <MTPD::GetObject(unsigned long)+0xea>
    71b4:	ldr.w	r6, [r9]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    71b8:	cmp.w	r6, #8192	; 0x2000
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    71bc:	rsb	r3, r7, sl
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    71c0:	bne.n	7174 <MTPD::GetObject(unsigned long)+0x50>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    71c2:	mov	r1, r3
    71c4:	str	r3, [sp, #12]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    71c6:	ldr	r3, [sp, #20]
    71c8:	mov	r2, r7
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    71ca:	cmp.w	r1, #8192	; 0x2000
    71ce:	mov	ip, r1
    71d0:	ldr	r0, [r3, #0]
    71d2:	mov	r3, fp
    71d4:	it	cs
    71d6:	movcs.w	ip, #8192	; 0x2000
    71da:	ldr	r1, [sp, #16]
    71dc:	ldr.w	lr, [r0]
    71e0:	str.w	ip, [sp]
    71e4:	ldr.w	r4, [lr, #40]	; 0x28
    71e8:	blx	r4
    71ea:	mov	r3, r6
    71ec:	movs	r6, #0
            disk_pos=0;
    71ee:	str.w	r6, [r9]
    71f2:	b.n	717a <MTPD::GetObject(unsigned long)+0x56>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    71f4:	wfi
    71f6:	movs	r2, #60	; 0x3c
    71f8:	mov.w	r1, #512	; 0x200
    71fc:	mov	r0, r8
    71fe:	bl	7f38 <usb_mtp_send>
    7202:	cmp	r0, #0
    7204:	ble.n	71f4 <MTPD::GetObject(unsigned long)+0xd0>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    7206:	cmp	sl, r7
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    7208:	mov.w	r5, #0
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    720c:	bhi.n	71b4 <MTPD::GetObject(unsigned long)+0x90>
    720e:	mov	r6, r8
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    7210:	cbnz	r5, 721a <MTPD::GetObject(unsigned long)+0xf6>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    7212:	add	sp, #28
    7214:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7218:	wfi
    721a:	movs	r2, #60	; 0x3c
    721c:	mov.w	r1, #512	; 0x200
    7220:	mov	r0, r6
    7222:	bl	7f38 <usb_mtp_send>
    7226:	cmp	r0, #0
    7228:	ble.n	7218 <MTPD::GetObject(unsigned long)+0xf4>
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    722a:	add	sp, #28
    722c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    7230:	movw	r2, #9256	; 0x2428
    7234:	ldr.w	r3, [fp, r2]
    7238:	add	r3, r0
    723a:	str.w	r3, [fp, r2]
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    723e:	add	sp, #28
    7240:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7244:	add.w	r6, fp, #544	; 0x220
    7248:	b.n	721a <MTPD::GetObject(unsigned long)+0xf6>
    724a:	nop

0000724c <MTPD::read(char*, unsigned long)>:
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


    void MTPD::read(char* data, uint32_t size) 
    {
    724c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    7250:	cbz	r2, 72ae <MTPD::read(char*, unsigned long)+0x62>
    7252:	ldr.w	fp, [pc, #100]	; 72b8 <MTPD::read(char*, unsigned long)+0x6c>
    7256:	mov	r8, r0
    7258:	mov	r6, r1
    725a:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    725c:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    7260:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    7262:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    7266:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    7268:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    726c:	add.w	r1, r7, sl
    7270:	cmp	r4, r5
    7272:	it	cs
    7274:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    7276:	cbz	r6, 7280 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    7278:	mov	r2, r4
          data += to_copy;
    727a:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    727c:	bl	7fc4 <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    7280:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    7284:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    7286:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    728a:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    728e:	mov	r5, r4
          memcpy(data, rx_data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    7290:	beq.n	729a <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    7292:	cmp	r4, #0
    7294:	bne.n	7262 <MTPD::read(char*, unsigned long)+0x16>
    7296:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
    729a:	mov	r1, r7
    729c:	mov	r0, r8
    729e:	bl	710c <MTPD::pull_packet(unsigned char*)>
          index=0;
    72a2:	movs	r3, #0
    72a4:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    72a8:	cmp	r4, #0
    72aa:	bne.n	7262 <MTPD::read(char*, unsigned long)+0x16>
    72ac:	b.n	7296 <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    72ae:	ldr	r3, [pc, #8]	; (72b8 <MTPD::read(char*, unsigned long)+0x6c>)
    72b0:	str	r2, [r3, #0]
        return;
    72b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72b6:	nop
    72b8:	.word	0x20003d44

000072bc <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    72bc:	push	{r4, r5, r6, lr}
    72be:	sub	sp, #8
    72c0:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    72c2:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    72c4:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    72c6:	add.w	r1, sp, #6
    72ca:	bl	724c <MTPD::read(char*, unsigned long)>
    72ce:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    72d2:	cbz	r4, 72f4 <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    72d4:	cbz	r2, 72f0 <MTPD::readstring(char*)+0x34>
    72d6:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    72d8:	movs	r2, #2
    72da:	add.w	r1, sp, #6
    72de:	mov	r0, r6
    72e0:	bl	724c <MTPD::read(char*, unsigned long)>
    72e4:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    72e8:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    72ec:	cmp	r5, r4
    72ee:	bne.n	72d8 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    72f0:	add	sp, #8
    72f2:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    72f4:	lsls	r2, r2, #1
    72f6:	mov	r1, r4
    72f8:	mov	r0, r6
    72fa:	bl	724c <MTPD::read(char*, unsigned long)>
    72fe:	b.n	72f0 <MTPD::readstring(char*)+0x34>

00007300 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    7300:	push	{r4, r5, lr}
    7302:	sub	sp, #132	; 0x84
    7304:	mov	r4, r0
    7306:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7308:	movs	r2, #12
    730a:	mov	r1, sp
    730c:	bl	724c <MTPD::read(char*, unsigned long)>
      
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    7310:	mov	r1, sp
    7312:	mov	r0, r4
    7314:	bl	72bc <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    7318:	ldr	r0, [r4, #0]
    731a:	mov	r2, sp
    731c:	mov	r1, r5
    731e:	ldr	r3, [r0, #0]
    7320:	ldr	r3, [r3, #64]	; 0x40
    7322:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    7324:	movw	r0, #8193	; 0x2001
    7328:	add	sp, #132	; 0x84
    732a:	pop	{r4, r5, pc}

0000732c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    732c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      pull_packet(rx_data_buffer);
    7330:	add.w	r1, r0, #32
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    7334:	sub	sp, #264	; 0x108
    7336:	mov	r4, r0
    7338:	mov	sl, r2
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    733a:	movs	r5, #0
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(rx_data_buffer);
    733c:	bl	710c <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7340:	ldr	r3, [pc, #300]	; (7470 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x144>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7342:	mov	r0, r4
    7344:	add	r1, sp, #8
    7346:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7348:	str	r5, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    734a:	bl	724c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    734e:	ldrh.w	r3, [sp, #12]
    7352:	cmp	r3, #2
    7354:	beq.w	746a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x13e>
    7358:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    735c:	movs	r2, #4
    735e:	add	r1, sp, #8
    7360:	mov	r0, r4
    7362:	bl	724c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7366:	movs	r2, #2
    7368:	add	r1, sp, #8
    736a:	mov	r0, r4
    736c:	bl	724c <MTPD::read(char*, unsigned long)>
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    7370:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7374:	ldrh.w	r9, [sp, #8]
    7378:	movs	r2, #2
    737a:	add	r1, sp, #8
    737c:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    737e:	rsb	r9, r3, r9
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7382:	bl	724c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7386:	movs	r2, #4
    7388:	add	r1, sp, #8
    738a:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    738c:	clz	r9, r9
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7390:	bl	724c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7394:	movs	r2, #2
    7396:	add	r1, sp, #8
    7398:	mov	r0, r4
    739a:	bl	724c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    739e:	movs	r2, #4
    73a0:	add	r1, sp, #8
    73a2:	mov	r0, r4
    73a4:	bl	724c <MTPD::read(char*, unsigned long)>
    73a8:	movs	r2, #4
    73aa:	add	r1, sp, #8
    73ac:	mov	r0, r4
    73ae:	bl	724c <MTPD::read(char*, unsigned long)>
    73b2:	movs	r2, #4
    73b4:	add	r1, sp, #8
    73b6:	mov	r0, r4
    73b8:	bl	724c <MTPD::read(char*, unsigned long)>
    73bc:	movs	r2, #4
    73be:	add	r1, sp, #8
    73c0:	mov	r0, r4
    73c2:	bl	724c <MTPD::read(char*, unsigned long)>
    73c6:	movs	r2, #4
    73c8:	add	r1, sp, #8
    73ca:	mov	r0, r4
    73cc:	bl	724c <MTPD::read(char*, unsigned long)>
    73d0:	movs	r2, #4
    73d2:	add	r1, sp, #8
    73d4:	mov	r0, r4
    73d6:	bl	724c <MTPD::read(char*, unsigned long)>
    73da:	movs	r2, #4
    73dc:	add	r1, sp, #8
    73de:	mov	r0, r4
    73e0:	bl	724c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    73e4:	movs	r2, #2
    73e6:	add	r1, sp, #8
    73e8:	mov	r0, r4
    73ea:	bl	724c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    73ee:	movs	r2, #4
    73f0:	add	r1, sp, #8
    73f2:	mov	r0, r4
    73f4:	bl	724c <MTPD::read(char*, unsigned long)>
    73f8:	movs	r2, #4
    73fa:	add	r1, sp, #8
    73fc:	mov	r0, r4
    73fe:	bl	724c <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    7402:	add	r1, sp, #8
    7404:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    7406:	mov.w	r9, r9, lsr #5
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    740a:	bl	72bc <MTPD::readstring(char*)>
    740e:	add	r0, sp, #8
    7410:	bl	b7c0 <strlen>
    7414:	adds	r0, #1
    7416:	sub.w	r8, r5, r0, lsl #1
    741a:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    741e:	cmp	r5, #3
    7420:	ble.n	7444 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x118>
    7422:	mov	r6, r5
    7424:	add	r7, sp, #4
    7426:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7428:	movs	r2, #4
    742a:	mov	r1, r7
    742c:	mov	r0, r4
    742e:	bl	724c <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    7432:	cmp	r6, #3
    7434:	bgt.n	7426 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xfa>
    7436:	sub.w	r8, r8, #5
    743a:	subs	r5, #4
    743c:	bic.w	r8, r8, #3
    7440:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    7444:	cbz	r5, 7456 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x12a>
    7446:	add	r7, sp, #4
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    7448:	movs	r2, #1
    744a:	mov	r1, r7
    744c:	mov	r0, r4
    744e:	bl	724c <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    7452:	subs	r5, #1
    7454:	bne.n	7448 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>

      return storage_->Create(parent, dir, filename);
    7456:	ldr	r0, [r4, #0]
    7458:	add	r3, sp, #8
    745a:	mov	r2, r9
    745c:	mov	r1, sl
    745e:	ldr	r4, [r0, #0]
    7460:	ldr	r4, [r4, #36]	; 0x24
    7462:	blx	r4
    }
    7464:	add	sp, #264	; 0x108
    7466:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    746a:	ldr	r5, [sp, #8]
    746c:	subs	r5, #64	; 0x40
    746e:	b.n	735c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x30>
    7470:	.word	0x20003d44

00007474 <MTPD::SendObject()>:

    void MTPD::SendObject() 
    { 
    7474:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    7478:	add.w	sl, r0, #32

      return storage_->Create(parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
    747c:	sub	sp, #20
    747e:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7480:	movs	r4, #0
      return storage_->Create(parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
      pull_packet(rx_data_buffer);
    7482:	mov	r1, sl
    7484:	bl	710c <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7488:	ldr	r3, [pc, #224]	; (756c <MTPD::SendObject()+0xf8>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    748a:	mov	r0, r9
    748c:	movs	r2, #12
    748e:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7490:	str	r4, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7492:	bl	724c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    7496:	ldrh.w	r3, [sp, #8]
    749a:	cmp	r3, #2
    749c:	beq.n	74b6 <MTPD::SendObject()+0x42>
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    749e:	movw	r3, #9248	; 0x2420
    74a2:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    74a6:	ldr.w	r0, [r9]
    74aa:	ldr	r3, [r0, #0]
    74ac:	ldr	r3, [r3, #48]	; 0x30
    74ae:	blx	r3
    }
    74b0:	add	sp, #20
    74b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    74b6:	ldr	r7, [sp, #4]
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    74b8:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    74bc:	subs	r7, #12
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    74be:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    74c2:	cmp	r7, r4
    74c4:	ble.n	74a6 <MTPD::SendObject()+0x32>
    74c6:	mov	r8, r3
    74c8:	mov	r0, r4
    74ca:	add.w	fp, r9, #1056	; 0x420
    74ce:	movs	r5, #12
    74d0:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    74d2:	rsb	r4, r5, #512	; 0x200
    74d6:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    74da:	add.w	r1, sl, r5
    74de:	add	r0, fp
    74e0:	cmp	r4, r7
    74e2:	it	cs
    74e4:	movcs	r4, r7
    74e6:	cmp	r6, r4
    74e8:	it	cs
    74ea:	movcs	r6, r4
    74ec:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    74ee:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    74f0:	bl	7fc4 <memcpy>
        disk_pos += to_copy;
    74f4:	ldr.w	r2, [r8]
    74f8:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    74fa:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
    74fe:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    7502:	beq.n	7520 <MTPD::SendObject()+0xac>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7504:	cbnz	r7, 7554 <MTPD::SendObject()+0xe0>
    7506:	movw	r3, #9248	; 0x2420
    750a:	ldr.w	r2, [r9, r3]
        { pull_packet(rx_data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    750e:	cmp	r2, #0
    7510:	beq.n	74a6 <MTPD::SendObject()+0x32>
      {
        storage_->write((const char *)disk_buffer, disk_pos);
    7512:	ldr.w	r0, [r9]
    7516:	mov	r1, fp
    7518:	ldr	r3, [r0, #0]
    751a:	ldr	r3, [r3, #44]	; 0x2c
    751c:	blx	r3
    751e:	b.n	74a6 <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    7520:	ldr.w	r0, [r9]
    7524:	mov	r1, fp
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
        disk_pos += to_copy;
        bytes -= to_copy;
    7526:	subs	r4, r4, r6
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    7528:	ldr	r3, [r0, #0]
    752a:	ldr	r3, [r3, #44]	; 0x2c
    752c:	blx	r3
          disk_pos =0;
    752e:	movs	r3, #0
    7530:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    7534:	cmp	r4, #0
    7536:	beq.n	7504 <MTPD::SendObject()+0x90>
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    7538:	adds	r1, r6, r5
    753a:	mov	r2, r4
    753c:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    753e:	subs	r7, r7, r4
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    7540:	add	r1, sl
    7542:	bl	7fc4 <memcpy>
            disk_pos += bytes;
    7546:	ldr.w	r3, [r8]
    754a:	add	r4, r3
    754c:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7550:	cmp	r7, #0
    7552:	beq.n	7506 <MTPD::SendObject()+0x92>
        { pull_packet(rx_data_buffer);
    7554:	mov	r1, sl
    7556:	mov	r0, r9
    7558:	bl	710c <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    755c:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(rx_data_buffer);
          index=0;
    755e:	mov.w	r5, #0
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    7562:	ble.n	7506 <MTPD::SendObject()+0x92>
    7564:	ldr.w	r0, [r8]
    7568:	b.n	74d2 <MTPD::SendObject()+0x5e>
    756a:	nop
    756c:	.word	0x20003d44

00007570 <MTPD::loop()>:
      else
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    7570:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7574:	sub	sp, #52	; 0x34
    7576:	mov	r4, r0
    7578:	bl	7fa0 <usb_mtp_available>
    757c:	cbnz	r0, 7584 <MTPD::loop()+0x14>
            //printContainer();
            memcpy(tx_data_buffer, rx_data_buffer, MTP_TX_SIZE);
            push_packet(tx_data_buffer, MTP_TX_SIZE); // for acknowledge use rx_daza_buffer
        }
      }
    }
    757e:	add	sp, #52	; 0x34
    7580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    7584:	add.w	r6, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    7588:	movs	r1, #60	; 0x3c
    758a:	mov	r0, r6
    758c:	bl	7ef0 <usb_mtp_recv>
        return 0x2005;
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    7590:	cmp	r0, #0
    7592:	beq.n	757e <MTPD::loop()+0xe>
      { printContainer();
    7594:	ldr	r5, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    7596:	movw	r9, #8193	; 0x2001
    }

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();
    759a:	ldr	r7, [r4, #44]	; 0x2c
    759c:	ldr	r0, [r4, #40]	; 0x28
    759e:	ldr	r1, [r4, #52]	; 0x34
    75a0:	ldrh.w	lr, [r4, #36]	; 0x24
    75a4:	ldr	r3, [r4, #32]
    75a6:	ldrh	r2, [r4, #38]	; 0x26
    75a8:	str	r1, [sp, #16]
    75aa:	str	r5, [sp, #12]
    75ac:	str	r7, [sp, #8]
    75ae:	str	r0, [sp, #4]
    75b0:	ldr	r1, [pc, #768]	; (78b4 <MTPD::loop()+0x344>)
    75b2:	str.w	lr, [sp]
    75b6:	ldr	r0, [pc, #768]	; (78b8 <MTPD::loop()+0x348>)
    75b8:	bl	9d60 <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    75bc:	ldrh	r7, [r4, #36]	; 0x24
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    75be:	movw	r1, #8197	; 0x2005
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
    75c2:	ldrh	r2, [r4, #38]	; 0x26

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    75c4:	movw	r0, #4108	; 0x100c
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    75c8:	ldr.w	r8, [r4, #44]	; 0x2c
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    75cc:	cmp	r7, #2
    75ce:	ite	eq
    75d0:	moveq	r7, r1
    75d2:	movne	r7, r9
      if(fetch_packet(rx_data_buffer))
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    75d4:	ldr	r3, [r4, #48]	; 0x30

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    75d6:	cmp	r2, r0
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    75d8:	ldr	r5, [r4, #52]	; 0x34
        int id = CONTAINER->transaction_id;
    75da:	ldr.w	fp, [r4, #40]	; 0x28
        int len= CONTAINER->len;
    75de:	ldr.w	sl, [r4, #32]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    75e2:	beq.w	7b3a <MTPD::loop()+0x5ca>
    75e6:	bhi.n	765a <MTPD::loop()+0xea>
    75e8:	movw	r1, #4101	; 0x1005
    75ec:	cmp	r2, r1
    75ee:	beq.w	7b72 <MTPD::loop()+0x602>
    75f2:	bls.w	7704 <MTPD::loop()+0x194>
    75f6:	movw	r1, #4104	; 0x1008
    75fa:	cmp	r2, r1
    75fc:	beq.w	7c04 <MTPD::loop()+0x694>
    7600:	bhi.w	781a <MTPD::loop()+0x2aa>
    7604:	movw	r1, #4102	; 0x1006
    7608:	cmp	r2, r1
    760a:	beq.w	7884 <MTPD::loop()+0x314>
    760e:	movw	r1, #4103	; 0x1007
    7612:	cmp	r2, r1
    7614:	bne.w	7872 <MTPD::loop()+0x302>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    7618:	cmp	r3, #0
    761a:	beq.w	7cc0 <MTPD::loop()+0x750>
    761e:	add.w	r5, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    7622:	movw	r7, #8212	; 0x2014
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    7626:	movs	r3, #3
            CONTAINER->len=len;
    7628:	str.w	sl, [r4, #32]
            CONTAINER->op=return_code;
    762c:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer, rx_data_buffer, MTP_TX_SIZE);
    762e:	mov	r1, r6
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    7630:	str.w	fp, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer, rx_data_buffer, MTP_TX_SIZE);
    7634:	mov.w	r2, #512	; 0x200
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    7638:	str.w	r8, [r4, #44]	; 0x2c
            //printContainer();
            memcpy(tx_data_buffer, rx_data_buffer, MTP_TX_SIZE);
    763c:	mov	r0, r5
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    763e:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer, rx_data_buffer, MTP_TX_SIZE);
    7640:	bl	7fc4 <memcpy>
    7644:	b.n	7648 <MTPD::loop()+0xd8>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7646:	wfi
    7648:	movs	r2, #60	; 0x3c
    764a:	mov.w	r1, #512	; 0x200
    764e:	mov	r0, r5
    7650:	bl	7f38 <usb_mtp_send>
    7654:	cmp	r0, #0
    7656:	ble.n	7646 <MTPD::loop()+0xd6>
    7658:	b.n	757e <MTPD::loop()+0xe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    765a:	movw	r0, #4121	; 0x1019
    765e:	cmp	r2, r0
    7660:	beq.w	7bec <MTPD::loop()+0x67c>
    7664:	bls.w	779a <MTPD::loop()+0x22a>
    7668:	movw	r0, #38914	; 0x9802
    766c:	cmp	r2, r0
    766e:	beq.w	7a3c <MTPD::loop()+0x4cc>
    7672:	bhi.w	784a <MTPD::loop()+0x2da>
    7676:	movw	r3, #4122	; 0x101a
    767a:	cmp	r2, r3
    767c:	beq.w	787c <MTPD::loop()+0x30c>
    7680:	movw	r3, #38913	; 0x9801
    7684:	cmp	r2, r3
    7686:	bne.w	7872 <MTPD::loop()+0x302>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    768a:	movw	r5, #9256	; 0x2428
    768e:	mov.w	r9, #0
    7692:	movw	r2, #9252	; 0x2424
    7696:	movs	r3, #1
    7698:	str.w	r9, [r4, r5]
    769c:	mov	r1, r8
    769e:	strb	r3, [r4, r2]
    76a0:	mov	r0, r4
    76a2:	str	r2, [sp, #28]
    76a4:	bl	6740 <MTPD::getObjectPropsSupported(unsigned long)>
    76a8:	ldr	r3, [r4, r5]
    76aa:	mov.w	lr, #2
    76ae:	ldr	r2, [sp, #28]
    76b0:	add	r1, sp, #36	; 0x24
    76b2:	adds	r3, #12
    76b4:	ldrh.w	ip, [r4, #38]	; 0x26
    76b8:	strb.w	r9, [r4, r2]
    76bc:	mov	r0, r4
    76be:	str.w	r9, [r4, r5]
    76c2:	movs	r2, #12
    76c4:	str	r3, [sp, #36]	; 0x24
    76c6:	add.w	r5, r4, #544	; 0x220
    76ca:	ldr	r3, [r4, #40]	; 0x28
    76cc:	strh.w	lr, [sp, #40]	; 0x28
    76d0:	str	r3, [sp, #44]	; 0x2c
    76d2:	strh.w	ip, [sp, #42]	; 0x2a
    76d6:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    76da:	mov	r1, r8
    76dc:	mov	r0, r4
    76de:	bl	6740 <MTPD::getObjectPropsSupported(unsigned long)>
    76e2:	ldr	r3, [sp, #36]	; 0x24
    76e4:	ubfx	r9, r3, #0, #9
    76e8:	cmp.w	r9, #0
    76ec:	beq.n	7700 <MTPD::loop()+0x190>
    76ee:	b.n	76f2 <MTPD::loop()+0x182>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    76f0:	wfi
    76f2:	movs	r2, #60	; 0x3c
    76f4:	mov	r1, r9
    76f6:	mov	r0, r5
    76f8:	bl	7f38 <usb_mtp_send>
    76fc:	cmp	r0, #0
    76fe:	ble.n	76f0 <MTPD::loop()+0x180>
    7700:	uxth	r7, r7
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    7702:	b.n	7626 <MTPD::loop()+0xb6>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7704:	movw	r3, #4098	; 0x1002
    7708:	cmp	r2, r3
    770a:	beq.w	7b62 <MTPD::loop()+0x5f2>
    770e:	bls.w	78bc <MTPD::loop()+0x34c>
    7712:	movw	r3, #4099	; 0x1003
    7716:	cmp	r2, r3
    7718:	beq.w	78aa <MTPD::loop()+0x33a>
    771c:	movw	r3, #4100	; 0x1004
    7720:	cmp	r2, r3
    7722:	bne.w	7872 <MTPD::loop()+0x302>
          case 0x1003:  // CloseSession
            //
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    7726:	movw	r5, #9256	; 0x2428
    772a:	mov.w	r9, #0
    772e:	movw	r2, #9252	; 0x2424
    7732:	movs	r3, #1
    7734:	str.w	r9, [r4, r5]
    7738:	mov	r0, r4
    773a:	strb	r3, [r4, r2]
    773c:	str	r2, [sp, #28]
    773e:	bl	6260 <MTPD::WriteStorageIDs()>
    7742:	ldr	r3, [r4, r5]
    7744:	mov.w	lr, #2
    7748:	ldr	r2, [sp, #28]
    774a:	add	r1, sp, #36	; 0x24
    774c:	adds	r3, #12
    774e:	mov	r0, r4
    7750:	strb.w	r9, [r4, r2]
    7754:	movs	r2, #12
    7756:	ldrh.w	ip, [r4, #38]	; 0x26
    775a:	str.w	r9, [r4, r5]
    775e:	ldr	r5, [r4, #40]	; 0x28
    7760:	str	r3, [sp, #36]	; 0x24
    7762:	strh.w	lr, [sp, #40]	; 0x28
    7766:	strh.w	ip, [sp, #42]	; 0x2a
    776a:	str	r5, [sp, #44]	; 0x2c
    776c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7770:	mov	r0, r4
    7772:	add.w	r5, r4, #544	; 0x220
    7776:	bl	6260 <MTPD::WriteStorageIDs()>
    777a:	ldr	r3, [sp, #36]	; 0x24
    777c:	ubfx	r9, r3, #0, #9
    7780:	cmp.w	r9, #0
    7784:	beq.n	7700 <MTPD::loop()+0x190>
    7786:	b.n	778a <MTPD::loop()+0x21a>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7788:	wfi
    778a:	movs	r2, #60	; 0x3c
    778c:	mov	r1, r9
    778e:	mov	r0, r5
    7790:	bl	7f38 <usb_mtp_send>
    7794:	cmp	r0, #0
    7796:	ble.n	7788 <MTPD::loop()+0x218>
    7798:	b.n	7700 <MTPD::loop()+0x190>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    779a:	movw	r3, #4112	; 0x1010
    779e:	cmp	r2, r3
    77a0:	beq.n	787c <MTPD::loop()+0x30c>
    77a2:	bls.w	793c <MTPD::loop()+0x3cc>
    77a6:	movw	r3, #4116	; 0x1014
    77aa:	cmp	r2, r3
    77ac:	beq.w	7956 <MTPD::loop()+0x3e6>
    77b0:	movw	r3, #4117	; 0x1015
    77b4:	cmp	r2, r3
    77b6:	bne.n	7872 <MTPD::loop()+0x302>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    77b8:	movw	r1, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    77bc:	movw	r3, #9256	; 0x2428
    77c0:	movs	r5, #0
    77c2:	movw	r9, #9252	; 0x2424
    77c6:	movs	r0, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    77c8:	cmp	r8, r1
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    77ca:	str	r5, [r4, r3]
    77cc:	strb.w	r0, [r4, r9]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    77d0:	beq.w	7c7e <MTPD::loop()+0x70e>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    77d4:	movs	r3, #12
    77d6:	strb.w	r5, [r4, r9]
    77da:	movs	r5, #2
    77dc:	strh.w	r2, [sp, #42]	; 0x2a
    77e0:	add	r1, sp, #36	; 0x24
    77e2:	mov	r2, r3
    77e4:	mov	r0, r4
    77e6:	str.w	fp, [sp, #44]	; 0x2c
    77ea:	str	r3, [sp, #36]	; 0x24
    77ec:	strh.w	r5, [sp, #40]	; 0x28
    77f0:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    77f4:	ldr	r3, [sp, #36]	; 0x24
    77f6:	add.w	r5, r4, #544	; 0x220
    77fa:	ubfx	r9, r3, #0, #9
    77fe:	cmp.w	r9, #0
    7802:	beq.w	7700 <MTPD::loop()+0x190>
    7806:	b.n	780a <MTPD::loop()+0x29a>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7808:	wfi
    780a:	movs	r2, #60	; 0x3c
    780c:	mov	r1, r9
    780e:	mov	r0, r5
    7810:	bl	7f38 <usb_mtp_send>
    7814:	cmp	r0, #0
    7816:	ble.n	7808 <MTPD::loop()+0x298>
    7818:	b.n	7700 <MTPD::loop()+0x190>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    781a:	movw	r1, #4105	; 0x1009
    781e:	cmp	r2, r1
    7820:	beq.w	7ac0 <MTPD::loop()+0x550>
    7824:	movw	r1, #4107	; 0x100b
    7828:	cmp	r2, r1
    782a:	bne.n	7872 <MTPD::loop()+0x302>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    782c:	cmp	r3, #0
    782e:	bne.w	761e <MTPD::loop()+0xae>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    7832:	ldr	r0, [r4, #0]
    7834:	mov	r1, r8
    7836:	ldr	r3, [r0, #0]
    7838:	ldr	r3, [r3, #52]	; 0x34
    783a:	blx	r3
    783c:	cmp	r0, #0
    783e:	bne.n	78aa <MTPD::loop()+0x33a>
    7840:	add.w	r5, r4, #544	; 0x220
    7844:	movw	r7, #8210	; 0x2012
    7848:	b.n	7626 <MTPD::loop()+0xb6>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    784a:	movw	r1, #38915	; 0x9803
    784e:	cmp	r2, r1
    7850:	beq.w	79b8 <MTPD::loop()+0x448>
    7854:	movw	r1, #38916	; 0x9804
    7858:	cmp	r2, r1
    785a:	bne.n	7872 <MTPD::loop()+0x302>
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    { pull_packet(rx_data_buffer);
    785c:	mov	r1, r6
    785e:	mov	r0, r4
    7860:	str	r3, [sp, #28]
    7862:	bl	710c <MTPD::pull_packet(unsigned char*)>
//      printContainer(); 
      
      if(p2==0xDC07)
    7866:	movw	r2, #56327	; 0xdc07
    786a:	ldr	r3, [sp, #28]
    786c:	cmp	r3, r2
    786e:	beq.w	7d82 <MTPD::loop()+0x812>
    7872:	add.w	r5, r4, #544	; 0x220
    7876:	movw	r7, #8197	; 0x2005
    787a:	b.n	7626 <MTPD::loop()+0xb6>
              CONTAINER->len  = len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;
    787c:	mov	r7, r1
    787e:	add.w	r5, r4, #544	; 0x220
    7882:	b.n	7626 <MTPD::loop()+0xb6>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (CONTAINER->params[1]) 
    7884:	cmp	r3, #0
    7886:	bne.w	761e <MTPD::loop()+0xae>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    788a:	ldr	r0, [r4, #0]
    788c:	mov	r1, r5
    int num = 0;
    788e:	mov.w	r8, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    7892:	ldr	r3, [r0, #0]
    7894:	ldr	r3, [r3, #20]
    7896:	blx	r3
    7898:	b.n	789e <MTPD::loop()+0x32e>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    789a:	add.w	r8, r8, #1
    789e:	ldr	r0, [r4, #0]
    78a0:	ldr	r3, [r0, #0]
    78a2:	ldr	r3, [r3, #24]
    78a4:	blx	r3
    78a6:	cmp	r0, #0
    78a8:	bne.n	789a <MTPD::loop()+0x32a>
    78aa:	uxth	r7, r7
    78ac:	add.w	r5, r4, #544	; 0x220
    78b0:	b.n	7626 <MTPD::loop()+0xb6>
    78b2:	nop
    78b4:	.word	0x20000200
    78b8:	.word	0x200008fc

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    78bc:	movw	r3, #4097	; 0x1001
    78c0:	cmp	r2, r3
    78c2:	bne.n	7872 <MTPD::loop()+0x302>
        {
          case 0x1001:
            p1=0;
            TRANSMIT(WriteDescriptor());
    78c4:	movw	r5, #9256	; 0x2428
    78c8:	mov.w	r8, #0
    78cc:	movs	r3, #1
    78ce:	movw	r9, #9252	; 0x2424
    78d2:	str.w	r8, [r4, r5]
    78d6:	mov	r0, r4
    78d8:	strb.w	r3, [r4, r9]
    78dc:	bl	6004 <MTPD::WriteDescriptor()>
    78e0:	ldr	r3, [r4, r5]
    78e2:	mov.w	lr, #2
    78e6:	strb.w	r8, [r4, r9]
    78ea:	adds	r3, #12
    78ec:	ldrh.w	ip, [r4, #38]	; 0x26
    78f0:	str.w	r8, [r4, r5]
    78f4:	movs	r2, #12
    78f6:	ldr	r5, [r4, #40]	; 0x28
    78f8:	add	r1, sp, #36	; 0x24
    78fa:	mov	r0, r4
    78fc:	str	r3, [sp, #36]	; 0x24
    78fe:	strh.w	lr, [sp, #40]	; 0x28
    7902:	strh.w	ip, [sp, #42]	; 0x2a
    7906:	str	r5, [sp, #44]	; 0x2c
    7908:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    790c:	mov	r0, r4
    790e:	add.w	r5, r4, #544	; 0x220
    7912:	bl	6004 <MTPD::WriteDescriptor()>
    7916:	ldr	r3, [sp, #36]	; 0x24
    7918:	ubfx	r8, r3, #0, #9
    791c:	cmp.w	r8, #0
    7920:	bne.n	792c <MTPD::loop()+0x3bc>
    7922:	uxth	r7, r7
            break;
    7924:	mov.w	r8, #0
    7928:	b.n	7626 <MTPD::loop()+0xb6>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    792a:	wfi
    792c:	movs	r2, #60	; 0x3c
    792e:	mov	r1, r8
    7930:	mov	r0, r5
    7932:	bl	7f38 <usb_mtp_send>
    7936:	cmp	r0, #0
    7938:	ble.n	792a <MTPD::loop()+0x3ba>
    793a:	b.n	7922 <MTPD::loop()+0x3b2>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    793c:	movw	r3, #4109	; 0x100d
    7940:	cmp	r2, r3
    7942:	bne.n	7872 <MTPD::loop()+0x302>
              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              SendObject();
    7944:	mov	r0, r4
    7946:	add.w	r5, r4, #544	; 0x220
    794a:	bl	7474 <MTPD::SendObject()>
              CONTAINER->len  = len = 12;
              break;
    794e:	mov.w	sl, #12
    7952:	uxth	r7, r7
    7954:	b.n	7626 <MTPD::loop()+0xb6>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7956:	movw	r1, #54274	; 0xd402
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    795a:	movw	r3, #9256	; 0x2428
    795e:	movs	r5, #0
    7960:	movw	r9, #9252	; 0x2424
    7964:	movs	r0, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    7966:	cmp	r8, r1
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7968:	str	r5, [r4, r3]
    796a:	strb.w	r0, [r4, r9]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    796e:	beq.w	7d40 <MTPD::loop()+0x7d0>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7972:	movs	r3, #12
    7974:	strb.w	r5, [r4, r9]
    7978:	movs	r5, #2
    797a:	strh.w	r2, [sp, #42]	; 0x2a
    797e:	add	r1, sp, #36	; 0x24
    7980:	mov	r2, r3
    7982:	mov	r0, r4
    7984:	str.w	fp, [sp, #44]	; 0x2c
    7988:	str	r3, [sp, #36]	; 0x24
    798a:	strh.w	r5, [sp, #40]	; 0x28
    798e:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7992:	ldr	r3, [sp, #36]	; 0x24
    7994:	add.w	r5, r4, #544	; 0x220
    7998:	ubfx	r9, r3, #0, #9
    799c:	cmp.w	r9, #0
    79a0:	beq.w	7700 <MTPD::loop()+0x190>
    79a4:	b.n	79a8 <MTPD::loop()+0x438>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    79a6:	wfi
    79a8:	movs	r2, #60	; 0x3c
    79aa:	mov	r1, r9
    79ac:	mov	r0, r5
    79ae:	bl	7f38 <usb_mtp_send>
    79b2:	cmp	r0, #0
    79b4:	ble.n	79a6 <MTPD::loop()+0x436>
    79b6:	b.n	7700 <MTPD::loop()+0x190>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    79b8:	movw	r5, #9256	; 0x2428
    79bc:	mov.w	r9, #0
    79c0:	mov	r2, r3
    79c2:	movs	r1, #1
    79c4:	str	r3, [sp, #28]
    79c6:	movw	r3, #9252	; 0x2424
    79ca:	str.w	r9, [r4, r5]
    79ce:	mov	r0, r4
    79d0:	strb	r1, [r4, r3]
    79d2:	mov	r1, r8
    79d4:	bl	6f44 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    79d8:	movw	r3, #9252	; 0x2424
    79dc:	ldr	r2, [r4, r5]
    79de:	mov.w	lr, #2
    79e2:	strb.w	r9, [r4, r3]
    79e6:	add	r1, sp, #36	; 0x24
    79e8:	str.w	r9, [r4, r5]
    79ec:	add.w	ip, r2, #12
    79f0:	ldrh	r3, [r4, #38]	; 0x26
    79f2:	movs	r2, #12
    79f4:	mov	r0, r4
    79f6:	str.w	ip, [sp, #36]	; 0x24
    79fa:	strh.w	r3, [sp, #42]	; 0x2a
    79fe:	add.w	r5, r4, #544	; 0x220
    7a02:	ldr	r3, [r4, #40]	; 0x28
    7a04:	strh.w	lr, [sp, #40]	; 0x28
    7a08:	str	r3, [sp, #44]	; 0x2c
    7a0a:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7a0e:	ldr	r3, [sp, #28]
    7a10:	mov	r1, r8
    7a12:	mov	r0, r4
    7a14:	mov	r2, r3
    7a16:	bl	6f44 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    7a1a:	ldr	r3, [sp, #36]	; 0x24
    7a1c:	ubfx	r9, r3, #0, #9
    7a20:	cmp.w	r9, #0
    7a24:	beq.w	7700 <MTPD::loop()+0x190>
    7a28:	b.n	7a2c <MTPD::loop()+0x4bc>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7a2a:	wfi
    7a2c:	movs	r2, #60	; 0x3c
    7a2e:	mov	r1, r9
    7a30:	mov	r0, r5
    7a32:	bl	7f38 <usb_mtp_send>
    7a36:	cmp	r0, #0
    7a38:	ble.n	7a2a <MTPD::loop()+0x4ba>
    7a3a:	b.n	7700 <MTPD::loop()+0x190>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    7a3c:	movw	r5, #9256	; 0x2428
    7a40:	mov.w	r9, #0
    7a44:	mov	r2, r3
    7a46:	movs	r1, #1
    7a48:	str	r3, [sp, #28]
    7a4a:	movw	r3, #9252	; 0x2424
    7a4e:	str.w	r9, [r4, r5]
    7a52:	mov	r0, r4
    7a54:	strb	r1, [r4, r3]
    7a56:	mov	r1, r8
    7a58:	bl	67d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    7a5c:	movw	r3, #9252	; 0x2424
    7a60:	ldr	r2, [r4, r5]
    7a62:	mov.w	lr, #2
    7a66:	strb.w	r9, [r4, r3]
    7a6a:	add	r1, sp, #36	; 0x24
    7a6c:	str.w	r9, [r4, r5]
    7a70:	add.w	ip, r2, #12
    7a74:	ldrh	r3, [r4, #38]	; 0x26
    7a76:	movs	r2, #12
    7a78:	mov	r0, r4
    7a7a:	str.w	ip, [sp, #36]	; 0x24
    7a7e:	strh.w	r3, [sp, #42]	; 0x2a
    7a82:	add.w	r5, r4, #544	; 0x220
    7a86:	ldr	r3, [r4, #40]	; 0x28
    7a88:	strh.w	lr, [sp, #40]	; 0x28
    7a8c:	str	r3, [sp, #44]	; 0x2c
    7a8e:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7a92:	ldr	r3, [sp, #28]
    7a94:	mov	r1, r8
    7a96:	mov	r0, r4
    7a98:	mov	r2, r3
    7a9a:	bl	67d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    7a9e:	ldr	r3, [sp, #36]	; 0x24
    7aa0:	ubfx	r9, r3, #0, #9
    7aa4:	cmp.w	r9, #0
    7aa8:	beq.w	7700 <MTPD::loop()+0x190>
    7aac:	b.n	7ab0 <MTPD::loop()+0x540>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7aae:	wfi
    7ab0:	movs	r2, #60	; 0x3c
    7ab2:	mov	r1, r9
    7ab4:	mov	r0, r5
    7ab6:	bl	7f38 <usb_mtp_send>
    7aba:	cmp	r0, #0
    7abc:	ble.n	7aae <MTPD::loop()+0x53e>
    7abe:	b.n	7700 <MTPD::loop()+0x190>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    7ac0:	movw	r5, #9256	; 0x2428
    7ac4:	mov.w	r9, #0
    7ac8:	movw	r2, #9252	; 0x2424
    7acc:	movs	r3, #1
    7ace:	str.w	r9, [r4, r5]
    7ad2:	mov	r1, r8
    7ad4:	strb	r3, [r4, r2]
    7ad6:	mov	r0, r4
    7ad8:	str	r2, [sp, #28]
    7ada:	bl	7124 <MTPD::GetObject(unsigned long)>
    7ade:	ldr	r3, [r4, r5]
    7ae0:	mov.w	lr, #2
    7ae4:	ldr	r2, [sp, #28]
    7ae6:	add	r1, sp, #36	; 0x24
    7ae8:	adds	r3, #12
    7aea:	ldrh.w	ip, [r4, #38]	; 0x26
    7aee:	strb.w	r9, [r4, r2]
    7af2:	mov	r0, r4
    7af4:	str.w	r9, [r4, r5]
    7af8:	movs	r2, #12
    7afa:	str	r3, [sp, #36]	; 0x24
    7afc:	add.w	r5, r4, #544	; 0x220
    7b00:	ldr	r3, [r4, #40]	; 0x28
    7b02:	strh.w	lr, [sp, #40]	; 0x28
    7b06:	str	r3, [sp, #44]	; 0x2c
    7b08:	strh.w	ip, [sp, #42]	; 0x2a
    7b0c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7b10:	mov	r1, r8
    7b12:	mov	r0, r4
    7b14:	bl	7124 <MTPD::GetObject(unsigned long)>
    7b18:	ldr	r3, [sp, #36]	; 0x24
    7b1a:	ubfx	r9, r3, #0, #9
    7b1e:	cmp.w	r9, #0
    7b22:	beq.w	7700 <MTPD::loop()+0x190>
    7b26:	b.n	7b2a <MTPD::loop()+0x5ba>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7b28:	wfi
    7b2a:	movs	r2, #60	; 0x3c
    7b2c:	mov	r1, r9
    7b2e:	mov	r0, r5
    7b30:	bl	7f38 <usb_mtp_send>
    7b34:	cmp	r0, #0
    7b36:	ble.n	7b28 <MTPD::loop()+0x5b8>
    7b38:	b.n	7700 <MTPD::loop()+0x190>
    7b3a:	cmp.w	r8, #0
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    7b3e:	mov	r2, r3
    7b40:	mov	r0, r4
    7b42:	str	r3, [sp, #28]
    7b44:	it	eq
    7b46:	moveq.w	r8, #1
    7b4a:	add.w	r5, r4, #544	; 0x220
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    7b4e:	mov.w	sl, #24
    7b52:	uxth	r7, r7
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    7b54:	mov	r1, r8
    7b56:	bl	732c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                                    p2); // parent

              CONTAINER->params[1]=p2;
    7b5a:	ldr	r3, [sp, #28]


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent
    7b5c:	str	r0, [r4, #52]	; 0x34

              CONTAINER->params[1]=p2;
    7b5e:	str	r3, [r4, #48]	; 0x30
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    7b60:	b.n	7626 <MTPD::loop()+0xb6>
      return 0x2001;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    7b62:	ldr	r0, [r4, #0]
    7b64:	add.w	r5, r4, #544	; 0x220
    7b68:	uxth	r7, r7
    7b6a:	ldr	r3, [r0, #0]
    7b6c:	ldr	r3, [r3, #60]	; 0x3c
    7b6e:	blx	r3
    7b70:	b.n	7626 <MTPD::loop()+0xb6>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    7b72:	movw	r5, #9256	; 0x2428
    7b76:	mov.w	r9, #0
    7b7a:	movw	r2, #9252	; 0x2424
    7b7e:	movs	r3, #1
    7b80:	str.w	r9, [r4, r5]
    7b84:	mov	r1, r8
    7b86:	strb	r3, [r4, r2]
    7b88:	mov	r0, r4
    7b8a:	str	r2, [sp, #28]
    7b8c:	bl	62ac <MTPD::GetStorageInfo(unsigned long)>
    7b90:	ldr	r3, [r4, r5]
    7b92:	mov.w	lr, #2
    7b96:	ldr	r2, [sp, #28]
    7b98:	add	r1, sp, #36	; 0x24
    7b9a:	adds	r3, #12
    7b9c:	ldrh.w	ip, [r4, #38]	; 0x26
    7ba0:	strb.w	r9, [r4, r2]
    7ba4:	mov	r0, r4
    7ba6:	str.w	r9, [r4, r5]
    7baa:	movs	r2, #12
    7bac:	str	r3, [sp, #36]	; 0x24
    7bae:	add.w	r5, r4, #544	; 0x220
    7bb2:	ldr	r3, [r4, #40]	; 0x28
    7bb4:	strh.w	lr, [sp, #40]	; 0x28
    7bb8:	str	r3, [sp, #44]	; 0x2c
    7bba:	strh.w	ip, [sp, #42]	; 0x2a
    7bbe:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7bc2:	mov	r1, r8
    7bc4:	mov	r0, r4
    7bc6:	bl	62ac <MTPD::GetStorageInfo(unsigned long)>
    7bca:	ldr	r3, [sp, #36]	; 0x24
    7bcc:	ubfx	r9, r3, #0, #9
    7bd0:	cmp.w	r9, #0
    7bd4:	beq.w	7700 <MTPD::loop()+0x190>
    7bd8:	b.n	7bdc <MTPD::loop()+0x66c>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7bda:	wfi
    7bdc:	movs	r2, #60	; 0x3c
    7bde:	mov	r1, r9
    7be0:	mov	r0, r5
    7be2:	bl	7f38 <usb_mtp_send>
    7be6:	cmp	r0, #0
    7be8:	ble.n	7bda <MTPD::loop()+0x66a>
    7bea:	b.n	7700 <MTPD::loop()+0x190>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    7bec:	ldr	r0, [r4, #0]
    7bee:	mov	r2, r5
    7bf0:	mov	r1, r8
    7bf2:	add.w	r5, r4, #544	; 0x220
    7bf6:	ldr	r3, [r0, #0]
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    7bf8:	mov.w	sl, #12
    7bfc:	mov	r7, r9
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    7bfe:	ldr	r3, [r3, #68]	; 0x44
    7c00:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    7c02:	b.n	7626 <MTPD::loop()+0xb6>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    7c04:	movw	r5, #9256	; 0x2428
    7c08:	mov.w	r9, #0
    7c0c:	movw	r2, #9252	; 0x2424
    7c10:	movs	r3, #1
    7c12:	str.w	r9, [r4, r5]
    7c16:	mov	r1, r8
    7c18:	strb	r3, [r4, r2]
    7c1a:	mov	r0, r4
    7c1c:	str	r2, [sp, #28]
    7c1e:	bl	64ac <MTPD::GetObjectInfo(unsigned long)>
    7c22:	ldr	r3, [r4, r5]
    7c24:	mov.w	lr, #2
    7c28:	ldr	r2, [sp, #28]
    7c2a:	add	r1, sp, #36	; 0x24
    7c2c:	adds	r3, #12
    7c2e:	ldrh.w	ip, [r4, #38]	; 0x26
    7c32:	strb.w	r9, [r4, r2]
    7c36:	mov	r0, r4
    7c38:	str.w	r9, [r4, r5]
    7c3c:	movs	r2, #12
    7c3e:	str	r3, [sp, #36]	; 0x24
    7c40:	add.w	r5, r4, #544	; 0x220
    7c44:	ldr	r3, [r4, #40]	; 0x28
    7c46:	strh.w	lr, [sp, #40]	; 0x28
    7c4a:	str	r3, [sp, #44]	; 0x2c
    7c4c:	strh.w	ip, [sp, #42]	; 0x2a
    7c50:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7c54:	mov	r1, r8
    7c56:	mov	r0, r4
    7c58:	bl	64ac <MTPD::GetObjectInfo(unsigned long)>
    7c5c:	ldr	r3, [sp, #36]	; 0x24
    7c5e:	ubfx	r9, r3, #0, #9
    7c62:	cmp.w	r9, #0
    7c66:	beq.w	7700 <MTPD::loop()+0x190>
    7c6a:	b.n	7c6e <MTPD::loop()+0x6fe>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7c6c:	wfi
    7c6e:	movs	r2, #60	; 0x3c
    7c70:	mov	r1, r9
    7c72:	mov	r0, r5
    7c74:	bl	7f38 <usb_mtp_send>
    7c78:	cmp	r0, #0
    7c7a:	ble.n	7c6c <MTPD::loop()+0x6fc>
    7c7c:	b.n	7700 <MTPD::loop()+0x190>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    7c7e:	mov	r0, r4
    7c80:	ldr	r1, [pc, #276]	; (7d98 <MTPD::loop()+0x828>)
    7c82:	str	r3, [sp, #28]
    7c84:	bl	5e70 <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7c88:	ldr	r3, [sp, #28]
    7c8a:	mov.w	lr, #2
    7c8e:	ldrh.w	ip, [r4, #38]	; 0x26
    7c92:	add	r1, sp, #36	; 0x24
    7c94:	ldr	r2, [r4, r3]
    7c96:	strb.w	r5, [r4, r9]
    7c9a:	add.w	r0, r2, #12
    7c9e:	str	r5, [r4, r3]
    7ca0:	ldr	r3, [r4, #40]	; 0x28
    7ca2:	movs	r2, #12
    7ca4:	str	r0, [sp, #36]	; 0x24
    7ca6:	mov	r0, r4
    7ca8:	strh.w	lr, [sp, #40]	; 0x28
    7cac:	strh.w	ip, [sp, #42]	; 0x2a
    7cb0:	str	r3, [sp, #44]	; 0x2c
    7cb2:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    7cb6:	ldr	r1, [pc, #224]	; (7d98 <MTPD::loop()+0x828>)
    7cb8:	mov	r0, r4
    7cba:	bl	5e70 <MTPD::writestring(char const*)>
    7cbe:	b.n	77f4 <MTPD::loop()+0x284>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    7cc0:	movw	r9, #9256	; 0x2428
    7cc4:	movs	r0, #1
    7cc6:	str	r3, [sp, #28]
    7cc8:	mov	r2, r5
    7cca:	str.w	r3, [r4, r9]
    7cce:	movw	r3, #9252	; 0x2424
    7cd2:	mov	r1, r8
    7cd4:	strb	r0, [r4, r3]
    7cd6:	mov	r0, r4
    7cd8:	bl	6400 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7cdc:	ldr.w	r2, [r4, r9]
    7ce0:	ldr	r3, [sp, #28]
    7ce2:	mov.w	lr, #2
    7ce6:	add.w	ip, r2, #12
    7cea:	movw	r2, #9252	; 0x2424
    7cee:	add	r1, sp, #36	; 0x24
    7cf0:	mov	r0, r4
    7cf2:	strb	r3, [r4, r2]
    7cf4:	movs	r2, #12
    7cf6:	str.w	r3, [r4, r9]
    7cfa:	ldrh	r3, [r4, #38]	; 0x26
    7cfc:	str.w	ip, [sp, #36]	; 0x24
    7d00:	strh.w	r3, [sp, #42]	; 0x2a
    7d04:	ldr	r3, [r4, #40]	; 0x28
    7d06:	strh.w	lr, [sp, #40]	; 0x28
    7d0a:	str	r3, [sp, #44]	; 0x2c
    7d0c:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7d10:	mov	r2, r5
    7d12:	mov	r1, r8
    7d14:	mov	r0, r4
    7d16:	add.w	r5, r4, #544	; 0x220
    7d1a:	bl	6400 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7d1e:	ldr	r3, [sp, #36]	; 0x24
    7d20:	ubfx	r9, r3, #0, #9
    7d24:	cmp.w	r9, #0
    7d28:	beq.w	7700 <MTPD::loop()+0x190>
    7d2c:	b.n	7d30 <MTPD::loop()+0x7c0>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) asm("wfi");
    7d2e:	wfi
    7d30:	movs	r2, #60	; 0x3c
    7d32:	mov	r1, r9
    7d34:	mov	r0, r5
    7d36:	bl	7f38 <usb_mtp_send>
    7d3a:	cmp	r0, #0
    7d3c:	ble.n	7d2e <MTPD::loop()+0x7be>
    7d3e:	b.n	7700 <MTPD::loop()+0x190>
    7d40:	mov	r1, r8
    7d42:	mov	r0, r4
    7d44:	str	r3, [sp, #28]
    7d46:	bl	5f3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    7d4a:	ldr	r3, [sp, #28]
    7d4c:	mov.w	lr, #2
    7d50:	ldrh.w	ip, [r4, #38]	; 0x26
    7d54:	add	r1, sp, #36	; 0x24
    7d56:	ldr	r2, [r4, r3]
    7d58:	strb.w	r5, [r4, r9]
    7d5c:	add.w	r0, r2, #12
    7d60:	str	r5, [r4, r3]
    7d62:	ldr	r3, [r4, #40]	; 0x28
    7d64:	movs	r2, #12
    7d66:	str	r0, [sp, #36]	; 0x24
    7d68:	mov	r0, r4
    7d6a:	strh.w	lr, [sp, #40]	; 0x28
    7d6e:	strh.w	ip, [sp, #42]	; 0x2a
    7d72:	str	r3, [sp, #44]	; 0x2c
    7d74:	bl	5df0 <MTPD::write(char const*, int) [clone .part.1]>
    7d78:	mov	r1, r8
    7d7a:	mov	r0, r4
    7d7c:	bl	5f3c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
    7d80:	b.n	7992 <MTPD::loop()+0x422>
    7d82:	mov	r1, r8
    7d84:	mov	r0, r4
    7d86:	bl	7300 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    7d8a:	cmp	r0, #0
    7d8c:	beq.w	757e <MTPD::loop()+0xe>
    7d90:	uxth	r7, r0
    7d92:	add.w	r5, r4, #544	; 0x220
    7d96:	b.n	7626 <MTPD::loop()+0xb6>
    7d98:	.word	0x200001cc

00007d9c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7d9c:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7d9e:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7da0:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7da2:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7da4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7da6:	beq.n	7db0 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7da8:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7dac:	b.w	9b14 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7db0:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7db2:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7db6:	bx	r3

00007db8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7db8:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7dba:	movw	r5, #513	; 0x201
    7dbe:	ldr	r4, [r0, #0]
    7dc0:	str	r5, [r4, #16]

	while (count > 0) {
    7dc2:	cbz	r3, 7e0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    7dc4:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7dc6:	cbz	r1, 7e06 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    7dc8:	ldrb	r5, [r1, #0]
    7dca:	adds	r1, #1
		count--; // how many bytes left to output.
    7dcc:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7dce:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7dd0:	ldr	r5, [r4, #112]	; 0x70
    7dd2:	lsls	r5, r5, #30
    7dd4:	bmi.n	7de4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7dd6:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    7dd8:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7dda:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    7ddc:	cbz	r2, 7de4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    7dde:	strb	r5, [r2, #0]
    7de0:	adds	r2, #1
    7de2:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    7de4:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7de6:	lsls	r5, r5, #31
    7de8:	bpl.n	7dd0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    7dea:	cmp	r3, #0
    7dec:	bne.n	7dc6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    7dee:	cbz	r6, 7e0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7df0:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7df2:	ldr	r3, [r1, #112]	; 0x70
    7df4:	lsls	r3, r3, #30
    7df6:	bmi.n	7df2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7df8:	ldr	r3, [r1, #116]	; 0x74
    7dfa:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    7dfc:	cbz	r2, 7e02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    7dfe:	strb	r3, [r2, #0]
    7e00:	adds	r2, #1
			count_read--;
    7e02:	subs	r6, #1
    7e04:	b.n	7dee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7e06:	ldrb.w	r5, [r0, #60]	; 0x3c
    7e0a:	b.n	7dcc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    7e0c:	pop	{r4, r5, r6}
    7e0e:	bx	lr

00007e10 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7e10:	cbz	r3, 7e16 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7e12:	b.w	7db8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    7e16:	bx	lr

00007e18 <tx_event>:
	extern volatile uint8_t usb_configuration;

    static uint32_t mtp_TXcount=0;
	static uint32_t mtp_RXcount=0;
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
    7e18:	ldr	r2, [pc, #8]	; (7e24 <tx_event+0xc>)
    7e1a:	ldr	r3, [r2, #0]
    7e1c:	adds	r3, #1
    7e1e:	str	r3, [r2, #0]
    7e20:	bx	lr
    7e22:	nop
    7e24:	.word	0x20004800

00007e28 <rx_event>:
	static void rx_event(transfer_t *t) {mtp_RXcount++;}
    7e28:	ldr	r2, [pc, #8]	; (7e34 <rx_event+0xc>)
    7e2a:	ldr	r3, [r2, #0]
    7e2c:	adds	r3, #1
    7e2e:	str	r3, [r2, #0]
    7e30:	bx	lr
    7e32:	nop
    7e34:	.word	0x20004548

00007e38 <usb_mtp_wait>:
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
    7e38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		uint32_t wait_begin_at = systick_millis_count;
    7e3c:	ldr	r4, [pc, #60]	; (7e7c <usb_mtp_wait+0x44>)
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    7e3e:	ldr	r5, [pc, #64]	; (7e80 <usb_mtp_wait+0x48>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
    7e40:	ldr	r7, [r4, #0]
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    7e42:	ldrb	r3, [r5, #0]
    7e44:	cbz	r3, 7e6c <usb_mtp_wait+0x34>
    7e46:	mov	r6, r0
    7e48:	mov	r8, r1
    7e4a:	b.n	7e5c <usb_mtp_wait+0x24>
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    7e4c:	ldr	r3, [r4, #0]
    7e4e:	subs	r3, r3, r7
    7e50:	cmp	r3, r8
    7e52:	bhi.n	7e74 <usb_mtp_wait+0x3c>
			yield();
    7e54:	bl	9a74 <yield>

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    7e58:	ldrb	r3, [r5, #0]
    7e5a:	cbz	r3, 7e6c <usb_mtp_wait+0x34>
			uint32_t status = usb_transfer_status(xfer);
    7e5c:	mov	r0, r6
    7e5e:	bl	94d4 <usb_transfer_status>
			if (!(status & 0x80)) break; // transfer descriptor ready
    7e62:	lsls	r3, r0, #24
    7e64:	bmi.n	7e4c <usb_mtp_wait+0x14>
			if (systick_millis_count - wait_begin_at > timeout) return 0;
			yield();
		}
		return 1;
    7e66:	movs	r0, #1
    7e68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    7e6c:	mov.w	r0, #4294967295
    7e70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    7e74:	movs	r0, #0
			yield();
		}
		return 1;
	}
    7e76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e7a:	nop
    7e7c:	.word	0x20004a24
    7e80:	.word	0x20004a18

00007e84 <usb_mtp_configure>:
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
    7e84:	push	{r4, r5, r6, lr}
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    7e86:	movs	r4, #0

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    7e88:	ldr	r5, [pc, #76]	; (7ed8 <usb_mtp_configure+0x54>)
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
    7e8a:	movs	r2, #128	; 0x80
    7e8c:	movs	r1, #0
    7e8e:	ldr	r0, [pc, #76]	; (7edc <usb_mtp_configure+0x58>)
    7e90:	bl	b1ec <memset>
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    7e94:	ldr	r6, [pc, #72]	; (7ee0 <usb_mtp_configure+0x5c>)

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    7e96:	mov	r1, r4
    7e98:	mov	r0, r5
    7e9a:	movs	r2, #32
    7e9c:	bl	b1ec <memset>
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    7ea0:	mov	r2, r4
    7ea2:	ldr	r3, [pc, #64]	; (7ee4 <usb_mtp_configure+0x60>)
    7ea4:	mov.w	r1, #512	; 0x200
    7ea8:	movs	r0, #4
	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    7eaa:	strb	r4, [r6, #0]
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    7eac:	bl	93f0 <usb_config_tx>
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
    7eb0:	mov	r2, r4
    7eb2:	ldr	r3, [pc, #52]	; (7ee8 <usb_mtp_configure+0x64>)
    7eb4:	mov.w	r1, #512	; 0x200
    7eb8:	movs	r0, #4
    7eba:	bl	938c <usb_config_rx>
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    7ebe:	mov	r0, r5
    7ec0:	mov	r3, r4
    7ec2:	ldr	r1, [pc, #40]	; (7eec <usb_mtp_configure+0x68>)
    7ec4:	mov.w	r2, #512	; 0x200
    7ec8:	bl	9458 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    7ecc:	mov	r1, r5
    7ece:	movs	r0, #4
	}
    7ed0:	ldmia.w	sp!, {r4, r5, r6, lr}
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    7ed4:	b.w	94b0 <usb_receive>
    7ed8:	.word	0x20004760
    7edc:	.word	0x20004780
    7ee0:	.word	0x2000454c
    7ee4:	.word	0x00007e19
    7ee8:	.word	0x00007e29
    7eec:	.word	0x20004550

00007ef0 <usb_mtp_recv>:
		}
		return 1;
	}

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
    7ef0:	push	{r4, lr}
    7ef2:	mov	r4, r0
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;
    7ef4:	ldr	r0, [pc, #56]	; (7f30 <usb_mtp_recv+0x40>)
    7ef6:	bl	7e38 <usb_mtp_wait>
    7efa:	cmp	r0, #0
    7efc:	ble.n	7f2e <usb_mtp_recv+0x3e>

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    7efe:	mov.w	r2, #512	; 0x200
    7f02:	ldr	r1, [pc, #48]	; (7f34 <usb_mtp_recv+0x44>)
    7f04:	mov	r0, r4
    7f06:	bl	7fc4 <memcpy>
		memset(rx_transfer, 0, sizeof(rx_transfer));
    7f0a:	movs	r2, #32
    7f0c:	movs	r1, #0
    7f0e:	ldr	r0, [pc, #32]	; (7f30 <usb_mtp_recv+0x40>)
    7f10:	bl	b1ec <memset>
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    7f14:	movs	r3, #0
    7f16:	mov.w	r2, #512	; 0x200
    7f1a:	ldr	r1, [pc, #24]	; (7f34 <usb_mtp_recv+0x44>)
    7f1c:	ldr	r0, [pc, #16]	; (7f30 <usb_mtp_recv+0x40>)
    7f1e:	bl	9458 <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    7f22:	movs	r0, #4
    7f24:	ldr	r1, [pc, #8]	; (7f30 <usb_mtp_recv+0x40>)
    7f26:	bl	94b0 <usb_receive>
		return MTP_RX_SIZE;
    7f2a:	mov.w	r0, #512	; 0x200
	}
    7f2e:	pop	{r4, pc}
    7f30:	.word	0x20004760
    7f34:	.word	0x20004550

00007f38 <usb_mtp_send>:

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    7f38:	push	{r3, r4, r5, r6, r7, lr}
		transfer_t *xfer = tx_transfer + tx_head;
    7f3a:	ldr	r6, [pc, #88]	; (7f94 <usb_mtp_send+0x5c>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    7f3c:	mov	r7, r0
		transfer_t *xfer = tx_transfer + tx_head;
    7f3e:	ldr	r3, [pc, #88]	; (7f98 <usb_mtp_send+0x60>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    7f40:	mov	r5, r1
		transfer_t *xfer = tx_transfer + tx_head;
    7f42:	ldrb	r4, [r6, #0]
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    7f44:	mov	r1, r2
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
    7f46:	add.w	r4, r3, r4, lsl #5
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    7f4a:	mov	r0, r4
    7f4c:	bl	7e38 <usb_mtp_wait>
    7f50:	cmp	r0, #0
    7f52:	ble.n	7f8a <usb_mtp_send+0x52>

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    7f54:	ldrb	r0, [r6, #0]
		memcpy(txdata, buffer, len);
    7f56:	mov	r1, r7
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    7f58:	ldr	r3, [pc, #64]	; (7f9c <usb_mtp_send+0x64>)
		memcpy(txdata, buffer, len);
    7f5a:	mov	r2, r5
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    7f5c:	add.w	r3, r3, r0, lsl #9
		memcpy(txdata, buffer, len);
    7f60:	mov	r0, r3
    7f62:	bl	7fc4 <memcpy>
		usb_prepare_transfer(xfer, txdata,len, 0);
    7f66:	movs	r3, #0
    7f68:	mov	r1, r0
    7f6a:	mov	r2, r5
    7f6c:	mov	r0, r4
    7f6e:	bl	9458 <usb_prepare_transfer>
		usb_transmit(MTP_TX_ENDPOINT, xfer);
    7f72:	mov	r1, r4
    7f74:	movs	r0, #4
    7f76:	bl	9488 <usb_transmit>
		if (++tx_head >= TX_NUM) tx_head = 0;
    7f7a:	ldrb	r3, [r6, #0]
    7f7c:	adds	r3, #1
    7f7e:	uxtb	r3, r3
    7f80:	cmp	r3, #3
    7f82:	bls.n	7f8c <usb_mtp_send+0x54>
    7f84:	movs	r3, #0
		return len;
    7f86:	mov	r0, r5

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata,len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    7f88:	strb	r3, [r6, #0]
		return len;
	}
    7f8a:	pop	{r3, r4, r5, r6, r7, pc}

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
		memcpy(txdata, buffer, len);
		usb_prepare_transfer(xfer, txdata,len, 0);
		usb_transmit(MTP_TX_ENDPOINT, xfer);
		if (++tx_head >= TX_NUM) tx_head = 0;
    7f8c:	strb	r3, [r6, #0]
		return len;
    7f8e:	mov	r0, r5
    7f90:	pop	{r3, r4, r5, r6, r7, pc}
    7f92:	nop
    7f94:	.word	0x2000454c
    7f98:	.word	0x20004780
    7f9c:	.word	0x20003d48

00007fa0 <usb_mtp_available>:
	}

	int usb_mtp_available(void)
	{
    7fa0:	push	{r3, lr}
		if (!usb_configuration) return 0;
    7fa2:	ldr	r3, [pc, #24]	; (7fbc <usb_mtp_available+0x1c>)
    7fa4:	ldrb	r3, [r3, #0]
    7fa6:	cbnz	r3, 7fac <usb_mtp_available+0xc>
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
    7fa8:	movs	r0, #0
    7faa:	pop	{r3, pc}
	}

	int usb_mtp_available(void)
	{
		if (!usb_configuration) return 0;
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
    7fac:	ldr	r0, [pc, #16]	; (7fc0 <usb_mtp_available+0x20>)
    7fae:	bl	94d4 <usb_transfer_status>
    7fb2:	lsls	r3, r0, #24
    7fb4:	bmi.n	7fa8 <usb_mtp_available+0x8>
    7fb6:	mov.w	r0, #512	; 0x200
		return 0;
	}
    7fba:	pop	{r3, pc}
    7fbc:	.word	0x20004a18
    7fc0:	.word	0x20004760

00007fc4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    7fc4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    7fc6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    7fca:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    7fce:	bne.n	80ac <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7fd0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    7fd2:	bcc.n	8058 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    7fd4:	ldr.w	r3, [r1], #4
    7fd8:	str.w	r3, [r0], #4
    7fdc:	ldr.w	r3, [r1], #4
    7fe0:	str.w	r3, [r0], #4
    7fe4:	ldr.w	r3, [r1], #4
    7fe8:	str.w	r3, [r0], #4
    7fec:	ldr.w	r3, [r1], #4
    7ff0:	str.w	r3, [r0], #4
    7ff4:	ldr.w	r3, [r1], #4
    7ff8:	str.w	r3, [r0], #4
    7ffc:	ldr.w	r3, [r1], #4
    8000:	str.w	r3, [r0], #4
    8004:	ldr.w	r3, [r1], #4
    8008:	str.w	r3, [r0], #4
    800c:	ldr.w	r3, [r1], #4
    8010:	str.w	r3, [r0], #4
    8014:	ldr.w	r3, [r1], #4
    8018:	str.w	r3, [r0], #4
    801c:	ldr.w	r3, [r1], #4
    8020:	str.w	r3, [r0], #4
    8024:	ldr.w	r3, [r1], #4
    8028:	str.w	r3, [r0], #4
    802c:	ldr.w	r3, [r1], #4
    8030:	str.w	r3, [r0], #4
    8034:	ldr.w	r3, [r1], #4
    8038:	str.w	r3, [r0], #4
    803c:	ldr.w	r3, [r1], #4
    8040:	str.w	r3, [r0], #4
    8044:	ldr.w	r3, [r1], #4
    8048:	str.w	r3, [r0], #4
    804c:	ldr.w	r3, [r1], #4
    8050:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8054:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8056:	bcs.n	7fd4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8058:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    805a:	bcc.n	8080 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    805c:	ldr.w	r3, [r1], #4
    8060:	str.w	r3, [r0], #4
    8064:	ldr.w	r3, [r1], #4
    8068:	str.w	r3, [r0], #4
    806c:	ldr.w	r3, [r1], #4
    8070:	str.w	r3, [r0], #4
    8074:	ldr.w	r3, [r1], #4
    8078:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    807c:	subs	r2, #16
	bhs	.Lmid_block_loop
    807e:	bcs.n	805c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8080:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8082:	bcc.n	8090 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8084:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8088:	str.w	r3, [r0], #4
	subs	r2, #4
    808c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    808e:	bcs.n	8084 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8090:	adds	r2, #4
	beq	.Ldone
    8092:	beq.n	80a6 <memcpy+0xe2>

	lsls	r2, r2, #31
    8094:	lsls	r2, r2, #31
	itt ne
    8096:	itt	ne
	ldrbne  r3, [r1], #1
    8098:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    809c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    80a0:	bcc.n	80a6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    80a2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    80a4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    80a6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    80a8:	bx	lr
    80aa:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    80ac:	cmp	r2, #8
	blo	.Lbyte_copy
    80ae:	bcc.n	80d8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    80b0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    80b2:	beq.n	7fd0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    80b4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    80b8:	beq.n	7fd0 <memcpy+0xc>

	rsb	r3, #4
    80ba:	rsb	r3, r3, #4
	subs	r2, r3
    80be:	subs	r2, r2, r3

	lsls    r3, r3, #31
    80c0:	lsls	r3, r3, #31
	itt ne
    80c2:	itt	ne
	ldrbne  r3, [r1], #1
    80c4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    80c8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    80cc:	bcc.n	7fd0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    80ce:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    80d2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    80d6:	b.n	7fd0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    80d8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    80da:	bcc.n	8090 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    80dc:	subs	r2, #1
	ldrb    r3, [r1], #1
    80de:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    80e2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    80e6:	bcs.n	80dc <memcpy+0x118>

	ldrb	r3, [r1]
    80e8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    80ea:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    80ec:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    80ee:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    80f0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    80f2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    80f4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    80f6:	bx	lr

000080f8 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    80f8:	movs	r0, #4
    80fa:	mov	r1, lr
    80fc:	tst	r0, r1
    80fe:	beq.n	8108 <_MSP>
    8100:	mrs	r0, PSP
    8104:	b.w	8118 <HardFault_HandlerC>

00008108 <_MSP>:
    8108:	mrs	r0, MSP
    810c:	b.w	8118 <HardFault_HandlerC>

00008110 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    8110:	bx	lr
    8112:	nop

00008114 <startup_default_late_hook>:
uint8_t external_psram_size = 0;

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    8114:	bx	lr
    8116:	nop

00008118 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    8118:	ldr	r3, [pc, #108]	; (8188 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    811a:	movs	r1, #5
    811c:	ldr	r2, [pc, #108]	; (818c <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    811e:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    8120:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    8122:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    8126:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    8128:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    812c:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    812e:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    8130:	ldr	r4, [pc, #92]	; (8190 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    8132:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    8134:	ldr	r0, [pc, #92]	; (8194 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    8136:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    8138:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    813c:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    8140:	ldr	r3, [r4, #0]
    8142:	cmp	r3, r0
    8144:	bls.n	814c <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    8146:	ldr	r0, [pc, #80]	; (8198 <HardFault_HandlerC+0x80>)
    8148:	bl	8914 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    814c:	ldr	r5, [pc, #56]	; (8188 <HardFault_HandlerC+0x70>)
    814e:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    8150:	movs	r0, #0
    8152:	ldr	r2, [pc, #72]	; (819c <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    8154:	ldr	r1, [pc, #72]	; (81a0 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    8156:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    815a:	str	r0, [sp, #4]
    815c:	ldr	r3, [sp, #4]
    815e:	cmp	r3, r2
    8160:	bhi.n	816e <HardFault_HandlerC+0x56>
    8162:	ldr	r3, [sp, #4]
    8164:	adds	r3, #1
    8166:	str	r3, [sp, #4]
    8168:	ldr	r3, [sp, #4]
    816a:	cmp	r3, r2
    816c:	bls.n	8162 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    816e:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    8172:	str	r0, [sp, #4]
    8174:	ldr	r3, [sp, #4]
    8176:	cmp	r3, r1
    8178:	bhi.n	8156 <HardFault_HandlerC+0x3e>
    817a:	ldr	r3, [sp, #4]
    817c:	adds	r3, #1
    817e:	str	r3, [sp, #4]
    8180:	ldr	r3, [sp, #4]
    8182:	cmp	r3, r1
    8184:	bls.n	817a <HardFault_HandlerC+0x62>
    8186:	b.n	8156 <HardFault_HandlerC+0x3e>
    8188:	.word	0x401bc000
    818c:	.word	0x401f8000
    8190:	.word	0x200008cc
    8194:	.word	0x23c345ff
    8198:	.word	0x11e1a300
    819c:	.word	0x000f423f
    81a0:	.word	0x0089543f

000081a4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    81a4:	ldr	r2, [pc, #36]	; (81cc <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    81a6:	push	{r3, lr}
        char *prev = __brkval;
    81a8:	ldr	r3, [r2, #0]
        if (incr != 0) {
    81aa:	cbz	r0, 81b6 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    81ac:	add	r0, r3
    81ae:	ldr	r1, [pc, #32]	; (81d0 <_sbrk+0x2c>)
    81b0:	cmp	r0, r1
    81b2:	bhi.n	81ba <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    81b4:	str	r0, [r2, #0]
        }
        return prev;
}
    81b6:	mov	r0, r3
    81b8:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    81ba:	bl	aa00 <__errno>
    81be:	movs	r2, #12
                        return (void *)-1;
    81c0:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    81c4:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    81c6:	mov	r0, r3
    81c8:	pop	{r3, pc}
    81ca:	nop
    81cc:	.word	0x200008c4
    81d0:	.word	0x20280000

000081d4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    81d4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    81d6:	ldr	r1, [pc, #80]	; (8228 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    81d8:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81dc:	ldr	r5, [pc, #76]	; (822c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    81de:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    81e0:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81e4:	ldr	r6, [pc, #72]	; (8230 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    81e6:	ldr	r2, [pc, #76]	; (8234 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81e8:	add.w	r5, r5, r0, lsl #5
    81ec:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    81ee:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81f0:	mov	r0, r5
    81f2:	ldrh	r2, [r6, #0]
    81f4:	bl	9458 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    81f8:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    81fa:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    81fe:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    8200:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8204:	ldr	r2, [pc, #48]	; (8238 <rx_queue_transfer+0x64>)
    8206:	str	r3, [r2, #0]
		location += 32;
    8208:	adds	r3, #32
	} while (location < end_addr);
    820a:	cmp	r1, r3
    820c:	bhi.n	8206 <rx_queue_transfer+0x32>
	asm("dsb");
    820e:	dsb	sy
	asm("isb");
    8212:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8216:	movs	r0, #3
    8218:	mov	r1, r5
    821a:	bl	94b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    821e:	ldr	r3, [pc, #28]	; (823c <rx_queue_transfer+0x68>)
    8220:	mov.w	r2, #131072	; 0x20000
    8224:	str	r2, [r3, #0]
    8226:	pop	{r3, r4, r5, r6, r7, pc}
    8228:	.word	0x20200000
    822c:	.word	0x20004820
    8230:	.word	0x2000492e
    8234:	.word	0xe000e18c
    8238:	.word	0xe000ef5c
    823c:	.word	0xe000e10c

00008240 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8240:	ldr	r2, [pc, #144]	; (82d4 <rx_event+0x94>)
    8242:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8244:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8248:	ubfx	r3, r3, #16, #15
    824c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    824e:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8250:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8252:	cmp	r4, #0
    8254:	ble.n	82c8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    8256:	ldr	r1, [pc, #128]	; (82d8 <rx_event+0x98>)
		if (head != rx_tail) {
    8258:	ldr	r2, [pc, #128]	; (82dc <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    825a:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    825c:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    825e:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8260:	ldr	r0, [pc, #124]	; (82e0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    8262:	ldr	r6, [pc, #128]	; (82e4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    8264:	cmp	r3, r2
    8266:	beq.n	8278 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8268:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    826c:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8270:	rsb	r2, r7, #512	; 0x200
    8274:	cmp	r4, r2
    8276:	bls.n	829e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8278:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    827a:	movs	r2, #0
    827c:	ldr	r7, [pc, #104]	; (82e8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    827e:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    8280:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    8284:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    8288:	ldr	r6, [pc, #96]	; (82ec <rx_event+0xac>)
    828a:	ite	ls
    828c:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    828e:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    8290:	strb	r2, [r1, #0]
		rx_available += len;
    8292:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    8294:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    8296:	add	r4, r2
    8298:	str	r4, [r6, #0]
    829a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    829e:	ldr	r3, [pc, #80]	; (82f0 <rx_event+0xb0>)
    82a0:	add.w	r0, r7, r8, lsl #9
    82a4:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    82a6:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    82a8:	add.w	r1, r3, r5, lsl #9
    82ac:	add	r0, r3
    82ae:	bl	7fc4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    82b2:	ldr	r2, [pc, #56]	; (82ec <rx_event+0xac>)
				rx_queue_transfer(i);
    82b4:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    82b6:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    82ba:	ldr	r3, [r2, #0]
    82bc:	add	r4, r3
    82be:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    82c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    82c4:	b.w	81d4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    82c8:	mov	r0, r5
	}
}
    82ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    82ce:	b.w	81d4 <rx_queue_transfer>
    82d2:	nop
    82d4:	.word	0x2000492e
    82d8:	.word	0x20004944
    82dc:	.word	0x20004920
    82e0:	.word	0x20004924
    82e4:	.word	0x20004930
    82e8:	.word	0x20004808
    82ec:	.word	0x20004940
    82f0:	.word	0x20200000

000082f4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    82f4:	ldr	r3, [pc, #120]	; (8370 <usb_serial_flush_callback+0x7c>)
    82f6:	ldrb	r2, [r3, #0]
    82f8:	cbnz	r2, 8312 <usb_serial_flush_callback+0x1e>
    82fa:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    82fe:	ldr	r2, [pc, #116]	; (8374 <usb_serial_flush_callback+0x80>)
    8300:	ldrb	r2, [r2, #0]
    8302:	cbz	r2, 8312 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8304:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    8308:	ldr	r5, [pc, #108]	; (8378 <usb_serial_flush_callback+0x84>)
    830a:	ldrh	r2, [r5, #0]
    830c:	cbnz	r2, 8314 <usb_serial_flush_callback+0x20>
    830e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8312:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8314:	ldr	r6, [pc, #100]	; (837c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8316:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    831a:	ldr	r7, [pc, #100]	; (8380 <usb_serial_flush_callback+0x8c>)
    831c:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    831e:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8320:	ldr	r4, [pc, #96]	; (8384 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8322:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8326:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    832a:	mov	r0, r7
    832c:	mov	r1, r4
    832e:	bl	9458 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8332:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8336:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    833a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    833e:	ldr	r3, [pc, #72]	; (8388 <usb_serial_flush_callback+0x94>)
    8340:	str	r1, [r3, #0]
		location += 32;
    8342:	adds	r1, #32
	} while (location < end_addr);
    8344:	cmp	r2, r1
    8346:	bhi.n	8340 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    8348:	dsb	sy
	asm("isb");
    834c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8350:	movs	r0, #3
    8352:	mov	r1, r7
    8354:	bl	9488 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8358:	ldrb	r3, [r6, #0]
    835a:	ldr	r2, [pc, #32]	; (837c <usb_serial_flush_callback+0x88>)
    835c:	adds	r3, #1
    835e:	uxtb	r3, r3
    8360:	cmp	r3, #3
    8362:	it	hi
    8364:	movhi	r3, #0
    8366:	strb	r3, [r2, #0]
	tx_available = 0;
    8368:	movs	r3, #0
    836a:	strh	r3, [r5, #0]
    836c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8370:	.word	0x2000481a
    8374:	.word	0x20004a18
    8378:	.word	0x20004946
    837c:	.word	0x2000481b
    8380:	.word	0x20004960
    8384:	.word	0x20201000
    8388:	.word	0xe000ef70

0000838c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    838c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8390:	sub	sp, #20
    8392:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8394:	str	r1, [sp, #4]
    8396:	cmp	r1, #0
    8398:	beq.w	84e0 <usb_serial_write.part.1+0x154>
    839c:	movs	r3, #0
    839e:	ldr.w	r8, [pc, #348]	; 84fc <usb_serial_write.part.1+0x170>
    83a2:	ldr.w	r9, [pc, #332]	; 84f0 <usb_serial_write.part.1+0x164>
    83a6:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    83a8:	ldr	r6, [pc, #312]	; (84e4 <usb_serial_write.part.1+0x158>)
    83aa:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    83ae:	ldr.w	sl, [pc, #336]	; 8500 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    83b2:	ldr.w	fp, [pc, #336]	; 8504 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    83b6:	ldr	r2, [pc, #304]	; (84e8 <usb_serial_write.part.1+0x15c>)
    83b8:	ldrb	r4, [r2, #0]
    83ba:	ldr	r2, [pc, #304]	; (84ec <usb_serial_write.part.1+0x160>)
    83bc:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    83c0:	cmp	r3, #0
    83c2:	bne.n	84a2 <usb_serial_write.part.1+0x116>
    83c4:	mov	r5, r3
    83c6:	mov	r4, r3
    83c8:	b.n	83f4 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    83ca:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    83ce:	cbnz	r4, 83d2 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    83d0:	ldr	r5, [r6, #0]
    83d2:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    83d4:	cmp	r3, #0
    83d6:	bne.n	8496 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    83d8:	ldr	r3, [r6, #0]
    83da:	subs	r3, r3, r5
    83dc:	cmp	r3, #120	; 0x78
    83de:	bhi.n	84d4 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    83e0:	ldrb.w	r3, [sl]
    83e4:	cmp	r3, #0
    83e6:	beq.n	8496 <usb_serial_write.part.1+0x10a>
			yield();
    83e8:	bl	9a74 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    83ec:	ldrh.w	r3, [r8]
    83f0:	cmp	r3, #0
    83f2:	bne.n	849e <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    83f4:	mov	r0, r7
    83f6:	bl	94d4 <usb_transfer_status>
			if (!(status & 0x80)) {
    83fa:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    83fe:	ldr	r2, [pc, #240]	; (84f0 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    8400:	bne.n	83ca <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8402:	mov.w	r3, #2048	; 0x800
    8406:	ldr	r2, [pc, #224]	; (84e8 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    8408:	strb.w	r0, [r9]
    840c:	ldrb	r4, [r2, #0]
    840e:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    8410:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8414:	lsls	r4, r4, #11
		if (size >= tx_available) {
    8416:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8418:	ldr	r1, [pc, #216]	; (84f4 <usb_serial_write.part.1+0x168>)
    841a:	add	r0, r4
		if (size >= tx_available) {
    841c:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    841e:	add	r0, r1
		if (size >= tx_available) {
    8420:	bcc.n	84aa <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8422:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    8424:	ldr	r1, [sp, #8]
    8426:	bl	7fc4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    842a:	movs	r3, #0
    842c:	mov	r1, r4
    842e:	mov.w	r2, #2048	; 0x800
    8432:	mov	r0, r7
    8434:	bl	9458 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8438:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    843c:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8440:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8444:	str.w	r3, [fp]
		location += 32;
    8448:	adds	r3, #32
	} while (location < end_addr);
    844a:	cmp	r4, r3
    844c:	bhi.n	8444 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    844e:	dsb	sy
	asm("isb");
    8452:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8456:	movs	r0, #3
    8458:	mov	r1, r7
    845a:	bl	9488 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    845e:	ldr	r3, [pc, #136]	; (84e8 <usb_serial_write.part.1+0x15c>)
    8460:	ldr	r2, [pc, #132]	; (84e8 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    8462:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8464:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8466:	ldr	r0, [pc, #144]	; (84f8 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8468:	adds	r3, #1
    846a:	uxtb	r3, r3
    846c:	cmp	r3, #3
    846e:	it	hi
    8470:	movhi	r3, #0
    8472:	strb	r3, [r2, #0]
			size -= tx_available;
    8474:	ldrh.w	r2, [r8]
			sent += tx_available;
    8478:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    847a:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    847e:	add	r3, r2
    8480:	str	r3, [sp, #0]
			data += tx_available;
    8482:	ldr	r3, [sp, #8]
    8484:	add	r3, r2
    8486:	str	r3, [sp, #8]
    8488:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    848a:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    848e:	ldr	r1, [sp, #4]
    8490:	subs	r2, r1, r2
    8492:	str	r2, [sp, #4]
    8494:	bne.n	83b6 <usb_serial_write.part.1+0x2a>
    8496:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8498:	add	sp, #20
    849a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    849e:	ldr	r2, [pc, #72]	; (84e8 <usb_serial_write.part.1+0x15c>)
    84a0:	ldrb	r4, [r2, #0]
    84a2:	mov	r2, r3
    84a4:	rsb	r0, r3, #2048	; 0x800
    84a8:	b.n	8414 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    84aa:	ldr	r4, [sp, #4]
    84ac:	ldr	r1, [sp, #8]
    84ae:	mov	r2, r4
    84b0:	str	r3, [sp, #12]
    84b2:	bl	7fc4 <memcpy>
			tx_available -= size;
    84b6:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    84b8:	ldr	r2, [pc, #60]	; (84f8 <usb_serial_write.part.1+0x16c>)
    84ba:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    84be:	subs	r3, r3, r4
    84c0:	strh.w	r3, [r8]
    84c4:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    84c6:	str.w	r1, [r2, #132]	; 0x84
    84ca:	mov	r0, r3
    84cc:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    84ce:	add	sp, #20
    84d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    84d4:	movs	r3, #1
				return sent;
    84d6:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    84d8:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    84da:	add	sp, #20
    84dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    84e0:	ldr	r0, [sp, #4]
    84e2:	b.n	8498 <usb_serial_write.part.1+0x10c>
    84e4:	.word	0x20004a24
    84e8:	.word	0x2000481b
    84ec:	.word	0x20004960
    84f0:	.word	0x20004945
    84f4:	.word	0x20201000
    84f8:	.word	0x402e0000
    84fc:	.word	0x20004946
    8500:	.word	0x20004a18
    8504:	.word	0xe000ef70

00008508 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    8508:	bx	lr
    850a:	nop

0000850c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    850c:	ldr	r3, [pc, #196]	; (85d4 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    850e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8512:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    8514:	ldr	r7, [pc, #192]	; (85d8 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8516:	cmp	r3, #0
    8518:	beq.n	85c4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    851a:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    851e:	ldr.w	r8, [pc, #236]	; 860c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    8522:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    8524:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8528:	movs	r1, #0
    852a:	movs	r2, #128	; 0x80
    852c:	ldr	r0, [pc, #172]	; (85dc <usb_serial_configure+0xd0>)
	tx_head = 0;
    852e:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8530:	ldr	r6, [pc, #172]	; (85e0 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8532:	bl	b1ec <memset>
	tx_head = 0;
    8536:	ldr	r4, [pc, #172]	; (85e4 <usb_serial_configure+0xd8>)
	tx_available = 0;
    8538:	ldr	r3, [pc, #172]	; (85e8 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    853a:	mov	r1, r5
    853c:	mov.w	r2, #256	; 0x100
    8540:	ldr	r0, [pc, #168]	; (85ec <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8542:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8544:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8546:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8548:	bl	b1ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    854c:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    854e:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8550:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8552:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8554:	str	r5, [r6, #8]
    8556:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8558:	ldr	r1, [pc, #148]	; (85f0 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    855a:	ldr	r6, [pc, #152]	; (85f4 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    855c:	ldr	r0, [pc, #152]	; (85f8 <usb_serial_configure+0xec>)
	rx_available = 0;
    855e:	ldr.w	lr, [pc, #176]	; 8610 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8562:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8564:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8566:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8568:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    856a:	str	r5, [r6, #0]
    856c:	str	r5, [r6, #4]
    856e:	str	r5, [r6, #8]
    8570:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    8572:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8576:	bl	93f0 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    857a:	ldrh.w	r1, [r8]
    857e:	mov	r2, r5
    8580:	ldr	r3, [pc, #120]	; (85fc <usb_serial_configure+0xf0>)
    8582:	movs	r0, #3
    8584:	bl	938c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8588:	mov	r3, r5
    858a:	ldrh	r1, [r7, #0]
    858c:	movs	r2, #1
    858e:	movs	r0, #3
    8590:	bl	93f0 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8594:	mov	r0, r4
    8596:	adds	r4, #1
    8598:	bl	81d4 <rx_queue_transfer>
    859c:	cmp	r4, #8
    859e:	bne.n	8594 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    85a0:	ldr	r3, [pc, #92]	; (8600 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    85a2:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    85a4:	ldr	r0, [pc, #92]	; (8604 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    85a6:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    85a8:	ldr	r4, [pc, #92]	; (8608 <usb_serial_configure+0xfc>)
    85aa:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    85ac:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    85b0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    85b4:	ldr.w	r2, [r3, #328]	; 0x148
    85b8:	orr.w	r2, r2, #16777216	; 0x1000000
    85bc:	str.w	r2, [r3, #328]	; 0x148
    85c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    85c4:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    85c6:	ldr.w	r8, [pc, #68]	; 860c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    85ca:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    85cc:	strh.w	r3, [r8]
    85d0:	b.n	8528 <usb_serial_configure+0x1c>
    85d2:	nop
    85d4:	.word	0x200049f0
    85d8:	.word	0x20004818
    85dc:	.word	0x20004960
    85e0:	.word	0x20004930
    85e4:	.word	0x2000481b
    85e8:	.word	0x20004946
    85ec:	.word	0x20004820
    85f0:	.word	0x20004944
    85f4:	.word	0x20004808
    85f8:	.word	0x20004920
    85fc:	.word	0x00008241
    8600:	.word	0x402e0000
    8604:	.word	0x200049e0
    8608:	.word	0x000082f5
    860c:	.word	0x2000492e
    8610:	.word	0x20004940

00008614 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8614:	ldr	r3, [pc, #196]	; (86dc <usb_serial_read+0xc8>)
    8616:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    861a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    861e:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8620:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8622:	ldr	r3, [pc, #188]	; (86e0 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8624:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8626:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8628:	cmp	r1, #0
    862a:	beq.n	86d4 <usb_serial_read+0xc0>
    862c:	ldr	r3, [pc, #180]	; (86e4 <usb_serial_read+0xd0>)
    862e:	uxtb	r4, r4
    8630:	ldrb	r3, [r3, #0]
    8632:	cmp	r4, r3
    8634:	beq.n	86d8 <usb_serial_read+0xc4>
    8636:	mov	sl, r0
    8638:	movs	r7, #0
    863a:	ldr.w	fp, [pc, #192]	; 86fc <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    863e:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8640:	ldr	r3, [pc, #164]	; (86e8 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    8642:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8646:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8648:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    864a:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    864c:	ldr	r3, [pc, #156]	; (86ec <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    864e:	it	cs
    8650:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8652:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8654:	ldr	r3, [pc, #144]	; (86e8 <usb_serial_read+0xd4>)
    8656:	ldrh.w	lr, [r3, r5, lsl #1]
    865a:	ldr	r3, [pc, #148]	; (86f0 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    865c:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8660:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8664:	ldr	r3, [pc, #140]	; (86f4 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8666:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    866a:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    866c:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    866e:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    8670:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8672:	bcs.n	86a8 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8674:	add.w	r1, lr, r5, lsl #9
    8678:	mov	r2, r8
    867a:	add	r1, r3
    867c:	bl	7fc4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    8680:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8682:	ldr.w	r1, [fp]
    8686:	mov	r0, r9
			rx_index[i] += len;
    8688:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    868c:	rsb	r1, r8, r1
			rx_index[i] += len;
    8690:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8692:	str.w	r1, [fp]
			rx_index[i] += len;
    8696:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    869a:	ldr	r3, [pc, #92]	; (86f8 <usb_serial_read+0xe4>)
    869c:	mov.w	r2, #131072	; 0x20000
    86a0:	str	r2, [r3, #0]
	return count;
}
    86a2:	add	sp, #12
    86a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    86a8:	bl	7fc4 <memcpy>
			p += avail;
			rx_available -= avail;
    86ac:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    86b0:	uxtb	r3, r4
			rx_queue_transfer(i);
    86b2:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    86b4:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    86b6:	add	sl, r6
			rx_available -= avail;
    86b8:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    86bc:	ldr	r2, [pc, #32]	; (86e0 <usb_serial_read+0xcc>)
    86be:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    86c0:	bl	81d4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    86c4:	cmp	r9, r7
    86c6:	bls.n	86d0 <usb_serial_read+0xbc>
    86c8:	ldr	r3, [pc, #24]	; (86e4 <usb_serial_read+0xd0>)
    86ca:	ldrb	r3, [r3, #0]
    86cc:	cmp	r4, r3
    86ce:	bne.n	863e <usb_serial_read+0x2a>
    86d0:	mov	r0, r7
    86d2:	b.n	869a <usb_serial_read+0x86>
    86d4:	mov	r0, r1
    86d6:	b.n	869a <usb_serial_read+0x86>
    86d8:	movs	r0, #0
    86da:	b.n	869a <usb_serial_read+0x86>
    86dc:	.word	0xe000e18c
    86e0:	.word	0x20004920
    86e4:	.word	0x20004944
    86e8:	.word	0x20004808
    86ec:	.word	0x20004924
    86f0:	.word	0x20004930
    86f4:	.word	0x20200000
    86f8:	.word	0xe000e10c
    86fc:	.word	0x20004940

00008700 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8700:	ldr	r3, [pc, #44]	; (8730 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8702:	ldr	r2, [pc, #48]	; (8734 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8704:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8706:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8708:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    870a:	cmp	r3, r2
    870c:	beq.n	872a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    870e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8710:	ldr	r0, [pc, #36]	; (8738 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8712:	ldr	r2, [pc, #40]	; (873c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8714:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8716:	ldr	r1, [pc, #40]	; (8740 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8718:	it	cs
    871a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    871c:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    871e:	ldrh.w	r1, [r1, r3, lsl #1]
    8722:	add.w	r3, r2, r3, lsl #9
    8726:	ldrb	r0, [r3, r1]
    8728:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    872a:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    872e:	bx	lr
    8730:	.word	0x20004920
    8734:	.word	0x20004944
    8738:	.word	0x20004924
    873c:	.word	0x20200000
    8740:	.word	0x20004808

00008744 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8744:	ldr	r3, [pc, #4]	; (874c <usb_serial_available+0x8>)
    8746:	ldr	r0, [r3, #0]
}
    8748:	bx	lr
    874a:	nop
    874c:	.word	0x20004940

00008750 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    8750:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8754:	ldr	r6, [pc, #84]	; (87ac <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    8756:	ldr	r5, [pc, #88]	; (87b0 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8758:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    875a:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    875c:	uxtb	r4, r4
	while (tail != rx_head) {
    875e:	cmp	r4, r3
    8760:	beq.n	87a6 <usb_serial_flush_input+0x56>
    8762:	ldr.w	r9, [pc, #84]	; 87b8 <usb_serial_flush_input+0x68>
    8766:	ldr.w	fp, [pc, #84]	; 87bc <usb_serial_flush_input+0x6c>
    876a:	ldr.w	r8, [pc, #84]	; 87c0 <usb_serial_flush_input+0x70>
    876e:	ldr	r7, [pc, #68]	; (87b4 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    8770:	adds	r4, #1
    8772:	cmp	r4, #8
    8774:	uxtb.w	sl, r4
    8778:	bls.n	877e <usb_serial_flush_input+0x2e>
    877a:	movs	r4, #0
    877c:	mov	sl, r4
		uint32_t i = rx_list[tail];
    877e:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8782:	ldr.w	r2, [fp]
    8786:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    878a:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    878c:	ldrh.w	r1, [r7, r1, lsl #1]
    8790:	subs	r3, r3, r1
    8792:	subs	r3, r2, r3
    8794:	str.w	r3, [fp]
		rx_queue_transfer(i);
    8798:	bl	81d4 <rx_queue_transfer>
		rx_tail = tail;
    879c:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    87a0:	ldrb	r3, [r5, #0]
    87a2:	cmp	r4, r3
    87a4:	bne.n	8770 <usb_serial_flush_input+0x20>
    87a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87aa:	nop
    87ac:	.word	0x20004920
    87b0:	.word	0x20004944
    87b4:	.word	0x20004808
    87b8:	.word	0x20004924
    87bc:	.word	0x20004940
    87c0:	.word	0x20004930

000087c4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    87c4:	push	{lr}
    87c6:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    87c8:	movs	r1, #1
    87ca:	add.w	r0, sp, #7
    87ce:	bl	8614 <usb_serial_read>
    87d2:	cbz	r0, 87de <usb_serial_getchar+0x1a>
    87d4:	ldrb.w	r0, [sp, #7]
	return -1;
}
    87d8:	add	sp, #12
    87da:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    87de:	mov.w	r0, #4294967295
    87e2:	b.n	87d8 <usb_serial_getchar+0x14>

000087e4 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    87e4:	ldr	r3, [pc, #36]	; (880c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    87e6:	push	{lr}
    87e8:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    87ea:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    87ec:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    87f0:	cbnz	r3, 87fc <usb_serial_putchar+0x18>
    87f2:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    87f6:	add	sp, #12
    87f8:	ldr.w	pc, [sp], #4
    87fc:	movs	r1, #1
    87fe:	add.w	r0, sp, #7
    8802:	bl	838c <usb_serial_write.part.1>
    8806:	add	sp, #12
    8808:	ldr.w	pc, [sp], #4
    880c:	.word	0x20004a18

00008810 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8810:	ldr	r3, [pc, #16]	; (8824 <usb_serial_write+0x14>)
    8812:	ldrb	r3, [r3, #0]
    8814:	and.w	r2, r3, #255	; 0xff
    8818:	cbz	r3, 881e <usb_serial_write+0xe>
    881a:	b.w	838c <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    881e:	mov	r0, r2
    8820:	bx	lr
    8822:	nop
    8824:	.word	0x20004a18

00008828 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8828:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    882c:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    882e:	ldr.w	r8, [pc, #64]	; 8870 <usb_serial_write_buffer_free+0x48>
    8832:	movs	r3, #1
    8834:	ldr	r5, [pc, #48]	; (8868 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8836:	mov	r7, r4
    8838:	ldr	r6, [pc, #48]	; (886c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    883a:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    883e:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8840:	mov	r0, r5
    8842:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8844:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8846:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    884a:	beq.n	8858 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    884c:	bl	94d4 <usb_transfer_status>
    8850:	lsls	r3, r0, #24
    8852:	it	pl
    8854:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8858:	cmp	r4, #4
    885a:	bne.n	883e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    885c:	movs	r3, #0
	return sum;
}
    885e:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8860:	strb.w	r3, [r8]
	return sum;
}
    8864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8868:	.word	0x20004960
    886c:	.word	0x2000481b
    8870:	.word	0x2000481a

00008874 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8874:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8878:	ldr	r3, [pc, #124]	; (88f8 <usb_serial_flush_output+0x84>)
    887a:	ldrb	r3, [r3, #0]
    887c:	cbz	r3, 8884 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    887e:	ldr	r5, [pc, #124]	; (88fc <usb_serial_flush_output+0x88>)
    8880:	ldrh	r2, [r5, #0]
    8882:	cbnz	r2, 8888 <usb_serial_flush_output+0x14>
    8884:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8888:	ldr.w	r8, [pc, #132]	; 8910 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    888c:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8890:	ldr	r6, [pc, #108]	; (8900 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8892:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8896:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    889a:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    889c:	ldr	r4, [pc, #100]	; (8904 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    889e:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    88a0:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    88a4:	ldr	r7, [pc, #96]	; (8908 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    88a6:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88aa:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    88ac:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88b0:	mov	r1, r4
    88b2:	bl	9458 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    88b6:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    88ba:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    88be:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    88c2:	ldr	r3, [pc, #72]	; (890c <usb_serial_flush_output+0x98>)
    88c4:	str	r1, [r3, #0]
		location += 32;
    88c6:	adds	r1, #32
	} while (location < end_addr);
    88c8:	cmp	r2, r1
    88ca:	bhi.n	88c4 <usb_serial_flush_output+0x50>
	asm("dsb");
    88cc:	dsb	sy
	asm("isb");
    88d0:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    88d4:	movs	r0, #3
    88d6:	mov	r1, r6
    88d8:	bl	9488 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    88dc:	ldrb.w	r3, [r8]
    88e0:	ldr	r2, [pc, #44]	; (8910 <usb_serial_flush_output+0x9c>)
    88e2:	adds	r3, #1
    88e4:	uxtb	r3, r3
    88e6:	cmp	r3, #3
    88e8:	it	hi
    88ea:	movhi	r3, #0
    88ec:	strb	r3, [r2, #0]
	tx_available = 0;
    88ee:	movs	r3, #0
    88f0:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    88f2:	strb	r3, [r7, #0]
    88f4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88f8:	.word	0x20004a18
    88fc:	.word	0x20004946
    8900:	.word	0x20004960
    8904:	.word	0x20201000
    8908:	.word	0x2000481a
    890c:	.word	0xe000ef70
    8910:	.word	0x2000481b

00008914 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8914:	ldr	r2, [pc, #600]	; (8b70 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8916:	ldr	r3, [pc, #604]	; (8b74 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8918:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    891a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    891e:	ldr	r4, [pc, #600]	; (8b78 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8920:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8924:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    8926:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8928:	bls.n	8964 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    892a:	ldr	r3, [pc, #592]	; (8b7c <set_arm_clock+0x268>)
    892c:	cmp	r0, r3
    892e:	bls.w	8b5c <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8932:	ldr	r3, [pc, #588]	; (8b80 <set_arm_clock+0x26c>)
    8934:	movw	r5, #1575	; 0x627
    8938:	ldr	r7, [pc, #584]	; (8b84 <set_arm_clock+0x270>)
    893a:	add	r3, r0
    893c:	ldr	r4, [pc, #584]	; (8b88 <set_arm_clock+0x274>)
    893e:	lsrs	r2, r3, #8
    8940:	umull	r3, r2, r7, r2
    8944:	lsrs	r3, r2, #7
    8946:	add.w	r3, r3, r3, lsl #2
    894a:	add.w	r2, r3, r3, lsl #2
    894e:	addw	r3, r2, #1250	; 0x4e2
    8952:	cmp	r3, r5
    8954:	it	cs
    8956:	movcs	r3, r5
    8958:	sub.w	r3, r3, #800	; 0x320
    895c:	umull	r3, r5, r4, r3
    8960:	lsrs	r5, r5, #3
    8962:	b.n	896e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    8964:	ldr	r5, [pc, #548]	; (8b8c <set_arm_clock+0x278>)
    8966:	cmp	r0, r5
    8968:	ite	ls
    896a:	movls	r5, #6
    896c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    896e:	ldr	r2, [pc, #516]	; (8b74 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8970:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8974:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8978:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    897a:	orr.w	r3, r3, #192	; 0xc0
    897e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8982:	bcs.n	899a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8984:	ldr	r3, [pc, #496]	; (8b78 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8986:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    898a:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    898c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    898e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8990:	ldr	r3, [r2, #0]
    8992:	cmp	r3, #0
    8994:	bge.n	8990 <set_arm_clock+0x7c>
    8996:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    899a:	ands.w	r3, lr, #33554432	; 0x2000000
    899e:	bne.n	8a04 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    89a0:	ldr	r4, [pc, #492]	; (8b90 <set_arm_clock+0x27c>)
    89a2:	ldr	r2, [pc, #496]	; (8b94 <set_arm_clock+0x280>)
    89a4:	ldr.w	ip, [r4, #16]
    89a8:	mov	r4, r2
    89aa:	and.w	r2, ip, r2
    89ae:	cmp	r2, r4
    89b0:	itet	eq
    89b2:	moveq.w	r3, #402653184	; 0x18000000
    89b6:	movne.w	r2, #4096	; 0x1000
    89ba:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    89bc:	eor.w	r4, lr, r3
    89c0:	tst.w	r4, #939524096	; 0x38000000
    89c4:	beq.n	89d8 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    89c6:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    89ca:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    89ce:	ldr	r4, [pc, #420]	; (8b74 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    89d0:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    89d4:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    89d8:	eor.w	r3, r1, r2
    89dc:	tst.w	r3, #12288	; 0x3000
    89e0:	beq.n	89f4 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    89e2:	ldr	r3, [pc, #400]	; (8b74 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    89e4:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    89e8:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    89ea:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    89ec:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    89ee:	ldr	r3, [r2, #72]	; 0x48
    89f0:	lsls	r4, r3, #28
    89f2:	bmi.n	89ee <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    89f4:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    89f8:	ldr	r2, [pc, #376]	; (8b74 <set_arm_clock+0x260>)
    89fa:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    89fe:	ldr	r3, [r2, #72]	; 0x48
    8a00:	lsls	r1, r3, #26
    8a02:	bmi.n	89fe <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8a04:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8a06:	ldr	r4, [pc, #400]	; (8b98 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8a08:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8a0a:	mul.w	r3, r1, r2
    8a0e:	mul.w	r3, r0, r3
    8a12:	cmp	r3, r4
    8a14:	bhi.n	8a2a <set_arm_clock+0x116>
		if (div_arm < 8) {
    8a16:	cmp	r2, #7
    8a18:	bhi.w	8b46 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    8a1c:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8a1e:	mul.w	r3, r1, r2
    8a22:	mul.w	r3, r0, r3
    8a26:	cmp	r3, r4
    8a28:	bls.n	8a16 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8a2a:	ldr	r0, [pc, #368]	; (8b9c <set_arm_clock+0x288>)
    8a2c:	ldr	r4, [pc, #368]	; (8ba0 <set_arm_clock+0x28c>)
    8a2e:	add	r0, r3
    8a30:	umull	r0, r3, r4, r0
    8a34:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    8a36:	cmp	r3, #108	; 0x6c
    8a38:	bhi.w	8b52 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    8a3c:	cmp	r3, #53	; 0x35
    8a3e:	bhi.w	8b60 <set_arm_clock+0x24c>
    8a42:	ldr.w	r8, [pc, #392]	; 8bcc <set_arm_clock+0x2b8>
    8a46:	movs	r3, #54	; 0x36
    8a48:	ldr	r0, [pc, #344]	; (8ba4 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8a4a:	ldr.w	ip, [pc, #324]	; 8b90 <set_arm_clock+0x27c>
    8a4e:	ldr	r4, [pc, #344]	; (8ba8 <set_arm_clock+0x294>)
    8a50:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8a54:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8a58:	and.w	r4, r9, r4
    8a5c:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8a5e:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8a62:	beq.n	8a7c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8a64:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8a68:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8a6c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8a6e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8a72:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8a76:	ldr	r3, [r4, #0]
    8a78:	cmp	r3, #0
    8a7a:	bge.n	8a76 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8a7c:	ldr.w	ip, [pc, #244]	; 8b74 <set_arm_clock+0x260>
    8a80:	subs	r2, #1
    8a82:	ldr.w	r3, [ip, #16]
    8a86:	and.w	r3, r3, #7
    8a8a:	cmp	r3, r2
    8a8c:	beq.n	8a9e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8a8e:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8a92:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8a94:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8a98:	ldr	r3, [r4, #72]	; 0x48
    8a9a:	lsls	r3, r3, #15
    8a9c:	bmi.n	8a98 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8a9e:	subs	r1, #1
    8aa0:	lsls	r1, r1, #10
    8aa2:	eor.w	r3, lr, r1
    8aa6:	tst.w	r3, #7168	; 0x1c00
    8aaa:	beq.n	8ac6 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    8aac:	ldr	r3, [pc, #196]	; (8b74 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8aae:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8ab2:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8ab6:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8ab8:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    8abc:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8ac0:	ldr	r3, [r2, #72]	; 0x48
    8ac2:	lsls	r1, r3, #30
    8ac4:	bmi.n	8ac0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8ac6:	ldr	r3, [pc, #228]	; (8bac <set_arm_clock+0x298>)
    8ac8:	ldr	r1, [pc, #228]	; (8bb0 <set_arm_clock+0x29c>)
    8aca:	add	r3, r0
    8acc:	lsrs	r3, r3, #7
    8ace:	umull	r3, r1, r1, r3
    8ad2:	lsrs	r1, r1, #12
    8ad4:	cmp	r1, #4
    8ad6:	it	cs
    8ad8:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    8ada:	subs	r3, r1, #1
    8adc:	lsls	r3, r3, #8
    8ade:	eor.w	r2, lr, r3
    8ae2:	tst.w	r2, #768	; 0x300
    8ae6:	beq.n	8af8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8ae8:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8aec:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8af0:	ldr	r2, [pc, #128]	; (8b74 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8af2:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8af6:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8af8:	ldr	r3, [pc, #120]	; (8b74 <set_arm_clock+0x260>)
    8afa:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8afc:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8afe:	bic.w	r4, r4, #33554432	; 0x2000000
    8b02:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8b04:	ldr	r3, [r2, #72]	; 0x48
    8b06:	lsls	r3, r3, #26
    8b08:	bmi.n	8b04 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b0a:	ldr	r3, [pc, #168]	; (8bb4 <set_arm_clock+0x2a0>)
    8b0c:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8b10:	ldr	r4, [pc, #164]	; (8bb8 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8b12:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b14:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8b18:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b1a:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8b1e:	ldr	r4, [pc, #156]	; (8bbc <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b20:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8b24:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b28:	ldr	r2, [pc, #148]	; (8bc0 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8b2a:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8b2c:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8b2e:	bcs.n	8b42 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8b30:	ldr	r3, [pc, #68]	; (8b78 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8b32:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8b36:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8b38:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8b3a:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8b3c:	ldr	r3, [r2, #0]
    8b3e:	cmp	r3, #0
    8b40:	bge.n	8b3c <set_arm_clock+0x228>
	}

	return frequency;
}
    8b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    8b46:	cmp	r1, #4
    8b48:	bhi.w	8a2a <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    8b4c:	adds	r1, #1
				div_arm = 1;
    8b4e:	movs	r2, #1
    8b50:	b.n	8a0a <set_arm_clock+0xf6>
    8b52:	ldr.w	r8, [pc, #124]	; 8bd0 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    8b56:	movs	r3, #108	; 0x6c
    8b58:	ldr	r0, [pc, #104]	; (8bc4 <set_arm_clock+0x2b0>)
    8b5a:	b.n	8a4a <set_arm_clock+0x136>
    8b5c:	movs	r5, #18
    8b5e:	b.n	896e <set_arm_clock+0x5a>
    8b60:	ldr	r0, [pc, #100]	; (8bc8 <set_arm_clock+0x2b4>)
    8b62:	ldr.w	r8, [pc, #112]	; 8bd4 <set_arm_clock+0x2c0>
    8b66:	mul.w	r0, r0, r3
    8b6a:	orr.w	r8, r3, r8
    8b6e:	b.n	8a4a <set_arm_clock+0x136>
    8b70:	.word	0x1f78a400
    8b74:	.word	0x400fc000
    8b78:	.word	0x40080000
    8b7c:	.word	0x23c34600
    8b80:	.word	0xdc3cba00
    8b84:	.word	0x004cb223
    8b88:	.word	0x51eb851f
    8b8c:	.word	0x016e3600
    8b90:	.word	0x400d8000
    8b94:	.word	0x80003040
    8b98:	.word	0x269fb1ff
    8b9c:	.word	0x005b8d80
    8ba0:	.word	0x165e9f81
    8ba4:	.word	0x269fb200
    8ba8:	.word	0x8001307f
    8bac:	.word	0x08f0d17f
    8bb0:	.word	0x00e5109f
    8bb4:	.word	0x431bde83
    8bb8:	.word	0x200008cc
    8bbc:	.word	0x200008c8
    8bc0:	.word	0x20004a20
    8bc4:	.word	0x4d3f6400
    8bc8:	.word	0x00b71b00
    8bcc:	.word	0x80002036
    8bd0:	.word	0x8000206c
    8bd4:	.word	0x80002000

00008bd8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8bd8:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8bda:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8bdc:	cbz	r3, 8be6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8bde:	ldr	r3, [r2, #4]
    8be0:	orr.w	r3, r3, #32768	; 0x8000
    8be4:	str	r3, [r2, #4]
	}
	__disable_irq();
    8be6:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8be8:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8bea:	cbz	r4, 8c24 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8bec:	ldr	r3, [pc, #80]	; (8c40 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    8bee:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8bf0:	ldr.w	r4, [r3, #432]	; 0x1b0
    8bf4:	tst	r4, r1
    8bf6:	bne.n	8c38 <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8bf8:	ldr	r5, [pc, #72]	; (8c44 <schedule_transfer+0x6c>)
    8bfa:	ldr	r7, [r5, #0]
    8bfc:	b.n	8c08 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8bfe:	ldr	r4, [r5, #0]
    8c00:	subs	r4, r4, r7
    8c02:	cmp.w	r4, #2400	; 0x960
    8c06:	bcs.n	8c20 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8c08:	ldr.w	r4, [r3, #320]	; 0x140
    8c0c:	orr.w	r4, r4, #16384	; 0x4000
    8c10:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8c14:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8c18:	ldr.w	r4, [r3, #320]	; 0x140
    8c1c:	lsls	r4, r4, #17
    8c1e:	bpl.n	8bfe <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8c20:	tst	r1, r6
    8c22:	bne.n	8c38 <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    8c24:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    8c26:	ldr	r4, [pc, #24]	; (8c40 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8c28:	str	r2, [r0, #8]
	endpoint->status = 0;
    8c2a:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8c2c:	ldr.w	r3, [r4, #432]	; 0x1b0
    8c30:	orrs	r1, r3
    8c32:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8c36:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8c38:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8c3a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8c3c:	pop	{r4, r5, r6, r7}
    8c3e:	bx	lr
    8c40:	.word	0x402e0000
    8c44:	.word	0xe0001004

00008c48 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8c48:	push	{r4, r5, r6, lr}
    8c4a:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8c4c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    8c4e:	cbz	r0, 8c76 <run_callbacks+0x2e>
    8c50:	mov	r2, r0
    8c52:	movs	r4, #0
    8c54:	b.n	8c5e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8c56:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8c58:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8c5a:	cmp	r2, #1
    8c5c:	beq.n	8c78 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    8c5e:	ldr	r3, [r2, #4]
    8c60:	ands.w	r3, r3, #128	; 0x80
    8c64:	beq.n	8c56 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8c66:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8c68:	cbz	r4, 8c76 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8c6a:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    8c6c:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    8c6e:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8c70:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    8c72:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8c74:	bne.n	8c6a <run_callbacks+0x22>
    8c76:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8c78:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8c7a:	str	r3, [r6, #52]	; 0x34
			break;
    8c7c:	b.n	8c68 <run_callbacks+0x20>
    8c7e:	nop

00008c80 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8c80:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8c82:	cbnz	r1, 8cbe <endpoint0_transmit.constprop.1+0x3e>
    8c84:	ldr	r4, [pc, #132]	; (8d0c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c86:	ldr	r1, [pc, #136]	; (8d10 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8c88:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c8a:	ldr	r3, [pc, #136]	; (8d14 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c8c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c8e:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c92:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8c94:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8c96:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8c98:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8c9a:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8c9c:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8c9e:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8ca2:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8ca6:	ldr	r5, [pc, #112]	; (8d18 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8ca8:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8cac:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8cae:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8cb2:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8cb4:	ldr.w	r3, [r2, #432]	; 0x1b0
    8cb8:	cmp	r3, #0
    8cba:	bne.n	8cb4 <endpoint0_transmit.constprop.1+0x34>
}
    8cbc:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cbe:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cc0:	ldr	r3, [pc, #88]	; (8d1c <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cc2:	ldr	r5, [pc, #80]	; (8d14 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cc4:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8cc6:	ldr	r4, [pc, #68]	; (8d0c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cc8:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8ccc:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8cce:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8cd0:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cd2:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8cd6:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cd8:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8cdc:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cde:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8ce2:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8ce6:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    8cea:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8cec:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cee:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8cf2:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8cf6:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8cfa:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8cfc:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8cfe:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8d02:	ldr.w	r3, [r2, #432]	; 0x1b0
    8d06:	cmp	r3, #0
    8d08:	bne.n	8d02 <endpoint0_transmit.constprop.1+0x82>
    8d0a:	b.n	8c86 <endpoint0_transmit.constprop.1+0x6>
    8d0c:	.word	0x20006000
    8d10:	.word	0x20005020
    8d14:	.word	0x402e0000
    8d18:	.word	0x200049f4
    8d1c:	.word	0x20005000

00008d20 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    8d20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8d24:	ldr	r4, [pc, #696]	; (8fe0 <isr+0x2c0>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    8d26:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8d28:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8d2c:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8d30:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8d34:	beq.n	8df4 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8d36:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8d3a:	cmp	r3, #0
    8d3c:	beq.n	8dea <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d3e:	mov.w	fp, #65537	; 0x10001
    8d42:	ldr.w	r9, [pc, #708]	; 9008 <isr+0x2e8>
    8d46:	ldr	r6, [pc, #668]	; (8fe4 <isr+0x2c4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8d48:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d4a:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    8d4c:	str.w	r3, [r4, #428]	; 0x1ac
    8d50:	ldr	r0, [r6, #40]	; 0x28
    8d52:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8d54:	ldr.w	r3, [r4, #320]	; 0x140
    8d58:	orr.w	r3, r3, #8192	; 0x2000
    8d5c:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8d60:	ldr.w	r3, [r4, #320]	; 0x140
    8d64:	lsls	r7, r3, #18
    8d66:	bpl.n	8d54 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8d68:	ldr.w	r3, [r5, #320]	; 0x140
    8d6c:	bic.w	r3, r3, #8192	; 0x2000
    8d70:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8d74:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8d78:	ldr.w	r3, [r4, #436]	; 0x1b4
    8d7c:	ands.w	r3, r3, #65537	; 0x10001
    8d80:	bne.n	8d78 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d82:	uxth	r1, r0
    8d84:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8d88:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d8c:	cmp	r1, r7
    8d8e:	bhi.w	8efa <isr+0x1da>
    8d92:	cmp.w	r1, #1664	; 0x680
    8d96:	bcs.w	916c <isr+0x44c>
    8d9a:	cmp.w	r1, #258	; 0x102
    8d9e:	beq.w	9078 <isr+0x358>
    8da2:	bhi.w	8f8e <isr+0x26e>
    8da6:	cmp	r1, #128	; 0x80
    8da8:	beq.w	905e <isr+0x33e>
    8dac:	cmp	r1, #130	; 0x82
    8dae:	bne.w	8f7e <isr+0x25e>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8db2:	uxth	r2, r2
    8db4:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8db8:	cmp	r1, #7
    8dba:	bhi.w	8f7e <isr+0x25e>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8dbe:	lsls	r1, r1, #2
    8dc0:	ldr	r0, [pc, #548]	; (8fe8 <isr+0x2c8>)
		reply_buffer[0] = 0;
    8dc2:	ldr	r7, [pc, #552]	; (8fec <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8dc4:	add	r0, r1
    8dc6:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8dc8:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    8dca:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    8dcc:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8dce:	bpl.w	91ea <isr+0x4ca>
    8dd2:	lsls	r2, r1, #15
    8dd4:	bpl.n	8dda <isr+0xba>
			reply_buffer[0] = 1;
    8dd6:	movs	r3, #1
    8dd8:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    8dda:	movs	r1, #2
    8ddc:	ldr	r0, [pc, #524]	; (8fec <isr+0x2cc>)
    8dde:	bl	8c80 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8de2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8de6:	cmp	r3, #0
    8de8:	bne.n	8d4c <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8dea:	ldr	r2, [pc, #500]	; (8fe0 <isr+0x2c0>)
    8dec:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8df0:	cmp	r3, #0
    8df2:	bne.n	8e96 <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8df4:	tst.w	r8, #64	; 0x40
    8df8:	beq.n	8e2c <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8dfa:	ldr	r3, [pc, #484]	; (8fe0 <isr+0x2c0>)
    8dfc:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8e00:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8e02:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8e06:	ldr.w	r1, [r3, #444]	; 0x1bc
    8e0a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8e0e:	ldr.w	r4, [r2, #432]	; 0x1b0
    8e12:	ldr	r3, [pc, #460]	; (8fe0 <isr+0x2c0>)
    8e14:	cmp	r4, #0
    8e16:	bne.n	8e0e <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8e18:	mov.w	r2, #4294967295
    8e1c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8e20:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    8e24:	bl	8508 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    8e28:	ldr	r3, [pc, #452]	; (8ff0 <isr+0x2d0>)
    8e2a:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    8e2c:	tst.w	r8, #16777216	; 0x1000000
    8e30:	beq.n	8e3a <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8e32:	ldr	r3, [pc, #448]	; (8ff4 <isr+0x2d4>)
    8e34:	ldr	r3, [r3, #0]
    8e36:	cbz	r3, 8e3a <isr+0x11a>
    8e38:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8e3a:	tst.w	r8, #33554432	; 0x2000000
    8e3e:	beq.n	8e48 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8e40:	ldr	r3, [pc, #436]	; (8ff8 <isr+0x2d8>)
    8e42:	ldr	r3, [r3, #0]
    8e44:	cbz	r3, 8e48 <isr+0x128>
    8e46:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    8e48:	tst.w	r8, #4
    8e4c:	beq.n	8e60 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8e4e:	ldr	r3, [pc, #400]	; (8fe0 <isr+0x2c0>)
    8e50:	ldr.w	r3, [r3, #388]	; 0x184
    8e54:	ands.w	r3, r3, #512	; 0x200
    8e58:	beq.n	8ef4 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    8e5a:	ldr	r3, [pc, #416]	; (8ffc <isr+0x2dc>)
    8e5c:	movs	r2, #1
    8e5e:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8e60:	ldr	r3, [pc, #380]	; (8fe0 <isr+0x2c0>)
    8e62:	ldr.w	r2, [r3, #328]	; 0x148
    8e66:	lsls	r2, r2, #24
    8e68:	bpl.n	8e90 <isr+0x170>
    8e6a:	tst.w	r8, #128	; 0x80
    8e6e:	beq.n	8e90 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    8e70:	ldr	r1, [pc, #396]	; (9000 <isr+0x2e0>)
    8e72:	ldrb	r2, [r1, #0]
    8e74:	cbz	r2, 8e90 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    8e76:	subs	r2, #1
    8e78:	uxtb	r2, r2
    8e7a:	strb	r2, [r1, #0]
    8e7c:	cbnz	r2, 8e90 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    8e7e:	ldr	r1, [pc, #388]	; (9004 <isr+0x2e4>)
    8e80:	ldrb	r2, [r1, #0]
    8e82:	and.w	r2, r2, #247	; 0xf7
    8e86:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    8e88:	cmp	r2, #0
    8e8a:	beq.w	92f2 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    8e8e:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    8e90:	add	sp, #12
    8e92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8e96:	ldr	r1, [pc, #368]	; (9008 <isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    8e98:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8e9c:	ldr	r0, [r1, #0]
    8e9e:	tst	r3, r0
    8ea0:	bne.w	9270 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    8ea4:	ldr	r2, [pc, #328]	; (8ff0 <isr+0x2d0>)
    8ea6:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    8ea8:	ands	r5, r3
    8eaa:	beq.n	8df4 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8eac:	lsrs	r7, r5, #16
    8eae:	beq.n	8ed0 <isr+0x1b0>
    8eb0:	ldr	r6, [pc, #304]	; (8fe4 <isr+0x2c4>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    8eb2:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    8eb6:	rbit	r4, r7
    8eba:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8ebe:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    8ec2:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8ec6:	adds	r0, #64	; 0x40
    8ec8:	bl	8c48 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8ecc:	bics	r7, r4
    8ece:	bne.n	8eb6 <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    8ed0:	uxth	r5, r5
				while(rx) {
    8ed2:	cmp	r5, #0
    8ed4:	beq.n	8df4 <isr+0xd4>
    8ed6:	ldr	r6, [pc, #268]	; (8fe4 <isr+0x2c4>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    8ed8:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    8eda:	rbit	r4, r5
    8ede:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    8ee2:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    8ee6:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    8eea:	bl	8c48 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    8eee:	bics	r5, r4
    8ef0:	bne.n	8eda <isr+0x1ba>
    8ef2:	b.n	8df4 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    8ef4:	ldr	r2, [pc, #260]	; (8ffc <isr+0x2dc>)
    8ef6:	strb	r3, [r2, #0]
    8ef8:	b.n	8e60 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8efa:	movw	r7, #8225	; 0x2021
    8efe:	cmp	r1, r7
    8f00:	beq.n	8f76 <isr+0x256>
    8f02:	bhi.w	9018 <isr+0x2f8>
    8f06:	cmp.w	r1, #2176	; 0x880
    8f0a:	beq.w	9150 <isr+0x430>
    8f0e:	cmp.w	r1, #2304	; 0x900
    8f12:	bne.n	8f7e <isr+0x25e>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8f14:	ubfx	r0, r0, #16, #8
    8f18:	ldr	r1, [pc, #240]	; (900c <isr+0x2ec>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8f1a:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8f1e:	ldr	r7, [pc, #240]	; (9010 <isr+0x2f0>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8f20:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8f22:	mov.w	r1, #13369548	; 0xcc00cc
    8f26:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8f28:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8f2c:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8f30:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8f34:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    8f38:	bl	850c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f3c:	ldr	r2, [pc, #212]	; (9014 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8f3e:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8f40:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f42:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8f44:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8f46:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f48:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8f4a:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8f4c:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8f50:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8f54:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8f56:	orr.w	r2, r1, #65536	; 0x10000
    8f5a:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8f5e:	ldr	r2, [pc, #168]	; (9008 <isr+0x2e8>)
    8f60:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    8f62:	ldr.w	r3, [r4, #432]	; 0x1b0
    8f66:	cmp	r3, #0
    8f68:	bne.n	8f62 <isr+0x242>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8f6a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f6e:	cmp	r3, #0
    8f70:	bne.w	8d4c <isr+0x2c>
    8f74:	b.n	8dea <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    8f76:	lsrs	r1, r2, #16
    8f78:	cmp	r1, #7
    8f7a:	beq.w	91f2 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8f7e:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8f82:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f86:	cmp	r3, #0
    8f88:	bne.w	8d4c <isr+0x2c>
    8f8c:	b.n	8dea <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8f8e:	movw	r7, #770	; 0x302
    8f92:	cmp	r1, r7
    8f94:	beq.w	90f0 <isr+0x3d0>
    8f98:	cmp.w	r1, #1280	; 0x500
    8f9c:	bne.n	8f7e <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8f9e:	ldr	r2, [pc, #116]	; (9014 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fa0:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fa2:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8fa4:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8fa6:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fa8:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8faa:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8fac:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8fb0:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8fb4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8fb6:	orr.w	r3, r1, #65536	; 0x10000
    8fba:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8fbe:	ldr.w	r3, [r4, #432]	; 0x1b0
    8fc2:	cmp	r3, #0
    8fc4:	bne.n	8fbe <isr+0x29e>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8fc6:	lsrs	r3, r0, #16
    8fc8:	lsls	r3, r3, #25
    8fca:	orr.w	r3, r3, #16777216	; 0x1000000
    8fce:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8fd2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8fd6:	cmp	r3, #0
    8fd8:	bne.w	8d4c <isr+0x2c>
    8fdc:	b.n	8dea <isr+0xca>
    8fde:	nop
    8fe0:	.word	0x402e0000
    8fe4:	.word	0x20006000
    8fe8:	.word	0x402e01c0
    8fec:	.word	0x20004a08
    8ff0:	.word	0x200049e4
    8ff4:	.word	0x200049e0
    8ff8:	.word	0x200049ec
    8ffc:	.word	0x200049f0
    9000:	.word	0x200049f8
    9004:	.word	0x200049e8
    9008:	.word	0x200049f4
    900c:	.word	0x20004a18
    9010:	.word	0x00cc0002
    9014:	.word	0x20005020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9018:	movw	r3, #8737	; 0x2221
    901c:	cmp	r1, r3
    901e:	beq.n	90d8 <isr+0x3b8>
    9020:	movw	r3, #8993	; 0x2321
    9024:	cmp	r1, r3
    9026:	bne.n	8f7e <isr+0x25e>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9028:	ldr	r3, [pc, #724]	; (9300 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    902a:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    902c:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    902e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9030:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9032:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9034:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9036:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9038:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    903c:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9040:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9042:	orr.w	r3, r2, #65536	; 0x10000
    9046:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    904a:	ldr.w	r3, [r4, #432]	; 0x1b0
    904e:	cmp	r3, #0
    9050:	bne.n	904a <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9052:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9056:	cmp	r3, #0
    9058:	bne.w	8d4c <isr+0x2c>
    905c:	b.n	8dea <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    905e:	ldr	r2, [pc, #676]	; (9304 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    9060:	movs	r1, #2
    9062:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9064:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    9066:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    9068:	bl	8c80 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    906c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9070:	cmp	r3, #0
    9072:	bne.w	8d4c <isr+0x2c>
    9076:	b.n	8dea <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9078:	uxth	r2, r2
    907a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    907e:	cmp	r3, #7
    9080:	bhi.w	8f7e <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9084:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9088:	mov.w	r3, r3, lsl #2
    908c:	ldr	r2, [pc, #632]	; (9308 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    908e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9092:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9096:	add	r2, r3
    9098:	ldr	r3, [r2, #0]
    909a:	ite	ne
    909c:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    90a0:	biceq.w	r3, r3, #1
    90a4:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    90a6:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90a8:	ldr	r3, [pc, #596]	; (9300 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    90aa:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    90ac:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90ae:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    90b0:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    90b2:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    90b6:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    90ba:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    90bc:	orr.w	r3, r2, #65536	; 0x10000
    90c0:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    90c4:	ldr.w	r3, [r4, #432]	; 0x1b0
    90c8:	cmp	r3, #0
    90ca:	bne.n	90c4 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    90cc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    90d0:	cmp	r3, #0
    90d2:	bne.w	8d4c <isr+0x2c>
    90d6:	b.n	8dea <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    90d8:	uxth	r2, r2
    90da:	cmp	r2, #1
    90dc:	bne.n	9028 <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    90de:	ldr	r3, [pc, #556]	; (930c <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    90e0:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    90e4:	ldr	r2, [pc, #552]	; (9310 <isr+0x5f0>)
    90e6:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    90e8:	ldr	r3, [pc, #552]	; (9314 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    90ea:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    90ec:	strb	r0, [r3, #0]
    90ee:	b.n	9028 <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    90f0:	uxth	r2, r2
    90f2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    90f6:	cmp	r3, #7
    90f8:	bhi.w	8f7e <isr+0x25e>
		dir = setup.wIndex & 0x80;
		if (dir) {
    90fc:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9100:	mov.w	r3, r3, lsl #2
    9104:	ldr	r2, [pc, #512]	; (9308 <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9106:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    910a:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    910e:	add	r2, r3
    9110:	ldr	r3, [r2, #0]
    9112:	ite	ne
    9114:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9118:	orreq.w	r3, r3, #1
    911c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    911e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9120:	ldr	r3, [pc, #476]	; (9300 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9122:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9124:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9126:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9128:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    912a:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    912e:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9132:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9134:	orr.w	r3, r2, #65536	; 0x10000
    9138:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    913c:	ldr.w	r3, [r4, #432]	; 0x1b0
    9140:	cmp	r3, #0
    9142:	bne.n	913c <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9144:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9148:	cmp	r3, #0
    914a:	bne.w	8d4c <isr+0x2c>
    914e:	b.n	8dea <isr+0xca>
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9150:	ldr	r2, [pc, #452]	; (9318 <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9152:	movs	r1, #1
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9154:	ldr	r3, [pc, #428]	; (9304 <isr+0x5e4>)
    9156:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9158:	mov	r0, r3
		usb_audio_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    915a:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    915c:	bl	8c80 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9160:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9164:	cmp	r3, #0
    9166:	bne.w	8d4c <isr+0x2c>
    916a:	b.n	8dea <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    916c:	ldr	r3, [pc, #428]	; (931c <isr+0x5fc>)
    916e:	ldr	r1, [r3, #4]
    9170:	cmp	r1, #0
    9172:	beq.w	8f7e <isr+0x25e>
    9176:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9178:	uxth.w	lr, r2
    917c:	b.n	9188 <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    917e:	adds	r3, #12
    9180:	ldr	r1, [r3, #4]
    9182:	cmp	r1, #0
    9184:	beq.w	8f7e <isr+0x25e>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9188:	ldrh	r7, [r3, #0]
    918a:	cmp	r7, r0
    918c:	bne.n	917e <isr+0x45e>
    918e:	ldrh	r7, [r3, #2]
    9190:	cmp	r7, lr
    9192:	bne.n	917e <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    9194:	lsrs	r7, r0, #8
    9196:	cmp	r7, #3
    9198:	beq.w	936e <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    919c:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    919e:	lsrs	r2, r2, #16
    91a0:	cmp	r3, r2
    91a2:	it	cs
    91a4:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    91a6:	cmp.w	r0, #512	; 0x200
    91aa:	beq.w	9350 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    91ae:	cmp.w	r0, #1792	; 0x700
    91b2:	beq.w	92cc <isr+0x5ac>
    91b6:	ldr	r7, [pc, #360]	; (9320 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    91b8:	mov	r2, r3
    91ba:	str	r3, [sp, #4]
    91bc:	mov	r0, r7
    91be:	bl	7fc4 <memcpy>
    91c2:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    91c4:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    91c8:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    91ca:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    91ce:	ldr	r1, [pc, #340]	; (9324 <isr+0x604>)
    91d0:	str	r2, [r1, #0]
		location += 32;
    91d2:	adds	r2, #32
	} while (location < end_addr);
    91d4:	cmp	r7, r2
    91d6:	bhi.n	91ce <isr+0x4ae>
	asm("dsb");
    91d8:	dsb	sy
	asm("isb");
    91dc:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    91e0:	ldr	r0, [pc, #316]	; (9320 <isr+0x600>)
    91e2:	mov	r1, r3
    91e4:	bl	8c80 <endpoint0_transmit.constprop.1>
    91e8:	b.n	8de2 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    91ea:	lsls	r3, r1, #31
    91ec:	bpl.w	8dda <isr+0xba>
    91f0:	b.n	8dd6 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    91f2:	ldr	r7, [pc, #308]	; (9328 <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    91f4:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    91f8:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    91fa:	ldr	r1, [pc, #304]	; (932c <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    91fc:	ldr	r3, [pc, #304]	; (9330 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    91fe:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9200:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9204:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9206:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    9208:	ldr	r1, [pc, #296]	; (9334 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    920a:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    920e:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9210:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9214:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9218:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    921a:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    921e:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9222:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9226:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    922a:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    922c:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9230:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9232:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    9234:	ldr.w	r3, [r4, #432]	; 0x1b0
    9238:	cmp	r3, #0
    923a:	bne.n	9234 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    923c:	ldr	r2, [pc, #192]	; (9300 <isr+0x5e0>)
    923e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9240:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9244:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9246:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9248:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    924c:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    924e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9250:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9254:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9258:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    925a:	orr.w	r3, r1, r0
    925e:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9262:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    9266:	ldr.w	r3, [r4, #432]	; 0x1b0
    926a:	cmp	r3, #0
    926c:	bne.n	9266 <isr+0x546>
    926e:	b.n	8de2 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9270:	ldr	r0, [pc, #180]	; (9328 <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9272:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    9276:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9278:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    927a:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    927c:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    927e:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9280:	bne.w	8ea4 <isr+0x184>
    9284:	uxth	r1, r0
    9286:	cmp	r1, #1
    9288:	bne.w	8ea4 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    928c:	ldr	r1, [pc, #164]	; (9334 <isr+0x614>)
    928e:	ldr	r4, [pc, #168]	; (9338 <isr+0x618>)
    9290:	ldmia	r1, {r0, r1}
    9292:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9294:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9296:	str	r0, [r4, #0]
    9298:	strh	r1, [r4, #4]
    929a:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    929c:	bne.w	8ea4 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    92a0:	cpsid	i
	sof_usage |= (1 << interface);
    92a2:	ldr	r0, [pc, #152]	; (933c <isr+0x61c>)
    92a4:	ldrb	r1, [r0, #0]
    92a6:	orr.w	r1, r1, #8
    92aa:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    92ac:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    92b0:	lsls	r0, r1, #24
    92b2:	bmi.n	92c2 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    92b4:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    92b8:	movs	r0, #128	; 0x80
    92ba:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    92be:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    92c2:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    92c4:	ldr	r2, [pc, #120]	; (9340 <isr+0x620>)
    92c6:	movs	r1, #80	; 0x50
    92c8:	strb	r1, [r2, #0]
    92ca:	b.n	8ea4 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    92cc:	ldr	r0, [pc, #116]	; (9344 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    92ce:	mov	r2, r3
    92d0:	ldr	r7, [pc, #76]	; (9320 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    92d2:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    92d6:	ldr	r1, [pc, #112]	; (9348 <isr+0x628>)
    92d8:	ldr	r0, [pc, #112]	; (934c <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    92da:	str	r3, [sp, #4]
    92dc:	cmp.w	lr, #0
    92e0:	it	eq
    92e2:	moveq	r1, r0
    92e4:	mov	r0, r7
    92e6:	bl	7fc4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    92ea:	movs	r2, #7
    92ec:	ldr	r3, [sp, #4]
    92ee:	strb	r2, [r7, #1]
    92f0:	b.n	91c4 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    92f2:	ldr.w	r2, [r3, #328]	; 0x148
    92f6:	bic.w	r2, r2, #128	; 0x80
    92fa:	str.w	r2, [r3, #328]	; 0x148
    92fe:	b.n	8e8e <isr+0x16e>
    9300:	.word	0x20005020
    9304:	.word	0x20004a08
    9308:	.word	0x402e01c0
    930c:	.word	0x20004a24
    9310:	.word	0x20004ec8
    9314:	.word	0x20004948
    9318:	.word	0x20004a18
    931c:	.word	0x20000588
    9320:	.word	0x20203000
    9324:	.word	0xe000ef70
    9328:	.word	0x20004a00
    932c:	.word	0x00070080
    9330:	.word	0x20005000
    9334:	.word	0x20004a10
    9338:	.word	0x20004ec0
    933c:	.word	0x200049e8
    9340:	.word	0x200049f8
    9344:	.word	0x200049f0
    9348:	.word	0x60001a34
    934c:	.word	0x60001aa0

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    9350:	ldr	r0, [pc, #40]	; (937c <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9352:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9354:	ldr	r1, [pc, #40]	; (9380 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    9356:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9358:	ldr	r0, [pc, #40]	; (9384 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    935a:	str	r3, [sp, #4]
    935c:	cmp	r7, #0
    935e:	it	eq
    9360:	moveq	r1, r0
    9362:	ldr	r0, [pc, #36]	; (9388 <isr+0x668>)
    9364:	bl	7fc4 <memcpy>
    9368:	ldr	r7, [pc, #28]	; (9388 <isr+0x668>)
    936a:	ldr	r3, [sp, #4]
    936c:	b.n	91c4 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    936e:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9370:	ldrb	r3, [r1, #0]
    9372:	cmp	r3, r2
    9374:	it	cs
    9376:	movcs	r3, r2
    9378:	b.n	91ae <isr+0x48e>
    937a:	nop
    937c:	.word	0x200049f0
    9380:	.word	0x60001aa0
    9384:	.word	0x60001a34
    9388:	.word	0x20203000

0000938c <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    938c:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    938e:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9392:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9396:	ite	ne
    9398:	movne	r7, #0
    939a:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    939e:	cmp	r2, #3
    93a0:	bls.n	93a6 <usb_config_rx+0x1a>
    93a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    93a6:	mov.w	sl, r0, lsl #7
    93aa:	ldr.w	r9, [pc, #64]	; 93ec <usb_config_rx+0x60>
    93ae:	mov	r5, r1
    93b0:	mov	r4, r0
    93b2:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    93b6:	movs	r1, #0
    93b8:	movs	r2, #64	; 0x40
    93ba:	mov	r8, r3
    93bc:	mov	r0, r6
    93be:	bl	b1ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    93c2:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    93c4:	orr.w	r1, r7, r5, lsl #16
    93c8:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    93cc:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    93d0:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    93d2:	cmp.w	r8, #0
    93d6:	beq.n	93a2 <usb_config_rx+0x16>
    93d8:	ldr	r3, [pc, #12]	; (93e8 <usb_config_rx+0x5c>)
    93da:	lsls	r0, r4
    93dc:	ldr	r4, [r3, #0]
    93de:	orrs	r0, r4
    93e0:	str	r0, [r3, #0]
    93e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    93e6:	nop
    93e8:	.word	0x200049e4
    93ec:	.word	0x20006000

000093f0 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    93f0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    93f2:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    93f6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    93fa:	ite	ne
    93fc:	movne	r7, #0
    93fe:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9402:	cmp	r2, #3
    9404:	bls.n	940a <usb_config_tx+0x1a>
    9406:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    940a:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    940c:	lsls	r5, r0, #7
    940e:	ldr.w	r9, [pc, #68]	; 9454 <usb_config_tx+0x64>
    9412:	mov	r8, r1
    9414:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9416:	movs	r1, #0
    9418:	mov	r4, r0
    941a:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    941c:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9420:	mov	r0, sl
    9422:	bl	b1ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9426:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9428:	orr.w	r1, r7, r8, lsl #16
    942c:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9430:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9434:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9438:	cmp	r6, #0
    943a:	beq.n	9406 <usb_config_tx+0x16>
    943c:	add.w	r0, r4, #16
    9440:	ldr	r3, [pc, #12]	; (9450 <usb_config_tx+0x60>)
    9442:	lsls	r2, r0
    9444:	ldr	r0, [r3, #0]
    9446:	orrs	r2, r0
    9448:	str	r2, [r3, #0]
    944a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    944e:	nop
    9450:	.word	0x200049e4
    9454:	.word	0x20006000

00009458 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9458:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    945a:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    945c:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    945e:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    9462:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9464:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9466:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9468:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    946c:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9470:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9474:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9478:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    947a:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    947c:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    947e:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9480:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    9482:	pop	{r4, r5, r6, r7}
    9484:	bx	lr
    9486:	nop

00009488 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9488:	subs	r3, r0, #2
    948a:	cmp	r3, #3
    948c:	bls.n	9490 <usb_transmit+0x8>
    948e:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9490:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9492:	ldr	r3, [pc, #24]	; (94ac <usb_transmit+0x24>)
    9494:	add.w	r4, r0, #16
    9498:	movs	r5, #1
    949a:	mov	r2, r1
    949c:	add.w	r0, r3, r0, lsl #7
    94a0:	lsl.w	r1, r5, r4
}
    94a4:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    94a6:	b.w	8bd8 <schedule_transfer>
    94aa:	nop
    94ac:	.word	0x20006040

000094b0 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    94b0:	subs	r3, r0, #2
    94b2:	cmp	r3, #3
    94b4:	bls.n	94b8 <usb_receive+0x8>
    94b6:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    94b8:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    94ba:	ldr	r3, [pc, #20]	; (94d0 <usb_receive+0x20>)
    94bc:	movs	r4, #1
    94be:	mov	r2, r1
    94c0:	lsl.w	r1, r4, r0
    94c4:	add.w	r0, r3, r0, lsl #7
}
    94c8:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    94cc:	b.w	8bd8 <schedule_transfer>
    94d0:	.word	0x20006000

000094d4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    94d4:	ldr	r0, [r0, #4]
#endif
}
    94d6:	bx	lr

000094d8 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    94d8:	cmp	r0, #0
    94da:	beq.n	958c <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    94dc:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    94de:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94e2:	sub	sp, #20
    94e4:	mov	fp, r0
    94e6:	ldr	r4, [pc, #168]	; (9590 <delay+0xb8>)
    94e8:	ldr	r5, [pc, #168]	; (9594 <delay+0xbc>)
    94ea:	ldr	r6, [pc, #172]	; (9598 <delay+0xc0>)
    94ec:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    94f0:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    94f4:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    94f6:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    94f8:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    94fc:	cmp	r1, #0
    94fe:	bne.n	94f0 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9500:	ldr	r7, [pc, #152]	; (959c <delay+0xc4>)
    9502:	strd	r8, r9, [sp, #8]
    9506:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9508:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    950a:	ldr	r2, [pc, #148]	; (95a0 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    950c:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9510:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9512:	ldr	r2, [r2, #0]
    9514:	movs	r7, #1
    9516:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    951a:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    951e:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    9520:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9522:	cmp	r3, r1
    9524:	it	eq
    9526:	cmpeq	r2, r8
    9528:	ite	cs
    952a:	movcs	sl, r8
    952c:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    952e:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9532:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9536:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9538:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    953a:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    953e:	cmp	r3, #0
    9540:	bne.n	9532 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9542:	ldr	r0, [sp, #4]
    9544:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9546:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9548:	ldr	r0, [pc, #84]	; (95a0 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    954a:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    954e:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9550:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9554:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    9558:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    955c:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9560:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    9562:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9564:	cmp	r1, r3
    9566:	it	eq
    9568:	cmpeq	r0, r8
    956a:	ite	cs
    956c:	movcs	r3, r8
    956e:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9570:	add	r2, r3
    9572:	cmp	r2, lr
    9574:	bcc.n	9586 <delay+0xae>
			if (--msec == 0) return;
    9576:	subs.w	fp, fp, #1
			start += 1000;
    957a:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    957e:	bne.n	9532 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    9580:	add	sp, #20
    9582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    9586:	bl	9a74 <yield>
	}
    958a:	b.n	9532 <delay+0x5a>
    958c:	bx	lr
    958e:	nop
    9590:	.word	0x20006300
    9594:	.word	0x20004a24
    9598:	.word	0x20004a1c
    959c:	.word	0xe0001004
    95a0:	.word	0x20004a20

000095a4 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    95a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    95a8:	ldr	r2, [pc, #72]	; (95f4 <micros+0x50>)
    95aa:	movs	r6, #1
    95ac:	ldr	r5, [pc, #72]	; (95f8 <micros+0x54>)
    95ae:	ldr	r4, [pc, #76]	; (95fc <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    95b0:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    95b4:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    95b6:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    95b8:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    95bc:	cmp	r3, #0
    95be:	bne.n	95b0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    95c0:	ldr	r2, [pc, #60]	; (9600 <micros+0x5c>)
    95c2:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95c4:	ldr	r7, [pc, #60]	; (9604 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    95c6:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    95c8:	mov.w	r9, #0
    95cc:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95d0:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    95d2:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95d6:	cmp	r9, r3
    95d8:	umull	r6, r7, r2, r6
    95dc:	it	eq
    95de:	cmpeq	r8, r7
    95e0:	mov	r4, r7
    95e2:	ite	cs
    95e4:	movcs	r4, r7
    95e6:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    95e8:	mla	r0, r0, r1, r4
    95ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    95f0:	bx	lr
    95f2:	nop
    95f4:	.word	0x20006300
    95f8:	.word	0x20004a24
    95fc:	.word	0x20004a1c
    9600:	.word	0xe0001004
    9604:	.word	0x20004a20

00009608 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    9608:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    960a:	ldr	r2, [pc, #24]	; (9624 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    960c:	movs	r1, #7
    960e:	ldr	r3, [pc, #24]	; (9628 <Panic_Temp_isr+0x20>)
    9610:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9612:	ldr	r3, [r2, #56]	; 0x38
    9614:	orr.w	r3, r3, #64	; 0x40
    9618:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    961a:	dsb	sy
  while (1) asm ("wfi");
    961e:	wfi
    9620:	b.n	961e <Panic_Temp_isr+0x16>
    9622:	nop
    9624:	.word	0x400d4000
    9628:	.word	0x400ac000

0000962c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    962c:	ldr	r0, [pc, #656]	; (98c0 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    962e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9632:	ldr	r3, [pc, #656]	; (98c4 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9634:	ldr	r2, [r0, #120]	; 0x78
    9636:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    963a:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    963c:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    963e:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9640:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9644:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9648:	ldr	r4, [pc, #636]	; (98c8 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    964a:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    964e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9650:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9654:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9656:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9658:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    965c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9660:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9664:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9668:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    966c:	ldrh.w	r0, [r3, #392]	; 0x188
    9670:	uxth	r0, r0
    9672:	orr.w	r0, r0, #240	; 0xf0
    9676:	strh.w	r0, [r3, #392]	; 0x188
    967a:	add.w	r0, r1, r1, lsl #1
    967e:	ldr	r3, [pc, #580]	; (98c4 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    9680:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9682:	movs	r5, #0
    9684:	lsls	r0, r0, #5
    9686:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9688:	cmp	r1, #4
    968a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    968c:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9690:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    9692:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9694:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9696:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9698:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    969a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    969c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    969e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    96a0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    96a2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    96a4:	bne.n	967a <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96a6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    96aa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96ae:	ldr	r3, [pc, #540]	; (98cc <pwm_init+0x2a0>)
    96b0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96b4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    96b6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    96b8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    96bc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96be:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    96c2:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    96c6:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    96ca:	ldrh.w	r0, [r4, #392]	; 0x188
    96ce:	uxth	r0, r0
    96d0:	orr.w	r0, r0, #3840	; 0xf00
    96d4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    96d8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    96dc:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    96e0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    96e4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    96e8:	ldrh.w	r0, [r3, #392]	; 0x188
    96ec:	uxth	r0, r0
    96ee:	orr.w	r0, r0, #240	; 0xf0
    96f2:	strh.w	r0, [r3, #392]	; 0x188
    96f6:	add.w	r0, r1, r1, lsl #1
    96fa:	ldr	r3, [pc, #464]	; (98cc <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    96fc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    96fe:	movs	r5, #0
    9700:	lsls	r0, r0, #5
    9702:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9704:	cmp	r1, #4
    9706:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9708:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    970a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    970e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9710:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9712:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9714:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9716:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9718:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    971a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    971c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    971e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9720:	bne.n	96f6 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9722:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9726:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    972a:	ldr	r3, [pc, #420]	; (98d0 <pwm_init+0x2a4>)
    972c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9730:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9732:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9734:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9738:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    973a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    973e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9742:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9746:	ldrh.w	r0, [r4, #392]	; 0x188
    974a:	uxth	r0, r0
    974c:	orr.w	r0, r0, #3840	; 0xf00
    9750:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9754:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9758:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    975c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9760:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9764:	ldrh.w	r0, [r3, #392]	; 0x188
    9768:	uxth	r0, r0
    976a:	orr.w	r0, r0, #240	; 0xf0
    976e:	strh.w	r0, [r3, #392]	; 0x188
    9772:	add.w	r0, r1, r1, lsl #1
    9776:	ldr	r3, [pc, #344]	; (98d0 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9778:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    977a:	movs	r5, #0
    977c:	lsls	r0, r0, #5
    977e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9780:	cmp	r1, #4
    9782:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9784:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9786:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    978a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    978c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    978e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9790:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9792:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9794:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9796:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9798:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    979a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    979c:	bne.n	9772 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    979e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    97a2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    97a6:	ldr	r3, [pc, #300]	; (98d4 <pwm_init+0x2a8>)
    97a8:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    97ac:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    97ae:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    97b0:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    97b4:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    97b6:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    97ba:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    97be:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    97c2:	ldrh.w	r0, [r4, #392]	; 0x188
    97c6:	uxth	r0, r0
    97c8:	orr.w	r0, r0, #3840	; 0xf00
    97cc:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    97d0:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    97d4:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    97d8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    97dc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    97e0:	ldrh.w	r0, [r3, #392]	; 0x188
    97e4:	uxth	r0, r0
    97e6:	orr.w	r0, r0, #240	; 0xf0
    97ea:	strh.w	r0, [r3, #392]	; 0x188
    97ee:	add.w	r0, r1, r1, lsl #1
    97f2:	ldr	r3, [pc, #224]	; (98d4 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    97f4:	adds	r1, #1
    97f6:	lsls	r0, r0, #5
    97f8:	mov	r4, r3
    97fa:	cmp	r1, #4
    97fc:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    97fe:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9800:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9804:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9806:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9808:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    980a:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    980c:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    980e:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9810:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9812:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9814:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9816:	bne.n	97ee <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9818:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    981c:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    981e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9820:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9824:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9826:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    982a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    982c:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9830:	orrs	r3, r7
    9832:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9836:	ldrh.w	r3, [r4, #392]	; 0x188
    983a:	uxth	r3, r3
    983c:	orr.w	r3, r3, #3840	; 0xf00
    9840:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9844:	lsls	r0, r2, #5
    9846:	ldr	r3, [pc, #144]	; (98d8 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9848:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    984a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    984c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    984e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9850:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9852:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9854:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9856:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    985a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    985c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    985e:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9860:	bne.n	9844 <pwm_init+0x218>
    9862:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9864:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9866:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    986a:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    986e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9870:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9874:	lsls	r0, r2, #5
    9876:	ldr	r3, [pc, #100]	; (98dc <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9878:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    987a:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    987c:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    987e:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9880:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9882:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9884:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9886:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9888:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    988a:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    988c:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    988e:	bne.n	9874 <pwm_init+0x248>
    9890:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9892:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9894:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9898:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    989c:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    989e:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    98a2:	lsls	r0, r2, #5
    98a4:	ldr	r3, [pc, #56]	; (98e0 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    98a6:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    98a8:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    98aa:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    98ac:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    98ae:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    98b0:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    98b2:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    98b4:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    98b6:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    98b8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    98ba:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    98bc:	bne.n	98a2 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    98be:	pop	{r4, r5, r6, r7, pc}
    98c0:	.word	0x400fc000
    98c4:	.word	0x403dc000
    98c8:	.word	0xfc030000
    98cc:	.word	0x403e0000
    98d0:	.word	0x403e4000
    98d4:	.word	0x403e8000
    98d8:	.word	0x401dc000
    98dc:	.word	0x401e0000
    98e0:	.word	0x401e4000

000098e4 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    98e4:	lsls	r0, r0, #4
    98e6:	ldr	r3, [pc, #60]	; (9924 <digitalWrite.part.0+0x40>)
    98e8:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    98ea:	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    98ec:	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    98ee:	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    98f0:	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    98f2:	tst	r4, r0
    98f4:	beq.n	9902 <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    98f6:	cbz	r1, 9910 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    98f8:	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    98fc:	ldr.w	r4, [sp], #4
    9900:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9902:	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    9904:	cbnz	r1, 991a <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9906:	ldr	r2, [pc, #32]	; (9928 <digitalWrite.part.0+0x44>)
		}
	}
}
    9908:	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    990c:	str	r2, [r3, #0]
		}
	}
}
    990e:	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    9910:	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    9914:	ldr.w	r4, [sp], #4
    9918:	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    991a:	ldr	r2, [pc, #16]	; (992c <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    991c:	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9920:	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    9922:	bx	lr
    9924:	.word	0x20000218
    9928:	.word	0x00013038
    992c:	.word	0x0001f038

00009930 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9930:	cmp	r0, #54	; 0x36
    9932:	bhi.n	9938 <digitalWrite+0x8>
    9934:	b.w	98e4 <digitalWrite.part.0>
    9938:	bx	lr
    993a:	nop

0000993c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    993c:	cmp	r0, #54	; 0x36
    993e:	bhi.n	997a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9940:	lsls	r0, r0, #4
    9942:	ldr	r2, [pc, #104]	; (99ac <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9944:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9946:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    994a:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    994c:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    994e:	beq.n	997c <pinMode+0x40>
    9950:	cmp	r1, #4
    9952:	beq.n	997c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9954:	ldr	r4, [r3, #12]
    9956:	ldr	r2, [r0, #4]
    9958:	bic.w	r2, r2, r4
    995c:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    995e:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9960:	cbz	r1, 999e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9962:	cmp	r1, #2
    9964:	beq.n	99a4 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9966:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9968:	ldr	r3, [r3, #4]
}
    996a:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    996e:	ite	eq
    9970:	ldreq	r1, [pc, #60]	; (99b0 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9972:	ldrne	r1, [pc, #64]	; (99b4 <pinMode+0x78>)
    9974:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9976:	movs	r2, #21
    9978:	str	r2, [r3, #0]
}
    997a:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    997c:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    997e:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9980:	ldr	r4, [r0, #4]
    9982:	orr.w	r2, r2, r4
    9986:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9988:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    998a:	beq.n	999e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    998c:	movw	r1, #2104	; 0x838
    9990:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9992:	ldr	r3, [r3, #4]
    9994:	movs	r2, #21
}
    9996:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    999a:	str	r2, [r3, #0]
}
    999c:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    999e:	movs	r1, #56	; 0x38
    99a0:	str	r1, [r2, #0]
    99a2:	b.n	9992 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    99a4:	ldr	r1, [pc, #16]	; (99b8 <pinMode+0x7c>)
    99a6:	str	r1, [r2, #0]
    99a8:	b.n	9992 <pinMode+0x56>
    99aa:	nop
    99ac:	.word	0x20000218
    99b0:	.word	0x00013038
    99b4:	.word	0x00010038
    99b8:	.word	0x0001f038

000099bc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    99bc:	ldr	r2, [pc, #72]	; (9a08 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    99be:	ldr	r3, [pc, #76]	; (9a0c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    99c0:	ldr.w	r0, [r2, #544]	; 0x220
    99c4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    99c8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    99ca:	push	{r4, lr}
    99cc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    99ce:	bhi.n	99d6 <usb_init_serialnumber+0x1a>
    99d0:	add.w	r0, r0, r0, lsl #2
    99d4:	lsls	r0, r0, #1
    99d6:	ldr	r4, [pc, #56]	; (9a10 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    99d8:	add	r1, sp, #4
    99da:	movs	r2, #10
    99dc:	bl	9a14 <ultoa>
    99e0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    99e2:	movs	r3, #0
    99e4:	mov	r0, r4
		char c = buf[i];
    99e6:	ldrb.w	r2, [r1], #1
    99ea:	adds	r3, #1
		if (!c) break;
    99ec:	cbz	r2, 99fe <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    99ee:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    99f0:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    99f4:	bne.n	99e6 <usb_init_serialnumber+0x2a>
    99f6:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    99f8:	strb	r3, [r4, #0]
}
    99fa:	add	sp, #16
    99fc:	pop	{r4, pc}
    99fe:	lsls	r3, r3, #1
    9a00:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9a02:	strb	r3, [r4, #0]
}
    9a04:	add	sp, #16
    9a06:	pop	{r4, pc}
    9a08:	.word	0x401f4400
    9a0c:	.word	0x0098967f
    9a10:	.word	0x200008e4

00009a14 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9a14:	push	{r4, r5, r6, r7}
    9a16:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9a18:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9a1a:	mov	r7, r6
    9a1c:	b.n	9a20 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    9a1e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    9a20:	udiv	r3, r0, r2
    9a24:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a28:	add.w	r4, r0, #55	; 0x37
    9a2c:	cmp	r0, #9
    9a2e:	add.w	r0, r0, #48	; 0x30
    9a32:	uxtb	r4, r4
    9a34:	it	ls
    9a36:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9a38:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a3a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    9a3e:	cmp	r3, #0
    9a40:	bne.n	9a1e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    9a42:	adds	r2, r1, r5
    9a44:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9a46:	cbz	r5, 9a5c <ultoa+0x48>
    9a48:	adds	r3, #1
		t = buf[j];
    9a4a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    9a4e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9a50:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    9a52:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9a54:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9a56:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9a5a:	blt.n	9a48 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    9a5c:	mov	r0, r1
    9a5e:	pop	{r4, r5, r6, r7}
    9a60:	bx	lr
    9a62:	nop

00009a64 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9a64:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9a66:	bl	208 <setup>
	while (1) {
		loop();
    9a6a:	bl	28c <loop>
		yield();
    9a6e:	bl	9a74 <yield>
    9a72:	b.n	9a6a <main+0x6>

00009a74 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9a74:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9a76:	ldr	r4, [pc, #132]	; (9afc <yield+0x88>)
    9a78:	ldrb	r3, [r4, #0]
    9a7a:	cbnz	r3, 9a9e <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9a7c:	ldr	r3, [pc, #128]	; (9b00 <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9a7e:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9a80:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9a82:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9a84:	cbnz	r3, 9ace <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9a86:	ldr	r3, [pc, #124]	; (9b04 <yield+0x90>)
    9a88:	ldrb	r3, [r3, #0]
    9a8a:	cmp	r3, #0
    9a8c:	bne.n	9ae2 <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    9a8e:	ldr	r3, [pc, #120]	; (9b08 <yield+0x94>)

	running = 0;
    9a90:	movs	r1, #0
    9a92:	ldr	r2, [r3, #0]
    9a94:	strb	r1, [r4, #0]
    9a96:	cbz	r2, 9a9e <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9a98:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9a9c:	cbz	r2, 9aa0 <yield+0x2c>
    9a9e:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9aa0:	mrs	r0, PRIMASK
		__disable_irq();
    9aa4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9aa6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    9aa8:	cbz	r2, 9ae8 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9aaa:	ldr	r4, [pc, #96]	; (9b0c <yield+0x98>)
    9aac:	ldrb	r1, [r4, #0]
    9aae:	cbnz	r1, 9ae8 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9ab0:	movs	r6, #1
		firstYield = first->_next;
    9ab2:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9ab4:	strb	r6, [r4, #0]
		firstYield = first->_next;
    9ab6:	str	r5, [r3, #0]
		if (firstYield) {
    9ab8:	cbz	r5, 9af0 <yield+0x7c>
			firstYield->_prev = nullptr;
    9aba:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9abc:	cbnz	r0, 9ac0 <yield+0x4c>
    9abe:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9ac0:	movs	r5, #0
		(*(first->_function))(*first);
    9ac2:	ldr	r3, [r2, #8]
    9ac4:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9ac6:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    9ac8:	blx	r3
		runningFromYield = false;
    9aca:	strb	r5, [r4, #0]
    9acc:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9ace:	bl	8744 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9ad2:	cmp	r0, #0
    9ad4:	beq.n	9a86 <yield+0x12>
    9ad6:	bl	9d24 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9ada:	ldr	r3, [pc, #40]	; (9b04 <yield+0x90>)
    9adc:	ldrb	r3, [r3, #0]
    9ade:	cmp	r3, #0
    9ae0:	beq.n	9a8e <yield+0x1a>
    9ae2:	bl	9d84 <HardwareSerial::processSerialEvents()>
    9ae6:	b.n	9a8e <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ae8:	cmp	r0, #0
    9aea:	bne.n	9a9e <yield+0x2a>
    9aec:	cpsie	i
    9aee:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9af0:	ldr	r3, [pc, #28]	; (9b10 <yield+0x9c>)
    9af2:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9af4:	cmp	r0, #0
    9af6:	bne.n	9ac0 <yield+0x4c>
    9af8:	b.n	9abe <yield+0x4a>
    9afa:	nop
    9afc:	.word	0x20004a3c
    9b00:	.word	0x200008fa
    9b04:	.word	0x20004a7c
    9b08:	.word	0x20004a50
    9b0c:	.word	0x20004a54
    9b10:	.word	0x20004a4c

00009b14 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9b14:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b16:	mrs	r2, PRIMASK
		__disable_irq();
    9b1a:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9b1c:	ldrb	r3, [r0, #29]
    9b1e:	cbnz	r3, 9b2e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9b20:	ldrb	r1, [r0, #28]
    9b22:	cmp	r1, #1
    9b24:	beq.n	9b38 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9b26:	cmp	r1, #3
    9b28:	beq.n	9b4c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9b2a:	movs	r3, #1
    9b2c:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9b2e:	cbnz	r2, 9b32 <EventResponder::triggerEventNotImmediate()+0x1e>
    9b30:	cpsie	i
	}
	enableInterrupts(irq);
}
    9b32:	ldr.w	r4, [sp], #4
    9b36:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9b38:	ldr	r4, [pc, #68]	; (9b80 <EventResponder::triggerEventNotImmediate()+0x6c>)
    9b3a:	ldr	r1, [r4, #0]
    9b3c:	cbz	r1, 9b68 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9b3e:	ldr	r1, [pc, #68]	; (9b84 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9b40:	str	r3, [r0, #20]
				_prev = lastYield;
    9b42:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    9b44:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9b46:	str	r3, [r0, #24]
				_prev->_next = this;
    9b48:	str	r0, [r3, #20]
    9b4a:	b.n	9b2a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9b4c:	ldr	r4, [pc, #56]	; (9b88 <EventResponder::triggerEventNotImmediate()+0x74>)
    9b4e:	ldr	r1, [r4, #0]
    9b50:	cbz	r1, 9b74 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9b52:	ldr	r1, [pc, #56]	; (9b8c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9b54:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9b56:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    9b58:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9b5a:	str	r3, [r0, #24]
				_prev->_next = this;
    9b5c:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9b5e:	ldr	r3, [pc, #48]	; (9b90 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9b60:	mov.w	r1, #268435456	; 0x10000000
    9b64:	str	r1, [r3, #0]
    9b66:	b.n	9b2a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9b68:	ldr	r3, [pc, #24]	; (9b84 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9b6a:	str	r1, [r0, #20]
				_prev = nullptr;
    9b6c:	str	r1, [r0, #24]
				firstYield = this;
    9b6e:	str	r0, [r4, #0]
				lastYield = this;
    9b70:	str	r0, [r3, #0]
    9b72:	b.n	9b2a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9b74:	ldr	r3, [pc, #20]	; (9b8c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9b76:	str	r1, [r0, #20]
				_prev = nullptr;
    9b78:	str	r1, [r0, #24]
				firstInterrupt = this;
    9b7a:	str	r0, [r4, #0]
				lastInterrupt = this;
    9b7c:	str	r0, [r3, #0]
    9b7e:	b.n	9b5e <EventResponder::triggerEventNotImmediate()+0x4a>
    9b80:	.word	0x20004a50
    9b84:	.word	0x20004a4c
    9b88:	.word	0x20004a40
    9b8c:	.word	0x20004a44
    9b90:	.word	0xe000ed04

00009b94 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9b94:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9b96:	mrs	r1, PRIMASK
		__disable_irq();
    9b9a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9b9c:	ldr	r4, [pc, #48]	; (9bd0 <EventResponder::runFromInterrupt()+0x3c>)
    9b9e:	ldr	r3, [r4, #0]
		if (first) {
    9ba0:	cbz	r3, 9bc6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9ba2:	ldr	r6, [pc, #48]	; (9bd4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9ba4:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9ba6:	ldr	r2, [r3, #20]
    9ba8:	str	r2, [r4, #0]
			if (firstInterrupt) {
    9baa:	cbz	r2, 9bcc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9bac:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9bae:	cbnz	r1, 9bb2 <EventResponder::runFromInterrupt()+0x1e>
    9bb0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9bb2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9bb4:	mov	r0, r3
    9bb6:	ldr	r3, [r3, #8]
    9bb8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9bba:	mrs	r1, PRIMASK
		__disable_irq();
    9bbe:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9bc0:	ldr	r3, [r4, #0]
		if (first) {
    9bc2:	cmp	r3, #0
    9bc4:	bne.n	9ba6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9bc6:	cbnz	r1, 9bca <EventResponder::runFromInterrupt()+0x36>
    9bc8:	cpsie	i
    9bca:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9bcc:	str	r2, [r6, #0]
    9bce:	b.n	9bae <EventResponder::runFromInterrupt()+0x1a>
    9bd0:	.word	0x20004a40
    9bd4:	.word	0x20004a44

00009bd8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9bd8:	b.w	9b94 <EventResponder::runFromInterrupt()>

00009bdc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9bdc:	ldr	r2, [pc, #96]	; (9c40 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9bde:	push	{r4, r5}
	if (listActive == nullptr) {
    9be0:	ldr	r4, [r2, #0]
    9be2:	cmp	r4, #0
    9be4:	beq.n	9c38 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9be6:	ldr	r3, [r0, #0]
    9be8:	ldr	r1, [r4, #0]
    9bea:	cmp	r3, r1
    9bec:	bcs.n	9c0e <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9bee:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9bf0:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9bf2:	str	r4, [r0, #8]
		_prev = nullptr;
    9bf4:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9bf6:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9bf8:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9bfa:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9bfc:	movs	r3, #2
}
    9bfe:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9c00:	strb	r3, [r0, #20]
}
    9c02:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    9c04:	str	r3, [r0, #0]
    9c06:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9c08:	ldr	r1, [r2, #0]
    9c0a:	cmp	r3, r1
    9c0c:	bcc.n	9c20 <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9c0e:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9c10:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9c12:	cmp	r2, #0
    9c14:	bne.n	9c04 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9c16:	str	r2, [r0, #8]
		_prev = timer;
    9c18:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9c1a:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    9c1c:	str	r0, [r4, #8]
    9c1e:	b.n	9bfc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9c20:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    9c22:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9c24:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    9c26:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9c28:	str	r5, [r0, #12]
				timer->_prev = this;
    9c2a:	str	r0, [r4, #12]
				_prev->_next = this;
    9c2c:	ldr	r1, [r0, #12]
    9c2e:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    9c30:	str	r3, [r4, #0]
				_state = TimerActive;
    9c32:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9c34:	pop	{r4, r5}
    9c36:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9c38:	str	r4, [r0, #8]
		_prev = nullptr;
    9c3a:	str	r4, [r0, #12]
		listActive = this;
    9c3c:	str	r0, [r2, #0]
    9c3e:	b.n	9bfc <MillisTimer::addToActiveList()+0x20>
    9c40:	.word	0x20004a48

00009c44 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9c44:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9c46:	ldr	r6, [pc, #136]	; (9cd0 <MillisTimer::runFromTimer()+0x8c>)
    9c48:	ldr	r4, [r6, #0]
	while (timer) {
    9c4a:	cbz	r4, 9c98 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9c4c:	ldr	r3, [r4, #0]
    9c4e:	cmp	r3, #0
    9c50:	bne.n	9cc8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9c52:	mov	r5, r3
    9c54:	ldr	r7, [pc, #124]	; (9cd4 <MillisTimer::runFromTimer()+0x90>)
    9c56:	b.n	9c62 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9c58:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9c5a:	cbz	r4, 9c98 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9c5c:	ldr	r3, [r4, #0]
    9c5e:	cmp	r3, #0
    9c60:	bne.n	9cc8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9c62:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9c64:	cbz	r3, 9c68 <MillisTimer::runFromTimer()+0x24>
    9c66:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9c68:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9c6a:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c6c:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9c6e:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9c70:	ldr	r3, [r3, #0]
    9c72:	cmp	r3, r7
    9c74:	bne.n	9cba <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9c76:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9c78:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9c7a:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9c7c:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9c7e:	beq.n	9cc2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9c80:	bl	9b14 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9c84:	ldr	r3, [r4, #4]
    9c86:	cmp	r3, #0
    9c88:	beq.n	9c58 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9c8a:	str	r3, [r4, #0]
				timer->addToActiveList();
    9c8c:	mov	r0, r4
    9c8e:	bl	9bdc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9c92:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9c94:	cmp	r4, #0
    9c96:	bne.n	9c5c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c98:	mrs	r3, PRIMASK
		__disable_irq();
    9c9c:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9c9e:	ldr	r2, [pc, #56]	; (9cd8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9ca0:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9ca2:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9ca4:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9ca6:	cbnz	r3, 9caa <MillisTimer::runFromTimer()+0x66>
    9ca8:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9caa:	cbz	r0, 9cb8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9cac:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9cae:	bl	9bdc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9cb2:	mov	r0, r4
    9cb4:	cmp	r0, #0
    9cb6:	bne.n	9cac <MillisTimer::runFromTimer()+0x68>
    9cb8:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9cba:	mov	r2, r4
    9cbc:	movs	r1, #0
    9cbe:	blx	r3
    9cc0:	b.n	9c84 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9cc2:	ldr	r3, [r0, #8]
    9cc4:	blx	r3
    9cc6:	b.n	9c84 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9cc8:	subs	r3, #1
    9cca:	str	r3, [r4, #0]
			break;
    9ccc:	b.n	9c98 <MillisTimer::runFromTimer()+0x54>
    9cce:	nop
    9cd0:	.word	0x20004a48
    9cd4:	.word	0x00007d9d
    9cd8:	.word	0x20004a58

00009cdc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9cdc:	ldr	r2, [pc, #16]	; (9cf0 <systick_isr+0x14>)
    9cde:	ldr	r3, [pc, #20]	; (9cf4 <systick_isr+0x18>)
    9ce0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    9ce2:	ldr	r2, [pc, #20]	; (9cf8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    9ce4:	str	r1, [r3, #0]
	systick_millis_count++;
    9ce6:	ldr	r3, [r2, #0]
    9ce8:	adds	r3, #1
    9cea:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    9cec:	b.w	9c44 <MillisTimer::runFromTimer()>
    9cf0:	.word	0xe0001004
    9cf4:	.word	0x20004a1c
    9cf8:	.word	0x20004a24

00009cfc <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    9cfc:	b.w	8750 <usb_serial_flush_input>

00009d00 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    9d00:	b.w	8700 <usb_serial_peekchar>

00009d04 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    9d04:	b.w	87c4 <usb_serial_getchar>

00009d08 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9d08:	b.w	8744 <usb_serial_available>

00009d0c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9d0c:	b.w	8874 <usb_serial_flush_output>

00009d10 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9d10:	b.w	8828 <usb_serial_write_buffer_free>

00009d14 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9d14:	mov	r0, r1
    9d16:	mov	r1, r2
    9d18:	b.w	8810 <usb_serial_write>

00009d1c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9d1c:	mov	r0, r1
    9d1e:	b.w	87e4 <usb_serial_putchar>
    9d22:	nop

00009d24 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    9d24:	ldr	r3, [pc, #4]	; (9d2c <serialEvent()+0x8>)
    9d26:	movs	r2, #0
    9d28:	strb	r2, [r3, #0]
    9d2a:	bx	lr
    9d2c:	.word	0x200008fa

00009d30 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9d30:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    9d32:	ldr	r4, [pc, #24]	; (9d4c <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    9d34:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    9d36:	ldr	r3, [r0, #0]
    9d38:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9d3a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    9d3c:	add	r1, sp, #4
    9d3e:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    9d40:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    9d44:	blx	r3
}
    9d46:	add	sp, #8
    9d48:	pop	{r4, pc}
    9d4a:	nop
    9d4c:	.word	0x20000628

00009d50 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    9d50:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    9d52:	push	{r4, lr}
    9d54:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    9d56:	ldr	r3, [r3, #4]
    9d58:	blx	r3
	return len;
}
    9d5a:	mov	r0, r4
    9d5c:	pop	{r4, pc}
    9d5e:	nop

00009d60 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    9d60:	push	{r1, r2, r3}
    9d62:	push	{lr}
    9d64:	sub	sp, #8
    9d66:	add	r3, sp, #12
    9d68:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9d6c:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    9d6e:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    9d70:	bl	b988 <vdprintf>
#endif
}
    9d74:	add	sp, #8
    9d76:	ldr.w	lr, [sp], #4
    9d7a:	add	sp, #12
    9d7c:	bx	lr
    9d7e:	nop

00009d80 <operator delete(void*, unsigned int)>:
    9d80:	b.w	aa6c <free>

00009d84 <HardwareSerial::processSerialEvents()>:
}


void HardwareSerial::processSerialEvents()
{
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    9d84:	ldr	r3, [pc, #32]	; (9da8 <HardwareSerial::processSerialEvents()+0x24>)
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    9d86:	push	{r4, r5, r6, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    9d88:	ldrb	r4, [r3, #0]
    9d8a:	cbz	r4, 9da6 <HardwareSerial::processSerialEvents()+0x22>
    9d8c:	ldr	r5, [pc, #28]	; (9dac <HardwareSerial::processSerialEvents()+0x28>)
    9d8e:	add.w	r6, r5, #32
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    9d92:	ldr.w	r3, [r5, #4]!
    9d96:	cbz	r3, 9da2 <HardwareSerial::processSerialEvents()+0x1e>
			(*serial_event_handler_checks[i])();
    9d98:	blx	r3
			if (--handlers_still_to_process == 0) return;
    9d9a:	subs	r3, r4, #1
    9d9c:	ands.w	r4, r3, #255	; 0xff
    9da0:	beq.n	9da6 <HardwareSerial::processSerialEvents()+0x22>

void HardwareSerial::processSerialEvents()
{
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
    9da2:	cmp	r6, r5
    9da4:	bne.n	9d92 <HardwareSerial::processSerialEvents()+0xe>
    9da6:	pop	{r4, r5, r6, pc}
    9da8:	.word	0x20004a7c
    9dac:	.word	0x20004a58

00009db0 <__aeabi_atexit>:
    9db0:	mov	r3, r1
    9db2:	mov	r1, r0
    9db4:	mov	r0, r3
    9db6:	b.w	a9f4 <__cxa_atexit>
    9dba:	nop

00009dbc <__aeabi_drsub>:
    9dbc:	eor.w	r1, r1, #2147483648	; 0x80000000
    9dc0:	b.n	9dc8 <__adddf3>
    9dc2:	nop

00009dc4 <__aeabi_dsub>:
    9dc4:	eor.w	r3, r3, #2147483648	; 0x80000000

00009dc8 <__adddf3>:
    9dc8:	push	{r4, r5, lr}
    9dca:	mov.w	r4, r1, lsl #1
    9dce:	mov.w	r5, r3, lsl #1
    9dd2:	teq	r4, r5
    9dd6:	it	eq
    9dd8:	teqeq	r0, r2
    9ddc:	itttt	ne
    9dde:	orrsne.w	ip, r4, r0
    9de2:	orrsne.w	ip, r5, r2
    9de6:	mvnsne.w	ip, r4, asr #21
    9dea:	mvnsne.w	ip, r5, asr #21
    9dee:	beq.w	9fb6 <__adddf3+0x1ee>
    9df2:	mov.w	r4, r4, lsr #21
    9df6:	rsbs	r5, r4, r5, lsr #21
    9dfa:	it	lt
    9dfc:	neglt	r5, r5
    9dfe:	ble.n	9e1a <__adddf3+0x52>
    9e00:	add	r4, r5
    9e02:	eor.w	r2, r0, r2
    9e06:	eor.w	r3, r1, r3
    9e0a:	eor.w	r0, r2, r0
    9e0e:	eor.w	r1, r3, r1
    9e12:	eor.w	r2, r0, r2
    9e16:	eor.w	r3, r1, r3
    9e1a:	cmp	r5, #54	; 0x36
    9e1c:	it	hi
    9e1e:	pophi	{r4, r5, pc}
    9e20:	tst.w	r1, #2147483648	; 0x80000000
    9e24:	mov.w	r1, r1, lsl #12
    9e28:	mov.w	ip, #1048576	; 0x100000
    9e2c:	orr.w	r1, ip, r1, lsr #12
    9e30:	beq.n	9e38 <__adddf3+0x70>
    9e32:	negs	r0, r0
    9e34:	sbc.w	r1, r1, r1, lsl #1
    9e38:	tst.w	r3, #2147483648	; 0x80000000
    9e3c:	mov.w	r3, r3, lsl #12
    9e40:	orr.w	r3, ip, r3, lsr #12
    9e44:	beq.n	9e4c <__adddf3+0x84>
    9e46:	negs	r2, r2
    9e48:	sbc.w	r3, r3, r3, lsl #1
    9e4c:	teq	r4, r5
    9e50:	beq.w	9fa2 <__adddf3+0x1da>
    9e54:	sub.w	r4, r4, #1
    9e58:	rsbs	lr, r5, #32
    9e5c:	blt.n	9e7a <__adddf3+0xb2>
    9e5e:	lsl.w	ip, r2, lr
    9e62:	lsr.w	r2, r2, r5
    9e66:	adds	r0, r0, r2
    9e68:	adc.w	r1, r1, #0
    9e6c:	lsl.w	r2, r3, lr
    9e70:	adds	r0, r0, r2
    9e72:	asr.w	r3, r3, r5
    9e76:	adcs	r1, r3
    9e78:	b.n	9e98 <__adddf3+0xd0>
    9e7a:	sub.w	r5, r5, #32
    9e7e:	add.w	lr, lr, #32
    9e82:	cmp	r2, #1
    9e84:	lsl.w	ip, r3, lr
    9e88:	it	cs
    9e8a:	orrcs.w	ip, ip, #2
    9e8e:	asr.w	r3, r3, r5
    9e92:	adds	r0, r0, r3
    9e94:	adcs.w	r1, r1, r3, asr #31
    9e98:	and.w	r5, r1, #2147483648	; 0x80000000
    9e9c:	bpl.n	9eae <__adddf3+0xe6>
    9e9e:	mov.w	lr, #0
    9ea2:	rsbs	ip, ip, #0
    9ea6:	sbcs.w	r0, lr, r0
    9eaa:	sbc.w	r1, lr, r1
    9eae:	cmp.w	r1, #1048576	; 0x100000
    9eb2:	bcc.n	9eec <__adddf3+0x124>
    9eb4:	cmp.w	r1, #2097152	; 0x200000
    9eb8:	bcc.n	9ed4 <__adddf3+0x10c>
    9eba:	lsrs	r1, r1, #1
    9ebc:	movs.w	r0, r0, rrx
    9ec0:	mov.w	ip, ip, rrx
    9ec4:	add.w	r4, r4, #1
    9ec8:	mov.w	r2, r4, lsl #21
    9ecc:	cmn.w	r2, #4194304	; 0x400000
    9ed0:	bcs.w	a008 <__adddf3+0x240>
    9ed4:	cmp.w	ip, #2147483648	; 0x80000000
    9ed8:	it	eq
    9eda:	movseq.w	ip, r0, lsr #1
    9ede:	adcs.w	r0, r0, #0
    9ee2:	adc.w	r1, r1, r4, lsl #20
    9ee6:	orr.w	r1, r1, r5
    9eea:	pop	{r4, r5, pc}
    9eec:	movs.w	ip, ip, lsl #1
    9ef0:	adcs	r0, r0
    9ef2:	adc.w	r1, r1, r1
    9ef6:	tst.w	r1, #1048576	; 0x100000
    9efa:	sub.w	r4, r4, #1
    9efe:	bne.n	9ed4 <__adddf3+0x10c>
    9f00:	teq	r1, #0
    9f04:	itt	eq
    9f06:	moveq	r1, r0
    9f08:	moveq	r0, #0
    9f0a:	clz	r3, r1
    9f0e:	it	eq
    9f10:	addeq	r3, #32
    9f12:	sub.w	r3, r3, #11
    9f16:	subs.w	r2, r3, #32
    9f1a:	bge.n	9f36 <__adddf3+0x16e>
    9f1c:	adds	r2, #12
    9f1e:	ble.n	9f32 <__adddf3+0x16a>
    9f20:	add.w	ip, r2, #20
    9f24:	rsb	r2, r2, #12
    9f28:	lsl.w	r0, r1, ip
    9f2c:	lsr.w	r1, r1, r2
    9f30:	b.n	9f4c <__adddf3+0x184>
    9f32:	add.w	r2, r2, #20
    9f36:	it	le
    9f38:	rsble	ip, r2, #32
    9f3c:	lsl.w	r1, r1, r2
    9f40:	lsr.w	ip, r0, ip
    9f44:	itt	le
    9f46:	orrle.w	r1, r1, ip
    9f4a:	lslle	r0, r2
    9f4c:	subs	r4, r4, r3
    9f4e:	ittt	ge
    9f50:	addge.w	r1, r1, r4, lsl #20
    9f54:	orrge	r1, r5
    9f56:	popge	{r4, r5, pc}
    9f58:	mvn.w	r4, r4
    9f5c:	subs	r4, #31
    9f5e:	bge.n	9f9a <__adddf3+0x1d2>
    9f60:	adds	r4, #12
    9f62:	bgt.n	9f82 <__adddf3+0x1ba>
    9f64:	add.w	r4, r4, #20
    9f68:	rsb	r2, r4, #32
    9f6c:	lsr.w	r0, r0, r4
    9f70:	lsl.w	r3, r1, r2
    9f74:	orr.w	r0, r0, r3
    9f78:	lsr.w	r3, r1, r4
    9f7c:	orr.w	r1, r5, r3
    9f80:	pop	{r4, r5, pc}
    9f82:	rsb	r4, r4, #12
    9f86:	rsb	r2, r4, #32
    9f8a:	lsr.w	r0, r0, r2
    9f8e:	lsl.w	r3, r1, r4
    9f92:	orr.w	r0, r0, r3
    9f96:	mov	r1, r5
    9f98:	pop	{r4, r5, pc}
    9f9a:	lsr.w	r0, r1, r4
    9f9e:	mov	r1, r5
    9fa0:	pop	{r4, r5, pc}
    9fa2:	teq	r4, #0
    9fa6:	eor.w	r3, r3, #1048576	; 0x100000
    9faa:	itte	eq
    9fac:	eoreq.w	r1, r1, #1048576	; 0x100000
    9fb0:	addeq	r4, #1
    9fb2:	subne	r5, #1
    9fb4:	b.n	9e54 <__adddf3+0x8c>
    9fb6:	mvns.w	ip, r4, asr #21
    9fba:	it	ne
    9fbc:	mvnsne.w	ip, r5, asr #21
    9fc0:	beq.n	a016 <__adddf3+0x24e>
    9fc2:	teq	r4, r5
    9fc6:	it	eq
    9fc8:	teqeq	r0, r2
    9fcc:	beq.n	9fda <__adddf3+0x212>
    9fce:	orrs.w	ip, r4, r0
    9fd2:	itt	eq
    9fd4:	moveq	r1, r3
    9fd6:	moveq	r0, r2
    9fd8:	pop	{r4, r5, pc}
    9fda:	teq	r1, r3
    9fde:	ittt	ne
    9fe0:	movne	r1, #0
    9fe2:	movne	r0, #0
    9fe4:	popne	{r4, r5, pc}
    9fe6:	movs.w	ip, r4, lsr #21
    9fea:	bne.n	9ff8 <__adddf3+0x230>
    9fec:	lsls	r0, r0, #1
    9fee:	adcs	r1, r1
    9ff0:	it	cs
    9ff2:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9ff6:	pop	{r4, r5, pc}
    9ff8:	adds.w	r4, r4, #4194304	; 0x400000
    9ffc:	itt	cc
    9ffe:	addcc.w	r1, r1, #1048576	; 0x100000
    a002:	popcc	{r4, r5, pc}
    a004:	and.w	r5, r1, #2147483648	; 0x80000000
    a008:	orr.w	r1, r5, #2130706432	; 0x7f000000
    a00c:	orr.w	r1, r1, #15728640	; 0xf00000
    a010:	mov.w	r0, #0
    a014:	pop	{r4, r5, pc}
    a016:	mvns.w	ip, r4, asr #21
    a01a:	itte	ne
    a01c:	movne	r1, r3
    a01e:	movne	r0, r2
    a020:	mvnseq.w	ip, r5, asr #21
    a024:	itt	ne
    a026:	movne	r3, r1
    a028:	movne	r2, r0
    a02a:	orrs.w	r4, r0, r1, lsl #12
    a02e:	itte	eq
    a030:	orrseq.w	r5, r2, r3, lsl #12
    a034:	teqeq	r1, r3
    a038:	orrne.w	r1, r1, #524288	; 0x80000
    a03c:	pop	{r4, r5, pc}
    a03e:	nop

0000a040 <__aeabi_ui2d>:
    a040:	teq	r0, #0
    a044:	itt	eq
    a046:	moveq	r1, #0
    a048:	bxeq	lr
    a04a:	push	{r4, r5, lr}
    a04c:	mov.w	r4, #1024	; 0x400
    a050:	add.w	r4, r4, #50	; 0x32
    a054:	mov.w	r5, #0
    a058:	mov.w	r1, #0
    a05c:	b.n	9f00 <__adddf3+0x138>
    a05e:	nop

0000a060 <__aeabi_i2d>:
    a060:	teq	r0, #0
    a064:	itt	eq
    a066:	moveq	r1, #0
    a068:	bxeq	lr
    a06a:	push	{r4, r5, lr}
    a06c:	mov.w	r4, #1024	; 0x400
    a070:	add.w	r4, r4, #50	; 0x32
    a074:	ands.w	r5, r0, #2147483648	; 0x80000000
    a078:	it	mi
    a07a:	negmi	r0, r0
    a07c:	mov.w	r1, #0
    a080:	b.n	9f00 <__adddf3+0x138>
    a082:	nop

0000a084 <__aeabi_f2d>:
    a084:	lsls	r2, r0, #1
    a086:	mov.w	r1, r2, asr #3
    a08a:	mov.w	r1, r1, rrx
    a08e:	mov.w	r0, r2, lsl #28
    a092:	itttt	ne
    a094:	andsne.w	r3, r2, #4278190080	; 0xff000000
    a098:	teqne	r3, #4278190080	; 0xff000000
    a09c:	eorne.w	r1, r1, #939524096	; 0x38000000
    a0a0:	bxne	lr
    a0a2:	teq	r2, #0
    a0a6:	ite	ne
    a0a8:	teqne	r3, #4278190080	; 0xff000000
    a0ac:	bxeq	lr
    a0ae:	push	{r4, r5, lr}
    a0b0:	mov.w	r4, #896	; 0x380
    a0b4:	and.w	r5, r1, #2147483648	; 0x80000000
    a0b8:	bic.w	r1, r1, #2147483648	; 0x80000000
    a0bc:	b.n	9f00 <__adddf3+0x138>
    a0be:	nop

0000a0c0 <__aeabi_ul2d>:
    a0c0:	orrs.w	r2, r0, r1
    a0c4:	it	eq
    a0c6:	bxeq	lr
    a0c8:	push	{r4, r5, lr}
    a0ca:	mov.w	r5, #0
    a0ce:	b.n	a0e6 <__aeabi_l2d+0x16>

0000a0d0 <__aeabi_l2d>:
    a0d0:	orrs.w	r2, r0, r1
    a0d4:	it	eq
    a0d6:	bxeq	lr
    a0d8:	push	{r4, r5, lr}
    a0da:	ands.w	r5, r1, #2147483648	; 0x80000000
    a0de:	bpl.n	a0e6 <__aeabi_l2d+0x16>
    a0e0:	negs	r0, r0
    a0e2:	sbc.w	r1, r1, r1, lsl #1
    a0e6:	mov.w	r4, #1024	; 0x400
    a0ea:	add.w	r4, r4, #50	; 0x32
    a0ee:	movs.w	ip, r1, lsr #22
    a0f2:	beq.w	9eae <__adddf3+0xe6>
    a0f6:	mov.w	r2, #3
    a0fa:	movs.w	ip, ip, lsr #3
    a0fe:	it	ne
    a100:	addne	r2, #3
    a102:	movs.w	ip, ip, lsr #3
    a106:	it	ne
    a108:	addne	r2, #3
    a10a:	add.w	r2, r2, ip, lsr #3
    a10e:	rsb	r3, r2, #32
    a112:	lsl.w	ip, r0, r3
    a116:	lsr.w	r0, r0, r2
    a11a:	lsl.w	lr, r1, r3
    a11e:	orr.w	r0, r0, lr
    a122:	lsr.w	r1, r1, r2
    a126:	add	r4, r2
    a128:	b.n	9eae <__adddf3+0xe6>
    a12a:	nop

0000a12c <__aeabi_dmul>:
    a12c:	push	{r4, r5, r6, lr}
    a12e:	mov.w	ip, #255	; 0xff
    a132:	orr.w	ip, ip, #1792	; 0x700
    a136:	ands.w	r4, ip, r1, lsr #20
    a13a:	ittte	ne
    a13c:	andsne.w	r5, ip, r3, lsr #20
    a140:	teqne	r4, ip
    a144:	teqne	r5, ip
    a148:	bleq	a308 <__aeabi_dmul+0x1dc>
    a14c:	add	r4, r5
    a14e:	eor.w	r6, r1, r3
    a152:	bic.w	r1, r1, ip, lsl #21
    a156:	bic.w	r3, r3, ip, lsl #21
    a15a:	orrs.w	r5, r0, r1, lsl #12
    a15e:	it	ne
    a160:	orrsne.w	r5, r2, r3, lsl #12
    a164:	orr.w	r1, r1, #1048576	; 0x100000
    a168:	orr.w	r3, r3, #1048576	; 0x100000
    a16c:	beq.n	a1e0 <__aeabi_dmul+0xb4>
    a16e:	umull	ip, lr, r0, r2
    a172:	mov.w	r5, #0
    a176:	umlal	lr, r5, r1, r2
    a17a:	and.w	r2, r6, #2147483648	; 0x80000000
    a17e:	umlal	lr, r5, r0, r3
    a182:	mov.w	r6, #0
    a186:	umlal	r5, r6, r1, r3
    a18a:	teq	ip, #0
    a18e:	it	ne
    a190:	orrne.w	lr, lr, #1
    a194:	sub.w	r4, r4, #255	; 0xff
    a198:	cmp.w	r6, #512	; 0x200
    a19c:	sbc.w	r4, r4, #768	; 0x300
    a1a0:	bcs.n	a1ac <__aeabi_dmul+0x80>
    a1a2:	movs.w	lr, lr, lsl #1
    a1a6:	adcs	r5, r5
    a1a8:	adc.w	r6, r6, r6
    a1ac:	orr.w	r1, r2, r6, lsl #11
    a1b0:	orr.w	r1, r1, r5, lsr #21
    a1b4:	mov.w	r0, r5, lsl #11
    a1b8:	orr.w	r0, r0, lr, lsr #21
    a1bc:	mov.w	lr, lr, lsl #11
    a1c0:	subs.w	ip, r4, #253	; 0xfd
    a1c4:	it	hi
    a1c6:	cmphi.w	ip, #1792	; 0x700
    a1ca:	bhi.n	a20a <__aeabi_dmul+0xde>
    a1cc:	cmp.w	lr, #2147483648	; 0x80000000
    a1d0:	it	eq
    a1d2:	movseq.w	lr, r0, lsr #1
    a1d6:	adcs.w	r0, r0, #0
    a1da:	adc.w	r1, r1, r4, lsl #20
    a1de:	pop	{r4, r5, r6, pc}
    a1e0:	and.w	r6, r6, #2147483648	; 0x80000000
    a1e4:	orr.w	r1, r6, r1
    a1e8:	orr.w	r0, r0, r2
    a1ec:	eor.w	r1, r1, r3
    a1f0:	subs.w	r4, r4, ip, lsr #1
    a1f4:	ittt	gt
    a1f6:	rsbsgt	r5, r4, ip
    a1fa:	orrgt.w	r1, r1, r4, lsl #20
    a1fe:	popgt	{r4, r5, r6, pc}
    a200:	orr.w	r1, r1, #1048576	; 0x100000
    a204:	mov.w	lr, #0
    a208:	subs	r4, #1
    a20a:	bgt.w	a364 <__aeabi_dmul+0x238>
    a20e:	cmn.w	r4, #54	; 0x36
    a212:	ittt	le
    a214:	movle	r0, #0
    a216:	andle.w	r1, r1, #2147483648	; 0x80000000
    a21a:	pople	{r4, r5, r6, pc}
    a21c:	rsb	r4, r4, #0
    a220:	subs	r4, #32
    a222:	bge.n	a290 <__aeabi_dmul+0x164>
    a224:	adds	r4, #12
    a226:	bgt.n	a260 <__aeabi_dmul+0x134>
    a228:	add.w	r4, r4, #20
    a22c:	rsb	r5, r4, #32
    a230:	lsl.w	r3, r0, r5
    a234:	lsr.w	r0, r0, r4
    a238:	lsl.w	r2, r1, r5
    a23c:	orr.w	r0, r0, r2
    a240:	and.w	r2, r1, #2147483648	; 0x80000000
    a244:	bic.w	r1, r1, #2147483648	; 0x80000000
    a248:	adds.w	r0, r0, r3, lsr #31
    a24c:	lsr.w	r6, r1, r4
    a250:	adc.w	r1, r2, r6
    a254:	orrs.w	lr, lr, r3, lsl #1
    a258:	it	eq
    a25a:	biceq.w	r0, r0, r3, lsr #31
    a25e:	pop	{r4, r5, r6, pc}
    a260:	rsb	r4, r4, #12
    a264:	rsb	r5, r4, #32
    a268:	lsl.w	r3, r0, r4
    a26c:	lsr.w	r0, r0, r5
    a270:	lsl.w	r2, r1, r4
    a274:	orr.w	r0, r0, r2
    a278:	and.w	r1, r1, #2147483648	; 0x80000000
    a27c:	adds.w	r0, r0, r3, lsr #31
    a280:	adc.w	r1, r1, #0
    a284:	orrs.w	lr, lr, r3, lsl #1
    a288:	it	eq
    a28a:	biceq.w	r0, r0, r3, lsr #31
    a28e:	pop	{r4, r5, r6, pc}
    a290:	rsb	r5, r4, #32
    a294:	lsl.w	r2, r0, r5
    a298:	orr.w	lr, lr, r2
    a29c:	lsr.w	r3, r0, r4
    a2a0:	lsl.w	r2, r1, r5
    a2a4:	orr.w	r3, r3, r2
    a2a8:	lsr.w	r0, r1, r4
    a2ac:	and.w	r1, r1, #2147483648	; 0x80000000
    a2b0:	lsr.w	r2, r1, r4
    a2b4:	bic.w	r0, r0, r2
    a2b8:	add.w	r0, r0, r3, lsr #31
    a2bc:	orrs.w	lr, lr, r3, lsl #1
    a2c0:	it	eq
    a2c2:	biceq.w	r0, r0, r3, lsr #31
    a2c6:	pop	{r4, r5, r6, pc}
    a2c8:	teq	r4, #0
    a2cc:	bne.n	a2ee <__aeabi_dmul+0x1c2>
    a2ce:	and.w	r6, r1, #2147483648	; 0x80000000
    a2d2:	lsls	r0, r0, #1
    a2d4:	adc.w	r1, r1, r1
    a2d8:	tst.w	r1, #1048576	; 0x100000
    a2dc:	it	eq
    a2de:	subeq	r4, #1
    a2e0:	beq.n	a2d2 <__aeabi_dmul+0x1a6>
    a2e2:	orr.w	r1, r1, r6
    a2e6:	teq	r5, #0
    a2ea:	it	ne
    a2ec:	bxne	lr
    a2ee:	and.w	r6, r3, #2147483648	; 0x80000000
    a2f2:	lsls	r2, r2, #1
    a2f4:	adc.w	r3, r3, r3
    a2f8:	tst.w	r3, #1048576	; 0x100000
    a2fc:	it	eq
    a2fe:	subeq	r5, #1
    a300:	beq.n	a2f2 <__aeabi_dmul+0x1c6>
    a302:	orr.w	r3, r3, r6
    a306:	bx	lr
    a308:	teq	r4, ip
    a30c:	and.w	r5, ip, r3, lsr #20
    a310:	it	ne
    a312:	teqne	r5, ip
    a316:	beq.n	a332 <__aeabi_dmul+0x206>
    a318:	orrs.w	r6, r0, r1, lsl #1
    a31c:	it	ne
    a31e:	orrsne.w	r6, r2, r3, lsl #1
    a322:	bne.n	a2c8 <__aeabi_dmul+0x19c>
    a324:	eor.w	r1, r1, r3
    a328:	and.w	r1, r1, #2147483648	; 0x80000000
    a32c:	mov.w	r0, #0
    a330:	pop	{r4, r5, r6, pc}
    a332:	orrs.w	r6, r0, r1, lsl #1
    a336:	itte	eq
    a338:	moveq	r0, r2
    a33a:	moveq	r1, r3
    a33c:	orrsne.w	r6, r2, r3, lsl #1
    a340:	beq.n	a376 <__aeabi_dmul+0x24a>
    a342:	teq	r4, ip
    a346:	bne.n	a34e <__aeabi_dmul+0x222>
    a348:	orrs.w	r6, r0, r1, lsl #12
    a34c:	bne.n	a376 <__aeabi_dmul+0x24a>
    a34e:	teq	r5, ip
    a352:	bne.n	a360 <__aeabi_dmul+0x234>
    a354:	orrs.w	r6, r2, r3, lsl #12
    a358:	itt	ne
    a35a:	movne	r0, r2
    a35c:	movne	r1, r3
    a35e:	bne.n	a376 <__aeabi_dmul+0x24a>
    a360:	eor.w	r1, r1, r3
    a364:	and.w	r1, r1, #2147483648	; 0x80000000
    a368:	orr.w	r1, r1, #2130706432	; 0x7f000000
    a36c:	orr.w	r1, r1, #15728640	; 0xf00000
    a370:	mov.w	r0, #0
    a374:	pop	{r4, r5, r6, pc}
    a376:	orr.w	r1, r1, #2130706432	; 0x7f000000
    a37a:	orr.w	r1, r1, #16252928	; 0xf80000
    a37e:	pop	{r4, r5, r6, pc}

0000a380 <__aeabi_ddiv>:
    a380:	push	{r4, r5, r6, lr}
    a382:	mov.w	ip, #255	; 0xff
    a386:	orr.w	ip, ip, #1792	; 0x700
    a38a:	ands.w	r4, ip, r1, lsr #20
    a38e:	ittte	ne
    a390:	andsne.w	r5, ip, r3, lsr #20
    a394:	teqne	r4, ip
    a398:	teqne	r5, ip
    a39c:	bleq	a4ee <__aeabi_ddiv+0x16e>
    a3a0:	sub.w	r4, r4, r5
    a3a4:	eor.w	lr, r1, r3
    a3a8:	orrs.w	r5, r2, r3, lsl #12
    a3ac:	mov.w	r1, r1, lsl #12
    a3b0:	beq.w	a4c4 <__aeabi_ddiv+0x144>
    a3b4:	mov.w	r3, r3, lsl #12
    a3b8:	mov.w	r5, #268435456	; 0x10000000
    a3bc:	orr.w	r3, r5, r3, lsr #4
    a3c0:	orr.w	r3, r3, r2, lsr #24
    a3c4:	mov.w	r2, r2, lsl #8
    a3c8:	orr.w	r5, r5, r1, lsr #4
    a3cc:	orr.w	r5, r5, r0, lsr #24
    a3d0:	mov.w	r6, r0, lsl #8
    a3d4:	and.w	r1, lr, #2147483648	; 0x80000000
    a3d8:	cmp	r5, r3
    a3da:	it	eq
    a3dc:	cmpeq	r6, r2
    a3de:	adc.w	r4, r4, #253	; 0xfd
    a3e2:	add.w	r4, r4, #768	; 0x300
    a3e6:	bcs.n	a3ee <__aeabi_ddiv+0x6e>
    a3e8:	lsrs	r3, r3, #1
    a3ea:	mov.w	r2, r2, rrx
    a3ee:	subs	r6, r6, r2
    a3f0:	sbc.w	r5, r5, r3
    a3f4:	lsrs	r3, r3, #1
    a3f6:	mov.w	r2, r2, rrx
    a3fa:	mov.w	r0, #1048576	; 0x100000
    a3fe:	mov.w	ip, #524288	; 0x80000
    a402:	subs.w	lr, r6, r2
    a406:	sbcs.w	lr, r5, r3
    a40a:	ittt	cs
    a40c:	subcs	r6, r6, r2
    a40e:	movcs	r5, lr
    a410:	orrcs.w	r0, r0, ip
    a414:	lsrs	r3, r3, #1
    a416:	mov.w	r2, r2, rrx
    a41a:	subs.w	lr, r6, r2
    a41e:	sbcs.w	lr, r5, r3
    a422:	ittt	cs
    a424:	subcs	r6, r6, r2
    a426:	movcs	r5, lr
    a428:	orrcs.w	r0, r0, ip, lsr #1
    a42c:	lsrs	r3, r3, #1
    a42e:	mov.w	r2, r2, rrx
    a432:	subs.w	lr, r6, r2
    a436:	sbcs.w	lr, r5, r3
    a43a:	ittt	cs
    a43c:	subcs	r6, r6, r2
    a43e:	movcs	r5, lr
    a440:	orrcs.w	r0, r0, ip, lsr #2
    a444:	lsrs	r3, r3, #1
    a446:	mov.w	r2, r2, rrx
    a44a:	subs.w	lr, r6, r2
    a44e:	sbcs.w	lr, r5, r3
    a452:	ittt	cs
    a454:	subcs	r6, r6, r2
    a456:	movcs	r5, lr
    a458:	orrcs.w	r0, r0, ip, lsr #3
    a45c:	orrs.w	lr, r5, r6
    a460:	beq.n	a494 <__aeabi_ddiv+0x114>
    a462:	mov.w	r5, r5, lsl #4
    a466:	orr.w	r5, r5, r6, lsr #28
    a46a:	mov.w	r6, r6, lsl #4
    a46e:	mov.w	r3, r3, lsl #3
    a472:	orr.w	r3, r3, r2, lsr #29
    a476:	mov.w	r2, r2, lsl #3
    a47a:	movs.w	ip, ip, lsr #4
    a47e:	bne.n	a402 <__aeabi_ddiv+0x82>
    a480:	tst.w	r1, #1048576	; 0x100000
    a484:	bne.n	a49e <__aeabi_ddiv+0x11e>
    a486:	orr.w	r1, r1, r0
    a48a:	mov.w	r0, #0
    a48e:	mov.w	ip, #2147483648	; 0x80000000
    a492:	b.n	a402 <__aeabi_ddiv+0x82>
    a494:	tst.w	r1, #1048576	; 0x100000
    a498:	itt	eq
    a49a:	orreq	r1, r0
    a49c:	moveq	r0, #0
    a49e:	subs.w	ip, r4, #253	; 0xfd
    a4a2:	it	hi
    a4a4:	cmphi.w	ip, #1792	; 0x700
    a4a8:	bhi.w	a20a <__aeabi_dmul+0xde>
    a4ac:	subs.w	ip, r5, r3
    a4b0:	itt	eq
    a4b2:	subseq.w	ip, r6, r2
    a4b6:	movseq.w	ip, r0, lsr #1
    a4ba:	adcs.w	r0, r0, #0
    a4be:	adc.w	r1, r1, r4, lsl #20
    a4c2:	pop	{r4, r5, r6, pc}
    a4c4:	and.w	lr, lr, #2147483648	; 0x80000000
    a4c8:	orr.w	r1, lr, r1, lsr #12
    a4cc:	adds.w	r4, r4, ip, lsr #1
    a4d0:	ittt	gt
    a4d2:	rsbsgt	r5, r4, ip
    a4d6:	orrgt.w	r1, r1, r4, lsl #20
    a4da:	popgt	{r4, r5, r6, pc}
    a4dc:	orr.w	r1, r1, #1048576	; 0x100000
    a4e0:	mov.w	lr, #0
    a4e4:	subs	r4, #1
    a4e6:	b.n	a20a <__aeabi_dmul+0xde>
    a4e8:	orr.w	lr, r5, r6
    a4ec:	b.n	a20a <__aeabi_dmul+0xde>
    a4ee:	and.w	r5, ip, r3, lsr #20
    a4f2:	teq	r4, ip
    a4f6:	it	eq
    a4f8:	teqeq	r5, ip
    a4fc:	beq.w	a376 <__aeabi_dmul+0x24a>
    a500:	teq	r4, ip
    a504:	bne.n	a51c <__aeabi_ddiv+0x19c>
    a506:	orrs.w	r4, r0, r1, lsl #12
    a50a:	bne.w	a376 <__aeabi_dmul+0x24a>
    a50e:	teq	r5, ip
    a512:	bne.w	a360 <__aeabi_dmul+0x234>
    a516:	mov	r0, r2
    a518:	mov	r1, r3
    a51a:	b.n	a376 <__aeabi_dmul+0x24a>
    a51c:	teq	r5, ip
    a520:	bne.n	a530 <__aeabi_ddiv+0x1b0>
    a522:	orrs.w	r5, r2, r3, lsl #12
    a526:	beq.w	a324 <__aeabi_dmul+0x1f8>
    a52a:	mov	r0, r2
    a52c:	mov	r1, r3
    a52e:	b.n	a376 <__aeabi_dmul+0x24a>
    a530:	orrs.w	r6, r0, r1, lsl #1
    a534:	it	ne
    a536:	orrsne.w	r6, r2, r3, lsl #1
    a53a:	bne.w	a2c8 <__aeabi_dmul+0x19c>
    a53e:	orrs.w	r4, r0, r1, lsl #1
    a542:	bne.w	a360 <__aeabi_dmul+0x234>
    a546:	orrs.w	r5, r2, r3, lsl #1
    a54a:	bne.w	a324 <__aeabi_dmul+0x1f8>
    a54e:	b.n	a376 <__aeabi_dmul+0x24a>

0000a550 <__gedf2>:
    a550:	mov.w	ip, #4294967295
    a554:	b.n	a564 <__cmpdf2+0x4>
    a556:	nop

0000a558 <__ledf2>:
    a558:	mov.w	ip, #1
    a55c:	b.n	a564 <__cmpdf2+0x4>
    a55e:	nop

0000a560 <__cmpdf2>:
    a560:	mov.w	ip, #1
    a564:	str.w	ip, [sp, #-4]!
    a568:	mov.w	ip, r1, lsl #1
    a56c:	mvns.w	ip, ip, asr #21
    a570:	mov.w	ip, r3, lsl #1
    a574:	it	ne
    a576:	mvnsne.w	ip, ip, asr #21
    a57a:	beq.n	a5b4 <__cmpdf2+0x54>
    a57c:	add	sp, #4
    a57e:	orrs.w	ip, r0, r1, lsl #1
    a582:	ite	eq
    a584:	orrseq.w	ip, r2, r3, lsl #1
    a588:	teqne	r1, r3
    a58c:	ittt	eq
    a58e:	teqeq	r0, r2
    a592:	moveq	r0, #0
    a594:	bxeq	lr
    a596:	cmn.w	r0, #0
    a59a:	teq	r1, r3
    a59e:	it	pl
    a5a0:	cmppl	r1, r3
    a5a2:	it	eq
    a5a4:	cmpeq	r0, r2
    a5a6:	ite	cs
    a5a8:	asrcs	r0, r3, #31
    a5aa:	mvncc.w	r0, r3, asr #31
    a5ae:	orr.w	r0, r0, #1
    a5b2:	bx	lr
    a5b4:	mov.w	ip, r1, lsl #1
    a5b8:	mvns.w	ip, ip, asr #21
    a5bc:	bne.n	a5c4 <__cmpdf2+0x64>
    a5be:	orrs.w	ip, r0, r1, lsl #12
    a5c2:	bne.n	a5d4 <__cmpdf2+0x74>
    a5c4:	mov.w	ip, r3, lsl #1
    a5c8:	mvns.w	ip, ip, asr #21
    a5cc:	bne.n	a57c <__cmpdf2+0x1c>
    a5ce:	orrs.w	ip, r2, r3, lsl #12
    a5d2:	beq.n	a57c <__cmpdf2+0x1c>
    a5d4:	ldr.w	r0, [sp], #4
    a5d8:	bx	lr
    a5da:	nop

0000a5dc <__aeabi_cdrcmple>:
    a5dc:	mov	ip, r0
    a5de:	mov	r0, r2
    a5e0:	mov	r2, ip
    a5e2:	mov	ip, r1
    a5e4:	mov	r1, r3
    a5e6:	mov	r3, ip
    a5e8:	b.n	a5ec <__aeabi_cdcmpeq>
    a5ea:	nop

0000a5ec <__aeabi_cdcmpeq>:
    a5ec:	push	{r0, lr}
    a5ee:	bl	a560 <__cmpdf2>
    a5f2:	cmp	r0, #0
    a5f4:	it	mi
    a5f6:	cmnmi.w	r0, #0
    a5fa:	pop	{r0, pc}

0000a5fc <__aeabi_dcmpeq>:
    a5fc:	str.w	lr, [sp, #-8]!
    a600:	bl	a5ec <__aeabi_cdcmpeq>
    a604:	ite	eq
    a606:	moveq	r0, #1
    a608:	movne	r0, #0
    a60a:	ldr.w	pc, [sp], #8
    a60e:	nop

0000a610 <__aeabi_dcmplt>:
    a610:	str.w	lr, [sp, #-8]!
    a614:	bl	a5ec <__aeabi_cdcmpeq>
    a618:	ite	cc
    a61a:	movcc	r0, #1
    a61c:	movcs	r0, #0
    a61e:	ldr.w	pc, [sp], #8
    a622:	nop

0000a624 <__aeabi_dcmple>:
    a624:	str.w	lr, [sp, #-8]!
    a628:	bl	a5ec <__aeabi_cdcmpeq>
    a62c:	ite	ls
    a62e:	movls	r0, #1
    a630:	movhi	r0, #0
    a632:	ldr.w	pc, [sp], #8
    a636:	nop

0000a638 <__aeabi_dcmpge>:
    a638:	str.w	lr, [sp, #-8]!
    a63c:	bl	a5dc <__aeabi_cdrcmple>
    a640:	ite	ls
    a642:	movls	r0, #1
    a644:	movhi	r0, #0
    a646:	ldr.w	pc, [sp], #8
    a64a:	nop

0000a64c <__aeabi_dcmpgt>:
    a64c:	str.w	lr, [sp, #-8]!
    a650:	bl	a5dc <__aeabi_cdrcmple>
    a654:	ite	cc
    a656:	movcc	r0, #1
    a658:	movcs	r0, #0
    a65a:	ldr.w	pc, [sp], #8
    a65e:	nop

0000a660 <__aeabi_dcmpun>:
    a660:	mov.w	ip, r1, lsl #1
    a664:	mvns.w	ip, ip, asr #21
    a668:	bne.n	a670 <__aeabi_dcmpun+0x10>
    a66a:	orrs.w	ip, r0, r1, lsl #12
    a66e:	bne.n	a686 <__aeabi_dcmpun+0x26>
    a670:	mov.w	ip, r3, lsl #1
    a674:	mvns.w	ip, ip, asr #21
    a678:	bne.n	a680 <__aeabi_dcmpun+0x20>
    a67a:	orrs.w	ip, r2, r3, lsl #12
    a67e:	bne.n	a686 <__aeabi_dcmpun+0x26>
    a680:	mov.w	r0, #0
    a684:	bx	lr
    a686:	mov.w	r0, #1
    a68a:	bx	lr

0000a68c <__aeabi_d2iz>:
    a68c:	mov.w	r2, r1, lsl #1
    a690:	adds.w	r2, r2, #2097152	; 0x200000
    a694:	bcs.n	a6c2 <__aeabi_d2iz+0x36>
    a696:	bpl.n	a6bc <__aeabi_d2iz+0x30>
    a698:	mvn.w	r3, #992	; 0x3e0
    a69c:	subs.w	r2, r3, r2, asr #21
    a6a0:	bls.n	a6c8 <__aeabi_d2iz+0x3c>
    a6a2:	mov.w	r3, r1, lsl #11
    a6a6:	orr.w	r3, r3, #2147483648	; 0x80000000
    a6aa:	orr.w	r3, r3, r0, lsr #21
    a6ae:	tst.w	r1, #2147483648	; 0x80000000
    a6b2:	lsr.w	r0, r3, r2
    a6b6:	it	ne
    a6b8:	negne	r0, r0
    a6ba:	bx	lr
    a6bc:	mov.w	r0, #0
    a6c0:	bx	lr
    a6c2:	orrs.w	r0, r0, r1, lsl #12
    a6c6:	bne.n	a6d4 <__aeabi_d2iz+0x48>
    a6c8:	ands.w	r0, r1, #2147483648	; 0x80000000
    a6cc:	it	eq
    a6ce:	mvneq.w	r0, #2147483648	; 0x80000000
    a6d2:	bx	lr
    a6d4:	mov.w	r0, #0
    a6d8:	bx	lr
    a6da:	nop

0000a6dc <__aeabi_uldivmod>:
    a6dc:	cbnz	r3, a6f4 <__aeabi_uldivmod+0x18>
    a6de:	cbnz	r2, a6f4 <__aeabi_uldivmod+0x18>
    a6e0:	cmp	r1, #0
    a6e2:	it	eq
    a6e4:	cmpeq	r0, #0
    a6e6:	itt	ne
    a6e8:	movne.w	r1, #4294967295
    a6ec:	movne.w	r0, #4294967295
    a6f0:	b.w	a9f0 <__aeabi_idiv0>
    a6f4:	sub.w	ip, sp, #8
    a6f8:	strd	ip, lr, [sp, #-16]!
    a6fc:	bl	a70c <__udivmoddi4>
    a700:	ldr.w	lr, [sp, #4]
    a704:	ldrd	r2, r3, [sp, #8]
    a708:	add	sp, #16
    a70a:	bx	lr

0000a70c <__udivmoddi4>:
    a70c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a710:	mov	ip, r1
    a712:	mov	r6, r1
    a714:	mov	r4, r0
    a716:	ldr	r5, [sp, #32]
    a718:	cmp	r3, #0
    a71a:	bne.n	a7be <__udivmoddi4+0xb2>
    a71c:	cmp	r2, r1
    a71e:	mov	r7, r2
    a720:	bls.n	a7fc <__udivmoddi4+0xf0>
    a722:	clz	lr, r2
    a726:	cmp.w	lr, #0
    a72a:	beq.n	a744 <__udivmoddi4+0x38>
    a72c:	rsb	r4, lr, #32
    a730:	lsr.w	r4, r0, r4
    a734:	lsl.w	r6, r1, lr
    a738:	orr.w	ip, r4, r6
    a73c:	lsl.w	r7, r2, lr
    a740:	lsl.w	r4, r0, lr
    a744:	mov.w	r9, r7, lsr #16
    a748:	lsrs	r2, r4, #16
    a74a:	udiv	r0, ip, r9
    a74e:	uxth.w	r8, r7
    a752:	mls	r6, r9, r0, ip
    a756:	orr.w	r6, r2, r6, lsl #16
    a75a:	mul.w	r3, r0, r8
    a75e:	cmp	r3, r6
    a760:	bls.n	a776 <__udivmoddi4+0x6a>
    a762:	adds	r6, r6, r7
    a764:	add.w	r2, r0, #4294967295
    a768:	bcs.w	a9b0 <__udivmoddi4+0x2a4>
    a76c:	cmp	r3, r6
    a76e:	bls.w	a9b0 <__udivmoddi4+0x2a4>
    a772:	subs	r0, #2
    a774:	add	r6, r7
    a776:	subs	r6, r6, r3
    a778:	uxth	r2, r4
    a77a:	udiv	r3, r6, r9
    a77e:	mls	r6, r9, r3, r6
    a782:	orr.w	r4, r2, r6, lsl #16
    a786:	mul.w	r8, r3, r8
    a78a:	cmp	r8, r4
    a78c:	bls.n	a7a2 <__udivmoddi4+0x96>
    a78e:	adds	r4, r4, r7
    a790:	add.w	r2, r3, #4294967295
    a794:	bcs.w	a9ac <__udivmoddi4+0x2a0>
    a798:	cmp	r8, r4
    a79a:	bls.w	a9ac <__udivmoddi4+0x2a0>
    a79e:	subs	r3, #2
    a7a0:	add	r4, r7
    a7a2:	rsb	r4, r8, r4
    a7a6:	orr.w	r0, r3, r0, lsl #16
    a7aa:	movs	r1, #0
    a7ac:	cmp	r5, #0
    a7ae:	beq.n	a876 <__udivmoddi4+0x16a>
    a7b0:	lsr.w	r4, r4, lr
    a7b4:	movs	r3, #0
    a7b6:	str	r4, [r5, #0]
    a7b8:	str	r3, [r5, #4]
    a7ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7be:	cmp	r3, r1
    a7c0:	bls.n	a7d2 <__udivmoddi4+0xc6>
    a7c2:	cmp	r5, #0
    a7c4:	beq.n	a872 <__udivmoddi4+0x166>
    a7c6:	movs	r1, #0
    a7c8:	stmia.w	r5, {r0, r6}
    a7cc:	mov	r0, r1
    a7ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7d2:	clz	r1, r3
    a7d6:	cmp	r1, #0
    a7d8:	bne.w	a8fc <__udivmoddi4+0x1f0>
    a7dc:	cmp	r3, r6
    a7de:	bcc.n	a7e6 <__udivmoddi4+0xda>
    a7e0:	cmp	r2, r0
    a7e2:	bhi.w	a9d6 <__udivmoddi4+0x2ca>
    a7e6:	subs	r4, r0, r2
    a7e8:	sbc.w	r6, r6, r3
    a7ec:	movs	r0, #1
    a7ee:	mov	ip, r6
    a7f0:	cmp	r5, #0
    a7f2:	beq.n	a876 <__udivmoddi4+0x16a>
    a7f4:	stmia.w	r5, {r4, ip}
    a7f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7fc:	cbnz	r2, a804 <__udivmoddi4+0xf8>
    a7fe:	movs	r7, #1
    a800:	udiv	r7, r7, r2
    a804:	clz	lr, r7
    a808:	cmp.w	lr, #0
    a80c:	bne.n	a87a <__udivmoddi4+0x16e>
    a80e:	subs	r3, r6, r7
    a810:	mov.w	r8, r7, lsr #16
    a814:	uxth.w	ip, r7
    a818:	movs	r1, #1
    a81a:	udiv	r0, r3, r8
    a81e:	lsrs	r2, r4, #16
    a820:	mls	r6, r8, r0, r3
    a824:	orr.w	r6, r2, r6, lsl #16
    a828:	mul.w	r3, ip, r0
    a82c:	cmp	r3, r6
    a82e:	bls.n	a840 <__udivmoddi4+0x134>
    a830:	adds	r6, r6, r7
    a832:	add.w	r2, r0, #4294967295
    a836:	bcs.n	a83e <__udivmoddi4+0x132>
    a838:	cmp	r3, r6
    a83a:	bhi.w	a9da <__udivmoddi4+0x2ce>
    a83e:	mov	r0, r2
    a840:	subs	r6, r6, r3
    a842:	uxth	r2, r4
    a844:	udiv	r3, r6, r8
    a848:	mls	r6, r8, r3, r6
    a84c:	orr.w	r4, r2, r6, lsl #16
    a850:	mul.w	ip, ip, r3
    a854:	cmp	ip, r4
    a856:	bls.n	a868 <__udivmoddi4+0x15c>
    a858:	adds	r4, r4, r7
    a85a:	add.w	r2, r3, #4294967295
    a85e:	bcs.n	a866 <__udivmoddi4+0x15a>
    a860:	cmp	ip, r4
    a862:	bhi.w	a9d0 <__udivmoddi4+0x2c4>
    a866:	mov	r3, r2
    a868:	rsb	r4, ip, r4
    a86c:	orr.w	r0, r3, r0, lsl #16
    a870:	b.n	a7ac <__udivmoddi4+0xa0>
    a872:	mov	r1, r5
    a874:	mov	r0, r5
    a876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a87a:	rsb	r1, lr, #32
    a87e:	lsl.w	r3, r6, lr
    a882:	lsl.w	r7, r7, lr
    a886:	lsr.w	r9, r0, r1
    a88a:	mov.w	r8, r7, lsr #16
    a88e:	lsrs	r6, r1
    a890:	orr.w	r9, r9, r3
    a894:	udiv	sl, r6, r8
    a898:	mov.w	r4, r9, lsr #16
    a89c:	mls	r6, r8, sl, r6
    a8a0:	uxth.w	ip, r7
    a8a4:	orr.w	r3, r4, r6, lsl #16
    a8a8:	mul.w	r2, sl, ip
    a8ac:	cmp	r2, r3
    a8ae:	lsl.w	r4, r0, lr
    a8b2:	bls.n	a8ca <__udivmoddi4+0x1be>
    a8b4:	adds	r3, r3, r7
    a8b6:	add.w	r1, sl, #4294967295
    a8ba:	bcs.w	a9cc <__udivmoddi4+0x2c0>
    a8be:	cmp	r2, r3
    a8c0:	bls.w	a9cc <__udivmoddi4+0x2c0>
    a8c4:	sub.w	sl, sl, #2
    a8c8:	add	r3, r7
    a8ca:	subs	r3, r3, r2
    a8cc:	uxth.w	r9, r9
    a8d0:	udiv	r1, r3, r8
    a8d4:	mls	r3, r8, r1, r3
    a8d8:	orr.w	r3, r9, r3, lsl #16
    a8dc:	mul.w	r6, r1, ip
    a8e0:	cmp	r6, r3
    a8e2:	bls.n	a8f4 <__udivmoddi4+0x1e8>
    a8e4:	adds	r3, r3, r7
    a8e6:	add.w	r2, r1, #4294967295
    a8ea:	bcs.n	a9c4 <__udivmoddi4+0x2b8>
    a8ec:	cmp	r6, r3
    a8ee:	bls.n	a9c4 <__udivmoddi4+0x2b8>
    a8f0:	subs	r1, #2
    a8f2:	add	r3, r7
    a8f4:	subs	r3, r3, r6
    a8f6:	orr.w	r1, r1, sl, lsl #16
    a8fa:	b.n	a81a <__udivmoddi4+0x10e>
    a8fc:	rsb	lr, r1, #32
    a900:	lsr.w	r4, r2, lr
    a904:	lsls	r3, r1
    a906:	orrs	r3, r4
    a908:	lsr.w	r7, r0, lr
    a90c:	lsl.w	r4, r6, r1
    a910:	mov.w	ip, r3, lsr #16
    a914:	lsr.w	r6, r6, lr
    a918:	orrs	r4, r7
    a91a:	udiv	r9, r6, ip
    a91e:	lsrs	r7, r4, #16
    a920:	mls	r6, ip, r9, r6
    a924:	uxth.w	r8, r3
    a928:	orr.w	r6, r7, r6, lsl #16
    a92c:	mul.w	r7, r9, r8
    a930:	cmp	r7, r6
    a932:	lsl.w	r2, r2, r1
    a936:	lsl.w	sl, r0, r1
    a93a:	bls.n	a94e <__udivmoddi4+0x242>
    a93c:	adds	r6, r6, r3
    a93e:	add.w	r0, r9, #4294967295
    a942:	bcs.n	a9c8 <__udivmoddi4+0x2bc>
    a944:	cmp	r7, r6
    a946:	bls.n	a9c8 <__udivmoddi4+0x2bc>
    a948:	sub.w	r9, r9, #2
    a94c:	add	r6, r3
    a94e:	subs	r6, r6, r7
    a950:	uxth	r0, r4
    a952:	udiv	r4, r6, ip
    a956:	mls	r6, ip, r4, r6
    a95a:	orr.w	r7, r0, r6, lsl #16
    a95e:	mul.w	r8, r4, r8
    a962:	cmp	r8, r7
    a964:	bls.n	a976 <__udivmoddi4+0x26a>
    a966:	adds	r7, r7, r3
    a968:	add.w	r0, r4, #4294967295
    a96c:	bcs.n	a9c0 <__udivmoddi4+0x2b4>
    a96e:	cmp	r8, r7
    a970:	bls.n	a9c0 <__udivmoddi4+0x2b4>
    a972:	subs	r4, #2
    a974:	add	r7, r3
    a976:	orr.w	r0, r4, r9, lsl #16
    a97a:	rsb	r7, r8, r7
    a97e:	umull	r8, r9, r0, r2
    a982:	cmp	r7, r9
    a984:	mov	r4, r8
    a986:	mov	r6, r9
    a988:	bcc.n	a9b4 <__udivmoddi4+0x2a8>
    a98a:	beq.n	a9e0 <__udivmoddi4+0x2d4>
    a98c:	cbz	r5, a9e8 <__udivmoddi4+0x2dc>
    a98e:	subs.w	r3, sl, r4
    a992:	sbc.w	r7, r7, r6
    a996:	lsl.w	lr, r7, lr
    a99a:	lsrs	r3, r1
    a99c:	lsrs	r7, r1
    a99e:	orr.w	r3, lr, r3
    a9a2:	stmia.w	r5, {r3, r7}
    a9a6:	movs	r1, #0
    a9a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9ac:	mov	r3, r2
    a9ae:	b.n	a7a2 <__udivmoddi4+0x96>
    a9b0:	mov	r0, r2
    a9b2:	b.n	a776 <__udivmoddi4+0x6a>
    a9b4:	subs.w	r4, r8, r2
    a9b8:	sbc.w	r6, r9, r3
    a9bc:	subs	r0, #1
    a9be:	b.n	a98c <__udivmoddi4+0x280>
    a9c0:	mov	r4, r0
    a9c2:	b.n	a976 <__udivmoddi4+0x26a>
    a9c4:	mov	r1, r2
    a9c6:	b.n	a8f4 <__udivmoddi4+0x1e8>
    a9c8:	mov	r9, r0
    a9ca:	b.n	a94e <__udivmoddi4+0x242>
    a9cc:	mov	sl, r1
    a9ce:	b.n	a8ca <__udivmoddi4+0x1be>
    a9d0:	subs	r3, #2
    a9d2:	add	r4, r7
    a9d4:	b.n	a868 <__udivmoddi4+0x15c>
    a9d6:	mov	r0, r1
    a9d8:	b.n	a7f0 <__udivmoddi4+0xe4>
    a9da:	subs	r0, #2
    a9dc:	add	r6, r7
    a9de:	b.n	a840 <__udivmoddi4+0x134>
    a9e0:	cmp	sl, r8
    a9e2:	bcc.n	a9b4 <__udivmoddi4+0x2a8>
    a9e4:	mov	r6, r7
    a9e6:	b.n	a98c <__udivmoddi4+0x280>
    a9e8:	mov	r1, r5
    a9ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9ee:	nop

0000a9f0 <__aeabi_idiv0>:
    a9f0:	bx	lr
    a9f2:	nop

0000a9f4 <__cxa_atexit>:
    a9f4:	mov	r3, r2
    a9f6:	mov	r2, r1
    a9f8:	mov	r1, r0
    a9fa:	movs	r0, #2
    a9fc:	b.w	b9e8 <__register_exitproc>

0000aa00 <__errno>:
    aa00:	ldr	r3, [pc, #4]	; (aa08 <__errno+0x8>)
    aa02:	ldr	r0, [r3, #0]
    aa04:	bx	lr
    aa06:	nop
    aa08:	.word	0x20000d38

0000aa0c <__libc_init_array>:
    aa0c:	push	{r4, r5, r6, lr}
    aa0e:	ldr	r6, [pc, #60]	; (aa4c <__libc_init_array+0x40>)
    aa10:	ldr	r5, [pc, #60]	; (aa50 <__libc_init_array+0x44>)
    aa12:	subs	r6, r6, r5
    aa14:	asrs	r6, r6, #2
    aa16:	it	ne
    aa18:	movne	r4, #0
    aa1a:	beq.n	aa28 <__libc_init_array+0x1c>
    aa1c:	adds	r4, #1
    aa1e:	ldr.w	r3, [r5], #4
    aa22:	blx	r3
    aa24:	cmp	r6, r4
    aa26:	bne.n	aa1c <__libc_init_array+0x10>
    aa28:	ldr	r6, [pc, #40]	; (aa54 <__libc_init_array+0x48>)
    aa2a:	ldr	r5, [pc, #44]	; (aa58 <__libc_init_array+0x4c>)
    aa2c:	subs	r6, r6, r5
    aa2e:	bl	eb40 <___init_veneer>
    aa32:	asrs	r6, r6, #2
    aa34:	it	ne
    aa36:	movne	r4, #0
    aa38:	beq.n	aa48 <__libc_init_array+0x3c>
    aa3a:	adds	r4, #1
    aa3c:	ldr.w	r3, [r5], #4
    aa40:	blx	r3
    aa42:	cmp	r6, r4
    aa44:	bne.n	aa3a <__libc_init_array+0x2e>
    aa46:	pop	{r4, r5, r6, pc}
    aa48:	pop	{r4, r5, r6, pc}
    aa4a:	nop
    aa4c:	.word	0x60001b70
    aa50:	.word	0x60001b70
    aa54:	.word	0x60001b7c
    aa58:	.word	0x60001b70

0000aa5c <malloc>:
    aa5c:	ldr	r3, [pc, #8]	; (aa68 <malloc+0xc>)
    aa5e:	mov	r1, r0
    aa60:	ldr	r0, [r3, #0]
    aa62:	b.w	aa7c <_malloc_r>
    aa66:	nop
    aa68:	.word	0x20000d38

0000aa6c <free>:
    aa6c:	ldr	r3, [pc, #8]	; (aa78 <free+0xc>)
    aa6e:	mov	r1, r0
    aa70:	ldr	r0, [r3, #0]
    aa72:	b.w	bb28 <_free_r>
    aa76:	nop
    aa78:	.word	0x20000d38

0000aa7c <_malloc_r>:
    aa7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa80:	add.w	r5, r1, #11
    aa84:	cmp	r5, #22
    aa86:	sub	sp, #12
    aa88:	mov	r6, r0
    aa8a:	bls.w	abcc <_malloc_r+0x150>
    aa8e:	bics.w	r5, r5, #7
    aa92:	bmi.w	ac14 <_malloc_r+0x198>
    aa96:	cmp	r1, r5
    aa98:	bhi.w	ac14 <_malloc_r+0x198>
    aa9c:	bl	b288 <__malloc_lock>
    aaa0:	cmp.w	r5, #504	; 0x1f8
    aaa4:	bcc.w	afe0 <_malloc_r+0x564>
    aaa8:	lsrs	r3, r5, #9
    aaaa:	beq.w	ac22 <_malloc_r+0x1a6>
    aaae:	cmp	r3, #4
    aab0:	bhi.w	adba <_malloc_r+0x33e>
    aab4:	lsrs	r0, r5, #6
    aab6:	add.w	lr, r0, #57	; 0x39
    aaba:	mov.w	r3, lr, lsl #1
    aabe:	adds	r0, #56	; 0x38
    aac0:	ldr	r7, [pc, #784]	; (add4 <_malloc_r+0x358>)
    aac2:	add.w	r3, r7, r3, lsl #2
    aac6:	sub.w	r1, r3, #8
    aaca:	ldr	r4, [r3, #4]
    aacc:	cmp	r1, r4
    aace:	bne.n	aae0 <_malloc_r+0x64>
    aad0:	b.n	ac2c <_malloc_r+0x1b0>
    aad2:	cmp	r2, #0
    aad4:	bge.w	ac30 <_malloc_r+0x1b4>
    aad8:	ldr	r4, [r4, #12]
    aada:	cmp	r1, r4
    aadc:	beq.w	ac2c <_malloc_r+0x1b0>
    aae0:	ldr	r3, [r4, #4]
    aae2:	bic.w	r3, r3, #3
    aae6:	subs	r2, r3, r5
    aae8:	cmp	r2, #15
    aaea:	ble.n	aad2 <_malloc_r+0x56>
    aaec:	ldr	r1, [pc, #740]	; (add4 <_malloc_r+0x358>)
    aaee:	ldr	r4, [r7, #16]
    aaf0:	add.w	lr, r1, #8
    aaf4:	cmp	r4, lr
    aaf6:	beq.w	ae60 <_malloc_r+0x3e4>
    aafa:	ldr	r3, [r4, #4]
    aafc:	bic.w	r3, r3, #3
    ab00:	subs	r2, r3, r5
    ab02:	cmp	r2, #15
    ab04:	bgt.w	ae3a <_malloc_r+0x3be>
    ab08:	cmp	r2, #0
    ab0a:	str.w	lr, [r1, #20]
    ab0e:	str.w	lr, [r1, #16]
    ab12:	bge.w	ac52 <_malloc_r+0x1d6>
    ab16:	cmp.w	r3, #512	; 0x200
    ab1a:	bcs.w	adec <_malloc_r+0x370>
    ab1e:	lsrs	r3, r3, #3
    ab20:	add.w	ip, r3, #1
    ab24:	movs	r2, #1
    ab26:	asrs	r3, r3, #2
    ab28:	lsl.w	r3, r2, r3
    ab2c:	ldr	r2, [r1, #4]
    ab2e:	ldr.w	r8, [r1, ip, lsl #3]
    ab32:	str.w	r8, [r4, #8]
    ab36:	add.w	r9, r1, ip, lsl #3
    ab3a:	orrs	r2, r3
    ab3c:	sub.w	r3, r9, #8
    ab40:	str	r3, [r4, #12]
    ab42:	str	r2, [r1, #4]
    ab44:	str.w	r4, [r1, ip, lsl #3]
    ab48:	str.w	r4, [r8, #12]
    ab4c:	asrs	r3, r0, #2
    ab4e:	movs	r4, #1
    ab50:	lsls	r4, r3
    ab52:	cmp	r4, r2
    ab54:	bhi.w	ac6c <_malloc_r+0x1f0>
    ab58:	tst	r4, r2
    ab5a:	bne.n	ab6a <_malloc_r+0xee>
    ab5c:	bic.w	r0, r0, #3
    ab60:	lsls	r4, r4, #1
    ab62:	tst	r4, r2
    ab64:	add.w	r0, r0, #4
    ab68:	beq.n	ab60 <_malloc_r+0xe4>
    ab6a:	add.w	r9, r7, r0, lsl #3
    ab6e:	mov	ip, r9
    ab70:	mov	r8, r0
    ab72:	ldr.w	r1, [ip, #12]
    ab76:	cmp	ip, r1
    ab78:	bne.n	ab8a <_malloc_r+0x10e>
    ab7a:	b.n	ae64 <_malloc_r+0x3e8>
    ab7c:	cmp	r2, #0
    ab7e:	bge.w	ae84 <_malloc_r+0x408>
    ab82:	ldr	r1, [r1, #12]
    ab84:	cmp	ip, r1
    ab86:	beq.w	ae64 <_malloc_r+0x3e8>
    ab8a:	ldr	r3, [r1, #4]
    ab8c:	bic.w	r3, r3, #3
    ab90:	subs	r2, r3, r5
    ab92:	cmp	r2, #15
    ab94:	ble.n	ab7c <_malloc_r+0x100>
    ab96:	mov	r4, r1
    ab98:	ldr.w	ip, [r1, #12]
    ab9c:	ldr.w	r8, [r4, #8]!
    aba0:	adds	r3, r1, r5
    aba2:	orr.w	r5, r5, #1
    aba6:	str	r5, [r1, #4]
    aba8:	orr.w	r1, r2, #1
    abac:	str.w	ip, [r8, #12]
    abb0:	mov	r0, r6
    abb2:	str.w	r8, [ip, #8]
    abb6:	str	r3, [r7, #20]
    abb8:	str	r3, [r7, #16]
    abba:	str.w	lr, [r3, #12]
    abbe:	str.w	lr, [r3, #8]
    abc2:	str	r1, [r3, #4]
    abc4:	str	r2, [r3, r2]
    abc6:	bl	b28c <__malloc_unlock>
    abca:	b.n	ac0c <_malloc_r+0x190>
    abcc:	cmp	r1, #16
    abce:	bhi.n	ac14 <_malloc_r+0x198>
    abd0:	bl	b288 <__malloc_lock>
    abd4:	movs	r5, #16
    abd6:	movs	r3, #6
    abd8:	movs	r0, #2
    abda:	ldr	r7, [pc, #504]	; (add4 <_malloc_r+0x358>)
    abdc:	add.w	r3, r7, r3, lsl #2
    abe0:	sub.w	r2, r3, #8
    abe4:	ldr	r4, [r3, #4]
    abe6:	cmp	r4, r2
    abe8:	beq.w	ae76 <_malloc_r+0x3fa>
    abec:	ldr	r3, [r4, #4]
    abee:	ldr	r1, [r4, #12]
    abf0:	ldr	r5, [r4, #8]
    abf2:	bic.w	r3, r3, #3
    abf6:	add	r3, r4
    abf8:	mov	r0, r6
    abfa:	ldr	r2, [r3, #4]
    abfc:	str	r1, [r5, #12]
    abfe:	orr.w	r2, r2, #1
    ac02:	str	r5, [r1, #8]
    ac04:	str	r2, [r3, #4]
    ac06:	bl	b28c <__malloc_unlock>
    ac0a:	adds	r4, #8
    ac0c:	mov	r0, r4
    ac0e:	add	sp, #12
    ac10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac14:	movs	r4, #0
    ac16:	movs	r3, #12
    ac18:	mov	r0, r4
    ac1a:	str	r3, [r6, #0]
    ac1c:	add	sp, #12
    ac1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac22:	movs	r3, #128	; 0x80
    ac24:	mov.w	lr, #64	; 0x40
    ac28:	movs	r0, #63	; 0x3f
    ac2a:	b.n	aac0 <_malloc_r+0x44>
    ac2c:	mov	r0, lr
    ac2e:	b.n	aaec <_malloc_r+0x70>
    ac30:	add	r3, r4
    ac32:	ldr	r1, [r4, #12]
    ac34:	ldr	r2, [r3, #4]
    ac36:	ldr	r5, [r4, #8]
    ac38:	orr.w	r2, r2, #1
    ac3c:	str	r1, [r5, #12]
    ac3e:	mov	r0, r6
    ac40:	str	r5, [r1, #8]
    ac42:	str	r2, [r3, #4]
    ac44:	bl	b28c <__malloc_unlock>
    ac48:	adds	r4, #8
    ac4a:	mov	r0, r4
    ac4c:	add	sp, #12
    ac4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac52:	add	r3, r4
    ac54:	mov	r0, r6
    ac56:	ldr	r2, [r3, #4]
    ac58:	orr.w	r2, r2, #1
    ac5c:	str	r2, [r3, #4]
    ac5e:	bl	b28c <__malloc_unlock>
    ac62:	adds	r4, #8
    ac64:	mov	r0, r4
    ac66:	add	sp, #12
    ac68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac6c:	ldr	r4, [r7, #8]
    ac6e:	ldr	r3, [r4, #4]
    ac70:	bic.w	r8, r3, #3
    ac74:	cmp	r8, r5
    ac76:	bcc.n	ac82 <_malloc_r+0x206>
    ac78:	rsb	r3, r5, r8
    ac7c:	cmp	r3, #15
    ac7e:	bgt.w	ad9a <_malloc_r+0x31e>
    ac82:	ldr	r3, [pc, #340]	; (add8 <_malloc_r+0x35c>)
    ac84:	ldr.w	r9, [pc, #352]	; ade8 <_malloc_r+0x36c>
    ac88:	ldr	r2, [r3, #0]
    ac8a:	ldr.w	r3, [r9]
    ac8e:	adds	r3, #1
    ac90:	add	r2, r5
    ac92:	add.w	sl, r4, r8
    ac96:	beq.w	af5a <_malloc_r+0x4de>
    ac9a:	add.w	r2, r2, #4096	; 0x1000
    ac9e:	adds	r2, #15
    aca0:	bic.w	r2, r2, #4080	; 0xff0
    aca4:	bic.w	r2, r2, #15
    aca8:	mov	r1, r2
    acaa:	mov	r0, r6
    acac:	str	r2, [sp, #4]
    acae:	bl	b670 <_sbrk_r>
    acb2:	cmp.w	r0, #4294967295
    acb6:	mov	fp, r0
    acb8:	ldr	r2, [sp, #4]
    acba:	beq.w	af6e <_malloc_r+0x4f2>
    acbe:	cmp	sl, r0
    acc0:	bhi.w	aebc <_malloc_r+0x440>
    acc4:	ldr	r3, [pc, #276]	; (addc <_malloc_r+0x360>)
    acc6:	ldr	r1, [r3, #0]
    acc8:	cmp	sl, fp
    acca:	add	r1, r2
    accc:	str	r1, [r3, #0]
    acce:	beq.w	af78 <_malloc_r+0x4fc>
    acd2:	ldr.w	r0, [r9]
    acd6:	ldr.w	lr, [pc, #272]	; ade8 <_malloc_r+0x36c>
    acda:	adds	r0, #1
    acdc:	ittet	ne
    acde:	rsbne	sl, sl, fp
    ace2:	addne	r1, sl
    ace4:	streq.w	fp, [lr]
    ace8:	strne	r1, [r3, #0]
    acea:	ands.w	r1, fp, #7
    acee:	beq.w	af20 <_malloc_r+0x4a4>
    acf2:	rsb	r0, r1, #8
    acf6:	rsb	r1, r1, #4096	; 0x1000
    acfa:	add	fp, r0
    acfc:	adds	r1, #8
    acfe:	add	r2, fp
    ad00:	ubfx	r2, r2, #0, #12
    ad04:	rsb	r9, r2, r1
    ad08:	mov	r1, r9
    ad0a:	mov	r0, r6
    ad0c:	str	r3, [sp, #4]
    ad0e:	bl	b670 <_sbrk_r>
    ad12:	adds	r3, r0, #1
    ad14:	ldr	r3, [sp, #4]
    ad16:	beq.w	af98 <_malloc_r+0x51c>
    ad1a:	rsb	r2, fp, r0
    ad1e:	add	r2, r9
    ad20:	orr.w	r2, r2, #1
    ad24:	ldr	r1, [r3, #0]
    ad26:	str.w	fp, [r7, #8]
    ad2a:	add	r1, r9
    ad2c:	cmp	r4, r7
    ad2e:	str.w	r2, [fp, #4]
    ad32:	str	r1, [r3, #0]
    ad34:	ldr.w	r9, [pc, #164]	; addc <_malloc_r+0x360>
    ad38:	beq.n	ad68 <_malloc_r+0x2ec>
    ad3a:	cmp.w	r8, #15
    ad3e:	bls.w	af3c <_malloc_r+0x4c0>
    ad42:	ldr	r2, [r4, #4]
    ad44:	sub.w	r3, r8, #12
    ad48:	bic.w	r3, r3, #7
    ad4c:	adds	r0, r4, r3
    ad4e:	and.w	r2, r2, #1
    ad52:	mov.w	lr, #5
    ad56:	orrs	r2, r3
    ad58:	cmp	r3, #15
    ad5a:	str	r2, [r4, #4]
    ad5c:	str.w	lr, [r0, #4]
    ad60:	str.w	lr, [r0, #8]
    ad64:	bhi.w	afa0 <_malloc_r+0x524>
    ad68:	ldr	r3, [pc, #116]	; (ade0 <_malloc_r+0x364>)
    ad6a:	ldr	r4, [r7, #8]
    ad6c:	ldr	r2, [r3, #0]
    ad6e:	cmp	r1, r2
    ad70:	it	hi
    ad72:	strhi	r1, [r3, #0]
    ad74:	ldr	r3, [pc, #108]	; (ade4 <_malloc_r+0x368>)
    ad76:	ldr	r2, [r3, #0]
    ad78:	cmp	r1, r2
    ad7a:	ldr	r2, [r4, #4]
    ad7c:	it	hi
    ad7e:	strhi	r1, [r3, #0]
    ad80:	bic.w	r2, r2, #3
    ad84:	cmp	r5, r2
    ad86:	sub.w	r3, r2, r5
    ad8a:	bhi.n	ad90 <_malloc_r+0x314>
    ad8c:	cmp	r3, #15
    ad8e:	bgt.n	ad9a <_malloc_r+0x31e>
    ad90:	mov	r0, r6
    ad92:	bl	b28c <__malloc_unlock>
    ad96:	movs	r4, #0
    ad98:	b.n	ac0c <_malloc_r+0x190>
    ad9a:	adds	r2, r4, r5
    ad9c:	orr.w	r3, r3, #1
    ada0:	orr.w	r5, r5, #1
    ada4:	str	r5, [r4, #4]
    ada6:	mov	r0, r6
    ada8:	str	r2, [r7, #8]
    adaa:	str	r3, [r2, #4]
    adac:	bl	b28c <__malloc_unlock>
    adb0:	adds	r4, #8
    adb2:	mov	r0, r4
    adb4:	add	sp, #12
    adb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adba:	cmp	r3, #20
    adbc:	bls.n	aea2 <_malloc_r+0x426>
    adbe:	cmp	r3, #84	; 0x54
    adc0:	bhi.w	af0c <_malloc_r+0x490>
    adc4:	lsrs	r0, r5, #12
    adc6:	add.w	lr, r0, #111	; 0x6f
    adca:	mov.w	r3, lr, lsl #1
    adce:	adds	r0, #110	; 0x6e
    add0:	b.n	aac0 <_malloc_r+0x44>
    add2:	nop
    add4:	.word	0x20000ea8
    add8:	.word	0x20004a88
    addc:	.word	0x20004a8c
    ade0:	.word	0x20004a84
    ade4:	.word	0x20004a80
    ade8:	.word	0x200012b4
    adec:	lsrs	r2, r3, #9
    adee:	cmp	r2, #4
    adf0:	bls.n	aeb0 <_malloc_r+0x434>
    adf2:	cmp	r2, #20
    adf4:	bhi.w	af5e <_malloc_r+0x4e2>
    adf8:	add.w	r1, r2, #92	; 0x5c
    adfc:	lsls	r1, r1, #1
    adfe:	adds	r2, #91	; 0x5b
    ae00:	add.w	ip, r7, r1, lsl #2
    ae04:	ldr.w	r1, [r7, r1, lsl #2]
    ae08:	ldr.w	r8, [pc, #476]	; afe8 <_malloc_r+0x56c>
    ae0c:	sub.w	ip, ip, #8
    ae10:	cmp	ip, r1
    ae12:	beq.w	af26 <_malloc_r+0x4aa>
    ae16:	ldr	r2, [r1, #4]
    ae18:	bic.w	r2, r2, #3
    ae1c:	cmp	r3, r2
    ae1e:	bcs.n	ae26 <_malloc_r+0x3aa>
    ae20:	ldr	r1, [r1, #8]
    ae22:	cmp	ip, r1
    ae24:	bne.n	ae16 <_malloc_r+0x39a>
    ae26:	ldr.w	ip, [r1, #12]
    ae2a:	ldr	r2, [r7, #4]
    ae2c:	str.w	ip, [r4, #12]
    ae30:	str	r1, [r4, #8]
    ae32:	str.w	r4, [ip, #8]
    ae36:	str	r4, [r1, #12]
    ae38:	b.n	ab4c <_malloc_r+0xd0>
    ae3a:	adds	r3, r4, r5
    ae3c:	orr.w	r7, r2, #1
    ae40:	orr.w	r5, r5, #1
    ae44:	str	r5, [r4, #4]
    ae46:	mov	r0, r6
    ae48:	str	r3, [r1, #20]
    ae4a:	str	r3, [r1, #16]
    ae4c:	str.w	lr, [r3, #12]
    ae50:	str.w	lr, [r3, #8]
    ae54:	str	r7, [r3, #4]
    ae56:	str	r2, [r3, r2]
    ae58:	adds	r4, #8
    ae5a:	bl	b28c <__malloc_unlock>
    ae5e:	b.n	ac0c <_malloc_r+0x190>
    ae60:	ldr	r2, [r1, #4]
    ae62:	b.n	ab4c <_malloc_r+0xd0>
    ae64:	add.w	r8, r8, #1
    ae68:	tst.w	r8, #3
    ae6c:	add.w	ip, ip, #8
    ae70:	bne.w	ab72 <_malloc_r+0xf6>
    ae74:	b.n	aed8 <_malloc_r+0x45c>
    ae76:	ldr	r4, [r3, #12]
    ae78:	cmp	r3, r4
    ae7a:	it	eq
    ae7c:	addeq	r0, #2
    ae7e:	beq.w	aaec <_malloc_r+0x70>
    ae82:	b.n	abec <_malloc_r+0x170>
    ae84:	add	r3, r1
    ae86:	mov	r4, r1
    ae88:	ldr	r2, [r3, #4]
    ae8a:	ldr	r1, [r1, #12]
    ae8c:	ldr.w	r5, [r4, #8]!
    ae90:	orr.w	r2, r2, #1
    ae94:	str	r2, [r3, #4]
    ae96:	mov	r0, r6
    ae98:	str	r1, [r5, #12]
    ae9a:	str	r5, [r1, #8]
    ae9c:	bl	b28c <__malloc_unlock>
    aea0:	b.n	ac0c <_malloc_r+0x190>
    aea2:	add.w	lr, r3, #92	; 0x5c
    aea6:	add.w	r0, r3, #91	; 0x5b
    aeaa:	mov.w	r3, lr, lsl #1
    aeae:	b.n	aac0 <_malloc_r+0x44>
    aeb0:	lsrs	r2, r3, #6
    aeb2:	add.w	r1, r2, #57	; 0x39
    aeb6:	lsls	r1, r1, #1
    aeb8:	adds	r2, #56	; 0x38
    aeba:	b.n	ae00 <_malloc_r+0x384>
    aebc:	cmp	r4, r7
    aebe:	ldr	r3, [pc, #296]	; (afe8 <_malloc_r+0x56c>)
    aec0:	beq.w	acc4 <_malloc_r+0x248>
    aec4:	ldr	r4, [r3, #8]
    aec6:	ldr	r2, [r4, #4]
    aec8:	bic.w	r2, r2, #3
    aecc:	b.n	ad84 <_malloc_r+0x308>
    aece:	ldr.w	r3, [r9], #-8
    aed2:	cmp	r9, r3
    aed4:	bne.w	afdc <_malloc_r+0x560>
    aed8:	tst.w	r0, #3
    aedc:	add.w	r0, r0, #4294967295
    aee0:	bne.n	aece <_malloc_r+0x452>
    aee2:	ldr	r3, [r7, #4]
    aee4:	bic.w	r3, r3, r4
    aee8:	str	r3, [r7, #4]
    aeea:	lsls	r4, r4, #1
    aeec:	cmp	r4, r3
    aeee:	bhi.w	ac6c <_malloc_r+0x1f0>
    aef2:	cmp	r4, #0
    aef4:	beq.w	ac6c <_malloc_r+0x1f0>
    aef8:	tst	r4, r3
    aefa:	mov	r0, r8
    aefc:	bne.w	ab6a <_malloc_r+0xee>
    af00:	lsls	r4, r4, #1
    af02:	tst	r4, r3
    af04:	add.w	r0, r0, #4
    af08:	beq.n	af00 <_malloc_r+0x484>
    af0a:	b.n	ab6a <_malloc_r+0xee>
    af0c:	cmp.w	r3, #340	; 0x154
    af10:	bhi.n	af44 <_malloc_r+0x4c8>
    af12:	lsrs	r0, r5, #15
    af14:	add.w	lr, r0, #120	; 0x78
    af18:	mov.w	r3, lr, lsl #1
    af1c:	adds	r0, #119	; 0x77
    af1e:	b.n	aac0 <_malloc_r+0x44>
    af20:	mov.w	r1, #4096	; 0x1000
    af24:	b.n	acfe <_malloc_r+0x282>
    af26:	movs	r1, #1
    af28:	ldr.w	r3, [r8, #4]
    af2c:	asrs	r2, r2, #2
    af2e:	lsl.w	r2, r1, r2
    af32:	orrs	r2, r3
    af34:	str.w	r2, [r8, #4]
    af38:	mov	r1, ip
    af3a:	b.n	ae2c <_malloc_r+0x3b0>
    af3c:	movs	r3, #1
    af3e:	str.w	r3, [fp, #4]
    af42:	b.n	ad90 <_malloc_r+0x314>
    af44:	movw	r2, #1364	; 0x554
    af48:	cmp	r3, r2
    af4a:	bhi.n	af8e <_malloc_r+0x512>
    af4c:	lsrs	r0, r5, #18
    af4e:	add.w	lr, r0, #125	; 0x7d
    af52:	mov.w	r3, lr, lsl #1
    af56:	adds	r0, #124	; 0x7c
    af58:	b.n	aac0 <_malloc_r+0x44>
    af5a:	adds	r2, #16
    af5c:	b.n	aca8 <_malloc_r+0x22c>
    af5e:	cmp	r2, #84	; 0x54
    af60:	bhi.n	afb0 <_malloc_r+0x534>
    af62:	lsrs	r2, r3, #12
    af64:	add.w	r1, r2, #111	; 0x6f
    af68:	lsls	r1, r1, #1
    af6a:	adds	r2, #110	; 0x6e
    af6c:	b.n	ae00 <_malloc_r+0x384>
    af6e:	ldr	r4, [r7, #8]
    af70:	ldr	r2, [r4, #4]
    af72:	bic.w	r2, r2, #3
    af76:	b.n	ad84 <_malloc_r+0x308>
    af78:	ubfx	r0, sl, #0, #12
    af7c:	cmp	r0, #0
    af7e:	bne.w	acd2 <_malloc_r+0x256>
    af82:	add	r2, r8
    af84:	ldr	r3, [r7, #8]
    af86:	orr.w	r2, r2, #1
    af8a:	str	r2, [r3, #4]
    af8c:	b.n	ad68 <_malloc_r+0x2ec>
    af8e:	movs	r3, #254	; 0xfe
    af90:	mov.w	lr, #127	; 0x7f
    af94:	movs	r0, #126	; 0x7e
    af96:	b.n	aac0 <_malloc_r+0x44>
    af98:	movs	r2, #1
    af9a:	mov.w	r9, #0
    af9e:	b.n	ad24 <_malloc_r+0x2a8>
    afa0:	add.w	r1, r4, #8
    afa4:	mov	r0, r6
    afa6:	bl	bb28 <_free_r>
    afaa:	ldr.w	r1, [r9]
    afae:	b.n	ad68 <_malloc_r+0x2ec>
    afb0:	cmp.w	r2, #340	; 0x154
    afb4:	bhi.n	afc2 <_malloc_r+0x546>
    afb6:	lsrs	r2, r3, #15
    afb8:	add.w	r1, r2, #120	; 0x78
    afbc:	lsls	r1, r1, #1
    afbe:	adds	r2, #119	; 0x77
    afc0:	b.n	ae00 <_malloc_r+0x384>
    afc2:	movw	r1, #1364	; 0x554
    afc6:	cmp	r2, r1
    afc8:	bhi.n	afd6 <_malloc_r+0x55a>
    afca:	lsrs	r2, r3, #18
    afcc:	add.w	r1, r2, #125	; 0x7d
    afd0:	lsls	r1, r1, #1
    afd2:	adds	r2, #124	; 0x7c
    afd4:	b.n	ae00 <_malloc_r+0x384>
    afd6:	movs	r1, #254	; 0xfe
    afd8:	movs	r2, #126	; 0x7e
    afda:	b.n	ae00 <_malloc_r+0x384>
    afdc:	ldr	r3, [r7, #4]
    afde:	b.n	aeea <_malloc_r+0x46e>
    afe0:	lsrs	r0, r5, #3
    afe2:	adds	r3, r0, #1
    afe4:	lsls	r3, r3, #1
    afe6:	b.n	abda <_malloc_r+0x15e>
    afe8:	.word	0x20000ea8

0000afec <__ascii_mbtowc>:
    afec:	sub	sp, #8
    afee:	cbz	r1, b004 <__ascii_mbtowc+0x18>
    aff0:	cbz	r2, b00a <__ascii_mbtowc+0x1e>
    aff2:	cbz	r3, b010 <__ascii_mbtowc+0x24>
    aff4:	ldrb	r3, [r2, #0]
    aff6:	str	r3, [r1, #0]
    aff8:	ldrb	r2, [r2, #0]
    affa:	adds	r0, r2, #0
    affc:	it	ne
    affe:	movne	r0, #1
    b000:	add	sp, #8
    b002:	bx	lr
    b004:	add	r1, sp, #4
    b006:	cmp	r2, #0
    b008:	bne.n	aff2 <__ascii_mbtowc+0x6>
    b00a:	mov	r0, r2
    b00c:	add	sp, #8
    b00e:	bx	lr
    b010:	mvn.w	r0, #1
    b014:	b.n	b000 <__ascii_mbtowc+0x14>
    b016:	nop
	...

0000b020 <memchr>:
    b020:	and.w	r1, r1, #255	; 0xff
    b024:	cmp	r2, #16
    b026:	blt.n	b080 <memchr+0x60>
    b028:	tst.w	r0, #7
    b02c:	beq.n	b040 <memchr+0x20>
    b02e:	ldrb.w	r3, [r0], #1
    b032:	subs	r2, #1
    b034:	cmp	r3, r1
    b036:	beq.n	b094 <memchr+0x74>
    b038:	tst.w	r0, #7
    b03c:	cbz	r2, b090 <memchr+0x70>
    b03e:	bne.n	b02e <memchr+0xe>
    b040:	push	{r4, r5, r6, r7}
    b042:	orr.w	r1, r1, r1, lsl #8
    b046:	orr.w	r1, r1, r1, lsl #16
    b04a:	bic.w	r4, r2, #7
    b04e:	mvns.w	r7, #0
    b052:	movs	r3, #0
    b054:	ldrd	r5, r6, [r0], #8
    b058:	subs	r4, #8
    b05a:	eor.w	r5, r5, r1
    b05e:	eor.w	r6, r6, r1
    b062:	uadd8	r5, r5, r7
    b066:	sel	r5, r3, r7
    b06a:	uadd8	r6, r6, r7
    b06e:	sel	r6, r5, r7
    b072:	cbnz	r6, b098 <memchr+0x78>
    b074:	bne.n	b054 <memchr+0x34>
    b076:	pop	{r4, r5, r6, r7}
    b078:	and.w	r1, r1, #255	; 0xff
    b07c:	and.w	r2, r2, #7
    b080:	cbz	r2, b090 <memchr+0x70>
    b082:	ldrb.w	r3, [r0], #1
    b086:	subs	r2, #1
    b088:	eor.w	r3, r3, r1
    b08c:	cbz	r3, b094 <memchr+0x74>
    b08e:	bne.n	b082 <memchr+0x62>
    b090:	movs	r0, #0
    b092:	bx	lr
    b094:	subs	r0, #1
    b096:	bx	lr
    b098:	cmp	r5, #0
    b09a:	itte	eq
    b09c:	moveq	r5, r6
    b09e:	subeq	r0, #3
    b0a0:	subne	r0, #7
    b0a2:	tst.w	r5, #1
    b0a6:	bne.n	b0b8 <memchr+0x98>
    b0a8:	adds	r0, #1
    b0aa:	tst.w	r5, #256	; 0x100
    b0ae:	ittt	eq
    b0b0:	addeq	r0, #1
    b0b2:	tsteq.w	r5, #98304	; 0x18000
    b0b6:	addeq	r0, #1
    b0b8:	pop	{r4, r5, r6, r7}
    b0ba:	subs	r0, #1
    b0bc:	bx	lr
    b0be:	nop

0000b0c0 <memcmp>:
    b0c0:	cmp	r2, #3
    b0c2:	push	{r4, r5, r6}
    b0c4:	bls.n	b114 <memcmp+0x54>
    b0c6:	orr.w	r3, r0, r1
    b0ca:	lsls	r3, r3, #30
    b0cc:	beq.n	b0f2 <memcmp+0x32>
    b0ce:	ldrb	r4, [r0, #0]
    b0d0:	ldrb	r5, [r1, #0]
    b0d2:	cmp	r4, r5
    b0d4:	bne.n	b11c <memcmp+0x5c>
    b0d6:	add	r2, r0
    b0d8:	adds	r3, r0, #1
    b0da:	b.n	b0e8 <memcmp+0x28>
    b0dc:	ldrb.w	r4, [r3], #1
    b0e0:	ldrb.w	r5, [r1, #1]!
    b0e4:	cmp	r4, r5
    b0e6:	bne.n	b11c <memcmp+0x5c>
    b0e8:	cmp	r3, r2
    b0ea:	bne.n	b0dc <memcmp+0x1c>
    b0ec:	movs	r0, #0
    b0ee:	pop	{r4, r5, r6}
    b0f0:	bx	lr
    b0f2:	mov	r4, r1
    b0f4:	mov	r3, r0
    b0f6:	ldr	r6, [r3, #0]
    b0f8:	ldr	r5, [r4, #0]
    b0fa:	cmp	r6, r5
    b0fc:	mov	r0, r3
    b0fe:	mov	r1, r4
    b100:	add.w	r3, r3, #4
    b104:	add.w	r4, r4, #4
    b108:	bne.n	b0ce <memcmp+0xe>
    b10a:	subs	r2, #4
    b10c:	cmp	r2, #3
    b10e:	mov	r0, r3
    b110:	mov	r1, r4
    b112:	bhi.n	b0f6 <memcmp+0x36>
    b114:	cmp	r2, #0
    b116:	bne.n	b0ce <memcmp+0xe>
    b118:	mov	r0, r2
    b11a:	b.n	b0ee <memcmp+0x2e>
    b11c:	subs	r0, r4, r5
    b11e:	pop	{r4, r5, r6}
    b120:	bx	lr
    b122:	nop

0000b124 <memmove>:
    b124:	cmp	r0, r1
    b126:	push	{r4, r5, r6, r7, lr}
    b128:	bls.n	b146 <memmove+0x22>
    b12a:	adds	r3, r1, r2
    b12c:	cmp	r0, r3
    b12e:	bcs.n	b146 <memmove+0x22>
    b130:	adds	r1, r0, r2
    b132:	cmp	r2, #0
    b134:	beq.n	b1da <memmove+0xb6>
    b136:	subs	r2, r3, r2
    b138:	ldrb.w	r4, [r3, #-1]!
    b13c:	strb.w	r4, [r1, #-1]!
    b140:	cmp	r3, r2
    b142:	bne.n	b138 <memmove+0x14>
    b144:	pop	{r4, r5, r6, r7, pc}
    b146:	cmp	r2, #15
    b148:	bls.n	b1dc <memmove+0xb8>
    b14a:	orr.w	r3, r1, r0
    b14e:	lsls	r3, r3, #30
    b150:	bne.n	b1e0 <memmove+0xbc>
    b152:	add.w	r4, r0, #16
    b156:	add.w	r3, r1, #16
    b15a:	mov	r5, r2
    b15c:	ldr.w	r6, [r3, #-16]
    b160:	str.w	r6, [r4, #-16]
    b164:	ldr.w	r6, [r3, #-12]
    b168:	str.w	r6, [r4, #-12]
    b16c:	ldr.w	r6, [r3, #-8]
    b170:	str.w	r6, [r4, #-8]
    b174:	subs	r5, #16
    b176:	ldr.w	r6, [r3, #-4]
    b17a:	str.w	r6, [r4, #-4]
    b17e:	cmp	r5, #15
    b180:	add.w	r3, r3, #16
    b184:	add.w	r4, r4, #16
    b188:	bhi.n	b15c <memmove+0x38>
    b18a:	sub.w	r3, r2, #16
    b18e:	bic.w	r3, r3, #15
    b192:	and.w	lr, r2, #15
    b196:	adds	r3, #16
    b198:	cmp.w	lr, #3
    b19c:	add	r1, r3
    b19e:	add	r3, r0
    b1a0:	bls.n	b1e6 <memmove+0xc2>
    b1a2:	subs	r6, r3, #4
    b1a4:	mov	r5, r1
    b1a6:	mov	r4, lr
    b1a8:	subs	r4, #4
    b1aa:	ldr.w	r7, [r5], #4
    b1ae:	str.w	r7, [r6, #4]!
    b1b2:	cmp	r4, #3
    b1b4:	bhi.n	b1a8 <memmove+0x84>
    b1b6:	sub.w	r4, lr, #4
    b1ba:	bic.w	r4, r4, #3
    b1be:	adds	r4, #4
    b1c0:	add	r3, r4
    b1c2:	add	r1, r4
    b1c4:	and.w	r2, r2, #3
    b1c8:	cbz	r2, b1e4 <memmove+0xc0>
    b1ca:	subs	r3, #1
    b1cc:	add	r2, r1
    b1ce:	ldrb.w	r4, [r1], #1
    b1d2:	strb.w	r4, [r3, #1]!
    b1d6:	cmp	r2, r1
    b1d8:	bne.n	b1ce <memmove+0xaa>
    b1da:	pop	{r4, r5, r6, r7, pc}
    b1dc:	mov	r3, r0
    b1de:	b.n	b1c8 <memmove+0xa4>
    b1e0:	mov	r3, r0
    b1e2:	b.n	b1ca <memmove+0xa6>
    b1e4:	pop	{r4, r5, r6, r7, pc}
    b1e6:	mov	r2, lr
    b1e8:	b.n	b1c8 <memmove+0xa4>
    b1ea:	nop

0000b1ec <memset>:
    b1ec:	push	{r4, r5, r6}
    b1ee:	lsls	r4, r0, #30
    b1f0:	beq.n	b280 <memset+0x94>
    b1f2:	subs	r4, r2, #1
    b1f4:	cmp	r2, #0
    b1f6:	beq.n	b27c <memset+0x90>
    b1f8:	uxtb	r5, r1
    b1fa:	mov	r3, r0
    b1fc:	b.n	b204 <memset+0x18>
    b1fe:	subs	r2, r4, #1
    b200:	cbz	r4, b27c <memset+0x90>
    b202:	mov	r4, r2
    b204:	strb.w	r5, [r3], #1
    b208:	lsls	r2, r3, #30
    b20a:	bne.n	b1fe <memset+0x12>
    b20c:	cmp	r4, #3
    b20e:	bls.n	b26e <memset+0x82>
    b210:	uxtb	r5, r1
    b212:	orr.w	r5, r5, r5, lsl #8
    b216:	cmp	r4, #15
    b218:	orr.w	r5, r5, r5, lsl #16
    b21c:	bls.n	b252 <memset+0x66>
    b21e:	add.w	r2, r3, #16
    b222:	mov	r6, r4
    b224:	subs	r6, #16
    b226:	cmp	r6, #15
    b228:	str.w	r5, [r2, #-16]
    b22c:	str.w	r5, [r2, #-12]
    b230:	str.w	r5, [r2, #-8]
    b234:	str.w	r5, [r2, #-4]
    b238:	add.w	r2, r2, #16
    b23c:	bhi.n	b224 <memset+0x38>
    b23e:	sub.w	r2, r4, #16
    b242:	bic.w	r2, r2, #15
    b246:	and.w	r4, r4, #15
    b24a:	adds	r2, #16
    b24c:	cmp	r4, #3
    b24e:	add	r3, r2
    b250:	bls.n	b26e <memset+0x82>
    b252:	mov	r6, r3
    b254:	mov	r2, r4
    b256:	subs	r2, #4
    b258:	cmp	r2, #3
    b25a:	str.w	r5, [r6], #4
    b25e:	bhi.n	b256 <memset+0x6a>
    b260:	subs	r2, r4, #4
    b262:	bic.w	r2, r2, #3
    b266:	adds	r2, #4
    b268:	add	r3, r2
    b26a:	and.w	r4, r4, #3
    b26e:	cbz	r4, b27c <memset+0x90>
    b270:	uxtb	r1, r1
    b272:	add	r4, r3
    b274:	strb.w	r1, [r3], #1
    b278:	cmp	r3, r4
    b27a:	bne.n	b274 <memset+0x88>
    b27c:	pop	{r4, r5, r6}
    b27e:	bx	lr
    b280:	mov	r4, r2
    b282:	mov	r3, r0
    b284:	b.n	b20c <memset+0x20>
    b286:	nop

0000b288 <__malloc_lock>:
    b288:	bx	lr
    b28a:	nop

0000b28c <__malloc_unlock>:
    b28c:	bx	lr
    b28e:	nop

0000b290 <_realloc_r>:
    b290:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b294:	mov	r7, r2
    b296:	sub	sp, #12
    b298:	cmp	r1, #0
    b29a:	beq.w	b420 <_realloc_r+0x190>
    b29e:	mov	r6, r1
    b2a0:	mov	r9, r0
    b2a2:	add.w	r5, r7, #11
    b2a6:	bl	b288 <__malloc_lock>
    b2aa:	ldr.w	lr, [r6, #-4]
    b2ae:	cmp	r5, #22
    b2b0:	bic.w	r4, lr, #3
    b2b4:	sub.w	r8, r6, #8
    b2b8:	bhi.n	b33c <_realloc_r+0xac>
    b2ba:	movs	r2, #16
    b2bc:	mov	r5, r2
    b2be:	cmp	r7, r5
    b2c0:	bhi.n	b346 <_realloc_r+0xb6>
    b2c2:	cmp	r4, r2
    b2c4:	bge.n	b3b2 <_realloc_r+0x122>
    b2c6:	ldr	r3, [pc, #804]	; (b5ec <_realloc_r+0x35c>)
    b2c8:	ldr	r1, [r3, #8]
    b2ca:	add.w	r0, r8, r4
    b2ce:	cmp	r0, r1
    b2d0:	ldr	r1, [r0, #4]
    b2d2:	beq.w	b488 <_realloc_r+0x1f8>
    b2d6:	bic.w	r3, r1, #1
    b2da:	add	r3, r0
    b2dc:	ldr	r3, [r3, #4]
    b2de:	lsls	r3, r3, #31
    b2e0:	bpl.n	b3de <_realloc_r+0x14e>
    b2e2:	tst.w	lr, #1
    b2e6:	beq.n	b354 <_realloc_r+0xc4>
    b2e8:	mov	r1, r7
    b2ea:	mov	r0, r9
    b2ec:	bl	aa7c <_malloc_r>
    b2f0:	mov	r7, r0
    b2f2:	cbz	r0, b32e <_realloc_r+0x9e>
    b2f4:	ldr.w	r3, [r6, #-4]
    b2f8:	bic.w	r3, r3, #1
    b2fc:	add	r3, r8
    b2fe:	sub.w	r2, r0, #8
    b302:	cmp	r2, r3
    b304:	beq.w	b590 <_realloc_r+0x300>
    b308:	subs	r2, r4, #4
    b30a:	cmp	r2, #36	; 0x24
    b30c:	bhi.w	b572 <_realloc_r+0x2e2>
    b310:	cmp	r2, #19
    b312:	bhi.w	b51e <_realloc_r+0x28e>
    b316:	mov	r3, r0
    b318:	mov	r2, r6
    b31a:	ldr	r1, [r2, #0]
    b31c:	str	r1, [r3, #0]
    b31e:	ldr	r1, [r2, #4]
    b320:	str	r1, [r3, #4]
    b322:	ldr	r2, [r2, #8]
    b324:	str	r2, [r3, #8]
    b326:	mov	r1, r6
    b328:	mov	r0, r9
    b32a:	bl	bb28 <_free_r>
    b32e:	mov	r0, r9
    b330:	bl	b28c <__malloc_unlock>
    b334:	mov	r0, r7
    b336:	add	sp, #12
    b338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b33c:	bic.w	r5, r5, #7
    b340:	cmp	r5, #0
    b342:	mov	r2, r5
    b344:	bge.n	b2be <_realloc_r+0x2e>
    b346:	movs	r3, #12
    b348:	movs	r0, #0
    b34a:	str.w	r3, [r9]
    b34e:	add	sp, #12
    b350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b354:	ldr.w	r3, [r6, #-8]
    b358:	rsb	sl, r3, r8
    b35c:	ldr.w	r3, [sl, #4]
    b360:	bic.w	ip, r3, #3
    b364:	add.w	r3, r4, ip
    b368:	cmp	r3, r2
    b36a:	blt.n	b2e8 <_realloc_r+0x58>
    b36c:	mov	r7, sl
    b36e:	ldr.w	r1, [sl, #12]
    b372:	ldr.w	r0, [r7, #8]!
    b376:	subs	r2, r4, #4
    b378:	cmp	r2, #36	; 0x24
    b37a:	str	r1, [r0, #12]
    b37c:	str	r0, [r1, #8]
    b37e:	bhi.w	b5b0 <_realloc_r+0x320>
    b382:	cmp	r2, #19
    b384:	bls.w	b5ac <_realloc_r+0x31c>
    b388:	ldr	r1, [r6, #0]
    b38a:	str.w	r1, [sl, #8]
    b38e:	ldr	r1, [r6, #4]
    b390:	str.w	r1, [sl, #12]
    b394:	cmp	r2, #27
    b396:	bhi.w	b5f0 <_realloc_r+0x360>
    b39a:	adds	r6, #8
    b39c:	add.w	r2, sl, #16
    b3a0:	ldr	r1, [r6, #0]
    b3a2:	str	r1, [r2, #0]
    b3a4:	ldr	r1, [r6, #4]
    b3a6:	str	r1, [r2, #4]
    b3a8:	ldr	r1, [r6, #8]
    b3aa:	str	r1, [r2, #8]
    b3ac:	mov	r6, r7
    b3ae:	mov	r4, r3
    b3b0:	mov	r8, sl
    b3b2:	subs	r3, r4, r5
    b3b4:	cmp	r3, #15
    b3b6:	bhi.n	b3f4 <_realloc_r+0x164>
    b3b8:	ldr.w	r3, [r8, #4]
    b3bc:	and.w	r3, r3, #1
    b3c0:	orrs	r3, r4
    b3c2:	add	r4, r8
    b3c4:	str.w	r3, [r8, #4]
    b3c8:	ldr	r3, [r4, #4]
    b3ca:	orr.w	r3, r3, #1
    b3ce:	str	r3, [r4, #4]
    b3d0:	mov	r0, r9
    b3d2:	bl	b28c <__malloc_unlock>
    b3d6:	mov	r0, r6
    b3d8:	add	sp, #12
    b3da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3de:	bic.w	r1, r1, #3
    b3e2:	add	r1, r4
    b3e4:	cmp	r1, r2
    b3e6:	blt.n	b42c <_realloc_r+0x19c>
    b3e8:	ldr	r3, [r0, #12]
    b3ea:	ldr	r2, [r0, #8]
    b3ec:	mov	r4, r1
    b3ee:	str	r3, [r2, #12]
    b3f0:	str	r2, [r3, #8]
    b3f2:	b.n	b3b2 <_realloc_r+0x122>
    b3f4:	ldr.w	r2, [r8, #4]
    b3f8:	add.w	r1, r8, r5
    b3fc:	and.w	r2, r2, #1
    b400:	orrs	r5, r2
    b402:	orr.w	r2, r3, #1
    b406:	add	r3, r1
    b408:	str.w	r5, [r8, #4]
    b40c:	str	r2, [r1, #4]
    b40e:	ldr	r2, [r3, #4]
    b410:	orr.w	r2, r2, #1
    b414:	adds	r1, #8
    b416:	str	r2, [r3, #4]
    b418:	mov	r0, r9
    b41a:	bl	bb28 <_free_r>
    b41e:	b.n	b3d0 <_realloc_r+0x140>
    b420:	mov	r1, r2
    b422:	add	sp, #12
    b424:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b428:	b.w	aa7c <_malloc_r>
    b42c:	tst.w	lr, #1
    b430:	bne.w	b2e8 <_realloc_r+0x58>
    b434:	ldr.w	r3, [r6, #-8]
    b438:	rsb	sl, r3, r8
    b43c:	ldr.w	r3, [sl, #4]
    b440:	bic.w	ip, r3, #3
    b444:	add.w	lr, r1, ip
    b448:	cmp	lr, r2
    b44a:	blt.n	b364 <_realloc_r+0xd4>
    b44c:	ldr	r3, [r0, #12]
    b44e:	ldr	r2, [r0, #8]
    b450:	mov	r7, sl
    b452:	str	r3, [r2, #12]
    b454:	str	r2, [r3, #8]
    b456:	ldr.w	r1, [r7, #8]!
    b45a:	ldr.w	r3, [sl, #12]
    b45e:	str	r3, [r1, #12]
    b460:	subs	r2, r4, #4
    b462:	cmp	r2, #36	; 0x24
    b464:	str	r1, [r3, #8]
    b466:	bhi.w	b59c <_realloc_r+0x30c>
    b46a:	cmp	r2, #19
    b46c:	bls.n	b534 <_realloc_r+0x2a4>
    b46e:	ldr	r3, [r6, #0]
    b470:	str.w	r3, [sl, #8]
    b474:	ldr	r3, [r6, #4]
    b476:	str.w	r3, [sl, #12]
    b47a:	cmp	r2, #27
    b47c:	bhi.w	b5c0 <_realloc_r+0x330>
    b480:	adds	r6, #8
    b482:	add.w	r3, sl, #16
    b486:	b.n	b536 <_realloc_r+0x2a6>
    b488:	bic.w	fp, r1, #3
    b48c:	add	fp, r4
    b48e:	add.w	r0, r5, #16
    b492:	cmp	fp, r0
    b494:	bge.n	b54a <_realloc_r+0x2ba>
    b496:	tst.w	lr, #1
    b49a:	bne.w	b2e8 <_realloc_r+0x58>
    b49e:	ldr.w	r1, [r6, #-8]
    b4a2:	rsb	sl, r1, r8
    b4a6:	ldr.w	r1, [sl, #4]
    b4aa:	bic.w	ip, r1, #3
    b4ae:	add	fp, ip
    b4b0:	cmp	r0, fp
    b4b2:	bgt.w	b364 <_realloc_r+0xd4>
    b4b6:	mov	r7, sl
    b4b8:	ldr.w	r1, [sl, #12]
    b4bc:	ldr.w	r0, [r7, #8]!
    b4c0:	subs	r2, r4, #4
    b4c2:	cmp	r2, #36	; 0x24
    b4c4:	str	r1, [r0, #12]
    b4c6:	str	r0, [r1, #8]
    b4c8:	bhi.w	b634 <_realloc_r+0x3a4>
    b4cc:	cmp	r2, #19
    b4ce:	bls.w	b61c <_realloc_r+0x38c>
    b4d2:	ldr	r1, [r6, #0]
    b4d4:	str.w	r1, [sl, #8]
    b4d8:	ldr	r1, [r6, #4]
    b4da:	str.w	r1, [sl, #12]
    b4de:	cmp	r2, #27
    b4e0:	bhi.w	b642 <_realloc_r+0x3b2>
    b4e4:	adds	r6, #8
    b4e6:	add.w	r2, sl, #16
    b4ea:	ldr	r1, [r6, #0]
    b4ec:	str	r1, [r2, #0]
    b4ee:	ldr	r1, [r6, #4]
    b4f0:	str	r1, [r2, #4]
    b4f2:	ldr	r1, [r6, #8]
    b4f4:	str	r1, [r2, #8]
    b4f6:	add.w	r1, sl, r5
    b4fa:	rsb	r2, r5, fp
    b4fe:	orr.w	r2, r2, #1
    b502:	str	r1, [r3, #8]
    b504:	str	r2, [r1, #4]
    b506:	ldr.w	r3, [sl, #4]
    b50a:	and.w	r3, r3, #1
    b50e:	orrs	r5, r3
    b510:	mov	r0, r9
    b512:	str.w	r5, [sl, #4]
    b516:	bl	b28c <__malloc_unlock>
    b51a:	mov	r0, r7
    b51c:	b.n	b3d8 <_realloc_r+0x148>
    b51e:	ldr	r3, [r6, #0]
    b520:	str	r3, [r0, #0]
    b522:	ldr	r3, [r6, #4]
    b524:	str	r3, [r0, #4]
    b526:	cmp	r2, #27
    b528:	bhi.n	b57a <_realloc_r+0x2ea>
    b52a:	add.w	r3, r0, #8
    b52e:	add.w	r2, r6, #8
    b532:	b.n	b31a <_realloc_r+0x8a>
    b534:	mov	r3, r7
    b536:	ldr	r2, [r6, #0]
    b538:	str	r2, [r3, #0]
    b53a:	ldr	r2, [r6, #4]
    b53c:	str	r2, [r3, #4]
    b53e:	ldr	r2, [r6, #8]
    b540:	str	r2, [r3, #8]
    b542:	mov	r6, r7
    b544:	mov	r4, lr
    b546:	mov	r8, sl
    b548:	b.n	b3b2 <_realloc_r+0x122>
    b54a:	add.w	r1, r8, r5
    b54e:	rsb	fp, r5, fp
    b552:	orr.w	r2, fp, #1
    b556:	str	r1, [r3, #8]
    b558:	str	r2, [r1, #4]
    b55a:	ldr.w	r3, [r6, #-4]
    b55e:	and.w	r3, r3, #1
    b562:	orrs	r5, r3
    b564:	mov	r0, r9
    b566:	str.w	r5, [r6, #-4]
    b56a:	bl	b28c <__malloc_unlock>
    b56e:	mov	r0, r6
    b570:	b.n	b3d8 <_realloc_r+0x148>
    b572:	mov	r1, r6
    b574:	bl	b124 <memmove>
    b578:	b.n	b326 <_realloc_r+0x96>
    b57a:	ldr	r3, [r6, #8]
    b57c:	str	r3, [r0, #8]
    b57e:	ldr	r3, [r6, #12]
    b580:	str	r3, [r0, #12]
    b582:	cmp	r2, #36	; 0x24
    b584:	beq.n	b5d8 <_realloc_r+0x348>
    b586:	add.w	r3, r0, #16
    b58a:	add.w	r2, r6, #16
    b58e:	b.n	b31a <_realloc_r+0x8a>
    b590:	ldr.w	r3, [r0, #-4]
    b594:	bic.w	r3, r3, #3
    b598:	add	r4, r3
    b59a:	b.n	b3b2 <_realloc_r+0x122>
    b59c:	mov	r1, r6
    b59e:	mov	r0, r7
    b5a0:	mov	r4, lr
    b5a2:	mov	r8, sl
    b5a4:	bl	b124 <memmove>
    b5a8:	mov	r6, r7
    b5aa:	b.n	b3b2 <_realloc_r+0x122>
    b5ac:	mov	r2, r7
    b5ae:	b.n	b3a0 <_realloc_r+0x110>
    b5b0:	mov	r1, r6
    b5b2:	mov	r0, r7
    b5b4:	mov	r4, r3
    b5b6:	mov	r8, sl
    b5b8:	bl	b124 <memmove>
    b5bc:	mov	r6, r7
    b5be:	b.n	b3b2 <_realloc_r+0x122>
    b5c0:	ldr	r3, [r6, #8]
    b5c2:	str.w	r3, [sl, #16]
    b5c6:	ldr	r3, [r6, #12]
    b5c8:	str.w	r3, [sl, #20]
    b5cc:	cmp	r2, #36	; 0x24
    b5ce:	beq.n	b608 <_realloc_r+0x378>
    b5d0:	adds	r6, #16
    b5d2:	add.w	r3, sl, #24
    b5d6:	b.n	b536 <_realloc_r+0x2a6>
    b5d8:	ldr	r3, [r6, #16]
    b5da:	str	r3, [r0, #16]
    b5dc:	ldr	r3, [r6, #20]
    b5de:	str	r3, [r0, #20]
    b5e0:	add.w	r2, r6, #24
    b5e4:	add.w	r3, r0, #24
    b5e8:	b.n	b31a <_realloc_r+0x8a>
    b5ea:	nop
    b5ec:	.word	0x20000ea8
    b5f0:	ldr	r1, [r6, #8]
    b5f2:	str.w	r1, [sl, #16]
    b5f6:	ldr	r1, [r6, #12]
    b5f8:	str.w	r1, [sl, #20]
    b5fc:	cmp	r2, #36	; 0x24
    b5fe:	beq.n	b620 <_realloc_r+0x390>
    b600:	adds	r6, #16
    b602:	add.w	r2, sl, #24
    b606:	b.n	b3a0 <_realloc_r+0x110>
    b608:	ldr	r3, [r6, #16]
    b60a:	str.w	r3, [sl, #24]
    b60e:	ldr	r3, [r6, #20]
    b610:	str.w	r3, [sl, #28]
    b614:	adds	r6, #24
    b616:	add.w	r3, sl, #32
    b61a:	b.n	b536 <_realloc_r+0x2a6>
    b61c:	mov	r2, r7
    b61e:	b.n	b4ea <_realloc_r+0x25a>
    b620:	ldr	r2, [r6, #16]
    b622:	str.w	r2, [sl, #24]
    b626:	ldr	r2, [r6, #20]
    b628:	str.w	r2, [sl, #28]
    b62c:	adds	r6, #24
    b62e:	add.w	r2, sl, #32
    b632:	b.n	b3a0 <_realloc_r+0x110>
    b634:	mov	r1, r6
    b636:	mov	r0, r7
    b638:	str	r3, [sp, #4]
    b63a:	bl	b124 <memmove>
    b63e:	ldr	r3, [sp, #4]
    b640:	b.n	b4f6 <_realloc_r+0x266>
    b642:	ldr	r1, [r6, #8]
    b644:	str.w	r1, [sl, #16]
    b648:	ldr	r1, [r6, #12]
    b64a:	str.w	r1, [sl, #20]
    b64e:	cmp	r2, #36	; 0x24
    b650:	beq.n	b65a <_realloc_r+0x3ca>
    b652:	adds	r6, #16
    b654:	add.w	r2, sl, #24
    b658:	b.n	b4ea <_realloc_r+0x25a>
    b65a:	ldr	r2, [r6, #16]
    b65c:	str.w	r2, [sl, #24]
    b660:	ldr	r2, [r6, #20]
    b662:	str.w	r2, [sl, #28]
    b666:	adds	r6, #24
    b668:	add.w	r2, sl, #32
    b66c:	b.n	b4ea <_realloc_r+0x25a>
    b66e:	nop

0000b670 <_sbrk_r>:
    b670:	push	{r3, r4, r5, lr}
    b672:	ldr	r4, [pc, #28]	; (b690 <_sbrk_r+0x20>)
    b674:	movs	r3, #0
    b676:	mov	r5, r0
    b678:	mov	r0, r1
    b67a:	str	r3, [r4, #0]
    b67c:	bl	81a4 <_sbrk>
    b680:	adds	r3, r0, #1
    b682:	beq.n	b686 <_sbrk_r+0x16>
    b684:	pop	{r3, r4, r5, pc}
    b686:	ldr	r3, [r4, #0]
    b688:	cmp	r3, #0
    b68a:	beq.n	b684 <_sbrk_r+0x14>
    b68c:	str	r3, [r5, #0]
    b68e:	pop	{r3, r4, r5, pc}
    b690:	.word	0x20006304

0000b694 <strcat>:
    b694:	lsls	r3, r0, #30
    b696:	push	{r4, lr}
    b698:	mov	r4, r0
    b69a:	bne.n	b6be <strcat+0x2a>
    b69c:	ldr	r2, [r0, #0]
    b69e:	sub.w	r3, r2, #16843009	; 0x1010101
    b6a2:	bic.w	r3, r3, r2
    b6a6:	tst.w	r3, #2155905152	; 0x80808080
    b6aa:	bne.n	b6be <strcat+0x2a>
    b6ac:	ldr.w	r2, [r0, #4]!
    b6b0:	sub.w	r3, r2, #16843009	; 0x1010101
    b6b4:	bic.w	r3, r3, r2
    b6b8:	tst.w	r3, #2155905152	; 0x80808080
    b6bc:	beq.n	b6ac <strcat+0x18>
    b6be:	ldrb	r3, [r0, #0]
    b6c0:	cbz	r3, b6ca <strcat+0x36>
    b6c2:	ldrb.w	r3, [r0, #1]!
    b6c6:	cmp	r3, #0
    b6c8:	bne.n	b6c2 <strcat+0x2e>
    b6ca:	bl	b6d4 <strcpy>
    b6ce:	mov	r0, r4
    b6d0:	pop	{r4, pc}
    b6d2:	nop

0000b6d4 <strcpy>:
    b6d4:	eor.w	r2, r0, r1
    b6d8:	mov	ip, r0
    b6da:	tst.w	r2, #3
    b6de:	bne.n	b780 <strcpy+0xac>
    b6e0:	tst.w	r1, #3
    b6e4:	bne.n	b74c <strcpy+0x78>
    b6e6:	str.w	r4, [sp, #-4]!
    b6ea:	tst.w	r1, #4
    b6ee:	ldr.w	r3, [r1], #4
    b6f2:	beq.n	b70c <strcpy+0x38>
    b6f4:	sub.w	r2, r3, #16843009	; 0x1010101
    b6f8:	bics	r2, r3
    b6fa:	tst.w	r2, #2155905152	; 0x80808080
    b6fe:	itt	eq
    b700:	streq.w	r3, [ip], #4
    b704:	ldreq.w	r3, [r1], #4
    b708:	bne.n	b738 <strcpy+0x64>
    b70a:	nop
    b70c:	ldr.w	r4, [r1], #4
    b710:	sub.w	r2, r3, #16843009	; 0x1010101
    b714:	bics	r2, r3
    b716:	tst.w	r2, #2155905152	; 0x80808080
    b71a:	sub.w	r2, r4, #16843009	; 0x1010101
    b71e:	bne.n	b738 <strcpy+0x64>
    b720:	str.w	r3, [ip], #4
    b724:	bics	r2, r4
    b726:	tst.w	r2, #2155905152	; 0x80808080
    b72a:	itt	eq
    b72c:	ldreq.w	r3, [r1], #4
    b730:	streq.w	r4, [ip], #4
    b734:	beq.n	b70c <strcpy+0x38>
    b736:	mov	r3, r4
    b738:	strb.w	r3, [ip], #1
    b73c:	tst.w	r3, #255	; 0xff
    b740:	mov.w	r3, r3, ror #8
    b744:	bne.n	b738 <strcpy+0x64>
    b746:	ldr.w	r4, [sp], #4
    b74a:	bx	lr
    b74c:	tst.w	r1, #1
    b750:	beq.n	b760 <strcpy+0x8c>
    b752:	ldrb.w	r2, [r1], #1
    b756:	strb.w	r2, [ip], #1
    b75a:	cmp	r2, #0
    b75c:	it	eq
    b75e:	bxeq	lr
    b760:	tst.w	r1, #2
    b764:	beq.n	b6e6 <strcpy+0x12>
    b766:	ldrh.w	r2, [r1], #2
    b76a:	tst.w	r2, #255	; 0xff
    b76e:	itet	ne
    b770:	strhne.w	r2, [ip], #2
    b774:	strbeq.w	r2, [ip]
    b778:	tstne.w	r2, #65280	; 0xff00
    b77c:	bne.n	b6e6 <strcpy+0x12>
    b77e:	bx	lr
    b780:	ldrb.w	r2, [r1], #1
    b784:	strb.w	r2, [ip], #1
    b788:	cmp	r2, #0
    b78a:	bne.n	b780 <strcpy+0xac>
    b78c:	bx	lr
    b78e:	nop
	...

0000b7c0 <strlen>:
    b7c0:	pld	[r0]
    b7c4:	strd	r4, r5, [sp, #-8]!
    b7c8:	bic.w	r1, r0, #7
    b7cc:	mvn.w	ip, #0
    b7d0:	ands.w	r4, r0, #7
    b7d4:	pld	[r1, #32]
    b7d8:	bne.w	b86e <strlen+0xae>
    b7dc:	mov.w	r4, #0
    b7e0:	mvn.w	r0, #7
    b7e4:	ldrd	r2, r3, [r1]
    b7e8:	pld	[r1, #64]	; 0x40
    b7ec:	add.w	r0, r0, #8
    b7f0:	uadd8	r2, r2, ip
    b7f4:	sel	r2, r4, ip
    b7f8:	uadd8	r3, r3, ip
    b7fc:	sel	r3, r2, ip
    b800:	cbnz	r3, b856 <strlen+0x96>
    b802:	ldrd	r2, r3, [r1, #8]
    b806:	uadd8	r2, r2, ip
    b80a:	add.w	r0, r0, #8
    b80e:	sel	r2, r4, ip
    b812:	uadd8	r3, r3, ip
    b816:	sel	r3, r2, ip
    b81a:	cbnz	r3, b856 <strlen+0x96>
    b81c:	ldrd	r2, r3, [r1, #16]
    b820:	uadd8	r2, r2, ip
    b824:	add.w	r0, r0, #8
    b828:	sel	r2, r4, ip
    b82c:	uadd8	r3, r3, ip
    b830:	sel	r3, r2, ip
    b834:	cbnz	r3, b856 <strlen+0x96>
    b836:	ldrd	r2, r3, [r1, #24]
    b83a:	add.w	r1, r1, #32
    b83e:	uadd8	r2, r2, ip
    b842:	add.w	r0, r0, #8
    b846:	sel	r2, r4, ip
    b84a:	uadd8	r3, r3, ip
    b84e:	sel	r3, r2, ip
    b852:	cmp	r3, #0
    b854:	beq.n	b7e4 <strlen+0x24>
    b856:	cmp	r2, #0
    b858:	itt	eq
    b85a:	addeq	r0, #4
    b85c:	moveq	r2, r3
    b85e:	rev	r2, r2
    b860:	clz	r2, r2
    b864:	ldrd	r4, r5, [sp], #8
    b868:	add.w	r0, r0, r2, lsr #3
    b86c:	bx	lr
    b86e:	ldrd	r2, r3, [r1]
    b872:	and.w	r5, r4, #3
    b876:	rsb	r0, r4, #0
    b87a:	mov.w	r5, r5, lsl #3
    b87e:	tst.w	r4, #4
    b882:	pld	[r1, #64]	; 0x40
    b886:	lsl.w	r5, ip, r5
    b88a:	orn	r2, r2, r5
    b88e:	itt	ne
    b890:	ornne	r3, r3, r5
    b894:	movne	r2, ip
    b896:	mov.w	r4, #0
    b89a:	b.n	b7f0 <strlen+0x30>

0000b89c <strncmp>:
    b89c:	cmp	r2, #0
    b89e:	beq.n	b924 <strncmp+0x88>
    b8a0:	orr.w	r3, r0, r1
    b8a4:	ands.w	r3, r3, #3
    b8a8:	push	{r4, r5, r6, r7}
    b8aa:	bne.n	b8f8 <strncmp+0x5c>
    b8ac:	cmp	r2, #3
    b8ae:	bls.n	b8f8 <strncmp+0x5c>
    b8b0:	ldr	r4, [r0, #0]
    b8b2:	ldr	r5, [r1, #0]
    b8b4:	cmp	r4, r5
    b8b6:	bne.n	b8f8 <strncmp+0x5c>
    b8b8:	subs	r2, #4
    b8ba:	beq.n	b928 <strncmp+0x8c>
    b8bc:	sub.w	r5, r4, #16843009	; 0x1010101
    b8c0:	bic.w	r4, r5, r4
    b8c4:	tst.w	r4, #2155905152	; 0x80808080
    b8c8:	bne.n	b92e <strncmp+0x92>
    b8ca:	adds	r7, r0, #4
    b8cc:	adds	r5, r1, #4
    b8ce:	b.n	b8ec <strncmp+0x50>
    b8d0:	ldr.w	r3, [r7], #4
    b8d4:	ldr	r6, [r1, #0]
    b8d6:	sub.w	r4, r3, #16843009	; 0x1010101
    b8da:	cmp	r3, r6
    b8dc:	bic.w	r4, r4, r3
    b8e0:	bne.n	b8f8 <strncmp+0x5c>
    b8e2:	subs	r2, #4
    b8e4:	beq.n	b928 <strncmp+0x8c>
    b8e6:	tst.w	r4, #2155905152	; 0x80808080
    b8ea:	bne.n	b934 <strncmp+0x98>
    b8ec:	cmp	r2, #3
    b8ee:	mov	r1, r5
    b8f0:	mov	r0, r7
    b8f2:	add.w	r5, r5, #4
    b8f6:	bhi.n	b8d0 <strncmp+0x34>
    b8f8:	ldrb	r3, [r0, #0]
    b8fa:	ldrb	r4, [r1, #0]
    b8fc:	cmp	r4, r3
    b8fe:	add.w	r2, r2, #4294967295
    b902:	bne.n	b91e <strncmp+0x82>
    b904:	cbz	r2, b928 <strncmp+0x8c>
    b906:	cbnz	r4, b90e <strncmp+0x72>
    b908:	b.n	b938 <strncmp+0x9c>
    b90a:	cbz	r2, b928 <strncmp+0x8c>
    b90c:	cbz	r3, b92e <strncmp+0x92>
    b90e:	ldrb.w	r3, [r0, #1]!
    b912:	ldrb.w	r4, [r1, #1]!
    b916:	cmp	r3, r4
    b918:	add.w	r2, r2, #4294967295
    b91c:	beq.n	b90a <strncmp+0x6e>
    b91e:	subs	r0, r3, r4
    b920:	pop	{r4, r5, r6, r7}
    b922:	bx	lr
    b924:	mov	r0, r2
    b926:	bx	lr
    b928:	mov	r0, r2
    b92a:	pop	{r4, r5, r6, r7}
    b92c:	bx	lr
    b92e:	mov	r0, r3
    b930:	pop	{r4, r5, r6, r7}
    b932:	bx	lr
    b934:	movs	r0, #0
    b936:	b.n	b920 <strncmp+0x84>
    b938:	mov	r0, r4
    b93a:	b.n	b920 <strncmp+0x84>

0000b93c <_vdprintf_r>:
    b93c:	push	{r4, r5, r6, r7, lr}
    b93e:	sub.w	sp, sp, #532	; 0x214
    b942:	add	r5, sp, #16
    b944:	str	r3, [sp, #0]
    b946:	mov	r7, r1
    b948:	mov	r3, r2
    b94a:	mov.w	r4, #512	; 0x200
    b94e:	add	r2, sp, #12
    b950:	mov	r1, r5
    b952:	str	r4, [sp, #12]
    b954:	mov	r6, r0
    b956:	bl	c338 <_vasnprintf_r>
    b95a:	cbz	r0, b980 <_vdprintf_r+0x44>
    b95c:	mov	r4, r0
    b95e:	mov	r2, r0
    b960:	mov	r1, r7
    b962:	ldr	r3, [sp, #12]
    b964:	mov	r0, r6
    b966:	bl	b9bc <_write_r>
    b96a:	cmp	r4, r5
    b96c:	str	r0, [sp, #12]
    b96e:	beq.n	b97a <_vdprintf_r+0x3e>
    b970:	mov	r0, r6
    b972:	mov	r1, r4
    b974:	bl	bb28 <_free_r>
    b978:	ldr	r0, [sp, #12]
    b97a:	add.w	sp, sp, #532	; 0x214
    b97e:	pop	{r4, r5, r6, r7, pc}
    b980:	mov.w	r0, #4294967295
    b984:	b.n	b97a <_vdprintf_r+0x3e>
    b986:	nop

0000b988 <vdprintf>:
    b988:	push	{r4}
    b98a:	ldr	r4, [pc, #16]	; (b99c <vdprintf+0x14>)
    b98c:	mov	r3, r2
    b98e:	mov	r2, r1
    b990:	mov	r1, r0
    b992:	ldr	r0, [r4, #0]
    b994:	ldr.w	r4, [sp], #4
    b998:	b.w	b93c <_vdprintf_r>
    b99c:	.word	0x20000d38

0000b9a0 <__ascii_wctomb>:
    b9a0:	cbz	r1, b9ac <__ascii_wctomb+0xc>
    b9a2:	cmp	r2, #255	; 0xff
    b9a4:	bhi.n	b9b0 <__ascii_wctomb+0x10>
    b9a6:	strb	r2, [r1, #0]
    b9a8:	movs	r0, #1
    b9aa:	bx	lr
    b9ac:	mov	r0, r1
    b9ae:	bx	lr
    b9b0:	movs	r3, #138	; 0x8a
    b9b2:	str	r3, [r0, #0]
    b9b4:	mov.w	r0, #4294967295
    b9b8:	bx	lr
    b9ba:	nop

0000b9bc <_write_r>:
    b9bc:	push	{r4, r5, r6, lr}
    b9be:	mov	r5, r1
    b9c0:	ldr	r4, [pc, #32]	; (b9e4 <_write_r+0x28>)
    b9c2:	mov	r1, r2
    b9c4:	mov	r6, r0
    b9c6:	mov	r2, r3
    b9c8:	mov	r0, r5
    b9ca:	movs	r3, #0
    b9cc:	str	r3, [r4, #0]
    b9ce:	bl	9d50 <_write>
    b9d2:	adds	r3, r0, #1
    b9d4:	beq.n	b9d8 <_write_r+0x1c>
    b9d6:	pop	{r4, r5, r6, pc}
    b9d8:	ldr	r3, [r4, #0]
    b9da:	cmp	r3, #0
    b9dc:	beq.n	b9d6 <_write_r+0x1a>
    b9de:	str	r3, [r6, #0]
    b9e0:	pop	{r4, r5, r6, pc}
    b9e2:	nop
    b9e4:	.word	0x20006304

0000b9e8 <__register_exitproc>:
    b9e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b9ec:	ldr	r4, [pc, #148]	; (ba84 <__register_exitproc+0x9c>)
    b9ee:	ldr	r5, [r4, #0]
    b9f0:	ldr.w	r4, [r5, #328]	; 0x148
    b9f4:	mov	r6, r0
    b9f6:	mov	r8, r1
    b9f8:	mov	sl, r2
    b9fa:	mov	r9, r3
    b9fc:	cbz	r4, ba70 <__register_exitproc+0x88>
    b9fe:	ldr	r0, [r4, #4]
    ba00:	cmp	r0, #31
    ba02:	bgt.n	ba34 <__register_exitproc+0x4c>
    ba04:	adds	r3, r0, #1
    ba06:	cbz	r6, ba26 <__register_exitproc+0x3e>
    ba08:	add.w	r5, r4, r0, lsl #2
    ba0c:	movs	r2, #1
    ba0e:	str.w	sl, [r5, #136]	; 0x88
    ba12:	ldr.w	r1, [r4, #392]	; 0x188
    ba16:	lsls	r2, r0
    ba18:	orrs	r1, r2
    ba1a:	cmp	r6, #2
    ba1c:	str.w	r1, [r4, #392]	; 0x188
    ba20:	str.w	r9, [r5, #264]	; 0x108
    ba24:	beq.n	ba64 <__register_exitproc+0x7c>
    ba26:	adds	r0, #2
    ba28:	str	r3, [r4, #4]
    ba2a:	str.w	r8, [r4, r0, lsl #2]
    ba2e:	movs	r0, #0
    ba30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba34:	ldr	r3, [pc, #80]	; (ba88 <__register_exitproc+0xa0>)
    ba36:	cbz	r3, ba7a <__register_exitproc+0x92>
    ba38:	mov.w	r0, #400	; 0x190
    ba3c:	bl	aa5c <malloc>
    ba40:	mov	r4, r0
    ba42:	cbz	r0, ba7a <__register_exitproc+0x92>
    ba44:	ldr.w	r3, [r5, #328]	; 0x148
    ba48:	movs	r7, #0
    ba4a:	stmia.w	r0, {r3, r7}
    ba4e:	str.w	r4, [r5, #328]	; 0x148
    ba52:	mov	r0, r7
    ba54:	movs	r3, #1
    ba56:	str.w	r7, [r4, #392]	; 0x188
    ba5a:	str.w	r7, [r4, #396]	; 0x18c
    ba5e:	cmp	r6, #0
    ba60:	beq.n	ba26 <__register_exitproc+0x3e>
    ba62:	b.n	ba08 <__register_exitproc+0x20>
    ba64:	ldr.w	r1, [r4, #396]	; 0x18c
    ba68:	orrs	r2, r1
    ba6a:	str.w	r2, [r4, #396]	; 0x18c
    ba6e:	b.n	ba26 <__register_exitproc+0x3e>
    ba70:	add.w	r4, r5, #332	; 0x14c
    ba74:	str.w	r4, [r5, #328]	; 0x148
    ba78:	b.n	b9fe <__register_exitproc+0x16>
    ba7a:	mov.w	r0, #4294967295
    ba7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba82:	nop
    ba84:	.word	0x2000062c
    ba88:	.word	0x0000aa5d

0000ba8c <_malloc_trim_r>:
    ba8c:	push	{r3, r4, r5, r6, r7, lr}
    ba8e:	ldr	r7, [pc, #140]	; (bb1c <_malloc_trim_r+0x90>)
    ba90:	mov	r4, r1
    ba92:	mov	r6, r0
    ba94:	bl	b288 <__malloc_lock>
    ba98:	ldr	r3, [r7, #8]
    ba9a:	ldr	r5, [r3, #4]
    ba9c:	bic.w	r5, r5, #3
    baa0:	subs	r1, r5, r4
    baa2:	addw	r1, r1, #4079	; 0xfef
    baa6:	bic.w	r1, r1, #4080	; 0xff0
    baaa:	bic.w	r1, r1, #15
    baae:	sub.w	r4, r1, #4096	; 0x1000
    bab2:	cmp.w	r4, #4096	; 0x1000
    bab6:	blt.n	bac8 <_malloc_trim_r+0x3c>
    bab8:	movs	r1, #0
    baba:	mov	r0, r6
    babc:	bl	b670 <_sbrk_r>
    bac0:	ldr	r3, [r7, #8]
    bac2:	add	r3, r5
    bac4:	cmp	r0, r3
    bac6:	beq.n	bad2 <_malloc_trim_r+0x46>
    bac8:	mov	r0, r6
    baca:	bl	b28c <__malloc_unlock>
    bace:	movs	r0, #0
    bad0:	pop	{r3, r4, r5, r6, r7, pc}
    bad2:	negs	r1, r4
    bad4:	mov	r0, r6
    bad6:	bl	b670 <_sbrk_r>
    bada:	adds	r0, #1
    badc:	beq.n	bafa <_malloc_trim_r+0x6e>
    bade:	ldr	r3, [pc, #64]	; (bb20 <_malloc_trim_r+0x94>)
    bae0:	ldr	r2, [r7, #8]
    bae2:	ldr	r1, [r3, #0]
    bae4:	subs	r5, r5, r4
    bae6:	orr.w	r5, r5, #1
    baea:	mov	r0, r6
    baec:	subs	r1, r1, r4
    baee:	str	r5, [r2, #4]
    baf0:	str	r1, [r3, #0]
    baf2:	bl	b28c <__malloc_unlock>
    baf6:	movs	r0, #1
    baf8:	pop	{r3, r4, r5, r6, r7, pc}
    bafa:	movs	r1, #0
    bafc:	mov	r0, r6
    bafe:	bl	b670 <_sbrk_r>
    bb02:	ldr	r2, [r7, #8]
    bb04:	subs	r3, r0, r2
    bb06:	cmp	r3, #15
    bb08:	ble.n	bac8 <_malloc_trim_r+0x3c>
    bb0a:	ldr	r4, [pc, #24]	; (bb24 <_malloc_trim_r+0x98>)
    bb0c:	ldr	r1, [pc, #16]	; (bb20 <_malloc_trim_r+0x94>)
    bb0e:	ldr	r4, [r4, #0]
    bb10:	orr.w	r3, r3, #1
    bb14:	subs	r0, r0, r4
    bb16:	str	r3, [r2, #4]
    bb18:	str	r0, [r1, #0]
    bb1a:	b.n	bac8 <_malloc_trim_r+0x3c>
    bb1c:	.word	0x20000ea8
    bb20:	.word	0x20004a8c
    bb24:	.word	0x200012b4

0000bb28 <_free_r>:
    bb28:	cmp	r1, #0
    bb2a:	beq.n	bbb8 <_free_r+0x90>
    bb2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb30:	mov	r5, r1
    bb32:	mov	r8, r0
    bb34:	bl	b288 <__malloc_lock>
    bb38:	ldr.w	r7, [r5, #-4]
    bb3c:	ldr	r1, [pc, #424]	; (bce8 <_free_r+0x1c0>)
    bb3e:	bic.w	r3, r7, #1
    bb42:	sub.w	r4, r5, #8
    bb46:	adds	r2, r4, r3
    bb48:	ldr	r6, [r1, #8]
    bb4a:	ldr	r0, [r2, #4]
    bb4c:	cmp	r2, r6
    bb4e:	bic.w	r0, r0, #3
    bb52:	beq.n	bc1a <_free_r+0xf2>
    bb54:	lsls	r6, r7, #31
    bb56:	str	r0, [r2, #4]
    bb58:	bmi.n	bb72 <_free_r+0x4a>
    bb5a:	ldr.w	r7, [r5, #-8]
    bb5e:	subs	r4, r4, r7
    bb60:	add.w	lr, r1, #8
    bb64:	ldr	r5, [r4, #8]
    bb66:	cmp	r5, lr
    bb68:	add	r3, r7
    bb6a:	beq.n	bc4c <_free_r+0x124>
    bb6c:	ldr	r7, [r4, #12]
    bb6e:	str	r7, [r5, #12]
    bb70:	str	r5, [r7, #8]
    bb72:	adds	r5, r2, r0
    bb74:	ldr	r5, [r5, #4]
    bb76:	lsls	r5, r5, #31
    bb78:	bpl.n	bc00 <_free_r+0xd8>
    bb7a:	orr.w	r2, r3, #1
    bb7e:	str	r2, [r4, #4]
    bb80:	str	r3, [r4, r3]
    bb82:	cmp.w	r3, #512	; 0x200
    bb86:	bcs.n	bbba <_free_r+0x92>
    bb88:	lsrs	r3, r3, #3
    bb8a:	adds	r2, r3, #1
    bb8c:	ldr	r5, [r1, #4]
    bb8e:	ldr.w	r7, [r1, r2, lsl #3]
    bb92:	str	r7, [r4, #8]
    bb94:	movs	r0, #1
    bb96:	asrs	r3, r3, #2
    bb98:	lsl.w	r3, r0, r3
    bb9c:	add.w	r0, r1, r2, lsl #3
    bba0:	orrs	r5, r3
    bba2:	subs	r0, #8
    bba4:	str	r0, [r4, #12]
    bba6:	str	r5, [r1, #4]
    bba8:	str.w	r4, [r1, r2, lsl #3]
    bbac:	str	r4, [r7, #12]
    bbae:	mov	r0, r8
    bbb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbb4:	b.w	b28c <__malloc_unlock>
    bbb8:	bx	lr
    bbba:	lsrs	r2, r3, #9
    bbbc:	cmp	r2, #4
    bbbe:	bhi.n	bc68 <_free_r+0x140>
    bbc0:	lsrs	r2, r3, #6
    bbc2:	add.w	r7, r2, #57	; 0x39
    bbc6:	lsls	r7, r7, #1
    bbc8:	add.w	r5, r2, #56	; 0x38
    bbcc:	add.w	r0, r1, r7, lsl #2
    bbd0:	ldr.w	r2, [r1, r7, lsl #2]
    bbd4:	ldr	r1, [pc, #272]	; (bce8 <_free_r+0x1c0>)
    bbd6:	subs	r0, #8
    bbd8:	cmp	r0, r2
    bbda:	beq.n	bc78 <_free_r+0x150>
    bbdc:	ldr	r1, [r2, #4]
    bbde:	bic.w	r1, r1, #3
    bbe2:	cmp	r3, r1
    bbe4:	bcs.n	bbec <_free_r+0xc4>
    bbe6:	ldr	r2, [r2, #8]
    bbe8:	cmp	r0, r2
    bbea:	bne.n	bbdc <_free_r+0xb4>
    bbec:	ldr	r0, [r2, #12]
    bbee:	str	r0, [r4, #12]
    bbf0:	str	r2, [r4, #8]
    bbf2:	str	r4, [r0, #8]
    bbf4:	str	r4, [r2, #12]
    bbf6:	mov	r0, r8
    bbf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bbfc:	b.w	b28c <__malloc_unlock>
    bc00:	ldr	r5, [r2, #8]
    bc02:	ldr	r7, [pc, #232]	; (bcec <_free_r+0x1c4>)
    bc04:	cmp	r5, r7
    bc06:	add	r3, r0
    bc08:	beq.n	bc8a <_free_r+0x162>
    bc0a:	ldr	r0, [r2, #12]
    bc0c:	str	r0, [r5, #12]
    bc0e:	orr.w	r2, r3, #1
    bc12:	str	r5, [r0, #8]
    bc14:	str	r2, [r4, #4]
    bc16:	str	r3, [r4, r3]
    bc18:	b.n	bb82 <_free_r+0x5a>
    bc1a:	lsls	r7, r7, #31
    bc1c:	add	r3, r0
    bc1e:	bmi.n	bc30 <_free_r+0x108>
    bc20:	ldr.w	r2, [r5, #-8]
    bc24:	subs	r4, r4, r2
    bc26:	add	r3, r2
    bc28:	ldr	r0, [r4, #8]
    bc2a:	ldr	r2, [r4, #12]
    bc2c:	str	r2, [r0, #12]
    bc2e:	str	r0, [r2, #8]
    bc30:	ldr	r2, [pc, #188]	; (bcf0 <_free_r+0x1c8>)
    bc32:	ldr	r2, [r2, #0]
    bc34:	orr.w	r0, r3, #1
    bc38:	cmp	r3, r2
    bc3a:	str	r0, [r4, #4]
    bc3c:	str	r4, [r1, #8]
    bc3e:	bcc.n	bbae <_free_r+0x86>
    bc40:	ldr	r3, [pc, #176]	; (bcf4 <_free_r+0x1cc>)
    bc42:	mov	r0, r8
    bc44:	ldr	r1, [r3, #0]
    bc46:	bl	ba8c <_malloc_trim_r>
    bc4a:	b.n	bbae <_free_r+0x86>
    bc4c:	adds	r1, r2, r0
    bc4e:	ldr	r1, [r1, #4]
    bc50:	lsls	r1, r1, #31
    bc52:	bmi.n	bcde <_free_r+0x1b6>
    bc54:	ldr	r1, [r2, #8]
    bc56:	ldr	r2, [r2, #12]
    bc58:	str	r2, [r1, #12]
    bc5a:	add	r3, r0
    bc5c:	orr.w	r0, r3, #1
    bc60:	str	r1, [r2, #8]
    bc62:	str	r0, [r4, #4]
    bc64:	str	r3, [r4, r3]
    bc66:	b.n	bbae <_free_r+0x86>
    bc68:	cmp	r2, #20
    bc6a:	bhi.n	bc9c <_free_r+0x174>
    bc6c:	add.w	r7, r2, #92	; 0x5c
    bc70:	lsls	r7, r7, #1
    bc72:	add.w	r5, r2, #91	; 0x5b
    bc76:	b.n	bbcc <_free_r+0xa4>
    bc78:	asrs	r2, r5, #2
    bc7a:	ldr	r3, [r1, #4]
    bc7c:	movs	r5, #1
    bc7e:	lsl.w	r2, r5, r2
    bc82:	orrs	r3, r2
    bc84:	str	r3, [r1, #4]
    bc86:	mov	r2, r0
    bc88:	b.n	bbee <_free_r+0xc6>
    bc8a:	orr.w	r2, r3, #1
    bc8e:	str	r4, [r1, #20]
    bc90:	str	r4, [r1, #16]
    bc92:	str	r5, [r4, #12]
    bc94:	str	r5, [r4, #8]
    bc96:	str	r2, [r4, #4]
    bc98:	str	r3, [r4, r3]
    bc9a:	b.n	bbae <_free_r+0x86>
    bc9c:	cmp	r2, #84	; 0x54
    bc9e:	bhi.n	bcae <_free_r+0x186>
    bca0:	lsrs	r2, r3, #12
    bca2:	add.w	r7, r2, #111	; 0x6f
    bca6:	lsls	r7, r7, #1
    bca8:	add.w	r5, r2, #110	; 0x6e
    bcac:	b.n	bbcc <_free_r+0xa4>
    bcae:	cmp.w	r2, #340	; 0x154
    bcb2:	bhi.n	bcc2 <_free_r+0x19a>
    bcb4:	lsrs	r2, r3, #15
    bcb6:	add.w	r7, r2, #120	; 0x78
    bcba:	lsls	r7, r7, #1
    bcbc:	add.w	r5, r2, #119	; 0x77
    bcc0:	b.n	bbcc <_free_r+0xa4>
    bcc2:	movw	r0, #1364	; 0x554
    bcc6:	cmp	r2, r0
    bcc8:	bhi.n	bcd8 <_free_r+0x1b0>
    bcca:	lsrs	r2, r3, #18
    bccc:	add.w	r7, r2, #125	; 0x7d
    bcd0:	lsls	r7, r7, #1
    bcd2:	add.w	r5, r2, #124	; 0x7c
    bcd6:	b.n	bbcc <_free_r+0xa4>
    bcd8:	movs	r7, #254	; 0xfe
    bcda:	movs	r5, #126	; 0x7e
    bcdc:	b.n	bbcc <_free_r+0xa4>
    bcde:	orr.w	r2, r3, #1
    bce2:	str	r2, [r4, #4]
    bce4:	str	r3, [r4, r3]
    bce6:	b.n	bbae <_free_r+0x86>
    bce8:	.word	0x20000ea8
    bcec:	.word	0x20000eb0
    bcf0:	.word	0x200012b0
    bcf4:	.word	0x20004a88

0000bcf8 <_localeconv_r>:
    bcf8:	ldr	r2, [pc, #16]	; (bd0c <_localeconv_r+0x14>)
    bcfa:	ldr	r3, [pc, #20]	; (bd10 <_localeconv_r+0x18>)
    bcfc:	ldr	r2, [r2, #0]
    bcfe:	ldr	r0, [r2, #52]	; 0x34
    bd00:	cmp	r0, #0
    bd02:	it	eq
    bd04:	moveq	r0, r3
    bd06:	adds	r0, #240	; 0xf0
    bd08:	bx	lr
    bd0a:	nop
    bd0c:	.word	0x20000d38
    bd10:	.word	0x20000d3c

0000bd14 <_Balloc>:
    bd14:	ldr	r3, [r0, #76]	; 0x4c
    bd16:	push	{r4, r5, r6, lr}
    bd18:	mov	r5, r0
    bd1a:	mov	r4, r1
    bd1c:	cbz	r3, bd32 <_Balloc+0x1e>
    bd1e:	ldr.w	r0, [r3, r4, lsl #2]
    bd22:	cbz	r0, bd46 <_Balloc+0x32>
    bd24:	ldr	r2, [r0, #0]
    bd26:	str.w	r2, [r3, r4, lsl #2]
    bd2a:	movs	r3, #0
    bd2c:	str	r3, [r0, #16]
    bd2e:	str	r3, [r0, #12]
    bd30:	pop	{r4, r5, r6, pc}
    bd32:	movs	r2, #33	; 0x21
    bd34:	movs	r1, #4
    bd36:	bl	c398 <_calloc_r>
    bd3a:	str	r0, [r5, #76]	; 0x4c
    bd3c:	mov	r3, r0
    bd3e:	cmp	r0, #0
    bd40:	bne.n	bd1e <_Balloc+0xa>
    bd42:	movs	r0, #0
    bd44:	pop	{r4, r5, r6, pc}
    bd46:	movs	r1, #1
    bd48:	lsl.w	r6, r1, r4
    bd4c:	adds	r2, r6, #5
    bd4e:	mov	r0, r5
    bd50:	lsls	r2, r2, #2
    bd52:	bl	c398 <_calloc_r>
    bd56:	cmp	r0, #0
    bd58:	beq.n	bd42 <_Balloc+0x2e>
    bd5a:	str	r4, [r0, #4]
    bd5c:	str	r6, [r0, #8]
    bd5e:	b.n	bd2a <_Balloc+0x16>

0000bd60 <_Bfree>:
    bd60:	cbz	r1, bd70 <_Bfree+0x10>
    bd62:	ldr	r3, [r0, #76]	; 0x4c
    bd64:	ldr	r2, [r1, #4]
    bd66:	ldr.w	r0, [r3, r2, lsl #2]
    bd6a:	str	r0, [r1, #0]
    bd6c:	str.w	r1, [r3, r2, lsl #2]
    bd70:	bx	lr
    bd72:	nop

0000bd74 <__multadd>:
    bd74:	push	{r4, r5, r6, r7, lr}
    bd76:	ldr	r4, [r1, #16]
    bd78:	sub	sp, #12
    bd7a:	mov	r5, r1
    bd7c:	mov	r6, r0
    bd7e:	add.w	lr, r1, #20
    bd82:	movs	r7, #0
    bd84:	ldr.w	r0, [lr]
    bd88:	uxth	r1, r0
    bd8a:	mla	r1, r2, r1, r3
    bd8e:	lsrs	r3, r1, #16
    bd90:	lsrs	r0, r0, #16
    bd92:	mla	r3, r2, r0, r3
    bd96:	uxth	r1, r1
    bd98:	adds	r7, #1
    bd9a:	add.w	r1, r1, r3, lsl #16
    bd9e:	cmp	r4, r7
    bda0:	str.w	r1, [lr], #4
    bda4:	mov.w	r3, r3, lsr #16
    bda8:	bgt.n	bd84 <__multadd+0x10>
    bdaa:	cbz	r3, bdbc <__multadd+0x48>
    bdac:	ldr	r2, [r5, #8]
    bdae:	cmp	r4, r2
    bdb0:	bge.n	bdc2 <__multadd+0x4e>
    bdb2:	add.w	r2, r5, r4, lsl #2
    bdb6:	adds	r4, #1
    bdb8:	str	r3, [r2, #20]
    bdba:	str	r4, [r5, #16]
    bdbc:	mov	r0, r5
    bdbe:	add	sp, #12
    bdc0:	pop	{r4, r5, r6, r7, pc}
    bdc2:	ldr	r1, [r5, #4]
    bdc4:	str	r3, [sp, #4]
    bdc6:	adds	r1, #1
    bdc8:	mov	r0, r6
    bdca:	bl	bd14 <_Balloc>
    bdce:	ldr	r2, [r5, #16]
    bdd0:	adds	r2, #2
    bdd2:	add.w	r1, r5, #12
    bdd6:	mov	r7, r0
    bdd8:	lsls	r2, r2, #2
    bdda:	adds	r0, #12
    bddc:	bl	7fc4 <memcpy>
    bde0:	ldr	r2, [r6, #76]	; 0x4c
    bde2:	ldr	r1, [r5, #4]
    bde4:	ldr	r3, [sp, #4]
    bde6:	ldr.w	r0, [r2, r1, lsl #2]
    bdea:	str	r0, [r5, #0]
    bdec:	str.w	r5, [r2, r1, lsl #2]
    bdf0:	mov	r5, r7
    bdf2:	b.n	bdb2 <__multadd+0x3e>

0000bdf4 <__hi0bits>:
    bdf4:	lsrs	r3, r0, #16
    bdf6:	lsls	r3, r3, #16
    bdf8:	cbnz	r3, be28 <__hi0bits+0x34>
    bdfa:	lsls	r0, r0, #16
    bdfc:	movs	r3, #16
    bdfe:	tst.w	r0, #4278190080	; 0xff000000
    be02:	itt	eq
    be04:	lsleq	r0, r0, #8
    be06:	addeq	r3, #8
    be08:	tst.w	r0, #4026531840	; 0xf0000000
    be0c:	itt	eq
    be0e:	lsleq	r0, r0, #4
    be10:	addeq	r3, #4
    be12:	tst.w	r0, #3221225472	; 0xc0000000
    be16:	itt	eq
    be18:	lsleq	r0, r0, #2
    be1a:	addeq	r3, #2
    be1c:	cmp	r0, #0
    be1e:	blt.n	be30 <__hi0bits+0x3c>
    be20:	lsls	r2, r0, #1
    be22:	bmi.n	be2c <__hi0bits+0x38>
    be24:	movs	r0, #32
    be26:	bx	lr
    be28:	movs	r3, #0
    be2a:	b.n	bdfe <__hi0bits+0xa>
    be2c:	adds	r0, r3, #1
    be2e:	bx	lr
    be30:	mov	r0, r3
    be32:	bx	lr

0000be34 <__lo0bits>:
    be34:	ldr	r3, [r0, #0]
    be36:	ands.w	r2, r3, #7
    be3a:	beq.n	be4c <__lo0bits+0x18>
    be3c:	lsls	r1, r3, #31
    be3e:	bmi.n	be82 <__lo0bits+0x4e>
    be40:	lsls	r2, r3, #30
    be42:	bmi.n	be86 <__lo0bits+0x52>
    be44:	lsrs	r3, r3, #2
    be46:	str	r3, [r0, #0]
    be48:	movs	r0, #2
    be4a:	bx	lr
    be4c:	uxth	r1, r3
    be4e:	cbnz	r1, be54 <__lo0bits+0x20>
    be50:	lsrs	r3, r3, #16
    be52:	movs	r2, #16
    be54:	tst.w	r3, #255	; 0xff
    be58:	itt	eq
    be5a:	lsreq	r3, r3, #8
    be5c:	addeq	r2, #8
    be5e:	lsls	r1, r3, #28
    be60:	itt	eq
    be62:	lsreq	r3, r3, #4
    be64:	addeq	r2, #4
    be66:	lsls	r1, r3, #30
    be68:	itt	eq
    be6a:	lsreq	r3, r3, #2
    be6c:	addeq	r2, #2
    be6e:	lsls	r1, r3, #31
    be70:	bmi.n	be7c <__lo0bits+0x48>
    be72:	lsrs	r3, r3, #1
    be74:	bne.n	be7a <__lo0bits+0x46>
    be76:	movs	r0, #32
    be78:	bx	lr
    be7a:	adds	r2, #1
    be7c:	str	r3, [r0, #0]
    be7e:	mov	r0, r2
    be80:	bx	lr
    be82:	movs	r0, #0
    be84:	bx	lr
    be86:	lsrs	r3, r3, #1
    be88:	str	r3, [r0, #0]
    be8a:	movs	r0, #1
    be8c:	bx	lr
    be8e:	nop

0000be90 <__i2b>:
    be90:	push	{r4, lr}
    be92:	mov	r4, r1
    be94:	movs	r1, #1
    be96:	bl	bd14 <_Balloc>
    be9a:	movs	r2, #1
    be9c:	str	r4, [r0, #20]
    be9e:	str	r2, [r0, #16]
    bea0:	pop	{r4, pc}
    bea2:	nop

0000bea4 <__multiply>:
    bea4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bea8:	ldr	r5, [r1, #16]
    beaa:	ldr	r7, [r2, #16]
    beac:	cmp	r5, r7
    beae:	sub	sp, #12
    beb0:	mov	r4, r1
    beb2:	mov	r6, r2
    beb4:	bge.n	bec0 <__multiply+0x1c>
    beb6:	mov	r2, r5
    beb8:	mov	r4, r6
    beba:	mov	r5, r7
    bebc:	mov	r6, r1
    bebe:	mov	r7, r2
    bec0:	ldr	r3, [r4, #8]
    bec2:	ldr	r1, [r4, #4]
    bec4:	add.w	r8, r5, r7
    bec8:	cmp	r8, r3
    beca:	it	gt
    becc:	addgt	r1, #1
    bece:	bl	bd14 <_Balloc>
    bed2:	add.w	ip, r0, #20
    bed6:	add.w	r9, ip, r8, lsl #2
    beda:	cmp	ip, r9
    bedc:	str	r0, [sp, #0]
    bede:	bcs.n	beec <__multiply+0x48>
    bee0:	mov	r3, ip
    bee2:	movs	r1, #0
    bee4:	str.w	r1, [r3], #4
    bee8:	cmp	r9, r3
    beea:	bhi.n	bee4 <__multiply+0x40>
    beec:	add.w	r2, r6, #20
    bef0:	add.w	sl, r2, r7, lsl #2
    bef4:	add.w	r3, r4, #20
    bef8:	cmp	r2, sl
    befa:	add.w	lr, r3, r5, lsl #2
    befe:	bcs.n	bfaa <__multiply+0x106>
    bf00:	str.w	r9, [sp, #4]
    bf04:	mov	r9, r3
    bf06:	ldr.w	r3, [r2], #4
    bf0a:	uxth.w	fp, r3
    bf0e:	cmp.w	fp, #0
    bf12:	beq.n	bf56 <__multiply+0xb2>
    bf14:	movs	r0, #0
    bf16:	mov	r7, r9
    bf18:	mov	r6, ip
    bf1a:	mov	r5, r0
    bf1c:	b.n	bf20 <__multiply+0x7c>
    bf1e:	mov	r6, r3
    bf20:	ldr.w	r4, [r7], #4
    bf24:	ldr	r0, [r6, #0]
    bf26:	uxth	r1, r4
    bf28:	uxth	r3, r0
    bf2a:	mla	r1, fp, r1, r3
    bf2e:	lsrs	r4, r4, #16
    bf30:	lsrs	r0, r0, #16
    bf32:	adds	r3, r1, r5
    bf34:	mla	r0, fp, r4, r0
    bf38:	add.w	r0, r0, r3, lsr #16
    bf3c:	uxth	r1, r3
    bf3e:	mov	r3, r6
    bf40:	orr.w	r1, r1, r0, lsl #16
    bf44:	cmp	lr, r7
    bf46:	mov.w	r5, r0, lsr #16
    bf4a:	str.w	r1, [r3], #4
    bf4e:	bhi.n	bf1e <__multiply+0x7a>
    bf50:	str	r5, [r6, #4]
    bf52:	ldr.w	r3, [r2, #-4]
    bf56:	movs.w	fp, r3, lsr #16
    bf5a:	beq.n	bf9e <__multiply+0xfa>
    bf5c:	ldr.w	r3, [ip]
    bf60:	mov	r7, ip
    bf62:	mov	r0, r3
    bf64:	mov	r5, r9
    bf66:	movs	r1, #0
    bf68:	b.n	bf6c <__multiply+0xc8>
    bf6a:	mov	r7, r6
    bf6c:	ldrh	r4, [r5, #0]
    bf6e:	lsrs	r0, r0, #16
    bf70:	mla	r0, fp, r4, r0
    bf74:	add	r1, r0
    bf76:	uxth	r4, r3
    bf78:	mov	r6, r7
    bf7a:	orr.w	r3, r4, r1, lsl #16
    bf7e:	str.w	r3, [r6], #4
    bf82:	ldr	r0, [r7, #4]
    bf84:	ldr.w	r4, [r5], #4
    bf88:	uxth	r3, r0
    bf8a:	lsrs	r4, r4, #16
    bf8c:	mla	r4, fp, r4, r3
    bf90:	add.w	r3, r4, r1, lsr #16
    bf94:	cmp	lr, r5
    bf96:	mov.w	r1, r3, lsr #16
    bf9a:	bhi.n	bf6a <__multiply+0xc6>
    bf9c:	str	r3, [r7, #4]
    bf9e:	cmp	sl, r2
    bfa0:	add.w	ip, ip, #4
    bfa4:	bhi.n	bf06 <__multiply+0x62>
    bfa6:	ldr.w	r9, [sp, #4]
    bfaa:	cmp.w	r8, #0
    bfae:	ble.n	bfc8 <__multiply+0x124>
    bfb0:	ldr.w	r3, [r9, #-4]
    bfb4:	sub.w	r9, r9, #4
    bfb8:	cbz	r3, bfc2 <__multiply+0x11e>
    bfba:	b.n	bfc8 <__multiply+0x124>
    bfbc:	ldr.w	r3, [r9, #-4]!
    bfc0:	cbnz	r3, bfc8 <__multiply+0x124>
    bfc2:	subs.w	r8, r8, #1
    bfc6:	bne.n	bfbc <__multiply+0x118>
    bfc8:	ldr	r0, [sp, #0]
    bfca:	str.w	r8, [r0, #16]
    bfce:	add	sp, #12
    bfd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bfd4 <__pow5mult>:
    bfd4:	ands.w	r3, r2, #3
    bfd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfdc:	mov	r4, r2
    bfde:	mov	r7, r0
    bfe0:	bne.n	c040 <__pow5mult+0x6c>
    bfe2:	mov	r6, r1
    bfe4:	asrs	r4, r4, #2
    bfe6:	beq.n	c022 <__pow5mult+0x4e>
    bfe8:	ldr	r5, [r7, #72]	; 0x48
    bfea:	cbz	r5, c052 <__pow5mult+0x7e>
    bfec:	lsls	r3, r4, #31
    bfee:	mov.w	r8, #0
    bff2:	bmi.n	c002 <__pow5mult+0x2e>
    bff4:	asrs	r4, r4, #1
    bff6:	beq.n	c022 <__pow5mult+0x4e>
    bff8:	ldr	r0, [r5, #0]
    bffa:	cbz	r0, c028 <__pow5mult+0x54>
    bffc:	mov	r5, r0
    bffe:	lsls	r3, r4, #31
    c000:	bpl.n	bff4 <__pow5mult+0x20>
    c002:	mov	r2, r5
    c004:	mov	r1, r6
    c006:	mov	r0, r7
    c008:	bl	bea4 <__multiply>
    c00c:	cbz	r6, c03c <__pow5mult+0x68>
    c00e:	ldr	r2, [r6, #4]
    c010:	ldr	r3, [r7, #76]	; 0x4c
    c012:	asrs	r4, r4, #1
    c014:	ldr.w	r1, [r3, r2, lsl #2]
    c018:	str	r1, [r6, #0]
    c01a:	str.w	r6, [r3, r2, lsl #2]
    c01e:	mov	r6, r0
    c020:	bne.n	bff8 <__pow5mult+0x24>
    c022:	mov	r0, r6
    c024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c028:	mov	r2, r5
    c02a:	mov	r1, r5
    c02c:	mov	r0, r7
    c02e:	bl	bea4 <__multiply>
    c032:	str	r0, [r5, #0]
    c034:	str.w	r8, [r0]
    c038:	mov	r5, r0
    c03a:	b.n	bffe <__pow5mult+0x2a>
    c03c:	mov	r6, r0
    c03e:	b.n	bff4 <__pow5mult+0x20>
    c040:	subs	r2, r3, #1
    c042:	ldr	r5, [pc, #44]	; (c070 <__pow5mult+0x9c>)
    c044:	movs	r3, #0
    c046:	ldr.w	r2, [r5, r2, lsl #2]
    c04a:	bl	bd74 <__multadd>
    c04e:	mov	r6, r0
    c050:	b.n	bfe4 <__pow5mult+0x10>
    c052:	movs	r1, #1
    c054:	mov	r0, r7
    c056:	bl	bd14 <_Balloc>
    c05a:	movw	r1, #625	; 0x271
    c05e:	movs	r2, #1
    c060:	movs	r3, #0
    c062:	str	r1, [r0, #20]
    c064:	str	r2, [r0, #16]
    c066:	mov	r5, r0
    c068:	str	r0, [r7, #72]	; 0x48
    c06a:	str	r3, [r0, #0]
    c06c:	b.n	bfec <__pow5mult+0x18>
    c06e:	nop
    c070:	.word	0x20000838

0000c074 <__lshift>:
    c074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c078:	mov	r9, r2
    c07a:	ldr	r2, [r1, #16]
    c07c:	ldr	r3, [r1, #8]
    c07e:	mov.w	r4, r9, asr #5
    c082:	add.w	r8, r4, r2
    c086:	add.w	r5, r8, #1
    c08a:	cmp	r5, r3
    c08c:	mov	r6, r1
    c08e:	mov	sl, r0
    c090:	ldr	r1, [r1, #4]
    c092:	ble.n	c09e <__lshift+0x2a>
    c094:	lsls	r3, r3, #1
    c096:	cmp	r5, r3
    c098:	add.w	r1, r1, #1
    c09c:	bgt.n	c094 <__lshift+0x20>
    c09e:	mov	r0, sl
    c0a0:	bl	bd14 <_Balloc>
    c0a4:	cmp	r4, #0
    c0a6:	add.w	r2, r0, #20
    c0aa:	ble.n	c11e <__lshift+0xaa>
    c0ac:	add.w	r3, r2, r4, lsl #2
    c0b0:	movs	r1, #0
    c0b2:	str.w	r1, [r2], #4
    c0b6:	cmp	r3, r2
    c0b8:	bne.n	c0b2 <__lshift+0x3e>
    c0ba:	ldr	r4, [r6, #16]
    c0bc:	add.w	r1, r6, #20
    c0c0:	ands.w	r9, r9, #31
    c0c4:	add.w	lr, r1, r4, lsl #2
    c0c8:	beq.n	c10e <__lshift+0x9a>
    c0ca:	rsb	r2, r9, #32
    c0ce:	movs	r4, #0
    c0d0:	ldr	r7, [r1, #0]
    c0d2:	lsl.w	ip, r7, r9
    c0d6:	orr.w	r4, ip, r4
    c0da:	mov	ip, r3
    c0dc:	str.w	r4, [r3], #4
    c0e0:	ldr.w	r4, [r1], #4
    c0e4:	cmp	lr, r1
    c0e6:	lsr.w	r4, r4, r2
    c0ea:	bhi.n	c0d0 <__lshift+0x5c>
    c0ec:	str.w	r4, [ip, #4]
    c0f0:	cbz	r4, c0f6 <__lshift+0x82>
    c0f2:	add.w	r5, r8, #2
    c0f6:	ldr.w	r3, [sl, #76]	; 0x4c
    c0fa:	ldr	r2, [r6, #4]
    c0fc:	subs	r5, #1
    c0fe:	ldr.w	r1, [r3, r2, lsl #2]
    c102:	str	r5, [r0, #16]
    c104:	str	r1, [r6, #0]
    c106:	str.w	r6, [r3, r2, lsl #2]
    c10a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c10e:	subs	r3, #4
    c110:	ldr.w	r2, [r1], #4
    c114:	str.w	r2, [r3, #4]!
    c118:	cmp	lr, r1
    c11a:	bhi.n	c110 <__lshift+0x9c>
    c11c:	b.n	c0f6 <__lshift+0x82>
    c11e:	mov	r3, r2
    c120:	b.n	c0ba <__lshift+0x46>
    c122:	nop

0000c124 <__mcmp>:
    c124:	ldr	r2, [r0, #16]
    c126:	ldr	r3, [r1, #16]
    c128:	subs	r2, r2, r3
    c12a:	bne.n	c154 <__mcmp+0x30>
    c12c:	lsls	r3, r3, #2
    c12e:	adds	r0, #20
    c130:	adds	r1, #20
    c132:	add	r1, r3
    c134:	push	{r4}
    c136:	add	r3, r0
    c138:	b.n	c13e <__mcmp+0x1a>
    c13a:	cmp	r0, r3
    c13c:	bcs.n	c158 <__mcmp+0x34>
    c13e:	ldr.w	r4, [r3, #-4]!
    c142:	ldr.w	r2, [r1, #-4]!
    c146:	cmp	r4, r2
    c148:	beq.n	c13a <__mcmp+0x16>
    c14a:	bcc.n	c160 <__mcmp+0x3c>
    c14c:	movs	r0, #1
    c14e:	ldr.w	r4, [sp], #4
    c152:	bx	lr
    c154:	mov	r0, r2
    c156:	bx	lr
    c158:	movs	r0, #0
    c15a:	ldr.w	r4, [sp], #4
    c15e:	bx	lr
    c160:	mov.w	r0, #4294967295
    c164:	b.n	c14e <__mcmp+0x2a>
    c166:	nop

0000c168 <__mdiff>:
    c168:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c16c:	ldr	r3, [r1, #16]
    c16e:	mov	r7, r1
    c170:	ldr	r1, [r2, #16]
    c172:	subs	r3, r3, r1
    c174:	cmp	r3, #0
    c176:	mov	r8, r2
    c178:	bne.n	c1aa <__mdiff+0x42>
    c17a:	lsls	r1, r1, #2
    c17c:	add.w	r2, r7, #20
    c180:	add.w	r5, r8, #20
    c184:	adds	r3, r2, r1
    c186:	add	r1, r5
    c188:	b.n	c18e <__mdiff+0x26>
    c18a:	cmp	r2, r3
    c18c:	bcs.n	c24c <__mdiff+0xe4>
    c18e:	ldr.w	r6, [r3, #-4]!
    c192:	ldr.w	r4, [r1, #-4]!
    c196:	cmp	r6, r4
    c198:	beq.n	c18a <__mdiff+0x22>
    c19a:	bcs.n	c25e <__mdiff+0xf6>
    c19c:	mov	r3, r7
    c19e:	mov	r4, r2
    c1a0:	mov	r7, r8
    c1a2:	mov.w	r9, #1
    c1a6:	mov	r8, r3
    c1a8:	b.n	c1b8 <__mdiff+0x50>
    c1aa:	blt.n	c268 <__mdiff+0x100>
    c1ac:	add.w	r5, r7, #20
    c1b0:	add.w	r4, r2, #20
    c1b4:	mov.w	r9, #0
    c1b8:	ldr	r1, [r7, #4]
    c1ba:	bl	bd14 <_Balloc>
    c1be:	ldr.w	r3, [r8, #16]
    c1c2:	ldr	r6, [r7, #16]
    c1c4:	str.w	r9, [r0, #12]
    c1c8:	add.w	ip, r4, r3, lsl #2
    c1cc:	mov	lr, r4
    c1ce:	add.w	r7, r5, r6, lsl #2
    c1d2:	add.w	r4, r0, #20
    c1d6:	movs	r3, #0
    c1d8:	ldr.w	r1, [lr], #4
    c1dc:	ldr.w	r8, [r5], #4
    c1e0:	uxth	r2, r1
    c1e2:	uxtah	r3, r3, r8
    c1e6:	lsrs	r1, r1, #16
    c1e8:	subs	r2, r3, r2
    c1ea:	rsb	r3, r1, r8, lsr #16
    c1ee:	add.w	r3, r3, r2, asr #16
    c1f2:	uxth	r2, r2
    c1f4:	orr.w	r2, r2, r3, lsl #16
    c1f8:	cmp	ip, lr
    c1fa:	str.w	r2, [r4], #4
    c1fe:	mov.w	r3, r3, asr #16
    c202:	bhi.n	c1d8 <__mdiff+0x70>
    c204:	cmp	r7, r5
    c206:	bls.n	c238 <__mdiff+0xd0>
    c208:	mov	ip, r4
    c20a:	mov	r1, r5
    c20c:	ldr.w	lr, [r1], #4
    c210:	uxtah	r2, r3, lr
    c214:	asrs	r3, r2, #16
    c216:	add.w	r3, r3, lr, lsr #16
    c21a:	uxth	r2, r2
    c21c:	orr.w	r2, r2, r3, lsl #16
    c220:	cmp	r7, r1
    c222:	str.w	r2, [ip], #4
    c226:	mov.w	r3, r3, asr #16
    c22a:	bhi.n	c20c <__mdiff+0xa4>
    c22c:	mvns	r5, r5
    c22e:	add	r5, r7
    c230:	bic.w	r5, r5, #3
    c234:	adds	r5, #4
    c236:	add	r4, r5
    c238:	subs	r4, #4
    c23a:	cbnz	r2, c246 <__mdiff+0xde>
    c23c:	ldr.w	r3, [r4, #-4]!
    c240:	subs	r6, #1
    c242:	cmp	r3, #0
    c244:	beq.n	c23c <__mdiff+0xd4>
    c246:	str	r6, [r0, #16]
    c248:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c24c:	movs	r1, #0
    c24e:	bl	bd14 <_Balloc>
    c252:	movs	r2, #1
    c254:	movs	r3, #0
    c256:	str	r2, [r0, #16]
    c258:	str	r3, [r0, #20]
    c25a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c25e:	mov	r4, r5
    c260:	mov.w	r9, #0
    c264:	mov	r5, r2
    c266:	b.n	c1b8 <__mdiff+0x50>
    c268:	mov	r3, r7
    c26a:	add.w	r4, r7, #20
    c26e:	add.w	r5, r8, #20
    c272:	mov	r7, r8
    c274:	mov.w	r9, #1
    c278:	mov	r8, r3
    c27a:	b.n	c1b8 <__mdiff+0x50>

0000c27c <__d2b>:
    c27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c280:	vmov	r6, r7, d0
    c284:	sub	sp, #12
    c286:	mov	r8, r1
    c288:	movs	r1, #1
    c28a:	mov	r4, r7
    c28c:	ubfx	r5, r7, #20, #11
    c290:	mov	r7, r2
    c292:	bl	bd14 <_Balloc>
    c296:	ubfx	r4, r4, #0, #20
    c29a:	mov	r9, r0
    c29c:	cbz	r5, c2a2 <__d2b+0x26>
    c29e:	orr.w	r4, r4, #1048576	; 0x100000
    c2a2:	str	r4, [sp, #4]
    c2a4:	cbz	r6, c2ee <__d2b+0x72>
    c2a6:	add	r0, sp, #8
    c2a8:	str.w	r6, [r0, #-8]!
    c2ac:	bl	be34 <__lo0bits>
    c2b0:	cmp	r0, #0
    c2b2:	bne.n	c31e <__d2b+0xa2>
    c2b4:	ldmia.w	sp, {r2, r3}
    c2b8:	str.w	r2, [r9, #20]
    c2bc:	cmp	r3, #0
    c2be:	ite	eq
    c2c0:	moveq	r1, #1
    c2c2:	movne	r1, #2
    c2c4:	str.w	r3, [r9, #24]
    c2c8:	str.w	r1, [r9, #16]
    c2cc:	cbnz	r5, c306 <__d2b+0x8a>
    c2ce:	add.w	r3, r9, r1, lsl #2
    c2d2:	subw	r0, r0, #1074	; 0x432
    c2d6:	str.w	r0, [r8]
    c2da:	ldr	r0, [r3, #16]
    c2dc:	bl	bdf4 <__hi0bits>
    c2e0:	rsb	r0, r0, r1, lsl #5
    c2e4:	str	r0, [r7, #0]
    c2e6:	mov	r0, r9
    c2e8:	add	sp, #12
    c2ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c2ee:	add	r0, sp, #4
    c2f0:	bl	be34 <__lo0bits>
    c2f4:	ldr	r3, [sp, #4]
    c2f6:	str.w	r3, [r9, #20]
    c2fa:	movs	r1, #1
    c2fc:	adds	r0, #32
    c2fe:	str.w	r1, [r9, #16]
    c302:	cmp	r5, #0
    c304:	beq.n	c2ce <__d2b+0x52>
    c306:	subw	r5, r5, #1075	; 0x433
    c30a:	add	r5, r0
    c30c:	rsb	r0, r0, #53	; 0x35
    c310:	str.w	r5, [r8]
    c314:	str	r0, [r7, #0]
    c316:	mov	r0, r9
    c318:	add	sp, #12
    c31a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c31e:	ldmia.w	sp, {r2, r3}
    c322:	rsb	r1, r0, #32
    c326:	lsl.w	r1, r3, r1
    c32a:	orrs	r2, r1
    c32c:	lsrs	r3, r0
    c32e:	str	r3, [sp, #4]
    c330:	str.w	r2, [r9, #20]
    c334:	b.n	c2bc <__d2b+0x40>
    c336:	nop

0000c338 <_vasnprintf_r>:
    c338:	push	{r4, r5, r6, lr}
    c33a:	mov	r5, r2
    c33c:	sub	sp, #104	; 0x68
    c33e:	ldr	r4, [r2, #0]
    c340:	cbz	r1, c346 <_vasnprintf_r+0xe>
    c342:	cmp	r4, #0
    c344:	bne.n	c37c <_vasnprintf_r+0x44>
    c346:	movs	r4, #0
    c348:	mov.w	r2, #648	; 0x288
    c34c:	strh.w	r2, [sp, #12]
    c350:	str	r4, [sp, #0]
    c352:	str	r4, [sp, #16]
    c354:	mov	r2, r3
    c356:	movw	r6, #65535	; 0xffff
    c35a:	ldr	r3, [sp, #120]	; 0x78
    c35c:	str	r4, [sp, #8]
    c35e:	mov	r1, sp
    c360:	str	r4, [sp, #20]
    c362:	strh.w	r6, [sp, #14]
    c366:	bl	d358 <_svfprintf_r>
    c36a:	cmp	r0, #0
    c36c:	blt.n	c392 <_vasnprintf_r+0x5a>
    c36e:	ldr	r3, [sp, #0]
    c370:	str	r0, [r5, #0]
    c372:	movs	r2, #0
    c374:	strb	r2, [r3, #0]
    c376:	ldr	r0, [sp, #16]
    c378:	add	sp, #104	; 0x68
    c37a:	pop	{r4, r5, r6, pc}
    c37c:	mov.w	r2, #1544	; 0x608
    c380:	str	r1, [sp, #0]
    c382:	str	r1, [sp, #16]
    c384:	strh.w	r2, [sp, #12]
    c388:	bge.n	c354 <_vasnprintf_r+0x1c>
    c38a:	movs	r3, #139	; 0x8b
    c38c:	str	r3, [r0, #0]
    c38e:	movs	r0, #0
    c390:	b.n	c378 <_vasnprintf_r+0x40>
    c392:	movs	r0, #0
    c394:	b.n	c378 <_vasnprintf_r+0x40>
    c396:	nop

0000c398 <_calloc_r>:
    c398:	push	{r4, lr}
    c39a:	mul.w	r1, r2, r1
    c39e:	bl	aa7c <_malloc_r>
    c3a2:	mov	r4, r0
    c3a4:	cbz	r0, c3de <_calloc_r+0x46>
    c3a6:	ldr.w	r2, [r0, #-4]
    c3aa:	bic.w	r2, r2, #3
    c3ae:	subs	r2, #4
    c3b0:	cmp	r2, #36	; 0x24
    c3b2:	bhi.n	c3e6 <_calloc_r+0x4e>
    c3b4:	cmp	r2, #19
    c3b6:	bls.n	c3e2 <_calloc_r+0x4a>
    c3b8:	movs	r3, #0
    c3ba:	cmp	r2, #27
    c3bc:	str	r3, [r0, #0]
    c3be:	str	r3, [r0, #4]
    c3c0:	bls.n	c3f0 <_calloc_r+0x58>
    c3c2:	cmp	r2, #36	; 0x24
    c3c4:	str	r3, [r0, #8]
    c3c6:	str	r3, [r0, #12]
    c3c8:	iteee	ne
    c3ca:	addne.w	r2, r0, #16
    c3ce:	streq	r3, [r0, #16]
    c3d0:	streq	r3, [r0, #20]
    c3d2:	addeq.w	r2, r0, #24
    c3d6:	movs	r3, #0
    c3d8:	str	r3, [r2, #0]
    c3da:	str	r3, [r2, #4]
    c3dc:	str	r3, [r2, #8]
    c3de:	mov	r0, r4
    c3e0:	pop	{r4, pc}
    c3e2:	mov	r2, r0
    c3e4:	b.n	c3d6 <_calloc_r+0x3e>
    c3e6:	movs	r1, #0
    c3e8:	bl	b1ec <memset>
    c3ec:	mov	r0, r4
    c3ee:	pop	{r4, pc}
    c3f0:	add.w	r2, r0, #8
    c3f4:	b.n	c3d6 <_calloc_r+0x3e>
    c3f6:	nop

0000c3f8 <quorem>:
    c3f8:	ldr	r2, [r0, #16]
    c3fa:	ldr	r3, [r1, #16]
    c3fc:	cmp	r3, r2
    c3fe:	bgt.w	c51c <quorem+0x124>
    c402:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c406:	add.w	r8, r3, #4294967295
    c40a:	add.w	r7, r1, #20
    c40e:	add.w	fp, r0, #20
    c412:	ldr.w	r2, [r7, r8, lsl #2]
    c416:	ldr.w	r3, [fp, r8, lsl #2]
    c41a:	mov.w	r4, r8, lsl #2
    c41e:	sub	sp, #12
    c420:	adds	r2, #1
    c422:	udiv	r9, r3, r2
    c426:	add.w	r3, fp, r4
    c42a:	str	r4, [sp, #0]
    c42c:	add.w	sl, r7, r4
    c430:	str	r3, [sp, #4]
    c432:	cmp.w	r9, #0
    c436:	beq.n	c4ac <quorem+0xb4>
    c438:	movs	r5, #0
    c43a:	mov	ip, r7
    c43c:	mov	lr, fp
    c43e:	mov	r3, r5
    c440:	ldr.w	r6, [ip], #4
    c444:	ldr.w	r2, [lr]
    c448:	uxth	r4, r6
    c44a:	mla	r5, r9, r4, r5
    c44e:	lsrs	r6, r6, #16
    c450:	lsrs	r4, r5, #16
    c452:	mla	r4, r9, r6, r4
    c456:	uxth	r5, r5
    c458:	subs	r3, r3, r5
    c45a:	uxth	r6, r4
    c45c:	uxtah	r3, r3, r2
    c460:	rsb	r6, r6, r2, lsr #16
    c464:	add.w	r6, r6, r3, asr #16
    c468:	uxth	r3, r3
    c46a:	orr.w	r3, r3, r6, lsl #16
    c46e:	cmp	sl, ip
    c470:	str.w	r3, [lr], #4
    c474:	mov.w	r5, r4, lsr #16
    c478:	mov.w	r3, r6, asr #16
    c47c:	bcs.n	c440 <quorem+0x48>
    c47e:	ldr	r3, [sp, #0]
    c480:	ldr.w	r3, [fp, r3]
    c484:	cbnz	r3, c4ac <quorem+0xb4>
    c486:	ldr	r4, [sp, #4]
    c488:	subs	r3, r4, #4
    c48a:	cmp	fp, r3
    c48c:	bcs.n	c4a8 <quorem+0xb0>
    c48e:	ldr.w	r3, [r4, #-4]
    c492:	cbnz	r3, c4a8 <quorem+0xb0>
    c494:	sub.w	r3, r4, #8
    c498:	b.n	c4a0 <quorem+0xa8>
    c49a:	ldr	r2, [r3, #0]
    c49c:	subs	r3, #4
    c49e:	cbnz	r2, c4a8 <quorem+0xb0>
    c4a0:	cmp	fp, r3
    c4a2:	add.w	r8, r8, #4294967295
    c4a6:	bcc.n	c49a <quorem+0xa2>
    c4a8:	str.w	r8, [r0, #16]
    c4ac:	mov	r4, r0
    c4ae:	bl	c124 <__mcmp>
    c4b2:	cmp	r0, #0
    c4b4:	blt.n	c514 <quorem+0x11c>
    c4b6:	add.w	r9, r9, #1
    c4ba:	mov	r5, fp
    c4bc:	movs	r3, #0
    c4be:	ldr.w	r1, [r7], #4
    c4c2:	ldr	r0, [r5, #0]
    c4c4:	uxth	r2, r1
    c4c6:	subs	r2, r3, r2
    c4c8:	lsrs	r1, r1, #16
    c4ca:	uxtah	r2, r2, r0
    c4ce:	rsb	r3, r1, r0, lsr #16
    c4d2:	add.w	r3, r3, r2, asr #16
    c4d6:	uxth	r1, r2
    c4d8:	orr.w	r1, r1, r3, lsl #16
    c4dc:	cmp	sl, r7
    c4de:	str.w	r1, [r5], #4
    c4e2:	mov.w	r3, r3, asr #16
    c4e6:	bcs.n	c4be <quorem+0xc6>
    c4e8:	ldr.w	r2, [fp, r8, lsl #2]
    c4ec:	add.w	r3, fp, r8, lsl #2
    c4f0:	cbnz	r2, c514 <quorem+0x11c>
    c4f2:	subs	r2, r3, #4
    c4f4:	cmp	fp, r2
    c4f6:	bcs.n	c510 <quorem+0x118>
    c4f8:	ldr.w	r2, [r3, #-4]
    c4fc:	cbnz	r2, c510 <quorem+0x118>
    c4fe:	subs	r3, #8
    c500:	b.n	c508 <quorem+0x110>
    c502:	ldr	r2, [r3, #0]
    c504:	subs	r3, #4
    c506:	cbnz	r2, c510 <quorem+0x118>
    c508:	cmp	fp, r3
    c50a:	add.w	r8, r8, #4294967295
    c50e:	bcc.n	c502 <quorem+0x10a>
    c510:	str.w	r8, [r4, #16]
    c514:	mov	r0, r9
    c516:	add	sp, #12
    c518:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c51c:	movs	r0, #0
    c51e:	bx	lr

0000c520 <_dtoa_r>:
    c520:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c524:	vmov	r6, r7, d0
    c528:	sub	sp, #108	; 0x6c
    c52a:	ldr	r4, [r0, #64]	; 0x40
    c52c:	ldr	r5, [sp, #144]	; 0x90
    c52e:	str	r1, [sp, #0]
    c530:	mov	r9, r0
    c532:	str	r2, [sp, #20]
    c534:	str	r3, [sp, #12]
    c536:	vmov	sl, s0
    c53a:	mov	fp, r7
    c53c:	cbz	r4, c554 <_dtoa_r+0x34>
    c53e:	ldr	r2, [r0, #68]	; 0x44
    c540:	str	r2, [r4, #4]
    c542:	movs	r3, #1
    c544:	lsls	r3, r2
    c546:	str	r3, [r4, #8]
    c548:	mov	r1, r4
    c54a:	bl	bd60 <_Bfree>
    c54e:	movs	r3, #0
    c550:	str.w	r3, [r9, #64]	; 0x40
    c554:	cmp.w	fp, #0
    c558:	mov	r4, fp
    c55a:	blt.n	c5c6 <_dtoa_r+0xa6>
    c55c:	movs	r3, #0
    c55e:	str	r3, [r5, #0]
    c560:	ldr	r3, [pc, #644]	; (c7e8 <_dtoa_r+0x2c8>)
    c562:	mov	r2, r3
    c564:	ands	r3, r4
    c566:	cmp	r3, r2
    c568:	beq.n	c598 <_dtoa_r+0x78>
    c56a:	movs	r2, #0
    c56c:	movs	r3, #0
    c56e:	mov	r0, sl
    c570:	mov	r1, fp
    c572:	bl	a5fc <__aeabi_dcmpeq>
    c576:	mov	r6, sl
    c578:	mov	r7, fp
    c57a:	mov	r8, r0
    c57c:	cbz	r0, c5d2 <_dtoa_r+0xb2>
    c57e:	ldr	r2, [sp, #12]
    c580:	movs	r3, #1
    c582:	str	r3, [r2, #0]
    c584:	ldr	r3, [sp, #148]	; 0x94
    c586:	cmp	r3, #0
    c588:	beq.w	c708 <_dtoa_r+0x1e8>
    c58c:	ldr	r0, [pc, #604]	; (c7ec <_dtoa_r+0x2cc>)
    c58e:	str	r0, [r3, #0]
    c590:	subs	r0, #1
    c592:	add	sp, #108	; 0x6c
    c594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c598:	ldr	r2, [sp, #12]
    c59a:	movw	r3, #9999	; 0x270f
    c59e:	str	r3, [r2, #0]
    c5a0:	cmp.w	sl, #0
    c5a4:	beq.w	c6dc <_dtoa_r+0x1bc>
    c5a8:	ldr	r0, [pc, #580]	; (c7f0 <_dtoa_r+0x2d0>)
    c5aa:	ldr	r3, [sp, #148]	; 0x94
    c5ac:	cmp	r3, #0
    c5ae:	beq.n	c592 <_dtoa_r+0x72>
    c5b0:	ldrb	r3, [r0, #3]
    c5b2:	cmp	r3, #0
    c5b4:	beq.w	c70c <_dtoa_r+0x1ec>
    c5b8:	add.w	r3, r0, #8
    c5bc:	ldr	r2, [sp, #148]	; 0x94
    c5be:	str	r3, [r2, #0]
    c5c0:	add	sp, #108	; 0x6c
    c5c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c6:	movs	r3, #1
    c5c8:	bic.w	r4, fp, #2147483648	; 0x80000000
    c5cc:	str	r3, [r5, #0]
    c5ce:	mov	fp, r4
    c5d0:	b.n	c560 <_dtoa_r+0x40>
    c5d2:	add	r2, sp, #96	; 0x60
    c5d4:	add	r1, sp, #100	; 0x64
    c5d6:	vmov	d0, r6, r7
    c5da:	mov	r0, r9
    c5dc:	bl	c27c <__d2b>
    c5e0:	lsrs	r5, r4, #20
    c5e2:	str	r0, [sp, #40]	; 0x28
    c5e4:	bne.w	c6ee <_dtoa_r+0x1ce>
    c5e8:	ldr	r5, [sp, #96]	; 0x60
    c5ea:	ldr	r6, [sp, #100]	; 0x64
    c5ec:	add	r6, r5
    c5ee:	addw	r3, r6, #1074	; 0x432
    c5f2:	cmp	r3, #32
    c5f4:	ble.w	cb08 <_dtoa_r+0x5e8>
    c5f8:	rsb	r3, r3, #64	; 0x40
    c5fc:	addw	r0, r6, #1042	; 0x412
    c600:	lsls	r4, r3
    c602:	lsr.w	r0, sl, r0
    c606:	orrs	r0, r4
    c608:	bl	a040 <__aeabi_ui2d>
    c60c:	movs	r3, #1
    c60e:	subs	r4, r6, #1
    c610:	sub.w	r1, r1, #32505856	; 0x1f00000
    c614:	str	r3, [sp, #60]	; 0x3c
    c616:	movs	r2, #0
    c618:	ldr	r3, [pc, #472]	; (c7f4 <_dtoa_r+0x2d4>)
    c61a:	bl	9dc4 <__aeabi_dsub>
    c61e:	add	r3, pc, #432	; (adr r3, c7d0 <_dtoa_r+0x2b0>)
    c620:	ldrd	r2, r3, [r3]
    c624:	bl	a12c <__aeabi_dmul>
    c628:	add	r3, pc, #428	; (adr r3, c7d8 <_dtoa_r+0x2b8>)
    c62a:	ldrd	r2, r3, [r3]
    c62e:	bl	9dc8 <__adddf3>
    c632:	mov	r6, r0
    c634:	mov	r0, r4
    c636:	mov	r7, r1
    c638:	bl	a060 <__aeabi_i2d>
    c63c:	add	r3, pc, #416	; (adr r3, c7e0 <_dtoa_r+0x2c0>)
    c63e:	ldrd	r2, r3, [r3]
    c642:	bl	a12c <__aeabi_dmul>
    c646:	mov	r2, r0
    c648:	mov	r3, r1
    c64a:	mov	r0, r6
    c64c:	mov	r1, r7
    c64e:	bl	9dc8 <__adddf3>
    c652:	mov	r6, r0
    c654:	mov	r7, r1
    c656:	bl	a68c <__aeabi_d2iz>
    c65a:	movs	r2, #0
    c65c:	str	r0, [sp, #16]
    c65e:	movs	r3, #0
    c660:	mov	r0, r6
    c662:	mov	r1, r7
    c664:	bl	a610 <__aeabi_dcmplt>
    c668:	cmp	r0, #0
    c66a:	bne.w	cabe <_dtoa_r+0x59e>
    c66e:	ldr	r6, [sp, #16]
    c670:	cmp	r6, #22
    c672:	bhi.w	cab8 <_dtoa_r+0x598>
    c676:	ldr	r3, [pc, #384]	; (c7f8 <_dtoa_r+0x2d8>)
    c678:	add.w	r3, r3, r6, lsl #3
    c67c:	ldrd	r0, r1, [r3]
    c680:	mov	r2, sl
    c682:	mov	r3, fp
    c684:	bl	a64c <__aeabi_dcmpgt>
    c688:	cmp	r0, #0
    c68a:	beq.w	cb12 <_dtoa_r+0x5f2>
    c68e:	subs	r3, r6, #1
    c690:	str	r3, [sp, #16]
    c692:	movs	r3, #0
    c694:	str	r3, [sp, #52]	; 0x34
    c696:	subs	r5, r5, r4
    c698:	subs.w	r8, r5, #1
    c69c:	bmi.w	caf4 <_dtoa_r+0x5d4>
    c6a0:	movs	r3, #0
    c6a2:	str	r3, [sp, #28]
    c6a4:	ldr	r3, [sp, #16]
    c6a6:	cmp	r3, #0
    c6a8:	blt.w	cae2 <_dtoa_r+0x5c2>
    c6ac:	add	r8, r3
    c6ae:	str	r3, [sp, #48]	; 0x30
    c6b0:	movs	r3, #0
    c6b2:	str	r3, [sp, #24]
    c6b4:	ldr	r3, [sp, #0]
    c6b6:	cmp	r3, #9
    c6b8:	bhi.n	c710 <_dtoa_r+0x1f0>
    c6ba:	cmp	r3, #5
    c6bc:	ble.w	d348 <_dtoa_r+0xe28>
    c6c0:	subs	r3, #4
    c6c2:	str	r3, [sp, #0]
    c6c4:	movs	r6, #0
    c6c6:	ldr	r3, [sp, #0]
    c6c8:	subs	r3, #2
    c6ca:	cmp	r3, #3
    c6cc:	bhi.w	d316 <_dtoa_r+0xdf6>
    c6d0:	tbh	[pc, r3, lsl #1]
    c6d4:	.word	0x0224032b
    c6d8:	.word	0x04500336
    c6dc:	ldr	r3, [pc, #272]	; (c7f0 <_dtoa_r+0x2d0>)
    c6de:	ldr	r2, [pc, #284]	; (c7fc <_dtoa_r+0x2dc>)
    c6e0:	ubfx	r0, r4, #0, #20
    c6e4:	cmp	r0, #0
    c6e6:	ite	ne
    c6e8:	movne	r0, r3
    c6ea:	moveq	r0, r2
    c6ec:	b.n	c5aa <_dtoa_r+0x8a>
    c6ee:	ubfx	r3, fp, #0, #20
    c6f2:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    c6f6:	subw	r4, r5, #1023	; 0x3ff
    c6fa:	mov	r0, sl
    c6fc:	str.w	r8, [sp, #60]	; 0x3c
    c700:	orr.w	r1, r1, #3145728	; 0x300000
    c704:	ldr	r5, [sp, #96]	; 0x60
    c706:	b.n	c616 <_dtoa_r+0xf6>
    c708:	ldr	r0, [pc, #244]	; (c800 <_dtoa_r+0x2e0>)
    c70a:	b.n	c592 <_dtoa_r+0x72>
    c70c:	adds	r3, r0, #3
    c70e:	b.n	c5bc <_dtoa_r+0x9c>
    c710:	movs	r1, #0
    c712:	str.w	r1, [r9, #68]	; 0x44
    c716:	mov	r0, r9
    c718:	mov	r4, r1
    c71a:	str	r1, [sp, #0]
    c71c:	bl	bd14 <_Balloc>
    c720:	mov.w	r3, #4294967295
    c724:	str	r3, [sp, #32]
    c726:	str	r3, [sp, #56]	; 0x38
    c728:	movs	r3, #1
    c72a:	str	r0, [sp, #36]	; 0x24
    c72c:	str.w	r0, [r9, #64]	; 0x40
    c730:	str	r4, [sp, #20]
    c732:	str	r3, [sp, #44]	; 0x2c
    c734:	ldr	r3, [sp, #100]	; 0x64
    c736:	cmp	r3, #0
    c738:	blt.w	c8dc <_dtoa_r+0x3bc>
    c73c:	ldr	r2, [sp, #16]
    c73e:	cmp	r2, #14
    c740:	bgt.w	c8dc <_dtoa_r+0x3bc>
    c744:	ldr	r3, [pc, #176]	; (c7f8 <_dtoa_r+0x2d8>)
    c746:	add.w	r3, r3, r2, lsl #3
    c74a:	vldr	d7, [r3]
    c74e:	ldr	r3, [sp, #20]
    c750:	cmp	r3, #0
    c752:	vstr	d7, [sp]
    c756:	blt.w	cd56 <_dtoa_r+0x836>
    c75a:	mov	r6, sl
    c75c:	mov	r7, fp
    c75e:	ldrd	sl, fp, [sp]
    c762:	mov	r0, r6
    c764:	mov	r2, sl
    c766:	mov	r3, fp
    c768:	mov	r1, r7
    c76a:	bl	a380 <__aeabi_ddiv>
    c76e:	bl	a68c <__aeabi_d2iz>
    c772:	mov	r4, r0
    c774:	bl	a060 <__aeabi_i2d>
    c778:	mov	r2, sl
    c77a:	mov	r3, fp
    c77c:	bl	a12c <__aeabi_dmul>
    c780:	mov	r3, r1
    c782:	mov	r2, r0
    c784:	mov	r1, r7
    c786:	mov	r0, r6
    c788:	bl	9dc4 <__aeabi_dsub>
    c78c:	ldr	r5, [sp, #36]	; 0x24
    c78e:	add.w	r3, r4, #48	; 0x30
    c792:	strb	r3, [r5, #0]
    c794:	ldr	r3, [sp, #32]
    c796:	cmp	r3, #1
    c798:	mov	r6, r0
    c79a:	mov	r7, r1
    c79c:	add.w	r5, r5, #1
    c7a0:	beq.n	c866 <_dtoa_r+0x346>
    c7a2:	movs	r2, #0
    c7a4:	ldr	r3, [pc, #92]	; (c804 <_dtoa_r+0x2e4>)
    c7a6:	bl	a12c <__aeabi_dmul>
    c7aa:	movs	r2, #0
    c7ac:	movs	r3, #0
    c7ae:	mov	r6, r0
    c7b0:	mov	r7, r1
    c7b2:	bl	a5fc <__aeabi_dcmpeq>
    c7b6:	cmp	r0, #0
    c7b8:	bne.n	c8b6 <_dtoa_r+0x396>
    c7ba:	str.w	r9, [sp, #20]
    c7be:	ldr.w	sl, [sp, #32]
    c7c2:	ldr.w	fp, [sp, #36]	; 0x24
    c7c6:	ldrd	r8, r9, [sp]
    c7ca:	b.n	c81e <_dtoa_r+0x2fe>
    c7cc:	nop.w
    c7d0:	.word	0x636f4361
    c7d4:	.word	0x3fd287a7
    c7d8:	.word	0x8b60c8b3
    c7dc:	.word	0x3fc68a28
    c7e0:	.word	0x509f79fb
    c7e4:	.word	0x3fd34413
    c7e8:	.word	0x7ff00000
    c7ec:	.word	0x20000855
    c7f0:	.word	0x20000850
    c7f4:	.word	0x3ff80000
    c7f8:	.word	0x20000748
    c7fc:	.word	0x20000844
    c800:	.word	0x20000854
    c804:	.word	0x40240000
    c808:	bl	a12c <__aeabi_dmul>
    c80c:	movs	r2, #0
    c80e:	movs	r3, #0
    c810:	mov	r6, r0
    c812:	mov	r7, r1
    c814:	bl	a5fc <__aeabi_dcmpeq>
    c818:	cmp	r0, #0
    c81a:	bne.w	cf7a <_dtoa_r+0xa5a>
    c81e:	mov	r2, r8
    c820:	mov	r3, r9
    c822:	mov	r0, r6
    c824:	mov	r1, r7
    c826:	bl	a380 <__aeabi_ddiv>
    c82a:	bl	a68c <__aeabi_d2iz>
    c82e:	mov	r4, r0
    c830:	bl	a060 <__aeabi_i2d>
    c834:	mov	r2, r8
    c836:	mov	r3, r9
    c838:	bl	a12c <__aeabi_dmul>
    c83c:	mov	r2, r0
    c83e:	mov	r3, r1
    c840:	mov	r0, r6
    c842:	mov	r1, r7
    c844:	bl	9dc4 <__aeabi_dsub>
    c848:	add.w	lr, r4, #48	; 0x30
    c84c:	strb.w	lr, [r5], #1
    c850:	rsb	lr, fp, r5
    c854:	cmp	lr, sl
    c856:	mov	r6, r0
    c858:	mov	r7, r1
    c85a:	mov.w	r2, #0
    c85e:	ldr	r3, [pc, #696]	; (cb18 <_dtoa_r+0x5f8>)
    c860:	bne.n	c808 <_dtoa_r+0x2e8>
    c862:	ldr.w	r9, [sp, #20]
    c866:	mov	r2, r6
    c868:	mov	r3, r7
    c86a:	mov	r0, r6
    c86c:	mov	r1, r7
    c86e:	bl	9dc8 <__adddf3>
    c872:	mov	r6, r0
    c874:	mov	r7, r1
    c876:	mov	r2, r0
    c878:	mov	r3, r1
    c87a:	ldrd	r0, r1, [sp]
    c87e:	bl	a610 <__aeabi_dcmplt>
    c882:	cbnz	r0, c896 <_dtoa_r+0x376>
    c884:	mov	r2, r6
    c886:	mov	r3, r7
    c888:	ldrd	r0, r1, [sp]
    c88c:	bl	a5fc <__aeabi_dcmpeq>
    c890:	cbz	r0, c8b6 <_dtoa_r+0x396>
    c892:	lsls	r3, r4, #31
    c894:	bpl.n	c8b6 <_dtoa_r+0x396>
    c896:	ldrb.w	r4, [r5, #-1]
    c89a:	ldr	r2, [sp, #36]	; 0x24
    c89c:	subs	r3, r5, #1
    c89e:	b.n	c8aa <_dtoa_r+0x38a>
    c8a0:	cmp	r2, r3
    c8a2:	beq.w	d09e <_dtoa_r+0xb7e>
    c8a6:	ldrb.w	r4, [r3, #-1]!
    c8aa:	cmp	r4, #57	; 0x39
    c8ac:	add.w	r5, r3, #1
    c8b0:	beq.n	c8a0 <_dtoa_r+0x380>
    c8b2:	adds	r4, #1
    c8b4:	strb	r4, [r3, #0]
    c8b6:	ldr	r1, [sp, #40]	; 0x28
    c8b8:	mov	r0, r9
    c8ba:	bl	bd60 <_Bfree>
    c8be:	movs	r2, #0
    c8c0:	ldr	r3, [sp, #16]
    c8c2:	strb	r2, [r5, #0]
    c8c4:	ldr	r2, [sp, #12]
    c8c6:	adds	r3, #1
    c8c8:	str	r3, [r2, #0]
    c8ca:	ldr	r3, [sp, #148]	; 0x94
    c8cc:	cmp	r3, #0
    c8ce:	beq.w	d008 <_dtoa_r+0xae8>
    c8d2:	ldr	r0, [sp, #36]	; 0x24
    c8d4:	str	r5, [r3, #0]
    c8d6:	add	sp, #108	; 0x6c
    c8d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8dc:	ldr	r2, [sp, #44]	; 0x2c
    c8de:	cmp	r2, #0
    c8e0:	beq.w	cb00 <_dtoa_r+0x5e0>
    c8e4:	ldr	r2, [sp, #0]
    c8e6:	cmp	r2, #1
    c8e8:	ble.w	cd9a <_dtoa_r+0x87a>
    c8ec:	ldr	r3, [sp, #32]
    c8ee:	ldr	r2, [sp, #24]
    c8f0:	subs	r7, r3, #1
    c8f2:	cmp	r2, r7
    c8f4:	blt.w	d00e <_dtoa_r+0xaee>
    c8f8:	subs	r7, r2, r7
    c8fa:	ldr	r3, [sp, #32]
    c8fc:	cmp	r3, #0
    c8fe:	blt.w	d202 <_dtoa_r+0xce2>
    c902:	ldr	r5, [sp, #28]
    c904:	ldr	r3, [sp, #32]
    c906:	ldr	r2, [sp, #28]
    c908:	movs	r1, #1
    c90a:	add	r2, r3
    c90c:	mov	r0, r9
    c90e:	str	r2, [sp, #28]
    c910:	add	r8, r3
    c912:	bl	be90 <__i2b>
    c916:	mov	r6, r0
    c918:	cbz	r5, c934 <_dtoa_r+0x414>
    c91a:	cmp.w	r8, #0
    c91e:	ble.n	c934 <_dtoa_r+0x414>
    c920:	cmp	r5, r8
    c922:	ldr	r2, [sp, #28]
    c924:	mov	r3, r5
    c926:	it	ge
    c928:	movge	r3, r8
    c92a:	subs	r2, r2, r3
    c92c:	str	r2, [sp, #28]
    c92e:	subs	r5, r5, r3
    c930:	rsb	r8, r3, r8
    c934:	ldr	r3, [sp, #24]
    c936:	cmp	r3, #0
    c938:	ble.w	cf26 <_dtoa_r+0xa06>
    c93c:	ldr	r2, [sp, #44]	; 0x2c
    c93e:	cmp	r2, #0
    c940:	beq.w	cd48 <_dtoa_r+0x828>
    c944:	cmp	r7, #0
    c946:	beq.w	cd48 <_dtoa_r+0x828>
    c94a:	mov	r1, r6
    c94c:	mov	r2, r7
    c94e:	mov	r0, r9
    c950:	bl	bfd4 <__pow5mult>
    c954:	ldr	r2, [sp, #40]	; 0x28
    c956:	mov	r1, r0
    c958:	mov	r6, r0
    c95a:	mov	r0, r9
    c95c:	bl	bea4 <__multiply>
    c960:	ldr	r1, [sp, #40]	; 0x28
    c962:	mov	r4, r0
    c964:	mov	r0, r9
    c966:	bl	bd60 <_Bfree>
    c96a:	ldr	r3, [sp, #24]
    c96c:	subs	r3, r3, r7
    c96e:	str	r3, [sp, #24]
    c970:	bne.w	cd46 <_dtoa_r+0x826>
    c974:	movs	r1, #1
    c976:	mov	r0, r9
    c978:	bl	be90 <__i2b>
    c97c:	ldr	r3, [sp, #48]	; 0x30
    c97e:	str	r0, [sp, #24]
    c980:	cmp	r3, #0
    c982:	beq.w	cdb0 <_dtoa_r+0x890>
    c986:	mov	r1, r0
    c988:	mov	r2, r3
    c98a:	mov	r0, r9
    c98c:	bl	bfd4 <__pow5mult>
    c990:	ldr	r3, [sp, #0]
    c992:	str	r0, [sp, #24]
    c994:	cmp	r3, #1
    c996:	ble.w	cf80 <_dtoa_r+0xa60>
    c99a:	movs	r7, #0
    c99c:	ldr	r2, [sp, #24]
    c99e:	ldr	r3, [r2, #16]
    c9a0:	add.w	r3, r2, r3, lsl #2
    c9a4:	ldr	r0, [r3, #16]
    c9a6:	bl	bdf4 <__hi0bits>
    c9aa:	rsb	r0, r0, #32
    c9ae:	add	r0, r8
    c9b0:	ands.w	r0, r0, #31
    c9b4:	beq.w	cdac <_dtoa_r+0x88c>
    c9b8:	rsb	r3, r0, #32
    c9bc:	cmp	r3, #4
    c9be:	ble.w	d33c <_dtoa_r+0xe1c>
    c9c2:	rsb	r0, r0, #28
    c9c6:	ldr	r3, [sp, #28]
    c9c8:	add	r3, r0
    c9ca:	str	r3, [sp, #28]
    c9cc:	add	r5, r0
    c9ce:	add	r8, r0
    c9d0:	ldr	r3, [sp, #28]
    c9d2:	cmp	r3, #0
    c9d4:	ble.n	c9e2 <_dtoa_r+0x4c2>
    c9d6:	mov	r1, r4
    c9d8:	mov	r2, r3
    c9da:	mov	r0, r9
    c9dc:	bl	c074 <__lshift>
    c9e0:	mov	r4, r0
    c9e2:	cmp.w	r8, #0
    c9e6:	ble.n	c9f4 <_dtoa_r+0x4d4>
    c9e8:	mov	r2, r8
    c9ea:	ldr	r1, [sp, #24]
    c9ec:	mov	r0, r9
    c9ee:	bl	c074 <__lshift>
    c9f2:	str	r0, [sp, #24]
    c9f4:	ldr	r3, [sp, #52]	; 0x34
    c9f6:	cmp	r3, #0
    c9f8:	bne.w	cef0 <_dtoa_r+0x9d0>
    c9fc:	ldr	r3, [sp, #32]
    c9fe:	cmp	r3, #0
    ca00:	ble.w	cf2a <_dtoa_r+0xa0a>
    ca04:	ldr	r3, [sp, #44]	; 0x2c
    ca06:	cmp	r3, #0
    ca08:	bne.w	cdf4 <_dtoa_r+0x8d4>
    ca0c:	ldr.w	fp, [sp, #36]	; 0x24
    ca10:	ldr	r7, [sp, #32]
    ca12:	ldr.w	r8, [sp, #24]
    ca16:	mov	r5, fp
    ca18:	b.n	ca20 <_dtoa_r+0x500>
    ca1a:	bl	bd74 <__multadd>
    ca1e:	mov	r4, r0
    ca20:	mov	r1, r8
    ca22:	mov	r0, r4
    ca24:	bl	c3f8 <quorem>
    ca28:	add.w	sl, r0, #48	; 0x30
    ca2c:	strb.w	sl, [r5], #1
    ca30:	rsb	r3, fp, r5
    ca34:	cmp	r3, r7
    ca36:	mov.w	r2, #10
    ca3a:	mov.w	r3, #0
    ca3e:	mov	r1, r4
    ca40:	mov	r0, r9
    ca42:	blt.n	ca1a <_dtoa_r+0x4fa>
    ca44:	ldr	r3, [sp, #36]	; 0x24
    ca46:	ldr	r2, [sp, #32]
    ca48:	cmp	r2, #1
    ca4a:	ite	ge
    ca4c:	addge	r3, r3, r2
    ca4e:	addlt	r3, #1
    ca50:	mov	r5, r3
    ca52:	mov.w	fp, #0
    ca56:	mov	r1, r4
    ca58:	movs	r2, #1
    ca5a:	mov	r0, r9
    ca5c:	bl	c074 <__lshift>
    ca60:	ldr	r1, [sp, #24]
    ca62:	str	r0, [sp, #40]	; 0x28
    ca64:	bl	c124 <__mcmp>
    ca68:	cmp	r0, #0
    ca6a:	ble.w	d078 <_dtoa_r+0xb58>
    ca6e:	ldrb.w	r2, [r5, #-1]
    ca72:	ldr	r1, [sp, #36]	; 0x24
    ca74:	subs	r3, r5, #1
    ca76:	b.n	ca82 <_dtoa_r+0x562>
    ca78:	cmp	r3, r1
    ca7a:	beq.w	cf66 <_dtoa_r+0xa46>
    ca7e:	ldrb.w	r2, [r3, #-1]!
    ca82:	cmp	r2, #57	; 0x39
    ca84:	add.w	r5, r3, #1
    ca88:	beq.n	ca78 <_dtoa_r+0x558>
    ca8a:	adds	r2, #1
    ca8c:	strb	r2, [r3, #0]
    ca8e:	ldr	r1, [sp, #24]
    ca90:	mov	r0, r9
    ca92:	bl	bd60 <_Bfree>
    ca96:	cmp	r6, #0
    ca98:	beq.w	c8b6 <_dtoa_r+0x396>
    ca9c:	cmp.w	fp, #0
    caa0:	beq.n	caae <_dtoa_r+0x58e>
    caa2:	cmp	fp, r6
    caa4:	beq.n	caae <_dtoa_r+0x58e>
    caa6:	mov	r1, fp
    caa8:	mov	r0, r9
    caaa:	bl	bd60 <_Bfree>
    caae:	mov	r1, r6
    cab0:	mov	r0, r9
    cab2:	bl	bd60 <_Bfree>
    cab6:	b.n	c8b6 <_dtoa_r+0x396>
    cab8:	movs	r3, #1
    caba:	str	r3, [sp, #52]	; 0x34
    cabc:	b.n	c696 <_dtoa_r+0x176>
    cabe:	ldr.w	r8, [sp, #16]
    cac2:	mov	r0, r8
    cac4:	bl	a060 <__aeabi_i2d>
    cac8:	mov	r2, r0
    caca:	mov	r3, r1
    cacc:	mov	r0, r6
    cace:	mov	r1, r7
    cad0:	bl	a5fc <__aeabi_dcmpeq>
    cad4:	cmp	r0, #0
    cad6:	bne.w	c66e <_dtoa_r+0x14e>
    cada:	add.w	r3, r8, #4294967295
    cade:	str	r3, [sp, #16]
    cae0:	b.n	c66e <_dtoa_r+0x14e>
    cae2:	ldr	r2, [sp, #28]
    cae4:	ldr	r3, [sp, #16]
    cae6:	subs	r2, r2, r3
    cae8:	negs	r3, r3
    caea:	str	r3, [sp, #24]
    caec:	movs	r3, #0
    caee:	str	r2, [sp, #28]
    caf0:	str	r3, [sp, #48]	; 0x30
    caf2:	b.n	c6b4 <_dtoa_r+0x194>
    caf4:	rsb	r3, r8, #0
    caf8:	str	r3, [sp, #28]
    cafa:	mov.w	r8, #0
    cafe:	b.n	c6a4 <_dtoa_r+0x184>
    cb00:	ldr	r7, [sp, #24]
    cb02:	ldr	r5, [sp, #28]
    cb04:	ldr	r6, [sp, #44]	; 0x2c
    cb06:	b.n	c918 <_dtoa_r+0x3f8>
    cb08:	rsb	r4, r3, #32
    cb0c:	lsl.w	r0, sl, r4
    cb10:	b.n	c608 <_dtoa_r+0xe8>
    cb12:	str	r0, [sp, #52]	; 0x34
    cb14:	b.n	c696 <_dtoa_r+0x176>
    cb16:	nop
    cb18:	.word	0x40240000
    cb1c:	movs	r3, #0
    cb1e:	str	r3, [sp, #44]	; 0x2c
    cb20:	ldr	r3, [sp, #16]
    cb22:	ldr	r2, [sp, #20]
    cb24:	add	r3, r2
    cb26:	str	r3, [sp, #56]	; 0x38
    cb28:	adds	r3, #1
    cb2a:	cmp	r3, #0
    cb2c:	str	r3, [sp, #32]
    cb2e:	ble.w	d02c <_dtoa_r+0xb0c>
    cb32:	ldr	r4, [sp, #32]
    cb34:	mov	r5, r4
    cb36:	movs	r1, #0
    cb38:	cmp	r5, #23
    cb3a:	str.w	r1, [r9, #68]	; 0x44
    cb3e:	bls.n	cb58 <_dtoa_r+0x638>
    cb40:	movs	r2, #1
    cb42:	movs	r3, #4
    cb44:	lsls	r3, r3, #1
    cb46:	add.w	r0, r3, #20
    cb4a:	cmp	r0, r5
    cb4c:	mov	r1, r2
    cb4e:	add.w	r2, r2, #1
    cb52:	bls.n	cb44 <_dtoa_r+0x624>
    cb54:	str.w	r1, [r9, #68]	; 0x44
    cb58:	mov	r0, r9
    cb5a:	bl	bd14 <_Balloc>
    cb5e:	cmp	r4, #14
    cb60:	str	r0, [sp, #36]	; 0x24
    cb62:	str.w	r0, [r9, #64]	; 0x40
    cb66:	bhi.w	c734 <_dtoa_r+0x214>
    cb6a:	cmp	r6, #0
    cb6c:	beq.w	c734 <_dtoa_r+0x214>
    cb70:	ldr	r1, [sp, #16]
    cb72:	cmp	r1, #0
    cb74:	strd	sl, fp, [sp, #64]	; 0x40
    cb78:	ble.w	d0b0 <_dtoa_r+0xb90>
    cb7c:	ldr	r3, [pc, #576]	; (cdc0 <_dtoa_r+0x8a0>)
    cb7e:	and.w	r2, r1, #15
    cb82:	asrs	r6, r1, #4
    cb84:	add.w	r3, r3, r2, lsl #3
    cb88:	lsls	r0, r6, #27
    cb8a:	ldrd	r4, r5, [r3]
    cb8e:	bpl.w	d01e <_dtoa_r+0xafe>
    cb92:	ldr	r3, [pc, #560]	; (cdc4 <_dtoa_r+0x8a4>)
    cb94:	mov	r0, sl
    cb96:	mov	r1, fp
    cb98:	ldrd	r2, r3, [r3, #32]
    cb9c:	bl	a380 <__aeabi_ddiv>
    cba0:	strd	r0, r1, [sp, #72]	; 0x48
    cba4:	and.w	r6, r6, #15
    cba8:	mov.w	sl, #3
    cbac:	cbz	r6, cbd0 <_dtoa_r+0x6b0>
    cbae:	ldr	r7, [pc, #532]	; (cdc4 <_dtoa_r+0x8a4>)
    cbb0:	lsls	r1, r6, #31
    cbb2:	bpl.n	cbc8 <_dtoa_r+0x6a8>
    cbb4:	mov	r0, r4
    cbb6:	mov	r1, r5
    cbb8:	ldrd	r2, r3, [r7]
    cbbc:	bl	a12c <__aeabi_dmul>
    cbc0:	add.w	sl, sl, #1
    cbc4:	mov	r4, r0
    cbc6:	mov	r5, r1
    cbc8:	asrs	r6, r6, #1
    cbca:	add.w	r7, r7, #8
    cbce:	bne.n	cbb0 <_dtoa_r+0x690>
    cbd0:	mov	r2, r4
    cbd2:	mov	r3, r5
    cbd4:	ldrd	r0, r1, [sp, #72]	; 0x48
    cbd8:	bl	a380 <__aeabi_ddiv>
    cbdc:	mov	r6, r0
    cbde:	mov	r7, r1
    cbe0:	ldr	r3, [sp, #52]	; 0x34
    cbe2:	cbz	r3, cbf6 <_dtoa_r+0x6d6>
    cbe4:	movs	r2, #0
    cbe6:	ldr	r3, [pc, #480]	; (cdc8 <_dtoa_r+0x8a8>)
    cbe8:	mov	r0, r6
    cbea:	mov	r1, r7
    cbec:	bl	a610 <__aeabi_dcmplt>
    cbf0:	cmp	r0, #0
    cbf2:	bne.w	d22a <_dtoa_r+0xd0a>
    cbf6:	mov	r0, sl
    cbf8:	bl	a060 <__aeabi_i2d>
    cbfc:	mov	r2, r6
    cbfe:	mov	r3, r7
    cc00:	bl	a12c <__aeabi_dmul>
    cc04:	ldr	r3, [pc, #452]	; (cdcc <_dtoa_r+0x8ac>)
    cc06:	movs	r2, #0
    cc08:	bl	9dc8 <__adddf3>
    cc0c:	ldr	r3, [sp, #32]
    cc0e:	mov	r4, r0
    cc10:	sub.w	r5, r1, #54525952	; 0x3400000
    cc14:	cmp	r3, #0
    cc16:	beq.w	cfd0 <_dtoa_r+0xab0>
    cc1a:	ldr	r3, [sp, #16]
    cc1c:	str	r3, [sp, #88]	; 0x58
    cc1e:	ldr	r3, [sp, #32]
    cc20:	str	r3, [sp, #72]	; 0x48
    cc22:	ldr	r3, [sp, #44]	; 0x2c
    cc24:	cmp	r3, #0
    cc26:	beq.w	d152 <_dtoa_r+0xc32>
    cc2a:	ldr	r2, [sp, #72]	; 0x48
    cc2c:	ldr	r3, [pc, #400]	; (cdc0 <_dtoa_r+0x8a0>)
    cc2e:	ldr	r1, [pc, #416]	; (cdd0 <_dtoa_r+0x8b0>)
    cc30:	add.w	r3, r3, r2, lsl #3
    cc34:	ldrd	r2, r3, [r3, #-8]
    cc38:	movs	r0, #0
    cc3a:	bl	a380 <__aeabi_ddiv>
    cc3e:	mov	r2, r4
    cc40:	mov	r3, r5
    cc42:	bl	9dc4 <__aeabi_dsub>
    cc46:	mov	sl, r0
    cc48:	mov	fp, r1
    cc4a:	mov	r0, r6
    cc4c:	mov	r1, r7
    cc4e:	bl	a68c <__aeabi_d2iz>
    cc52:	mov	r4, r0
    cc54:	bl	a060 <__aeabi_i2d>
    cc58:	mov	r2, r0
    cc5a:	mov	r3, r1
    cc5c:	mov	r0, r6
    cc5e:	mov	r1, r7
    cc60:	bl	9dc4 <__aeabi_dsub>
    cc64:	adds	r4, #48	; 0x30
    cc66:	ldr	r5, [sp, #36]	; 0x24
    cc68:	uxtb	r4, r4
    cc6a:	mov	r6, r0
    cc6c:	mov	r7, r1
    cc6e:	strb	r4, [r5, #0]
    cc70:	mov	r2, r0
    cc72:	mov	r3, r1
    cc74:	mov	r0, sl
    cc76:	mov	r1, fp
    cc78:	adds	r5, #1
    cc7a:	bl	a64c <__aeabi_dcmpgt>
    cc7e:	cmp	r0, #0
    cc80:	bne.n	cd24 <_dtoa_r+0x804>
    cc82:	mov	r2, r6
    cc84:	mov	r3, r7
    cc86:	movs	r0, #0
    cc88:	ldr	r1, [pc, #316]	; (cdc8 <_dtoa_r+0x8a8>)
    cc8a:	bl	9dc4 <__aeabi_dsub>
    cc8e:	mov	r2, r0
    cc90:	mov	r3, r1
    cc92:	mov	r0, sl
    cc94:	mov	r1, fp
    cc96:	bl	a64c <__aeabi_dcmpgt>
    cc9a:	cmp	r0, #0
    cc9c:	bne.w	d2b0 <_dtoa_r+0xd90>
    cca0:	ldr	r2, [sp, #72]	; 0x48
    cca2:	cmp	r2, #1
    cca4:	ble.w	d096 <_dtoa_r+0xb76>
    cca8:	ldr	r3, [sp, #72]	; 0x48
    ccaa:	ldr	r2, [sp, #36]	; 0x24
    ccac:	str.w	r8, [sp, #72]	; 0x48
    ccb0:	add	r3, r2
    ccb2:	mov	r8, r3
    ccb4:	b.n	ccd2 <_dtoa_r+0x7b2>
    ccb6:	movs	r0, #0
    ccb8:	ldr	r1, [pc, #268]	; (cdc8 <_dtoa_r+0x8a8>)
    ccba:	bl	9dc4 <__aeabi_dsub>
    ccbe:	mov	r2, sl
    ccc0:	mov	r3, fp
    ccc2:	bl	a610 <__aeabi_dcmplt>
    ccc6:	cmp	r0, #0
    ccc8:	bne.w	d2b0 <_dtoa_r+0xd90>
    cccc:	cmp	r5, r8
    ccce:	beq.w	d092 <_dtoa_r+0xb72>
    ccd2:	mov	r0, sl
    ccd4:	mov	r1, fp
    ccd6:	movs	r2, #0
    ccd8:	ldr	r3, [pc, #248]	; (cdd4 <_dtoa_r+0x8b4>)
    ccda:	bl	a12c <__aeabi_dmul>
    ccde:	movs	r2, #0
    cce0:	ldr	r3, [pc, #240]	; (cdd4 <_dtoa_r+0x8b4>)
    cce2:	mov	sl, r0
    cce4:	mov	fp, r1
    cce6:	mov	r0, r6
    cce8:	mov	r1, r7
    ccea:	bl	a12c <__aeabi_dmul>
    ccee:	mov	r7, r1
    ccf0:	mov	r6, r0
    ccf2:	bl	a68c <__aeabi_d2iz>
    ccf6:	mov	r4, r0
    ccf8:	bl	a060 <__aeabi_i2d>
    ccfc:	mov	r2, r0
    ccfe:	mov	r3, r1
    cd00:	mov	r0, r6
    cd02:	mov	r1, r7
    cd04:	bl	9dc4 <__aeabi_dsub>
    cd08:	adds	r4, #48	; 0x30
    cd0a:	uxtb	r4, r4
    cd0c:	mov	r2, sl
    cd0e:	mov	r3, fp
    cd10:	strb.w	r4, [r5], #1
    cd14:	mov	r6, r0
    cd16:	mov	r7, r1
    cd18:	bl	a610 <__aeabi_dcmplt>
    cd1c:	mov	r2, r6
    cd1e:	mov	r3, r7
    cd20:	cmp	r0, #0
    cd22:	beq.n	ccb6 <_dtoa_r+0x796>
    cd24:	ldr	r3, [sp, #88]	; 0x58
    cd26:	str	r3, [sp, #16]
    cd28:	b.n	c8b6 <_dtoa_r+0x396>
    cd2a:	movs	r3, #0
    cd2c:	str	r3, [sp, #44]	; 0x2c
    cd2e:	ldr	r3, [sp, #20]
    cd30:	cmp	r3, #0
    cd32:	ble.w	d036 <_dtoa_r+0xb16>
    cd36:	mov	r5, r3
    cd38:	mov	r4, r3
    cd3a:	str	r3, [sp, #56]	; 0x38
    cd3c:	str	r3, [sp, #32]
    cd3e:	b.n	cb36 <_dtoa_r+0x616>
    cd40:	movs	r3, #1
    cd42:	str	r3, [sp, #44]	; 0x2c
    cd44:	b.n	cd2e <_dtoa_r+0x80e>
    cd46:	str	r4, [sp, #40]	; 0x28
    cd48:	ldr	r2, [sp, #24]
    cd4a:	ldr	r1, [sp, #40]	; 0x28
    cd4c:	mov	r0, r9
    cd4e:	bl	bfd4 <__pow5mult>
    cd52:	mov	r4, r0
    cd54:	b.n	c974 <_dtoa_r+0x454>
    cd56:	ldr	r3, [sp, #32]
    cd58:	cmp	r3, #0
    cd5a:	bgt.w	c75a <_dtoa_r+0x23a>
    cd5e:	bne.w	d000 <_dtoa_r+0xae0>
    cd62:	movs	r2, #0
    cd64:	ldr	r3, [pc, #112]	; (cdd8 <_dtoa_r+0x8b8>)
    cd66:	ldrd	r0, r1, [sp]
    cd6a:	bl	a12c <__aeabi_dmul>
    cd6e:	mov	r3, fp
    cd70:	mov	r2, sl
    cd72:	bl	a638 <__aeabi_dcmpge>
    cd76:	ldr	r3, [sp, #32]
    cd78:	str	r3, [sp, #24]
    cd7a:	mov	r6, r3
    cd7c:	cmp	r0, #0
    cd7e:	beq.w	cf56 <_dtoa_r+0xa36>
    cd82:	ldr	r3, [sp, #20]
    cd84:	ldr	r5, [sp, #36]	; 0x24
    cd86:	mvns	r3, r3
    cd88:	str	r3, [sp, #16]
    cd8a:	ldr	r1, [sp, #24]
    cd8c:	mov	r0, r9
    cd8e:	bl	bd60 <_Bfree>
    cd92:	cmp	r6, #0
    cd94:	beq.w	c8b6 <_dtoa_r+0x396>
    cd98:	b.n	caae <_dtoa_r+0x58e>
    cd9a:	ldr	r2, [sp, #60]	; 0x3c
    cd9c:	cmp	r2, #0
    cd9e:	beq.w	d212 <_dtoa_r+0xcf2>
    cda2:	addw	r3, r3, #1075	; 0x433
    cda6:	ldr	r7, [sp, #24]
    cda8:	ldr	r5, [sp, #28]
    cdaa:	b.n	c906 <_dtoa_r+0x3e6>
    cdac:	movs	r0, #28
    cdae:	b.n	c9c6 <_dtoa_r+0x4a6>
    cdb0:	ldr	r3, [sp, #0]
    cdb2:	cmp	r3, #1
    cdb4:	ble.w	d2b8 <_dtoa_r+0xd98>
    cdb8:	ldr	r7, [sp, #48]	; 0x30
    cdba:	movs	r0, #1
    cdbc:	b.n	c9ae <_dtoa_r+0x48e>
    cdbe:	nop
    cdc0:	.word	0x20000748
    cdc4:	.word	0x20000810
    cdc8:	.word	0x3ff00000
    cdcc:	.word	0x401c0000
    cdd0:	.word	0x3fe00000
    cdd4:	.word	0x40240000
    cdd8:	.word	0x40140000
    cddc:	mov	r1, r6
    cdde:	movs	r3, #0
    cde0:	movs	r2, #10
    cde2:	mov	r0, r9
    cde4:	bl	bd74 <__multadd>
    cde8:	ldr	r3, [sp, #56]	; 0x38
    cdea:	cmp	r3, #0
    cdec:	mov	r6, r0
    cdee:	ble.w	d30c <_dtoa_r+0xdec>
    cdf2:	str	r3, [sp, #32]
    cdf4:	cmp	r5, #0
    cdf6:	ble.n	ce04 <_dtoa_r+0x8e4>
    cdf8:	mov	r1, r6
    cdfa:	mov	r2, r5
    cdfc:	mov	r0, r9
    cdfe:	bl	c074 <__lshift>
    ce02:	mov	r6, r0
    ce04:	cmp	r7, #0
    ce06:	bne.w	d102 <_dtoa_r+0xbe2>
    ce0a:	mov	r8, r6
    ce0c:	ldr	r3, [sp, #32]
    ce0e:	ldr	r2, [sp, #36]	; 0x24
    ce10:	subs	r3, #1
    ce12:	adds	r3, r2, r3
    ce14:	str	r3, [sp, #32]
    ce16:	and.w	r3, sl, #1
    ce1a:	str	r3, [sp, #40]	; 0x28
    ce1c:	mov	r7, r2
    ce1e:	ldr.w	fp, [sp, #24]
    ce22:	mov	r0, r4
    ce24:	mov	r1, fp
    ce26:	bl	c3f8 <quorem>
    ce2a:	mov	r1, r6
    ce2c:	mov	r5, r0
    ce2e:	mov	r0, r4
    ce30:	bl	c124 <__mcmp>
    ce34:	mov	r2, r8
    ce36:	mov	r1, fp
    ce38:	mov	sl, r0
    ce3a:	mov	r0, r9
    ce3c:	bl	c168 <__mdiff>
    ce40:	ldr	r2, [r0, #12]
    ce42:	mov	fp, r0
    ce44:	add.w	r3, r5, #48	; 0x30
    ce48:	cmp	r2, #0
    ce4a:	bne.n	cee0 <_dtoa_r+0x9c0>
    ce4c:	mov	r1, r0
    ce4e:	mov	r0, r4
    ce50:	str	r3, [sp, #28]
    ce52:	bl	c124 <__mcmp>
    ce56:	mov	r1, fp
    ce58:	str	r0, [sp, #20]
    ce5a:	mov	r0, r9
    ce5c:	bl	bd60 <_Bfree>
    ce60:	ldr	r2, [sp, #20]
    ce62:	ldr	r3, [sp, #28]
    ce64:	cbnz	r2, ce72 <_dtoa_r+0x952>
    ce66:	ldr	r1, [sp, #0]
    ce68:	cbnz	r1, ce72 <_dtoa_r+0x952>
    ce6a:	ldr	r1, [sp, #40]	; 0x28
    ce6c:	cmp	r1, #0
    ce6e:	beq.w	d2dc <_dtoa_r+0xdbc>
    ce72:	cmp.w	sl, #0
    ce76:	blt.w	d040 <_dtoa_r+0xb20>
    ce7a:	bne.n	ce88 <_dtoa_r+0x968>
    ce7c:	ldr	r1, [sp, #0]
    ce7e:	cbnz	r1, ce88 <_dtoa_r+0x968>
    ce80:	ldr	r1, [sp, #40]	; 0x28
    ce82:	cmp	r1, #0
    ce84:	beq.w	d040 <_dtoa_r+0xb20>
    ce88:	cmp	r2, #0
    ce8a:	bgt.w	d12a <_dtoa_r+0xc0a>
    ce8e:	ldr	r2, [sp, #32]
    ce90:	strb	r3, [r7, #0]
    ce92:	add.w	sl, r7, #1
    ce96:	cmp	r7, r2
    ce98:	mov	r5, sl
    ce9a:	beq.w	d142 <_dtoa_r+0xc22>
    ce9e:	mov	r1, r4
    cea0:	movs	r3, #0
    cea2:	movs	r2, #10
    cea4:	mov	r0, r9
    cea6:	bl	bd74 <__multadd>
    ceaa:	cmp	r6, r8
    ceac:	mov	r4, r0
    ceae:	mov	r1, r6
    ceb0:	mov.w	r3, #0
    ceb4:	mov.w	r2, #10
    ceb8:	mov	r0, r9
    ceba:	beq.n	ced4 <_dtoa_r+0x9b4>
    cebc:	bl	bd74 <__multadd>
    cec0:	mov	r1, r8
    cec2:	mov	r6, r0
    cec4:	movs	r3, #0
    cec6:	movs	r2, #10
    cec8:	mov	r0, r9
    ceca:	bl	bd74 <__multadd>
    cece:	mov	r7, sl
    ced0:	mov	r8, r0
    ced2:	b.n	ce1e <_dtoa_r+0x8fe>
    ced4:	bl	bd74 <__multadd>
    ced8:	mov	r7, sl
    ceda:	mov	r6, r0
    cedc:	mov	r8, r0
    cede:	b.n	ce1e <_dtoa_r+0x8fe>
    cee0:	mov	r1, r0
    cee2:	mov	r0, r9
    cee4:	str	r3, [sp, #20]
    cee6:	bl	bd60 <_Bfree>
    ceea:	movs	r2, #1
    ceec:	ldr	r3, [sp, #20]
    ceee:	b.n	ce72 <_dtoa_r+0x952>
    cef0:	ldr	r1, [sp, #24]
    cef2:	mov	r0, r4
    cef4:	bl	c124 <__mcmp>
    cef8:	cmp	r0, #0
    cefa:	bge.w	c9fc <_dtoa_r+0x4dc>
    cefe:	mov	r1, r4
    cf00:	ldr	r4, [sp, #16]
    cf02:	movs	r3, #0
    cf04:	subs	r4, #1
    cf06:	movs	r2, #10
    cf08:	mov	r0, r9
    cf0a:	str	r4, [sp, #16]
    cf0c:	bl	bd74 <__multadd>
    cf10:	ldr	r3, [sp, #44]	; 0x2c
    cf12:	mov	r4, r0
    cf14:	cmp	r3, #0
    cf16:	bne.w	cddc <_dtoa_r+0x8bc>
    cf1a:	ldr	r3, [sp, #56]	; 0x38
    cf1c:	cmp	r3, #0
    cf1e:	ble.w	d2fc <_dtoa_r+0xddc>
    cf22:	str	r3, [sp, #32]
    cf24:	b.n	ca0c <_dtoa_r+0x4ec>
    cf26:	ldr	r4, [sp, #40]	; 0x28
    cf28:	b.n	c974 <_dtoa_r+0x454>
    cf2a:	ldr	r3, [sp, #0]
    cf2c:	cmp	r3, #2
    cf2e:	ble.w	ca04 <_dtoa_r+0x4e4>
    cf32:	ldr	r3, [sp, #32]
    cf34:	cmp	r3, #0
    cf36:	bne.w	d274 <_dtoa_r+0xd54>
    cf3a:	ldr	r1, [sp, #24]
    cf3c:	movs	r2, #5
    cf3e:	mov	r0, r9
    cf40:	bl	bd74 <__multadd>
    cf44:	mov	r1, r0
    cf46:	str	r0, [sp, #24]
    cf48:	mov	r0, r4
    cf4a:	bl	c124 <__mcmp>
    cf4e:	cmp	r0, #0
    cf50:	str	r4, [sp, #40]	; 0x28
    cf52:	ble.w	cd82 <_dtoa_r+0x862>
    cf56:	ldr	r2, [sp, #16]
    cf58:	ldr	r1, [sp, #36]	; 0x24
    cf5a:	movs	r3, #49	; 0x31
    cf5c:	adds	r2, #1
    cf5e:	str	r2, [sp, #16]
    cf60:	strb	r3, [r1, #0]
    cf62:	adds	r5, r1, #1
    cf64:	b.n	cd8a <_dtoa_r+0x86a>
    cf66:	ldr	r2, [sp, #16]
    cf68:	adds	r2, #1
    cf6a:	str	r2, [sp, #16]
    cf6c:	ldr	r2, [sp, #36]	; 0x24
    cf6e:	movs	r3, #49	; 0x31
    cf70:	strb	r3, [r2, #0]
    cf72:	b.n	ca8e <_dtoa_r+0x56e>
    cf74:	movs	r3, #1
    cf76:	str	r3, [sp, #44]	; 0x2c
    cf78:	b.n	cb20 <_dtoa_r+0x600>
    cf7a:	ldr.w	r9, [sp, #20]
    cf7e:	b.n	c8b6 <_dtoa_r+0x396>
    cf80:	cmp.w	sl, #0
    cf84:	bne.w	c99a <_dtoa_r+0x47a>
    cf88:	ubfx	r3, fp, #0, #20
    cf8c:	cmp	r3, #0
    cf8e:	bne.w	d20e <_dtoa_r+0xcee>
    cf92:	bic.w	r7, fp, #2147483648	; 0x80000000
    cf96:	lsrs	r7, r7, #20
    cf98:	lsls	r7, r7, #20
    cf9a:	cbz	r7, cfa8 <_dtoa_r+0xa88>
    cf9c:	ldr	r3, [sp, #28]
    cf9e:	adds	r3, #1
    cfa0:	str	r3, [sp, #28]
    cfa2:	add.w	r8, r8, #1
    cfa6:	movs	r7, #1
    cfa8:	ldr	r3, [sp, #48]	; 0x30
    cfaa:	movs	r0, #1
    cfac:	cmp	r3, #0
    cfae:	beq.w	c9ae <_dtoa_r+0x48e>
    cfb2:	b.n	c99c <_dtoa_r+0x47c>
    cfb4:	mov	r0, sl
    cfb6:	bl	a060 <__aeabi_i2d>
    cfba:	mov	r2, r6
    cfbc:	mov	r3, r7
    cfbe:	bl	a12c <__aeabi_dmul>
    cfc2:	movs	r2, #0
    cfc4:	ldr	r3, [pc, #764]	; (d2c4 <_dtoa_r+0xda4>)
    cfc6:	bl	9dc8 <__adddf3>
    cfca:	mov	r4, r0
    cfcc:	sub.w	r5, r1, #54525952	; 0x3400000
    cfd0:	mov	r0, r6
    cfd2:	mov	r1, r7
    cfd4:	movs	r2, #0
    cfd6:	ldr	r3, [pc, #752]	; (d2c8 <_dtoa_r+0xda8>)
    cfd8:	bl	9dc4 <__aeabi_dsub>
    cfdc:	mov	r2, r4
    cfde:	mov	r3, r5
    cfe0:	mov	r6, r0
    cfe2:	mov	r7, r1
    cfe4:	bl	a64c <__aeabi_dcmpgt>
    cfe8:	cmp	r0, #0
    cfea:	bne.w	d14a <_dtoa_r+0xc2a>
    cfee:	mov	r2, r4
    cff0:	add.w	r3, r5, #2147483648	; 0x80000000
    cff4:	mov	r0, r6
    cff6:	mov	r1, r7
    cff8:	bl	a610 <__aeabi_dcmplt>
    cffc:	cmp	r0, #0
    cffe:	beq.n	d096 <_dtoa_r+0xb76>
    d000:	movs	r3, #0
    d002:	str	r3, [sp, #24]
    d004:	mov	r6, r3
    d006:	b.n	cd82 <_dtoa_r+0x862>
    d008:	ldr	r0, [sp, #36]	; 0x24
    d00a:	b.w	c592 <_dtoa_r+0x72>
    d00e:	ldr	r3, [sp, #24]
    d010:	ldr	r2, [sp, #48]	; 0x30
    d012:	str	r7, [sp, #24]
    d014:	subs	r3, r7, r3
    d016:	add	r2, r3
    d018:	str	r2, [sp, #48]	; 0x30
    d01a:	movs	r7, #0
    d01c:	b.n	c8fa <_dtoa_r+0x3da>
    d01e:	vldr	d7, [sp, #64]	; 0x40
    d022:	mov.w	sl, #2
    d026:	vstr	d7, [sp, #72]	; 0x48
    d02a:	b.n	cbac <_dtoa_r+0x68c>
    d02c:	mov	r4, r3
    d02e:	movs	r1, #0
    d030:	str.w	r1, [r9, #68]	; 0x44
    d034:	b.n	cb58 <_dtoa_r+0x638>
    d036:	movs	r4, #1
    d038:	str	r4, [sp, #56]	; 0x38
    d03a:	str	r4, [sp, #32]
    d03c:	str	r4, [sp, #20]
    d03e:	b.n	d02e <_dtoa_r+0xb0e>
    d040:	cmp	r2, #0
    d042:	mov	sl, r3
    d044:	ble.n	d06a <_dtoa_r+0xb4a>
    d046:	mov	r1, r4
    d048:	movs	r2, #1
    d04a:	mov	r0, r9
    d04c:	bl	c074 <__lshift>
    d050:	ldr	r1, [sp, #24]
    d052:	mov	r4, r0
    d054:	bl	c124 <__mcmp>
    d058:	cmp	r0, #0
    d05a:	ble.w	d2ee <_dtoa_r+0xdce>
    d05e:	cmp.w	sl, #57	; 0x39
    d062:	beq.w	d278 <_dtoa_r+0xd58>
    d066:	add.w	sl, r5, #49	; 0x31
    d06a:	mov	fp, r6
    d06c:	strb.w	sl, [r7]
    d070:	adds	r5, r7, #1
    d072:	mov	r6, r8
    d074:	str	r4, [sp, #40]	; 0x28
    d076:	b.n	ca8e <_dtoa_r+0x56e>
    d078:	bne.n	d084 <_dtoa_r+0xb64>
    d07a:	tst.w	sl, #1
    d07e:	beq.n	d084 <_dtoa_r+0xb64>
    d080:	b.n	ca6e <_dtoa_r+0x54e>
    d082:	mov	r5, r2
    d084:	ldrb.w	r3, [r5, #-1]
    d088:	cmp	r3, #48	; 0x30
    d08a:	add.w	r2, r5, #4294967295
    d08e:	beq.n	d082 <_dtoa_r+0xb62>
    d090:	b.n	ca8e <_dtoa_r+0x56e>
    d092:	ldr.w	r8, [sp, #72]	; 0x48
    d096:	ldrd	sl, fp, [sp, #64]	; 0x40
    d09a:	b.w	c734 <_dtoa_r+0x214>
    d09e:	ldr	r1, [sp, #36]	; 0x24
    d0a0:	movs	r2, #48	; 0x30
    d0a2:	strb	r2, [r1, #0]
    d0a4:	ldr	r2, [sp, #16]
    d0a6:	ldrb.w	r4, [r5, #-1]
    d0aa:	adds	r2, #1
    d0ac:	str	r2, [sp, #16]
    d0ae:	b.n	c8b2 <_dtoa_r+0x392>
    d0b0:	ldr	r3, [sp, #16]
    d0b2:	negs	r4, r3
    d0b4:	cmp	r4, #0
    d0b6:	beq.w	d220 <_dtoa_r+0xd00>
    d0ba:	ldr	r3, [pc, #528]	; (d2cc <_dtoa_r+0xdac>)
    d0bc:	and.w	r2, r4, #15
    d0c0:	add.w	r3, r3, r2, lsl #3
    d0c4:	ldrd	r2, r3, [r3]
    d0c8:	ldrd	r0, r1, [sp, #64]	; 0x40
    d0cc:	bl	a12c <__aeabi_dmul>
    d0d0:	asrs	r4, r4, #4
    d0d2:	mov	r6, r0
    d0d4:	mov	r7, r1
    d0d6:	beq.w	d306 <_dtoa_r+0xde6>
    d0da:	ldr	r5, [pc, #500]	; (d2d0 <_dtoa_r+0xdb0>)
    d0dc:	mov.w	sl, #2
    d0e0:	lsls	r2, r4, #31
    d0e2:	bpl.n	d0f8 <_dtoa_r+0xbd8>
    d0e4:	mov	r0, r6
    d0e6:	mov	r1, r7
    d0e8:	ldrd	r2, r3, [r5]
    d0ec:	bl	a12c <__aeabi_dmul>
    d0f0:	add.w	sl, sl, #1
    d0f4:	mov	r6, r0
    d0f6:	mov	r7, r1
    d0f8:	asrs	r4, r4, #1
    d0fa:	add.w	r5, r5, #8
    d0fe:	bne.n	d0e0 <_dtoa_r+0xbc0>
    d100:	b.n	cbe0 <_dtoa_r+0x6c0>
    d102:	ldr	r1, [r6, #4]
    d104:	mov	r0, r9
    d106:	bl	bd14 <_Balloc>
    d10a:	ldr	r3, [r6, #16]
    d10c:	adds	r2, r3, #2
    d10e:	mov	r5, r0
    d110:	lsls	r2, r2, #2
    d112:	add.w	r1, r6, #12
    d116:	adds	r0, #12
    d118:	bl	7fc4 <memcpy>
    d11c:	mov	r1, r5
    d11e:	movs	r2, #1
    d120:	mov	r0, r9
    d122:	bl	c074 <__lshift>
    d126:	mov	r8, r0
    d128:	b.n	ce0c <_dtoa_r+0x8ec>
    d12a:	cmp	r3, #57	; 0x39
    d12c:	beq.w	d278 <_dtoa_r+0xd58>
    d130:	add.w	sl, r3, #1
    d134:	mov	fp, r6
    d136:	strb.w	sl, [r7]
    d13a:	adds	r5, r7, #1
    d13c:	mov	r6, r8
    d13e:	str	r4, [sp, #40]	; 0x28
    d140:	b.n	ca8e <_dtoa_r+0x56e>
    d142:	mov	fp, r6
    d144:	mov	sl, r3
    d146:	mov	r6, r8
    d148:	b.n	ca56 <_dtoa_r+0x536>
    d14a:	movs	r3, #0
    d14c:	str	r3, [sp, #24]
    d14e:	mov	r6, r3
    d150:	b.n	cf56 <_dtoa_r+0xa36>
    d152:	ldr	r3, [sp, #72]	; 0x48
    d154:	ldr	r1, [pc, #372]	; (d2cc <_dtoa_r+0xdac>)
    d156:	subs	r2, r3, #1
    d158:	add.w	r1, r1, r2, lsl #3
    d15c:	mov	r3, r5
    d15e:	str	r2, [sp, #92]	; 0x5c
    d160:	ldrd	r0, r1, [r1]
    d164:	mov	r2, r4
    d166:	bl	a12c <__aeabi_dmul>
    d16a:	strd	r0, r1, [sp, #80]	; 0x50
    d16e:	mov	r1, r7
    d170:	mov	r0, r6
    d172:	bl	a68c <__aeabi_d2iz>
    d176:	mov	r4, r0
    d178:	bl	a060 <__aeabi_i2d>
    d17c:	mov	r3, r1
    d17e:	mov	r2, r0
    d180:	mov	r1, r7
    d182:	mov	r0, r6
    d184:	bl	9dc4 <__aeabi_dsub>
    d188:	ldr	r3, [sp, #72]	; 0x48
    d18a:	mov	r7, r1
    d18c:	ldr	r1, [sp, #36]	; 0x24
    d18e:	adds	r4, #48	; 0x30
    d190:	cmp	r3, #1
    d192:	mov	r6, r0
    d194:	strb	r4, [r1, #0]
    d196:	add.w	r5, r1, #1
    d19a:	beq.n	d1de <_dtoa_r+0xcbe>
    d19c:	ldr	r3, [sp, #72]	; 0x48
    d19e:	ldr	r2, [sp, #36]	; 0x24
    d1a0:	add	r3, r2
    d1a2:	mov	sl, r3
    d1a4:	mov	fp, r5
    d1a6:	movs	r2, #0
    d1a8:	ldr	r3, [pc, #296]	; (d2d4 <_dtoa_r+0xdb4>)
    d1aa:	mov	r0, r6
    d1ac:	mov	r1, r7
    d1ae:	bl	a12c <__aeabi_dmul>
    d1b2:	mov	r7, r1
    d1b4:	mov	r6, r0
    d1b6:	bl	a68c <__aeabi_d2iz>
    d1ba:	mov	r4, r0
    d1bc:	bl	a060 <__aeabi_i2d>
    d1c0:	adds	r4, #48	; 0x30
    d1c2:	mov	r2, r0
    d1c4:	mov	r3, r1
    d1c6:	mov	r0, r6
    d1c8:	mov	r1, r7
    d1ca:	bl	9dc4 <__aeabi_dsub>
    d1ce:	strb.w	r4, [fp], #1
    d1d2:	cmp	sl, fp
    d1d4:	mov	r6, r0
    d1d6:	mov	r7, r1
    d1d8:	bne.n	d1a6 <_dtoa_r+0xc86>
    d1da:	ldr	r3, [sp, #92]	; 0x5c
    d1dc:	add	r5, r3
    d1de:	movs	r2, #0
    d1e0:	ldr	r3, [pc, #244]	; (d2d8 <_dtoa_r+0xdb8>)
    d1e2:	ldrd	r0, r1, [sp, #80]	; 0x50
    d1e6:	bl	9dc8 <__adddf3>
    d1ea:	mov	r2, r6
    d1ec:	mov	r3, r7
    d1ee:	bl	a610 <__aeabi_dcmplt>
    d1f2:	cmp	r0, #0
    d1f4:	beq.n	d288 <_dtoa_r+0xd68>
    d1f6:	ldr	r3, [sp, #88]	; 0x58
    d1f8:	str	r3, [sp, #16]
    d1fa:	ldrb.w	r4, [r5, #-1]
    d1fe:	b.w	c89a <_dtoa_r+0x37a>
    d202:	ldr	r3, [sp, #28]
    d204:	ldr	r2, [sp, #32]
    d206:	subs	r5, r3, r2
    d208:	movs	r3, #0
    d20a:	b.w	c906 <_dtoa_r+0x3e6>
    d20e:	movs	r7, #0
    d210:	b.n	cfa8 <_dtoa_r+0xa88>
    d212:	ldr	r3, [sp, #96]	; 0x60
    d214:	ldr	r7, [sp, #24]
    d216:	ldr	r5, [sp, #28]
    d218:	rsb	r3, r3, #54	; 0x36
    d21c:	b.w	c906 <_dtoa_r+0x3e6>
    d220:	ldrd	r6, r7, [sp, #64]	; 0x40
    d224:	mov.w	sl, #2
    d228:	b.n	cbe0 <_dtoa_r+0x6c0>
    d22a:	ldr	r3, [sp, #32]
    d22c:	cmp	r3, #0
    d22e:	beq.w	cfb4 <_dtoa_r+0xa94>
    d232:	ldr	r3, [sp, #56]	; 0x38
    d234:	cmp	r3, #0
    d236:	ble.w	d096 <_dtoa_r+0xb76>
    d23a:	movs	r2, #0
    d23c:	ldr	r3, [pc, #148]	; (d2d4 <_dtoa_r+0xdb4>)
    d23e:	mov	r0, r6
    d240:	mov	r1, r7
    d242:	bl	a12c <__aeabi_dmul>
    d246:	mov	r6, r0
    d248:	mov	r7, r1
    d24a:	add.w	r0, sl, #1
    d24e:	bl	a060 <__aeabi_i2d>
    d252:	mov	r2, r6
    d254:	mov	r3, r7
    d256:	bl	a12c <__aeabi_dmul>
    d25a:	movs	r2, #0
    d25c:	ldr	r3, [pc, #100]	; (d2c4 <_dtoa_r+0xda4>)
    d25e:	bl	9dc8 <__adddf3>
    d262:	ldr	r2, [sp, #16]
    d264:	ldr	r3, [sp, #56]	; 0x38
    d266:	str	r3, [sp, #72]	; 0x48
    d268:	subs	r2, #1
    d26a:	mov	r4, r0
    d26c:	sub.w	r5, r1, #54525952	; 0x3400000
    d270:	str	r2, [sp, #88]	; 0x58
    d272:	b.n	cc22 <_dtoa_r+0x702>
    d274:	str	r4, [sp, #40]	; 0x28
    d276:	b.n	cd82 <_dtoa_r+0x862>
    d278:	movs	r2, #57	; 0x39
    d27a:	mov	fp, r6
    d27c:	str	r4, [sp, #40]	; 0x28
    d27e:	mov	r6, r8
    d280:	strb	r2, [r7, #0]
    d282:	adds	r5, r7, #1
    d284:	b.w	ca72 <_dtoa_r+0x552>
    d288:	ldrd	r2, r3, [sp, #80]	; 0x50
    d28c:	movs	r0, #0
    d28e:	ldr	r1, [pc, #72]	; (d2d8 <_dtoa_r+0xdb8>)
    d290:	bl	9dc4 <__aeabi_dsub>
    d294:	mov	r2, r6
    d296:	mov	r3, r7
    d298:	bl	a64c <__aeabi_dcmpgt>
    d29c:	cbnz	r0, d2a2 <_dtoa_r+0xd82>
    d29e:	b.n	d096 <_dtoa_r+0xb76>
    d2a0:	mov	r5, r2
    d2a2:	ldrb.w	r3, [r5, #-1]
    d2a6:	cmp	r3, #48	; 0x30
    d2a8:	add.w	r2, r5, #4294967295
    d2ac:	beq.n	d2a0 <_dtoa_r+0xd80>
    d2ae:	b.n	cd24 <_dtoa_r+0x804>
    d2b0:	ldr	r3, [sp, #88]	; 0x58
    d2b2:	str	r3, [sp, #16]
    d2b4:	b.w	c89a <_dtoa_r+0x37a>
    d2b8:	cmp.w	sl, #0
    d2bc:	bne.w	cdb8 <_dtoa_r+0x898>
    d2c0:	b.n	cf88 <_dtoa_r+0xa68>
    d2c2:	nop
    d2c4:	.word	0x401c0000
    d2c8:	.word	0x40140000
    d2cc:	.word	0x20000748
    d2d0:	.word	0x20000810
    d2d4:	.word	0x40240000
    d2d8:	.word	0x3fe00000
    d2dc:	cmp	r3, #57	; 0x39
    d2de:	mov	fp, sl
    d2e0:	mov	sl, r3
    d2e2:	beq.n	d278 <_dtoa_r+0xd58>
    d2e4:	cmp.w	fp, #0
    d2e8:	bgt.w	d066 <_dtoa_r+0xb46>
    d2ec:	b.n	d06a <_dtoa_r+0xb4a>
    d2ee:	bne.w	d06a <_dtoa_r+0xb4a>
    d2f2:	tst.w	sl, #1
    d2f6:	beq.w	d06a <_dtoa_r+0xb4a>
    d2fa:	b.n	d05e <_dtoa_r+0xb3e>
    d2fc:	ldr	r3, [sp, #0]
    d2fe:	cmp	r3, #2
    d300:	bgt.n	d34e <_dtoa_r+0xe2e>
    d302:	ldr	r3, [sp, #56]	; 0x38
    d304:	b.n	cf22 <_dtoa_r+0xa02>
    d306:	mov.w	sl, #2
    d30a:	b.n	cbe0 <_dtoa_r+0x6c0>
    d30c:	ldr	r3, [sp, #0]
    d30e:	cmp	r3, #2
    d310:	bgt.n	d34e <_dtoa_r+0xe2e>
    d312:	ldr	r3, [sp, #56]	; 0x38
    d314:	b.n	cdf2 <_dtoa_r+0x8d2>
    d316:	movs	r4, #0
    d318:	str.w	r4, [r9, #68]	; 0x44
    d31c:	mov	r1, r4
    d31e:	mov	r0, r9
    d320:	bl	bd14 <_Balloc>
    d324:	mov.w	r3, #4294967295
    d328:	str	r3, [sp, #32]
    d32a:	str	r3, [sp, #56]	; 0x38
    d32c:	movs	r3, #1
    d32e:	str	r0, [sp, #36]	; 0x24
    d330:	str	r4, [sp, #20]
    d332:	str.w	r0, [r9, #64]	; 0x40
    d336:	str	r3, [sp, #44]	; 0x2c
    d338:	b.w	c734 <_dtoa_r+0x214>
    d33c:	beq.w	c9d0 <_dtoa_r+0x4b0>
    d340:	rsb	r0, r0, #60	; 0x3c
    d344:	b.w	c9c6 <_dtoa_r+0x4a6>
    d348:	movs	r6, #1
    d34a:	b.w	c6c6 <_dtoa_r+0x1a6>
    d34e:	ldr	r3, [sp, #56]	; 0x38
    d350:	str	r3, [sp, #32]
    d352:	b.n	cf32 <_dtoa_r+0xa12>
    d354:	movs	r0, r0
	...

0000d358 <_svfprintf_r>:
    d358:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d35c:	sub	sp, #260	; 0x104
    d35e:	mov	r4, r1
    d360:	str	r1, [sp, #20]
    d362:	mov	r5, r2
    d364:	str	r3, [sp, #40]	; 0x28
    d366:	str	r0, [sp, #24]
    d368:	bl	bcf8 <_localeconv_r>
    d36c:	ldr	r3, [r0, #0]
    d36e:	str	r3, [sp, #76]	; 0x4c
    d370:	mov	r0, r3
    d372:	bl	b7c0 <strlen>
    d376:	ldrh	r3, [r4, #12]
    d378:	str	r0, [sp, #72]	; 0x48
    d37a:	lsls	r6, r3, #24
    d37c:	bpl.n	d386 <_svfprintf_r+0x2e>
    d37e:	ldr	r3, [r4, #16]
    d380:	cmp	r3, #0
    d382:	beq.w	e5e8 <_svfprintf_r+0x1290>
    d386:	vldr	d7, [pc, #664]	; d620 <_svfprintf_r+0x2c8>
    d38a:	movs	r3, #0
    d38c:	vstr	d7, [sp, #64]	; 0x40
    d390:	str	r3, [sp, #56]	; 0x38
    d392:	str	r3, [sp, #148]	; 0x94
    d394:	str	r3, [sp, #144]	; 0x90
    d396:	str	r3, [sp, #84]	; 0x54
    d398:	str	r3, [sp, #28]
    d39a:	ldr.w	sl, [pc, #656]	; d62c <_svfprintf_r+0x2d4>
    d39e:	add	r3, sp, #192	; 0xc0
    d3a0:	str	r3, [sp, #140]	; 0x8c
    d3a2:	mov	r9, r3
    d3a4:	mov	r8, r5
    d3a6:	ldrb.w	r3, [r8]
    d3aa:	mov	r4, r8
    d3ac:	cbz	r3, d3ea <_svfprintf_r+0x92>
    d3ae:	cmp	r3, #37	; 0x25
    d3b0:	bne.n	d3b8 <_svfprintf_r+0x60>
    d3b2:	b.n	d3ea <_svfprintf_r+0x92>
    d3b4:	cmp	r3, #37	; 0x25
    d3b6:	beq.n	d3c0 <_svfprintf_r+0x68>
    d3b8:	ldrb.w	r3, [r4, #1]!
    d3bc:	cmp	r3, #0
    d3be:	bne.n	d3b4 <_svfprintf_r+0x5c>
    d3c0:	rsb	r5, r8, r4
    d3c4:	cbz	r5, d3ea <_svfprintf_r+0x92>
    d3c6:	ldr	r3, [sp, #144]	; 0x90
    d3c8:	ldr	r2, [sp, #148]	; 0x94
    d3ca:	str.w	r8, [r9]
    d3ce:	adds	r3, #1
    d3d0:	add	r2, r5
    d3d2:	cmp	r3, #7
    d3d4:	str.w	r5, [r9, #4]
    d3d8:	str	r2, [sp, #148]	; 0x94
    d3da:	str	r3, [sp, #144]	; 0x90
    d3dc:	bgt.w	d52c <_svfprintf_r+0x1d4>
    d3e0:	add.w	r9, r9, #8
    d3e4:	ldr	r3, [sp, #28]
    d3e6:	add	r3, r5
    d3e8:	str	r3, [sp, #28]
    d3ea:	ldrb	r3, [r4, #0]
    d3ec:	cmp	r3, #0
    d3ee:	beq.w	d53e <_svfprintf_r+0x1e6>
    d3f2:	movs	r3, #0
    d3f4:	mov	r2, r3
    d3f6:	strb.w	r3, [sp, #111]	; 0x6f
    d3fa:	mov	r1, r3
    d3fc:	str	r3, [sp, #32]
    d3fe:	str	r3, [sp, #12]
    d400:	mov.w	fp, #4294967295
    d404:	ldrb	r3, [r4, #1]
    d406:	add.w	r8, r4, #1
    d40a:	mov	r5, fp
    d40c:	add.w	r8, r8, #1
    d410:	sub.w	r0, r3, #32
    d414:	cmp	r0, #88	; 0x58
    d416:	bhi.w	dc82 <_svfprintf_r+0x92a>
    d41a:	tbh	[pc, r0, lsl #1]
    d41e:	.short	0x03a0
    d420:	.word	0x04320432
    d424:	.word	0x043203a8
    d428:	.word	0x04320432
    d42c:	.word	0x04320432
    d430:	.word	0x03af0432
    d434:	.word	0x043203bd
    d438:	.word	0x00e2005d
    d43c:	.word	0x01090432
    d440:	.word	0x01100110
    d444:	.word	0x01100110
    d448:	.word	0x01100110
    d44c:	.word	0x01100110
    d450:	.word	0x04320110
    d454:	.word	0x04320432
    d458:	.word	0x04320432
    d45c:	.word	0x04320432
    d460:	.word	0x04320432
    d464:	.word	0x01200432
    d468:	.word	0x04320286
    d46c:	.word	0x04320286
    d470:	.word	0x04320432
    d474:	.word	0x02d40432
    d478:	.word	0x04320432
    d47c:	.word	0x043202e5
    d480:	.word	0x04320432
    d484:	.word	0x04320432
    d488:	.word	0x0432030f
    d48c:	.word	0x033d0432
    d490:	.word	0x04320432
    d494:	.word	0x04320432
    d498:	.word	0x04320432
    d49c:	.word	0x04320432
    d4a0:	.word	0x04320432
    d4a4:	.word	0x0391037e
    d4a8:	.word	0x02860286
    d4ac:	.word	0x03990286
    d4b0:	.word	0x04320391
    d4b4:	.word	0x04070432
    d4b8:	.word	0x04120432
    d4bc:	.word	0x006400a3
    d4c0:	.word	0x043203c2
    d4c4:	.word	0x043203c9
    d4c8:	.word	0x043203ea
    d4cc:	.word	0x03f20432
    d4d0:	ldr	r0, [sp, #32]
    d4d2:	str	r3, [sp, #40]	; 0x28
    d4d4:	negs	r0, r0
    d4d6:	str	r0, [sp, #32]
    d4d8:	ldr	r3, [sp, #12]
    d4da:	orr.w	r3, r3, #4
    d4de:	str	r3, [sp, #12]
    d4e0:	ldrb.w	r3, [r8]
    d4e4:	b.n	d40c <_svfprintf_r+0xb4>
    d4e6:	ldr	r0, [sp, #40]	; 0x28
    d4e8:	mov	fp, r5
    d4ea:	movs	r1, #0
    d4ec:	ldr	r4, [r0, #0]
    d4ee:	strb.w	r1, [sp, #111]	; 0x6f
    d4f2:	adds	r7, r0, #4
    d4f4:	ldr	r0, [sp, #12]
    d4f6:	movs	r3, #48	; 0x30
    d4f8:	movs	r2, #120	; 0x78
    d4fa:	cmp	fp, r1
    d4fc:	strb.w	r3, [sp, #112]	; 0x70
    d500:	mov.w	r5, #0
    d504:	strb.w	r2, [sp, #113]	; 0x71
    d508:	orr.w	r3, r0, #2
    d50c:	blt.w	dcbc <_svfprintf_r+0x964>
    d510:	bic.w	r3, r0, #128	; 0x80
    d514:	orr.w	r3, r3, #2
    d518:	str	r3, [sp, #12]
    d51a:	orrs.w	r3, r4, r5
    d51e:	str	r7, [sp, #40]	; 0x28
    d520:	beq.w	dc68 <_svfprintf_r+0x910>
    d524:	mov	r7, r1
    d526:	str	r2, [sp, #52]	; 0x34
    d528:	ldr	r0, [pc, #252]	; (d628 <_svfprintf_r+0x2d0>)
    d52a:	b.n	dafa <_svfprintf_r+0x7a2>
    d52c:	add	r2, sp, #140	; 0x8c
    d52e:	ldr	r1, [sp, #20]
    d530:	ldr	r0, [sp, #24]
    d532:	bl	ea3c <__ssprint_r>
    d536:	cbnz	r0, d54c <_svfprintf_r+0x1f4>
    d538:	add.w	r9, sp, #192	; 0xc0
    d53c:	b.n	d3e4 <_svfprintf_r+0x8c>
    d53e:	ldr	r3, [sp, #148]	; 0x94
    d540:	cbz	r3, d54c <_svfprintf_r+0x1f4>
    d542:	ldr	r0, [sp, #24]
    d544:	ldr	r1, [sp, #20]
    d546:	add	r2, sp, #140	; 0x8c
    d548:	bl	ea3c <__ssprint_r>
    d54c:	ldr	r3, [sp, #20]
    d54e:	ldrh	r3, [r3, #12]
    d550:	tst.w	r3, #64	; 0x40
    d554:	ldr	r3, [sp, #28]
    d556:	it	ne
    d558:	movne.w	r3, #4294967295
    d55c:	mov	r0, r3
    d55e:	add	sp, #260	; 0x104
    d560:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d564:	str	r3, [sp, #52]	; 0x34
    d566:	mov	fp, r5
    d568:	cmp	r2, #0
    d56a:	bne.w	e9d4 <_svfprintf_r+0x167c>
    d56e:	ldr	r2, [sp, #12]
    d570:	ands.w	r3, r2, #32
    d574:	beq.w	da04 <_svfprintf_r+0x6ac>
    d578:	ldr	r7, [sp, #40]	; 0x28
    d57a:	adds	r7, #7
    d57c:	bic.w	r3, r7, #7
    d580:	movs	r7, #0
    d582:	add.w	r1, r3, #8
    d586:	cmp	fp, r7
    d588:	str	r1, [sp, #40]	; 0x28
    d58a:	ldrd	r4, r5, [r3]
    d58e:	strb.w	r7, [sp, #111]	; 0x6f
    d592:	blt.w	e45a <_svfprintf_r+0x1102>
    d596:	bic.w	r3, r2, #128	; 0x80
    d59a:	str	r3, [sp, #12]
    d59c:	orrs.w	r3, r4, r5
    d5a0:	beq.w	dcac <_svfprintf_r+0x954>
    d5a4:	add	r6, sp, #192	; 0xc0
    d5a6:	lsrs	r2, r4, #3
    d5a8:	orr.w	r2, r2, r5, lsl #29
    d5ac:	lsrs	r1, r5, #3
    d5ae:	and.w	r3, r4, #7
    d5b2:	mov	r5, r1
    d5b4:	mov	r4, r2
    d5b6:	adds	r3, #48	; 0x30
    d5b8:	orrs.w	r2, r4, r5
    d5bc:	strb.w	r3, [r6, #-1]!
    d5c0:	bne.n	d5a6 <_svfprintf_r+0x24e>
    d5c2:	ldr	r2, [sp, #12]
    d5c4:	lsls	r1, r2, #31
    d5c6:	bpl.w	d6e8 <_svfprintf_r+0x390>
    d5ca:	cmp	r3, #48	; 0x30
    d5cc:	beq.w	d6e8 <_svfprintf_r+0x390>
    d5d0:	movs	r2, #48	; 0x30
    d5d2:	subs	r3, r6, #1
    d5d4:	strb.w	r2, [r6, #-1]
    d5d8:	add	r2, sp, #192	; 0xc0
    d5da:	subs	r2, r2, r3
    d5dc:	str	r2, [sp, #36]	; 0x24
    d5de:	mov	r6, r3
    d5e0:	b.n	d6ee <_svfprintf_r+0x396>
    d5e2:	ldrb.w	r3, [r8]
    d5e6:	cmp	r3, #42	; 0x2a
    d5e8:	add.w	r4, r8, #1
    d5ec:	beq.w	e9b8 <_svfprintf_r+0x1660>
    d5f0:	sub.w	r0, r3, #48	; 0x30
    d5f4:	cmp	r0, #9
    d5f6:	it	ls
    d5f8:	movls	r5, #0
    d5fa:	bhi.w	e90a <_svfprintf_r+0x15b2>
    d5fe:	ldrb.w	r3, [r4], #1
    d602:	add.w	r5, r5, r5, lsl #2
    d606:	add.w	r5, r0, r5, lsl #1
    d60a:	sub.w	r0, r3, #48	; 0x30
    d60e:	cmp	r0, #9
    d610:	bls.n	d5fe <_svfprintf_r+0x2a6>
    d612:	orr.w	r5, r5, r5, asr #31
    d616:	mov	r8, r4
    d618:	b.n	d410 <_svfprintf_r+0xb8>
    d61a:	nop
    d61c:	nop.w
	...
    d628:	.word	0x2000088c
    d62c:	.word	0x20000858
    d630:	ldr	r3, [sp, #12]
    d632:	orr.w	r3, r3, #128	; 0x80
    d636:	str	r3, [sp, #12]
    d638:	ldrb.w	r3, [r8]
    d63c:	b.n	d40c <_svfprintf_r+0xb4>
    d63e:	sub.w	r0, r3, #48	; 0x30
    d642:	movs	r3, #0
    d644:	mov	r4, r3
    d646:	ldrb.w	r3, [r8], #1
    d64a:	add.w	r4, r4, r4, lsl #2
    d64e:	add.w	r4, r0, r4, lsl #1
    d652:	sub.w	r0, r3, #48	; 0x30
    d656:	cmp	r0, #9
    d658:	bls.n	d646 <_svfprintf_r+0x2ee>
    d65a:	str	r4, [sp, #32]
    d65c:	b.n	d410 <_svfprintf_r+0xb8>
    d65e:	str	r3, [sp, #52]	; 0x34
    d660:	mov	fp, r5
    d662:	cmp	r2, #0
    d664:	bne.w	e9f0 <_svfprintf_r+0x1698>
    d668:	ldr	r3, [sp, #12]
    d66a:	orr.w	r3, r3, #16
    d66e:	str	r3, [sp, #12]
    d670:	ldr	r3, [sp, #12]
    d672:	lsls	r4, r3, #26
    d674:	bpl.w	e0e6 <_svfprintf_r+0xd8e>
    d678:	ldr	r7, [sp, #40]	; 0x28
    d67a:	adds	r7, #7
    d67c:	bic.w	r7, r7, #7
    d680:	ldrd	r2, r3, [r7]
    d684:	add.w	r1, r7, #8
    d688:	str	r1, [sp, #40]	; 0x28
    d68a:	mov	r4, r2
    d68c:	mov	r5, r3
    d68e:	cmp	r2, #0
    d690:	sbcs.w	r3, r3, #0
    d694:	blt.w	e15c <_svfprintf_r+0xe04>
    d698:	cmp.w	fp, #0
    d69c:	ldrb.w	r7, [sp, #111]	; 0x6f
    d6a0:	blt.w	e122 <_svfprintf_r+0xdca>
    d6a4:	ldr	r3, [sp, #12]
    d6a6:	bic.w	r3, r3, #128	; 0x80
    d6aa:	str	r3, [sp, #12]
    d6ac:	orrs.w	r3, r4, r5
    d6b0:	beq.w	da84 <_svfprintf_r+0x72c>
    d6b4:	cmp	r5, #0
    d6b6:	it	eq
    d6b8:	cmpeq	r4, #10
    d6ba:	bcc.w	da8e <_svfprintf_r+0x736>
    d6be:	add	r6, sp, #192	; 0xc0
    d6c0:	mov	r0, r4
    d6c2:	mov	r1, r5
    d6c4:	movs	r2, #10
    d6c6:	movs	r3, #0
    d6c8:	bl	a6dc <__aeabi_uldivmod>
    d6cc:	adds	r2, #48	; 0x30
    d6ce:	strb.w	r2, [r6, #-1]!
    d6d2:	mov	r0, r4
    d6d4:	mov	r1, r5
    d6d6:	movs	r3, #0
    d6d8:	movs	r2, #10
    d6da:	bl	a6dc <__aeabi_uldivmod>
    d6de:	mov	r4, r0
    d6e0:	mov	r5, r1
    d6e2:	orrs.w	r3, r4, r5
    d6e6:	bne.n	d6c0 <_svfprintf_r+0x368>
    d6e8:	add	r3, sp, #192	; 0xc0
    d6ea:	subs	r3, r3, r6
    d6ec:	str	r3, [sp, #36]	; 0x24
    d6ee:	ldr	r3, [sp, #36]	; 0x24
    d6f0:	cmp	r3, fp
    d6f2:	it	lt
    d6f4:	movlt	r3, fp
    d6f6:	str	r3, [sp, #16]
    d6f8:	movs	r3, #0
    d6fa:	str	r3, [sp, #60]	; 0x3c
    d6fc:	cbz	r7, d704 <_svfprintf_r+0x3ac>
    d6fe:	ldr	r3, [sp, #16]
    d700:	adds	r3, #1
    d702:	str	r3, [sp, #16]
    d704:	ldr	r3, [sp, #12]
    d706:	ands.w	r3, r3, #2
    d70a:	str	r3, [sp, #44]	; 0x2c
    d70c:	beq.n	d714 <_svfprintf_r+0x3bc>
    d70e:	ldr	r3, [sp, #16]
    d710:	adds	r3, #2
    d712:	str	r3, [sp, #16]
    d714:	ldr	r3, [sp, #12]
    d716:	ands.w	r3, r3, #132	; 0x84
    d71a:	str	r3, [sp, #48]	; 0x30
    d71c:	bne.w	dcd6 <_svfprintf_r+0x97e>
    d720:	ldr	r3, [sp, #32]
    d722:	ldr	r2, [sp, #16]
    d724:	subs	r5, r3, r2
    d726:	cmp	r5, #0
    d728:	ble.w	dcd6 <_svfprintf_r+0x97e>
    d72c:	cmp	r5, #16
    d72e:	ldr	r1, [sp, #148]	; 0x94
    d730:	ldr	r2, [sp, #144]	; 0x90
    d732:	ldr	r7, [pc, #672]	; (d9d4 <_svfprintf_r+0x67c>)
    d734:	ble.n	d786 <_svfprintf_r+0x42e>
    d736:	str	r6, [sp, #80]	; 0x50
    d738:	mov	r0, r9
    d73a:	movs	r4, #16
    d73c:	mov	r9, r7
    d73e:	ldr	r6, [sp, #20]
    d740:	mov	r7, r5
    d742:	ldr	r5, [sp, #24]
    d744:	b.n	d750 <_svfprintf_r+0x3f8>
    d746:	subs	r7, #16
    d748:	cmp	r7, #16
    d74a:	add.w	r0, r0, #8
    d74e:	ble.n	d77e <_svfprintf_r+0x426>
    d750:	adds	r2, #1
    d752:	ldr	r3, [pc, #640]	; (d9d4 <_svfprintf_r+0x67c>)
    d754:	str	r2, [sp, #144]	; 0x90
    d756:	adds	r1, #16
    d758:	cmp	r2, #7
    d75a:	str	r1, [sp, #148]	; 0x94
    d75c:	stmia.w	r0, {r3, r4}
    d760:	ble.n	d746 <_svfprintf_r+0x3ee>
    d762:	add	r2, sp, #140	; 0x8c
    d764:	mov	r1, r6
    d766:	mov	r0, r5
    d768:	bl	ea3c <__ssprint_r>
    d76c:	cmp	r0, #0
    d76e:	bne.w	d54c <_svfprintf_r+0x1f4>
    d772:	subs	r7, #16
    d774:	cmp	r7, #16
    d776:	ldr	r1, [sp, #148]	; 0x94
    d778:	ldr	r2, [sp, #144]	; 0x90
    d77a:	add	r0, sp, #192	; 0xc0
    d77c:	bgt.n	d750 <_svfprintf_r+0x3f8>
    d77e:	ldr	r6, [sp, #80]	; 0x50
    d780:	mov	r5, r7
    d782:	mov	r7, r9
    d784:	mov	r9, r0
    d786:	adds	r2, #1
    d788:	adds	r4, r5, r1
    d78a:	cmp	r2, #7
    d78c:	str	r4, [sp, #148]	; 0x94
    d78e:	str	r2, [sp, #144]	; 0x90
    d790:	str.w	r7, [r9]
    d794:	str.w	r5, [r9, #4]
    d798:	bgt.w	dff6 <_svfprintf_r+0xc9e>
    d79c:	ldrb.w	r7, [sp, #111]	; 0x6f
    d7a0:	add.w	r9, r9, #8
    d7a4:	cbz	r7, d7c4 <_svfprintf_r+0x46c>
    d7a6:	ldr	r3, [sp, #144]	; 0x90
    d7a8:	adds	r3, #1
    d7aa:	adds	r4, #1
    d7ac:	add.w	r1, sp, #111	; 0x6f
    d7b0:	movs	r2, #1
    d7b2:	cmp	r3, #7
    d7b4:	str	r4, [sp, #148]	; 0x94
    d7b6:	str	r3, [sp, #144]	; 0x90
    d7b8:	stmia.w	r9, {r1, r2}
    d7bc:	bgt.w	df0a <_svfprintf_r+0xbb2>
    d7c0:	add.w	r9, r9, #8
    d7c4:	ldr	r3, [sp, #44]	; 0x2c
    d7c6:	cbz	r3, d7e4 <_svfprintf_r+0x48c>
    d7c8:	ldr	r3, [sp, #144]	; 0x90
    d7ca:	adds	r3, #1
    d7cc:	adds	r4, #2
    d7ce:	add	r1, sp, #112	; 0x70
    d7d0:	movs	r2, #2
    d7d2:	cmp	r3, #7
    d7d4:	str	r4, [sp, #148]	; 0x94
    d7d6:	str	r3, [sp, #144]	; 0x90
    d7d8:	stmia.w	r9, {r1, r2}
    d7dc:	bgt.w	df22 <_svfprintf_r+0xbca>
    d7e0:	add.w	r9, r9, #8
    d7e4:	ldr	r3, [sp, #48]	; 0x30
    d7e6:	cmp	r3, #128	; 0x80
    d7e8:	beq.w	ddae <_svfprintf_r+0xa56>
    d7ec:	ldr	r3, [sp, #36]	; 0x24
    d7ee:	rsb	r7, r3, fp
    d7f2:	cmp	r7, #0
    d7f4:	ble.n	d85e <_svfprintf_r+0x506>
    d7f6:	ldr	r2, [pc, #480]	; (d9d8 <_svfprintf_r+0x680>)
    d7f8:	ldr	r3, [sp, #144]	; 0x90
    d7fa:	str	r2, [sp, #44]	; 0x2c
    d7fc:	cmp	r7, #16
    d7fe:	ble.n	d846 <_svfprintf_r+0x4ee>
    d800:	mov	r2, r4
    d802:	mov.w	fp, #16
    d806:	ldr	r5, [sp, #24]
    d808:	ldr	r4, [sp, #20]
    d80a:	b.n	d816 <_svfprintf_r+0x4be>
    d80c:	subs	r7, #16
    d80e:	cmp	r7, #16
    d810:	add.w	r9, r9, #8
    d814:	ble.n	d844 <_svfprintf_r+0x4ec>
    d816:	adds	r3, #1
    d818:	adds	r2, #16
    d81a:	cmp	r3, #7
    d81c:	str	r2, [sp, #148]	; 0x94
    d81e:	str	r3, [sp, #144]	; 0x90
    d820:	stmia.w	r9, {sl, fp}
    d824:	ble.n	d80c <_svfprintf_r+0x4b4>
    d826:	add	r2, sp, #140	; 0x8c
    d828:	mov	r1, r4
    d82a:	mov	r0, r5
    d82c:	bl	ea3c <__ssprint_r>
    d830:	cmp	r0, #0
    d832:	bne.w	d54c <_svfprintf_r+0x1f4>
    d836:	subs	r7, #16
    d838:	cmp	r7, #16
    d83a:	ldr	r2, [sp, #148]	; 0x94
    d83c:	ldr	r3, [sp, #144]	; 0x90
    d83e:	add.w	r9, sp, #192	; 0xc0
    d842:	bgt.n	d816 <_svfprintf_r+0x4be>
    d844:	mov	r4, r2
    d846:	adds	r3, #1
    d848:	ldr	r2, [sp, #44]	; 0x2c
    d84a:	str	r3, [sp, #144]	; 0x90
    d84c:	add	r4, r7
    d84e:	cmp	r3, #7
    d850:	str	r4, [sp, #148]	; 0x94
    d852:	stmia.w	r9, {r2, r7}
    d856:	bgt.w	def2 <_svfprintf_r+0xb9a>
    d85a:	add.w	r9, r9, #8
    d85e:	ldr	r3, [sp, #12]
    d860:	lsls	r2, r3, #23
    d862:	bmi.w	dcda <_svfprintf_r+0x982>
    d866:	ldr	r3, [sp, #144]	; 0x90
    d868:	ldr	r1, [sp, #36]	; 0x24
    d86a:	str.w	r6, [r9]
    d86e:	adds	r3, #1
    d870:	add	r4, r1
    d872:	cmp	r3, #7
    d874:	str	r4, [sp, #148]	; 0x94
    d876:	str.w	r1, [r9, #4]
    d87a:	str	r3, [sp, #144]	; 0x90
    d87c:	bgt.w	dec6 <_svfprintf_r+0xb6e>
    d880:	add.w	r9, r9, #8
    d884:	ldr	r3, [sp, #12]
    d886:	lsls	r1, r3, #29
    d888:	bpl.n	d90a <_svfprintf_r+0x5b2>
    d88a:	ldr	r3, [sp, #32]
    d88c:	ldr	r2, [sp, #16]
    d88e:	subs	r5, r3, r2
    d890:	cmp	r5, #0
    d892:	ble.n	d90a <_svfprintf_r+0x5b2>
    d894:	cmp	r5, #16
    d896:	ldr	r3, [sp, #144]	; 0x90
    d898:	ldr	r7, [pc, #312]	; (d9d4 <_svfprintf_r+0x67c>)
    d89a:	ble.n	d8e4 <_svfprintf_r+0x58c>
    d89c:	mov	r2, r4
    d89e:	movs	r6, #16
    d8a0:	ldr.w	fp, [sp, #24]
    d8a4:	ldr	r4, [sp, #20]
    d8a6:	b.n	d8b2 <_svfprintf_r+0x55a>
    d8a8:	subs	r5, #16
    d8aa:	cmp	r5, #16
    d8ac:	add.w	r9, r9, #8
    d8b0:	ble.n	d8e2 <_svfprintf_r+0x58a>
    d8b2:	adds	r3, #1
    d8b4:	ldr	r1, [pc, #284]	; (d9d4 <_svfprintf_r+0x67c>)
    d8b6:	str	r3, [sp, #144]	; 0x90
    d8b8:	adds	r2, #16
    d8ba:	cmp	r3, #7
    d8bc:	str	r2, [sp, #148]	; 0x94
    d8be:	stmia.w	r9, {r1, r6}
    d8c2:	ble.n	d8a8 <_svfprintf_r+0x550>
    d8c4:	add	r2, sp, #140	; 0x8c
    d8c6:	mov	r1, r4
    d8c8:	mov	r0, fp
    d8ca:	bl	ea3c <__ssprint_r>
    d8ce:	cmp	r0, #0
    d8d0:	bne.w	d54c <_svfprintf_r+0x1f4>
    d8d4:	subs	r5, #16
    d8d6:	cmp	r5, #16
    d8d8:	ldr	r2, [sp, #148]	; 0x94
    d8da:	ldr	r3, [sp, #144]	; 0x90
    d8dc:	add.w	r9, sp, #192	; 0xc0
    d8e0:	bgt.n	d8b2 <_svfprintf_r+0x55a>
    d8e2:	mov	r4, r2
    d8e4:	adds	r3, #1
    d8e6:	add	r4, r5
    d8e8:	cmp	r3, #7
    d8ea:	str	r4, [sp, #148]	; 0x94
    d8ec:	str	r3, [sp, #144]	; 0x90
    d8ee:	str.w	r7, [r9]
    d8f2:	str.w	r5, [r9, #4]
    d8f6:	ble.n	d90a <_svfprintf_r+0x5b2>
    d8f8:	add	r2, sp, #140	; 0x8c
    d8fa:	ldr	r1, [sp, #20]
    d8fc:	ldr	r0, [sp, #24]
    d8fe:	bl	ea3c <__ssprint_r>
    d902:	cmp	r0, #0
    d904:	bne.w	d54c <_svfprintf_r+0x1f4>
    d908:	ldr	r4, [sp, #148]	; 0x94
    d90a:	ldr	r3, [sp, #28]
    d90c:	ldr	r2, [sp, #32]
    d90e:	ldr	r1, [sp, #16]
    d910:	cmp	r2, r1
    d912:	ite	ge
    d914:	addge	r3, r3, r2
    d916:	addlt	r3, r3, r1
    d918:	str	r3, [sp, #28]
    d91a:	cmp	r4, #0
    d91c:	bne.w	dede <_svfprintf_r+0xb86>
    d920:	movs	r3, #0
    d922:	str	r3, [sp, #144]	; 0x90
    d924:	add.w	r9, sp, #192	; 0xc0
    d928:	b.n	d3a6 <_svfprintf_r+0x4e>
    d92a:	str	r3, [sp, #52]	; 0x34
    d92c:	mov	fp, r5
    d92e:	cmp	r2, #0
    d930:	bne.w	e9f8 <_svfprintf_r+0x16a0>
    d934:	ldr	r3, [sp, #12]
    d936:	ldr	r7, [sp, #40]	; 0x28
    d938:	lsls	r2, r3, #28
    d93a:	add.w	r7, r7, #7
    d93e:	bpl.w	e42a <_svfprintf_r+0x10d2>
    d942:	bic.w	r3, r7, #7
    d946:	vldr	d7, [r3]
    d94a:	vstr	d7, [sp, #64]	; 0x40
    d94e:	add.w	r2, r3, #8
    d952:	str	r2, [sp, #40]	; 0x28
    d954:	ldrd	r1, r2, [sp, #64]	; 0x40
    d958:	bic.w	r3, r2, #2147483648	; 0x80000000
    d95c:	str	r1, [sp, #88]	; 0x58
    d95e:	str	r3, [sp, #92]	; 0x5c
    d960:	ldrd	r4, r5, [sp, #88]	; 0x58
    d964:	mov.w	r2, #4294967295
    d968:	mov	r0, r4
    d96a:	mov	r1, r5
    d96c:	ldr	r3, [pc, #108]	; (d9dc <_svfprintf_r+0x684>)
    d96e:	bl	a660 <__aeabi_dcmpun>
    d972:	cmp	r0, #0
    d974:	bne.w	e32c <_svfprintf_r+0xfd4>
    d978:	mov.w	r2, #4294967295
    d97c:	ldr	r3, [pc, #92]	; (d9dc <_svfprintf_r+0x684>)
    d97e:	mov	r0, r4
    d980:	mov	r1, r5
    d982:	bl	a624 <__aeabi_dcmple>
    d986:	cmp	r0, #0
    d988:	bne.w	e32c <_svfprintf_r+0xfd4>
    d98c:	movs	r2, #0
    d98e:	movs	r3, #0
    d990:	ldrd	r0, r1, [sp, #64]	; 0x40
    d994:	bl	a610 <__aeabi_dcmplt>
    d998:	cmp	r0, #0
    d99a:	bne.w	e842 <_svfprintf_r+0x14ea>
    d99e:	ldrb.w	r7, [sp, #111]	; 0x6f
    d9a2:	ldr	r6, [pc, #60]	; (d9e0 <_svfprintf_r+0x688>)
    d9a4:	ldr	r3, [pc, #60]	; (d9e4 <_svfprintf_r+0x68c>)
    d9a6:	ldr	r1, [sp, #12]
    d9a8:	bic.w	r1, r1, #128	; 0x80
    d9ac:	str	r1, [sp, #12]
    d9ae:	ldr	r1, [sp, #52]	; 0x34
    d9b0:	movs	r2, #3
    d9b2:	mov.w	fp, #0
    d9b6:	str	r2, [sp, #16]
    d9b8:	cmp	r1, #71	; 0x47
    d9ba:	it	le
    d9bc:	movle	r6, r3
    d9be:	str	r2, [sp, #36]	; 0x24
    d9c0:	str.w	fp, [sp, #60]	; 0x3c
    d9c4:	b.n	d6fc <_svfprintf_r+0x3a4>
    d9c6:	ldr	r3, [sp, #12]
    d9c8:	orr.w	r3, r3, #8
    d9cc:	str	r3, [sp, #12]
    d9ce:	ldrb.w	r3, [r8]
    d9d2:	b.n	d40c <_svfprintf_r+0xb4>
    d9d4:	.word	0x200008a8
    d9d8:	.word	0x20000858
    d9dc:	.word	0x7fefffff
    d9e0:	.word	0x2000086c
    d9e4:	.word	0x20000868
    d9e8:	str	r3, [sp, #52]	; 0x34
    d9ea:	mov	fp, r5
    d9ec:	cmp	r2, #0
    d9ee:	bne.w	ea10 <_svfprintf_r+0x16b8>
    d9f2:	ldr	r3, [sp, #12]
    d9f4:	orr.w	r3, r3, #16
    d9f8:	str	r3, [sp, #12]
    d9fa:	ldr	r2, [sp, #12]
    d9fc:	ands.w	r3, r2, #32
    da00:	bne.w	d578 <_svfprintf_r+0x220>
    da04:	ldr	r1, [sp, #12]
    da06:	ands.w	r2, r1, #16
    da0a:	beq.w	e2c4 <_svfprintf_r+0xf6c>
    da0e:	ldr	r0, [sp, #40]	; 0x28
    da10:	strb.w	r3, [sp, #111]	; 0x6f
    da14:	cmp.w	fp, #0
    da18:	ldr	r4, [r0, #0]
    da1a:	add.w	r7, r0, #4
    da1e:	mov.w	r5, #0
    da22:	blt.w	e458 <_svfprintf_r+0x1100>
    da26:	mov	r2, r1
    da28:	bic.w	r2, r2, #128	; 0x80
    da2c:	str	r2, [sp, #12]
    da2e:	orrs.w	r2, r4, r5
    da32:	str	r7, [sp, #40]	; 0x28
    da34:	beq.w	dcac <_svfprintf_r+0x954>
    da38:	mov	r7, r3
    da3a:	b.n	d5a4 <_svfprintf_r+0x24c>
    da3c:	str	r3, [sp, #52]	; 0x34
    da3e:	mov	fp, r5
    da40:	cmp	r2, #0
    da42:	bne.w	ea08 <_svfprintf_r+0x16b0>
    da46:	ldr	r3, [sp, #12]
    da48:	orr.w	r3, r3, #16
    da4c:	str	r3, [sp, #12]
    da4e:	ldr	r2, [sp, #12]
    da50:	ands.w	r3, r2, #32
    da54:	beq.w	e0b0 <_svfprintf_r+0xd58>
    da58:	ldr	r7, [sp, #40]	; 0x28
    da5a:	adds	r7, #7
    da5c:	bic.w	r3, r7, #7
    da60:	movs	r7, #0
    da62:	add.w	r1, r3, #8
    da66:	cmp	fp, r7
    da68:	str	r1, [sp, #40]	; 0x28
    da6a:	ldrd	r4, r5, [r3]
    da6e:	strb.w	r7, [sp, #111]	; 0x6f
    da72:	blt.w	e122 <_svfprintf_r+0xdca>
    da76:	bic.w	r3, r2, #128	; 0x80
    da7a:	str	r3, [sp, #12]
    da7c:	orrs.w	r3, r4, r5
    da80:	bne.w	d6b4 <_svfprintf_r+0x35c>
    da84:	cmp.w	fp, #0
    da88:	beq.w	dc76 <_svfprintf_r+0x91e>
    da8c:	movs	r4, #0
    da8e:	add	r6, sp, #256	; 0x100
    da90:	adds	r4, #48	; 0x30
    da92:	strb.w	r4, [r6, #-65]!
    da96:	b.n	d6e8 <_svfprintf_r+0x390>
    da98:	str	r3, [sp, #52]	; 0x34
    da9a:	mov	fp, r5
    da9c:	cmp	r2, #0
    da9e:	bne.w	ea00 <_svfprintf_r+0x16a8>
    daa2:	ldr	r3, [sp, #12]
    daa4:	ldr	r0, [pc, #700]	; (dd64 <_svfprintf_r+0xa0c>)
    daa6:	lsls	r5, r3, #26
    daa8:	bpl.w	dc16 <_svfprintf_r+0x8be>
    daac:	ldr	r7, [sp, #40]	; 0x28
    daae:	adds	r7, #7
    dab0:	bic.w	r3, r7, #7
    dab4:	ldrd	r4, r5, [r3]
    dab8:	add.w	r2, r3, #8
    dabc:	str	r2, [sp, #40]	; 0x28
    dabe:	ldr	r2, [sp, #12]
    dac0:	ands.w	r7, r2, #1
    dac4:	beq.w	df3a <_svfprintf_r+0xbe2>
    dac8:	orrs.w	r3, r4, r5
    dacc:	beq.w	e4d4 <_svfprintf_r+0x117c>
    dad0:	ldrb.w	r2, [sp, #52]	; 0x34
    dad4:	strb.w	r2, [sp, #113]	; 0x71
    dad8:	movs	r7, #0
    dada:	ldr	r2, [sp, #12]
    dadc:	strb.w	r7, [sp, #111]	; 0x6f
    dae0:	movs	r3, #48	; 0x30
    dae2:	cmp	fp, r7
    dae4:	strb.w	r3, [sp, #112]	; 0x70
    dae8:	orr.w	r3, r2, #2
    daec:	blt.w	e84c <_svfprintf_r+0x14f4>
    daf0:	bic.w	r3, r2, #128	; 0x80
    daf4:	orr.w	r3, r3, #2
    daf8:	str	r3, [sp, #12]
    dafa:	add	r6, sp, #192	; 0xc0
    dafc:	lsrs	r3, r4, #4
    dafe:	and.w	r1, r4, #15
    db02:	orr.w	r3, r3, r5, lsl #28
    db06:	lsrs	r2, r5, #4
    db08:	mov	r4, r3
    db0a:	mov	r5, r2
    db0c:	ldrb	r3, [r0, r1]
    db0e:	strb.w	r3, [r6, #-1]!
    db12:	orrs.w	r3, r4, r5
    db16:	bne.n	dafc <_svfprintf_r+0x7a4>
    db18:	b.n	d6e8 <_svfprintf_r+0x390>
    db1a:	ldr	r1, [sp, #40]	; 0x28
    db1c:	str	r3, [sp, #52]	; 0x34
    db1e:	ldr	r2, [r1, #0]
    db20:	strb.w	r2, [sp, #152]	; 0x98
    db24:	movs	r3, #0
    db26:	mov	r2, r1
    db28:	mov	r7, r3
    db2a:	strb.w	r3, [sp, #111]	; 0x6f
    db2e:	adds	r2, #4
    db30:	movs	r3, #1
    db32:	str	r3, [sp, #16]
    db34:	mov	fp, r7
    db36:	str	r7, [sp, #60]	; 0x3c
    db38:	str	r2, [sp, #40]	; 0x28
    db3a:	str	r3, [sp, #36]	; 0x24
    db3c:	add	r6, sp, #152	; 0x98
    db3e:	b.n	d704 <_svfprintf_r+0x3ac>
    db40:	str	r3, [sp, #52]	; 0x34
    db42:	mov	fp, r5
    db44:	cmp	r2, #0
    db46:	beq.w	d670 <_svfprintf_r+0x318>
    db4a:	strb.w	r1, [sp, #111]	; 0x6f
    db4e:	b.n	d670 <_svfprintf_r+0x318>
    db50:	ldr	r3, [sp, #12]
    db52:	orr.w	r3, r3, #64	; 0x40
    db56:	str	r3, [sp, #12]
    db58:	ldrb.w	r3, [r8]
    db5c:	b.n	d40c <_svfprintf_r+0xb4>
    db5e:	ldrb.w	r3, [r8]
    db62:	cmp	r1, #0
    db64:	bne.w	d40c <_svfprintf_r+0xb4>
    db68:	movs	r2, #1
    db6a:	movs	r1, #32
    db6c:	b.n	d40c <_svfprintf_r+0xb4>
    db6e:	ldr	r3, [sp, #12]
    db70:	orr.w	r3, r3, #1
    db74:	str	r3, [sp, #12]
    db76:	ldrb.w	r3, [r8]
    db7a:	b.n	d40c <_svfprintf_r+0xb4>
    db7c:	ldr	r4, [sp, #40]	; 0x28
    db7e:	ldr	r3, [r4, #0]
    db80:	str	r3, [sp, #32]
    db82:	mov	r0, r3
    db84:	cmp	r0, #0
    db86:	mov	r3, r4
    db88:	add.w	r3, r3, #4
    db8c:	blt.w	d4d0 <_svfprintf_r+0x178>
    db90:	str	r3, [sp, #40]	; 0x28
    db92:	ldrb.w	r3, [r8]
    db96:	b.n	d40c <_svfprintf_r+0xb4>
    db98:	ldrb.w	r3, [r8]
    db9c:	movs	r2, #1
    db9e:	movs	r1, #43	; 0x2b
    dba0:	b.n	d40c <_svfprintf_r+0xb4>
    dba2:	ldr	r3, [sp, #12]
    dba4:	orr.w	r3, r3, #32
    dba8:	str	r3, [sp, #12]
    dbaa:	ldrb.w	r3, [r8]
    dbae:	b.n	d40c <_svfprintf_r+0xb4>
    dbb0:	ldr	r2, [sp, #40]	; 0x28
    dbb2:	str	r3, [sp, #52]	; 0x34
    dbb4:	ldr	r6, [r2, #0]
    dbb6:	movs	r4, #0
    dbb8:	strb.w	r4, [sp, #111]	; 0x6f
    dbbc:	adds	r7, r2, #4
    dbbe:	cmp	r6, #0
    dbc0:	beq.w	e7fc <_svfprintf_r+0x14a4>
    dbc4:	cmp	r5, #0
    dbc6:	blt.w	e68c <_svfprintf_r+0x1334>
    dbca:	mov	r2, r5
    dbcc:	mov	r1, r4
    dbce:	mov	r0, r6
    dbd0:	bl	b020 <memchr>
    dbd4:	cmp	r0, #0
    dbd6:	beq.w	e8a0 <_svfprintf_r+0x1548>
    dbda:	subs	r3, r0, r6
    dbdc:	str	r3, [sp, #36]	; 0x24
    dbde:	mov	fp, r4
    dbe0:	bic.w	r3, r3, r3, asr #31
    dbe4:	str	r7, [sp, #40]	; 0x28
    dbe6:	str	r3, [sp, #16]
    dbe8:	str.w	fp, [sp, #60]	; 0x3c
    dbec:	ldrb.w	r7, [sp, #111]	; 0x6f
    dbf0:	b.n	d6fc <_svfprintf_r+0x3a4>
    dbf2:	str	r3, [sp, #52]	; 0x34
    dbf4:	mov	fp, r5
    dbf6:	cmp	r2, #0
    dbf8:	beq.w	da4e <_svfprintf_r+0x6f6>
    dbfc:	strb.w	r1, [sp, #111]	; 0x6f
    dc00:	b.n	da4e <_svfprintf_r+0x6f6>
    dc02:	str	r3, [sp, #52]	; 0x34
    dc04:	mov	fp, r5
    dc06:	cmp	r2, #0
    dc08:	bne.w	ea28 <_svfprintf_r+0x16d0>
    dc0c:	ldr	r3, [sp, #12]
    dc0e:	ldr	r0, [pc, #344]	; (dd68 <_svfprintf_r+0xa10>)
    dc10:	lsls	r5, r3, #26
    dc12:	bmi.w	daac <_svfprintf_r+0x754>
    dc16:	ldr	r3, [sp, #12]
    dc18:	lsls	r4, r3, #27
    dc1a:	bpl.w	e49a <_svfprintf_r+0x1142>
    dc1e:	ldr	r2, [sp, #40]	; 0x28
    dc20:	mov	r3, r2
    dc22:	adds	r3, #4
    dc24:	ldr	r4, [r2, #0]
    dc26:	str	r3, [sp, #40]	; 0x28
    dc28:	movs	r5, #0
    dc2a:	b.n	dabe <_svfprintf_r+0x766>
    dc2c:	ldrb.w	r3, [r8]
    dc30:	cmp	r3, #108	; 0x6c
    dc32:	beq.w	e5ba <_svfprintf_r+0x1262>
    dc36:	ldr	r0, [sp, #12]
    dc38:	orr.w	r0, r0, #16
    dc3c:	str	r0, [sp, #12]
    dc3e:	b.w	d40c <_svfprintf_r+0xb4>
    dc42:	cmp	r2, #0
    dc44:	bne.w	ea20 <_svfprintf_r+0x16c8>
    dc48:	ldr	r3, [sp, #12]
    dc4a:	lsls	r3, r3, #26
    dc4c:	bpl.w	e2fe <_svfprintf_r+0xfa6>
    dc50:	ldr	r2, [sp, #40]	; 0x28
    dc52:	ldr	r1, [sp, #28]
    dc54:	ldr	r3, [r2, #0]
    dc56:	asrs	r5, r1, #31
    dc58:	mov	r0, r1
    dc5a:	adds	r2, #4
    dc5c:	mov	r1, r5
    dc5e:	str	r2, [sp, #40]	; 0x28
    dc60:	strd	r0, r1, [r3]
    dc64:	b.w	d3a6 <_svfprintf_r+0x4e>
    dc68:	ldr	r0, [pc, #252]	; (dd68 <_svfprintf_r+0xa10>)
    dc6a:	str	r2, [sp, #52]	; 0x34
    dc6c:	cmp.w	fp, #0
    dc70:	bne.w	df5c <_svfprintf_r+0xc04>
    dc74:	mov	r7, fp
    dc76:	mov.w	fp, #0
    dc7a:	str.w	fp, [sp, #36]	; 0x24
    dc7e:	add	r6, sp, #192	; 0xc0
    dc80:	b.n	d6ee <_svfprintf_r+0x396>
    dc82:	str	r3, [sp, #52]	; 0x34
    dc84:	cmp	r2, #0
    dc86:	bne.w	ea18 <_svfprintf_r+0x16c0>
    dc8a:	ldr	r2, [sp, #52]	; 0x34
    dc8c:	cmp	r2, #0
    dc8e:	beq.w	d53e <_svfprintf_r+0x1e6>
    dc92:	movs	r3, #0
    dc94:	movs	r1, #1
    dc96:	mov	r7, r3
    dc98:	str	r1, [sp, #16]
    dc9a:	strb.w	r2, [sp, #152]	; 0x98
    dc9e:	strb.w	r3, [sp, #111]	; 0x6f
    dca2:	mov	fp, r3
    dca4:	str	r3, [sp, #60]	; 0x3c
    dca6:	str	r1, [sp, #36]	; 0x24
    dca8:	add	r6, sp, #152	; 0x98
    dcaa:	b.n	d704 <_svfprintf_r+0x3ac>
    dcac:	cmp.w	fp, #0
    dcb0:	beq.w	e8d0 <_svfprintf_r+0x1578>
    dcb4:	movs	r7, #0
    dcb6:	movs	r4, #0
    dcb8:	movs	r5, #0
    dcba:	b.n	d5a4 <_svfprintf_r+0x24c>
    dcbc:	ldr	r0, [pc, #168]	; (dd68 <_svfprintf_r+0xa10>)
    dcbe:	str	r3, [sp, #12]
    dcc0:	str	r2, [sp, #52]	; 0x34
    dcc2:	orrs.w	r3, r4, r5
    dcc6:	str	r7, [sp, #40]	; 0x28
    dcc8:	mov.w	r7, #0
    dccc:	bne.w	dafa <_svfprintf_r+0x7a2>
    dcd0:	movs	r4, #0
    dcd2:	movs	r5, #0
    dcd4:	b.n	dafa <_svfprintf_r+0x7a2>
    dcd6:	ldr	r4, [sp, #148]	; 0x94
    dcd8:	b.n	d7a4 <_svfprintf_r+0x44c>
    dcda:	ldr	r3, [sp, #52]	; 0x34
    dcdc:	cmp	r3, #101	; 0x65
    dcde:	ble.w	de36 <_svfprintf_r+0xade>
    dce2:	movs	r2, #0
    dce4:	movs	r3, #0
    dce6:	ldrd	r0, r1, [sp, #64]	; 0x40
    dcea:	bl	a5fc <__aeabi_dcmpeq>
    dcee:	cmp	r0, #0
    dcf0:	beq.w	df60 <_svfprintf_r+0xc08>
    dcf4:	ldr	r3, [sp, #144]	; 0x90
    dcf6:	ldr	r2, [pc, #116]	; (dd6c <_svfprintf_r+0xa14>)
    dcf8:	str.w	r2, [r9]
    dcfc:	adds	r3, #1
    dcfe:	adds	r4, #1
    dd00:	movs	r2, #1
    dd02:	cmp	r3, #7
    dd04:	str	r4, [sp, #148]	; 0x94
    dd06:	str	r3, [sp, #144]	; 0x90
    dd08:	str.w	r2, [r9, #4]
    dd0c:	bgt.w	e4ec <_svfprintf_r+0x1194>
    dd10:	add.w	r9, r9, #8
    dd14:	ldr	r3, [sp, #116]	; 0x74
    dd16:	ldr	r2, [sp, #56]	; 0x38
    dd18:	cmp	r3, r2
    dd1a:	blt.n	dd24 <_svfprintf_r+0x9cc>
    dd1c:	ldr	r3, [sp, #12]
    dd1e:	lsls	r3, r3, #31
    dd20:	bpl.w	d884 <_svfprintf_r+0x52c>
    dd24:	ldr	r3, [sp, #144]	; 0x90
    dd26:	ldr	r1, [sp, #72]	; 0x48
    dd28:	ldr	r2, [sp, #76]	; 0x4c
    dd2a:	str.w	r2, [r9]
    dd2e:	adds	r3, #1
    dd30:	add	r4, r1
    dd32:	cmp	r3, #7
    dd34:	str	r4, [sp, #148]	; 0x94
    dd36:	str.w	r1, [r9, #4]
    dd3a:	str	r3, [sp, #144]	; 0x90
    dd3c:	bgt.w	e5ce <_svfprintf_r+0x1276>
    dd40:	add.w	r9, r9, #8
    dd44:	ldr	r3, [sp, #56]	; 0x38
    dd46:	subs	r5, r3, #1
    dd48:	cmp	r5, #0
    dd4a:	ble.w	d884 <_svfprintf_r+0x52c>
    dd4e:	ldr	r2, [pc, #32]	; (dd70 <_svfprintf_r+0xa18>)
    dd50:	ldr	r3, [sp, #144]	; 0x90
    dd52:	str	r2, [sp, #44]	; 0x2c
    dd54:	cmp	r5, #16
    dd56:	ble.w	e12c <_svfprintf_r+0xdd4>
    dd5a:	movs	r6, #16
    dd5c:	ldr	r7, [sp, #24]
    dd5e:	ldr.w	fp, [sp, #20]
    dd62:	b.n	dd80 <_svfprintf_r+0xa28>
    dd64:	.word	0x20000878
    dd68:	.word	0x2000088c
    dd6c:	.word	0x20000854
    dd70:	.word	0x20000858
    dd74:	add.w	r9, r9, #8
    dd78:	subs	r5, #16
    dd7a:	cmp	r5, #16
    dd7c:	ble.w	e12c <_svfprintf_r+0xdd4>
    dd80:	adds	r3, #1
    dd82:	adds	r4, #16
    dd84:	cmp	r3, #7
    dd86:	str	r4, [sp, #148]	; 0x94
    dd88:	str	r3, [sp, #144]	; 0x90
    dd8a:	str.w	sl, [r9]
    dd8e:	str.w	r6, [r9, #4]
    dd92:	ble.n	dd74 <_svfprintf_r+0xa1c>
    dd94:	add	r2, sp, #140	; 0x8c
    dd96:	mov	r1, fp
    dd98:	mov	r0, r7
    dd9a:	bl	ea3c <__ssprint_r>
    dd9e:	cmp	r0, #0
    dda0:	bne.w	d54c <_svfprintf_r+0x1f4>
    dda4:	ldr	r4, [sp, #148]	; 0x94
    dda6:	ldr	r3, [sp, #144]	; 0x90
    dda8:	add.w	r9, sp, #192	; 0xc0
    ddac:	b.n	dd78 <_svfprintf_r+0xa20>
    ddae:	ldr	r3, [sp, #32]
    ddb0:	ldr	r2, [sp, #16]
    ddb2:	subs	r7, r3, r2
    ddb4:	cmp	r7, #0
    ddb6:	ble.w	d7ec <_svfprintf_r+0x494>
    ddba:	ldr	r2, [pc, #752]	; (e0ac <_svfprintf_r+0xd54>)
    ddbc:	ldr	r3, [sp, #144]	; 0x90
    ddbe:	str	r2, [sp, #44]	; 0x2c
    ddc0:	cmp	r7, #16
    ddc2:	ble.n	de1c <_svfprintf_r+0xac4>
    ddc4:	mov	r2, r9
    ddc6:	mov	r1, r4
    ddc8:	mov	r9, r7
    ddca:	movs	r5, #16
    ddcc:	mov	r7, r6
    ddce:	ldr	r4, [sp, #24]
    ddd0:	ldr	r6, [sp, #20]
    ddd2:	b.n	dde2 <_svfprintf_r+0xa8a>
    ddd4:	sub.w	r9, r9, #16
    ddd8:	cmp.w	r9, #16
    dddc:	add.w	r2, r2, #8
    dde0:	ble.n	de14 <_svfprintf_r+0xabc>
    dde2:	adds	r3, #1
    dde4:	adds	r1, #16
    dde6:	cmp	r3, #7
    dde8:	str	r1, [sp, #148]	; 0x94
    ddea:	str	r3, [sp, #144]	; 0x90
    ddec:	str.w	sl, [r2]
    ddf0:	str	r5, [r2, #4]
    ddf2:	ble.n	ddd4 <_svfprintf_r+0xa7c>
    ddf4:	add	r2, sp, #140	; 0x8c
    ddf6:	mov	r1, r6
    ddf8:	mov	r0, r4
    ddfa:	bl	ea3c <__ssprint_r>
    ddfe:	cmp	r0, #0
    de00:	bne.w	d54c <_svfprintf_r+0x1f4>
    de04:	sub.w	r9, r9, #16
    de08:	cmp.w	r9, #16
    de0c:	ldr	r1, [sp, #148]	; 0x94
    de0e:	ldr	r3, [sp, #144]	; 0x90
    de10:	add	r2, sp, #192	; 0xc0
    de12:	bgt.n	dde2 <_svfprintf_r+0xa8a>
    de14:	mov	r6, r7
    de16:	mov	r4, r1
    de18:	mov	r7, r9
    de1a:	mov	r9, r2
    de1c:	adds	r3, #1
    de1e:	ldr	r2, [sp, #44]	; 0x2c
    de20:	str	r3, [sp, #144]	; 0x90
    de22:	add	r4, r7
    de24:	cmp	r3, #7
    de26:	str	r4, [sp, #148]	; 0x94
    de28:	stmia.w	r9, {r2, r7}
    de2c:	bgt.w	e2aa <_svfprintf_r+0xf52>
    de30:	add.w	r9, r9, #8
    de34:	b.n	d7ec <_svfprintf_r+0x494>
    de36:	ldr	r3, [sp, #56]	; 0x38
    de38:	ldr	r5, [sp, #144]	; 0x90
    de3a:	cmp	r3, #1
    de3c:	ble.w	e254 <_svfprintf_r+0xefc>
    de40:	adds	r5, #1
    de42:	adds	r4, #1
    de44:	movs	r3, #1
    de46:	cmp	r5, #7
    de48:	str	r4, [sp, #148]	; 0x94
    de4a:	str	r5, [sp, #144]	; 0x90
    de4c:	str.w	r6, [r9]
    de50:	str.w	r3, [r9, #4]
    de54:	bgt.w	e276 <_svfprintf_r+0xf1e>
    de58:	add.w	r9, r9, #8
    de5c:	ldr	r2, [sp, #72]	; 0x48
    de5e:	ldr	r3, [sp, #76]	; 0x4c
    de60:	str.w	r3, [r9]
    de64:	adds	r5, #1
    de66:	add	r4, r2
    de68:	cmp	r5, #7
    de6a:	str	r4, [sp, #148]	; 0x94
    de6c:	str	r5, [sp, #144]	; 0x90
    de6e:	str.w	r2, [r9, #4]
    de72:	bgt.w	e290 <_svfprintf_r+0xf38>
    de76:	add.w	r9, r9, #8
    de7a:	movs	r3, #0
    de7c:	movs	r2, #0
    de7e:	ldrd	r0, r1, [sp, #64]	; 0x40
    de82:	bl	a5fc <__aeabi_dcmpeq>
    de86:	ldr	r3, [sp, #56]	; 0x38
    de88:	cmp	r0, #0
    de8a:	bne.w	e014 <_svfprintf_r+0xcbc>
    de8e:	subs	r3, #1
    de90:	adds	r5, #1
    de92:	adds	r6, #1
    de94:	add	r4, r3
    de96:	cmp	r5, #7
    de98:	str	r5, [sp, #144]	; 0x90
    de9a:	str	r4, [sp, #148]	; 0x94
    de9c:	str.w	r6, [r9]
    dea0:	str.w	r3, [r9, #4]
    dea4:	bgt.w	e092 <_svfprintf_r+0xd3a>
    dea8:	add.w	r9, r9, #8
    deac:	ldr	r2, [sp, #84]	; 0x54
    deae:	str.w	r2, [r9, #4]
    deb2:	adds	r5, #1
    deb4:	add	r4, r2
    deb6:	add	r3, sp, #124	; 0x7c
    deb8:	cmp	r5, #7
    deba:	str	r4, [sp, #148]	; 0x94
    debc:	str	r5, [sp, #144]	; 0x90
    debe:	str.w	r3, [r9]
    dec2:	ble.w	d880 <_svfprintf_r+0x528>
    dec6:	add	r2, sp, #140	; 0x8c
    dec8:	ldr	r1, [sp, #20]
    deca:	ldr	r0, [sp, #24]
    decc:	bl	ea3c <__ssprint_r>
    ded0:	cmp	r0, #0
    ded2:	bne.w	d54c <_svfprintf_r+0x1f4>
    ded6:	ldr	r4, [sp, #148]	; 0x94
    ded8:	add.w	r9, sp, #192	; 0xc0
    dedc:	b.n	d884 <_svfprintf_r+0x52c>
    dede:	add	r2, sp, #140	; 0x8c
    dee0:	ldr	r1, [sp, #20]
    dee2:	ldr	r0, [sp, #24]
    dee4:	bl	ea3c <__ssprint_r>
    dee8:	cmp	r0, #0
    deea:	beq.w	d920 <_svfprintf_r+0x5c8>
    deee:	b.w	d54c <_svfprintf_r+0x1f4>
    def2:	add	r2, sp, #140	; 0x8c
    def4:	ldr	r1, [sp, #20]
    def6:	ldr	r0, [sp, #24]
    def8:	bl	ea3c <__ssprint_r>
    defc:	cmp	r0, #0
    defe:	bne.w	d54c <_svfprintf_r+0x1f4>
    df02:	ldr	r4, [sp, #148]	; 0x94
    df04:	add.w	r9, sp, #192	; 0xc0
    df08:	b.n	d85e <_svfprintf_r+0x506>
    df0a:	add	r2, sp, #140	; 0x8c
    df0c:	ldr	r1, [sp, #20]
    df0e:	ldr	r0, [sp, #24]
    df10:	bl	ea3c <__ssprint_r>
    df14:	cmp	r0, #0
    df16:	bne.w	d54c <_svfprintf_r+0x1f4>
    df1a:	ldr	r4, [sp, #148]	; 0x94
    df1c:	add.w	r9, sp, #192	; 0xc0
    df20:	b.n	d7c4 <_svfprintf_r+0x46c>
    df22:	add	r2, sp, #140	; 0x8c
    df24:	ldr	r1, [sp, #20]
    df26:	ldr	r0, [sp, #24]
    df28:	bl	ea3c <__ssprint_r>
    df2c:	cmp	r0, #0
    df2e:	bne.w	d54c <_svfprintf_r+0x1f4>
    df32:	ldr	r4, [sp, #148]	; 0x94
    df34:	add.w	r9, sp, #192	; 0xc0
    df38:	b.n	d7e4 <_svfprintf_r+0x48c>
    df3a:	cmp.w	fp, #0
    df3e:	strb.w	r7, [sp, #111]	; 0x6f
    df42:	blt.w	e504 <_svfprintf_r+0x11ac>
    df46:	bic.w	r3, r2, #128	; 0x80
    df4a:	str	r3, [sp, #12]
    df4c:	orrs.w	r3, r4, r5
    df50:	bne.w	dafa <_svfprintf_r+0x7a2>
    df54:	cmp.w	fp, #0
    df58:	beq.w	dc74 <_svfprintf_r+0x91c>
    df5c:	movs	r7, #0
    df5e:	b.n	dcd0 <_svfprintf_r+0x978>
    df60:	ldr	r5, [sp, #116]	; 0x74
    df62:	cmp	r5, #0
    df64:	ble.w	e50a <_svfprintf_r+0x11b2>
    df68:	ldr	r3, [sp, #60]	; 0x3c
    df6a:	ldr	r2, [sp, #56]	; 0x38
    df6c:	cmp	r3, r2
    df6e:	it	ge
    df70:	movge	r3, r2
    df72:	cmp	r3, #0
    df74:	mov	r5, r3
    df76:	ble.n	df94 <_svfprintf_r+0xc3c>
    df78:	ldr	r3, [sp, #144]	; 0x90
    df7a:	str.w	r6, [r9]
    df7e:	adds	r3, #1
    df80:	add	r4, r5
    df82:	cmp	r3, #7
    df84:	str	r4, [sp, #148]	; 0x94
    df86:	str.w	r5, [r9, #4]
    df8a:	str	r3, [sp, #144]	; 0x90
    df8c:	bgt.w	e6e2 <_svfprintf_r+0x138a>
    df90:	add.w	r9, r9, #8
    df94:	ldr	r3, [sp, #60]	; 0x3c
    df96:	cmp	r5, #0
    df98:	it	ge
    df9a:	subge	r3, r3, r5
    df9c:	cmp	r3, #0
    df9e:	mov	r5, r3
    dfa0:	ble.w	e194 <_svfprintf_r+0xe3c>
    dfa4:	ldr	r2, [pc, #260]	; (e0ac <_svfprintf_r+0xd54>)
    dfa6:	ldr	r3, [sp, #144]	; 0x90
    dfa8:	str	r2, [sp, #44]	; 0x2c
    dfaa:	cmp	r5, #16
    dfac:	ble.w	e4b6 <_svfprintf_r+0x115e>
    dfb0:	mov	r2, r4
    dfb2:	movs	r7, #16
    dfb4:	ldr.w	fp, [sp, #24]
    dfb8:	ldr	r4, [sp, #20]
    dfba:	b.n	dfc8 <_svfprintf_r+0xc70>
    dfbc:	add.w	r9, r9, #8
    dfc0:	subs	r5, #16
    dfc2:	cmp	r5, #16
    dfc4:	ble.w	e4b4 <_svfprintf_r+0x115c>
    dfc8:	adds	r3, #1
    dfca:	adds	r2, #16
    dfcc:	cmp	r3, #7
    dfce:	str	r2, [sp, #148]	; 0x94
    dfd0:	str	r3, [sp, #144]	; 0x90
    dfd2:	str.w	sl, [r9]
    dfd6:	str.w	r7, [r9, #4]
    dfda:	ble.n	dfbc <_svfprintf_r+0xc64>
    dfdc:	add	r2, sp, #140	; 0x8c
    dfde:	mov	r1, r4
    dfe0:	mov	r0, fp
    dfe2:	bl	ea3c <__ssprint_r>
    dfe6:	cmp	r0, #0
    dfe8:	bne.w	d54c <_svfprintf_r+0x1f4>
    dfec:	ldr	r2, [sp, #148]	; 0x94
    dfee:	ldr	r3, [sp, #144]	; 0x90
    dff0:	add.w	r9, sp, #192	; 0xc0
    dff4:	b.n	dfc0 <_svfprintf_r+0xc68>
    dff6:	add	r2, sp, #140	; 0x8c
    dff8:	ldr	r1, [sp, #20]
    dffa:	ldr	r0, [sp, #24]
    dffc:	bl	ea3c <__ssprint_r>
    e000:	cmp	r0, #0
    e002:	bne.w	d54c <_svfprintf_r+0x1f4>
    e006:	ldrb.w	r7, [sp, #111]	; 0x6f
    e00a:	ldr	r4, [sp, #148]	; 0x94
    e00c:	add.w	r9, sp, #192	; 0xc0
    e010:	b.w	d7a4 <_svfprintf_r+0x44c>
    e014:	subs	r6, r3, #1
    e016:	cmp	r6, #0
    e018:	ble.w	deac <_svfprintf_r+0xb54>
    e01c:	ldr	r3, [pc, #140]	; (e0ac <_svfprintf_r+0xd54>)
    e01e:	str	r3, [sp, #44]	; 0x2c
    e020:	cmp	r6, #16
    e022:	ble.n	e07e <_svfprintf_r+0xd26>
    e024:	str.w	r8, [sp, #36]	; 0x24
    e028:	movs	r7, #16
    e02a:	mov	r8, r6
    e02c:	ldr.w	fp, [sp, #24]
    e030:	ldr	r6, [sp, #20]
    e032:	b.n	e042 <_svfprintf_r+0xcea>
    e034:	sub.w	r8, r8, #16
    e038:	cmp.w	r8, #16
    e03c:	add.w	r9, r9, #8
    e040:	ble.n	e078 <_svfprintf_r+0xd20>
    e042:	adds	r5, #1
    e044:	adds	r4, #16
    e046:	cmp	r5, #7
    e048:	str	r4, [sp, #148]	; 0x94
    e04a:	str	r5, [sp, #144]	; 0x90
    e04c:	str.w	sl, [r9]
    e050:	str.w	r7, [r9, #4]
    e054:	ble.n	e034 <_svfprintf_r+0xcdc>
    e056:	add	r2, sp, #140	; 0x8c
    e058:	mov	r1, r6
    e05a:	mov	r0, fp
    e05c:	bl	ea3c <__ssprint_r>
    e060:	cmp	r0, #0
    e062:	bne.w	d54c <_svfprintf_r+0x1f4>
    e066:	sub.w	r8, r8, #16
    e06a:	cmp.w	r8, #16
    e06e:	ldr	r4, [sp, #148]	; 0x94
    e070:	ldr	r5, [sp, #144]	; 0x90
    e072:	add.w	r9, sp, #192	; 0xc0
    e076:	bgt.n	e042 <_svfprintf_r+0xcea>
    e078:	mov	r6, r8
    e07a:	ldr.w	r8, [sp, #36]	; 0x24
    e07e:	ldr	r3, [sp, #44]	; 0x2c
    e080:	adds	r5, #1
    e082:	add	r4, r6
    e084:	cmp	r5, #7
    e086:	str	r4, [sp, #148]	; 0x94
    e088:	str	r5, [sp, #144]	; 0x90
    e08a:	stmia.w	r9, {r3, r6}
    e08e:	ble.w	dea8 <_svfprintf_r+0xb50>
    e092:	add	r2, sp, #140	; 0x8c
    e094:	ldr	r1, [sp, #20]
    e096:	ldr	r0, [sp, #24]
    e098:	bl	ea3c <__ssprint_r>
    e09c:	cmp	r0, #0
    e09e:	bne.w	d54c <_svfprintf_r+0x1f4>
    e0a2:	ldr	r4, [sp, #148]	; 0x94
    e0a4:	ldr	r5, [sp, #144]	; 0x90
    e0a6:	add.w	r9, sp, #192	; 0xc0
    e0aa:	b.n	deac <_svfprintf_r+0xb54>
    e0ac:	.word	0x20000858
    e0b0:	ldr	r1, [sp, #12]
    e0b2:	ands.w	r2, r1, #16
    e0b6:	beq.w	e460 <_svfprintf_r+0x1108>
    e0ba:	ldr	r0, [sp, #40]	; 0x28
    e0bc:	strb.w	r3, [sp, #111]	; 0x6f
    e0c0:	cmp.w	fp, #0
    e0c4:	ldr	r4, [r0, #0]
    e0c6:	add.w	r7, r0, #4
    e0ca:	mov.w	r5, #0
    e0ce:	blt.n	e11e <_svfprintf_r+0xdc6>
    e0d0:	mov	r2, r1
    e0d2:	bic.w	r2, r2, #128	; 0x80
    e0d6:	str	r2, [sp, #12]
    e0d8:	orrs.w	r2, r4, r5
    e0dc:	str	r7, [sp, #40]	; 0x28
    e0de:	mov	r7, r3
    e0e0:	bne.w	d6b4 <_svfprintf_r+0x35c>
    e0e4:	b.n	da84 <_svfprintf_r+0x72c>
    e0e6:	ldr	r3, [sp, #12]
    e0e8:	lsls	r0, r3, #27
    e0ea:	bmi.n	e142 <_svfprintf_r+0xdea>
    e0ec:	ldr	r3, [sp, #12]
    e0ee:	lsls	r1, r3, #25
    e0f0:	bpl.n	e142 <_svfprintf_r+0xdea>
    e0f2:	ldr	r1, [sp, #40]	; 0x28
    e0f4:	ldrsh.w	r4, [r1]
    e0f8:	adds	r1, #4
    e0fa:	asrs	r5, r4, #31
    e0fc:	mov	r2, r4
    e0fe:	mov	r3, r5
    e100:	str	r1, [sp, #40]	; 0x28
    e102:	b.w	d68e <_svfprintf_r+0x336>
    e106:	ldr	r1, [sp, #40]	; 0x28
    e108:	strb.w	r3, [sp, #111]	; 0x6f
    e10c:	cmp.w	fp, #0
    e110:	ldr	r4, [r1, #0]
    e112:	add.w	r7, r1, #4
    e116:	mov.w	r5, #0
    e11a:	bge.w	e5b6 <_svfprintf_r+0x125e>
    e11e:	str	r7, [sp, #40]	; 0x28
    e120:	mov	r7, r3
    e122:	orrs.w	r3, r4, r5
    e126:	bne.w	d6b4 <_svfprintf_r+0x35c>
    e12a:	b.n	da8e <_svfprintf_r+0x736>
    e12c:	adds	r3, #1
    e12e:	ldr	r2, [sp, #44]	; 0x2c
    e130:	str	r3, [sp, #144]	; 0x90
    e132:	add	r4, r5
    e134:	cmp	r3, #7
    e136:	str	r4, [sp, #148]	; 0x94
    e138:	stmia.w	r9, {r2, r5}
    e13c:	ble.w	d880 <_svfprintf_r+0x528>
    e140:	b.n	dec6 <_svfprintf_r+0xb6e>
    e142:	ldr	r2, [sp, #40]	; 0x28
    e144:	ldr	r4, [r2, #0]
    e146:	mov	r3, r2
    e148:	adds	r3, #4
    e14a:	asrs	r5, r4, #31
    e14c:	mov	r2, r4
    e14e:	str	r3, [sp, #40]	; 0x28
    e150:	cmp	r2, #0
    e152:	mov	r3, r5
    e154:	sbcs.w	r3, r3, #0
    e158:	bge.w	d698 <_svfprintf_r+0x340>
    e15c:	negs	r4, r4
    e15e:	mov.w	r7, #45	; 0x2d
    e162:	sbc.w	r5, r5, r5, lsl #1
    e166:	cmp.w	fp, #0
    e16a:	strb.w	r7, [sp, #111]	; 0x6f
    e16e:	blt.w	d6b4 <_svfprintf_r+0x35c>
    e172:	ldr	r3, [sp, #12]
    e174:	bic.w	r3, r3, #128	; 0x80
    e178:	str	r3, [sp, #12]
    e17a:	b.w	d6b4 <_svfprintf_r+0x35c>
    e17e:	add	r2, sp, #140	; 0x8c
    e180:	ldr	r1, [sp, #20]
    e182:	ldr	r0, [sp, #24]
    e184:	bl	ea3c <__ssprint_r>
    e188:	cmp	r0, #0
    e18a:	bne.w	d54c <_svfprintf_r+0x1f4>
    e18e:	ldr	r4, [sp, #148]	; 0x94
    e190:	add.w	r9, sp, #192	; 0xc0
    e194:	ldr	r2, [sp, #60]	; 0x3c
    e196:	ldr	r3, [sp, #116]	; 0x74
    e198:	add	r2, r6
    e19a:	mov	r7, r2
    e19c:	ldr	r2, [sp, #56]	; 0x38
    e19e:	cmp	r3, r2
    e1a0:	blt.n	e232 <_svfprintf_r+0xeda>
    e1a2:	ldr	r2, [sp, #12]
    e1a4:	lsls	r5, r2, #31
    e1a6:	bmi.n	e232 <_svfprintf_r+0xeda>
    e1a8:	ldr	r1, [sp, #56]	; 0x38
    e1aa:	add	r6, r1
    e1ac:	subs	r5, r6, r7
    e1ae:	subs	r3, r1, r3
    e1b0:	cmp	r5, r3
    e1b2:	it	ge
    e1b4:	movge	r5, r3
    e1b6:	cmp	r5, #0
    e1b8:	mov	r6, r5
    e1ba:	ble.n	e1d8 <_svfprintf_r+0xe80>
    e1bc:	ldr	r2, [sp, #144]	; 0x90
    e1be:	str.w	r7, [r9]
    e1c2:	adds	r2, #1
    e1c4:	add	r4, r5
    e1c6:	cmp	r2, #7
    e1c8:	str	r4, [sp, #148]	; 0x94
    e1ca:	str.w	r5, [r9, #4]
    e1ce:	str	r2, [sp, #144]	; 0x90
    e1d0:	bgt.w	e7d0 <_svfprintf_r+0x1478>
    e1d4:	add.w	r9, r9, #8
    e1d8:	cmp	r6, #0
    e1da:	ite	ge
    e1dc:	subge	r5, r3, r6
    e1de:	movlt	r5, r3
    e1e0:	cmp	r5, #0
    e1e2:	ble.w	d884 <_svfprintf_r+0x52c>
    e1e6:	ldr	r2, [pc, #744]	; (e4d0 <_svfprintf_r+0x1178>)
    e1e8:	ldr	r3, [sp, #144]	; 0x90
    e1ea:	str	r2, [sp, #44]	; 0x2c
    e1ec:	cmp	r5, #16
    e1ee:	ble.n	e12c <_svfprintf_r+0xdd4>
    e1f0:	movs	r6, #16
    e1f2:	ldr	r7, [sp, #24]
    e1f4:	ldr.w	fp, [sp, #20]
    e1f8:	b.n	e204 <_svfprintf_r+0xeac>
    e1fa:	add.w	r9, r9, #8
    e1fe:	subs	r5, #16
    e200:	cmp	r5, #16
    e202:	ble.n	e12c <_svfprintf_r+0xdd4>
    e204:	adds	r3, #1
    e206:	adds	r4, #16
    e208:	cmp	r3, #7
    e20a:	str	r4, [sp, #148]	; 0x94
    e20c:	str	r3, [sp, #144]	; 0x90
    e20e:	str.w	sl, [r9]
    e212:	str.w	r6, [r9, #4]
    e216:	ble.n	e1fa <_svfprintf_r+0xea2>
    e218:	add	r2, sp, #140	; 0x8c
    e21a:	mov	r1, fp
    e21c:	mov	r0, r7
    e21e:	bl	ea3c <__ssprint_r>
    e222:	cmp	r0, #0
    e224:	bne.w	d54c <_svfprintf_r+0x1f4>
    e228:	ldr	r4, [sp, #148]	; 0x94
    e22a:	ldr	r3, [sp, #144]	; 0x90
    e22c:	add.w	r9, sp, #192	; 0xc0
    e230:	b.n	e1fe <_svfprintf_r+0xea6>
    e232:	ldr	r2, [sp, #144]	; 0x90
    e234:	ldr	r0, [sp, #72]	; 0x48
    e236:	ldr	r1, [sp, #76]	; 0x4c
    e238:	str.w	r1, [r9]
    e23c:	adds	r2, #1
    e23e:	add	r4, r0
    e240:	cmp	r2, #7
    e242:	str	r4, [sp, #148]	; 0x94
    e244:	str.w	r0, [r9, #4]
    e248:	str	r2, [sp, #144]	; 0x90
    e24a:	bgt.w	e7b6 <_svfprintf_r+0x145e>
    e24e:	add.w	r9, r9, #8
    e252:	b.n	e1a8 <_svfprintf_r+0xe50>
    e254:	ldr	r3, [sp, #12]
    e256:	lsls	r0, r3, #31
    e258:	bmi.w	de40 <_svfprintf_r+0xae8>
    e25c:	adds	r5, #1
    e25e:	adds	r4, #1
    e260:	movs	r3, #1
    e262:	cmp	r5, #7
    e264:	str	r4, [sp, #148]	; 0x94
    e266:	str	r5, [sp, #144]	; 0x90
    e268:	str.w	r6, [r9]
    e26c:	str.w	r3, [r9, #4]
    e270:	ble.w	dea8 <_svfprintf_r+0xb50>
    e274:	b.n	e092 <_svfprintf_r+0xd3a>
    e276:	add	r2, sp, #140	; 0x8c
    e278:	ldr	r1, [sp, #20]
    e27a:	ldr	r0, [sp, #24]
    e27c:	bl	ea3c <__ssprint_r>
    e280:	cmp	r0, #0
    e282:	bne.w	d54c <_svfprintf_r+0x1f4>
    e286:	ldr	r4, [sp, #148]	; 0x94
    e288:	ldr	r5, [sp, #144]	; 0x90
    e28a:	add.w	r9, sp, #192	; 0xc0
    e28e:	b.n	de5c <_svfprintf_r+0xb04>
    e290:	add	r2, sp, #140	; 0x8c
    e292:	ldr	r1, [sp, #20]
    e294:	ldr	r0, [sp, #24]
    e296:	bl	ea3c <__ssprint_r>
    e29a:	cmp	r0, #0
    e29c:	bne.w	d54c <_svfprintf_r+0x1f4>
    e2a0:	ldr	r4, [sp, #148]	; 0x94
    e2a2:	ldr	r5, [sp, #144]	; 0x90
    e2a4:	add.w	r9, sp, #192	; 0xc0
    e2a8:	b.n	de7a <_svfprintf_r+0xb22>
    e2aa:	add	r2, sp, #140	; 0x8c
    e2ac:	ldr	r1, [sp, #20]
    e2ae:	ldr	r0, [sp, #24]
    e2b0:	bl	ea3c <__ssprint_r>
    e2b4:	cmp	r0, #0
    e2b6:	bne.w	d54c <_svfprintf_r+0x1f4>
    e2ba:	ldr	r4, [sp, #148]	; 0x94
    e2bc:	add.w	r9, sp, #192	; 0xc0
    e2c0:	b.w	d7ec <_svfprintf_r+0x494>
    e2c4:	ldr	r1, [sp, #12]
    e2c6:	ands.w	r3, r1, #64	; 0x40
    e2ca:	beq.w	e440 <_svfprintf_r+0x10e8>
    e2ce:	ldr	r0, [sp, #40]	; 0x28
    e2d0:	strb.w	r2, [sp, #111]	; 0x6f
    e2d4:	mov	r3, r0
    e2d6:	cmp.w	fp, #0
    e2da:	add.w	r3, r3, #4
    e2de:	ldrh	r4, [r0, #0]
    e2e0:	mov.w	r5, #0
    e2e4:	blt.w	e668 <_svfprintf_r+0x1310>
    e2e8:	bic.w	r1, r1, #128	; 0x80
    e2ec:	str	r1, [sp, #12]
    e2ee:	orrs.w	r1, r4, r5
    e2f2:	str	r3, [sp, #40]	; 0x28
    e2f4:	beq.w	dcac <_svfprintf_r+0x954>
    e2f8:	mov	r7, r2
    e2fa:	b.w	d5a4 <_svfprintf_r+0x24c>
    e2fe:	ldr	r3, [sp, #12]
    e300:	lsls	r7, r3, #27
    e302:	bmi.n	e31c <_svfprintf_r+0xfc4>
    e304:	ldr	r3, [sp, #12]
    e306:	lsls	r6, r3, #25
    e308:	bpl.n	e31c <_svfprintf_r+0xfc4>
    e30a:	ldr	r2, [sp, #40]	; 0x28
    e30c:	ldr	r3, [r2, #0]
    e30e:	adds	r2, #4
    e310:	str	r2, [sp, #40]	; 0x28
    e312:	ldrh.w	r2, [sp, #28]
    e316:	strh	r2, [r3, #0]
    e318:	b.w	d3a6 <_svfprintf_r+0x4e>
    e31c:	ldr	r2, [sp, #40]	; 0x28
    e31e:	ldr	r3, [r2, #0]
    e320:	adds	r2, #4
    e322:	str	r2, [sp, #40]	; 0x28
    e324:	ldr	r2, [sp, #28]
    e326:	str	r2, [r3, #0]
    e328:	b.w	d3a6 <_svfprintf_r+0x4e>
    e32c:	ldrd	r0, r1, [sp, #64]	; 0x40
    e330:	mov	r2, r0
    e332:	mov	r3, r1
    e334:	bl	a660 <__aeabi_dcmpun>
    e338:	cmp	r0, #0
    e33a:	bne.w	e938 <_svfprintf_r+0x15e0>
    e33e:	ldr	r3, [sp, #52]	; 0x34
    e340:	cmp.w	fp, #4294967295
    e344:	bic.w	r7, r3, #32
    e348:	beq.w	e81a <_svfprintf_r+0x14c2>
    e34c:	cmp	r7, #71	; 0x47
    e34e:	beq.w	e656 <_svfprintf_r+0x12fe>
    e352:	ldr	r3, [sp, #68]	; 0x44
    e354:	ldr	r2, [sp, #12]
    e356:	cmp	r3, #0
    e358:	orr.w	r2, r2, #256	; 0x100
    e35c:	str	r2, [sp, #44]	; 0x2c
    e35e:	blt.w	e852 <_svfprintf_r+0x14fa>
    e362:	vldr	d7, [sp, #64]	; 0x40
    e366:	vstr	d7, [sp, #96]	; 0x60
    e36a:	movs	r3, #0
    e36c:	str	r3, [sp, #16]
    e36e:	ldr	r3, [sp, #52]	; 0x34
    e370:	cmp	r3, #102	; 0x66
    e372:	beq.w	e820 <_svfprintf_r+0x14c8>
    e376:	cmp	r3, #70	; 0x46
    e378:	beq.w	e606 <_svfprintf_r+0x12ae>
    e37c:	cmp	r7, #69	; 0x45
    e37e:	ite	eq
    e380:	addeq.w	r5, fp, #1
    e384:	movne	r5, fp
    e386:	add	r2, sp, #132	; 0x84
    e388:	add	r3, sp, #120	; 0x78
    e38a:	str	r2, [sp, #4]
    e38c:	str	r3, [sp, #0]
    e38e:	mov	r2, r5
    e390:	add	r3, sp, #116	; 0x74
    e392:	movs	r1, #2
    e394:	vldr	d0, [sp, #96]	; 0x60
    e398:	ldr	r0, [sp, #24]
    e39a:	bl	c520 <_dtoa_r>
    e39e:	ldr	r3, [sp, #52]	; 0x34
    e3a0:	cmp	r3, #103	; 0x67
    e3a2:	mov	r6, r0
    e3a4:	bne.w	e87e <_svfprintf_r+0x1526>
    e3a8:	ldr	r3, [sp, #12]
    e3aa:	lsls	r2, r3, #31
    e3ac:	bpl.w	e922 <_svfprintf_r+0x15ca>
    e3b0:	adds	r4, r6, r5
    e3b2:	movs	r2, #0
    e3b4:	movs	r3, #0
    e3b6:	ldrd	r0, r1, [sp, #96]	; 0x60
    e3ba:	bl	a5fc <__aeabi_dcmpeq>
    e3be:	cmp	r0, #0
    e3c0:	bne.w	e6de <_svfprintf_r+0x1386>
    e3c4:	ldr	r3, [sp, #132]	; 0x84
    e3c6:	cmp	r4, r3
    e3c8:	bls.n	e3d8 <_svfprintf_r+0x1080>
    e3ca:	movs	r1, #48	; 0x30
    e3cc:	adds	r2, r3, #1
    e3ce:	str	r2, [sp, #132]	; 0x84
    e3d0:	strb	r1, [r3, #0]
    e3d2:	ldr	r3, [sp, #132]	; 0x84
    e3d4:	cmp	r4, r3
    e3d6:	bhi.n	e3cc <_svfprintf_r+0x1074>
    e3d8:	subs	r3, r3, r6
    e3da:	cmp	r7, #71	; 0x47
    e3dc:	str	r3, [sp, #56]	; 0x38
    e3de:	beq.w	e6d0 <_svfprintf_r+0x1378>
    e3e2:	ldr	r3, [sp, #52]	; 0x34
    e3e4:	cmp	r3, #101	; 0x65
    e3e6:	ble.w	e89c <_svfprintf_r+0x1544>
    e3ea:	ldr	r3, [sp, #52]	; 0x34
    e3ec:	cmp	r3, #102	; 0x66
    e3ee:	ldr	r3, [sp, #116]	; 0x74
    e3f0:	str	r3, [sp, #60]	; 0x3c
    e3f2:	beq.w	e8b6 <_svfprintf_r+0x155e>
    e3f6:	ldr	r2, [sp, #60]	; 0x3c
    e3f8:	ldr	r1, [sp, #56]	; 0x38
    e3fa:	cmp	r2, r1
    e3fc:	blt.w	e864 <_svfprintf_r+0x150c>
    e400:	ldr	r3, [sp, #12]
    e402:	lsls	r1, r3, #31
    e404:	bmi.w	e926 <_svfprintf_r+0x15ce>
    e408:	bic.w	r3, r2, r2, asr #31
    e40c:	str	r2, [sp, #36]	; 0x24
    e40e:	movs	r2, #103	; 0x67
    e410:	str	r2, [sp, #52]	; 0x34
    e412:	ldr	r2, [sp, #16]
    e414:	cmp	r2, #0
    e416:	bne.w	e678 <_svfprintf_r+0x1320>
    e41a:	str	r3, [sp, #16]
    e41c:	ldr	r3, [sp, #44]	; 0x2c
    e41e:	str	r3, [sp, #12]
    e420:	mov	fp, r2
    e422:	ldrb.w	r7, [sp, #111]	; 0x6f
    e426:	b.w	d6fc <_svfprintf_r+0x3a4>
    e42a:	bic.w	r7, r7, #7
    e42e:	vldr	d7, [r7]
    e432:	add.w	r3, r7, #8
    e436:	vstr	d7, [sp, #64]	; 0x40
    e43a:	str	r3, [sp, #40]	; 0x28
    e43c:	b.w	d954 <_svfprintf_r+0x5fc>
    e440:	ldr	r1, [sp, #40]	; 0x28
    e442:	strb.w	r3, [sp, #111]	; 0x6f
    e446:	cmp.w	fp, #0
    e44a:	ldr	r4, [r1, #0]
    e44c:	add.w	r7, r1, #4
    e450:	mov.w	r5, #0
    e454:	bge.w	e5b0 <_svfprintf_r+0x1258>
    e458:	str	r7, [sp, #40]	; 0x28
    e45a:	movs	r7, #0
    e45c:	b.w	d5a4 <_svfprintf_r+0x24c>
    e460:	ldr	r1, [sp, #12]
    e462:	ands.w	r3, r1, #64	; 0x40
    e466:	beq.w	e106 <_svfprintf_r+0xdae>
    e46a:	ldr	r0, [sp, #40]	; 0x28
    e46c:	strb.w	r2, [sp, #111]	; 0x6f
    e470:	mov	r3, r0
    e472:	cmp.w	fp, #0
    e476:	add.w	r3, r3, #4
    e47a:	ldrh	r4, [r0, #0]
    e47c:	mov.w	r5, #0
    e480:	blt.w	e662 <_svfprintf_r+0x130a>
    e484:	bic.w	r1, r1, #128	; 0x80
    e488:	str	r1, [sp, #12]
    e48a:	orrs.w	r1, r4, r5
    e48e:	str	r3, [sp, #40]	; 0x28
    e490:	mov	r7, r2
    e492:	bne.w	d6b4 <_svfprintf_r+0x35c>
    e496:	b.w	da84 <_svfprintf_r+0x72c>
    e49a:	ldr	r3, [sp, #12]
    e49c:	ldr	r2, [sp, #40]	; 0x28
    e49e:	tst.w	r3, #64	; 0x40
    e4a2:	mov	r3, r2
    e4a4:	beq.w	e66c <_svfprintf_r+0x1314>
    e4a8:	adds	r3, #4
    e4aa:	ldrh	r4, [r2, #0]
    e4ac:	str	r3, [sp, #40]	; 0x28
    e4ae:	movs	r5, #0
    e4b0:	b.w	dabe <_svfprintf_r+0x766>
    e4b4:	mov	r4, r2
    e4b6:	adds	r3, #1
    e4b8:	ldr	r2, [sp, #44]	; 0x2c
    e4ba:	str	r3, [sp, #144]	; 0x90
    e4bc:	add	r4, r5
    e4be:	cmp	r3, #7
    e4c0:	str	r4, [sp, #148]	; 0x94
    e4c2:	stmia.w	r9, {r2, r5}
    e4c6:	bgt.w	e17e <_svfprintf_r+0xe26>
    e4ca:	add.w	r9, r9, #8
    e4ce:	b.n	e194 <_svfprintf_r+0xe3c>
    e4d0:	.word	0x20000858
    e4d4:	movs	r7, #0
    e4d6:	cmp	fp, r7
    e4d8:	strb.w	r7, [sp, #111]	; 0x6f
    e4dc:	blt.w	dcd0 <_svfprintf_r+0x978>
    e4e0:	ldr	r3, [sp, #12]
    e4e2:	bic.w	r3, r3, #128	; 0x80
    e4e6:	str	r3, [sp, #12]
    e4e8:	b.w	dc6c <_svfprintf_r+0x914>
    e4ec:	add	r2, sp, #140	; 0x8c
    e4ee:	ldr	r1, [sp, #20]
    e4f0:	ldr	r0, [sp, #24]
    e4f2:	bl	ea3c <__ssprint_r>
    e4f6:	cmp	r0, #0
    e4f8:	bne.w	d54c <_svfprintf_r+0x1f4>
    e4fc:	ldr	r4, [sp, #148]	; 0x94
    e4fe:	add.w	r9, sp, #192	; 0xc0
    e502:	b.n	dd14 <_svfprintf_r+0x9bc>
    e504:	ldr	r7, [sp, #40]	; 0x28
    e506:	b.w	dcc2 <_svfprintf_r+0x96a>
    e50a:	ldr	r3, [sp, #144]	; 0x90
    e50c:	ldr	r2, [pc, #736]	; (e7f0 <_svfprintf_r+0x1498>)
    e50e:	str.w	r2, [r9]
    e512:	adds	r3, #1
    e514:	adds	r4, #1
    e516:	movs	r2, #1
    e518:	cmp	r3, #7
    e51a:	str	r4, [sp, #148]	; 0x94
    e51c:	str	r3, [sp, #144]	; 0x90
    e51e:	str.w	r2, [r9, #4]
    e522:	bgt.w	e63c <_svfprintf_r+0x12e4>
    e526:	add.w	r9, r9, #8
    e52a:	cbnz	r5, e538 <_svfprintf_r+0x11e0>
    e52c:	ldr	r3, [sp, #56]	; 0x38
    e52e:	cbnz	r3, e538 <_svfprintf_r+0x11e0>
    e530:	ldr	r3, [sp, #12]
    e532:	lsls	r7, r3, #31
    e534:	bpl.w	d884 <_svfprintf_r+0x52c>
    e538:	ldr	r3, [sp, #144]	; 0x90
    e53a:	ldr	r1, [sp, #72]	; 0x48
    e53c:	ldr	r2, [sp, #76]	; 0x4c
    e53e:	str.w	r2, [r9]
    e542:	adds	r3, #1
    e544:	add	r4, r1
    e546:	cmp	r3, #7
    e548:	str	r4, [sp, #148]	; 0x94
    e54a:	str.w	r1, [r9, #4]
    e54e:	str	r3, [sp, #144]	; 0x90
    e550:	bgt.w	e8ee <_svfprintf_r+0x1596>
    e554:	add.w	r9, r9, #8
    e558:	negs	r5, r5
    e55a:	cmp	r5, #0
    e55c:	ble.w	e6b4 <_svfprintf_r+0x135c>
    e560:	ldr	r2, [pc, #656]	; (e7f4 <_svfprintf_r+0x149c>)
    e562:	str	r2, [sp, #44]	; 0x2c
    e564:	cmp	r5, #16
    e566:	ble.w	e6fc <_svfprintf_r+0x13a4>
    e56a:	mov	r2, r4
    e56c:	movs	r7, #16
    e56e:	ldr.w	fp, [sp, #24]
    e572:	ldr	r4, [sp, #20]
    e574:	b.n	e582 <_svfprintf_r+0x122a>
    e576:	add.w	r9, r9, #8
    e57a:	subs	r5, #16
    e57c:	cmp	r5, #16
    e57e:	ble.w	e6fa <_svfprintf_r+0x13a2>
    e582:	adds	r3, #1
    e584:	adds	r2, #16
    e586:	cmp	r3, #7
    e588:	str	r2, [sp, #148]	; 0x94
    e58a:	str	r3, [sp, #144]	; 0x90
    e58c:	str.w	sl, [r9]
    e590:	str.w	r7, [r9, #4]
    e594:	ble.n	e576 <_svfprintf_r+0x121e>
    e596:	add	r2, sp, #140	; 0x8c
    e598:	mov	r1, r4
    e59a:	mov	r0, fp
    e59c:	bl	ea3c <__ssprint_r>
    e5a0:	cmp	r0, #0
    e5a2:	bne.w	d54c <_svfprintf_r+0x1f4>
    e5a6:	ldr	r2, [sp, #148]	; 0x94
    e5a8:	ldr	r3, [sp, #144]	; 0x90
    e5aa:	add.w	r9, sp, #192	; 0xc0
    e5ae:	b.n	e57a <_svfprintf_r+0x1222>
    e5b0:	ldr	r2, [sp, #12]
    e5b2:	b.w	da28 <_svfprintf_r+0x6d0>
    e5b6:	ldr	r2, [sp, #12]
    e5b8:	b.n	e0d2 <_svfprintf_r+0xd7a>
    e5ba:	ldr	r3, [sp, #12]
    e5bc:	orr.w	r3, r3, #32
    e5c0:	str	r3, [sp, #12]
    e5c2:	add.w	r8, r8, #1
    e5c6:	ldrb.w	r3, [r8]
    e5ca:	b.w	d40c <_svfprintf_r+0xb4>
    e5ce:	add	r2, sp, #140	; 0x8c
    e5d0:	ldr	r1, [sp, #20]
    e5d2:	ldr	r0, [sp, #24]
    e5d4:	bl	ea3c <__ssprint_r>
    e5d8:	cmp	r0, #0
    e5da:	bne.w	d54c <_svfprintf_r+0x1f4>
    e5de:	ldr	r4, [sp, #148]	; 0x94
    e5e0:	add.w	r9, sp, #192	; 0xc0
    e5e4:	b.w	dd44 <_svfprintf_r+0x9ec>
    e5e8:	movs	r1, #64	; 0x40
    e5ea:	ldr	r0, [sp, #24]
    e5ec:	bl	aa7c <_malloc_r>
    e5f0:	ldr	r2, [sp, #20]
    e5f2:	str	r0, [r2, #0]
    e5f4:	str	r0, [r2, #16]
    e5f6:	cmp	r0, #0
    e5f8:	beq.w	e9e2 <_svfprintf_r+0x168a>
    e5fc:	ldr	r2, [sp, #20]
    e5fe:	movs	r3, #64	; 0x40
    e600:	str	r3, [r2, #20]
    e602:	b.w	d386 <_svfprintf_r+0x2e>
    e606:	add	r2, sp, #132	; 0x84
    e608:	add	r3, sp, #120	; 0x78
    e60a:	str	r2, [sp, #4]
    e60c:	str	r3, [sp, #0]
    e60e:	mov	r2, fp
    e610:	add	r3, sp, #116	; 0x74
    e612:	movs	r1, #3
    e614:	vldr	d0, [sp, #96]	; 0x60
    e618:	ldr	r0, [sp, #24]
    e61a:	bl	c520 <_dtoa_r>
    e61e:	mov	r5, fp
    e620:	mov	r6, r0
    e622:	ldr	r3, [sp, #52]	; 0x34
    e624:	cmp	r3, #70	; 0x46
    e626:	add.w	r4, r6, r5
    e62a:	bne.w	e3b2 <_svfprintf_r+0x105a>
    e62e:	ldrb	r3, [r6, #0]
    e630:	cmp	r3, #48	; 0x30
    e632:	beq.w	e944 <_svfprintf_r+0x15ec>
    e636:	ldr	r5, [sp, #116]	; 0x74
    e638:	add	r4, r5
    e63a:	b.n	e3b2 <_svfprintf_r+0x105a>
    e63c:	add	r2, sp, #140	; 0x8c
    e63e:	ldr	r1, [sp, #20]
    e640:	ldr	r0, [sp, #24]
    e642:	bl	ea3c <__ssprint_r>
    e646:	cmp	r0, #0
    e648:	bne.w	d54c <_svfprintf_r+0x1f4>
    e64c:	ldr	r5, [sp, #116]	; 0x74
    e64e:	ldr	r4, [sp, #148]	; 0x94
    e650:	add.w	r9, sp, #192	; 0xc0
    e654:	b.n	e52a <_svfprintf_r+0x11d2>
    e656:	cmp.w	fp, #0
    e65a:	it	eq
    e65c:	moveq.w	fp, #1
    e660:	b.n	e352 <_svfprintf_r+0xffa>
    e662:	str	r3, [sp, #40]	; 0x28
    e664:	mov	r7, r2
    e666:	b.n	e122 <_svfprintf_r+0xdca>
    e668:	str	r3, [sp, #40]	; 0x28
    e66a:	b.n	e45a <_svfprintf_r+0x1102>
    e66c:	adds	r3, #4
    e66e:	ldr	r4, [r2, #0]
    e670:	str	r3, [sp, #40]	; 0x28
    e672:	movs	r5, #0
    e674:	b.w	dabe <_svfprintf_r+0x766>
    e678:	movs	r7, #45	; 0x2d
    e67a:	str	r3, [sp, #16]
    e67c:	ldr	r3, [sp, #44]	; 0x2c
    e67e:	str	r3, [sp, #12]
    e680:	strb.w	r7, [sp, #111]	; 0x6f
    e684:	mov.w	fp, #0
    e688:	b.w	d6fe <_svfprintf_r+0x3a6>
    e68c:	mov	r0, r6
    e68e:	bl	b7c0 <strlen>
    e692:	mov	fp, r4
    e694:	mov	r3, r0
    e696:	str	r0, [sp, #36]	; 0x24
    e698:	b.w	dbe0 <_svfprintf_r+0x888>
    e69c:	add	r2, sp, #140	; 0x8c
    e69e:	ldr	r1, [sp, #20]
    e6a0:	ldr	r0, [sp, #24]
    e6a2:	bl	ea3c <__ssprint_r>
    e6a6:	cmp	r0, #0
    e6a8:	bne.w	d54c <_svfprintf_r+0x1f4>
    e6ac:	ldr	r4, [sp, #148]	; 0x94
    e6ae:	ldr	r3, [sp, #144]	; 0x90
    e6b0:	add.w	r9, sp, #192	; 0xc0
    e6b4:	ldr	r1, [sp, #56]	; 0x38
    e6b6:	str.w	r6, [r9]
    e6ba:	adds	r3, #1
    e6bc:	add	r4, r1
    e6be:	cmp	r3, #7
    e6c0:	str	r4, [sp, #148]	; 0x94
    e6c2:	str	r3, [sp, #144]	; 0x90
    e6c4:	str.w	r1, [r9, #4]
    e6c8:	ble.w	d880 <_svfprintf_r+0x528>
    e6cc:	b.w	dec6 <_svfprintf_r+0xb6e>
    e6d0:	ldr	r3, [sp, #116]	; 0x74
    e6d2:	adds	r5, r3, #3
    e6d4:	blt.n	e714 <_svfprintf_r+0x13bc>
    e6d6:	cmp	fp, r3
    e6d8:	blt.n	e714 <_svfprintf_r+0x13bc>
    e6da:	str	r3, [sp, #60]	; 0x3c
    e6dc:	b.n	e3f6 <_svfprintf_r+0x109e>
    e6de:	mov	r3, r4
    e6e0:	b.n	e3d8 <_svfprintf_r+0x1080>
    e6e2:	add	r2, sp, #140	; 0x8c
    e6e4:	ldr	r1, [sp, #20]
    e6e6:	ldr	r0, [sp, #24]
    e6e8:	bl	ea3c <__ssprint_r>
    e6ec:	cmp	r0, #0
    e6ee:	bne.w	d54c <_svfprintf_r+0x1f4>
    e6f2:	ldr	r4, [sp, #148]	; 0x94
    e6f4:	add.w	r9, sp, #192	; 0xc0
    e6f8:	b.n	df94 <_svfprintf_r+0xc3c>
    e6fa:	mov	r4, r2
    e6fc:	adds	r3, #1
    e6fe:	ldr	r2, [sp, #44]	; 0x2c
    e700:	str	r3, [sp, #144]	; 0x90
    e702:	add	r4, r5
    e704:	cmp	r3, #7
    e706:	str	r4, [sp, #148]	; 0x94
    e708:	stmia.w	r9, {r2, r5}
    e70c:	bgt.n	e69c <_svfprintf_r+0x1344>
    e70e:	add.w	r9, r9, #8
    e712:	b.n	e6b4 <_svfprintf_r+0x135c>
    e714:	ldr	r2, [sp, #52]	; 0x34
    e716:	subs	r2, #2
    e718:	str	r2, [sp, #52]	; 0x34
    e71a:	subs	r3, #1
    e71c:	cmp	r3, #0
    e71e:	ldrb.w	r2, [sp, #52]	; 0x34
    e722:	str	r3, [sp, #116]	; 0x74
    e724:	it	lt
    e726:	neglt	r3, r3
    e728:	strb.w	r2, [sp, #124]	; 0x7c
    e72c:	ite	lt
    e72e:	movlt	r2, #45	; 0x2d
    e730:	movge	r2, #43	; 0x2b
    e732:	cmp	r3, #9
    e734:	strb.w	r2, [sp, #125]	; 0x7d
    e738:	ble.w	e912 <_svfprintf_r+0x15ba>
    e73c:	add.w	r0, sp, #139	; 0x8b
    e740:	mov	r4, r0
    e742:	ldr	r2, [pc, #180]	; (e7f8 <_svfprintf_r+0x14a0>)
    e744:	smull	r2, r1, r2, r3
    e748:	asrs	r2, r3, #31
    e74a:	rsb	r2, r2, r1, asr #2
    e74e:	add.w	r1, r2, r2, lsl #2
    e752:	sub.w	r3, r3, r1, lsl #1
    e756:	add.w	r1, r3, #48	; 0x30
    e75a:	cmp	r2, #9
    e75c:	mov	r3, r2
    e75e:	strb.w	r1, [r4, #-1]!
    e762:	bgt.n	e742 <_svfprintf_r+0x13ea>
    e764:	mov	r1, r4
    e766:	adds	r3, #48	; 0x30
    e768:	uxtb	r2, r3
    e76a:	strb.w	r2, [r1, #-1]!
    e76e:	cmp	r0, r1
    e770:	bls.w	e9dc <_svfprintf_r+0x1684>
    e774:	add.w	r1, sp, #126	; 0x7e
    e778:	mov	r3, r4
    e77a:	b.n	e780 <_svfprintf_r+0x1428>
    e77c:	ldrb.w	r2, [r3], #1
    e780:	strb.w	r2, [r1], #1
    e784:	cmp	r0, r3
    e786:	bne.n	e77c <_svfprintf_r+0x1424>
    e788:	adds	r3, r0, #1
    e78a:	subs	r3, r3, r4
    e78c:	add.w	r2, sp, #126	; 0x7e
    e790:	add	r3, r2
    e792:	add	r2, sp, #124	; 0x7c
    e794:	subs	r3, r3, r2
    e796:	ldr	r2, [sp, #56]	; 0x38
    e798:	str	r3, [sp, #84]	; 0x54
    e79a:	cmp	r2, #1
    e79c:	add	r3, r2
    e79e:	str	r3, [sp, #36]	; 0x24
    e7a0:	ble.w	e972 <_svfprintf_r+0x161a>
    e7a4:	ldr	r3, [sp, #36]	; 0x24
    e7a6:	ldr	r2, [sp, #72]	; 0x48
    e7a8:	add	r3, r2
    e7aa:	movs	r2, #0
    e7ac:	str	r3, [sp, #36]	; 0x24
    e7ae:	str	r2, [sp, #60]	; 0x3c
    e7b0:	bic.w	r3, r3, r3, asr #31
    e7b4:	b.n	e412 <_svfprintf_r+0x10ba>
    e7b6:	add	r2, sp, #140	; 0x8c
    e7b8:	ldr	r1, [sp, #20]
    e7ba:	ldr	r0, [sp, #24]
    e7bc:	bl	ea3c <__ssprint_r>
    e7c0:	cmp	r0, #0
    e7c2:	bne.w	d54c <_svfprintf_r+0x1f4>
    e7c6:	ldr	r3, [sp, #116]	; 0x74
    e7c8:	ldr	r4, [sp, #148]	; 0x94
    e7ca:	add.w	r9, sp, #192	; 0xc0
    e7ce:	b.n	e1a8 <_svfprintf_r+0xe50>
    e7d0:	add	r2, sp, #140	; 0x8c
    e7d2:	ldr	r1, [sp, #20]
    e7d4:	ldr	r0, [sp, #24]
    e7d6:	bl	ea3c <__ssprint_r>
    e7da:	cmp	r0, #0
    e7dc:	bne.w	d54c <_svfprintf_r+0x1f4>
    e7e0:	ldr	r3, [sp, #116]	; 0x74
    e7e2:	ldr	r2, [sp, #56]	; 0x38
    e7e4:	ldr	r4, [sp, #148]	; 0x94
    e7e6:	subs	r3, r2, r3
    e7e8:	add.w	r9, sp, #192	; 0xc0
    e7ec:	b.n	e1d8 <_svfprintf_r+0xe80>
    e7ee:	nop
    e7f0:	.word	0x20000854
    e7f4:	.word	0x20000858
    e7f8:	.word	0x66666667
    e7fc:	cmp	r5, #6
    e7fe:	mov	r3, r5
    e800:	it	cs
    e802:	movcs	r3, #6
    e804:	str	r3, [sp, #36]	; 0x24
    e806:	bic.w	r3, r3, r3, asr #31
    e80a:	mov	fp, r6
    e80c:	str	r7, [sp, #40]	; 0x28
    e80e:	str	r6, [sp, #60]	; 0x3c
    e810:	mov	r7, r6
    e812:	str	r3, [sp, #16]
    e814:	ldr	r6, [pc, #536]	; (ea30 <_svfprintf_r+0x16d8>)
    e816:	b.w	d6fc <_svfprintf_r+0x3a4>
    e81a:	mov.w	fp, #6
    e81e:	b.n	e352 <_svfprintf_r+0xffa>
    e820:	add	r2, sp, #132	; 0x84
    e822:	add	r3, sp, #120	; 0x78
    e824:	str	r2, [sp, #4]
    e826:	str	r3, [sp, #0]
    e828:	mov	r2, fp
    e82a:	add	r3, sp, #116	; 0x74
    e82c:	movs	r1, #3
    e82e:	vldr	d0, [sp, #96]	; 0x60
    e832:	ldr	r0, [sp, #24]
    e834:	bl	c520 <_dtoa_r>
    e838:	mov	r5, fp
    e83a:	mov	r6, r0
    e83c:	add.w	r4, r0, fp
    e840:	b.n	e62e <_svfprintf_r+0x12d6>
    e842:	movs	r7, #45	; 0x2d
    e844:	strb.w	r7, [sp, #111]	; 0x6f
    e848:	b.w	d9a2 <_svfprintf_r+0x64a>
    e84c:	str	r3, [sp, #12]
    e84e:	b.w	dafa <_svfprintf_r+0x7a2>
    e852:	ldrd	r1, r2, [sp, #64]	; 0x40
    e856:	add.w	r3, r2, #2147483648	; 0x80000000
    e85a:	str	r3, [sp, #100]	; 0x64
    e85c:	movs	r3, #45	; 0x2d
    e85e:	str	r1, [sp, #96]	; 0x60
    e860:	str	r3, [sp, #16]
    e862:	b.n	e36e <_svfprintf_r+0x1016>
    e864:	ldr	r2, [sp, #72]	; 0x48
    e866:	ldr	r3, [sp, #56]	; 0x38
    e868:	add	r3, r2
    e86a:	ldr	r2, [sp, #60]	; 0x3c
    e86c:	str	r3, [sp, #36]	; 0x24
    e86e:	cmp	r2, #0
    e870:	ble.w	e986 <_svfprintf_r+0x162e>
    e874:	movs	r2, #103	; 0x67
    e876:	bic.w	r3, r3, r3, asr #31
    e87a:	str	r2, [sp, #52]	; 0x34
    e87c:	b.n	e412 <_svfprintf_r+0x10ba>
    e87e:	ldr	r3, [sp, #52]	; 0x34
    e880:	cmp	r3, #71	; 0x47
    e882:	bne.w	e3b0 <_svfprintf_r+0x1058>
    e886:	ldr	r3, [sp, #12]
    e888:	lsls	r3, r3, #31
    e88a:	bmi.w	e622 <_svfprintf_r+0x12ca>
    e88e:	ldr	r3, [sp, #132]	; 0x84
    e890:	cmp	r7, #71	; 0x47
    e892:	sub.w	r3, r3, r6
    e896:	str	r3, [sp, #56]	; 0x38
    e898:	beq.w	e6d0 <_svfprintf_r+0x1378>
    e89c:	ldr	r3, [sp, #116]	; 0x74
    e89e:	b.n	e71a <_svfprintf_r+0x13c2>
    e8a0:	bic.w	r3, r5, r5, asr #31
    e8a4:	str	r7, [sp, #40]	; 0x28
    e8a6:	str	r3, [sp, #16]
    e8a8:	str	r5, [sp, #36]	; 0x24
    e8aa:	mov	fp, r0
    e8ac:	str	r0, [sp, #60]	; 0x3c
    e8ae:	ldrb.w	r7, [sp, #111]	; 0x6f
    e8b2:	b.w	d6fc <_svfprintf_r+0x3a4>
    e8b6:	cmp	r3, #0
    e8b8:	ble.n	e996 <_svfprintf_r+0x163e>
    e8ba:	cmp.w	fp, #0
    e8be:	bne.n	e960 <_svfprintf_r+0x1608>
    e8c0:	ldr	r2, [sp, #12]
    e8c2:	lsls	r4, r2, #31
    e8c4:	bmi.n	e960 <_svfprintf_r+0x1608>
    e8c6:	mov	r2, r3
    e8c8:	str	r2, [sp, #36]	; 0x24
    e8ca:	bic.w	r3, r3, r3, asr #31
    e8ce:	b.n	e412 <_svfprintf_r+0x10ba>
    e8d0:	ldr	r3, [sp, #12]
    e8d2:	lsls	r3, r3, #31
    e8d4:	mov	r7, fp
    e8d6:	bpl.n	e8e4 <_svfprintf_r+0x158c>
    e8d8:	add	r6, sp, #256	; 0x100
    e8da:	movs	r3, #48	; 0x30
    e8dc:	strb.w	r3, [r6, #-65]!
    e8e0:	b.w	d6e8 <_svfprintf_r+0x390>
    e8e4:	str.w	fp, [sp, #36]	; 0x24
    e8e8:	add	r6, sp, #192	; 0xc0
    e8ea:	b.w	d6ee <_svfprintf_r+0x396>
    e8ee:	add	r2, sp, #140	; 0x8c
    e8f0:	ldr	r1, [sp, #20]
    e8f2:	ldr	r0, [sp, #24]
    e8f4:	bl	ea3c <__ssprint_r>
    e8f8:	cmp	r0, #0
    e8fa:	bne.w	d54c <_svfprintf_r+0x1f4>
    e8fe:	ldr	r5, [sp, #116]	; 0x74
    e900:	ldr	r4, [sp, #148]	; 0x94
    e902:	ldr	r3, [sp, #144]	; 0x90
    e904:	add.w	r9, sp, #192	; 0xc0
    e908:	b.n	e558 <_svfprintf_r+0x1200>
    e90a:	mov	r8, r4
    e90c:	movs	r5, #0
    e90e:	b.w	d410 <_svfprintf_r+0xb8>
    e912:	adds	r3, #48	; 0x30
    e914:	movs	r2, #48	; 0x30
    e916:	strb.w	r3, [sp, #127]	; 0x7f
    e91a:	strb.w	r2, [sp, #126]	; 0x7e
    e91e:	add	r3, sp, #128	; 0x80
    e920:	b.n	e792 <_svfprintf_r+0x143a>
    e922:	ldr	r3, [sp, #132]	; 0x84
    e924:	b.n	e3d8 <_svfprintf_r+0x1080>
    e926:	ldr	r2, [sp, #72]	; 0x48
    e928:	ldr	r3, [sp, #60]	; 0x3c
    e92a:	add	r3, r2
    e92c:	movs	r2, #103	; 0x67
    e92e:	str	r3, [sp, #36]	; 0x24
    e930:	str	r2, [sp, #52]	; 0x34
    e932:	bic.w	r3, r3, r3, asr #31
    e936:	b.n	e412 <_svfprintf_r+0x10ba>
    e938:	ldr	r6, [pc, #248]	; (ea34 <_svfprintf_r+0x16dc>)
    e93a:	ldr	r3, [pc, #252]	; (ea38 <_svfprintf_r+0x16e0>)
    e93c:	ldrb.w	r7, [sp, #111]	; 0x6f
    e940:	b.w	d9a6 <_svfprintf_r+0x64e>
    e944:	movs	r2, #0
    e946:	movs	r3, #0
    e948:	ldrd	r0, r1, [sp, #96]	; 0x60
    e94c:	bl	a5fc <__aeabi_dcmpeq>
    e950:	cmp	r0, #0
    e952:	bne.w	e636 <_svfprintf_r+0x12de>
    e956:	rsb	r5, r5, #1
    e95a:	str	r5, [sp, #116]	; 0x74
    e95c:	add	r4, r5
    e95e:	b.n	e3b2 <_svfprintf_r+0x105a>
    e960:	ldr	r3, [sp, #60]	; 0x3c
    e962:	ldr	r2, [sp, #72]	; 0x48
    e964:	adds	r5, r3, r2
    e966:	add.w	r3, r5, fp
    e96a:	str	r3, [sp, #36]	; 0x24
    e96c:	bic.w	r3, r3, r3, asr #31
    e970:	b.n	e412 <_svfprintf_r+0x10ba>
    e972:	ldr	r3, [sp, #12]
    e974:	ands.w	r3, r3, #1
    e978:	bne.w	e7a4 <_svfprintf_r+0x144c>
    e97c:	str	r3, [sp, #60]	; 0x3c
    e97e:	ldr	r3, [sp, #36]	; 0x24
    e980:	bic.w	r3, r3, r3, asr #31
    e984:	b.n	e412 <_svfprintf_r+0x10ba>
    e986:	ldr	r3, [sp, #60]	; 0x3c
    e988:	ldr	r2, [sp, #36]	; 0x24
    e98a:	rsb	r3, r3, #1
    e98e:	add	r2, r3
    e990:	mov	r3, r2
    e992:	str	r2, [sp, #36]	; 0x24
    e994:	b.n	e874 <_svfprintf_r+0x151c>
    e996:	cmp.w	fp, #0
    e99a:	bne.n	e9a2 <_svfprintf_r+0x164a>
    e99c:	ldr	r3, [sp, #12]
    e99e:	lsls	r0, r3, #31
    e9a0:	bpl.n	e9b2 <_svfprintf_r+0x165a>
    e9a2:	ldr	r3, [sp, #72]	; 0x48
    e9a4:	adds	r5, r3, #1
    e9a6:	add.w	r3, r5, fp
    e9aa:	str	r3, [sp, #36]	; 0x24
    e9ac:	bic.w	r3, r3, r3, asr #31
    e9b0:	b.n	e412 <_svfprintf_r+0x10ba>
    e9b2:	movs	r3, #1
    e9b4:	str	r3, [sp, #36]	; 0x24
    e9b6:	b.n	e412 <_svfprintf_r+0x10ba>
    e9b8:	ldr	r0, [sp, #40]	; 0x28
    e9ba:	ldrb.w	r3, [r8, #1]
    e9be:	ldr	r5, [r0, #0]
    e9c0:	adds	r0, #4
    e9c2:	cmp	r5, #0
    e9c4:	str	r0, [sp, #40]	; 0x28
    e9c6:	mov	r8, r4
    e9c8:	bge.w	d40c <_svfprintf_r+0xb4>
    e9cc:	mov.w	r5, #4294967295
    e9d0:	b.w	d40c <_svfprintf_r+0xb4>
    e9d4:	strb.w	r1, [sp, #111]	; 0x6f
    e9d8:	b.w	d56e <_svfprintf_r+0x216>
    e9dc:	add.w	r3, sp, #126	; 0x7e
    e9e0:	b.n	e792 <_svfprintf_r+0x143a>
    e9e2:	ldr	r2, [sp, #24]
    e9e4:	movs	r3, #12
    e9e6:	str	r3, [r2, #0]
    e9e8:	mov.w	r0, #4294967295
    e9ec:	b.w	d55e <_svfprintf_r+0x206>
    e9f0:	strb.w	r1, [sp, #111]	; 0x6f
    e9f4:	b.w	d668 <_svfprintf_r+0x310>
    e9f8:	strb.w	r1, [sp, #111]	; 0x6f
    e9fc:	b.w	d934 <_svfprintf_r+0x5dc>
    ea00:	strb.w	r1, [sp, #111]	; 0x6f
    ea04:	b.w	daa2 <_svfprintf_r+0x74a>
    ea08:	strb.w	r1, [sp, #111]	; 0x6f
    ea0c:	b.w	da46 <_svfprintf_r+0x6ee>
    ea10:	strb.w	r1, [sp, #111]	; 0x6f
    ea14:	b.w	d9f2 <_svfprintf_r+0x69a>
    ea18:	strb.w	r1, [sp, #111]	; 0x6f
    ea1c:	b.w	dc8a <_svfprintf_r+0x932>
    ea20:	strb.w	r1, [sp, #111]	; 0x6f
    ea24:	b.w	dc48 <_svfprintf_r+0x8f0>
    ea28:	strb.w	r1, [sp, #111]	; 0x6f
    ea2c:	b.w	dc0c <_svfprintf_r+0x8b4>
    ea30:	.word	0x200008a0
    ea34:	.word	0x20000874
    ea38:	.word	0x20000870

0000ea3c <__ssprint_r>:
    ea3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea40:	ldr	r3, [r2, #8]
    ea42:	sub	sp, #12
    ea44:	mov	r8, r2
    ea46:	cmp	r3, #0
    ea48:	beq.n	eb30 <__ssprint_r+0xf4>
    ea4a:	mov	fp, r0
    ea4c:	mov.w	r9, #0
    ea50:	ldr	r6, [r2, #0]
    ea52:	ldr	r0, [r1, #0]
    ea54:	ldr	r3, [r1, #8]
    ea56:	mov	r5, r1
    ea58:	mov	r4, r9
    ea5a:	cmp	r4, #0
    ea5c:	beq.n	eaea <__ssprint_r+0xae>
    ea5e:	cmp	r4, r3
    ea60:	mov	r7, r3
    ea62:	mov	sl, r3
    ea64:	bcc.n	eaf4 <__ssprint_r+0xb8>
    ea66:	ldrh	r3, [r5, #12]
    ea68:	tst.w	r3, #1152	; 0x480
    ea6c:	beq.n	eaca <__ssprint_r+0x8e>
    ea6e:	ldr	r7, [r5, #20]
    ea70:	ldr	r1, [r5, #16]
    ea72:	add.w	r7, r7, r7, lsl #1
    ea76:	rsb	sl, r1, r0
    ea7a:	add.w	r7, r7, r7, lsr #31
    ea7e:	adds	r0, r4, #1
    ea80:	asrs	r7, r7, #1
    ea82:	add	r0, sl
    ea84:	cmp	r0, r7
    ea86:	mov	r2, r7
    ea88:	itt	hi
    ea8a:	movhi	r7, r0
    ea8c:	movhi	r2, r7
    ea8e:	lsls	r3, r3, #21
    ea90:	bpl.n	eafa <__ssprint_r+0xbe>
    ea92:	mov	r1, r2
    ea94:	mov	r0, fp
    ea96:	bl	aa7c <_malloc_r>
    ea9a:	cmp	r0, #0
    ea9c:	beq.n	eb0e <__ssprint_r+0xd2>
    ea9e:	mov	r2, sl
    eaa0:	ldr	r1, [r5, #16]
    eaa2:	str	r0, [sp, #4]
    eaa4:	bl	7fc4 <memcpy>
    eaa8:	ldrh	r2, [r5, #12]
    eaaa:	ldr	r3, [sp, #4]
    eaac:	bic.w	r2, r2, #1152	; 0x480
    eab0:	orr.w	r2, r2, #128	; 0x80
    eab4:	strh	r2, [r5, #12]
    eab6:	rsb	r2, sl, r7
    eaba:	add.w	r0, r3, sl
    eabe:	str	r7, [r5, #20]
    eac0:	str	r3, [r5, #16]
    eac2:	str	r0, [r5, #0]
    eac4:	str	r2, [r5, #8]
    eac6:	mov	r7, r4
    eac8:	mov	sl, r4
    eaca:	mov	r2, sl
    eacc:	mov	r1, r9
    eace:	bl	b124 <memmove>
    ead2:	ldr.w	r2, [r8, #8]
    ead6:	ldr	r3, [r5, #8]
    ead8:	ldr	r0, [r5, #0]
    eada:	subs	r3, r3, r7
    eadc:	add	r0, sl
    eade:	subs	r4, r2, r4
    eae0:	str	r3, [r5, #8]
    eae2:	str	r0, [r5, #0]
    eae4:	str.w	r4, [r8, #8]
    eae8:	cbz	r4, eb30 <__ssprint_r+0xf4>
    eaea:	ldr.w	r9, [r6]
    eaee:	ldr	r4, [r6, #4]
    eaf0:	adds	r6, #8
    eaf2:	b.n	ea5a <__ssprint_r+0x1e>
    eaf4:	mov	r7, r4
    eaf6:	mov	sl, r4
    eaf8:	b.n	eaca <__ssprint_r+0x8e>
    eafa:	mov	r0, fp
    eafc:	bl	b290 <_realloc_r>
    eb00:	mov	r3, r0
    eb02:	cmp	r0, #0
    eb04:	bne.n	eab6 <__ssprint_r+0x7a>
    eb06:	ldr	r1, [r5, #16]
    eb08:	mov	r0, fp
    eb0a:	bl	bb28 <_free_r>
    eb0e:	movs	r3, #12
    eb10:	str.w	r3, [fp]
    eb14:	ldrh	r3, [r5, #12]
    eb16:	movs	r2, #0
    eb18:	orr.w	r3, r3, #64	; 0x40
    eb1c:	mov.w	r0, #4294967295
    eb20:	strh	r3, [r5, #12]
    eb22:	str.w	r2, [r8, #8]
    eb26:	str.w	r2, [r8, #4]
    eb2a:	add	sp, #12
    eb2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb30:	movs	r0, #0
    eb32:	str.w	r0, [r8, #4]
    eb36:	add	sp, #12
    eb38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb3c:	movs	r0, r0
	...

0000eb40 <___init_veneer>:
    eb40:	ldr.w	pc, [pc]	; eb44 <___init_veneer+0x4>
    eb44:	.word	0x60001b19
	...

Disassembly of section .fini:

0000eb50 <_fini>:
    eb50:	push	{r3, r4, r5, r6, r7, lr}
    eb52:	nop
