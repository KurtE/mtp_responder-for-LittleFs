
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000105ac l    d  .fini	00000000 .fini
000105b0 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1470 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
0000924c l     F .text	0000000c startup_default_early_hook
00009258 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1470 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff1474 l       .bss	00000000 object.8610
000105a0 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000004a4 l     F .text	0000003c logg(unsigned long, char const*) [clone .part.12]
00000648 l     F .text	00000090 _GLOBAL__sub_I_storage
1fff148c l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
000006f4 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000011bc l     F .text	0000003c dbgPrint(unsigned short)
000011f8 l     F .text	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00001850 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00002440 l     F .text	0000003c dbgPrint(unsigned short)
000025c0 l     F .text	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00003460 l     F .text	0000003c dbgPrint(unsigned short)
0000349c l     F .text	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000039c0 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
000039e8 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
000044f4 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
000048e8 l     F .text	0000009c SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]
00004984 l     F .text	00000070 SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000050a4 l     F .text	00000030 sdIrs()
000050d4 l     F .text	00000018 isBusyCommandComplete()
000050ec l     F .text	00000010 isBusyCommandInhibit()
000050fc l     F .text	0000000c isBusyDMA()
00005108 l     F .text	00000014 isBusyFifoRead()
0000511c l     F .text	00000014 isBusyFifoWrite()
00005130 l     F .text	00000018 isBusyTransferComplete()
00005148 l     F .text	000000cc setSdclk(unsigned long)
00005278 l     F .text	00000028 waitTimeout(bool (*)())
000052a0 l     F .text	0000004c yieldTimeout(bool (*)())
0000531c l     F .text	0000005c cardCommand(unsigned long, unsigned long)
00005398 l     F .text	00000064 readReg16(unsigned long, void*)
000053fc l     F .text	0000002c isBusyCMD13()
00005444 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00005464 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00005658 l     F .text	00000078 transferStop()
00005a08 l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff15b4 l     O .bss	00000001 m_version2
1fff15b8 l     O .bss	00000010 m_cid
1fff15c8 l     O .bss	00000004 m_busyFcn
1fff15cc l     O .bss	00000001 m_highCapacity
1fff15d0 l     O .bss	00000004 m_ocr
1fff15d4 l     O .bss	00000004 m_rca
1fff15d8 l     O .bss	00000004 m_irqstat
1fff0974 l     O .data	00000001 m_errorCode
1fff15dc l     O .bss	00000001 m_initDone
1fff15e0 l     O .bss	00000010 m_csd
1fff15f0 l     O .bss	00000001 m_dmaBusy
1fff15f4 l     O .bss	00000004 m_sdClkKhz
1fff15f8 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 Storage.cpp
00006114 l     F .text	0000001c MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]
00006344 l     F .text	00000094 MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]
00006b90 l     F .text	00000032 MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]
00006d44 l     F .text	00000054 _GLOBAL__sub_I__Z8dateTimePtS_Ph
00000000 l    df *ABS*	00000000 mtp.cpp
00006db0 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00006ebc l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00007fec l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
0000ff4c l     O .text	00000024 supported_op
0000ff70 l     O .text	00000014 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 Time.cpp
00008c74 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff1ab0 l     O .bss	00000004 cacheTime
1fff1ab4 l     O .bss	00000007 tm
1fff1abc l     O .bss	00000004 sysTime
1fff1ac0 l     O .bss	00000001 Status
1fff1ac8 l     O .bss	00000004 prevMillis
1fff09bc l     O .data	00000004 syncInterval
00010064 l     O .text	0000000c monthDays
1fff1acc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1ad1 l     O .bss	00000001 tx_noautoflush
1fff1ad4 l     O .bss	00000004 tx_packet
1fff1ad8 l     O .bss	00000001 transmit_previous_timeout
1fff1adc l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00009288 l     F .text	0000004c digitalWrite.part.1
000092d4 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff09c4 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1ae8 l     O .bss	00000004 ep0_tx_ptr
1fff1aec l     O .bss	00000018 rx_last
1fff1b04 l     O .bss	00000002 ep0_tx_len
1fff1b08 l     O .bss	00000040 ep0_rx0_buf
1fff1b48 l     O .bss	00000018 rx_first
1fff1b60 l     O .bss	00000001 ep0_tx_data_toggle
1fff1b64 l     O .bss	00000040 ep0_rx1_buf
1fff1ba4 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff1bbc l     O .bss	00000018 tx_last
1fff1bd4 l     O .bss	00000008 setup
1fff1bdc l     O .bss	00000001 ep0_tx_bdt_bank
1fff1be0 l     O .bss	00000008 reply_buffer
1fff1bec l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 yield.cpp
1fff1c11 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 HardwareSerial5.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 HardwareSerial2.cpp
00000000 l    df *ABS*	00000000 HardwareSerial4.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 HardwareSerial6.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 serial5.c
1fff1c14 l     O .bss	00000004 rts_pin
1fff1c18 l     O .bss	00000001 rx_buffer_head
1fff1c19 l     O .bss	00000001 rx_buffer_tail
1fff1c1c l     O .bss	00000028 tx_buffer
1fff1c44 l     O .bss	00000040 rx_buffer
1fff1c84 l     O .bss	00000001 transmitting
1fff1c85 l     O .bss	00000001 tx_buffer_tail
1fff1c88 l     O .bss	00000004 transmit_pin
1fff1c8c l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 analog.c
1fff1c8d l     O .bss	00000001 calibrating
1fff09d8 l     O .data	00000001 analog_config_bits
1fff1c8e l     O .bss	00000001 analog_reference_internal
1fff09d9 l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 serial2.c
1fff1c90 l     O .bss	00000004 rts_pin
1fff1c94 l     O .bss	00000001 transmitting
1fff1c95 l     O .bss	00000001 rx_buffer_tail
1fff1c98 l     O .bss	00000028 tx_buffer
1fff1cc0 l     O .bss	00000040 rx_buffer
1fff1d00 l     O .bss	00000001 rx_buffer_head
1fff1d01 l     O .bss	00000001 tx_buffer_tail
1fff1d04 l     O .bss	00000004 transmit_pin
1fff1d08 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial4.c
1fff1d0c l     O .bss	00000004 rts_pin
1fff1d10 l     O .bss	00000001 rx_buffer_head
1fff1d11 l     O .bss	00000001 rx_buffer_tail
1fff1d14 l     O .bss	00000028 tx_buffer
1fff1d3c l     O .bss	00000040 rx_buffer
1fff1d7c l     O .bss	00000001 transmitting
1fff1d7d l     O .bss	00000001 tx_buffer_tail
1fff1d80 l     O .bss	00000004 transmit_pin
1fff1d84 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial1.c
1fff1d88 l     O .bss	00000004 rts_pin
1fff1d8c l     O .bss	00000001 rx_buffer_head
1fff1d8d l     O .bss	00000001 rx_buffer_tail
1fff1d90 l     O .bss	00000040 tx_buffer
1fff1dd0 l     O .bss	00000040 rx_buffer
1fff1e10 l     O .bss	00000001 transmitting
1fff1e11 l     O .bss	00000001 tx_buffer_tail
1fff1e14 l     O .bss	00000004 transmit_pin
1fff1e18 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 serial6_lpuart.c
1fff1e1c l     O .bss	00000004 rts_pin
1fff1e20 l     O .bss	00000001 rx_buffer_head
1fff1e21 l     O .bss	00000001 rx_buffer_tail
1fff1e24 l     O .bss	00000028 tx_buffer
1fff1e4c l     O .bss	00000040 rx_buffer
1fff1e8c l     O .bss	00000001 transmitting
1fff1e8d l     O .bss	00000001 tx_buffer_tail
1fff1e90 l     O .bss	00000004 transmit_pin
1fff1e94 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09dc l     O .data	00000012 device_descriptor
1fff0a08 l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 serial3.c
1fff1e98 l     O .bss	00000004 rts_pin
1fff1e9c l     O .bss	00000001 rx_buffer_head
1fff1e9d l     O .bss	00000001 rx_buffer_tail
1fff1ea0 l     O .bss	00000028 tx_buffer
1fff1ec8 l     O .bss	00000040 rx_buffer
1fff1f08 l     O .bss	00000001 transmitting
1fff1f09 l     O .bss	00000001 tx_buffer_tail
1fff1f0c l     O .bss	00000004 transmit_pin
1fff1f10 l     O .bss	00000001 tx_buffer_head
00000000 l    df *ABS*	00000000 HardwareSerial1.cpp
00000000 l    df *ABS*	00000000 HardwareSerial3.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cbcc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
00010510 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d580 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
00010530 l     O .text	00000010 zeroes.7258
00010580 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0ac8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 avr_emulation.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1470 l       .bss	00000000 __bss_start__
1fff1f64 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
00009244  w    F .text	00000006 adc0_isr
000062dc g     F .text	00000068 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000b7c4 g     F .text	0000002c .hidden __aeabi_dcmpun
00008fa0 g     F .text	0000001c usb_serial_available
0000b788 g     F .text	00000012 .hidden __aeabi_dcmple
0000aa24 g     F .text	00000020 serial4_available
0000c834 g     F .text	000000ba strcpy
0000b6c4 g     F .text	0000007a .hidden __cmpdf2
00005814 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000a530  w    F .text	000000c4 yield
00003214 g     F .text	0000024c FatFile::write(void const*, unsigned int)
0000b6c4 g     F .text	0000007a .hidden __eqdf2
0000485c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00000c28 g     F .text	00000430 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1490 g     O .bss	0000010c storage
1fff09f0 g     O .data	00000018 usb_string_manufacturer_name_default
0000ab1c g     F .text	00000020 serial_available
0000b234 g     F .text	0000005a .hidden __floatdidf
000091fc  w    F .text	00000048 hard_fault_isr
00009244  w    F .text	00000006 dma_ch6_isr
1fff15ac g     O .bss	00000004 FsDateTime::callback
0000a624 g     F .text	00000020 Print::println()
0000a8f8 g     F .text	00000020 serial2_available
00009244  w    F .text	00000006 uart0_lon_isr
00000b0c g     F .text	0000011c ExFatFile::seekSet(unsigned long long)
000096d8 g     F .text	00000108 usb_rx_memory
0000a5f4  w    F .text	00000002 serialEvent5()
00004830  w    F .text	00000004 SdSpiCard::errorCode() const
00009244  w    F .text	00000006 dma_ch8_isr
0000ac48 g     F .text	00000020 serial6_available
0000c3ec g     F .text	00000002 __malloc_unlock
1fff15b0 g     O .bss	00000004 FsVolume::m_cwv
000026d0 g     F .text	00000104 FatFile::open(FatFile*, char const*, int)
0000a818 g     F .text	000000e0 analog_init
000097e0 g     F .text	00000084 usb_tx
00009244  w    F .text	00000006 portcd_isr
0000ca7c g     F .text	0000004a _vdprintf_r
00008a14 g     F .text	000000b0 SPIClass::setSCK(unsigned char)
0000c284 g     F .text	000000c6 memmove
0000a488 g     F .text	00000098 MillisTimer::runFromTimer()
0000ce9c g     F .text	0000004c _Balloc
00009244  w    F .text	00000006 can1_rx_warn_isr
000105b8 g       .ARM.exidx	00000000 __exidx_end
00009244  w    F .text	00000006 dma_error_isr
00003760 g     F .text	00000056 FatPartition::freeChain(unsigned long)
1fff1c08 g     O .bss	00000001 EventResponder::runningFromYield
00004b54 g     F .text	000000b0 SdSpiCard::cardCommand(unsigned char, unsigned long)
00009244  w    F .text	00000006 i2c0_isr
00006800 g     F .text	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000b6b4 g     F .text	0000008a .hidden __gtdf2
00003a24 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000bb64 g     F .text	0000000c __errno
00006a74 g     F .text	0000011a MTPStorage_SD::ScanDir(unsigned long)
00009244  w    F .text	00000006 portd_isr
00009244  w    F .text	00000006 enet_error_isr
1fff1bf4 g     O .bss	00000004 EventResponder::firstInterrupt
000071cc g     F .text	0000008e MTPD::GetObjectHandles(unsigned long, unsigned long)
00004860  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00009244  w    F .text	00000006 tpm1_isr
000062b4  w    F .text	00000024 Print::println(__FlashStringHelper const*)
00001780 g     F .text	0000003c ExFatPartition::rootLength()
00004834  w    F .text	00000004 SdSpiCard::errorData() const
0000a610  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00010070 g     O .text	00000200 digital_pin_to_info_PGM
1fff1f60 g     O .bss	00000004 errno
00004c04 g     F .text	00000064 SdSpiCard::readOCR(unsigned long*)
000040e0 g     F .text	00000412 FatFile::open(FatFile*, fname_t*, int)
0000158c g     F .text	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
000105b8 g       .ARM.exidx	00000000 _etext
0000879c g     F .text	00000134 _spi_dma_rxISR0()
1fff1470 g       .bss	00000000 _sbss
0000b750 g     F .text	00000010 .hidden __aeabi_cdcmple
00005220 g     F .text	0000000c SdioCard::errorData() const
0000a718  w    F .text	00000002 serialEvent6()
00005924 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
00009244  w    F .text	00000006 porte_isr
00000610 g     F .text	00000038 loop
00009244  w    F .text	00000006 portb_isr
00009244  w    F .text	00000006 spi1_isr
000076b0 g     F .text	00000108 MTPD::GetStorageInfo(unsigned long)
0000aa44 g     F .text	000000d8 uart3_status_isr
0000af0c  w    F .text	00000002 serialEvent1()
00000834 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009244  w    F .text	00000006 mcm_isr
00005e48 g     F .text	000000cc SdioCard::readData(unsigned char*)
0000a420 g     F .text	00000068 MillisTimer::addToActiveList()
00006bc4 g     F .text	00000068 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00004a44 g     F .text	000000c0 SdSpiCard::readData(unsigned char*, unsigned int)
1fff1bf8 g     O .bss	00000004 EventResponder::lastInterrupt
0000a918 g     F .text	0000010c uart1_status_isr
000045b4 g     F .text	00000028 FsBaseFile::close()
00008df4 g     F .text	00000134 memcpy
00009244  w    F .text	00000006 randnum_isr
0000b740 g     F .text	00000020 .hidden __aeabi_cdrcmple
00006cc4 g     F .text	00000080 Storage_init()
00001670 g     F .text	0000009c ExFatPartition::freeChain(unsigned long)
000068d4 g     F .text	00000060 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000029c4 g     F .text	0000002a FatFile::peek()
0000e4e0 g     F .text	000016e4 _svfprintf_r
0000b1c4 g     F .text	00000022 .hidden __floatsidf
1fff1ae4 g     O .bss	00000004 systick_millis_count
0000b6bc g     F .text	00000082 .hidden __ltdf2
00001f68 g     F .text	000000d8 ExFatFile::rename(ExFatFile*, char const*)
000091fc  w    F .text	00000048 bus_fault_isr
000081b4 g     F .text	000005cc MTPD::loop()
00009244  w    F .text	00000006 watchdog_isr
0000b840 g     F .text	00000000 .hidden __aeabi_uldivmod
00009244  w    F .text	00000006 i2c1_isr
1fff1be8 g     O .bss	00000001 usb_configuration
00009244  w    F .text	00000006 dma_ch11_isr
00004828  w    F .text	00000006 SdCardInterface::status()
000059d8 g     F .text	00000030 SdioCard::syncDevice()
000056d4 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
1fff1c10 g     O .bss	00000001 SPCRemulation::pinout
00000544  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
000029f0 g     F .text	0000004e FatFile::readDirCache(bool)
0000a700  w    F .text	00000002 serialEvent2()
00009244  w    F .text	00000006 i2c2_isr
1fff09f0  w    O .data	00000018 usb_string_manufacturer_name
1fff1f54 g     O .bss	0000000c usb_rx_byte_count_data
00009244  w    F .text	00000006 pit1_isr
1fff0a74 g     O .data	00000008 usb_string_mtp
0000bbc0 g     F .text	00000010 malloc
00009244  w    F .text	00000006 dma_ch4_isr
00009244  w    F .text	00000006 software_isr
0000fce8  w    O .text	00000024 vtable for FsFile
00009244  w    F .text	00000006 dma_ch7_isr
00008780  w    F .text	0000001c EventResponder::triggerEvent(int, void*)
00010420 g     O .text	000000c8 __mprec_tens
0000a290 g     F .text	000000c8 usb_init
000045dc g     F .text	0000007c FsBaseFile::operator=(FsBaseFile const&)
00004848  w    F .text	00000004 SdSpiCard::type() const
00009244  w    F .text	00000006 lptmr_isr
1fff1f1c g     O .bss	00000004 __malloc_top_pad
0000935c g     F .text	00000024 rtc_set
00004870 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00002040 g     F .text	00000120 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000b1a4 g     F .text	0000001e .hidden __aeabi_ui2d
0000ce80 g     F .text	0000001c _localeconv_r
0000934c g     F .text	00000010 attachInterruptVector
0000d018 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00008df0 g     F .text	00000002 usb_mtp_configure
00003570 g     F .text	0000000e FatCache::sync()
0000b870 g     F .text	000002e2 .hidden __udivmoddi4
00007514 g     F .text	0000019c MTPD::getObjectPropValue(unsigned long, unsigned long)
0000af20 g     F .text	00000000 .hidden __aeabi_drsub
0000247c g     F .text	00000042 FatFile::addCluster()
0000c7d0 g     F .text	00000024 _sbrk_r
00004c68 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
000052fc g     F .text	00000020 SdioCard::type() const
000001d0 g     F .text	000001f0 ResetHandler
00008f28 g     F .text	00000048 usb_serial_getchar
00009244  w    F .text	00000006 can1_bus_off_isr
00009244  w    F .text	00000006 ftm2_isr
1fff1f48 g     O .bss	00000008 usb_cdc_line_coding
00009380 g     F .text	0000000a digitalWrite
1fff1c00 g     O .bss	00000004 EventResponder::lastYield
00009244  w    F .text	00000006 uart5_status_isr
0000ac68 g     F .text	000000e4 lpuart0_status_isr
00000804 g     F .text	0000002e ExFatFile::openRoot(ExFatVolume*)
0001029c g     O .text	00000006 usb_endpoint_config_table
00009244  w    F .text	00000006 dma_ch9_isr
000006d8  w    F .text	0000001c Print::write(char const*)
0000050c  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
00009244  w    F .text	00000006 pit2_isr
0000b774 g     F .text	00000012 .hidden __aeabi_dcmplt
0000ae14 g     F .text	00000020 serial3_available
1fff1f18 g     O .bss	00000004 __malloc_max_sbrked_mem
0000938c g     F .text	0000000a pinMode
00006a1c g     F .text	00000056 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00004f64 g     F .text	00000050 SdSpiCard::writeStop()
00009624 g     F .text	0000004c usb_free
00009244  w    F .text	00000006 i2c3_isr
0000b1e8 g     F .text	0000003a .hidden __extendsfdf2
0000b4e4 g     F .text	000001d0 .hidden __aeabi_ddiv
0000af2c g     F .text	00000276 .hidden __adddf3
000074a8 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00006e14 g     F .text	000000a8 MTPD::writestring(char const*)
00005070 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
000037b8 g     F .text	000000c6 FatPartition::freeClusterCount()
000105b0 g       .ARM.exidx	00000000 __exidx_start
0000b290 g     F .text	00000254 .hidden __aeabi_dmul
00004e5c g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
00009244  w    F .text	00000006 pit0_isr
1fff1c04 g     O .bss	00000004 EventResponder::firstYield
00010304 g     O .text	00000004 _global_impure_ptr
000061d4 g     F .text	00000018 MTPStorage_SD::write(char const*, unsigned long)
00009244  w    F .text	00000006 can1_error_isr
0000059c  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c3f0 g     F .text	000003de _realloc_r
0000bb70 g     F .text	00000050 __libc_init_array
1fff1f64 g       .bss	00000000 __bss_end
00009244  w    F .text	00000006 can0_wakeup_isr
00001170 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000522c g     F .text	0000001c SdioCard::readCID(CID*)
00001cd8 g     F .text	00000114 ExFatFile::addDirCluster()
00009244  w    F .text	00000006 flash_cmd_isr
00004fe0 g     F .text	00000090 SdSpiCard::writeData(unsigned char, unsigned char const*)
000064b4 g     F .text	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
000104e8 g     O .text	00000028 __mprec_bigtens
0000a5f8  w    F .text	00000004 usb_serial_class::clear()
0000b1a4 g     F .text	0000001e .hidden __floatunsidf
0000ae34 g     F .text	000000d8 uart2_status_isr
0000925c g     F .text	0000002c _sbrk
0000d2ac g     F .text	00000042 __mcmp
1fff1c0c g     O .bss	00000004 MillisTimer::listWaiting
1fff09c0 g     O .data	00000004 __brkval
1fff1ae0 g     O .bss	00000001 usb_cdc_line_rtsdtr
000091b4 g     F .text	00000048 usb_serial_flush_callback
00010590 g     F .text	00000000 _init
00002594 g     F .text	0000002a FatFile::cacheDirEntry(unsigned char)
00009244  w    F .text	00000006 svcall_isr
00009244  w    F .text	00000006 dma_ch15_isr
00008d8c g     F .text	00000020 day()
00009244  w    F .text	00000006 uart1_error_isr
0000cbec g     F .text	00000028 __libc_fini_array
00009244  w    F .text	00000006 usbhs_phy_isr
1fff1f64 g       .bss	00000000 _ebss
0000589c g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00006f78 g     F .text	00000214 MTPD::WriteDescriptor()
1fff0978 g     O .data	00000004 propertyListNum
000004e0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000034f4 g     F .text	0000007a FatCache::read(unsigned long, unsigned char)
0000cf7c g     F .text	00000040 __hi0bits
0000b7f0 g     F .text	0000004e .hidden __fixdfsi
00001dec g     F .text	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
00009244 g     F .text	00000006 unused_isr
0000718c g     F .text	0000003e MTPD::WriteStorageIDs()
00009244  w    F .text	00000006 spi0_isr
00009244  w    F .text	00000006 dma_ch3_isr
00008dcc g     F .text	00000024 year()
0000a71c g     F .text	00000004 operator delete(void*, unsigned int)
00009244  w    F .text	00000006 flash_error_isr
0000af2c g     F .text	00000276 .hidden __aeabi_dadd
0000b6bc g     F .text	00000082 .hidden __ledf2
0000a720 g     F .text	00000020 serial5_available
0000c7f4 g     F .text	0000003e strcat
00009244  w    F .text	00000006 uart5_error_isr
00009244  w    F .text	00000006 rtc_seconds_isr
0000ffd0 g     O .text	00000094 SPIClass::spi0_hardware
00009244  w    F .text	00000006 pdb_isr
0000d15c g     F .text	000000a0 __pow5mult
00002afc g     F .text	00000068 FatFile::rmdir()
0000b224 g     F .text	0000006a .hidden __aeabi_ul2d
000091fc  w    F .text	00000048 usage_fault_isr
00009244  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
000036ac g     F .text	000000b2 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009244  w    F .text	00000006 dma_ch14_isr
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1f50 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a520 g     F .text	00000010 systick_isr
00009244  w    F .text	00000006 rtc_alarm_isr
00004530 g     F .text	00000084 FatFile::getSFN(char*)
00004dac g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009244  w    F .text	00000006 dma_ch2_isr
1fff09c8 g     O .data	00000010 Serial
00009244  w    F .text	00000006 ftm1_isr
0000a618  w    F .text	00000006 usb_serial_class::write(unsigned char)
000046d8 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000924c  w    F .text	0000000c startup_early_hook
00009244  w    F .text	00000006 dma_ch13_isr
0000188c g     F .text	000000c6 ExFatFile::addCluster()
00009244  w    F .text	00000006 uart2_error_isr
00008f70 g     F .text	00000030 usb_serial_peekchar
0000b7b0 g     F .text	00000012 .hidden __aeabi_dcmpgt
000062d8 g     F .text	00000002 mtp_yield()
0000c180 g     F .text	00000000 memchr
00003620 g     F .text	0000008a FatPartition::fatPut(unsigned long, unsigned long)
1fff0ab0 g     O .data	00000016 usb_string_serial_number_default
000091fc g     F .text	00000048 fault_isr
0000ccb0 g     F .text	000001d0 _free_r
000056d0 g     F .text	00000004 SdioCard::readStop()
00001230 g     F .text	0000008c FsCache::get(unsigned long, unsigned char)
0000b79c g     F .text	00000012 .hidden __aeabi_dcmpge
00009244  w    F .text	00000006 usb_charge_isr
0000a608  w    F .text	00000004 usb_serial_class::flush()
00009244  w    F .text	00000006 cmt_isr
0000af28 g     F .text	0000027a .hidden __aeabi_dsub
00003880 g     F .text	00000140 FatPartition::init(BlockDeviceInterface*, unsigned char)
00009244  w    F .text	00000006 usbhs_isr
00002d4c g     F .text	00000188 FatFile::mkdir(FatFile*, fname_t*)
1fff146c g     O .data	00000004 __malloc_sbrk_base
0000a600  w    F .text	00000004 usb_serial_class::read()
00009244  w    F .text	00000006 ftm3_isr
00009244  w    F .text	00000006 tsi0_isr
00003df8 g     F .text	000001b2 FatFile::remove()
0000b224 g     F .text	0000006a .hidden __floatundidf
0000d1fc g     F .text	000000ae __lshift
00002ed4 g     F .text	000000fc FatFile::mkdir(FatFile*, char const*, bool)
00009244  w    F .text	00000006 spi2_isr
000017f8 g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00006454 g     F .text	0000005e MTPStorage_SD::GetNextObjectHandle()
0000fbc4 g     F .text	00000100 __ssprint_r
0000a704  w    F .text	00000002 serialEvent4()
00006060  w    F .text	00000002 SdFs::~SdFs()
0000d4c0 g     F .text	0000005e _vasnprintf_r
0000a620  w    F .text	00000002 serialEvent()
1fff1b61 g     O .bss	00000001 usb_reboot_timer
0000cb28 g     F .text	000000a4 __register_exitproc
00001058 g     F .text	00000116 ExFatFile::open(ExFatFile*, char const*, int)
0000c9dc g     F .text	000000a0 strncmp
00001e60 g     F .text	00000108 ExFatFile::mkdir(ExFatFile*, char const*, bool)
00008fbc g     F .text	00000038 usb_serial_flush_input
0000170c g     F .text	00000072 ExFatPartition::freeClusterCount()
00006550 g     F .text	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000d02c g     F .text	00000130 __multiply
000090fc g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1f20 g     O .bss	00000028 __malloc_current_mallinfo
0000d404 g     F .text	000000ba __d2b
00009244  w    F .text	00000006 can0_bus_off_isr
000052ec  w    F .text	0000000e SdioCard::~SdioCard()
00000744 g     F .text	000000be ExFatFile::getName(char*, unsigned int)
00006058 g     F .text	00000004 MTPStorage_SD::readonly()
1fff1bdd g     O .bss	00000001 usb_rx_memory_needed
000057a0 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00009864 g     F .text	00000a2c usb_isr
0000bb58 g     F .text	0000000c __cxa_atexit
000008f8 g     F .text	000001e4 ExFatFile::read(void*, unsigned int)
0000b1c4 g     F .text	00000022 .hidden __aeabi_i2d
000012bc g     F .text	0000000e FsCache::sync()
1fff097c g     O .data	00000040 SPI
0000c220 g     F .text	00000062 memcmp
00010270  w    O .text	00000028 vtable for usb_serial_class
00009244  w    F .text	00000006 uart3_error_isr
00007ebc g     F .text	0000007c MTPD::GetObject(unsigned long)
1fff1bfc g     O .bss	00000004 MillisTimer::listActive
0000bb54  w    F .text	00000002 .hidden __aeabi_ldiv0
00001a7c g     F .text	00000072 ExFatFile::rmdir()
00009244  w    F .text	00000006 porta_isr
000077b8 g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000b4e4 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
00004cc4 g     F .text	00000098 SdSpiCard::sectorCount()
00009244  w    F .text	00000006 low_voltage_isr
1fff1060 g     O .data	00000408 __malloc_av_
00009244  w    F .text	00000006 can0_error_isr
00009478 g     F .text	0000016c _init_Teensyduino_internal_
0000b290 g     F .text	00000254 .hidden __muldf3
0000915c g     F .text	00000058 usb_serial_flush_output
00009244  w    F .text	00000006 dma_ch12_isr
0000c3e8 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
00003bac g     F .text	0000024c FatFile::parsePathName(char const*, fname_t*, char const**)
00009244  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
0000d520 g     F .text	0000005e _calloc_r
00009244  w    F .text	00000006 pit3_isr
00007f38 g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff1ac4 g     O .bss	00000004 getTimePtr
00009244  w    F .text	00000006 enet_rx_isr
00001c70 g     F .text	00000066 ExFatFile::sync()
00002fd0 g     F .text	00000238 FatFile::rename(FatFile*, char const*)
00005428 g     F .text	0000001c SdioCard::isBusy()
00009244  w    F .text	00000006 portc_isr
00004e24 g     F .text	00000038 SdSpiCard::readStop()
0000c34c g     F .text	0000009a memset
0000a708 g     F .text	00000010 main
00006060  w    F .text	00000002 SdFs::~SdFs()
1fff1f14 g     O .bss	00000004 __malloc_max_total_mem
000012cc g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00008c8c g     F .text	000000a0 now()
00002160 g     F .text	000002e0 ExFatFile::write(void const*, unsigned int)
0000feb0 g     O .text	0000004c vtable for MTPStorage_SD
00008018 g     F .text	00000126 MTPD::SendObjectInfo(unsigned long, unsigned long)
000091fc  w    F .text	00000048 memmanage_fault_isr
0000ad4c g     F .text	0000007c usb_init_serialnumber
000105ac g       .text	00000000 __init_array_end
0000d6a8 g     F .text	00000e34 _dtoa_r
0000bbe0 g     F .text	00000570 _malloc_r
00009244  w    F .text	00000006 debugmonitor_isr
0000cae0 g     F .text	0000001a __ascii_wctomb
0000b234 g     F .text	0000005a .hidden __aeabi_l2d
0000a358 g     F .text	00000080 EventResponder::triggerEventNotImmediate()
00000031 g       *ABS*	00000000 __rtc_localtime
00009398 g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00009244  w    F .text	00000006 cmp1_isr
00009244  w    F .text	00000006 ftm0_isr
00001af0 g     F .text	00000180 ExFatFile::syncDir()
0000cc14 g     F .text	0000009c _malloc_trim_r
1fff0aac g     O .data	00000004 string0
00008ff4 g     F .text	00000108 usb_serial_write
00009258  w    F .text	00000002 startup_late_hook
0000a604  w    F .text	00000004 usb_serial_class::available()
00007fa8 g     F .text	00000044 MTPD::readstring(char*)
00003208 g     F .text	0000000c FatFile::sync()
1fff0a7c  w    O .data	0000002e usb_string_product_name
000093dc g     F .text	0000009c delay
0000b6c4 g     F .text	0000007a .hidden __nedf2
00009244  w    F .text	00000006 tpm0_isr
00006130 g     F .text	00000048 MTPStorage_SD::size()
000060fc g     F .text	00000016 MTPStorage_SD::CloseIndex()
000105ac g     F .fini	00000000 _fini
00006d98 g     F .text	00000018 MTPD::get_buffer()
00008dac g     F .text	00000020 month()
00004d5c g     F .text	00000050 SdSpiCard::readStart(unsigned long)
00001180 g     F .text	0000003a ExFatFile::openNext(ExFatFile*, int)
0000a654 g     F .text	0000001c Print::printf(char const*, ...)
00009244  w    F .text	00000006 i2s0_rx_isr
00009244  w    F .text	00000006 uart4_error_isr
0000a6f0 g     F .text	00000010 Print::print(long)
00002664 g     F .text	0000001e FatFile::close()
00003580 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000cbe0 g     F .text	0000000c atexit
1fff15fc g     O .bss	000004b4 sd
00005274  w    F .text	00000002 SdioCard::~SdioCard()
000004f4  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000cafc g     F .text	0000002c _write_r
00005584 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
00009244  w    F .text	00000006 can0_message_isr
000088d0 g     F .text	000000a4 SPIClass::setMOSI(unsigned char)
1fff0ef0 g     O .data	00000004 _impure_ptr
00009244  w    F .text	00000006 can1_message_isr
00000adc g     F .text	0000002e ExFatFile::peek()
0000fcc4  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00009244  w    F .text	00000006 nmi_isr
00003fac g     F .text	00000134 FatFile::lfnUniqueSfn(fname_t*)
000047fc g     F .text	00000028 FsVolume::open(char const*, int)
00005214 g     F .text	0000000c SdioCard::errorCode() const
000027d4 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
000005d0  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
0001059c g       .text	00000000 __preinit_array_end
00006064 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
0000485c  w    F .text	00000002 SdSpiCard::~SdSpiCard()
00009244  w    F .text	00000006 sdhc_isr
00008d4c g     F .text	00000020 minute()
00001380 g     F .text	00000110 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00001558 g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000065bc g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
00004eac g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
0000c150 g     F .text	0000002a __ascii_mbtowc
000049f4 g     F .text	0000004e SdSpiCard::isBusy()
0000fe00 g     O .text	00000058 vtable for SdSpiCard
00004cbc  w    F .text	00000008 SdSpiCard::readCID(CID*)
000005e4 g     F .text	0000002c setup
000102a4 g     O .text	00000060 usb_descriptor_list
00009670 g     F .text	0000003c usb_rx
00005378 g     F .text	00000020 SdioCard::status()
000061ec g     F .text	000000c8 MTPStorage_SD::ResetIndex()
00009244  w    F .text	00000006 dma_ch10_isr
00009244  w    F .text	00000006 uart0_error_isr
000095e4 g     F .text	00000040 usb_malloc
000027e4 g     F .text	000001de FatFile::read(void*, unsigned int)
00009244  w    F .text	00000006 i2s0_isr
00002684 g     F .text	0000004a FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00004824 g     F .text	00000004 operator new(unsigned int, unsigned long*)
00004cb4  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00009114 g     F .text	00000048 usb_serial_write_buffer_free
00004b04 g     F .text	00000050 SdSpiCard::waitNotBusy(unsigned short)
00009244  w    F .text	00000006 enet_timer_isr
0000b760 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000a644  w    F .text	0000000e _write
1fff1470 g       .data	00000000 _edata
00001620 g     F .text	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
0000725c g     F .text	0000024c MTPD::GetObjectInfo(unsigned long)
00005274  w    F .text	00000002 SdioCard::~SdioCard()
00009244  w    F .text	00000006 i2s0_tx_isr
00009244  w    F .text	00000006 adc1_isr
00004fb4 g     F .text	0000002c SdSpiCard::syncDevice()
000024c0 g     F .text	000000d4 FatFile::addDirCluster()
0000a60c  w    F .text	00000004 usb_serial_class::availableForWrite()
00009244  w    F .text	00000006 cmp0_isr
0000adc8 g     F .text	0000004c ultoa
00008d6c g     F .text	00000020 second()
00006c2c  w    F .text	00000098 SdBase<FsVolume>::errorHalt(Print*)
00004658 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000063d8 g     F .text	0000007c MTPStorage_SD::ReadIndexRecord(unsigned long)
0000a3d8 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1468 g     O .data	00000004 __malloc_trim_threshold
0000a5fc  w    F .text	00000004 usb_serial_class::peek()
00000470  w    F .text	00000034 MTPStorage_SD::~MTPStorage_SD()
1fff159c g     O .bss	00000010 mtpd
0000d2f0 g     F .text	00000114 __mdiff
00005264 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b7f0 g     F .text	0000004e .hidden __aeabi_d2iz
000015d8 g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff1ad0 g     O .bss	00000001 usb_cdc_transmit_flush_timer
00009244  w    F .text	00000006 pit_isr
00008d2c g     F .text	00000020 hour()
000056d0 g     F .text	00000004 SdioCard::writeStop()
0000484c  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00006178 g     F .text	0000005c MTPStorage_SD::free()
00000730 g     F .text	00000014 ExFatFile::close()
00010318 g     O .text	00000101 _ctype_
00009244  w    F .text	00000006 dac0_isr
00004838  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
0001059c g       .text	00000000 __init_array_start
0000bb54  w    F .text	00000002 .hidden __aeabi_idiv0
00009244  w    F .text	00000006 can1_tx_warn_isr
0000b7c4 g     F .text	0000002c .hidden __unorddf2
0000ab3c g     F .text	0000010c uart0_status_isr
00009244  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c900 g     F .text	000000dc strlen
00003a48 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b750 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b6b4 g     F .text	0000008a .hidden __gedf2
00002a40 g     F .text	000000ba FatFile::seekSet(unsigned long)
00006934 g     F .text	000000e8 MTPStorage_SD::Create(unsigned long, bool, char const*)
1fff0a7c g     O .data	0000002e usb_string_product_name_default
0000cac8 g     F .text	00000018 vdprintf
00009244  w    F .text	00000006 dma_ch1_isr
00005518 g     F .text	0000006c SdioCard::sectorCount()
00004738 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
000096ac g     F .text	0000002c usb_tx_packet_count
00002c94 g     F .text	000000b8 FatFile::openNext(FatFile*, int)
0000fe58 g     O .text	00000058 vtable for SdioCard
0000b1e8 g     F .text	0000003a .hidden __aeabi_f2d
00009244  w    F .text	00000006 dma_ch5_isr
00006508 g     F .text	00000048 MTPStorage_SD::close()
00003a78 g     F .text	00000134 FatFile::getName(char*, unsigned int)
00009244  w    F .text	00000006 can0_rx_warn_isr
00000470  w    F .text	00000034 MTPStorage_SD::~MTPStorage_SD()
00006744 g     F .text	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00009244  w    F .text	00000006 can0_tx_warn_isr
0000a740 g     F .text	000000d8 uart4_status_isr
00005f14 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000af28 g     F .text	0000027a .hidden __subdf3
0001059c g       .text	00000000 __preinit_array_start
00001490 g     F .text	000000c8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000064f0 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
0000cfbc g     F .text	0000005a __lo0bits
0000605c g     F .text	00000004 MTPStorage_SD::has_directories()
00002b64 g     F .text	00000130 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000af10  w    F .text	00000002 serialEvent3()
0000af14 g     F .text	0000000a __aeabi_atexit
00007ea0 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
00001954 g     F .text	00000126 ExFatFile::remove()
00009244  w    F .text	00000006 cmp2_isr
0000a41c g     F .text	00000004 pendablesrvreq_isr
00008140 g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0ef4 g     O .data	0000016c __global_locale
00009244  w    F .text	00000006 wakeup_isr
00008974 g     F .text	000000a0 SPIClass::setMISO(unsigned char)
00005ab4 g     F .text	00000394 SdioCard::begin(SdioConfig)
00001224 g     F .text	0000000c FsCache::invalidate()
00009244  w    F .text	00000006 cmp3_isr
00008ac4 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000a670 g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
0000358c g     F .text	00000092 FatPartition::fatGet(unsigned long, unsigned long*)
0000bbd0 g     F .text	00000010 free
00009244  w    F .text	00000006 tpm2_isr
0000cefc g     F .text	00000080 __multadd
0000cee8 g     F .text	00000012 _Bfree
00009244  w    F .text	00000006 dma_ch0_isr
1fff0ab0  w    O .data	00000016 usb_string_serial_number
00009244  w    F .text	00000006 enet_tx_isr
000017bc g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
00005f88 g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
00005248 g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ....E.......
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	............E...
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	E...........!...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	E...E...E...E...
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	E...E...E...E...
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	E...E...E...E...
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	E...E...E...E...
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	E...E...E...E...
      90:	E...E...E...E...
      a0:	E...E...E...E...
      b0:	E...E...E...=...
      c0:	E.......E...5...
      d0:	E...E...E...E...
      e0:	E...E...E...E...
      f0:	E...E...E...E...
     100:	E...E...E...E...
     110:	E...e...E...E...
     120:	E...E...E...E...
     130:	E...E...E...E...
     140:	E...E...A...E...
     150:	E...E...E...E...
     160:	E...E...E...E...
     170:	E...E...E...E...
     180:	E...E...E...E...
     190:	E...E...i...E...
     1a0:	E...E...E...E...
     1b0:	E...E...E...E...
     1c0:	E...E...E...E...

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	924c <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	9478 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	935c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	935c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	bb70 <__libc_init_array>

	startup_late_hook();
     32c:	bl	9258 <startup_late_hook>
	main();
     330:	bl	a708 <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1470
     360:	.word	0x000105b4
     364:	.word	0x1fff0970
     368:	.word	0x1fff1470
     36c:	.word	0x1fff1f64
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1470
     42c:	.word	0x00000000
     430:	.word	0x000105b0

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff1474
     460:	.word	0x000105b0
     464:	.word	0x1fff1470
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     470:	push	{r3, r4, r5, lr}
     472:	mov	r4, r0
     474:	ldr	r3, [pc, #36]	; (49c <MTPStorage_SD::~MTPStorage_SD()+0x2c>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     476:	ldr	r5, [pc, #40]	; (4a0 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
     478:	str	r3, [r0, #0]
     47a:	str.w	r5, [r0, #164]	; 0xa4
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     47e:	adds	r0, #180	; 0xb4
     480:	bl	45b4 <FsBaseFile::close()>
     484:	str	r5, [r4, #84]	; 0x54
     486:	add.w	r0, r4, #100	; 0x64
     48a:	bl	45b4 <FsBaseFile::close()>
     48e:	str	r5, [r4, #4]
     490:	add.w	r0, r4, #20
     494:	bl	45b4 <FsBaseFile::close()>
     498:	mov	r0, r4
     49a:	pop	{r3, r4, r5, pc}
     49c:	.word	0x0000feb8
     4a0:	.word	0x0000fccc

000004a4 <logg(unsigned long, char const*) [clone .part.12]>:
		} else if (pin == 11) {
			return (CORE_PIN11_PINREG & CORE_PIN11_BITMASK) ? 1 : 0;
		} else if (pin == 12) {
			return (CORE_PIN12_PINREG & CORE_PIN12_BITMASK) ? 1 : 0;
		} else if (pin == 13) {
			return (CORE_PIN13_PINREG & CORE_PIN13_BITMASK) ? 1 : 0;
     4a4:	ldr	r3, [pc, #36]	; (4cc <logg(unsigned long, char const*) [clone .part.12]+0x28>)
     4a6:	ldr	r3, [r3, #0]
     4a8:	lsls	r3, r3, #26
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
  MTPD       mtpd(&storage);

void logg(uint32_t del, const char *txt)
     4aa:	sub	sp, #8
     4ac:	bpl.n	4c4 <logg(unsigned long, char const*) [clone .part.12]+0x20>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     4ae:	ldr	r3, [pc, #32]	; (4d0 <logg(unsigned long, char const*) [clone .part.12]+0x2c>)
     4b0:	movs	r2, #32
     4b2:	str	r2, [r3, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b4:	ldr	r2, [pc, #28]	; (4d4 <logg(unsigned long, char const*) [clone .part.12]+0x30>)
{ static uint32_t to;
  if(millis()-to > del)
  {
//    Serial.println(txt); 
    digitalWriteFast(13,!digitalReadFast(13));
    to=millis();
     4b6:	ldr	r3, [pc, #32]	; (4d8 <logg(unsigned long, char const*) [clone .part.12]+0x34>)
     4b8:	ldr	r2, [r2, #0]
     4ba:	str	r2, [sp, #4]
	return ret;
     4bc:	ldr	r2, [sp, #4]
     4be:	str	r2, [r3, #0]
  }
}
     4c0:	add	sp, #8
     4c2:	bx	lr
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     4c4:	ldr	r3, [pc, #20]	; (4dc <logg(unsigned long, char const*) [clone .part.12]+0x38>)
     4c6:	movs	r2, #32
     4c8:	str	r2, [r3, #0]
     4ca:	b.n	4b4 <logg(unsigned long, char const*) [clone .part.12]+0x10>
     4cc:	.word	0x400ff090
     4d0:	.word	0x400ff088
     4d4:	.word	0x1fff1ae4
     4d8:	.word	0x1fff148c
     4dc:	.word	0x400ff084

000004e0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     4e0:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     4e2:	cbz	r3, 4ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     4e4:	mov	r0, r3
     4e6:	b.w	3208 <FatFile::sync()>
     4ea:	ldr	r0, [r0, #76]	; 0x4c
     4ec:	cbz	r0, 4f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     4ee:	b.w	1c70 <ExFatFile::sync()>
     4f2:	bx	lr

000004f4 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     4f4:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     4f6:	cbz	r3, 4fe <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     4f8:	mov	r0, r3
     4fa:	b.w	29c4 <FatFile::peek()>
     4fe:	ldr	r0, [r0, #76]	; 0x4c
     500:	cbz	r0, 506 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     502:	b.w	adc <ExFatFile::peek()>
    return BaseFile::peek();
  }
     506:	mov.w	r0, #4294967295
     50a:	bx	lr

0000050c <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     50c:	push	{lr}
     50e:	ldr	r3, [r0, #72]	; 0x48
     510:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     512:	cbz	r3, 52e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     514:	mov	r0, r3
     516:	movs	r2, #1
     518:	add.w	r1, sp, #7
     51c:	bl	27e4 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     520:	cmp	r0, #1
     522:	bne.n	53e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     524:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     528:	add	sp, #12
     52a:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     52e:	ldr	r0, [r0, #76]	; 0x4c
     530:	cbz	r0, 53e <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     532:	movs	r2, #1
     534:	add.w	r1, sp, #7
     538:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
     53c:	b.n	520 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     53e:	mov.w	r0, #4294967295
     542:	b.n	528 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000544 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     544:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     546:	cbz	r2, 562 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     548:	ldrb	r3, [r2, #0]
     54a:	and.w	r3, r3, #8
     54e:	and.w	r0, r3, #255	; 0xff
     552:	cbz	r3, 596 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     554:	ldr	r3, [r2, #28]
     556:	ldr	r0, [r2, #20]
     558:	subs	r0, r3, r0
     55a:	it	mi
     55c:	mvnmi.w	r0, #2147483648	; 0x80000000
     560:	bx	lr
     562:	ldr	r1, [r0, #76]	; 0x4c
     564:	cbz	r1, 598 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     566:	ldrb.w	r3, [r1, #49]	; 0x31
     56a:	and.w	r3, r3, #8
     56e:	and.w	r0, r3, #255	; 0xff
     572:	cbz	r3, 596 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     574:	ldrd	r2, r3, [r1, #16]
     578:	ldrd	r0, r1, [r1]
     57c:	subs	r0, r2, r0
     57e:	push	{r4, r5}
     580:	sbc.w	r1, r3, r1
     584:	movs	r5, #0
     586:	mvn.w	r4, #2147483648	; 0x80000000
     58a:	cmp	r5, r1
     58c:	it	eq
     58e:	cmpeq	r4, r0
     590:	bcs.n	594 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     592:	mov	r0, r4
    return BaseFile::available();
  }
     594:	pop	{r4, r5}
     596:	bx	lr
     598:	mov	r0, r1
     59a:	bx	lr

0000059c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     59c:	push	{lr}
     59e:	ldr	r3, [r0, #72]	; 0x48
     5a0:	sub	sp, #12
     5a2:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     5a6:	cbz	r3, 5ba <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     5a8:	mov	r0, r3
     5aa:	movs	r2, #1
     5ac:	add.w	r1, sp, #7
     5b0:	bl	3214 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     5b4:	add	sp, #12
     5b6:	ldr.w	pc, [sp], #4
     5ba:	ldr	r0, [r0, #76]	; 0x4c
     5bc:	cmp	r0, #0
     5be:	beq.n	5b4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     5c0:	movs	r2, #1
     5c2:	add.w	r1, sp, #7
     5c6:	bl	2160 <ExFatFile::write(void const*, unsigned int)>
     5ca:	add	sp, #12
     5cc:	ldr.w	pc, [sp], #4

000005d0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     5d0:	ldr	r3, [r0, #72]	; 0x48
     5d2:	cbz	r3, 5da <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     5d4:	mov	r0, r3
     5d6:	b.w	3214 <FatFile::write(void const*, unsigned int)>
     5da:	ldr	r0, [r0, #76]	; 0x4c
     5dc:	cbz	r0, 5e2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     5de:	b.w	2160 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     5e2:	bx	lr

000005e4 <setup>:

void setup()
{ 
     5e4:	push	{r3, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     5e6:	movs	r1, #8
     5e8:	ldr	r0, [pc, #28]	; (608 <setup+0x24>)
     5ea:	bl	8ff4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     5ee:	ldr	r0, [pc, #28]	; (60c <setup+0x28>)
     5f0:	bl	a624 <Print::println()>
  Serial.println("MTP test");

  usb_mtp_configure();
     5f4:	bl	8df0 <usb_mtp_configure>

  Storage_init();
     5f8:	bl	6cc4 <Storage_init()>

  pinMode(13,OUTPUT);
     5fc:	movs	r1, #1
     5fe:	movs	r0, #13

}
     600:	ldmia.w	sp!, {r3, lr}

  usb_mtp_configure();

  Storage_init();

  pinMode(13,OUTPUT);
     604:	b.w	938c <pinMode>
     608:	.word	0x0000fd0c
     60c:	.word	0x1fff09c8

00000610 <loop>:

}

void loop()
{ 
     610:	push	{lr}
  mtpd.loop();
     612:	ldr	r0, [pc, #40]	; (63c <loop+0x2c>)
  pinMode(13,OUTPUT);

}

void loop()
{ 
     614:	sub	sp, #12
  mtpd.loop();
     616:	bl	81b4 <MTPD::loop()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     61a:	ldr	r3, [pc, #36]	; (640 <loop+0x30>)
  MTPStorage_SD storage;
  MTPD       mtpd(&storage);

void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
     61c:	ldr	r2, [pc, #36]	; (644 <loop+0x34>)
     61e:	ldr	r3, [r3, #0]
     620:	str	r3, [sp, #4]
	return ret;
     622:	ldr	r3, [sp, #4]
     624:	ldr	r2, [r2, #0]
     626:	subs	r3, r3, r2
     628:	cmp.w	r3, #1000	; 0x3e8
     62c:	bls.n	632 <loop+0x22>
     62e:	bl	4a4 <logg(unsigned long, char const*) [clone .part.12]>
void loop()
{ 
  mtpd.loop();

  logg(1000,"loop");
  asm("wfi");
     632:	wfi
}
     634:	add	sp, #12
     636:	ldr.w	pc, [sp], #4
     63a:	nop
     63c:	.word	0x1fff159c
     640:	.word	0x1fff1ae4
     644:	.word	0x1fff148c

00000648 <_GLOBAL__sub_I_storage>:
     648:	push	{r3, r4, r5, r6, r7, lr}
     64a:	ldr	r4, [pc, #116]	; (6c0 <_GLOBAL__sub_I_storage+0x78>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     64c:	ldr	r3, [pc, #116]	; (6c4 <_GLOBAL__sub_I_storage+0x7c>)
     64e:	ldr	r0, [pc, #120]	; (6c8 <_GLOBAL__sub_I_storage+0x80>)
     650:	str	r0, [r4, #0]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     652:	movs	r5, #0
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     654:	mov.w	r6, #1000	; 0x3e8
     658:	str	r3, [r4, #4]
     65a:	str	r3, [r4, #84]	; 0x54
     65c:	str.w	r3, [r4, #164]	; 0xa4
#include "Arduino.h"

  #include "mtp.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
     660:	ldr	r2, [pc, #104]	; (6cc <_GLOBAL__sub_I_storage+0x84>)
     662:	ldr	r1, [pc, #108]	; (6d0 <_GLOBAL__sub_I_storage+0x88>)
     664:	strb	r5, [r4, #8]
     666:	mvn.w	r7, #1
     66a:	mov	r0, r4
     66c:	strb	r5, [r4, #16]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     66e:	str	r5, [r4, #76]	; 0x4c
     670:	str	r5, [r4, #80]	; 0x50
     672:	strb.w	r5, [r4, #88]	; 0x58
     676:	strb.w	r5, [r4, #96]	; 0x60
     67a:	str.w	r5, [r4, #156]	; 0x9c
     67e:	str.w	r5, [r4, #160]	; 0xa0
     682:	strb.w	r5, [r4, #168]	; 0xa8
     686:	strb.w	r5, [r4, #176]	; 0xb0
     68a:	str.w	r5, [r4, #236]	; 0xec
     68e:	str.w	r5, [r4, #240]	; 0xf0
     692:	str	r6, [r4, #12]
     694:	str	r6, [r4, #92]	; 0x5c
     696:	str.w	r6, [r4, #172]	; 0xac
     69a:	str.w	r7, [r4, #248]	; 0xf8
     69e:	str.w	r5, [r4, #244]	; 0xf4
     6a2:	str.w	r5, [r4, #252]	; 0xfc
     6a6:	strb.w	r5, [r4, #256]	; 0x100
     6aa:	strb.w	r5, [r4, #257]	; 0x101
     6ae:	bl	af14 <__aeabi_atexit>
#include "Storage.h"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     6b2:	ldr	r3, [pc, #32]	; (6d4 <_GLOBAL__sub_I_storage+0x8c>)
     6b4:	stmia.w	r3, {r4, r5}
     6b8:	strb	r5, [r3, #8]
     6ba:	str	r5, [r3, #12]
     6bc:	pop	{r3, r4, r5, r6, r7, pc}
     6be:	nop
     6c0:	.word	0x1fff1490
     6c4:	.word	0x0000fcf0
     6c8:	.word	0x0000feb8
     6cc:	.word	0x1fff0970
     6d0:	.word	0x00000471
     6d4:	.word	0x1fff159c

000006d8 <Print::write(char const*)>:
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     6d8:	push	{r4, r5, r6, lr}
     6da:	mov	r4, r0
     6dc:	mov	r0, r1
     6de:	mov	r5, r1
     6e0:	bl	c900 <strlen>
     6e4:	ldr	r3, [r4, #0]
     6e6:	mov	r2, r0
     6e8:	mov	r1, r5
     6ea:	mov	r0, r4
     6ec:	ldr	r3, [r3, #4]
     6ee:	ldmia.w	sp!, {r4, r5, r6, lr}
     6f2:	bx	r3

000006f4 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
     6f4:	push	{r3, r4, r5, lr}
     6f6:	movs	r1, #10
     6f8:	mov	r5, r0
     6fa:	ldr	r0, [pc, #40]	; (724 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     6fc:	ldr	r4, [pc, #40]	; (728 <dbgPrint(unsigned short)+0x34>)
     6fe:	bl	8ff4 <usb_serial_write>
     702:	movs	r1, #13
     704:	ldr	r0, [pc, #36]	; (72c <dbgPrint(unsigned short)+0x38>)
     706:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     70a:	movs	r0, #46	; 0x2e
     70c:	bl	90fc <usb_serial_putchar>
     710:	mov	r1, r5
     712:	mov	r0, r4
     714:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     718:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
     71a:	ldmia.w	sp!, {r3, r4, r5, lr}
     71e:	b.w	a624 <Print::println()>
     722:	nop
     724:	.word	0x0000fd18
     728:	.word	0x1fff09c8
     72c:	.word	0x0000fd24

00000730 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
     730:	push	{r4, lr}
     732:	mov	r4, r0
  bool rtn = sync();
     734:	bl	1c70 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
     738:	movs	r3, #0
     73a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
     73e:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
     742:	pop	{r4, pc}

00000744 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     748:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     74c:	mov	r9, r0
     74e:	mov	r8, r1
     750:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     752:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     756:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
     758:	ldrb.w	r3, [r9, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     75c:	add	r6, sp, #4
     75e:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
     762:	cmp	r3, #0
     764:	beq.n	7dc <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     766:	ldrb.w	r3, [r9, #48]	; 0x30
     76a:	cmp	r3, #1
     76c:	bls.n	7fe <ExFatFile::getName(char*, unsigned int)+0xba>
     76e:	movs	r7, #1
     770:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
     772:	cmp	r7, #1
     774:	ite	eq
     776:	moveq	r2, #64	; 0x40
     778:	movne	r2, #32
     77a:	mov	r1, r6
     77c:	ldr.w	r0, [r9, #32]
     780:	bl	15d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
     784:	cmp	r0, #1
     786:	bne.n	7f6 <ExFatFile::getName(char*, unsigned int)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
     788:	movs	r2, #0
     78a:	mov	r1, r6
     78c:	ldr.w	r0, [r9, #32]
     790:	bl	1558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
     794:	cbz	r0, 7ee <ExFatFile::getName(char*, unsigned int)+0xaa>
     796:	ldrb	r3, [r0, #0]
     798:	cmp	r3, #193	; 0xc1
     79a:	bne.n	7ee <ExFatFile::getName(char*, unsigned int)+0xaa>
     79c:	add.w	r1, r0, #30
     7a0:	add.w	r2, r8, r4
     7a4:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
     7a6:	adds	r4, #1
     7a8:	cmp	r4, r5
     7aa:	bcs.n	7ce <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
     7ac:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     7b0:	cmp	r3, #126	; 0x7e
     7b2:	ite	ls
     7b4:	uxtbls	r3, r3
     7b6:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     7b8:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     7ba:	strb.w	r3, [r2], #1
     7be:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     7c0:	bne.n	7a6 <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     7c2:	adds	r7, #1
     7c4:	ldrb.w	r2, [r9, #48]	; 0x30
     7c8:	uxtb	r7, r7
     7ca:	cmp	r2, r7
     7cc:	bhi.n	772 <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     7ce:	movs	r2, #0
  return n;
     7d0:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     7d2:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
     7d6:	add	sp, #20
     7d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
     7dc:	movs	r0, #81	; 0x51
     7de:	bl	6f4 <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
     7e2:	movs	r0, #0
     7e4:	strb.w	r0, [r8]
  return 0;
}
     7e8:	add	sp, #20
     7ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
     7ee:	movs	r0, #92	; 0x5c
     7f0:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     7f4:	b.n	7e2 <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
     7f6:	movs	r0, #86	; 0x56
     7f8:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     7fc:	b.n	7e2 <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     7fe:	movs	r3, #0
     800:	b.n	7ce <ExFatFile::getName(char*, unsigned int)+0x8a>
     802:	nop

00000804 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
     804:	push	{r3, r4, r5, lr}
     806:	mov	r5, r1
  if (isOpen()) {
     808:	ldrb.w	r1, [r0, #49]	; 0x31
     80c:	cbnz	r1, 826 <ExFatFile::openRoot(ExFatVolume*)+0x22>
     80e:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     810:	movs	r2, #56	; 0x38
     812:	bl	c34c <memset>
  m_attributes = FILE_ATTR_ROOT;
     816:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     818:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     81a:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     81e:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     822:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
     824:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
     826:	mov.w	r0, #444	; 0x1bc
     82a:	bl	6f4 <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
     82e:	movs	r0, #0
     830:	pop	{r3, r4, r5, pc}
     832:	nop

00000834 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
     834:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
     836:	ldrb	r0, [r1, #0]
     838:	cmp	r0, #32
     83a:	bne.n	844 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
     83c:	ldrb.w	r0, [r1, #1]!
     840:	cmp	r0, #32
     842:	beq.n	83c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
     844:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
     846:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
     848:	cmp	r0, #0
     84a:	beq.n	8f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
     84c:	cmp	r0, #47	; 0x2f
     84e:	beq.n	8a8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     850:	cmp	r0, #92	; 0x5c
     852:	beq.n	896 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
     854:	sub.w	r4, r0, #34	; 0x22
     858:	uxtb	r4, r4
     85a:	cmp	r4, #29
     85c:	bls.n	89a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
     85e:	ldr.w	lr, [pc, #148]	; 8f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
     862:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     864:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
     866:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     868:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     86c:	mov	r7, r6
     86e:	beq.n	896 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     870:	cmp	r5, #94	; 0x5e
     872:	bhi.n	896 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     874:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     878:	sub.w	r5, r0, #34	; 0x22
     87c:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     87e:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
     880:	cbz	r0, 8e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
     882:	cmp	r0, #47	; 0x2f
     884:	beq.n	8aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
     886:	cmp	r0, #92	; 0x5c
     888:	lsr.w	r7, lr, r5
     88c:	beq.n	896 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
     88e:	cmp	r5, #29
     890:	bhi.n	866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
     892:	lsls	r5, r7, #31
     894:	bpl.n	866 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
     896:	movs	r0, #0
     898:	pop	{r4, r5, r6, r7, pc}
     89a:	ldr	r5, [pc, #88]	; (8f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
     89c:	lsr.w	r4, r5, r4
     8a0:	lsls	r6, r4, #31
     8a2:	bpl.n	85e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
     8a4:	movs	r0, #0
     8a6:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     8a8:	movs	r4, #0
     8aa:	adds	r7, r1, r4
     8ac:	mov	r6, r7
     8ae:	mov	r5, r4
     8b0:	movs	r0, #47	; 0x2f
     8b2:	b.n	8ba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
     8b4:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
     8b8:	adds	r5, #1
     8ba:	cmp	r0, #32
     8bc:	beq.n	8b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
     8be:	cmp	r0, #47	; 0x2f
     8c0:	beq.n	8b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
     8c2:	add	r1, r5
     8c4:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
     8c6:	cbz	r4, 8da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
     8c8:	mov	r1, r7
    c = path[len - 1];
     8ca:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
     8ce:	cmp	r3, #46	; 0x2e
     8d0:	beq.n	8d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
     8d2:	cmp	r3, #32
     8d4:	bne.n	8e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
     8d6:	subs	r4, #1
     8d8:	bne.n	8ca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
     8da:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
     8dc:	str	r0, [r2, #0]
  return true;
     8de:	movs	r0, #1
     8e0:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     8e2:	str	r7, [r3, #0]
     8e4:	adds	r7, r1, r4
     8e6:	b.n	8c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
     8e8:	cmp	r4, #255	; 0xff
     8ea:	ble.n	8da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
     8ec:	movs	r0, #0
     8ee:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     8f0:	str	r1, [r3, #0]
     8f2:	b.n	8dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
     8f4:	.word	0x35000101

000008f8 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
     8f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8fc:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
     900:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
     902:	sub	sp, #12
     904:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
     906:	bpl.w	ad2 <ExFatFile::read(void*, unsigned int)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     90a:	lsls	r0, r3, #25
     90c:	mov	r5, r1
     90e:	mov	r6, r2
     910:	bpl.w	a5a <ExFatFile::read(void*, unsigned int)+0x162>
    if ((m_curPosition + count) > m_validLength) {
     914:	ldrd	r0, r1, [r4]
     918:	ldrd	r2, r3, [r4, #16]
     91c:	adds.w	r8, r0, r6
     920:	adc.w	r9, r1, #0
     924:	cmp	r3, r9
     926:	it	eq
     928:	cmpeq	r2, r8
     92a:	bcc.w	a66 <ExFatFile::read(void*, unsigned int)+0x16e>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     92e:	cmp	r6, #0
     930:	beq.w	a6a <ExFatFile::read(void*, unsigned int)+0x172>
     934:	mov	r9, r4
     936:	ldrd	r2, r3, [r9], #24
     93a:	mov	r8, r6
     93c:	b.n	9de <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
     93e:	orrs	r3, r2
     940:	bne.n	a1c <ExFatFile::read(void*, unsigned int)+0x124>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
     942:	ldrb.w	r3, [r4, #49]	; 0x31
     946:	lsls	r2, r3, #25
     948:	ite	mi
     94a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
     94e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
     950:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
     952:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
     956:	ldr.w	r2, [r0, #1060]	; 0x424
     95a:	subs	r1, #2
     95c:	lsrs	r7, r7, #9
     95e:	lsl.w	lr, r1, ip
     962:	adds	r1, r7, r2
     964:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
     966:	cmp.w	sl, #0
     96a:	bne.n	9f2 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     96c:	cmp.w	r8, #512	; 0x200
     970:	bcc.n	9f2 <ExFatFile::read(void*, unsigned int)+0xfa>
     972:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
     976:	cmp	r1, r2
     978:	beq.n	9f2 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
     97a:	cmp.w	r8, #1024	; 0x400
     97e:	bcc.n	a2a <ExFatFile::read(void*, unsigned int)+0x132>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
     980:	movs	r3, #1
     982:	lsl.w	ip, r3, ip
     986:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
     98a:	mov.w	r3, r8, lsr #9
     98e:	cmp	r7, r3
     990:	it	cs
     992:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     994:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     996:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     99a:	bhi.n	9b4 <ExFatFile::read(void*, unsigned int)+0xbc>
     99c:	adds	r3, r7, r1
     99e:	cmp	r3, r2
     9a0:	bls.n	9b4 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
     9a2:	add.w	r0, r0, #524	; 0x20c
     9a6:	str	r1, [sp, #4]
     9a8:	bl	12bc <FsCache::sync()>
        // Flush cache if a cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
     9ac:	cmp	r0, #0
     9ae:	beq.n	aa0 <ExFatFile::read(void*, unsigned int)+0x1a8>
     9b0:	ldr	r0, [r4, #32]
     9b2:	ldr	r1, [sp, #4]
     9b4:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
     9b8:	ldr	r2, [r0, #0]
     9ba:	mov	r3, r7
     9bc:	ldr	r7, [r2, #12]
     9be:	mov	r2, r5
     9c0:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
     9c2:	cmp	r0, #0
     9c4:	beq.n	a96 <ExFatFile::read(void*, unsigned int)+0x19e>
     9c6:	mov	r0, fp
     9c8:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
     9ca:	ldrd	r2, r3, [r4]
     9ce:	adds	r2, r2, r0
     9d0:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     9d2:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
     9d6:	add	r5, fp
    m_curPosition += n;
     9d8:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     9dc:	beq.n	a6a <ExFatFile::read(void*, unsigned int)+0x172>
    clusterOffset = m_curPosition & m_vol->clusterMask();
     9de:	ldr	r0, [r4, #32]
     9e0:	ldr.w	r7, [r0, #1072]	; 0x430
     9e4:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
     9e6:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
     9ea:	cmp	r7, #0
     9ec:	beq.n	93e <ExFatFile::read(void*, unsigned int)+0x46>
     9ee:	ldr	r1, [r4, #24]
     9f0:	b.n	952 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     9f2:	add.w	r0, r0, #524	; 0x20c
     9f6:	movs	r2, #0
     9f8:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
     9fc:	cmp	r0, #0
     9fe:	beq.n	a78 <ExFatFile::read(void*, unsigned int)+0x180>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
     a00:	rsb	fp, sl, #512	; 0x200
     a04:	cmp	fp, r8
     a06:	it	cs
     a08:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
     a0a:	add.w	r1, r0, sl
     a0e:	mov	r2, fp
     a10:	mov	r0, r5
     a12:	bl	8df4 <memcpy>
     a16:	mov	r0, fp
     a18:	movs	r1, #0
     a1a:	b.n	9ca <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
     a1c:	ldrb.w	r3, [r4, #51]	; 0x33
     a20:	lsls	r3, r3, #25
     a22:	bpl.n	a44 <ExFatFile::read(void*, unsigned int)+0x14c>
        m_curCluster++;
     a24:	ldr	r1, [r4, #24]
     a26:	adds	r1, #1
     a28:	b.n	950 <ExFatFile::read(void*, unsigned int)+0x58>
     a2a:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
     a2e:	ldr	r3, [r0, #0]
     a30:	mov	r2, r5
     a32:	ldr	r3, [r3, #8]
     a34:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
     a36:	cbz	r0, aaa <ExFatFile::read(void*, unsigned int)+0x1b2>
     a38:	mov.w	r0, #512	; 0x200
     a3c:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     a3e:	mov.w	fp, #512	; 0x200
     a42:	b.n	9ca <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
     a44:	mov	r2, r9
     a46:	ldr	r1, [r4, #24]
     a48:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     a4c:	sxtb	r0, r0
        if (fg < 0) {
     a4e:	cmp	r0, #0
     a50:	blt.n	ab4 <ExFatFile::read(void*, unsigned int)+0x1bc>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
     a52:	beq.n	abe <ExFatFile::read(void*, unsigned int)+0x1c6>
     a54:	ldr	r0, [r4, #32]
     a56:	ldr	r1, [r4, #24]
     a58:	b.n	952 <ExFatFile::read(void*, unsigned int)+0x5a>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     a5a:	ldrb.w	r3, [r4, #49]	; 0x31
     a5e:	lsls	r1, r3, #28
     a60:	bmi.w	914 <ExFatFile::read(void*, unsigned int)+0x1c>
     a64:	b.n	92e <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
     a66:	subs	r6, r2, r0
     a68:	b.n	92e <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     a6a:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
     a6e:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
     a72:	add	sp, #12
     a74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
     a78:	movw	r0, #597	; 0x255
     a7c:	bl	6f4 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     a80:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
     a84:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     a88:	orr.w	r3, r3, #2
     a8c:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
     a90:	add	sp, #12
     a92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
     a96:	movw	r0, #622	; 0x26e
     a9a:	bl	6f4 <dbgPrint(unsigned short)>
        goto fail;
     a9e:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if a cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
     aa0:	movw	r0, #617	; 0x269
     aa4:	bl	6f4 <dbgPrint(unsigned short)>
          goto fail;
     aa8:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
     aaa:	movw	r0, #630	; 0x276
     aae:	bl	6f4 <dbgPrint(unsigned short)>
        goto fail;
     ab2:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
     ab4:	movw	r0, #573	; 0x23d
     ab8:	bl	6f4 <dbgPrint(unsigned short)>
          goto fail;
     abc:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
     abe:	ldrb.w	r3, [r4, #49]	; 0x31
     ac2:	tst.w	r3, #80	; 0x50
     ac6:	bne.n	a6e <ExFatFile::read(void*, unsigned int)+0x176>
            break;
          }
          DBG_FAIL_MACRO;
     ac8:	movw	r0, #581	; 0x245
     acc:	bl	6f4 <dbgPrint(unsigned short)>
          goto fail;
     ad0:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
     ad2:	movw	r0, #553	; 0x229
     ad6:	bl	6f4 <dbgPrint(unsigned short)>
    goto fail;
     ada:	b.n	a80 <ExFatFile::read(void*, unsigned int)+0x188>

00000adc <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
     adc:	push	{r4, r5, r6, r7, lr}
     ade:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     ae0:	movs	r2, #1
     ae2:	add.w	r1, sp, #7
     ae6:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
     ae8:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
     aec:	ldr	r5, [r0, #24]
     aee:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
     af2:	cmp	r0, #1
     af4:	it	eq
     af6:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
     afa:	str	r5, [r4, #24]
     afc:	it	ne
     afe:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
     b02:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
     b06:	add	sp, #12
     b08:	pop	{r4, r5, r6, r7, pc}
     b0a:	nop

00000b0c <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
     b0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b10:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
     b14:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
     b16:	sub	sp, #12
     b18:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
     b1a:	cmp.w	ip, #0
     b1e:	beq.n	bf6 <ExFatFile::seekSet(unsigned long long)+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
     b20:	ldrd	r0, r1, [r0]
     b24:	cmp	r1, r3
     b26:	it	eq
     b28:	cmpeq	r0, r2
     b2a:	mov	r6, r2
     b2c:	mov	r7, r3
     b2e:	beq.n	c10 <ExFatFile::seekSet(unsigned long long)+0x104>
    return true;
  }
  if (pos == 0) {
     b30:	orrs.w	r3, r6, r7
     b34:	bne.n	b46 <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
     b36:	movs	r3, #0
     b38:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
     b3a:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     b3c:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
     b40:	add	sp, #12
     b42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
     b46:	tst.w	ip, #8
     b4a:	beq.n	b58 <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
     b4c:	ldrd	r2, r3, [r4, #16]
     b50:	cmp	r3, r7
     b52:	it	eq
     b54:	cmpeq	r2, r6
     b56:	bcc.n	c18 <ExFatFile::seekSet(unsigned long long)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     b58:	ldr	r3, [r4, #32]
     b5a:	str	r3, [sp, #4]
     b5c:	ldrb.w	lr, [r3, #1085]	; 0x43d
  if (isContiguous()) {
     b60:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     b64:	add.w	lr, lr, #9
     b68:	uxtb.w	lr, lr
     b6c:	adds.w	r2, r6, #4294967295
     b70:	adc.w	r3, r7, #4294967295
     b74:	rsb	r8, lr, #32
     b78:	lsl.w	fp, r3, r8
     b7c:	lsr.w	r2, r2, lr
     b80:	orr.w	r2, r2, fp
     b84:	sub.w	fp, lr, #32
     b88:	lsr.w	r3, r3, fp
  if (isContiguous()) {
     b8c:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     b90:	orr.w	r2, r2, r3
  if (isContiguous()) {
     b94:	bne.n	c08 <ExFatFile::seekSet(unsigned long long)+0xfc>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     b96:	adds.w	r9, r0, #4294967295
     b9a:	adc.w	sl, r1, #4294967295
     b9e:	lsr.w	lr, r9, lr
     ba2:	lsl.w	r8, sl, r8
     ba6:	orr.w	lr, lr, r8
     baa:	lsr.w	fp, sl, fp
     bae:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
     bb2:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     bb4:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
     bb6:	bcc.n	bbe <ExFatFile::seekSet(unsigned long long)+0xb2>
     bb8:	orrs.w	r3, r0, r1
     bbc:	bne.n	c22 <ExFatFile::seekSet(unsigned long long)+0x116>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
     bbe:	tst.w	ip, #64	; 0x40
     bc2:	itet	ne
     bc4:	ldrne	r3, [sp, #4]
     bc6:	ldreq	r3, [r4, #28]
     bc8:	ldrne.w	r3, [r3, #1068]	; 0x42c
     bcc:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
     bce:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     bd0:	add.w	r9, r4, #24
     bd4:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     bd6:	cmp.w	r8, #0
     bda:	beq.n	b3a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     bdc:	ldr	r1, [r4, #24]
     bde:	ldr	r0, [r4, #32]
     be0:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     be4:	add.w	r8, r8, #4294967295
     be8:	cmp	r0, #0
     bea:	bne.n	bd4 <ExFatFile::seekSet(unsigned long long)+0xc8>
      DBG_FAIL_MACRO;
     bec:	movw	r0, #698	; 0x2ba
     bf0:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     bf4:	b.n	bfe <ExFatFile::seekSet(unsigned long long)+0xf2>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
     bf6:	movw	r0, #663	; 0x297
     bfa:	bl	6f4 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
     bfe:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
     c00:	str	r5, [r4, #24]
  return false;
}
     c02:	add	sp, #12
     c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
     c08:	ldr	r3, [r4, #28]
     c0a:	add	r2, r3
     c0c:	str	r2, [r4, #24]
    goto done;
     c0e:	b.n	b3a <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
     c10:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
     c12:	add	sp, #12
     c14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
     c18:	movw	r0, #677	; 0x2a5
     c1c:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     c20:	b.n	bfe <ExFatFile::seekSet(unsigned long long)+0xf2>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
     c22:	rsb	r2, lr, r2
     c26:	b.n	bce <ExFatFile::seekSet(unsigned long long)+0xc2>

00000c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     c28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c2c:	mov	r5, r1
     c2e:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     c30:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     c34:	str	r2, [sp, #0]
     c36:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     c38:	cbnz	r1, c46 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     c3a:	mov	fp, r3
     c3c:	ldrb.w	r3, [r5, #49]	; 0x31
     c40:	tst.w	r3, #80	; 0x50
     c44:	bne.n	c5c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34>
    DBG_FAIL_MACRO;
     c46:	movs	r0, #206	; 0xce
     c48:	bl	6f4 <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
     c4c:	movs	r0, #0
     c4e:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
     c52:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
     c56:	add	sp, #76	; 0x4c
     c58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     c5c:	ldr	r3, [sp, #112]	; 0x70
     c5e:	and.w	r3, r3, #3
     c62:	cmp	r3, #1
     c64:	beq.w	e84 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
     c68:	cmp	r3, #2
     c6a:	beq.n	c7a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x52>
     c6c:	cmp	r3, #0
     c6e:	beq.w	e80 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x258>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
     c72:	movs	r0, #220	; 0xdc
     c74:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     c78:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     c7a:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
     c7c:	ldr	r2, [sp, #112]	; 0x70
     c7e:	and.w	r2, r2, #8
     c82:	orrs	r3, r2
     c84:	str	r3, [sp, #4]
  if (name) {
     c86:	ldr	r3, [sp, #0]
     c88:	cmp	r3, #0
     c8a:	beq.w	e90 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x268>
    nameHash = exFatHashName(name, nameLength, 0);
     c8e:	movs	r2, #0
     c90:	mov	r0, r3
     c92:	mov	r1, fp
     c94:	bl	17bc <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     c98:	movs	r2, #0
     c9a:	str	r0, [sp, #8]
     c9c:	movs	r3, #0
     c9e:	mov	r0, r5
     ca0:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     ca4:	ldr	r2, [pc, #708]	; (f6c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>)
     ca6:	add.w	r3, fp, #14
     caa:	smull	r1, r2, r2, r3
     cae:	add	r2, r3
     cb0:	asrs	r3, r3, #31
     cb2:	rsb	r3, r3, r2, asr #3
     cb6:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
     cb8:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     cbc:	add.w	sl, r3, #2
     cc0:	str	r3, [sp, #12]
     cc2:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
     cc6:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
     cc8:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     cca:	movs	r2, #32
     ccc:	add	r1, sp, #40	; 0x28
     cce:	mov	r0, r5
     cd0:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     cd4:	cmp	r0, #0
     cd6:	beq.n	d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
     cd8:	cmp	r0, #32
     cda:	bne.w	e88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x260>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
     cde:	ldrb.w	r3, [sp, #40]	; 0x28
     ce2:	lsls	r2, r3, #24
     ce4:	bmi.n	db6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
     ce6:	cmp	r4, #0
     ce8:	bne.n	db0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
     cea:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
     cec:	ldr	r1, [r5, #24]
     cee:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
     cf0:	subs	r2, #32
     cf2:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
     cf4:	adds	r4, #1
     cf6:	uxtb	r4, r4
      }
      if (!buf[0]) {
     cf8:	cbz	r3, d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
     cfa:	cmp	r3, #192	; 0xc0
     cfc:	beq.w	e24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
     d00:	cmp	r3, #193	; 0xc1
     d02:	beq.n	dcc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
     d04:	cmp	r3, #133	; 0x85
     d06:	bne.n	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
     d08:	movs	r2, #56	; 0x38
     d0a:	movs	r1, #0
     d0c:	mov	r0, r6
     d0e:	bl	c34c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     d12:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
     d16:	ldrb.w	r2, [sp, #41]	; 0x29
     d1a:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
     d1e:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     d20:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
     d24:	it	pl
     d26:	orrpl.w	r2, r2, #8
     d2a:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     d2e:	ldr	r3, [r5, #0]
     d30:	ldr	r1, [r5, #32]
     d32:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
     d34:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
     d36:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
     d38:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     d3a:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
     d3c:	ldrb.w	r3, [r5, #51]	; 0x33
     d40:	ubfx	r3, r3, #6, #1
     d44:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     d48:	movs	r2, #32
     d4a:	add	r1, sp, #40	; 0x28
     d4c:	mov	r0, r5
     d4e:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     d52:	cmp	r0, #0
     d54:	bne.n	cd8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
     d56:	ldr	r3, [sp, #112]	; 0x70
     d58:	lsls	r1, r3, #22
     d5a:	bpl.w	e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
     d5e:	ldr	r3, [sp, #4]
     d60:	lsls	r2, r3, #30
     d62:	bpl.w	e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
     d66:	ldr	r3, [sp, #0]
     d68:	cmp	r3, #0
     d6a:	beq.w	e76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     d6e:	cmp	r4, sl
     d70:	bcc.n	d8e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
     d72:	b.n	ea0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
     d74:	cmp	r0, #32
     d76:	bne.w	f62 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
     d7a:	cbnz	r4, d86 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
     d7c:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
     d7e:	ldr	r1, [r5, #24]
     d80:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
     d82:	subs	r2, #32
     d84:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     d86:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     d88:	cmp	sl, r4
     d8a:	bls.w	ea0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
    n = dir->read(buf, 32);
     d8e:	movs	r2, #32
     d90:	add	r1, sp, #40	; 0x28
     d92:	mov	r0, r5
     d94:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     d98:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
     d9a:	cmp	r0, #0
     d9c:	bne.n	d74 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
     d9e:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
     da0:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
     da2:	bl	1cd8 <ExFatFile::addDirCluster()>
     da6:	cmp	r0, #0
     da8:	beq.w	fbe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
     dac:	str	r7, [r5, #24]
      continue;
     dae:	b.n	d88 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
     db0:	cmp	r4, sl
     db2:	bcs.n	cf8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
     db4:	b.n	cf4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
     db6:	cmp.w	r9, #0
     dba:	bne.n	cfa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
     dbc:	cmp	r4, sl
     dbe:	it	cc
     dc0:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
     dc2:	cmp	r3, #133	; 0x85
     dc4:	bne.n	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        continue;
      }
      inSet = true;
     dc6:	mov.w	r9, #1
     dca:	b.n	d08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
     dcc:	rsb	r8, r7, fp
     dd0:	uxtb.w	r8, r8
     dd4:	cmp.w	r8, #15
     dd8:	it	cs
     dda:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
     dde:	mov	r3, r8
     de0:	mov	r2, r7
     de2:	ldr	r1, [sp, #0]
     de4:	add	r0, sp, #40	; 0x28
     de6:	bl	17f8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
     dea:	cmp	r0, #0
     dec:	beq.n	e64 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
     dee:	add	r7, r8
     df0:	uxtb	r7, r7

        if (nameOffset == nameLength) {
     df2:	cmp	fp, r7
     df4:	bne.w	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
     df8:	ldr	r3, [sp, #112]	; 0x70
     dfa:	lsls	r3, r3, #20
     dfc:	bmi.n	e96 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
     dfe:	ldr	r3, [sp, #112]	; 0x70
     e00:	tst.w	r3, #17408	; 0x4400
     e04:	bne.w	f70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
     e08:	ldrb.w	r3, [r6, #51]	; 0x33
     e0c:	lsls	r7, r3, #30
     e0e:	bmi.w	f70 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     e12:	ldr	r3, [sp, #112]	; 0x70
     e14:	lsls	r3, r3, #21
     e16:	bpl.w	fb4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
     e1a:	mov.w	r0, #334	; 0x14e
     e1e:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     e22:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     e24:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
     e28:	ldr	r2, [sp, #4]
     e2a:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     e2e:	lsls	r1, r3, #30
     e30:	bpl.n	e3a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x212>
          m_flags |= FILE_FLAG_CONTIGUOUS;
     e32:	orr.w	r3, r2, #64	; 0x40
     e36:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     e3a:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     e3e:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     e42:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
     e46:	ldr	r3, [sp, #60]	; 0x3c
     e48:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
     e4a:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     e4c:	strd	r0, r1, [r6, #8]
        if (!name) {
     e50:	cmp	r3, #0
     e52:	beq.n	df8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     e54:	ldrb.w	r3, [sp, #43]	; 0x2b
     e58:	cmp	r3, fp
     e5a:	beq.n	e68 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
     e5c:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     e60:	mov	r7, r9
     e62:	b.n	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
     e64:	mov	r9, r0
     e66:	b.n	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     e68:	ldrh.w	r3, [sp, #44]	; 0x2c
     e6c:	ldr	r2, [sp, #8]
     e6e:	cmp	r3, r2
     e70:	bne.n	e5c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     e72:	movs	r7, #0
     e74:	b.n	cca <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
     e76:	movw	r0, #355	; 0x163
     e7a:	bl	6f4 <dbgPrint(unsigned short)>
    goto fail;
     e7e:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     e80:	movs	r3, #1
     e82:	b.n	c7c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
     e84:	movs	r3, #2
     e86:	b.n	c7c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
     e88:	movs	r0, #236	; 0xec
     e8a:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     e8e:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
     e90:	ldr	r3, [sp, #0]
     e92:	str	r3, [sp, #8]
     e94:	b.n	ca4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
     e96:	mov.w	r0, #320	; 0x140
     e9a:	bl	6f4 <dbgPrint(unsigned short)>
    goto fail;
     e9e:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     ea0:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
     ea4:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     ea6:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
     eaa:	movs	r1, #0
     eac:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     eae:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     eb2:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
     eb6:	bl	c34c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     eba:	ldr	r4, [sp, #12]
     ebc:	ldr	r3, [r5, #32]
     ebe:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     ec2:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     ec6:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
     eca:	movs	r4, #8
     ecc:	strb.w	r4, [r6, #49]	; 0x31
     ed0:	add.w	r7, fp, #30
  m_dirPos = freePos;
     ed4:	add.w	r4, r6, #36	; 0x24
     ed8:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
     edc:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     ede:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     ee2:	stmia.w	r4, {r0, r1, r2}
     ee6:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
     ee8:	movs	r5, #0
     eea:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
     eec:	movs	r2, #1
     eee:	mov	r1, r8
     ef0:	bl	1558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
     ef4:	mov	r4, r0
     ef6:	cmp	r0, #0
     ef8:	beq.n	faa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
     efa:	ldrsb.w	r3, [r0]
     efe:	cmp	r3, #0
     f00:	blt.n	faa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
     f02:	movs	r2, #32
     f04:	movs	r1, #0
     f06:	bl	c34c <memset>
    if (i == 0) {
     f0a:	cmp	r5, #0
     f0c:	beq.w	101e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3f6>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
     f10:	cmp	r5, #1
     f12:	beq.n	ffe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d6>
     f14:	rsb	r3, r5, r5, lsl #4
     f18:	cmp	r7, #15
     f1a:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
     f1e:	mov.w	r2, #193	; 0xc1
     f22:	mov	r1, r7
     f24:	it	cs
     f26:	movcs	r1, #15
     f28:	uxtb	r3, r3
     f2a:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     f2c:	cbz	r1, f44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
     f2e:	adds	r4, #2
     f30:	sxth	r1, r1
     f32:	add.w	r1, r4, r1, lsl #1
     f36:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
     f38:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     f3c:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     f40:	cmp	r1, r4
     f42:	bne.n	f38 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
     f44:	adds	r5, #1
     f46:	uxtb	r5, r5
     f48:	cmp	sl, r5
     f4a:	bls.n	fd2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3aa>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
     f4c:	movs	r2, #32
     f4e:	mov	r1, r8
     f50:	ldr	r0, [r6, #32]
     f52:	bl	15d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
     f56:	cmp	r0, #1
     f58:	bne.n	fc8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a0>
     f5a:	subs	r7, #15
     f5c:	ldr	r0, [r6, #32]
     f5e:	uxtb	r7, r7
     f60:	b.n	eec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c4>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
     f62:	mov.w	r0, #370	; 0x172
     f66:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     f6a:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
     f6c:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
     f70:	ldrb.w	r3, [r6, #49]	; 0x31
     f74:	tst.w	r3, #17
     f78:	bne.n	fa0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x378>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     f7a:	ldr	r3, [sp, #112]	; 0x70
     f7c:	lsls	r5, r3, #21
     f7e:	bpl.n	fb4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
     f80:	ldrb.w	r3, [r6, #51]	; 0x33
     f84:	lsls	r4, r3, #30
     f86:	bpl.w	e1a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     f8a:	movs	r2, #0
     f8c:	movs	r3, #0
     f8e:	mov	r0, r6
     f90:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
     f94:	cbnz	r0, ff2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
     f96:	mov.w	r0, #338	; 0x152
     f9a:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     f9e:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
     fa0:	mov.w	r0, #326	; 0x146
     fa4:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     fa8:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
     faa:	mov.w	r0, #394	; 0x18a
     fae:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
     fb2:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     fb4:	ldr	r3, [sp, #112]	; 0x70
     fb6:	lsls	r0, r3, #17
     fb8:	bmi.n	fda <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b2>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
     fba:	movs	r0, #1
     fbc:	b.n	c56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
     fbe:	movw	r0, #363	; 0x16b
     fc2:	bl	6f4 <dbgPrint(unsigned short)>
        goto fail;
     fc6:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
     fc8:	mov.w	r0, #388	; 0x184
     fcc:	bl	6f4 <dbgPrint(unsigned short)>
        goto fail;
     fd0:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
     fd2:	mov	r0, r6
     fd4:	bl	1c70 <ExFatFile::sync()>
     fd8:	b.n	c56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     fda:	ldrd	r2, r3, [r6, #16]
     fde:	mov	r0, r6
     fe0:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
     fe4:	cmp	r0, #0
     fe6:	bne.n	fba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
    DBG_FAIL_MACRO;
     fe8:	mov.w	r0, #342	; 0x156
     fec:	bl	6f4 <dbgPrint(unsigned short)>
    goto fail;
     ff0:	b.n	c4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
     ff2:	mov	r0, r6
     ff4:	bl	2040 <ExFatFile::truncate()>
     ff8:	cmp	r0, #0
     ffa:	beq.n	f96 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36e>
     ffc:	b.n	fba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
     ffe:	movs	r3, #192	; 0xc0
    1000:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    1002:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    1004:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    1006:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    100a:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    100c:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    1010:	ldrb.w	r3, [sp, #12]
    1014:	strb	r3, [r4, #3]
    1016:	ldrh.w	r3, [sp, #8]
    101a:	strh	r3, [r4, #4]
    101c:	b.n	f44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    101e:	movs	r3, #133	; 0x85
    1020:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    1022:	ldr	r3, [pc, #48]	; (1054 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x42c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    1024:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    1028:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    102c:	ldr	r3, [r3, #0]
    102e:	cmp	r3, #0
    1030:	beq.n	f44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    1032:	add.w	r2, sp, #23
    1036:	add.w	r1, sp, #26
    103a:	add	r0, sp, #24
    103c:	blx	r3
        dirFile->createTimeMs = ms10;
    103e:	ldrb.w	r1, [sp, #23]
    1042:	ldrh.w	r2, [sp, #26]
    1046:	ldrh.w	r3, [sp, #24]
    104a:	strb	r1, [r4, #20]
    104c:	strh	r2, [r4, #8]
    104e:	strh	r3, [r4, #10]
    1050:	b.n	f44 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    1052:	nop
    1054:	.word	0x1fff15ac

00001058 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    1058:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    105c:	mov	r6, r0
    105e:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    1060:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    1064:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1066:	movs	r0, #0
    1068:	strb.w	r0, [sp, #73]	; 0x49
    106c:	strb.w	r0, [sp, #74]	; 0x4a
    1070:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    1074:	cmp	r4, #0
    1076:	bne.n	1114 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    1078:	mov	r9, r3
    107a:	ldrb.w	r3, [r1, #49]	; 0x31
    107e:	tst.w	r3, #80	; 0x50
    1082:	mov	r5, r1
    1084:	beq.n	1114 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    1086:	ldrb	r3, [r2, #0]
    1088:	cmp	r3, #47	; 0x2f
    108a:	mov	r1, r2
    108c:	beq.n	10f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    108e:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    1092:	add	r3, sp, #12
    1094:	add	r2, sp, #16
    1096:	mov	r0, r6
    1098:	bl	834 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    109c:	mov	r4, r0
    109e:	cmp	r0, #0
    10a0:	beq.n	1124 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    10a2:	ldr	r3, [sp, #12]
    10a4:	ldrb	r3, [r3, #0]
    10a6:	cmp	r3, #0
    10a8:	beq.n	1132 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    10aa:	ldrb.w	r3, [sp, #16]
    10ae:	ldr	r2, [sp, #20]
    10b0:	str.w	r8, [sp]
    10b4:	mov	r1, r5
    10b6:	mov	r0, r6
    10b8:	bl	c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    10bc:	mov	r4, r0
    10be:	cmp	r0, #0
    10c0:	beq.n	114e <ExFatFile::open(ExFatFile*, char const*, int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    10c2:	mov	r4, r6
    10c4:	add	r7, sp, #24
    10c6:	add.w	lr, r6, #48	; 0x30
    10ca:	ldr	r0, [r4, #0]
    10cc:	ldr	r1, [r4, #4]
    10ce:	ldr	r2, [r4, #8]
    10d0:	ldr	r3, [r4, #12]
    10d2:	mov	r5, r7
    10d4:	stmia	r5!, {r0, r1, r2, r3}
    10d6:	adds	r4, #16
    10d8:	cmp	r4, lr
    10da:	mov	r7, r5
    10dc:	bne.n	10ca <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    10de:	ldr	r0, [r4, #0]
    10e0:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    10e2:	mov	r0, r6
    10e4:	bl	1c70 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    10e8:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    10ea:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    10ee:	strb.w	r8, [r6, #51]	; 0x33
    10f2:	ldr	r1, [sp, #12]
    10f4:	b.n	1092 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    10f6:	adds	r1, #1
    10f8:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    10fa:	ldrb	r3, [r1, #0]
    10fc:	cmp	r3, #47	; 0x2f
    10fe:	beq.n	10f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    1100:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    1102:	cbz	r3, 115c <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    1104:	add	r0, sp, #24
    1106:	bl	804 <ExFatFile::openRoot(ExFatVolume*)>
    110a:	mov	r4, r0
    110c:	cbz	r0, 1166 <ExFatFile::open(ExFatFile*, char const*, int)+0x10e>
    110e:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    1110:	add	r5, sp, #24
    1112:	b.n	108e <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    1114:	movs	r0, #125	; 0x7d
    1116:	bl	6f4 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    111a:	movs	r4, #0
}
    111c:	mov	r0, r4
    111e:	add	sp, #84	; 0x54
    1120:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    1124:	movs	r0, #143	; 0x8f
    1126:	bl	6f4 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    112a:	mov	r0, r4
    112c:	add	sp, #84	; 0x54
    112e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1132:	ldrb.w	r3, [sp, #16]
    1136:	ldr	r2, [sp, #20]
    1138:	str.w	r9, [sp]
    113c:	mov	r1, r5
    113e:	mov	r0, r6
    1140:	bl	c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    1144:	mov	r4, r0
    1146:	mov	r0, r4
    1148:	add	sp, #84	; 0x54
    114a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    114e:	movs	r0, #150	; 0x96
    1150:	bl	6f4 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    1154:	mov	r0, r4
    1156:	add	sp, #84	; 0x54
    1158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    115c:	mov	r0, r6
    115e:	bl	804 <ExFatFile::openRoot(ExFatVolume*)>
    1162:	mov	r4, r0
    1164:	b.n	111c <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    1166:	movs	r0, #136	; 0x88
    1168:	bl	6f4 <dbgPrint(unsigned short)>
      goto fail;
    116c:	b.n	111c <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    116e:	nop

00001170 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    1170:	cbz	r1, 117a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    1172:	add.w	r1, r1, #1088	; 0x440
    1176:	b.w	1058 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    117a:	mov	r0, r1
    117c:	bx	lr
    117e:	nop

00001180 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    1180:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    1182:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    1186:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    1188:	cbnz	r3, 1194 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    118a:	ldrb.w	r5, [r1, #49]	; 0x31
    118e:	tst.w	r5, #80	; 0x50
    1192:	bne.n	11a0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    1194:	movs	r0, #176	; 0xb0
    1196:	bl	6f4 <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    119a:	movs	r0, #0
}
    119c:	add	sp, #12
    119e:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    11a0:	ldrd	r4, r5, [r1]
    11a4:	movs	r5, #0
    11a6:	and.w	r4, r4, #31
    11aa:	orrs	r4, r5
    11ac:	bne.n	1194 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    11ae:	str	r2, [sp, #0]
    11b0:	mov	r2, r3
    11b2:	bl	c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    11b6:	add	sp, #12
    11b8:	pop	{r4, r5, pc}
    11ba:	nop

000011bc <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    11bc:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    11be:	movs	r1, #10
    11c0:	mov	r5, r0
    11c2:	ldr	r0, [pc, #40]	; (11ec <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    11c4:	ldr	r4, [pc, #40]	; (11f0 <dbgPrint(unsigned short)+0x34>)
    11c6:	bl	8ff4 <usb_serial_write>
    11ca:	movs	r1, #18
    11cc:	ldr	r0, [pc, #36]	; (11f4 <dbgPrint(unsigned short)+0x38>)
    11ce:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    11d2:	movs	r0, #46	; 0x2e
    11d4:	bl	90fc <usb_serial_putchar>
    11d8:	mov	r1, r5
    11da:	mov	r0, r4
    11dc:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    11e0:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    11e2:	ldmia.w	sp!, {r3, r4, r5, lr}
    11e6:	b.w	a624 <Print::println()>
    11ea:	nop
    11ec:	.word	0x0000fd18
    11f0:	.word	0x1fff09c8
    11f4:	.word	0x0000fd34

000011f8 <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    11f8:	push	{r3, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    11fa:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    11fe:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    1200:	ldr	r0, [r0, #4]
    1202:	ldr	r1, [r4, #8]
    1204:	ldr	r3, [r0, #0]
    1206:	ldr	r3, [r3, #24]
    1208:	blx	r3
    120a:	mov	r5, r0
    120c:	cbz	r0, 121a <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    120e:	ldrb	r3, [r4, #0]
    1210:	bic.w	r3, r3, #1
    1214:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    1216:	mov	r0, r5
    1218:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    121a:	movs	r0, #64	; 0x40
    121c:	bl	11bc <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    1220:	mov	r0, r5
    1222:	pop	{r3, r4, r5, pc}

00001224 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    1224:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    1226:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    122a:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    122c:	str	r3, [r0, #8]
    122e:	bx	lr

00001230 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    1230:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    1234:	ldr	r4, [r0, #4]
    1236:	cmp	r4, #0
    1238:	beq.n	12b0 <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    123a:	ldr	r3, [r0, #8]
    123c:	cmp	r3, r1
    123e:	mov	r6, r0
    1240:	mov	r8, r1
    1242:	mov	r7, r2
    1244:	beq.n	1268 <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    1246:	ldrb	r3, [r0, #0]
    1248:	lsls	r2, r3, #31
    124a:	bmi.n	1278 <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    124c:	lsls	r3, r7, #30
    124e:	bpl.n	128e <FsCache::get(unsigned long, unsigned char)+0x5e>
    1250:	add.w	r5, r6, #12
    1254:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    1256:	and.w	r7, r7, #1
    125a:	orrs	r7, r3
    125c:	strb	r7, [r6, #0]
    125e:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    1260:	str.w	r8, [r6, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    1264:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1268:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    126c:	and.w	r7, r7, #1
    1270:	orrs	r7, r3
    1272:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    1274:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1278:	bl	11f8 <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    127c:	mov	r4, r0
    127e:	cmp	r0, #0
    1280:	bne.n	124c <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    1282:	movs	r0, #42	; 0x2a
    1284:	bl	11bc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    1288:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    128a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    128e:	ldr	r0, [r6, #4]
    1290:	ldr	r3, [r0, #0]
    1292:	add.w	r5, r6, #12
    1296:	ldr	r3, [r3, #8]
    1298:	mov	r2, r5
    129a:	mov	r1, r8
    129c:	blx	r3
    129e:	mov	r4, r0
    12a0:	cmp	r0, #0
    12a2:	bne.n	1254 <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    12a4:	movs	r0, #47	; 0x2f
    12a6:	bl	11bc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    12aa:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    12ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    12b0:	movs	r0, #37	; 0x25
    12b2:	bl	11bc <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    12b6:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    12b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000012bc <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    12bc:	ldrb	r3, [r0, #0]
    12be:	lsls	r3, r3, #31
    12c0:	bmi.n	12c6 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    12c2:	movs	r0, #1
    12c4:	bx	lr
    12c6:	b.w	11f8 <FsCache::sync() [clone .part.2]>
    12ca:	nop

000012cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    12cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12d0:	mov	r8, r0
    12d2:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    12d4:	mov	fp, r1
    12d6:	cmp	r1, #0
    12d8:	beq.n	1364 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    12da:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    12dc:	ldr.w	r3, [r8, #1064]	; 0x428
    12e0:	cmp	r7, r3
    12e2:	bcs.n	135c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    12e4:	and.w	r5, r7, #7
    12e8:	movs	r3, #1
    12ea:	lsl.w	r5, r3, r5
    12ee:	uxtb	r5, r5
    12f0:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    12f4:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    12f6:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    12f8:	ldr.w	r1, [r8, #1060]	; 0x424
    12fc:	movs	r2, #0
    12fe:	add.w	r1, r1, r4, lsr #12
    1302:	mov	r0, r8
    1304:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    1308:	cbz	r0, 133c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    130a:	ldrb.w	r1, [r0, sl]
    130e:	b.n	1326 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    1310:	cmp	r2, r9
    1312:	beq.n	136a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    1314:	cmp	r7, r4
    1316:	beq.n	133a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    1318:	ldr.w	r2, [r8, #1064]	; 0x428
    131c:	cmp	r4, r2
    131e:	bcs.n	1350 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    1320:	ands.w	r5, r3, #255	; 0xff
    1324:	beq.n	1340 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    1326:	adds	r4, #1
        if (!(mask & cache[i])) {
    1328:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    132a:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    132e:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    1332:	beq.n	1310 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    1334:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    1336:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    1338:	bne.n	1318 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    133a:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    133c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1340:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    1344:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    1348:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    134c:	bne.n	130a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    134e:	b.n	1354 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    1350:	movs	r6, #0
    1352:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    1354:	mov.w	sl, #0
    1358:	movs	r5, #1
    135a:	b.n	12f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    135c:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    135e:	mov	sl, r7
    1360:	movs	r5, #1
    1362:	b.n	12f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    1364:	ldr.w	r7, [r0, #1048]	; 0x418
    1368:	b.n	12dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    136a:	cmp.w	fp, #0
    136e:	bne.n	137a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    1370:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    1374:	it	eq
    1376:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    137a:	adds	r0, r6, #2
    137c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001380 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    1380:	push	{r3, r4, r5, r6, r7, lr}
    1382:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    1384:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    1386:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    138a:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    138e:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    1392:	str	r1, [r0, #4]
    1394:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    1398:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    139a:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    139c:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    13a0:	strb	r3, [r4, #0]
    13a2:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    13a6:	str	r6, [r4, #8]
    13a8:	str.w	r6, [r4, #532]	; 0x214
    13ac:	mov	r2, r3
    13ae:	mov	r1, r3
    13b0:	bl	1230 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    13b4:	cmp	r5, #4
    13b6:	bhi.n	1422 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    13b8:	mov	r6, r0
    13ba:	cbz	r0, 1422 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    13bc:	cbnz	r5, 13e0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    13be:	movs	r2, #5
    13c0:	ldr	r1, [pc, #200]	; (148c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x10c>)
    13c2:	adds	r0, r6, #3
    13c4:	bl	c9dc <strncmp>
    13c8:	mov	r7, r0
    13ca:	cmp	r0, #0
    13cc:	bne.n	1480 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    13ce:	ldrb.w	r3, [r6, #108]	; 0x6c
    13d2:	cmp	r3, #9
    13d4:	beq.n	142c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    13d6:	movs	r0, #112	; 0x70
    13d8:	bl	11bc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    13dc:	mov	r0, r7
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
    13de:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    13e0:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    13e2:	add.w	r3, r0, r3, lsl #4
    13e6:	ldrb.w	r2, [r3, #446]	; 0x1be
    13ea:	ands.w	r2, r2, #127	; 0x7f
    13ee:	beq.n	13fa <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x7a>
      DBG_FAIL_MACRO;
    13f0:	movs	r0, #95	; 0x5f
    13f2:	bl	11bc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    13f6:	movs	r0, #0
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    13f8:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    13fa:	ldrb.w	r3, [r3, #450]	; 0x1c2
    13fe:	cmp	r3, #0
    1400:	beq.n	13f0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    1402:	add.w	r5, r0, r5, lsl #4
    1406:	mov	r0, r7
    1408:	ldr.w	r5, [r5, #438]	; 0x1b6
    140c:	mov	r1, r5
    140e:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    1412:	mov	r6, r0
    1414:	cmp	r0, #0
    1416:	bne.n	13be <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
      DBG_FAIL_MACRO;
    1418:	movs	r0, #101	; 0x65
    141a:	bl	11bc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    141e:	mov	r0, r6
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    1420:	pop	{r3, r4, r5, r6, r7, pc}
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    1422:	movs	r0, #88	; 0x58
    1424:	bl	11bc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    1428:	movs	r0, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    goto fail;
    142a:	pop	{r3, r4, r5, r6, r7, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    142c:	ldr	r3, [r6, #80]	; 0x50
    142e:	add	r3, r5
    1430:	str.w	r3, [r4, #1052]	; 0x41c
    1434:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    1436:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    143a:	ldr	r3, [r6, #88]	; 0x58
    143c:	add	r5, r3
    143e:	str.w	r5, [r4, #1060]	; 0x424
    1442:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    1444:	str.w	r3, [r4, #1064]	; 0x428
    1448:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    144a:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    144e:	ldrb.w	r3, [r6, #109]	; 0x6d
    1452:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    1456:	movs	r6, #1
    1458:	adds	r3, #9
    145a:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    145e:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    1460:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    1464:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    1466:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    146a:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    146e:	mov	r0, r4
    1470:	mov	r2, r6
    1472:	bl	12cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    1476:	movs	r3, #64	; 0x40
    1478:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    147c:	mov	r0, r6

 fail:
  return false;
}
    147e:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    1480:	movs	r0, #107	; 0x6b
    1482:	bl	11bc <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    1486:	movs	r0, #0
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    goto fail;
    1488:	pop	{r3, r4, r5, r6, r7, pc}
    148a:	nop
    148c:	.word	0x0000fd48

00001490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    1490:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    1494:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    1496:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    1498:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    149c:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    149e:	adds	r2, r1, r2
    14a0:	cmp	r2, r0
    14a2:	bhi.n	1540 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb0>
    14a4:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    14a6:	ldr.w	r3, [r9, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    14aa:	cmp.w	sl, #0
    14ae:	bne.n	151a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    14b0:	cmp	r1, r3
      m_bitmapStart = start;
    14b2:	it	cc
    14b4:	strcc.w	r1, [r9, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    14b8:	and.w	r4, r1, #7
    14bc:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    14be:	ldr.w	r3, [r9, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    14c2:	lsl.w	r4, r2, r4
    14c6:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    14c8:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    14cc:	ubfx	fp, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    14d0:	movs	r2, #1
    14d2:	mov	r1, r8
    14d4:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    14d6:	add	r8, r2
    14d8:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    14dc:	mov	r6, r0
    14de:	cbz	r0, 154c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbc>
    14e0:	add.w	r7, r0, fp
    14e4:	add.w	r3, r0, #512	; 0x200
    14e8:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    14ec:	tst	r2, r4
    14ee:	ite	ne
    14f0:	movne	r6, #1
    14f2:	moveq	r6, #0
    14f4:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    14f6:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    14fa:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    14fe:	beq.n	152e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    1500:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    1502:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    1506:	beq.n	153a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    1508:	ands.w	r4, r4, #255	; 0xff
    150c:	bne.n	14ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    150e:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    1510:	mov	fp, r4
    1512:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    1516:	bne.n	14e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    1518:	b.n	14d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    151a:	cmp	r1, r3
    151c:	bhi.n	14b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    151e:	cmp	r2, r3
    1520:	bls.n	14b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    1522:	cmp	r2, r0
    1524:	it	cs
    1526:	movcs	r2, #0
    1528:	str.w	r2, [r9, #1048]	; 0x418
    152c:	b.n	14b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    152e:	movs	r0, #216	; 0xd8
    1530:	bl	11bc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    1534:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    1536:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    153a:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    153c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    1540:	movs	r0, #191	; 0xbf
    1542:	bl	11bc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    1546:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    1548:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    154c:	movs	r0, #210	; 0xd2
    154e:	bl	11bc <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    1552:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    1554:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    1558:	push	{r3, r4, r5, r6, r7, lr}
    155a:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    155c:	ldmia.w	r6, {r3, r5}
    1560:	ldr.w	r1, [r0, #1072]	; 0x430
    1564:	ldr.w	r4, [r0, #1060]	; 0x424
    1568:	ldrb.w	r7, [r0, #1085]	; 0x43d
    156c:	ands	r1, r5
    156e:	subs	r3, #2
    1570:	add.w	r1, r4, r1, lsr #9
    1574:	lsls	r3, r7
    1576:	add	r1, r3
    1578:	add.w	r0, r0, #524	; 0x20c
    157c:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    1580:	cbz	r0, 158a <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    1582:	ldr	r3, [r6, #4]
    1584:	ubfx	r3, r3, #0, #9
    1588:	add	r0, r3
}
    158a:	pop	{r3, r4, r5, r6, r7, pc}

0000158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    158c:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    158e:	ldr.w	r3, [r0, #1064]	; 0x428
    1592:	adds	r3, #1
    1594:	cmp	r3, r1
    1596:	bcs.n	15a4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    1598:	mov.w	r0, #276	; 0x114
    159c:	bl	11bc <dbgPrint(unsigned short)>
    return -1;
    15a0:	movs	r0, #255	; 0xff
    15a2:	pop	{r3, r4, r5, pc}
    15a4:	mov	r4, r1
    15a6:	ldr.w	r1, [r0, #1052]	; 0x41c
    15aa:	mov	r5, r2
    15ac:	add.w	r0, r0, #524	; 0x20c
    15b0:	add.w	r1, r1, r4, lsr #7
    15b4:	movs	r2, #0
    15b6:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    15ba:	cbz	r0, 15ce <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    15bc:	lsls	r4, r4, #2
    15be:	ubfx	r4, r4, #0, #9
    15c2:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    15c4:	adds	r2, r3, #1
    15c6:	beq.n	15d2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    15c8:	str	r3, [r5, #0]
  return 1;
    15ca:	movs	r0, #1
    15cc:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    15ce:	movs	r0, #255	; 0xff
    15d0:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    15d2:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    15d4:	pop	{r3, r4, r5, pc}
    15d6:	nop

000015d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    15d8:	push	{r4, r5, r6, lr}
    15da:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    15dc:	ldr	r1, [r1, #4]
    15de:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    15e2:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    15e4:	adds	r0, r1, r2
    15e6:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    15e8:	ldrb.w	r4, [r6, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    15ec:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    15ee:	adds	r4, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    15f0:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    15f2:	uxtb	r4, r4
    15f4:	lsr.w	r4, r2, r4
  while (tmp--) {
    15f8:	cbz	r4, 160a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    15fa:	ldrb	r3, [r5, #8]
    15fc:	cbz	r3, 160e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    15fe:	ldr	r3, [r5, #0]
    1600:	adds	r3, #1
    1602:	str	r3, [r5, #0]
    1604:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    1606:	cmp	r4, #0
    1608:	bne.n	15fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    160a:	movs	r0, #1
}
    160c:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    160e:	mov	r2, r5
    1610:	ldr	r1, [r5, #0]
    1612:	mov	r0, r6
    1614:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1618:	sxtb	r0, r0
      if (status != 1) {
    161a:	cmp	r0, #1
    161c:	beq.n	1604 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    161e:	pop	{r4, r5, r6, pc}

00001620 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1620:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    1622:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1624:	bls.n	1632 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    1626:	ldr.w	r3, [r0, #1064]	; 0x428
    162a:	adds	r3, #1
    162c:	cmp	r1, r3
    162e:	mov	r4, r1
    1630:	bls.n	163e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    1632:	mov.w	r0, #298	; 0x12a
    1636:	bl	11bc <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    163a:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    163c:	pop	{r4, r5, r6, pc}
    163e:	ldr.w	r1, [r0, #1052]	; 0x41c
    1642:	mov	r5, r2
    1644:	add.w	r0, r0, #524	; 0x20c
    1648:	add.w	r1, r1, r4, lsr #7
    164c:	movs	r2, #1
    164e:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    1652:	mov	r6, r0
    1654:	cbz	r0, 1662 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    1656:	lsls	r4, r4, #2
    1658:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    165c:	movs	r0, #1
    165e:	str	r5, [r6, r4]

 fail:
  return false;
}
    1660:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    1662:	mov.w	r0, #304	; 0x130
    1666:	bl	11bc <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    166a:	mov	r0, r6
    166c:	pop	{r4, r5, r6, pc}
    166e:	nop

00001670 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    1670:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1674:	mov	r4, r1
    1676:	sub	sp, #12
    1678:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    167a:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    167c:	mov	r1, r4
    167e:	add	r2, sp, #4
    1680:	mov	r0, r6
    1682:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    1686:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    1688:	sxtb	r5, r0
    if (status < 0) {
    168a:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    168c:	mov	r1, r4
    168e:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    1690:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    1694:	blt.n	16e8 <ExFatPartition::freeChain(unsigned long)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    1696:	bl	1620 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    169a:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    169e:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    16a0:	mov	r1, r8
    16a2:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    16a4:	cbz	r0, 16fc <ExFatPartition::freeChain(unsigned long)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    16a6:	ldr	r7, [sp, #4]
    16a8:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    16aa:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    16ac:	bne.n	16d6 <ExFatPartition::freeChain(unsigned long)+0x66>
    16ae:	cmp	r5, #0
    16b0:	bne.n	167c <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    16b2:	mov	r3, r5
    16b4:	rsb	r2, r8, r4
    16b8:	mov	r1, r8
    16ba:	mov	r0, r6
    16bc:	bl	1490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    16c0:	cbnz	r0, 16ce <ExFatPartition::freeChain(unsigned long)+0x5e>
        DBG_FAIL_MACRO;
    16c2:	mov.w	r0, #330	; 0x14a
    16c6:	bl	11bc <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    16ca:	mov.w	r9, #0
}
    16ce:	mov	r0, r9
    16d0:	add	sp, #12
    16d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    16d6:	bl	1490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    16da:	cmp	r0, #0
    16dc:	beq.n	16c2 <ExFatPartition::freeChain(unsigned long)+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    16de:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    16e0:	cmp	r5, #0
    16e2:	beq.n	16ce <ExFatPartition::freeChain(unsigned long)+0x5e>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    16e4:	mov	r8, r4
    16e6:	b.n	167c <ExFatPartition::freeChain(unsigned long)+0xc>
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    16e8:	movw	r0, #321	; 0x141
    16ec:	bl	11bc <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    16f0:	mov.w	r9, #0
}
    16f4:	mov	r0, r9
    16f6:	add	sp, #12
    16f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    16fc:	movw	r0, #325	; 0x145
    1700:	bl	11bc <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    1704:	mov	r0, r9
    1706:	add	sp, #12
    1708:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000170c <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    170c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    1710:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    1712:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    1716:	mov	r8, r0
    1718:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    171c:	mov	r5, r4
    171e:	mov	r1, r6
    1720:	movs	r2, #0
    1722:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    1724:	adds	r6, #1
    1726:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    172a:	cbz	r0, 177a <ExFatPartition::freeClusterCount()+0x6e>
    172c:	add.w	lr, r0, #4294967295
    1730:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    1734:	ldrb.w	r0, [lr, #1]!
    1738:	cmp	r0, #255	; 0xff
    173a:	add.w	r9, r5, #4096	; 0x1000
    173e:	beq.n	1768 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    1740:	cbz	r0, 1756 <ExFatPartition::freeClusterCount()+0x4a>
    1742:	movs	r2, #8
    1744:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    1746:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1748:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    174c:	it	ne
    174e:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1750:	subs	r2, #1
    1752:	uxtb	r3, r1
    1754:	bne.n	1746 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    1756:	adds	r5, #8
      if (nc >= m_clusterCount) {
    1758:	cmp	ip, r5
    175a:	bls.n	1772 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    175c:	cmp	r5, r9
    175e:	beq.n	171e <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    1760:	ldrb.w	r0, [lr, #1]!
    1764:	cmp	r0, #255	; 0xff
    1766:	bne.n	1740 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    1768:	adds	r5, #8
      if (nc >= m_clusterCount) {
    176a:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    176c:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    1770:	bhi.n	175c <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    1772:	rsb	r0, r4, ip
    1776:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    177a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    177e:	nop

00001780 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    1780:	push	{r4, r5, r6, lr}
    1782:	sub	sp, #8
    1784:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    1786:	ldr.w	r1, [r0, #1068]	; 0x42c
    178a:	str.w	r1, [r6, #-4]!
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    178e:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    1790:	movs	r4, #0
    1792:	b.n	179c <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    1794:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    1798:	beq.n	17ac <ExFatPartition::rootLength()+0x2c>
    179a:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    179c:	mov	r2, r6
    179e:	mov	r0, r5
    17a0:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    17a4:	sxtb	r0, r0
    if (status < 0) return 0;
    17a6:	cmp	r0, #0
    17a8:	bge.n	1794 <ExFatPartition::rootLength()+0x14>
    17aa:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    17ac:	ldrb.w	r0, [r5, #1085]	; 0x43d
    17b0:	adds	r0, #9
    17b2:	uxtb	r0, r0
}
    17b4:	lsl.w	r0, r4, r0
    17b8:	add	sp, #8
    17ba:	pop	{r4, r5, r6, pc}

000017bc <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    17bc:	cbz	r1, 17f2 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    17be:	push	{r4}
    17c0:	add	r1, r0
    17c2:	lsls	r3, r2, #15
    17c4:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    17c8:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    17cc:	sub.w	r4, r2, #97	; 0x61
    17d0:	cmp	r4, #25
      c -= 'a' - 'A';
    17d2:	itt	ls
    17d4:	subls	r2, #32
    17d6:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    17d8:	uxtah	r2, r2, r3
    17dc:	uxth	r2, r2
    17de:	lsls	r3, r2, #15
    17e0:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    17e4:	cmp	r1, r0
    17e6:	uxth	r2, r2
    17e8:	bne.n	17c2 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    17ea:	mov	r0, r2
    17ec:	ldr.w	r4, [sp], #4
    17f0:	bx	lr
    17f2:	mov	r0, r2
    17f4:	bx	lr
    17f6:	nop

000017f8 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    17f8:	cbz	r3, 184c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    17fa:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    17fc:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    17fe:	cmp	r4, #126	; 0x7e
    1800:	bhi.n	1840 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    1802:	add	r3, r2
    1804:	adds	r5, r1, r3
    1806:	add	r2, r1
    1808:	adds	r0, #2
    180a:	ldrb.w	r3, [r2], #1
    180e:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    1810:	sub.w	r1, r3, #97	; 0x61
    1814:	cmp	r1, #25
    1816:	sub.w	r1, r4, #97	; 0x61
    181a:	ite	ls
    181c:	movls	r6, #32
    181e:	movhi	r6, #0
    1820:	cmp	r1, #25
    1822:	ite	ls
    1824:	movls	r1, #32
    1826:	movhi	r1, #0
    1828:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    182a:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    182c:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    182e:	uxtb	r4, r4
    1830:	cmp	r4, r3
    1832:	bne.n	1840 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    1834:	cmp	r2, r5
    1836:	beq.n	1846 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    1838:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    183c:	cmp	r4, #126	; 0x7e
    183e:	bls.n	180a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    1840:	movs	r0, #0
    }
  }
  return true;
}
    1842:	pop	{r4, r5, r6}
    1844:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    1846:	movs	r0, #1
}
    1848:	pop	{r4, r5, r6}
    184a:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    184c:	movs	r0, #1
}
    184e:	bx	lr

00001850 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    1850:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1852:	movs	r1, #10
    1854:	mov	r5, r0
    1856:	ldr	r0, [pc, #40]	; (1880 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1858:	ldr	r4, [pc, #40]	; (1884 <dbgPrint(unsigned short)+0x34>)
    185a:	bl	8ff4 <usb_serial_write>
    185e:	movs	r1, #18
    1860:	ldr	r0, [pc, #36]	; (1888 <dbgPrint(unsigned short)+0x38>)
    1862:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1866:	movs	r0, #46	; 0x2e
    1868:	bl	90fc <usb_serial_putchar>
    186c:	mov	r1, r5
    186e:	mov	r0, r4
    1870:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1874:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    1876:	ldmia.w	sp!, {r3, r4, r5, lr}
    187a:	b.w	a624 <Print::println()>
    187e:	nop
    1880:	.word	0x0000fd18
    1884:	.word	0x1fff09c8
    1888:	.word	0x0000fd50

0000188c <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    188c:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    188e:	push	{r3, r4, r5, r6, r7, lr}
    1890:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    1892:	ldr	r0, [r0, #32]
    1894:	cbz	r1, 1898 <ExFatFile::addCluster()+0xc>
    1896:	adds	r1, #1
    1898:	movs	r2, #1
    189a:	bl	12cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    189e:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    18a0:	mov	r6, r0
  if (find < 2) {
    18a2:	bls.n	1928 <ExFatFile::addCluster()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    18a4:	movs	r3, #1
    18a6:	mov	r1, r0
    18a8:	mov	r2, r3
    18aa:	ldr	r0, [r4, #32]
    18ac:	bl	1490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    18b0:	mov	r7, r0
    18b2:	cmp	r0, #0
    18b4:	beq.n	1934 <ExFatFile::addCluster()+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    18b6:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    18b8:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    18bc:	cbnz	r0, 18cc <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    18be:	orr.w	r3, r3, #64	; 0x40
    18c2:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    18c6:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    18c8:	mov	r0, r7
    18ca:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    18cc:	lsls	r2, r3, #25
    18ce:	bpl.n	18fa <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    18d0:	adds	r2, r0, #1
    18d2:	cmp	r6, r2
    18d4:	beq.n	18c6 <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    18d6:	bic.w	r2, r3, #64	; 0x40
    18da:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    18de:	ldr	r3, [r4, #28]
    18e0:	b.n	18f0 <ExFatFile::addCluster()+0x64>
      if (!m_vol->fatPut(c, c + 1)) {
    18e2:	ldr	r0, [r4, #32]
    18e4:	bl	1620 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    18e8:	mov	r3, r0
    18ea:	cbz	r0, 193e <ExFatFile::addCluster()+0xb2>
    18ec:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    18ee:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    18f0:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    18f2:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    18f4:	mov	r1, r3
    18f6:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    18f8:	bcc.n	18e2 <ExFatFile::addCluster()+0x56>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    18fa:	mov.w	r2, #4294967295
    18fe:	mov	r1, r6
    1900:	ldr	r0, [r4, #32]
    1902:	bl	1620 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1906:	mov	r3, r0
    1908:	cbz	r0, 1948 <ExFatFile::addCluster()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    190a:	ldr	r1, [r4, #24]
    190c:	cmp	r1, #0
    190e:	beq.n	18c6 <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    1910:	mov	r2, r6
    1912:	ldr	r0, [r4, #32]
    1914:	bl	1620 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1918:	mov	r3, r0
    191a:	cmp	r0, #0
    191c:	bne.n	18c6 <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    191e:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    1920:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    1922:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    1926:	b.n	18c8 <ExFatFile::addCluster()+0x3c>
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    1928:	movs	r0, #77	; 0x4d
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    192a:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    192c:	bl	1850 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    1930:	mov	r0, r7
    1932:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    1934:	movs	r0, #81	; 0x51
    1936:	bl	1850 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    193a:	mov	r0, r7
    193c:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    193e:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    1940:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    1942:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    1946:	b.n	18c8 <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    1948:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    194a:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    194c:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
    1950:	b.n	18c8 <ExFatFile::addCluster()+0x3c>
    1952:	nop

00001954 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    1954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    1958:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    195c:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    195e:	ldmia.w	r3, {r0, r1, r2}
    1962:	ldrb.w	r7, [r5, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    1966:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    1968:	add	r6, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    196a:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    196e:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    1972:	cmp	r4, #0
    1974:	beq.n	1a50 <ExFatFile::remove()+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    1976:	ldr	r1, [r5, #28]
    1978:	cbnz	r1, 19c4 <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    197a:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    197c:	movs	r2, #1
    197e:	mov	r1, r6
    1980:	ldr	r0, [r5, #32]
    1982:	bl	1558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    1986:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    1988:	mov	r3, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    198a:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    198c:	cmp	r0, #0
    198e:	beq.n	1a3e <ExFatFile::remove()+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    1990:	ldrb	r2, [r3, #0]
    1992:	and.w	r2, r2, #127	; 0x7f
    1996:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    1998:	ldrb.w	r3, [r5, #48]	; 0x30
    199c:	cmp	r3, r4
    199e:	bcc.n	1a0e <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    19a0:	cmp	r4, #0
    19a2:	beq.n	197c <ExFatFile::remove()+0x28>
    19a4:	movs	r2, #32
    19a6:	mov	r1, r6
    19a8:	ldr	r0, [r5, #32]
    19aa:	bl	15d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    19ae:	cmp	r0, #1
    19b0:	beq.n	197c <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    19b2:	movw	r0, #287	; 0x11f
    19b6:	bl	1850 <dbgPrint(unsigned short)>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    19ba:	movs	r4, #0
}
    19bc:	mov	r0, r4
    19be:	add	sp, #20
    19c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    19c4:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    19c6:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    19c8:	bpl.n	1a66 <ExFatFile::remove()+0x112>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    19ca:	ldrd	r2, r3, [r5, #8]
    19ce:	ldrb.w	r4, [r0, #1085]	; 0x43d
    19d2:	adds	r4, #9
    19d4:	uxtb	r4, r4
    19d6:	adds.w	r8, r2, #4294967295
    19da:	adc.w	r9, r3, #4294967295
    19de:	rsb	r7, r4, #32
    19e2:	lsr.w	r2, r8, r4
    19e6:	sub.w	r3, r4, #32
    19ea:	lsl.w	r7, r9, r7
    19ee:	lsr.w	r3, r9, r3
    19f2:	orrs	r2, r7
    19f4:	orrs	r2, r3
    19f6:	adds	r2, #1
    19f8:	movs	r3, #0
    19fa:	bl	1490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    19fe:	mov	r4, r0
    1a00:	cmp	r0, #0
    1a02:	bne.n	197a <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    1a04:	mov.w	r0, #274	; 0x112
    1a08:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    1a0c:	b.n	19bc <ExFatFile::remove()+0x68>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    1a0e:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    1a10:	movs	r3, #0
    1a12:	mov	r0, r4
    1a14:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    1a18:	strb.w	r3, [r5, #51]	; 0x33
    1a1c:	bl	12bc <FsCache::sync()>
    1a20:	cmp	r0, #0
    1a22:	beq.n	19ba <ExFatFile::remove()+0x66>
    1a24:	add.w	r0, r4, #524	; 0x20c
    1a28:	bl	12bc <FsCache::sync()>
    1a2c:	cmp	r0, #0
    1a2e:	beq.n	19ba <ExFatFile::remove()+0x66>
    1a30:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1a34:	ldr	r3, [r0, #0]
    1a36:	ldr	r3, [r3, #20]
    1a38:	blx	r3
    1a3a:	mov	r4, r0
    1a3c:	b.n	19bc <ExFatFile::remove()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    1a3e:	mov.w	r0, #292	; 0x124

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    1a42:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    1a44:	bl	1850 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    1a48:	mov	r0, r4
    1a4a:	add	sp, #20
    1a4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1a50:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    1a54:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    1a58:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    1a5a:	bl	1850 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    1a5e:	mov	r0, r4
    1a60:	add	sp, #20
    1a62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    1a66:	bl	1670 <ExFatPartition::freeChain(unsigned long)>
    1a6a:	mov	r4, r0
    1a6c:	cmp	r0, #0
    1a6e:	bne.n	197a <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    1a70:	movw	r0, #279	; 0x117
    1a74:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    1a78:	b.n	19bc <ExFatFile::remove()+0x68>
    1a7a:	nop

00001a7c <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    1a7c:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    1a7e:	ldrb.w	r3, [r0, #49]	; 0x31
    1a82:	and.w	r3, r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    1a86:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    1a88:	cbz	r3, 1ace <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    1a8a:	movs	r2, #0
    1a8c:	movs	r3, #0
    1a8e:	mov	r4, r0
    1a90:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    1a94:	b.n	1aa4 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    1a96:	cmp	r0, #32
    1a98:	bne.n	1ae0 <ExFatFile::rmdir()+0x64>
    1a9a:	ldrb.w	r3, [sp]
    1a9e:	lsls	r2, r3, #24
    1aa0:	bmi.n	1ae0 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    1aa2:	cbz	r3, 1ab2 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    1aa4:	movs	r2, #32
    1aa6:	mov	r1, sp
    1aa8:	mov	r0, r4
    1aaa:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1aae:	cmp	r0, #0
    1ab0:	bne.n	1a96 <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    1ab2:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    1ab6:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    1ab8:	orr.w	r3, r3, #2
    1abc:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    1ac0:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    1ac4:	mov	r0, r4
    1ac6:	bl	1954 <ExFatFile::remove()>

fail:
  return false;
}
    1aca:	add	sp, #36	; 0x24
    1acc:	pop	{r4, r5, pc}
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    1ace:	mov.w	r0, #354	; 0x162
    1ad2:	and.w	r5, r3, #255	; 0xff
    1ad6:	bl	1850 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    1ada:	mov	r0, r5
}
    1adc:	add	sp, #36	; 0x24
    1ade:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    1ae0:	mov.w	r0, #366	; 0x16e
    1ae4:	bl	1850 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    1ae8:	movs	r0, #0
}
    1aea:	add	sp, #36	; 0x24
    1aec:	pop	{r4, r5, pc}
    1aee:	nop

00001af0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    1af0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    1af4:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    1af8:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    1afa:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    1afe:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    1b00:	add.w	r8, sp, #12
    1b04:	stmia.w	r8, {r0, r1, r2}
    1b08:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    1b0a:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    1b0c:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    1b0e:	movs	r2, #0
    1b10:	mov	r1, r8
    1b12:	ldr	r0, [r6, #32]
    1b14:	bl	1558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    1b18:	uxtb.w	r9, r7
    if (!cache) {
    1b1c:	mov	r5, r0
    1b1e:	cmp	r0, #0
    1b20:	beq.n	1c1a <ExFatFile::syncDir()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    1b22:	ldrb	r2, [r0, #0]
    1b24:	cmp	r2, #192	; 0xc0
    1b26:	beq.n	1b94 <ExFatFile::syncDir()+0xa4>
    1b28:	cmp	r2, #193	; 0xc1
    1b2a:	beq.n	1b4c <ExFatFile::syncDir()+0x5c>
    1b2c:	cmp	r2, #133	; 0x85
    1b2e:	beq.n	1bd0 <ExFatFile::syncDir()+0xe0>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    1b30:	mov.w	r0, #452	; 0x1c4
    1b34:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    1b38:	ldrb.w	r3, [r6, #50]	; 0x32
    1b3c:	orr.w	r3, r3, #1
    1b40:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    1b44:	movs	r0, #0
}
    1b46:	add	sp, #28
    1b48:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b4c:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1b4e:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1b50:	ldrb	r2, [r5, r1]
    1b52:	lsls	r3, r4, #15
    1b54:	orr.w	r4, r3, r4, lsr #1
    1b58:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1b5c:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1b5e:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1b60:	add.w	r1, r1, #1
    1b64:	beq.n	1b8a <ExFatFile::syncDir()+0x9a>
    1b66:	cmp	r1, #31
    1b68:	bls.n	1b50 <ExFatFile::syncDir()+0x60>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    1b6a:	cmp	sl, r9
    1b6c:	beq.n	1c24 <ExFatFile::syncDir()+0x134>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    1b6e:	movs	r2, #32
    1b70:	mov	r1, r8
    1b72:	ldr	r0, [r6, #32]
    1b74:	bl	15d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1b78:	cmp	r0, #1
    1b7a:	add.w	r7, r7, #1
    1b7e:	beq.n	1b0e <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    1b80:	movw	r0, #459	; 0x1cb
    1b84:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    1b88:	b.n	1b38 <ExFatFile::syncDir()+0x48>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1b8a:	cmp	r0, #133	; 0x85
    1b8c:	ite	eq
    1b8e:	moveq	r1, #4
    1b90:	movne	r1, #2
    1b92:	b.n	1b50 <ExFatFile::syncDir()+0x60>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    1b94:	ldrb.w	r3, [r6, #51]	; 0x33
    1b98:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    1b9c:	ldrb	r3, [r0, #1]
    1b9e:	ite	ne
    1ba0:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    1ba4:	biceq.w	r3, r3, #2
    1ba8:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    1baa:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    1bae:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    1bb2:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    1bb6:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    1bb8:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    1bba:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    1bbe:	ldr	r2, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    1bc0:	ldrb.w	r3, [r2, #524]	; 0x20c
    1bc4:	orr.w	r3, r3, #1
    1bc8:	strb.w	r3, [r2, #524]	; 0x20c
    1bcc:	ldrb	r0, [r0, #0]
    1bce:	b.n	1b4e <ExFatFile::syncDir()+0x5e>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    1bd0:	ldr	r3, [pc, #152]	; (1c6c <ExFatFile::syncDir()+0x17c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    1bd2:	ldrb.w	r1, [r6, #49]	; 0x31
    1bd6:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    1bd8:	ldrb.w	sl, [r0, #1]
    1bdc:	and.w	r1, r1, #55	; 0x37
    1be0:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    1be2:	cmp	r3, #0
    1be4:	beq.n	1b4c <ExFatFile::syncDir()+0x5c>
          m_vol->dataCacheDirty();
    1be6:	ldr	r1, [r6, #32]
    1be8:	ldrb.w	r2, [r1, #524]	; 0x20c
    1bec:	orr.w	r2, r2, #1
    1bf0:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    1bf4:	add	r0, sp, #8
    1bf6:	add.w	r2, sp, #7
    1bfa:	add.w	r1, sp, #10
    1bfe:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    1c00:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    1c04:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    1c08:	ldrb.w	r1, [sp, #7]
    1c0c:	strb	r1, [r5, #21]
    1c0e:	strh	r2, [r5, #12]
    1c10:	strh	r2, [r5, #16]
    1c12:	strh	r3, [r5, #14]
    1c14:	strh	r3, [r5, #18]
    1c16:	ldrb	r0, [r5, #0]
    1c18:	b.n	1b4e <ExFatFile::syncDir()+0x5e>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    1c1a:	mov.w	r0, #414	; 0x19e
    1c1e:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    1c22:	b.n	1b38 <ExFatFile::syncDir()+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    1c24:	mov	r1, fp
    1c26:	movs	r2, #1
    1c28:	ldr	r0, [r6, #32]
    1c2a:	bl	1558 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    1c2e:	cbz	r0, 1c46 <ExFatFile::syncDir()+0x156>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    1c30:	ldr	r5, [r6, #32]
    1c32:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1c34:	mov	r0, r5
    1c36:	bl	12bc <FsCache::sync()>
    1c3a:	cbnz	r0, 1c50 <ExFatFile::syncDir()+0x160>
    DBG_FAIL_MACRO;
    1c3c:	movw	r0, #471	; 0x1d7
    1c40:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
    1c44:	b.n	1b38 <ExFatFile::syncDir()+0x48>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    1c46:	mov.w	r0, #466	; 0x1d2
    1c4a:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
    1c4e:	b.n	1b38 <ExFatFile::syncDir()+0x48>
    1c50:	add.w	r0, r5, #524	; 0x20c
    1c54:	bl	12bc <FsCache::sync()>
    1c58:	cmp	r0, #0
    1c5a:	beq.n	1c3c <ExFatFile::syncDir()+0x14c>
    1c5c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1c60:	ldr	r3, [r0, #0]
    1c62:	ldr	r3, [r3, #20]
    1c64:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1c66:	cmp	r0, #0
    1c68:	beq.n	1c3c <ExFatFile::syncDir()+0x14c>
    1c6a:	b.n	1b46 <ExFatFile::syncDir()+0x56>
    1c6c:	.word	0x1fff15ac

00001c70 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    1c70:	ldrb.w	r2, [r0, #49]	; 0x31
    1c74:	cbz	r2, 1ca4 <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    1c76:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1c78:	ldrb.w	r2, [r0, #51]	; 0x33
    1c7c:	lsls	r1, r2, #24
    1c7e:	bmi.n	1ca8 <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    1c80:	ldr	r5, [r0, #32]
    1c82:	mov	r4, r0
    1c84:	mov	r0, r5
    1c86:	bl	12bc <FsCache::sync()>
    1c8a:	cbnz	r0, 1cb8 <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    1c8c:	mov.w	r0, #392	; 0x188
    1c90:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    1c94:	ldrb.w	r3, [r4, #50]	; 0x32
    1c98:	orr.w	r3, r3, #1
    1c9c:	strb.w	r3, [r4, #50]	; 0x32
    1ca0:	movs	r0, #0
  return false;
}
    1ca2:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    1ca4:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    1ca6:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    1ca8:	and.w	r2, r2, #127	; 0x7f
    1cac:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    1cb0:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    1cb4:	b.w	1af0 <ExFatFile::syncDir()>
    1cb8:	add.w	r0, r5, #524	; 0x20c
    1cbc:	bl	12bc <FsCache::sync()>
    1cc0:	cmp	r0, #0
    1cc2:	beq.n	1c8c <ExFatFile::sync()+0x1c>
    1cc4:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1cc8:	ldr	r3, [r0, #0]
    1cca:	ldr	r3, [r3, #20]
    1ccc:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1cce:	cmp	r0, #0
    1cd0:	beq.n	1c8c <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    1cd2:	movs	r0, #1
    1cd4:	pop	{r3, r4, r5, pc}
    1cd6:	nop

00001cd8 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    1cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    1cdc:	ldrb.w	r3, [r0, #49]	; 0x31
    1ce0:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    1ce2:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    1ce4:	bmi.n	1d94 <ExFatFile::addDirCluster()+0xbc>
    1ce6:	ldr	r0, [r0, #8]
    1ce8:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    1cec:	ldr.w	r3, [r3, #1076]	; 0x434
    1cf0:	add	r0, r3
    1cf2:	cmp.w	r0, #67108864	; 0x4000000
    1cf6:	bcs.n	1d88 <ExFatFile::addDirCluster()+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    1cf8:	mov	r0, r8
    1cfa:	bl	188c <ExFatFile::addCluster()>
    1cfe:	cmp	r0, #0
    1d00:	beq.n	1d7c <ExFatFile::addDirCluster()+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    1d02:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    1d06:	ldrb.w	r3, [r5, #524]	; 0x20c
    1d0a:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    1d0c:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    1d10:	bmi.n	1dda <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    1d12:	mov	r0, r4
    return m_cacheBuffer;
    1d14:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    1d18:	bl	1224 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    1d1c:	mov.w	r2, #512	; 0x200
    1d20:	movs	r1, #0
    1d22:	mov	r0, r5
    1d24:	bl	c34c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    1d28:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1d2c:	ldr.w	r3, [r8, #24]
    1d30:	ldrb.w	r1, [r2, #1085]	; 0x43d
    1d34:	ldr.w	r7, [r2, #1060]	; 0x424
    1d38:	subs	r3, #2
    1d3a:	lsls	r3, r1
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    1d3c:	movs	r6, #1
    1d3e:	add	r7, r3
    1d40:	lsls.w	r3, r6, r1
    1d44:	it	ne
    1d46:	movne	r4, #0
    1d48:	bne.n	1d5c <ExFatFile::addDirCluster()+0x84>
    1d4a:	b.n	1d9c <ExFatFile::addDirCluster()+0xc4>
    1d4c:	ldr.w	r2, [r8, #32]
    1d50:	ldrb.w	r3, [r2, #1085]	; 0x43d
    1d54:	lsl.w	r3, r6, r3
    1d58:	cmp	r3, r4
    1d5a:	bls.n	1d9c <ExFatFile::addDirCluster()+0xc4>
    1d5c:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    1d60:	ldr	r3, [r0, #0]
    1d62:	adds	r1, r7, r4
    1d64:	ldr	r3, [r3, #24]
    1d66:	mov	r2, r5
    1d68:	blx	r3
    1d6a:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    1d6c:	cmp	r0, #0
    1d6e:	bne.n	1d4c <ExFatFile::addDirCluster()+0x74>
      DBG_FAIL_MACRO;
    1d70:	movs	r0, #145	; 0x91
    1d72:	bl	1850 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    1d76:	movs	r0, #0
    1d78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    1d7c:	movs	r0, #133	; 0x85
    1d7e:	bl	1850 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    1d82:	movs	r0, #0
    1d84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    1d88:	movs	r0, #129	; 0x81
    1d8a:	bl	1850 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    1d8e:	movs	r0, #0
    1d90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    1d94:	ldr	r0, [r0, #32]
    1d96:	bl	1780 <ExFatPartition::rootLength()>
    1d9a:	b.n	1ce8 <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    1d9c:	ldrb.w	r3, [r8, #49]	; 0x31
    1da0:	lsls	r3, r3, #25
    1da2:	bmi.n	1dd0 <ExFatFile::addDirCluster()+0xf8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1da4:	ldrb.w	r3, [r8, #51]	; 0x33
    1da8:	orn	r3, r3, #127	; 0x7f
    1dac:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    1db0:	ldr.w	r4, [r2, #1076]	; 0x434
    1db4:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    1db8:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1dbc:	adds	r2, r2, r4
    1dbe:	mov.w	r5, #0
    1dc2:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    1dc4:	adds	r0, r0, r4
    1dc6:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1dc8:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    1dcc:	strd	r0, r1, [r8, #16]
  }
  return sync();
    1dd0:	mov	r0, r8

 fail:
  return false;
}
    1dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    1dd6:	b.w	1c70 <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    1dda:	mov	r0, r4
    1ddc:	bl	12bc <FsCache::sync()>
    1de0:	cmp	r0, #0
    1de2:	bne.n	1d12 <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    1de4:	movs	r0, #138	; 0x8a
    1de6:	bl	1850 <dbgPrint(unsigned short)>
    1dea:	b.n	1d82 <ExFatFile::addDirCluster()+0xaa>

00001dec <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    1dec:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    1dee:	ldrb.w	r3, [r1, #49]	; 0x31
    1df2:	tst.w	r3, #80	; 0x50

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    1df6:	sub	sp, #12
  if (!parent->isDir()) {
    1df8:	beq.n	1e46 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    1dfa:	movw	r5, #2562	; 0xa02
    1dfe:	ldrb	r3, [r2, #0]
    1e00:	ldr	r2, [r2, #4]
    1e02:	str	r5, [sp, #0]
    1e04:	mov	r4, r0
    1e06:	bl	c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    1e0a:	cbz	r0, 1e3a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    1e0c:	movs	r3, #16
    1e0e:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1e12:	mov	r0, r4
    1e14:	bl	1cd8 <ExFatFile::addDirCluster()>
    1e18:	cbz	r0, 1e52 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    1e1a:	ldr	r3, [r4, #24]
    1e1c:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    1e1e:	movs	r2, #0
    1e20:	movs	r3, #0
    1e22:	mov	r0, r4
    1e24:	bl	b0c <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    1e28:	movs	r3, #193	; 0xc1
  return sync();
    1e2a:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    1e2c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    1e30:	add	sp, #12
    1e32:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    1e36:	b.w	1c70 <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    1e3a:	movs	r0, #209	; 0xd1
    1e3c:	bl	1850 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    1e40:	movs	r0, #0
    1e42:	add	sp, #12
    1e44:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    1e46:	movs	r0, #204	; 0xcc
    1e48:	bl	1850 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    1e4c:	movs	r0, #0
    1e4e:	add	sp, #12
    1e50:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    1e52:	movs	r0, #218	; 0xda
    1e54:	bl	1850 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    1e58:	movs	r0, #0
    1e5a:	add	sp, #12
    1e5c:	pop	{r4, r5, pc}
    1e5e:	nop

00001e60 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    1e60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e64:	mov	r6, r0
    1e66:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    1e68:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    1e6c:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1e6e:	movs	r0, #0
    1e70:	strb.w	r0, [sp, #73]	; 0x49
    1e74:	strb.w	r0, [sp, #74]	; 0x4a
    1e78:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    1e7c:	cmp	r4, #0
    1e7e:	bne.n	1efa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    1e80:	mov	r9, r3
    1e82:	ldrb.w	r3, [r1, #49]	; 0x31
    1e86:	tst.w	r3, #80	; 0x50
    1e8a:	mov	r5, r1
    1e8c:	beq.n	1efa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    1e8e:	ldrb	r3, [r2, #0]
    1e90:	cmp	r3, #47	; 0x2f
    1e92:	mov	r1, r2
    1e94:	beq.n	1edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    1e96:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    1e9a:	add	r3, sp, #12
    1e9c:	add	r2, sp, #16
    1e9e:	mov	r0, r6
    1ea0:	bl	834 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    1ea4:	mov	r4, r0
    1ea6:	cmp	r0, #0
    1ea8:	beq.n	1f44 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    1eaa:	ldr	r3, [sp, #12]
    1eac:	ldrb	r3, [r3, #0]
    1eae:	cmp	r3, #0
    1eb0:	beq.n	1f52 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf2>
    1eb2:	ldrb.w	r3, [sp, #16]
    1eb6:	ldr	r2, [sp, #20]
    1eb8:	str.w	r8, [sp]
    1ebc:	mov	r1, r5
    1ebe:	mov	r0, r6
    1ec0:	bl	c28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    1ec4:	mov	r4, r0
    1ec6:	cbnz	r0, 1f18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    1ec8:	cmp.w	r9, #0
    1ecc:	bne.n	1f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    1ece:	movs	r0, #188	; 0xbc
    1ed0:	bl	1850 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    1ed4:	mov	r0, r4
    1ed6:	add	sp, #84	; 0x54
    1ed8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    1edc:	adds	r1, #1
    1ede:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    1ee0:	ldrb	r3, [r1, #0]
    1ee2:	cmp	r3, #47	; 0x2f
    1ee4:	beq.n	1edc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    1ee6:	ldr	r1, [r5, #32]
    1ee8:	add	r0, sp, #24
    1eea:	bl	804 <ExFatFile::openRoot(ExFatVolume*)>
    1eee:	mov	r4, r0
    1ef0:	cmp	r0, #0
    1ef2:	beq.n	1f60 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x100>
    1ef4:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    1ef6:	add	r5, sp, #24
    1ef8:	b.n	1e96 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    1efa:	movs	r0, #165	; 0xa5
    1efc:	bl	1850 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    1f00:	movs	r4, #0
}
    1f02:	mov	r0, r4
    1f04:	add	sp, #84	; 0x54
    1f06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    1f0a:	mov	r1, r5
    1f0c:	add	r2, sp, #16
    1f0e:	mov	r0, r6
    1f10:	bl	1dec <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    1f14:	cmp	r0, #0
    1f16:	beq.n	1ece <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    1f18:	mov	r4, r6
    1f1a:	add	r7, sp, #24
    1f1c:	add.w	lr, r6, #48	; 0x30
    1f20:	ldr	r0, [r4, #0]
    1f22:	ldr	r1, [r4, #4]
    1f24:	ldr	r2, [r4, #8]
    1f26:	ldr	r3, [r4, #12]
    1f28:	mov	r5, r7
    1f2a:	stmia	r5!, {r0, r1, r2, r3}
    1f2c:	adds	r4, #16
    1f2e:	cmp	r4, lr
    1f30:	mov	r7, r5
    1f32:	bne.n	1f20 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    1f34:	ldr	r0, [r4, #0]
    1f36:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    1f38:	mov	r0, r6
    1f3a:	bl	730 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    1f3e:	add	r5, sp, #24
    1f40:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    1f42:	b.n	1e9a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    1f44:	movs	r0, #180	; 0xb4
    1f46:	bl	1850 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    1f4a:	mov	r0, r4
    1f4c:	add	sp, #84	; 0x54
    1f4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    1f52:	add	r2, sp, #16
    1f54:	mov	r1, r5
    1f56:	mov	r0, r6
    1f58:	bl	1dec <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    1f5c:	mov	r4, r0
    1f5e:	b.n	1ed4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    1f60:	movs	r0, #173	; 0xad
    1f62:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    1f66:	b.n	1ed4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>

00001f68 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    1f68:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    1f6a:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    1f6e:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1f70:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    1f72:	ands.w	r4, r4, #24
    1f76:	strb.w	r3, [sp, #49]	; 0x31
    1f7a:	strb.w	r3, [sp, #50]	; 0x32
    1f7e:	strb.w	r3, [sp, #51]	; 0x33
    1f82:	strb.w	r3, [sp, #105]	; 0x69
    1f86:	strb.w	r3, [sp, #106]	; 0x6a
    1f8a:	strb.w	r3, [sp, #107]	; 0x6b
    1f8e:	bne.n	1f9e <ExFatFile::rename(ExFatFile*, char const*)+0x36>
    DBG_FAIL_MACRO;
    1f90:	movw	r0, #319	; 0x13f
    1f94:	bl	1850 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    1f98:	mov	r0, r4
    1f9a:	add	sp, #116	; 0x74
    1f9c:	pop	{r4, r5, r6, r7, pc}
    1f9e:	mov	r5, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    1fa0:	ldr	r0, [r1, #32]
    1fa2:	ldr	r4, [r5, #32]
    1fa4:	cmp	r4, r0
    1fa6:	beq.n	1fb8 <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    DBG_FAIL_MACRO;
    1fa8:	mov.w	r0, #324	; 0x144
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    1fac:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    1fae:	bl	1850 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    1fb2:	mov	r0, r4
    1fb4:	add	sp, #116	; 0x74
    1fb6:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    1fb8:	movw	r3, #2561	; 0xa01
    1fbc:	mov	r0, sp
    1fbe:	bl	1058 <ExFatFile::open(ExFatFile*, char const*, int)>
    1fc2:	mov	r4, r0
    1fc4:	cbz	r0, 202c <ExFatFile::rename(ExFatFile*, char const*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    1fc6:	add	r7, sp, #56	; 0x38
    1fc8:	mov	r4, r5
    1fca:	add.w	lr, r5, #48	; 0x30
    1fce:	ldr	r0, [r4, #0]
    1fd0:	ldr	r1, [r4, #4]
    1fd2:	ldr	r2, [r4, #8]
    1fd4:	ldr	r3, [r4, #12]
    1fd6:	mov	r6, r7
    1fd8:	stmia	r6!, {r0, r1, r2, r3}
    1fda:	adds	r4, #16
    1fdc:	cmp	r4, lr
    1fde:	mov	r7, r6
    1fe0:	bne.n	1fce <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    1fe2:	ldr	r0, [r4, #0]
    1fe4:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    1fe6:	add	r3, sp, #36	; 0x24
    1fe8:	ldmia.w	r3, {r0, r1, r2}
    1fec:	add.w	r3, r5, #36	; 0x24
    1ff0:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1ff4:	ldrb.w	r3, [r5, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    1ff8:	ldrb.w	r2, [sp, #48]	; 0x30
    1ffc:	strb.w	r2, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    2000:	orn	r3, r3, #127	; 0x7f
    2004:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    2008:	mov	r0, r5
    200a:	bl	1c70 <ExFatFile::sync()>
    200e:	mov	r4, r0
    2010:	cbz	r0, 2036 <ExFatFile::rename(ExFatFile*, char const*)+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    2012:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    2014:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    2016:	movs	r3, #8
  return oldFile.remove();
    2018:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    201a:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    201c:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    2020:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    2024:	bl	1954 <ExFatFile::remove()>
    2028:	mov	r4, r0
    202a:	b.n	1f98 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    202c:	mov.w	r0, #328	; 0x148
    2030:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
    2034:	b.n	1f98 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    2036:	mov.w	r0, #336	; 0x150
    203a:	bl	1850 <dbgPrint(unsigned short)>
    goto fail;
    203e:	b.n	1f98 <ExFatFile::rename(ExFatFile*, char const*)+0x30>

00002040 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    2040:	push	{r4, r5, r6, r7, lr}
    2042:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    2046:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    204a:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    204c:	cmp	r2, #0
    204e:	beq.n	20fa <ExFatFile::truncate()+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    2050:	ldr	r1, [r0, #28]
    2052:	mov	r4, r0
    2054:	cbz	r1, 20b8 <ExFatFile::truncate()+0x78>
      return true;
  }
  if (isContiguous()) {
    2056:	and.w	r3, r3, #64	; 0x40
    205a:	and.w	r5, r3, #255	; 0xff
    205e:	cbz	r3, 20c0 <ExFatFile::truncate()+0x80>
    2060:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    2062:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    2064:	ldrb.w	r3, [r0, #1085]	; 0x43d
    2068:	ldrd	r6, r7, [r4, #8]
    206c:	adds	r3, #9
    206e:	uxtb	r3, r3
    2070:	adds.w	r6, r6, #4294967295
    2074:	rsb	lr, r3, #32
    2078:	adc.w	r7, r7, #4294967295
    207c:	lsr.w	r2, r6, r3
    2080:	lsl.w	lr, r7, lr
    2084:	subs	r3, #32
    2086:	orr.w	r2, r2, lr
    208a:	lsr.w	r3, r7, r3
    208e:	orrs	r2, r3
    2090:	adds	r2, #1
    if (m_curCluster) {
    2092:	cmp	r5, #0
    2094:	beq.n	210c <ExFatFile::truncate()+0xcc>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    2096:	subs	r1, #1
    2098:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    209a:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    209c:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    209e:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    20a0:	cbz	r2, 20d4 <ExFatFile::truncate()+0x94>
    20a2:	movs	r3, #0
    20a4:	ldr	r1, [sp, #4]
    20a6:	bl	1490 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    20aa:	mov	r5, r0
    20ac:	cbnz	r0, 20d4 <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
    20ae:	movw	r0, #599	; 0x257
    20b2:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    20b6:	b.n	20ba <ExFatFile::truncate()+0x7a>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    20b8:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    20ba:	mov	r0, r5
    20bc:	add	sp, #12
    20be:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    20c0:	ldr	r3, [r0, #24]
    20c2:	cbnz	r3, 2112 <ExFatFile::truncate()+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    20c4:	str	r1, [sp, #4]
      m_firstCluster = 0;
    20c6:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    20c8:	ldr	r0, [r4, #32]
    20ca:	bl	1670 <ExFatPartition::freeChain(unsigned long)>
    20ce:	mov	r5, r0
    20d0:	cmp	r0, #0
    20d2:	beq.n	214c <ExFatFile::truncate()+0x10c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    20d4:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    20d8:	ldrb.w	r3, [r4, #51]	; 0x33
    20dc:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    20e0:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    20e4:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    20e8:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    20ec:	mov	r0, r4
    20ee:	bl	1c70 <ExFatFile::sync()>
    20f2:	mov	r5, r0

 fail:
  return false;
}
    20f4:	mov	r0, r5
    20f6:	add	sp, #12
    20f8:	pop	{r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    20fa:	movw	r0, #583	; 0x247
    20fe:	and.w	r5, r2, #255	; 0xff
    2102:	bl	1850 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    2106:	mov	r0, r5
    2108:	add	sp, #12
    210a:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    210c:	str	r1, [sp, #4]
      m_firstCluster = 0;
    210e:	str	r5, [r4, #28]
    2110:	b.n	20a0 <ExFatFile::truncate()+0x60>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    2112:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    2114:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    2116:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    211a:	ldr	r0, [r0, #32]
    211c:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    2120:	sxtb	r0, r0
      if (fg < 0) {
    2122:	cmp	r0, #0
    2124:	blt.n	2156 <ExFatFile::truncate()+0x116>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    2126:	bne.n	2130 <ExFatFile::truncate()+0xf0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    2128:	ldr	r1, [sp, #4]
    212a:	cmp	r1, #0
    212c:	beq.n	20d4 <ExFatFile::truncate()+0x94>
    212e:	b.n	20c8 <ExFatFile::truncate()+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    2130:	mov.w	r2, #4294967295
    2134:	ldr	r1, [r4, #24]
    2136:	ldr	r0, [r4, #32]
    2138:	bl	1620 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    213c:	mov	r5, r0
    213e:	cmp	r0, #0
    2140:	bne.n	2128 <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
    2142:	movw	r0, #614	; 0x266
    2146:	bl	1850 <dbgPrint(unsigned short)>
          goto fail;
    214a:	b.n	20ba <ExFatFile::truncate()+0x7a>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    214c:	mov.w	r0, #624	; 0x270
    2150:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    2154:	b.n	20ba <ExFatFile::truncate()+0x7a>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    2156:	mov.w	r0, #608	; 0x260
    215a:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    215e:	b.n	20ba <ExFatFile::truncate()+0x7a>

00002160 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    2160:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2164:	ldrb.w	r3, [r0, #51]	; 0x33
    2168:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    216a:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    216c:	mov	r6, r0
    216e:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    2170:	bpl.w	23ba <ExFatFile::write(void const*, unsigned int)+0x25a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    2174:	lsls	r2, r3, #28
    2176:	mov	sl, r1
    2178:	bmi.w	23e8 <ExFatFile::write(void const*, unsigned int)+0x288>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    217c:	ldr	r3, [sp, #4]
    217e:	cmp	r3, #0
    2180:	beq.w	2436 <ExFatFile::write(void const*, unsigned int)+0x2d6>
    2184:	mov	r1, r6
    2186:	ldrd	r2, r3, [r1], #24
    218a:	ldr.w	r8, [sp, #4]
    218e:	str	r1, [sp, #12]
    2190:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2192:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    2194:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    2196:	ldr.w	r4, [r0, #1072]	; 0x430
    219a:	mov	r3, fp
    219c:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    219e:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    21a2:	cbnz	r4, 21fa <ExFatFile::write(void const*, unsigned int)+0x9a>
      // start of new cluster
      if (m_curCluster != 0) {
    21a4:	cmp	r5, #0
    21a6:	beq.w	234c <ExFatFile::write(void const*, unsigned int)+0x1ec>
        int fg;

        if (isContiguous()) {
    21aa:	ldrb.w	r3, [r6, #51]	; 0x33
    21ae:	lsls	r3, r3, #25
    21b0:	bpl.w	237e <ExFatFile::write(void const*, unsigned int)+0x21e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    21b4:	ldrd	r2, r3, [r6, #8]
    21b8:	ldrb.w	r7, [r0, #1085]	; 0x43d
    21bc:	adds	r7, #9
    21be:	uxtb	r7, r7
    21c0:	adds.w	r2, r2, #4294967295
    21c4:	adc.w	r3, r3, #4294967295
    21c8:	rsb	lr, r7, #32
    21cc:	lsl.w	lr, r3, lr
    21d0:	lsr.w	r1, r2, r7
    21d4:	subs	r7, #32
    21d6:	lsr.w	r7, r3, r7
    21da:	orr.w	r1, r1, lr
    21de:	ldr	r3, [r6, #28]
    21e0:	orrs	r1, r7
    21e2:	add	r3, r1
    21e4:	cmp	r5, r3
    21e6:	bcc.w	2378 <ExFatFile::write(void const*, unsigned int)+0x218>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    21ea:	mov	r0, r6
    21ec:	bl	188c <ExFatFile::addCluster()>
    21f0:	cmp	r0, #0
    21f2:	beq.w	2422 <ExFatFile::write(void const*, unsigned int)+0x2c2>
    21f6:	ldr	r0, [r6, #32]
    21f8:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    21fa:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    21fe:	ldrb.w	lr, [r0, #1085]	; 0x43d
    2202:	lsrs	r4, r4, #9
    2204:	subs	r5, #2
    2206:	adds	r1, r4, r7
    2208:	lsl.w	r5, r5, lr
    220c:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    220e:	cmp.w	r9, #0
    2212:	bne.w	2328 <ExFatFile::write(void const*, unsigned int)+0x1c8>
    2216:	cmp.w	r8, #512	; 0x200
    221a:	bcs.n	22d2 <ExFatFile::write(void const*, unsigned int)+0x172>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    221c:	ldrd	r2, r3, [r6, #16]
    2220:	ldrd	r4, r5, [r6]
    2224:	cmp.w	r8, #512	; 0x200
    2228:	mov	r7, r8
    222a:	it	cs
    222c:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    2230:	cmp	r5, r3
    2232:	it	eq
    2234:	cmpeq	r4, r2
    2236:	ite	cc
    2238:	movcc	r2, #1
    223a:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    223c:	add.w	r0, r0, #524	; 0x20c
    2240:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    2244:	cmp	r0, #0
    2246:	beq.n	2342 <ExFatFile::write(void const*, unsigned int)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    2248:	add	r0, r9
    224a:	mov	r2, r7
    224c:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    224e:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    2250:	bl	8df4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    2254:	cmp.w	r9, #512	; 0x200
    2258:	beq.w	23a0 <ExFatFile::write(void const*, unsigned int)+0x240>
    225c:	mov	r0, r7
    225e:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2260:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    2264:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2268:	adds.w	fp, r2, r0
    226c:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    2270:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2272:	mov	r2, fp
    2274:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    2276:	it	eq
    2278:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    227a:	add	sl, r7
    toWrite -= n;
    227c:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2280:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    2284:	bcs.n	229a <ExFatFile::write(void const*, unsigned int)+0x13a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2286:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    228a:	mov	r4, ip
    228c:	mov	r3, fp
    228e:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    2292:	orn	r1, r1, #127	; 0x7f
    2296:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    229a:	cmp.w	r8, #0
    229e:	bne.w	2192 <ExFatFile::write(void const*, unsigned int)+0x32>
    22a2:	mov	r2, fp
    22a4:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    22a6:	ldrd	r0, r1, [r6, #8]
    22aa:	cmp	r1, r3
    22ac:	it	eq
    22ae:	cmpeq	r0, r2
    22b0:	bcc.w	2400 <ExFatFile::write(void const*, unsigned int)+0x2a0>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    22b4:	ldr	r3, [pc, #388]	; (243c <ExFatFile::write(void const*, unsigned int)+0x2dc>)
    22b6:	ldr	r3, [r3, #0]
    22b8:	cmp	r3, #0
    22ba:	beq.w	241e <ExFatFile::write(void const*, unsigned int)+0x2be>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    22be:	ldrb.w	r3, [r6, #51]	; 0x33
    22c2:	ldr	r0, [sp, #4]
    22c4:	orn	r3, r3, #127	; 0x7f
    22c8:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    22cc:	add	sp, #20
    22ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    22d2:	cmp.w	r8, #1024	; 0x400
    22d6:	bcc.n	2354 <ExFatFile::write(void const*, unsigned int)+0x1f4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    22d8:	movs	r3, #1
    22da:	lsl.w	lr, r3, lr
    22de:	rsb	lr, r4, lr
    22e2:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    22e6:	mov.w	r4, r8, lsr #9
    22ea:	cmp	r4, lr
    22ec:	it	cs
    22ee:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    22f0:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    22f2:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    22f6:	bhi.n	230c <ExFatFile::write(void const*, unsigned int)+0x1ac>
    22f8:	adds	r2, r4, r1
    22fa:	cmp	r2, r3
    22fc:	bls.n	230c <ExFatFile::write(void const*, unsigned int)+0x1ac>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    22fe:	add.w	r0, r0, #524	; 0x20c
    2302:	str	r1, [sp, #8]
    2304:	bl	1224 <FsCache::invalidate()>
    2308:	ldr	r0, [r6, #32]
    230a:	ldr	r1, [sp, #8]
    230c:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    2310:	ldr	r5, [r0, #0]
    2312:	mov	r3, r4
    2314:	mov	r2, sl
    2316:	ldr	r4, [r5, #28]
    2318:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    231a:	cmp	r0, #0
    231c:	bne.n	225c <ExFatFile::write(void const*, unsigned int)+0xfc>
        DBG_FAIL_MACRO;
    231e:	movw	r0, #758	; 0x2f6
    2322:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    2326:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    2328:	rsb	r7, r9, #512	; 0x200
    232c:	cmp	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    232e:	mov.w	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    2332:	add.w	r0, r0, #524	; 0x20c
    2336:	it	cs
    2338:	movcs	r7, r8
    233a:	bl	1230 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    233e:	cmp	r0, #0
    2340:	bne.n	2248 <ExFatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
    2342:	mov.w	r0, #728	; 0x2d8
    2346:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    234a:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    234c:	ldr	r5, [r6, #28]
    234e:	cbz	r5, 238e <ExFatFile::write(void const*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    2350:	str	r5, [r6, #24]
    2352:	b.n	21fa <ExFatFile::write(void const*, unsigned int)+0x9a>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    2354:	ldr.w	r3, [r0, #532]	; 0x214
    2358:	cmp	r1, r3
    235a:	beq.n	23d8 <ExFatFile::write(void const*, unsigned int)+0x278>
    235c:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    2360:	ldr	r3, [r0, #0]
    2362:	mov	r2, sl
    2364:	ldr	r3, [r3, #24]
    2366:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    2368:	cmp	r0, #0
    236a:	beq.n	2414 <ExFatFile::write(void const*, unsigned int)+0x2b4>
    236c:	mov.w	r0, #512	; 0x200
    2370:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    2372:	mov.w	r7, #512	; 0x200
    2376:	b.n	2260 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    2378:	adds	r5, #1
    237a:	str	r5, [r6, #24]
    237c:	b.n	21fa <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    237e:	mov	r1, r5
    2380:	ldr	r2, [sp, #12]
    2382:	bl	158c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    2386:	cmp	r0, #0
    2388:	bne.w	21f6 <ExFatFile::write(void const*, unsigned int)+0x96>
    238c:	b.n	21ea <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    238e:	mov	r0, r6
    2390:	bl	188c <ExFatFile::addCluster()>
    2394:	cmp	r0, #0
    2396:	beq.n	242c <ExFatFile::write(void const*, unsigned int)+0x2cc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    2398:	ldr	r5, [r6, #24]
    239a:	str	r5, [r6, #28]
    239c:	ldr	r0, [r6, #32]
    239e:	b.n	21fa <ExFatFile::write(void const*, unsigned int)+0x9a>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    23a0:	ldr	r0, [r6, #32]
    23a2:	add.w	r0, r0, #524	; 0x20c
    23a6:	bl	12bc <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    23aa:	cmp	r0, #0
    23ac:	bne.w	225c <ExFatFile::write(void const*, unsigned int)+0xfc>
          DBG_FAIL_MACRO;
    23b0:	mov.w	r0, #736	; 0x2e0
    23b4:	bl	1850 <dbgPrint(unsigned short)>
          goto fail;
    23b8:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    23ba:	mov.w	r0, #652	; 0x28c
    23be:	bl	1850 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    23c2:	ldrb.w	r3, [r6, #50]	; 0x32
    23c6:	orr.w	r3, r3, #1
    23ca:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    23ce:	mov.w	r0, #4294967295
}
    23d2:	add	sp, #20
    23d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    23d8:	add.w	r0, r0, #524	; 0x20c
    23dc:	str	r1, [sp, #8]
    23de:	bl	1224 <FsCache::invalidate()>
    23e2:	ldr	r0, [r6, #32]
    23e4:	ldr	r1, [sp, #8]
    23e6:	b.n	235c <ExFatFile::write(void const*, unsigned int)+0x1fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    23e8:	ldrd	r2, r3, [r0, #16]
    23ec:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    23f0:	cmp	r0, #0
    23f2:	bne.w	217c <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    23f6:	movw	r0, #658	; 0x292
    23fa:	bl	1850 <dbgPrint(unsigned short)>
      goto fail;
    23fe:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2400:	ldrb.w	r1, [r6, #51]	; 0x33
    2404:	ldr	r0, [sp, #4]
    2406:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    240a:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    240e:	strb.w	r1, [r6, #51]	; 0x33
    2412:	b.n	23d2 <ExFatFile::write(void const*, unsigned int)+0x272>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    2414:	movw	r0, #769	; 0x301
    2418:	bl	1850 <dbgPrint(unsigned short)>
        goto fail;
    241c:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
    241e:	ldr	r0, [sp, #4]
    2420:	b.n	23d2 <ExFatFile::write(void const*, unsigned int)+0x272>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    2422:	movw	r0, #689	; 0x2b1
    2426:	bl	1850 <dbgPrint(unsigned short)>
            goto fail;
    242a:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    242c:	movw	r0, #697	; 0x2b9
    2430:	bl	1850 <dbgPrint(unsigned short)>
            goto fail;
    2434:	b.n	23c2 <ExFatFile::write(void const*, unsigned int)+0x262>
    2436:	ldrd	r2, r3, [r6]
    243a:	b.n	22a6 <ExFatFile::write(void const*, unsigned int)+0x146>
    243c:	.word	0x1fff15ac

00002440 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    2440:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    2442:	movs	r1, #10
    2444:	mov	r5, r0
    2446:	ldr	r0, [pc, #40]	; (2470 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2448:	ldr	r4, [pc, #40]	; (2474 <dbgPrint(unsigned short)+0x34>)
    244a:	bl	8ff4 <usb_serial_write>
    244e:	movs	r1, #11
    2450:	ldr	r0, [pc, #36]	; (2478 <dbgPrint(unsigned short)+0x38>)
    2452:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2456:	movs	r0, #46	; 0x2e
    2458:	bl	90fc <usb_serial_putchar>
    245c:	mov	r1, r5
    245e:	mov	r0, r4
    2460:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2464:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    2466:	ldmia.w	sp!, {r3, r4, r5, lr}
    246a:	b.w	a624 <Print::println()>
    246e:	nop
    2470:	.word	0x0000fd18
    2474:	.word	0x1fff09c8
    2478:	.word	0x0000fd64

0000247c <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    247c:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    247e:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    2480:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    2484:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    2486:	mov	r1, r5
    2488:	ldr	r0, [r0, #8]
    248a:	bl	36ac <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    248e:	mov	r6, r0
    2490:	cbz	r0, 24b4 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    2492:	cbz	r5, 24ac <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    2494:	ldr	r3, [r4, #16]
    2496:	adds	r5, #1
    2498:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    249a:	ldrb	r3, [r4, #2]
    249c:	it	ne
    249e:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    24a2:	orn	r3, r3, #127	; 0x7f
    24a6:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    24a8:	mov	r0, r6
    24aa:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    24ac:	ldrb	r3, [r4, #2]
    24ae:	orr.w	r3, r3, #64	; 0x40
    24b2:	b.n	24a2 <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    24b4:	movs	r0, #35	; 0x23
    24b6:	bl	2440 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    24ba:	mov	r0, r6
    24bc:	pop	{r4, r5, r6, pc}
    24be:	nop

000024c0 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    24c0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    24c4:	ldrb	r3, [r0, #0]
    24c6:	and.w	r3, r3, #32
    24ca:	cmp	r3, #0
    24cc:	bne.n	2552 <FatFile::addDirCluster()+0x92>
    24ce:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    24d2:	ldr	r2, [r0, #20]
    24d4:	ldr	r3, [pc, #184]	; (2590 <FatFile::addDirCluster()+0xd0>)
    24d6:	cmp	r2, r3
    24d8:	mov	r5, r0
    24da:	bhi.n	2544 <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    24dc:	bl	247c <FatFile::addCluster()>
    24e0:	mov	r8, r0
    24e2:	cmp	r0, #0
    24e4:	beq.n	2562 <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    24e6:	ldr	r1, [r5, #16]
    24e8:	ldr	r0, [r5, #8]
    24ea:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
    24ee:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    24f0:	ldr	r0, [r5, #8]
    24f2:	mov	r1, r6
    24f4:	adds	r0, #36	; 0x24
    24f6:	movs	r2, #5
    24f8:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    24fc:	mov	r7, r0
    24fe:	cmp	r0, #0
    2500:	beq.n	2586 <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    2502:	mov.w	r2, #512	; 0x200
    2506:	mov	r1, r4
    2508:	bl	c34c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    250c:	ldr	r3, [r5, #8]
    250e:	ldrb	r2, [r3, #4]
    2510:	cmp	r2, #1
    2512:	bls.n	256e <FatFile::addDirCluster()+0xae>
    2514:	movs	r4, #1
    2516:	b.n	2520 <FatFile::addDirCluster()+0x60>
    2518:	ldr	r3, [r5, #8]
    251a:	ldrb	r2, [r3, #4]
    251c:	cmp	r2, r4
    251e:	bls.n	256e <FatFile::addDirCluster()+0xae>
    2520:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    2522:	ldr	r3, [r0, #0]
    2524:	adds	r1, r4, r6
    2526:	ldr	r3, [r3, #24]
    2528:	mov	r2, r7
    252a:	blx	r3
    252c:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    252e:	mov	r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    2530:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    2532:	cmp	r0, #0
    2534:	bne.n	2518 <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    2536:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    2538:	movs	r0, #83	; 0x53
    253a:	bl	2440 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    253e:	mov	r0, r8
    2540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    2544:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    2546:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    2548:	bl	2440 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    254c:	mov	r0, r8
    254e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    2552:	movs	r0, #61	; 0x3d
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    2554:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    2558:	bl	2440 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    255c:	mov	r0, r8
    255e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    2562:	movs	r0, #70	; 0x46
    2564:	bl	2440 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    2568:	mov	r0, r8
    256a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    256e:	ldrb	r3, [r3, #6]
    2570:	ldr	r1, [r5, #20]
    2572:	mov.w	r2, #512	; 0x200
    2576:	lsl.w	r3, r2, r3
    257a:	uxtah	r3, r1, r3
    257e:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    2580:	mov	r0, r8
    2582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    2586:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    2588:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    258a:	bl	2440 <dbgPrint(unsigned short)>
    258e:	b.n	254c <FatFile::addDirCluster()+0x8c>
    2590:	.word	0x001ffdff

00002594 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    2594:	push	{r3, r4, r5, lr}
    2596:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2598:	ldr	r0, [r0, #8]
    259a:	mov	r2, r1
    259c:	adds	r0, #36	; 0x24
    259e:	ldr	r1, [r5, #24]
    25a0:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    25a4:	mov	r4, r0
    25a6:	cbz	r0, 25b4 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    25a8:	ldrh	r0, [r5, #4]
    25aa:	and.w	r0, r0, #15
    25ae:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    25b2:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    25b4:	movs	r0, #101	; 0x65
    25b6:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    25ba:	mov	r0, r4
    25bc:	pop	{r3, r4, r5, pc}
    25be:	nop

000025c0 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    25c0:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    25c2:	ldrsb.w	r3, [r0, #2]
    25c6:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    25c8:	sub	sp, #8
    25ca:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    25cc:	blt.n	260a <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    25ce:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    25d0:	add.w	r0, r5, #36	; 0x24
    25d4:	bl	3570 <FatCache::sync()>
    25d8:	cbnz	r0, 25f0 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    25da:	movw	r0, #1150	; 0x47e
    25de:	bl	2440 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    25e2:	ldrb	r3, [r4, #1]
    25e4:	orr.w	r3, r3, #1
    25e8:	strb	r3, [r4, #1]
  return false;
    25ea:	movs	r0, #0
}
    25ec:	add	sp, #8
    25ee:	pop	{r4, r5, r6, pc}
    25f0:	add.w	r0, r5, #560	; 0x230
    25f4:	bl	3570 <FatCache::sync()>
    25f8:	cmp	r0, #0
    25fa:	beq.n	25da <FatFile::sync() [clone .part.38]+0x1a>
    25fc:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    25fe:	ldr	r3, [r0, #0]
    2600:	ldr	r3, [r3, #20]
    2602:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2604:	cmp	r0, #0
    2606:	beq.n	25da <FatFile::sync() [clone .part.38]+0x1a>
    2608:	b.n	25ec <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    260a:	movs	r1, #1
    260c:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    2610:	mov	r5, r0
    2612:	cbz	r0, 2656 <FatFile::sync() [clone .part.38]+0x96>
    2614:	ldrb	r3, [r0, #0]
    2616:	cmp	r3, #229	; 0xe5
    2618:	beq.n	2656 <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    261a:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    261c:	ldr	r2, [pc, #64]	; (2660 <FatFile::sync() [clone .part.38]+0xa0>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    261e:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    2620:	itt	mi
    2622:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2624:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    2626:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    2628:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    262a:	strh	r3, [r0, #26]
    262c:	lsrs	r3, r3, #16
    262e:	strh	r3, [r0, #20]
    2630:	cbz	r6, 264c <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    2632:	add.w	r2, sp, #3
    2636:	add.w	r1, sp, #6
    263a:	add	r0, sp, #4
    263c:	blx	r6
      setLe16(dir->modifyDate, date);
    263e:	ldrh.w	r3, [sp, #4]
    2642:	ldrh.w	r2, [sp, #6]
    2646:	strh	r3, [r5, #24]
    2648:	strh	r3, [r5, #18]
    264a:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    264c:	ldrb	r3, [r4, #2]
    264e:	and.w	r3, r3, #127	; 0x7f
    2652:	strb	r3, [r4, #2]
    2654:	b.n	25ce <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    2656:	movw	r0, #1125	; 0x465
    265a:	bl	2440 <dbgPrint(unsigned short)>
    265e:	b.n	25e2 <FatFile::sync() [clone .part.38]+0x22>
    2660:	.word	0x1fff15ac

00002664 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    2664:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2666:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    2668:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    266a:	cbnz	r3, 2676 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    266c:	movs	r3, #0
    266e:	strb	r3, [r4, #0]
  m_flags = 0;
    2670:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    2672:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    2674:	pop	{r4, pc}
    2676:	bl	25c0 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    267a:	movs	r3, #0
    267c:	strb	r3, [r4, #0]
  m_flags = 0;
    267e:	strb	r3, [r4, #2]
  return rtn;
}
    2680:	pop	{r4, pc}
    2682:	nop

00002684 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    2684:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    2686:	ldrb	r4, [r0, #0]
    2688:	cbnz	r4, 26b6 <FatFile::openRoot(FatVolume*)+0x32>
    268a:	mov	r5, r0
    268c:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    268e:	movs	r2, #36	; 0x24
    2690:	mov	r1, r4
    2692:	bl	c34c <memset>

  m_vol = vol;
    2696:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    2698:	ldrb	r3, [r6, #7]
    269a:	cmp	r3, #16
    269c:	beq.n	26ac <FatFile::openRoot(FatVolume*)+0x28>
    269e:	cmp	r3, #32
    26a0:	bne.n	26c2 <FatFile::openRoot(FatVolume*)+0x3e>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    26a2:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    26a4:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    26a6:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    26a8:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    26aa:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    26ac:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    26ae:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    26b0:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    26b2:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    26b4:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    26b6:	movw	r0, #606	; 0x25e
    26ba:	bl	2440 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    26be:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    26c0:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    26c2:	movw	r0, #625	; 0x271
    26c6:	bl	2440 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    26ca:	mov	r0, r4
    26cc:	pop	{r4, r5, r6, pc}
    26ce:	nop

000026d0 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    26d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    26d4:	mov	r6, r0
    26d6:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    26d8:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    26da:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    26dc:	movs	r0, #0
    26de:	strb.w	r0, [sp, #36]	; 0x24
    26e2:	strb.w	r0, [sp, #37]	; 0x25
    26e6:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    26ea:	cmp	r4, #0
    26ec:	bne.n	2778 <FatFile::open(FatFile*, char const*, int)+0xa8>
    26ee:	mov	r9, r3
    26f0:	ldrb	r3, [r1, #0]
    26f2:	tst.w	r3, #112	; 0x70
    26f6:	mov	r5, r1
    26f8:	beq.n	2778 <FatFile::open(FatFile*, char const*, int)+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    26fa:	ldrb	r3, [r2, #0]
    26fc:	cmp	r3, #47	; 0x2f
    26fe:	mov	r0, r2
    2700:	beq.n	275a <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2702:	mov.w	r8, #0
    2706:	b.n	2714 <FatFile::open(FatFile*, char const*, int)+0x44>
    2708:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    270a:	strb.w	r8, [r6]
  m_flags = 0;
    270e:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    2712:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2714:	add	r2, sp, #4
    2716:	add	r1, sp, #12
    2718:	bl	3bac <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    271c:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    271e:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2720:	mov	r1, r5
    2722:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2724:	cmp	r0, #0
    2726:	beq.n	278a <FatFile::open(FatFile*, char const*, int)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    2728:	ldr	r4, [sp, #4]
    272a:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    272c:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    272e:	cmp	r4, #0
    2730:	beq.n	279a <FatFile::open(FatFile*, char const*, int)+0xca>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2732:	bl	40e0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2736:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    2738:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    273a:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    273c:	cmp	r0, #0
    273e:	beq.n	27b0 <FatFile::open(FatFile*, char const*, int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2740:	ldmia	r5!, {r0, r1, r2, r3}
    2742:	stmia	r4!, {r0, r1, r2, r3}
    2744:	ldmia	r5!, {r0, r1, r2, r3}
    2746:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2748:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    274a:	ldr	r2, [r5, #0]
    274c:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    274e:	cmp	r3, #0
    2750:	beq.n	2708 <FatFile::open(FatFile*, char const*, int)+0x38>
    2752:	mov	r0, r6
    2754:	bl	25c0 <FatFile::sync() [clone .part.38]>
    2758:	b.n	2708 <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    275a:	adds	r0, #1
    275c:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    275e:	ldrb	r3, [r0, #0]
    2760:	cmp	r3, #47	; 0x2f
    2762:	beq.n	275a <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    2764:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    2766:	cbz	r3, 27c0 <FatFile::open(FatFile*, char const*, int)+0xf0>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2768:	add	r0, sp, #36	; 0x24
    276a:	bl	2684 <FatFile::openRoot(FatVolume*)>
    276e:	mov	r7, r0
    2770:	cbz	r0, 27ca <FatFile::open(FatFile*, char const*, int)+0xfa>
    2772:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    2774:	add	r5, sp, #36	; 0x24
    2776:	b.n	2702 <FatFile::open(FatFile*, char const*, int)+0x32>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    2778:	mov.w	r0, #418	; 0x1a2
    277c:	bl	2440 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    2780:	movs	r7, #0
}
    2782:	mov	r0, r7
    2784:	add	sp, #76	; 0x4c
    2786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    278a:	mov.w	r0, #436	; 0x1b4
    278e:	bl	2440 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    2792:	mov	r0, r7
    2794:	add	sp, #76	; 0x4c
    2796:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    279a:	mov	r3, r9
    279c:	add	r2, sp, #12
    279e:	mov	r1, r5
    27a0:	mov	r0, r6
    27a2:	bl	40e0 <FatFile::open(FatFile*, fname_t*, int)>
    27a6:	mov	r7, r0

fail:
  return false;
}
    27a8:	mov	r0, r7
    27aa:	add	sp, #76	; 0x4c
    27ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    27b0:	movw	r0, #443	; 0x1bb
    27b4:	bl	2440 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    27b8:	mov	r0, r7
    27ba:	add	sp, #76	; 0x4c
    27bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    27c0:	mov	r0, r6
    27c2:	bl	2684 <FatFile::openRoot(FatVolume*)>
    27c6:	mov	r7, r0
    27c8:	b.n	2782 <FatFile::open(FatFile*, char const*, int)+0xb2>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    27ca:	movw	r0, #429	; 0x1ad
    27ce:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    27d2:	b.n	2782 <FatFile::open(FatFile*, char const*, int)+0xb2>

000027d4 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    27d4:	cbz	r1, 27de <FatFile::open(FatVolume*, char const*, int)+0xa>
    27d6:	addw	r1, r1, #1084	; 0x43c
    27da:	b.w	26d0 <FatFile::open(FatFile*, char const*, int)>
}
    27de:	mov	r0, r1
    27e0:	bx	lr
    27e2:	nop

000027e4 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    27e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    27e8:	ldrb	r3, [r0, #2]
    27ea:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    27ec:	sub	sp, #12
    27ee:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    27f0:	bpl.w	299c <FatFile::read(void*, unsigned int)+0x1b8>
    27f4:	mov	r7, r1
    27f6:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    27f8:	lsls	r6, r1, #28
    27fa:	mov	r9, r2
    27fc:	bmi.w	290e <FatFile::read(void*, unsigned int)+0x12a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    2800:	lsls	r4, r1, #26
    2802:	bpl.n	2816 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    2804:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    2806:	ldr	r3, [r0, #20]
    2808:	ldrh	r2, [r2, #8]
    280a:	rsb	r3, r3, r2, lsl #5
    280e:	uxth	r3, r3
    2810:	cmp	r9, r3
    2812:	it	cs
    2814:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    2816:	cmp.w	r9, #0
    281a:	beq.w	2958 <FatFile::read(void*, unsigned int)+0x174>
    281e:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    2820:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    2822:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    2824:	mov	r6, r9
    2826:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    282a:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    282e:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    2832:	bpl.n	28b4 <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    2834:	ldr	r1, [r2, #32]
    2836:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    283a:	cmp.w	fp, #0
    283e:	bne.n	28e8 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    2840:	cmp.w	r6, #512	; 0x200
    2844:	bcc.n	28e8 <FatFile::read(void*, unsigned int)+0x104>
    2846:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    2848:	cmp	r1, r3
    284a:	beq.n	28e8 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    284c:	cmp.w	r6, #1024	; 0x400
    2850:	bcc.n	2920 <FatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    2852:	ldrb	r0, [r5, #0]
    2854:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    2856:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    285a:	bmi.n	2868 <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    285c:	ldrb	r0, [r2, #4]
    285e:	rsb	r0, r8, r0
    2862:	cmp	fp, r0
    2864:	it	cs
    2866:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    2868:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    286a:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    286e:	bhi.n	288a <FatFile::read(void*, unsigned int)+0xa6>
    2870:	add	r3, fp
    2872:	cmp	r1, r3
    2874:	bcs.n	288a <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    2876:	add.w	r0, r2, #36	; 0x24
    287a:	str	r1, [sp, #4]
    287c:	bl	3570 <FatCache::sync()>
        // Flush cache if a cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    2880:	cmp	r0, #0
    2882:	beq.w	2988 <FatFile::read(void*, unsigned int)+0x1a4>
    2886:	ldr	r2, [r5, #8]
    2888:	ldr	r1, [sp, #4]
    288a:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    288c:	ldr	r2, [r0, #0]
    288e:	mov	r3, fp
    2890:	ldr.w	fp, [r2, #12]
    2894:	mov	r2, r7
    2896:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    2898:	cmp	r0, #0
    289a:	beq.n	297e <FatFile::read(void*, unsigned int)+0x19a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    289c:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    289e:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    28a0:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    28a2:	add	r7, r4
    m_curPosition += n;
    28a4:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    28a6:	beq.n	2958 <FatFile::read(void*, unsigned int)+0x174>
    28a8:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    28aa:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    28ac:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    28ae:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    28b2:	bmi.n	2834 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    28b4:	ldrb.w	r8, [r2, #5]
    28b8:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    28bc:	cmp.w	fp, #0
    28c0:	bne.n	291c <FatFile::read(void*, unsigned int)+0x138>
    28c2:	cmp.w	r8, #0
    28c6:	bne.n	291c <FatFile::read(void*, unsigned int)+0x138>
        // start of new cluster
        if (m_curPosition == 0) {
    28c8:	cmp	r3, #0
    28ca:	bne.n	2932 <FatFile::read(void*, unsigned int)+0x14e>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    28cc:	lsls	r1, r1, #25
    28ce:	ite	mi
    28d0:	ldrmi	r1, [r2, #32]
    28d2:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    28d4:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    28d6:	mov	r0, r2
    28d8:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
    28dc:	ldr	r2, [r5, #8]
    28de:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    28e2:	cmp.w	fp, #0
    28e6:	beq.n	2840 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    28e8:	add.w	r0, r2, #36	; 0x24
    28ec:	movs	r2, #0
    28ee:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    28f2:	cmp	r0, #0
    28f4:	beq.n	2964 <FatFile::read(void*, unsigned int)+0x180>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    28f6:	rsb	r4, fp, #512	; 0x200
    28fa:	cmp	r4, r6
    28fc:	it	cs
    28fe:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    2900:	add.w	r1, r0, fp
    2904:	mov	r2, r4
    2906:	mov	r0, r7
    2908:	bl	8df4 <memcpy>
    290c:	b.n	289c <FatFile::read(void*, unsigned int)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    290e:	ldr	r3, [r0, #28]
    2910:	ldr	r2, [r0, #20]
    2912:	subs	r3, r3, r2
    2914:	cmp	r9, r3
    2916:	it	cs
    2918:	movcs	r9, r3
    291a:	b.n	2816 <FatFile::read(void*, unsigned int)+0x32>
    291c:	ldr	r1, [r5, #16]
    291e:	b.n	28d6 <FatFile::read(void*, unsigned int)+0xf2>
    2920:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    2922:	ldr	r3, [r0, #0]
    2924:	mov	r2, r7
    2926:	ldr	r3, [r3, #8]
    2928:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    292a:	cbz	r0, 2992 <FatFile::read(void*, unsigned int)+0x1ae>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    292c:	mov.w	r4, #512	; 0x200
    2930:	b.n	289c <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    2932:	lsls	r3, r1, #28
    2934:	bpl.n	2942 <FatFile::read(void*, unsigned int)+0x15e>
    2936:	ldrb	r3, [r5, #2]
    2938:	lsls	r4, r3, #25
    293a:	bpl.n	2942 <FatFile::read(void*, unsigned int)+0x15e>
          m_curCluster++;
    293c:	ldr	r1, [r5, #16]
    293e:	adds	r1, #1
    2940:	b.n	28d4 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2942:	mov	r0, r2
    2944:	ldr	r1, [r5, #16]
    2946:	mov	r2, sl
    2948:	bl	358c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    294c:	cmp	r0, #0
    294e:	blt.n	29b8 <FatFile::read(void*, unsigned int)+0x1d4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    2950:	beq.n	29a6 <FatFile::read(void*, unsigned int)+0x1c2>
    2952:	ldr	r2, [r5, #8]
    2954:	ldr	r1, [r5, #16]
    2956:	b.n	28d6 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2958:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    295a:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    295e:	add	sp, #12
    2960:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    2964:	movw	r0, #717	; 0x2cd
    2968:	bl	2440 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    296c:	ldrb	r3, [r5, #1]
  return -1;
    296e:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    2972:	orr.w	r3, r3, #2
    2976:	strb	r3, [r5, #1]
  return -1;
}
    2978:	add	sp, #12
    297a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    297e:	movw	r0, #742	; 0x2e6
    2982:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    2986:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if a cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    2988:	movw	r0, #737	; 0x2e1
    298c:	bl	2440 <dbgPrint(unsigned short)>
          goto fail;
    2990:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    2992:	movw	r0, #750	; 0x2ee
    2996:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    299a:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    299c:	mov.w	r0, #656	; 0x290
    29a0:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    29a4:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    29a6:	ldrb	r3, [r5, #0]
    29a8:	tst.w	r3, #112	; 0x70
    29ac:	bne.n	295a <FatFile::read(void*, unsigned int)+0x176>
              break;
            }
            DBG_FAIL_MACRO;
    29ae:	mov.w	r0, #700	; 0x2bc
    29b2:	bl	2440 <dbgPrint(unsigned short)>
            goto fail;
    29b6:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    29b8:	movw	r0, #693	; 0x2b5
    29bc:	bl	2440 <dbgPrint(unsigned short)>
            goto fail;
    29c0:	b.n	296c <FatFile::read(void*, unsigned int)+0x188>
    29c2:	nop

000029c4 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    29c4:	push	{r4, r5, r6, lr}
    29c6:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    29c8:	movs	r2, #1
    29ca:	add.w	r1, sp, #7
    29ce:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    29d0:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    29d2:	ldr	r5, [r0, #16]
    29d4:	bl	27e4 <FatFile::read(void*, unsigned int)>
    29d8:	cmp	r0, #1
    29da:	it	eq
    29dc:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    29e0:	str	r6, [r4, #20]
    29e2:	it	ne
    29e4:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    29e8:	str	r5, [r4, #16]
  return c;
}
    29ea:	add	sp, #8
    29ec:	pop	{r4, r5, r6, pc}
    29ee:	nop

000029f0 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    29f0:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    29f2:	ldr	r3, [r0, #20]
    29f4:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    29f8:	sub	sp, #12
    29fa:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    29fc:	cbz	r5, 2a00 <FatFile::readDirCache(bool)+0x10>
    29fe:	cbnz	r1, 2a28 <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    2a00:	movs	r2, #1
    2a02:	add.w	r1, sp, #7
    2a06:	mov	r0, r4
    2a08:	bl	27e4 <FatFile::read(void*, unsigned int)>
    2a0c:	sxtb	r0, r0
    if  (n != 1) {
    2a0e:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    2a10:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    2a14:	bne.n	2a2e <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    2a16:	ldr	r3, [r4, #20]
    2a18:	adds	r3, #31
    2a1a:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    2a1c:	ldr	r0, [r4, #8]
    2a1e:	adds	r0, #48	; 0x30
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    2a20:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    2a24:	add	sp, #12
    2a26:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    2a28:	adds	r3, #32
    2a2a:	str	r3, [r0, #20]
    2a2c:	b.n	2a1c <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    2a2e:	cbz	r0, 2a38 <FatFile::readDirCache(bool)+0x48>
        DBG_FAIL_MACRO;
    2a30:	movw	r0, #801	; 0x321
    2a34:	bl	2440 <dbgPrint(unsigned short)>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    2a38:	movs	r0, #0
}
    2a3a:	add	sp, #12
    2a3c:	pop	{r4, r5, pc}
    2a3e:	nop

00002a40 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    2a40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a44:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    2a46:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    2a48:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    2a4a:	cmp	r3, #0
    2a4c:	beq.n	2abe <FatFile::seekSet(unsigned long)+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2a4e:	ldr	r2, [r0, #20]
    2a50:	cmp	r2, r1
    2a52:	mov	r6, r1
    2a54:	beq.n	2ae6 <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    2a56:	cbnz	r1, 2a6a <FatFile::seekSet(unsigned long)+0x2a>
    // set position to start of file
    m_curCluster = 0;
    2a58:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2a5a:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2a5c:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2a5e:	bic.w	r3, r3, #32
    2a62:	strb	r3, [r4, #2]
  return true;
    2a64:	movs	r0, #1
    2a66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    2a6a:	lsls	r0, r3, #28
    2a6c:	bpl.n	2ace <FatFile::seekSet(unsigned long)+0x8e>
    if (pos > m_fileSize) {
    2a6e:	ldr	r1, [r4, #28]
    2a70:	cmp	r6, r1
    2a72:	bhi.n	2af0 <FatFile::seekSet(unsigned long)+0xb0>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    2a74:	ldr.w	lr, [r4, #8]
    2a78:	ldrb.w	r5, [lr, #6]
    2a7c:	adds	r5, #9
    2a7e:	uxtb	r1, r5
    2a80:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    2a82:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    2a84:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    2a86:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    2a88:	cmp	r0, r5
    2a8a:	bhi.n	2a8e <FatFile::seekSet(unsigned long)+0x4e>
    2a8c:	cbnz	r2, 2aec <FatFile::seekSet(unsigned long)+0xac>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    2a8e:	lsls	r3, r3, #25
    2a90:	ite	mi
    2a92:	ldrmi.w	r3, [lr, #32]
    2a96:	ldrpl	r3, [r4, #32]
    2a98:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2a9a:	add.w	r8, r4, #16
    2a9e:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2aa0:	cmp	r5, #0
    2aa2:	beq.n	2a5a <FatFile::seekSet(unsigned long)+0x1a>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2aa4:	ldr	r1, [r4, #16]
    2aa6:	ldr	r0, [r4, #8]
    2aa8:	bl	358c <FatPartition::fatGet(unsigned long, unsigned long*)>
    2aac:	cmp	r0, #0
    2aae:	add.w	r5, r5, #4294967295
    2ab2:	bgt.n	2a9e <FatFile::seekSet(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
    2ab4:	movw	r0, #1100	; 0x44c
    2ab8:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    2abc:	b.n	2ac6 <FatFile::seekSet(unsigned long)+0x86>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    2abe:	movw	r0, #1063	; 0x427
    2ac2:	bl	2440 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    2ac6:	str	r7, [r4, #16]
  return false;
    2ac8:	movs	r0, #0
    2aca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    2ace:	lsls	r1, r3, #26
    2ad0:	bpl.n	2a74 <FatFile::seekSet(unsigned long)+0x34>
    2ad2:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    2ad4:	ldrh	r3, [r3, #8]
    2ad6:	cmp.w	r6, r3, lsl #5
    2ada:	bls.n	2a5a <FatFile::seekSet(unsigned long)+0x1a>
      goto done;
    }
    DBG_FAIL_MACRO;
    2adc:	movw	r0, #1084	; 0x43c
    2ae0:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    2ae4:	b.n	2ac6 <FatFile::seekSet(unsigned long)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    2ae6:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    2ae8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    2aec:	subs	r5, r5, r0
    2aee:	b.n	2a9a <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    2af0:	movw	r0, #1077	; 0x435
    2af4:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    2af8:	b.n	2ac6 <FatFile::seekSet(unsigned long)+0x86>
    2afa:	nop

00002afc <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    2afc:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    2afe:	ldrb	r3, [r0, #0]
    2b00:	lsls	r2, r3, #27
    2b02:	bmi.n	2b10 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    2b04:	movw	r0, #943	; 0x3af
    2b08:	bl	2440 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    2b0c:	movs	r0, #0
    2b0e:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    2b10:	movs	r1, #0
    2b12:	mov	r4, r0
    2b14:	bl	2a40 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    2b18:	movs	r1, #1
    2b1a:	mov	r0, r4
    2b1c:	bl	29f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    2b20:	cbz	r0, 2b40 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    2b22:	ldrb	r3, [r0, #0]
    2b24:	cbz	r3, 2b44 <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    2b26:	cmp	r3, #229	; 0xe5
    2b28:	beq.n	2b18 <FatFile::rmdir()+0x1c>
    2b2a:	cmp	r3, #46	; 0x2e
    2b2c:	beq.n	2b18 <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    2b2e:	ldrb	r3, [r0, #11]
    2b30:	lsls	r3, r3, #28
    2b32:	bmi.n	2b18 <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    2b34:	movw	r0, #969	; 0x3c9
    2b38:	bl	2440 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    2b3c:	movs	r0, #0
    2b3e:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    2b40:	ldrb	r3, [r4, #1]
    2b42:	cbnz	r3, 2b5a <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    2b44:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    2b46:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    2b48:	orr.w	r3, r3, #2
    2b4c:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    2b4e:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    2b50:	mov	r0, r4

fail:
  return false;
}
    2b52:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    2b56:	b.w	3df8 <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    2b5a:	mov.w	r0, #956	; 0x3bc
    2b5e:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    2b62:	b.n	2b0c <FatFile::rmdir()+0x10>

00002b64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    2b64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b68:	mov	r8, r1
    2b6a:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    2b6c:	movs	r1, #0
    2b6e:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    2b70:	mov	r4, r0
    2b72:	mov	r6, r3
    2b74:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    2b78:	bl	c34c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    2b7c:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    2b80:	ldr.w	r3, [r8, #32]
    2b84:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    2b86:	and.w	r2, r7, #15
    2b8a:	add.w	r3, r0, #48	; 0x30
    2b8e:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    2b92:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    2b94:	str	r0, [r4, #8]
    2b96:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    2b98:	lsls	r7, r1, #28
    2b9a:	bmi.n	2bd4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    2b9c:	and.w	r1, r1, #23
    2ba0:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    2ba2:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    2ba4:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    2ba6:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    2baa:	it	eq
    2bac:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    2bb0:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    2bb4:	it	eq
    2bb6:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    2bb8:	cmp	r3, #1
    2bba:	beq.n	2c62 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
    2bbc:	cmp	r3, #2
    2bbe:	beq.n	2be6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>
    2bc0:	cbz	r3, 2c04 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    2bc2:	mov.w	r0, #508	; 0x1fc
    2bc6:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    2bca:	movs	r0, #0
    2bcc:	strb	r0, [r4, #0]
  m_flags = 0;
    2bce:	strb	r0, [r4, #2]
  return false;
    2bd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    2bd4:	movw	r0, #481	; 0x1e1
    2bd8:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    2bdc:	movs	r0, #0
    2bde:	strb	r0, [r4, #0]
  m_flags = 0;
    2be0:	strb	r0, [r4, #2]
  return false;
    2be2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2be6:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    2be8:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2bea:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    2bee:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2bf0:	beq.n	2c6e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x10a>
      DBG_FAIL_MACRO;
    2bf2:	movw	r0, #514	; 0x202
    2bf6:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    2bfa:	movs	r0, #0
    2bfc:	strb	r0, [r4, #0]
  m_flags = 0;
    2bfe:	strb	r0, [r4, #2]
  return false;
    2c00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    2c04:	ands.w	lr, r6, #1024	; 0x400
    2c08:	bne.n	2c86 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
    2c0a:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    2c0c:	and.w	r3, r6, #8
    2c10:	orrs	r5, r3
    2c12:	uxtb	r5, r5
    2c14:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    2c16:	ldrh	r1, [r2, #20]
    2c18:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    2c1a:	ldr	r7, [r0, #44]	; 0x2c
    2c1c:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    2c1e:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    2c22:	cmp.w	lr, #0
    2c26:	beq.n	2c3a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    2c28:	cbnz	r1, 2c76 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c2a:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    2c2e:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2c30:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    2c32:	bmi.n	2c44 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    2c34:	movs	r0, #1
    2c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    2c3a:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2c3c:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    2c3e:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    2c40:	lsls	r3, r6, #17
    2c42:	bpl.n	2c34 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    2c44:	ldr	r1, [r4, #28]
    2c46:	mov	r0, r4
    2c48:	bl	2a40 <FatFile::seekSet(unsigned long)>
    2c4c:	cmp	r0, #0
    2c4e:	bne.n	2c34 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    DBG_FAIL_MACRO;
    2c50:	movw	r0, #539	; 0x21b
    2c54:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    2c58:	movs	r0, #0
    2c5a:	strb	r0, [r4, #0]
  m_flags = 0;
    2c5c:	strb	r0, [r4, #2]
  return false;
    2c5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2c62:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    2c64:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2c66:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    2c6a:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    2c6c:	bne.n	2bf2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    2c6e:	sxtb	r5, r5
    2c70:	and.w	lr, r6, #1024	; 0x400
    2c74:	b.n	2c0c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    2c76:	bl	3760 <FatPartition::freeChain(unsigned long)>
    2c7a:	cbnz	r0, 2c90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x12c>
      DBG_FAIL_MACRO;
    2c7c:	mov.w	r0, #528	; 0x210
    2c80:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    2c84:	b.n	2bca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    2c86:	movw	r0, #493	; 0x1ed
    2c8a:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    2c8e:	b.n	2bca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    2c90:	ldrb	r5, [r4, #2]
    2c92:	b.n	2c2a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>

00002c94 <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    2c94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2c98:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    2c9a:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2c9c:	cbnz	r3, 2ca8 <FatFile::openNext(FatFile*, int)+0x14>
    2c9e:	ldrb	r3, [r1, #0]
    2ca0:	tst.w	r3, #112	; 0x70
    2ca4:	mov	r5, r1
    2ca6:	bne.n	2cba <FatFile::openNext(FatFile*, int)+0x26>
    DBG_FAIL_MACRO;
    2ca8:	movw	r0, #558	; 0x22e
    2cac:	bl	2440 <dbgPrint(unsigned short)>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    2cb0:	movs	r4, #0
}
    2cb2:	mov	r0, r4
    2cb4:	add	sp, #12
    2cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cba:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2cbc:	ands.w	r7, r6, #31
    2cc0:	bne.n	2ca8 <FatFile::openNext(FatFile*, int)+0x14>
    2cc2:	mov	r8, r0
    2cc4:	mov	r9, r2
    2cc6:	mov	sl, r7
    2cc8:	b.n	2cce <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    2cca:	movs	r7, #0
    2ccc:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    2cce:	movs	r1, #0
    2cd0:	mov	r0, r5
    2cd2:	bl	29f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    2cd6:	mov	r4, r0
    2cd8:	cbz	r0, 2d06 <FatFile::openNext(FatFile*, int)+0x72>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    2cda:	ldrb	r3, [r0, #0]
    2cdc:	cmp	r3, #0
    2cde:	beq.n	2cb0 <FatFile::openNext(FatFile*, int)+0x1c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    2ce0:	cmp	r3, #46	; 0x2e
    2ce2:	beq.n	2cca <FatFile::openNext(FatFile*, int)+0x36>
    2ce4:	cmp	r3, #229	; 0xe5
    2ce6:	beq.n	2cca <FatFile::openNext(FatFile*, int)+0x36>
    2ce8:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    2cea:	and.w	r2, r1, #8
    2cee:	and.w	fp, r2, #255	; 0xff
    2cf2:	cbz	r2, 2d16 <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    2cf4:	cmp	r1, #15
    2cf6:	bne.n	2cca <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    2cf8:	lsls	r2, r3, #25
    2cfa:	bpl.n	2ccc <FatFile::openNext(FatFile*, int)+0x38>
        lfnOrd = ldir->order & 0X1F;
    2cfc:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    2d00:	ldrb.w	sl, [r0, #13]
    2d04:	b.n	2ccc <FatFile::openNext(FatFile*, int)+0x38>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    2d06:	ldrb	r3, [r5, #1]
    2d08:	cmp	r3, #0
    2d0a:	beq.n	2cb0 <FatFile::openNext(FatFile*, int)+0x1c>
        DBG_FAIL_MACRO;
    2d0c:	movw	r0, #567	; 0x237
    2d10:	bl	2440 <dbgPrint(unsigned short)>
    2d14:	b.n	2cb2 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    2d16:	cbnz	r7, 2d38 <FatFile::openNext(FatFile*, int)+0xa4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    2d18:	str	r7, [sp, #0]
    2d1a:	mov	r3, r9
    2d1c:	ubfx	r2, r6, #5, #16
    2d20:	mov	r1, r5
    2d22:	mov	r0, r8
    2d24:	bl	2b64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    2d28:	mov	r4, r0
    2d2a:	cmp	r0, #0
    2d2c:	bne.n	2cb2 <FatFile::openNext(FatFile*, int)+0x1e>
        DBG_FAIL_MACRO;
    2d2e:	mov.w	r0, #584	; 0x248
    2d32:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    2d36:	b.n	2cb2 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    2d38:	bl	3a24 <FatFile::lfnChecksum(unsigned char*)>
    2d3c:	cmp	sl, r0
    2d3e:	beq.n	2d18 <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
    2d40:	mov.w	r0, #580	; 0x244
      lfnOrd = 0;
    }
  }

fail:
  return false;
    2d44:	mov	r4, fp
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
    2d46:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    2d4a:	b.n	2cb2 <FatFile::openNext(FatFile*, int)+0x1e>

00002d4c <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    2d4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    2d50:	ldrb	r3, [r1, #0]
    2d52:	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    2d56:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    2d58:	beq.w	2e8a <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    2d5c:	movw	r3, #2562	; 0xa02
    2d60:	mov	r6, r1
    2d62:	mov	r4, r0
    2d64:	bl	40e0 <FatFile::open(FatFile*, fname_t*, int)>
    2d68:	cmp	r0, #0
    2d6a:	beq.w	2e7a <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    2d6e:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    2d70:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    2d72:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    2d74:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    2d76:	mov	r0, r4
    2d78:	bl	24c0 <FatFile::addDirCluster()>
    2d7c:	cmp	r0, #0
    2d7e:	beq.w	2eb0 <FatFile::mkdir(FatFile*, fname_t*)+0x164>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    2d82:	ldr	r3, [r4, #16]
    2d84:	str	r3, [r4, #32]
    2d86:	movs	r1, #0
    2d88:	mov	r0, r4
    2d8a:	bl	2a40 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2d8e:	ldrb	r3, [r4, #0]
    2d90:	cmp	r3, #0
    2d92:	bne.w	2e9a <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    2d96:	movs	r1, #1
    2d98:	mov	r0, r4
    2d9a:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    2d9e:	mov	r5, r0
    2da0:	cmp	r0, #0
    2da2:	beq.w	2eca <FatFile::mkdir(FatFile*, fname_t*)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    2da6:	movs	r3, #16
    2da8:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    2daa:	ldr	r2, [r0, #8]
    2dac:	ldr	r1, [r5, #4]
    2dae:	ldr	r3, [r5, #12]
    2db0:	ldr	r0, [r0, #0]
    2db2:	ldrh.w	r8, [r5, #20]
    2db6:	ldrh.w	r9, [r5, #26]
    2dba:	mov	r7, sp
    2dbc:	stmia	r7!, {r0, r1, r2, r3}
    2dbe:	ldr	r1, [r5, #20]
    2dc0:	ldr	r2, [r5, #24]
    2dc2:	ldr	r3, [r5, #28]
    2dc4:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    2dc6:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    2dc8:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    2dca:	movs	r3, #46	; 0x2e
    2dcc:	strb.w	r3, [r5, #-32]!
    2dd0:	add.w	r1, sp, #10
    2dd4:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    2dd6:	movs	r2, #32
    2dd8:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    2ddc:	cmp	r1, r3
    2dde:	bne.n	2dd8 <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    2de0:	ldr	r1, [r4, #32]
    2de2:	ldr	r0, [r4, #8]
    2de4:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2de8:	ldr	r3, [r4, #8]
    2dea:	mov	r1, r0
    2dec:	movs	r2, #1
    2dee:	add.w	r0, r3, #36	; 0x24
    2df2:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    2df6:	mov	lr, r0
    2df8:	cmp	r0, #0
    2dfa:	beq.n	2ec0 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    2dfc:	strh.w	r8, [sp, #20]
    2e00:	strh.w	r9, [sp, #26]
    2e04:	mov	r7, r5
    2e06:	ldmia	r7!, {r0, r1, r2, r3}
    2e08:	str.w	r0, [lr]
    2e0c:	str.w	r1, [lr, #4]
    2e10:	str.w	r2, [lr, #8]
    2e14:	str.w	r3, [lr, #12]
    2e18:	ldmia	r7!, {r0, r1, r2, r3}
    2e1a:	str.w	r0, [lr, #16]
    2e1e:	str.w	r1, [lr, #20]
    2e22:	str.w	r2, [lr, #24]
    2e26:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    2e2a:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    2e2c:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    2e30:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    2e32:	lsrs	r3, r3, #16
    2e34:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    2e38:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    2e3c:	ldmia	r5!, {r0, r1, r2, r3}
    2e3e:	add.w	r6, lr, #32
    2e42:	str.w	r0, [lr, #32]
    2e46:	str	r1, [r6, #4]
    2e48:	str	r2, [r6, #8]
    2e4a:	str	r3, [r6, #12]
    2e4c:	ldmia	r5!, {r0, r1, r2, r3}
    2e4e:	str	r0, [r6, #16]
    2e50:	str	r1, [r6, #20]
    2e52:	str	r2, [r6, #24]
    2e54:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    2e56:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2e58:	add.w	r0, r4, #36	; 0x24
    2e5c:	bl	3570 <FatCache::sync()>
    2e60:	cbz	r0, 2e82 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    2e62:	add.w	r0, r4, #560	; 0x230
    2e66:	bl	3570 <FatCache::sync()>
    2e6a:	cbz	r0, 2e82 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    2e6c:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    2e6e:	ldr	r3, [r0, #0]
    2e70:	ldr	r3, [r3, #20]

fail:
  return false;
}
    2e72:	add	sp, #36	; 0x24
    2e74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e78:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    2e7a:	mov.w	r0, #346	; 0x15a
    2e7e:	bl	2440 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    2e82:	movs	r0, #0
    2e84:	add	sp, #36	; 0x24
    2e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    2e8a:	movw	r0, #341	; 0x155
    2e8e:	bl	2440 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    2e92:	movs	r0, #0
    2e94:	add	sp, #36	; 0x24
    2e96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e9a:	mov	r0, r4
    2e9c:	bl	25c0 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    2ea0:	cmp	r0, #0
    2ea2:	bne.w	2d96 <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    2ea6:	movw	r0, #363	; 0x16b
    2eaa:	bl	2440 <dbgPrint(unsigned short)>
    2eae:	b.n	2e82 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    2eb0:	movw	r0, #355	; 0x163
    2eb4:	bl	2440 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    2eb8:	movs	r0, #0
    2eba:	add	sp, #36	; 0x24
    2ebc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    2ec0:	mov.w	r0, #386	; 0x182
    2ec4:	bl	2440 <dbgPrint(unsigned short)>
    2ec8:	b.n	2e82 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    2eca:	movw	r0, #369	; 0x171
    2ece:	bl	2440 <dbgPrint(unsigned short)>
    2ed2:	b.n	2e82 <FatFile::mkdir(FatFile*, fname_t*)+0x136>

00002ed4 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    2ed4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ed8:	mov	r6, r0
    2eda:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    2edc:	ldrb	r4, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    2ede:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    2ee0:	movs	r0, #0
    2ee2:	strb.w	r0, [sp, #36]	; 0x24
    2ee6:	strb.w	r0, [sp, #37]	; 0x25
    2eea:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    2eee:	cmp	r4, #0
    2ef0:	bne.n	2f62 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    2ef2:	mov	r8, r3
    2ef4:	ldrb	r3, [r1, #0]
    2ef6:	tst.w	r3, #112	; 0x70
    2efa:	mov	r5, r1
    2efc:	beq.n	2f62 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    2efe:	ldrb	r3, [r2, #0]
    2f00:	cmp	r3, #47	; 0x2f
    2f02:	mov	r0, r2
    2f04:	beq.n	2f44 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2f06:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2f08:	add	r2, sp, #4
    2f0a:	add	r1, sp, #12
    2f0c:	bl	3bac <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2f10:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2f12:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2f14:	mov	r1, r5
    2f16:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2f18:	cmp	r0, #0
    2f1a:	beq.n	2fa8 <FatFile::mkdir(FatFile*, char const*, bool)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    2f1c:	ldr	r4, [sp, #4]
    2f1e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2f20:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    2f22:	cmp	r4, #0
    2f24:	beq.n	2fb8 <FatFile::mkdir(FatFile*, char const*, bool)+0xe4>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2f26:	bl	40e0 <FatFile::open(FatFile*, fname_t*, int)>
    2f2a:	mov	r4, r0
    2f2c:	cbnz	r0, 2f82 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    2f2e:	cmp.w	r8, #0
    2f32:	bne.n	2f74 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    2f34:	mov.w	r0, #320	; 0x140
    2f38:	bl	2440 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    2f3c:	mov	r0, r4
    2f3e:	add	sp, #72	; 0x48
    2f40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    2f44:	adds	r0, #1
    2f46:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2f48:	ldrb	r3, [r0, #0]
    2f4a:	cmp	r3, #47	; 0x2f
    2f4c:	beq.n	2f44 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    2f4e:	ldr	r1, [r5, #8]
    2f50:	add	r0, sp, #36	; 0x24
    2f52:	bl	2684 <FatFile::openRoot(FatVolume*)>
    2f56:	mov	r4, r0
    2f58:	cmp	r0, #0
    2f5a:	beq.n	2fc6 <FatFile::mkdir(FatFile*, char const*, bool)+0xf2>
    2f5c:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    2f5e:	add	r5, sp, #36	; 0x24
    2f60:	b.n	2f06 <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    2f62:	movw	r0, #297	; 0x129
    2f66:	bl	2440 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    2f6a:	movs	r4, #0
}
    2f6c:	mov	r0, r4
    2f6e:	add	sp, #72	; 0x48
    2f70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    2f74:	mov	r1, r5
    2f76:	add	r2, sp, #12
    2f78:	mov	r0, r6
    2f7a:	bl	2d4c <FatFile::mkdir(FatFile*, fname_t*)>
    2f7e:	cmp	r0, #0
    2f80:	beq.n	2f34 <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2f82:	mov	r5, r6
    2f84:	ldmia	r5!, {r0, r1, r2, r3}
    2f86:	add	r4, sp, #36	; 0x24
    2f88:	stmia	r4!, {r0, r1, r2, r3}
    2f8a:	ldmia	r5!, {r0, r1, r2, r3}
    2f8c:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2f8e:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2f90:	ldr	r2, [r5, #0]
    2f92:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2f94:	cbnz	r3, 2fa0 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    2f96:	strb	r7, [r6, #0]
  m_flags = 0;
    2f98:	strb	r7, [r6, #2]
    2f9a:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    2f9c:	add	r5, sp, #36	; 0x24
    2f9e:	b.n	2f08 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    2fa0:	mov	r0, r6
    2fa2:	bl	25c0 <FatFile::sync() [clone .part.38]>
    2fa6:	b.n	2f96 <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    2fa8:	mov.w	r0, #312	; 0x138
    2fac:	bl	2440 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    2fb0:	mov	r0, r4
    2fb2:	add	sp, #72	; 0x48
    2fb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    2fb8:	add	r2, sp, #12
    2fba:	mov	r1, r5
    2fbc:	mov	r0, r6
    2fbe:	bl	2d4c <FatFile::mkdir(FatFile*, fname_t*)>
    2fc2:	mov	r4, r0
    2fc4:	b.n	2f3c <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    2fc6:	movw	r0, #305	; 0x131
    2fca:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    2fce:	b.n	2f3c <FatFile::mkdir(FatFile*, char const*, bool)+0x68>

00002fd0 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    2fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    2fd4:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    2fd6:	sub	sp, #104	; 0x68
    2fd8:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    2fda:	ands.w	r4, r4, #24
    2fde:	strb.w	r6, [sp, #32]
    2fe2:	strb.w	r6, [sp, #33]	; 0x21
    2fe6:	strb.w	r6, [sp, #34]	; 0x22
    2fea:	strb.w	r6, [sp, #68]	; 0x44
    2fee:	strb.w	r6, [sp, #69]	; 0x45
    2ff2:	strb.w	r6, [sp, #70]	; 0x46
    2ff6:	bne.n	3008 <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    2ff8:	movw	r0, #842	; 0x34a
    2ffc:	bl	2440 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    3000:	mov	r0, r4
    3002:	add	sp, #104	; 0x68
    3004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3008:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    300a:	ldr	r3, [r1, #8]
    300c:	ldr	r2, [r0, #8]
    300e:	cmp	r2, r3
    3010:	mov	r5, r0
    3012:	mov	r7, r1
    3014:	beq.n	3028 <FatFile::rename(FatFile*, char const*)+0x58>
    DBG_FAIL_MACRO;
    3016:	mov.w	r0, #852	; 0x354
    301a:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    301e:	mov	r4, r6
}
    3020:	mov	r0, r4
    3022:	add	sp, #104	; 0x68
    3024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3028:	bl	25c0 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    302c:	mov	lr, r5
    302e:	ldmia.w	lr!, {r0, r1, r2, r3}
    3032:	add	r4, sp, #68	; 0x44
    3034:	stmia	r4!, {r0, r1, r2, r3}
    3036:	ldmia.w	lr!, {r0, r1, r2, r3}
    303a:	stmia	r4!, {r0, r1, r2, r3}
    303c:	ldr.w	r3, [lr]
    3040:	str	r3, [r4, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    3042:	mov	r1, r6
    3044:	mov	r0, r5
    3046:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    304a:	mov	r4, r0
    304c:	cmp	r0, #0
    304e:	beq.w	31ea <FatFile::rename(FatFile*, char const*)+0x21a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    3052:	ldr	r1, [r4, #4]
    3054:	ldr	r2, [r4, #8]
    3056:	ldr	r3, [r4, #12]
    3058:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    305a:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    305e:	mov	lr, sp
    3060:	stmia.w	lr!, {r0, r1, r2, r3}
    3064:	ldr	r1, [r4, #20]
    3066:	ldr	r2, [r4, #24]
    3068:	ldr	r3, [r4, #28]
    306a:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    306c:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    3070:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    3074:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    3078:	mov	r2, r8
    307a:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    307c:	cmp	r4, #0
    307e:	bne.w	318e <FatFile::rename(FatFile*, char const*)+0x1be>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    3082:	add	r0, sp, #32
    3084:	bl	2ed4 <FatFile::mkdir(FatFile*, char const*, bool)>
    3088:	mov	r4, r0
    308a:	cmp	r0, #0
    308c:	beq.w	31d6 <FatFile::rename(FatFile*, char const*)+0x206>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    3090:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    3092:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    3094:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    3098:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    309c:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    309e:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    30a0:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    30a2:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    30a4:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    30a6:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    30a8:	movs	r1, #1
    30aa:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    30ac:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    30b0:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    30b4:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    30b8:	mov	r4, r0
    30ba:	cmp	r0, #0
    30bc:	beq.w	31e0 <FatFile::rename(FatFile*, char const*)+0x210>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    30c0:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    30c2:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    30c6:	ldr.w	r0, [r3, #-91]!
    30ca:	str.w	r0, [r4, #13]
    30ce:	ldr	r0, [r3, #4]
    30d0:	str.w	r0, [r4, #17]
    30d4:	ldr	r0, [r3, #8]
    30d6:	str.w	r0, [r4, #21]
    30da:	ldr	r0, [r3, #12]
    30dc:	str.w	r0, [r4, #25]
    30e0:	ldrh	r0, [r3, #16]
    30e2:	ldrb	r3, [r3, #18]
    30e4:	strh.w	r0, [r4, #29]
    30e8:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    30ea:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    30ec:	cmp	r6, #0
    30ee:	beq.n	3164 <FatFile::rename(FatFile*, char const*)+0x194>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    30f0:	mov	r1, r6
    30f2:	ldr	r0, [r5, #8]
    30f4:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    30f8:	ldr	r3, [r5, #8]
    30fa:	mov	r1, r0
    30fc:	mov	r2, r7
    30fe:	add.w	r0, r3, #36	; 0x24
    3102:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    3106:	mov	r4, r0
    3108:	cmp	r0, #0
    310a:	beq.n	31f4 <FatFile::rename(FatFile*, char const*)+0x224>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    310c:	ldr.w	r0, [r4, #32]!
    3110:	ldr	r1, [r4, #4]
    3112:	ldr	r2, [r4, #8]
    3114:	ldr	r3, [r4, #12]
    3116:	mov	r7, sp
    3118:	stmia	r7!, {r0, r1, r2, r3}
    311a:	ldr	r0, [r4, #16]
    311c:	ldr	r1, [r4, #20]
    311e:	ldr	r2, [r4, #24]
    3120:	ldr	r3, [r4, #28]
    3122:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    3124:	mov	r1, r6
    3126:	ldr	r0, [r5, #8]
    3128:	bl	3760 <FatPartition::freeChain(unsigned long)>
    312c:	mov	r4, r0
    312e:	cmp	r0, #0
    3130:	beq.n	31cc <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    3132:	ldr	r1, [r5, #32]
    3134:	ldr	r0, [r5, #8]
    3136:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
    313a:	ldr	r3, [r5, #8]
    313c:	mov	r1, r0
    313e:	movs	r2, #1
    3140:	add.w	r0, r3, #36	; 0x24
    3144:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    3148:	mov	r4, r0
    314a:	cmp	r0, #0
    314c:	beq.n	31fe <FatFile::rename(FatFile*, char const*)+0x22e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    314e:	mov	r6, sp
    3150:	ldmia	r6!, {r0, r1, r2, r3}
    3152:	str	r0, [r4, #32]
    3154:	str	r1, [r4, #36]	; 0x24
    3156:	str	r2, [r4, #40]	; 0x28
    3158:	str	r3, [r4, #44]	; 0x2c
    315a:	ldmia	r6!, {r0, r1, r2, r3}
    315c:	str	r0, [r4, #48]	; 0x30
    315e:	str	r1, [r4, #52]	; 0x34
    3160:	str	r2, [r4, #56]	; 0x38
    3162:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    3164:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    3166:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    3168:	movs	r3, #8
  if (!oldFile.remove()) {
    316a:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    316c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    316e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    3172:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    3176:	bl	3df8 <FatFile::remove()>
    317a:	mov	r4, r0
    317c:	cbz	r0, 31aa <FatFile::rename(FatFile*, char const*)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    317e:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3180:	add.w	r0, r4, #36	; 0x24
    3184:	bl	3570 <FatCache::sync()>
    3188:	cbnz	r0, 31b4 <FatFile::rename(FatFile*, char const*)+0x1e4>
    318a:	movs	r4, #0
    318c:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    318e:	movw	r3, #2561	; 0xa01
    3192:	add	r0, sp, #32
    3194:	bl	26d0 <FatFile::open(FatFile*, char const*, int)>
    3198:	mov	r4, r0
    319a:	cmp	r0, #0
    319c:	bne.w	3092 <FatFile::rename(FatFile*, char const*)+0xc2>
      DBG_FAIL_MACRO;
    31a0:	mov.w	r0, #868	; 0x364
    31a4:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    31a8:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    31aa:	movw	r0, #931	; 0x3a3
    31ae:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    31b2:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
    31b4:	add.w	r0, r4, #560	; 0x230
    31b8:	bl	3570 <FatCache::sync()>
    31bc:	cmp	r0, #0
    31be:	beq.n	318a <FatFile::rename(FatFile*, char const*)+0x1ba>
    31c0:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    31c2:	ldr	r3, [r0, #0]
    31c4:	ldr	r3, [r3, #20]
    31c6:	blx	r3
    31c8:	mov	r4, r0
    31ca:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    31cc:	movw	r0, #914	; 0x392
    31d0:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    31d4:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    31d6:	movw	r0, #874	; 0x36a
    31da:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    31de:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    31e0:	movw	r0, #893	; 0x37d
    31e4:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    31e8:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    31ea:	mov.w	r0, #860	; 0x35c
    31ee:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    31f2:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    31f4:	movw	r0, #907	; 0x38b
    31f8:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    31fc:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    31fe:	movw	r0, #921	; 0x399
    3202:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    3206:	b.n	3000 <FatFile::rename(FatFile*, char const*)+0x30>

00003208 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    3208:	ldrb	r3, [r0, #0]
    320a:	cbz	r3, 3210 <FatFile::sync()+0x8>
    320c:	b.w	25c0 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    3210:	movs	r0, #1
    3212:	bx	lr

00003214 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    3214:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3218:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    321a:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    321c:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    321e:	bpl.w	338a <FatFile::write(void const*, unsigned int)+0x176>
    3222:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    3224:	lsls	r2, r3, #28
    3226:	mov	r8, r1
    3228:	bmi.w	33e4 <FatFile::write(void const*, unsigned int)+0x1d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    322c:	ldr	r2, [r4, #20]
    322e:	mvns	r3, r2
    3230:	cmp	r9, r3
    3232:	bhi.w	33da <FatFile::write(void const*, unsigned int)+0x1c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    3236:	cmp.w	r9, #0
    323a:	beq.w	33fa <FatFile::write(void const*, unsigned int)+0x1e6>
    323e:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3240:	mov.w	sl, #0
    3244:	b.n	32b2 <FatFile::write(void const*, unsigned int)+0x9e>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    3246:	cmp	r1, #0
    3248:	beq.w	334e <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    324c:	ldrb	r3, [r4, #2]
    324e:	lsls	r3, r3, #25
    3250:	bpl.w	335e <FatFile::write(void const*, unsigned int)+0x14a>
    3254:	ldr	r3, [r4, #28]
    3256:	cmp	r3, r2
    3258:	bls.w	335e <FatFile::write(void const*, unsigned int)+0x14a>
          m_curCluster++;
    325c:	adds	r1, #1
    325e:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3260:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    3264:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3268:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    326a:	bcs.n	32ec <FatFile::write(void const*, unsigned int)+0xd8>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    326c:	ldr	r2, [r4, #20]
    326e:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    3270:	ldr	r0, [r4, #8]
    3272:	cmp.w	r6, #512	; 0x200
    3276:	mov	r5, r6
    3278:	it	cs
    327a:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    327e:	cmp	r2, r3
    3280:	bcc.n	337c <FatFile::write(void const*, unsigned int)+0x168>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    3282:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    3284:	adds	r0, #36	; 0x24
    3286:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    328a:	cmp	r0, #0
    328c:	beq.w	3414 <FatFile::write(void const*, unsigned int)+0x200>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    3290:	add	r0, r7
    3292:	mov	r2, r5
    3294:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    3296:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    3298:	bl	8df4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    329c:	cmp.w	r7, #512	; 0x200
    32a0:	beq.w	33b0 <FatFile::write(void const*, unsigned int)+0x19c>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    32a4:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    32a6:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    32a8:	add	r2, r5
    src += n;
    32aa:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    32ac:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    32ae:	beq.w	33fa <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    32b2:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    32b4:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    32b6:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    32b8:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    32bc:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    32c0:	bne.n	32dc <FatFile::write(void const*, unsigned int)+0xc8>
    32c2:	cmp	r7, #0
    32c4:	beq.n	3246 <FatFile::write(void const*, unsigned int)+0x32>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    32c6:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
    32ca:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    32cc:	rsb	r5, r7, #512	; 0x200
    32d0:	cmp	r5, r6
    32d2:	it	cs
    32d4:	movcs	r5, r6
    32d6:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    32d8:	movs	r2, #1
    32da:	b.n	3284 <FatFile::write(void const*, unsigned int)+0x70>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    32dc:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    32e0:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    32e2:	cmp	r7, #0
    32e4:	bne.n	32cc <FatFile::write(void const*, unsigned int)+0xb8>
    32e6:	cmp.w	r6, #512	; 0x200
    32ea:	bcc.n	326c <FatFile::write(void const*, unsigned int)+0x58>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    32ec:	cmp.w	r6, #1024	; 0x400
    32f0:	ldr	r2, [r4, #8]
    32f2:	bcc.n	3334 <FatFile::write(void const*, unsigned int)+0x120>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    32f4:	ldrb	r3, [r2, #4]
    32f6:	ldr	r7, [r2, #44]	; 0x2c
    32f8:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    32fa:	lsrs	r0, r6, #9
    32fc:	cmp	r3, r0
    32fe:	it	cs
    3300:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    3302:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    3304:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    3308:	bcc.n	331c <FatFile::write(void const*, unsigned int)+0x108>
    330a:	add	r7, r3
    330c:	cmp	r7, r1
    330e:	bls.n	331c <FatFile::write(void const*, unsigned int)+0x108>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3310:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    3314:	mov.w	r0, #4294967295
    3318:	str	r0, [r2, #44]	; 0x2c
    331a:	ldr	r2, [r4, #8]
    331c:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    331e:	ldr	r2, [r0, #0]
    3320:	ldr	r7, [r2, #28]
    3322:	mov	r2, r8
    3324:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    3326:	cmp	r0, #0
    3328:	bne.n	32a4 <FatFile::write(void const*, unsigned int)+0x90>
        DBG_FAIL_MACRO;
    332a:	movw	r0, #1377	; 0x561
    332e:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    3332:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    3334:	ldr	r3, [r2, #44]	; 0x2c
    3336:	cmp	r3, r1
    3338:	beq.n	33a2 <FatFile::write(void const*, unsigned int)+0x18e>
    333a:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    333c:	ldr	r3, [r0, #0]
    333e:	mov	r2, r8
    3340:	ldr	r3, [r3, #24]
    3342:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    3344:	cmp	r0, #0
    3346:	beq.n	342e <FatFile::write(void const*, unsigned int)+0x21a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    3348:	mov.w	r5, #512	; 0x200
    334c:	b.n	32a4 <FatFile::write(void const*, unsigned int)+0x90>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    334e:	ldr	r1, [r4, #32]
    3350:	cmp	r1, #0
    3352:	beq.n	33c8 <FatFile::write(void const*, unsigned int)+0x1b4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    3354:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    3356:	bl	3580 <FatPartition::clusterStartSector(unsigned long) const>
    335a:	mov	r1, r0
    335c:	b.n	32e6 <FatFile::write(void const*, unsigned int)+0xd2>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    335e:	add.w	r2, r4, #16
    3362:	bl	358c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    3366:	cmp	r0, #0
    3368:	blt.n	343e <FatFile::write(void const*, unsigned int)+0x22a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    336a:	bne.n	3376 <FatFile::write(void const*, unsigned int)+0x162>
          // add cluster if at end of chain
          if (!addCluster()) {
    336c:	mov	r0, r4
    336e:	bl	247c <FatFile::addCluster()>
    3372:	cmp	r0, #0
    3374:	beq.n	3448 <FatFile::write(void const*, unsigned int)+0x234>
    3376:	ldr	r0, [r4, #8]
    3378:	ldr	r1, [r4, #16]
    337a:	b.n	3356 <FatFile::write(void const*, unsigned int)+0x142>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    337c:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    337e:	tst.w	r3, #32
    3382:	ite	eq
    3384:	moveq	r2, #1
    3386:	movne	r2, #5
    3388:	b.n	3284 <FatFile::write(void const*, unsigned int)+0x70>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    338a:	movw	r0, #1266	; 0x4f2
    338e:	bl	2440 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    3392:	ldrb	r3, [r4, #1]
    3394:	orr.w	r3, r3, #1
    3398:	strb	r3, [r4, #1]
  return -1;
    339a:	mov.w	r0, #4294967295
    339e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    33a2:	strb.w	sl, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    33a6:	mov.w	r3, #4294967295
    33aa:	str	r3, [r2, #44]	; 0x2c
    33ac:	ldr	r2, [r4, #8]
    33ae:	b.n	333a <FatFile::write(void const*, unsigned int)+0x126>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    33b0:	ldr	r0, [r4, #8]
    33b2:	adds	r0, #36	; 0x24
    33b4:	bl	3570 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    33b8:	cmp	r0, #0
    33ba:	bne.w	32a4 <FatFile::write(void const*, unsigned int)+0x90>
          DBG_FAIL_MACRO;
    33be:	movw	r0, #1357	; 0x54d
    33c2:	bl	2440 <dbgPrint(unsigned short)>
          goto fail;
    33c6:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    33c8:	mov	r0, r4
    33ca:	bl	247c <FatFile::addCluster()>
    33ce:	cmp	r0, #0
    33d0:	beq.n	3452 <FatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    33d2:	ldr	r1, [r4, #16]
    33d4:	str	r1, [r4, #32]
    33d6:	ldr	r0, [r4, #8]
    33d8:	b.n	3356 <FatFile::write(void const*, unsigned int)+0x142>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    33da:	movw	r0, #1278	; 0x4fe
    33de:	bl	2440 <dbgPrint(unsigned short)>
    goto fail;
    33e2:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    33e4:	ldr	r1, [r0, #28]
    33e6:	bl	2a40 <FatFile::seekSet(unsigned long)>
    33ea:	cmp	r0, #0
    33ec:	bne.w	322c <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    33f0:	mov.w	r0, #1272	; 0x4f8
    33f4:	bl	2440 <dbgPrint(unsigned short)>
      goto fail;
    33f8:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    33fa:	ldr	r3, [r4, #28]
    33fc:	cmp	r3, r2
    33fe:	bcc.n	341e <FatFile::write(void const*, unsigned int)+0x20a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    3400:	ldr	r3, [pc, #88]	; (345c <FatFile::write(void const*, unsigned int)+0x248>)
    3402:	ldr	r3, [r3, #0]
    3404:	cbz	r3, 3438 <FatFile::write(void const*, unsigned int)+0x224>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3406:	ldrb	r3, [r4, #2]
    3408:	orn	r3, r3, #127	; 0x7f
    340c:	strb	r3, [r4, #2]
    340e:	mov	r0, r9
    3410:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    3414:	movw	r0, #1349	; 0x545
    3418:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    341c:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    341e:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    3420:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    3422:	orn	r3, r3, #127	; 0x7f
    3426:	strb	r3, [r4, #2]
    3428:	mov	r0, r9
    342a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    342e:	movw	r0, #1388	; 0x56c
    3432:	bl	2440 <dbgPrint(unsigned short)>
        goto fail;
    3436:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
    3438:	mov	r0, r9
    343a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    343e:	movw	r0, #1295	; 0x50f
    3442:	bl	2440 <dbgPrint(unsigned short)>
            goto fail;
    3446:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    3448:	movw	r0, #1309	; 0x51d
    344c:	bl	2440 <dbgPrint(unsigned short)>
            goto fail;
    3450:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    3452:	movw	r0, #1317	; 0x525
    3456:	bl	2440 <dbgPrint(unsigned short)>
            goto fail;
    345a:	b.n	3392 <FatFile::write(void const*, unsigned int)+0x17e>
    345c:	.word	0x1fff15ac

00003460 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3460:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3462:	movs	r1, #10
    3464:	mov	r5, r0
    3466:	ldr	r0, [pc, #40]	; (3490 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3468:	ldr	r4, [pc, #40]	; (3494 <dbgPrint(unsigned short)+0x34>)
    346a:	bl	8ff4 <usb_serial_write>
    346e:	movs	r1, #16
    3470:	ldr	r0, [pc, #36]	; (3498 <dbgPrint(unsigned short)+0x38>)
    3472:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3476:	movs	r0, #46	; 0x2e
    3478:	bl	90fc <usb_serial_putchar>
    347c:	mov	r1, r5
    347e:	mov	r0, r4
    3480:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3484:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3486:	ldmia.w	sp!, {r3, r4, r5, lr}
    348a:	b.w	a624 <Print::println()>
    348e:	nop
    3490:	.word	0x0000fd18
    3494:	.word	0x1fff09c8
    3498:	.word	0x0000fd70

0000349c <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    349c:	push	{r3, r4, r5, r6, r7, lr}
    349e:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    34a0:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    34a2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    34a6:	mov	r4, r0
    34a8:	ldr	r0, [r3, #0]
    34aa:	ldr	r3, [r0, #0]
    34ac:	mov	r2, r6
    34ae:	ldr	r3, [r3, #24]
    34b0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    34b2:	mov	r5, r0
    34b4:	cbz	r0, 34e0 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    34b6:	ldrb	r3, [r4, #0]
    34b8:	lsls	r2, r3, #30
    34ba:	bmi.n	34c6 <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    34bc:	bic.w	r3, r3, #1
    34c0:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    34c2:	mov	r0, r5
    34c4:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    34c6:	ldr	r3, [r4, #4]
    34c8:	ldr	r1, [r4, #8]
    34ca:	ldr	r0, [r3, #0]
    34cc:	ldr	r7, [r3, #16]
    34ce:	ldr	r3, [r0, #0]
    34d0:	mov	r2, r6
    34d2:	ldr	r3, [r3, #24]
    34d4:	add	r1, r7
    34d6:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    34d8:	mov	r3, r0
    34da:	cbz	r0, 34ea <FatCache::sync() [clone .part.8]+0x4e>
    34dc:	ldrb	r3, [r4, #0]
    34de:	b.n	34bc <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    34e0:	movs	r0, #57	; 0x39
    34e2:	bl	3460 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    34e6:	mov	r0, r5
    34e8:	pop	{r3, r4, r5, r6, r7, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    34ea:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    34ec:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    34ee:	bl	3460 <dbgPrint(unsigned short)>
    34f2:	b.n	34c2 <FatCache::sync() [clone .part.8]+0x26>

000034f4 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    34f4:	ldr	r3, [r0, #8]
    34f6:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    34f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34fc:	mov	r6, r0
    34fe:	mov	r5, r2
  if (m_lbn != sector) {
    3500:	beq.n	3524 <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3502:	ldrb	r3, [r0, #0]
    3504:	lsls	r2, r3, #31
    3506:	mov	r7, r1
    3508:	bmi.n	3534 <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    350a:	lsls	r3, r5, #29
    350c:	bpl.n	354a <FatCache::read(unsigned long, unsigned char)+0x56>
    350e:	add.w	r4, r6, #12
    3512:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3514:	and.w	r5, r5, #3
    3518:	orrs	r5, r3
    351a:	strb	r5, [r6, #0]
    351c:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    351e:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    3520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3524:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    3528:	and.w	r5, r5, #3
    352c:	orrs	r5, r3
    352e:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    3530:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3534:	bl	349c <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    3538:	mov	r4, r0
    353a:	cmp	r0, #0
    353c:	bne.n	350a <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    353e:	movs	r0, #34	; 0x22
    3540:	bl	3460 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    3544:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    3546:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    354a:	ldr	r3, [r6, #4]
    354c:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    354e:	ldr	r3, [r0, #0]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    3550:	add.w	r4, r6, #12
    3554:	ldr	r3, [r3, #8]
    3556:	mov	r2, r4
    3558:	mov	r1, r7
    355a:	blx	r3
    355c:	mov	r8, r0
    355e:	cmp	r0, #0
    3560:	bne.n	3512 <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    3562:	movs	r0, #39	; 0x27
    3564:	bl	3460 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    3568:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    356a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    356e:	nop

00003570 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    3570:	ldrb	r3, [r0, #0]
    3572:	lsls	r3, r3, #31
    3574:	bmi.n	357a <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    3576:	movs	r0, #1
    3578:	bx	lr
    357a:	b.w	349c <FatCache::sync() [clone .part.8]>
    357e:	nop

00003580 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    3580:	ldrb	r3, [r0, #6]
    3582:	ldr	r0, [r0, #20]
    3584:	subs	r1, #2
    3586:	lsls	r1, r3
}
    3588:	add	r0, r1
    358a:	bx	lr

0000358c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    358c:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    358e:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3590:	bls.n	35fa <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    3592:	ldr	r3, [r0, #28]
    3594:	cmp	r1, r3
    3596:	mov	r4, r1
    3598:	mov	r5, r0
    359a:	bhi.n	35fa <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    359c:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    359e:	cmp	r3, #32
    35a0:	mov	r6, r2
    35a2:	beq.n	35d0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    35a4:	cmp	r3, #16
    35a6:	bne.n	35ec <FatPartition::fatGet(unsigned long, unsigned long*)+0x60>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    35a8:	ldr	r3, [r0, #24]
    35aa:	ubfx	r1, r1, #8, #8
    35ae:	add	r1, r3
    35b0:	movs	r2, #2
    35b2:	add.w	r0, r0, #560	; 0x230
    35b6:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    35ba:	cbz	r0, 3606 <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    35bc:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    35be:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    35c2:	ldr	r2, [r5, #28]
    35c4:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    35c6:	itte	ls
    35c8:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    35ca:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    35cc:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    35ce:	pop	{r4, r5, r6, pc}
    35d0:	ldr	r1, [r0, #24]
    35d2:	movs	r2, #2
    35d4:	add.w	r1, r1, r4, lsr #7
    35d8:	add.w	r0, r0, #560	; 0x230
    35dc:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    35e0:	cbz	r0, 3612 <FatPartition::fatGet(unsigned long, unsigned long*)+0x86>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    35e2:	and.w	r4, r4, #127	; 0x7f
    35e6:	ldr.w	r3, [r0, r4, lsl #2]
    35ea:	b.n	35c2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    35ec:	mov.w	r0, #260	; 0x104
    35f0:	bl	3460 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    35f4:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    35f8:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    35fa:	movs	r0, #214	; 0xd6
    35fc:	bl	3460 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    3600:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    3604:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    3606:	movs	r0, #232	; 0xe8
    3608:	bl	3460 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    360c:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    3610:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    3612:	movs	r0, #222	; 0xde
    3614:	bl	3460 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    3618:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    361c:	pop	{r4, r5, r6, pc}
    361e:	nop

00003620 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3620:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    3622:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    3624:	bls.n	3646 <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    3626:	ldr	r3, [r0, #28]
    3628:	cmp	r1, r3
    362a:	mov	r4, r1
    362c:	bhi.n	3646 <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    362e:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    3630:	cmp	r3, #32
    3632:	mov	r5, r2
    3634:	beq.n	3652 <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    3636:	cmp	r3, #16
    3638:	beq.n	3672 <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    363a:	mov.w	r0, #342	; 0x156
    363e:	bl	3460 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    3642:	movs	r0, #0
}
    3644:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    3646:	mov.w	r0, #280	; 0x118
    364a:	bl	3460 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    364e:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    3650:	pop	{r4, r5, r6, pc}
    3652:	ldr	r1, [r0, #24]
    3654:	movs	r2, #3
    3656:	add.w	r0, r0, #560	; 0x230
    365a:	add.w	r1, r1, r4, lsr #7
    365e:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    3662:	mov	r6, r0
    3664:	cbz	r0, 369e <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    3666:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    366a:	movs	r0, #1
    366c:	str.w	r5, [r6, r4, lsl #2]
    3670:	pop	{r4, r5, r6, pc}
    3672:	ldr	r3, [r0, #24]
    3674:	ubfx	r1, r1, #8, #8
    3678:	add.w	r0, r0, #560	; 0x230
    367c:	add	r1, r3
    367e:	movs	r2, #3
    3680:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    3684:	mov	r6, r0
    3686:	cbz	r0, 3692 <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3688:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    368a:	movs	r0, #1
    368c:	strh.w	r5, [r6, r4, lsl #1]
    3690:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    3692:	movw	r0, #301	; 0x12d
    3696:	bl	3460 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    369a:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    369c:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    369e:	mov.w	r0, #288	; 0x120
    36a2:	bl	3460 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    36a6:	mov	r0, r6
    36a8:	pop	{r4, r5, r6, pc}
    36aa:	nop

000036ac <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    36ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    36b0:	ldr	r4, [r0, #12]
    36b2:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    36b4:	sub	sp, #8
    36b6:	mov	r5, r0
    36b8:	mov	r7, r1
    36ba:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    36bc:	itte	cc
    36be:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    36c0:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    36c2:	movcs	r6, #1
    36c4:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    36c6:	adds	r4, #1
    if (find > m_lastCluster) {
    36c8:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    36ca:	add	r2, sp, #4
    36cc:	mov	r0, r5
    36ce:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    36d0:	bls.n	36e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    36d2:	cbnz	r6, 372c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x80>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    36d4:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    36d6:	adds	r4, #1
    if (find > m_lastCluster) {
    36d8:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    36da:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    36de:	add	r2, sp, #4
    36e0:	mov	r0, r5
    36e2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    36e4:	bhi.n	36d2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    36e6:	cmp	r7, r4
    36e8:	beq.n	371c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x70>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    36ea:	bl	358c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    36ee:	cmp	r0, #0
    36f0:	blt.n	3734 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    36f2:	beq.n	36c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    36f4:	ldr	r3, [sp, #4]
    36f6:	cmp	r3, #0
    36f8:	bne.n	36c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    36fa:	cbz	r6, 36fe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    36fc:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    36fe:	mvn.w	r2, #4026531840	; 0xf0000000
    3702:	mov	r1, r4
    3704:	mov	r0, r5
    3706:	bl	3620 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    370a:	mov	r6, r0
    370c:	cbz	r0, 3756 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xaa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    370e:	cbnz	r7, 373c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x90>
  *next = find;
  return true;

fail:
  return false;
}
    3710:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    3712:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    3716:	add	sp, #8
    3718:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    371c:	movs	r0, #101	; 0x65
    371e:	bl	3460 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    3722:	movs	r6, #0
}
    3724:	mov	r0, r6
    3726:	add	sp, #8
    3728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    372c:	movs	r0, #92	; 0x5c
    372e:	bl	3460 <dbgPrint(unsigned short)>
        goto fail;
    3732:	b.n	3722 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    3734:	movs	r0, #107	; 0x6b
    3736:	bl	3460 <dbgPrint(unsigned short)>
      goto fail;
    373a:	b.n	3722 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    373c:	mov	r1, r7
    373e:	mov	r0, r5
    3740:	mov	r2, r4
    3742:	bl	3620 <FatPartition::fatPut(unsigned long, unsigned long)>
    3746:	mov	r3, r0
    3748:	cmp	r0, #0
    374a:	bne.n	3710 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
      DBG_FAIL_MACRO;
    374c:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    374e:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    3750:	bl	3460 <dbgPrint(unsigned short)>
      goto fail;
    3754:	b.n	3724 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    3756:	movs	r0, #119	; 0x77
    3758:	bl	3460 <dbgPrint(unsigned short)>
    goto fail;
    375c:	b.n	3724 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x78>
    375e:	nop

00003760 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    3760:	push	{r4, r5, r6, r7, lr}
    3762:	mov	r5, r0
    3764:	sub	sp, #12
    3766:	mov	r4, r1
    3768:	b.n	3782 <FatPartition::freeChain(unsigned long)+0x22>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    376a:	bl	3620 <FatPartition::fatPut(unsigned long, unsigned long)>
    376e:	mov	r6, r0
    3770:	cbz	r0, 37a8 <FatPartition::freeChain(unsigned long)+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    3772:	ldr	r3, [r5, #12]
    3774:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    3776:	itt	cc
    3778:	addcc.w	r4, r4, #4294967295
    377c:	strcc	r4, [r5, #12]
    }
    cluster = next;
    377e:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    3780:	cbz	r7, 37a2 <FatPartition::freeChain(unsigned long)+0x42>
    fg = fatGet(cluster, &next);
    3782:	add	r2, sp, #4
    3784:	mov	r1, r4
    3786:	mov	r0, r5
    3788:	bl	358c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    378c:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    378e:	mov	r1, r4
    3790:	mov.w	r2, #0
    3794:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    3796:	bge.n	376a <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    3798:	movw	r0, #357	; 0x165
    379c:	bl	3460 <dbgPrint(unsigned short)>
  } while (fg);

  return true;

fail:
  return false;
    37a0:	movs	r6, #0
}
    37a2:	mov	r0, r6
    37a4:	add	sp, #12
    37a6:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    37a8:	mov.w	r0, #362	; 0x16a
    37ac:	bl	3460 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    37b0:	mov	r0, r6
    37b2:	add	sp, #12
    37b4:	pop	{r4, r5, r6, r7, pc}
    37b6:	nop

000037b8 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    37b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37bc:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    37be:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    37c0:	cmp	r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    37c2:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    37c4:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    37c8:	beq.n	37de <FatPartition::freeClusterCount()+0x26>
    37ca:	cmp	r3, #32
    37cc:	beq.n	37de <FatPartition::freeClusterCount()+0x26>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    37ce:	movw	r0, #431	; 0x1af
    37d2:	bl	3460 <dbgPrint(unsigned short)>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    37d6:	mov.w	r0, #4294967295
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
    37da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    37de:	ldr	r5, [r6, #24]
    while (todo) {
    37e0:	cmp.w	r8, #0
    37e4:	beq.n	3870 <FatPartition::freeClusterCount()+0xb8>
    37e6:	add.w	r7, r6, #560	; 0x230
    37ea:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    37ec:	mov	r1, r5
    37ee:	movs	r2, #2
    37f0:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    37f2:	adds	r5, #1
    37f4:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    37f8:	cbz	r0, 3860 <FatPartition::freeClusterCount()+0xa8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    37fa:	ldrb	r3, [r6, #7]
    37fc:	cmp	r3, #16
    37fe:	beq.n	382e <FatPartition::freeClusterCount()+0x76>
      if (todo < n) {
    3800:	cmp.w	r8, #127	; 0x7f
    3804:	bhi.n	3858 <FatPartition::freeClusterCount()+0xa0>
        n = todo;
    3806:	uxth.w	r1, r8
    380a:	mov	lr, r8
    380c:	subs	r1, #1
    380e:	uxth	r1, r1
    3810:	add.w	r1, r0, r1, lsl #2
    3814:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    3816:	ldr.w	r2, [r3, #4]!
    381a:	cbnz	r2, 381e <FatPartition::freeClusterCount()+0x66>
            free++;
    381c:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    381e:	cmp	r3, r1
    3820:	bne.n	3816 <FatPartition::freeClusterCount()+0x5e>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    3822:	subs.w	r8, r8, lr
    3826:	bne.n	37ec <FatPartition::freeClusterCount()+0x34>
    3828:	mov	r0, r4
    382a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    382e:	cmp.w	r8, #255	; 0xff
    3832:	bls.n	3876 <FatPartition::freeClusterCount()+0xbe>
    3834:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    3838:	mov	r3, lr
    383a:	subs	r1, r3, #1
    383c:	uxth	r1, r1
    383e:	add.w	r1, r0, r1, lsl #1
    3842:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    3844:	ldrh.w	r2, [r3, #2]!
    3848:	cbnz	r2, 384c <FatPartition::freeClusterCount()+0x94>
            free++;
    384a:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    384c:	cmp	r1, r3
    384e:	bne.n	3844 <FatPartition::freeClusterCount()+0x8c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    3850:	subs.w	r8, r8, lr
    3854:	bne.n	37ec <FatPartition::freeClusterCount()+0x34>
    3856:	b.n	3828 <FatPartition::freeClusterCount()+0x70>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    3858:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    385c:	mov	r1, lr
    385e:	b.n	380c <FatPartition::freeClusterCount()+0x54>
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    3860:	movw	r0, #407	; 0x197
    3864:	bl	3460 <dbgPrint(unsigned short)>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    3868:	mov.w	r0, #4294967295
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
    386c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    3870:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    3872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    3876:	uxth.w	r3, r8
    387a:	mov	lr, r8
    387c:	b.n	383a <FatPartition::freeClusterCount()+0x82>
    387e:	nop

00003880 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    3880:	push	{r3, r4, r5, r6, r7, lr}
    3882:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    3884:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    3886:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    388a:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    388c:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    388e:	str	r4, [r4, #40]	; 0x28
    3890:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    3894:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    3896:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    3898:	strb.w	r5, [r4, #36]	; 0x24
    389c:	strb.w	r5, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    38a0:	str	r3, [r4, #44]	; 0x2c
    38a2:	str.w	r3, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    38a6:	mov	r6, r2
    38a8:	cbz	r2, 38ee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x6e>
    if (part > 4) {
    38aa:	cmp	r2, #4
    38ac:	bhi.n	38e2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    38ae:	add.w	r7, r4, #36	; 0x24
    38b2:	mov	r2, r5
    38b4:	mov	r0, r7
    38b6:	mov	r1, r5
    38b8:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    38bc:	add.w	r6, r6, #268435456	; 0x10000000
    38c0:	subs	r6, #1
    38c2:	lsls	r6, r6, #4
    38c4:	add.w	r3, r0, #446	; 0x1be
    38c8:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    38ca:	cbz	r0, 38d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    38cc:	ldrb	r1, [r2, #4]
    38ce:	cbz	r1, 38d6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    38d0:	ldrb	r3, [r3, r6]
    38d2:	lsls	r3, r3, #25
    38d4:	beq.n	3910 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x90>
      DBG_FAIL_MACRO;
    38d6:	mov.w	r0, #468	; 0x1d4
    38da:	bl	3460 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    38de:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    38e0:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    38e2:	mov.w	r0, #460	; 0x1cc
    38e6:	bl	3460 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    38ea:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    38ec:	pop	{r3, r4, r5, r6, r7, pc}
    38ee:	add.w	r7, r4, #36	; 0x24
    38f2:	mov	r0, r7
    38f4:	movs	r2, #0
    38f6:	mov	r1, r6
    38f8:	bl	34f4 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    38fc:	cbz	r0, 3904 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    38fe:	ldrb	r3, [r0, #16]
    3900:	cmp	r3, #2
    3902:	beq.n	3914 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    3904:	mov.w	r0, #478	; 0x1de
    3908:	bl	3460 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    390c:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    390e:	pop	{r3, r4, r5, r6, r7, pc}
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3910:	ldr	r6, [r2, #8]
    3912:	b.n	38f2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    3914:	ldrh.w	r3, [r0, #11]
    3918:	cmp.w	r3, #512	; 0x200
    391c:	bne.n	3904 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    391e:	ldrb	r5, [r0, #13]
    3920:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    3922:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    3924:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    3926:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    3928:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    392a:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    392c:	beq.n	3956 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    392e:	movs	r2, #1
    3930:	mov	r1, r2
    3932:	b.n	3936 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    3934:	mov	r2, r3
    3936:	lsls	r1, r1, #1
    3938:	uxtb	r1, r1
    393a:	adds	r3, r2, #1
    393c:	cmp	r5, r1
    393e:	uxtb	r3, r3
    3940:	beq.n	3954 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    3942:	cmp	r3, #9
    3944:	bne.n	3934 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    3946:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
    3948:	movw	r0, #487	; 0x1e7
    394c:	bl	3460 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    3950:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    3952:	pop	{r3, r4, r5, r6, r7, pc}
    3954:	strb	r2, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    3956:	ldrh	r1, [r0, #22]
    3958:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    395a:	cbnz	r1, 3960 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    395c:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    395e:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    3960:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3962:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    3966:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    3968:	add	r7, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    396a:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    396c:	add.w	r5, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    3970:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    3974:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    3978:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    397a:	add.w	r3, r5, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    397e:	str	r5, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    3980:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    3982:	cbnz	r1, 3986 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    3984:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    3986:	subs	r6, r6, r3
    3988:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    398a:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    398e:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    3992:	adds	r1, r2, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    3994:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    3996:	str	r1, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    3998:	bls.n	39b0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x130>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    399a:	movw	r3, #65524	; 0xfff4
    399e:	cmp	r2, r3
    39a0:	ittet	hi
    39a2:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    39a4:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    39a6:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    39a8:	movhi	r3, #32
    39aa:	strb	r3, [r4, #7]
  }
  return true;
    39ac:	movs	r0, #1
    39ae:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    39b0:	movs	r3, #12
    39b2:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    39b4:	movw	r0, #525	; 0x20d
    39b8:	bl	3460 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    39bc:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    39be:	pop	{r3, r4, r5, r6, r7, pc}

000039c0 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    39c0:	cmp	r1, #4
    39c2:	bls.n	39de <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    39c4:	cmp	r1, #10
    39c6:	bls.n	39d6 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    39c8:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    39ca:	itte	ls
    39cc:	addls.w	r1, r0, r1, lsl #1
    39d0:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    39d2:	movhi	r0, #0
}
    39d4:	bx	lr
    39d6:	add.w	r1, r0, r1, lsl #1
    39da:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    39dc:	bx	lr
    39de:	add.w	r1, r0, r1, lsl #1
    39e2:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    39e6:	bx	lr

000039e8 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    39e8:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    39ea:	movs	r1, #10
    39ec:	mov	r5, r0
    39ee:	ldr	r0, [pc, #40]	; (3a18 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    39f0:	ldr	r4, [pc, #40]	; (3a1c <dbgPrint(unsigned short)+0x34>)
    39f2:	bl	8ff4 <usb_serial_write>
    39f6:	movs	r1, #14
    39f8:	ldr	r0, [pc, #36]	; (3a20 <dbgPrint(unsigned short)+0x38>)
    39fa:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    39fe:	movs	r0, #46	; 0x2e
    3a00:	bl	90fc <usb_serial_putchar>
    3a04:	mov	r1, r5
    3a06:	mov	r0, r4
    3a08:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3a0c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3a0e:	ldmia.w	sp!, {r3, r4, r5, lr}
    3a12:	b.w	a624 <Print::println()>
    3a16:	nop
    3a18:	.word	0x0000fd18
    3a1c:	.word	0x1fff09c8
    3a20:	.word	0x0000fd84

00003a24 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    3a24:	push	{r4}
    3a26:	subs	r2, r0, #1
    3a28:	add.w	r4, r0, #10
  uint8_t sum = 0;
    3a2c:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3a2e:	ldrb.w	r1, [r2, #1]!
    3a32:	lsrs	r3, r0, #1
    3a34:	orr.w	r0, r3, r0, lsl #7
    3a38:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3a3c:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3a3e:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3a40:	bne.n	3a2e <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    3a42:	ldr.w	r4, [sp], #4
    3a46:	bx	lr

00003a48 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    3a48:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    3a4a:	ldr	r3, [r1, #12]
    3a4c:	cbz	r3, 3a6c <FatFile::openCluster(FatFile*)+0x24>
    3a4e:	mov	r5, r0
    3a50:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    3a52:	movs	r2, #36	; 0x24
    3a54:	movs	r1, #0
    3a56:	bl	c34c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    3a5a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    3a5c:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    3a5e:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    3a60:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    3a62:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    3a64:	ldr	r3, [r4, #12]
    3a66:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    3a68:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    3a6a:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    3a6c:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    3a6e:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    3a72:	b.w	2684 <FatFile::openRoot(FatVolume*)>
    3a76:	nop

00003a78 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    3a78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a7c:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    3a7e:	ldrb	r3, [r0, #0]
    3a80:	movs	r4, #0
    3a82:	strb.w	r4, [sp, #12]
    3a86:	strb.w	r4, [sp, #13]
    3a8a:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    3a8e:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    3a90:	cbz	r3, 3a98 <FatFile::getName(char*, unsigned int)+0x20>
    3a92:	cmp	r2, #12
    3a94:	mov	r5, r2
    3a96:	bhi.n	3aac <FatFile::getName(char*, unsigned int)+0x34>
    DBG_FAIL_MACRO;
    3a98:	movs	r0, #129	; 0x81
    3a9a:	bl	39e8 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    3a9e:	movs	r7, #0
    3aa0:	strb.w	r7, [r9]
  return false;
}
    3aa4:	mov	r0, r7
    3aa6:	add	sp, #52	; 0x34
    3aa8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    3aac:	ldrb	r3, [r0, #3]
    3aae:	mov	r8, r0
    3ab0:	cmp	r3, #0
    3ab2:	beq.n	3b72 <FatFile::getName(char*, unsigned int)+0xfa>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    3ab4:	add	r0, sp, #12
    3ab6:	mov	r1, r8
    3ab8:	bl	3a48 <FatFile::openCluster(FatFile*)>
    3abc:	cmp	r0, #0
    3abe:	beq.n	3b84 <FatFile::getName(char*, unsigned int)+0x10c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    3ac0:	ldrb.w	r3, [r8, #3]
    3ac4:	cmp	r3, #0
    3ac6:	beq.n	3b6a <FatFile::getName(char*, unsigned int)+0xf2>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3ac8:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    3aca:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    3acc:	ldrh.w	r1, [r8, #4]
    3ad0:	subs	r1, r1, r6
    3ad2:	lsls	r1, r1, #5
    3ad4:	add	r0, sp, #12
    3ad6:	bl	2a40 <FatFile::seekSet(unsigned long)>
    3ada:	mov	r7, r0
    3adc:	cmp	r0, #0
    3ade:	beq.n	3b8c <FatFile::getName(char*, unsigned int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3ae0:	movs	r1, #0
    3ae2:	add	r0, sp, #12
    3ae4:	bl	29f0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    3ae8:	mov	sl, r0
    3aea:	cmp	r0, #0
    3aec:	beq.n	3b94 <FatFile::getName(char*, unsigned int)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    3aee:	ldrb	r3, [r0, #11]
    3af0:	cmp	r3, #15
    3af2:	bne.n	3b9c <FatFile::getName(char*, unsigned int)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    3af4:	ldrb	r3, [r0, #0]
    3af6:	and.w	r3, r3, #31
    3afa:	cmp	r6, r3
    3afc:	bne.n	3ba4 <FatFile::getName(char*, unsigned int)+0x12c>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    3afe:	subs	r3, r6, #1
    3b00:	add.w	r2, r3, r3, lsl #1
    3b04:	add.w	r2, r3, r2, lsl #2
    3b08:	mov	r3, r2
    3b0a:	add.w	r4, r9, r2
    3b0e:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    3b12:	subs	r1, r3, r2
    3b14:	uxtb	r1, r1
    3b16:	mov	r0, sl
    3b18:	bl	39c0 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    3b1c:	cbz	r0, 3b80 <FatFile::getName(char*, unsigned int)+0x108>
    3b1e:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    3b20:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    3b24:	bls.n	3b4a <FatFile::getName(char*, unsigned int)+0xd2>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    3b26:	cmp	r0, #126	; 0x7e
    3b28:	ite	ls
    3b2a:	uxtbls	r0, r0
    3b2c:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    3b2e:	cmp	r3, fp
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    3b30:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    3b34:	bne.n	3b12 <FatFile::getName(char*, unsigned int)+0x9a>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    3b36:	cmp	r5, fp
    3b38:	bls.n	3b4a <FatFile::getName(char*, unsigned int)+0xd2>
    3b3a:	ldrb.w	r3, [sl]
    3b3e:	lsls	r2, r3, #25
    name[k] = 0;
    3b40:	itt	mi
    3b42:	ldrbmi.w	r3, [sp, #4]
    3b46:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    3b4a:	add.w	r3, r9, r5
    3b4e:	ldrb.w	r2, [sp, #4]
    3b52:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    3b56:	ldrb.w	r3, [sl]
    3b5a:	lsls	r3, r3, #25
    3b5c:	bmi.n	3aa4 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    3b5e:	adds	r6, #1
    3b60:	ldrb.w	r3, [r8, #3]
    3b64:	uxtb	r6, r6
    3b66:	cmp	r3, r6
    3b68:	bcs.n	3acc <FatFile::getName(char*, unsigned int)+0x54>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    3b6a:	movs	r0, #166	; 0xa6
    3b6c:	bl	39e8 <dbgPrint(unsigned short)>
    3b70:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    3b72:	bl	4530 <FatFile::getSFN(char*)>
    3b76:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    3b78:	mov	r0, r7
    3b7a:	add	sp, #52	; 0x34
    3b7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    3b80:	mov	fp, r3
    3b82:	b.n	3b36 <FatFile::getName(char*, unsigned int)+0xbe>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    3b84:	movs	r0, #136	; 0x88
    3b86:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    3b8a:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    3b8c:	movs	r0, #141	; 0x8d
    3b8e:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3b92:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    3b94:	movs	r0, #146	; 0x92
    3b96:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3b9a:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    3b9c:	movs	r0, #150	; 0x96
    3b9e:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3ba2:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    3ba4:	movs	r0, #154	; 0x9a
    3ba6:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3baa:	b.n	3a9e <FatFile::getName(char*, unsigned int)+0x26>

00003bac <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    3bac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    3bb0:	ldrb	r3, [r0, #0]
    3bb2:	cmp	r3, #32
    3bb4:	bne.n	3bbe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    3bb6:	ldrb.w	r3, [r0, #1]!
    3bba:	cmp	r3, #32
    3bbc:	beq.n	3bb6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    3bbe:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    3bc0:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    3bc2:	cmp	r3, #0
    3bc4:	beq.w	3dd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x22a>
    3bc8:	cmp	r3, #47	; 0x2f
    3bca:	beq.n	3c2c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x80>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3bcc:	cmp	r3, #92	; 0x5c
    3bce:	beq.n	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    3bd0:	sub.w	r4, r3, #34	; 0x22
    3bd4:	uxtb	r4, r4
    3bd6:	cmp	r4, #29
    3bd8:	bls.n	3c1c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x70>
    3bda:	ldr.w	lr, [pc, #536]	; 3df4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>
    3bde:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3be0:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3be2:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3be4:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3be8:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3bea:	beq.n	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3bec:	cmp	r5, #94	; 0x5e
    3bee:	bhi.n	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3bf0:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3bf4:	sub.w	r5, r3, #34	; 0x22
    3bf8:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3bfa:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3bfc:	cmp	r3, #0
    3bfe:	beq.w	3da8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fc>
    3c02:	cmp	r3, #47	; 0x2f
    3c04:	beq.n	3c2e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x82>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3c06:	cmp	r3, #92	; 0x5c
    3c08:	lsr.w	r7, lr, r5
    3c0c:	beq.n	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    3c0e:	cmp	r5, #29
    3c10:	bhi.n	3be2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    3c12:	lsls	r7, r7, #31
    3c14:	bpl.n	3be2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3c16:	movs	r0, #0
    3c18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3c1c:	ldr	r5, [pc, #468]	; (3df4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x248>)
    3c1e:	lsr.w	r4, r5, r4
    3c22:	lsls	r4, r4, #31
    3c24:	bpl.n	3bda <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3c26:	movs	r0, #0
    3c28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3c2c:	movs	r4, #0
    3c2e:	adds	r7, r0, r4
    3c30:	mov	r6, r7
    3c32:	mov	r5, r4
    3c34:	movs	r3, #47	; 0x2f
    3c36:	b.n	3c3e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    3c38:	ldrb.w	r3, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3c3c:	adds	r5, #1
    3c3e:	cmp	r3, #32
    3c40:	beq.n	3c38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
    3c42:	cmp	r3, #47	; 0x2f
    3c44:	beq.n	3c38 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  *ptr = &path[end];
    3c46:	add	r5, r0
    3c48:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    3c4a:	cbz	r4, 3c60 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb4>
    3c4c:	mov	r2, r7
    c = path[len - 1];
    3c4e:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    3c52:	cmp	r3, #46	; 0x2e
    3c54:	beq.n	3c5c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb0>
    3c56:	cmp	r3, #32
    3c58:	bne.w	3dae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x202>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3c5c:	subs	r4, #1
    3c5e:	bne.n	3c4e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa2>
    3c60:	mov.w	r5, #4294967295
    3c64:	mov	r3, r4
  }
  // Max length of LFN is 255.
  if (len > 255) {
    return false;
  }
  fname->len = len;
    3c66:	str	r3, [r1, #4]
    3c68:	add.w	r6, r1, #23
    3c6c:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3c70:	movs	r2, #32
    3c72:	strb.w	r2, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    3c76:	cmp	r3, r6
    3c78:	bne.n	3c72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
    3c7a:	subs	r6, r0, #1
    3c7c:	movs	r2, #0
    3c7e:	b.n	3c82 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    3c80:	adds	r2, #1
    3c82:	ldrb.w	r3, [r6, #1]!
    3c86:	cmp	r3, #46	; 0x2e
    3c88:	beq.n	3c80 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
    3c8a:	cmp	r3, #32
    3c8c:	beq.n	3c80 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd4>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    3c8e:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    3c92:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    3c94:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    3c98:	beq.n	3cb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    3c9a:	ldrb	r7, [r0, r5]
    3c9c:	cmp	r7, #46	; 0x2e
    3c9e:	add.w	r6, r0, r5
    3ca2:	bne.n	3cae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x102>
    3ca4:	b.n	3cb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    3ca6:	ldrb.w	r7, [r6, #-1]!
    3caa:	cmp	r7, #46	; 0x2e
    3cac:	beq.n	3cb4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x108>
    3cae:	adds.w	r5, r5, #4294967295
    3cb2:	bcs.n	3ca6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xfa>
  for (; si < len; si++) {
    3cb4:	cmp	r2, r4
    3cb6:	mov.w	r9, #0
    3cba:	bge.w	3de0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x234>
    3cbe:	mov	r6, r9
    3cc0:	mov	sl, r9
    3cc2:	movs	r7, #7
    3cc4:	mov.w	r8, #8
    3cc8:	b.n	3d16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    3cca:	cmp	r3, #46	; 0x2e
    3ccc:	beq.n	3d5e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b2>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    3cce:	cmp	r3, #34	; 0x22
    3cd0:	beq.n	3cea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    3cd2:	cmp	r3, #124	; 0x7c
    3cd4:	beq.n	3cea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    3cd6:	sub.w	lr, r3, #42	; 0x2a
    3cda:	cmp.w	lr, #5
    3cde:	bls.n	3d72 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c6>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    3ce0:	sub.w	lr, r3, #58	; 0x3a
    3ce4:	cmp.w	lr, #5
    3ce8:	bhi.n	3d9c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f0>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    3cea:	cmp	r5, r2
    3cec:	beq.n	3d62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    3cee:	cmp	r7, r6
    3cf0:	bcc.n	3d46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    3cf2:	mov.w	ip, #0
      c = '_';
    3cf6:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    3cf8:	add.w	lr, r6, #1
    3cfc:	add.w	fp, r1, r6
    3d00:	uxtb.w	r6, lr
      if (i < 7) {
    3d04:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    3d06:	strb.w	r3, [fp, #13]
      if (i < 7) {
    3d0a:	bhi.n	3d0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
        fname->seqPos = i;
    3d0c:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    3d0e:	adds	r2, #1
    3d10:	cmp	r2, r4
    3d12:	bge.n	3d24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
    3d14:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    3d16:	cmp	r3, #32
    3d18:	bne.n	3cca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11e>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    3d1a:	adds	r2, #1
    3d1c:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    3d1e:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    3d22:	blt.n	3d14 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x168>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3d24:	ldrb	r3, [r1, #13]
    3d26:	cmp	r3, #32
    3d28:	beq.w	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    return false;
  }

  if (is83) {
    3d2c:	cmp.w	ip, #0
    3d30:	beq.n	3dc2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x216>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    3d32:	tst.w	sl, r9
    3d36:	it	ne
    3d38:	movne.w	r9, #2
    3d3c:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    3d40:	movs	r0, #1
    3d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    3d46:	cmp	r7, #10
    3d48:	beq.n	3dba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    3d4a:	cmp	r5, r2
    3d4c:	blt.n	3dba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    3d4e:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    3d50:	movs	r7, #10
      i = 8;    // Place for extension.
    3d52:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3d54:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    3d58:	mov.w	ip, #0
    3d5c:	b.n	3d0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    3d5e:	cmp	r5, r2
    3d60:	bne.n	3d1a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    3d62:	cmp	r7, #10
    3d64:	beq.n	3dba <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20e>
    3d66:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    3d68:	movs	r7, #10
      i = 8;    // Place for extension.
    3d6a:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    3d6c:	mov.w	r8, #16
    3d70:	b.n	3d0e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x162>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    3d72:	cmp	r3, #45	; 0x2d
    3d74:	bne.n	3cea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    3d76:	sub.w	lr, r3, #33	; 0x21
    3d7a:	cmp.w	lr, #93	; 0x5d
    3d7e:	bhi.n	3cea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    3d80:	cmp	r5, r2
    3d82:	beq.n	3d62 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1b6>
    3d84:	cmp	r7, r6
    3d86:	bcc.n	3d46 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19a>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    3d88:	sub.w	lr, r3, #97	; 0x61
    3d8c:	cmp.w	lr, #25
    3d90:	bhi.n	3de4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x238>
        c += 'A' - 'a';
    3d92:	subs	r3, #32
    3d94:	uxtb	r3, r3
        lc |= bit;
    3d96:	orr.w	r9, r8, r9
    3d9a:	b.n	3cf8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    3d9c:	sub.w	lr, r3, #91	; 0x5b
    3da0:	cmp.w	lr, #2
    3da4:	bls.n	3cea <FatFile::parsePathName(char const*, fname_t*, char const**)+0x13e>
    3da6:	b.n	3d76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ca>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3da8:	str	r7, [r2, #0]
    3daa:	adds	r7, r0, r4
    3dac:	b.n	3c4c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    3dae:	cmp	r4, #255	; 0xff
    3db0:	bgt.w	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    3db4:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    3db6:	mov	r3, r4
    3db8:	b.n	3c66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    3dba:	ldrb	r3, [r1, #13]
    3dbc:	cmp	r3, #32
    3dbe:	beq.w	3c16 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3dc2:	ldrb	r3, [r1, #12]
    3dc4:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3dc6:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    3dc8:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    3dca:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3dcc:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    3dce:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    3dd0:	strb	r2, [r3, #14]
    3dd2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3dd6:	str	r0, [r2, #0]
    3dd8:	mov	r4, r3
    3dda:	mov.w	r5, #4294967295
    3dde:	b.n	3c66 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xba>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    3de0:	mov	sl, r9
    3de2:	b.n	3d24 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x178>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    3de4:	sub.w	lr, r3, #65	; 0x41
    3de8:	cmp.w	lr, #25
        uc |= bit;
    3dec:	it	ls
    3dee:	orrls.w	sl, r8, sl
    3df2:	b.n	3cf8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14c>
    3df4:	.word	0x35000101

00003df8 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    3df8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    3dfc:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    3dfe:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    3e00:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    3e02:	and.w	r3, r3, #2
    3e06:	strb.w	r2, [sp, #4]
    3e0a:	strb.w	r2, [sp, #5]
    3e0e:	strb.w	r2, [sp, #6]
    3e12:	cmp	r3, #0
    3e14:	beq.n	3e90 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    3e16:	ldr	r1, [r0, #32]
    3e18:	mov	r6, r0
    3e1a:	cbnz	r1, 3e74 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    3e1c:	movs	r1, #1
    3e1e:	mov	r0, r6
    3e20:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3e24:	mov	r7, r0
    3e26:	cmp	r0, #0
    3e28:	beq.w	3f54 <FatFile::remove()+0x15c>
    3e2c:	subs	r1, r7, #1
    3e2e:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    3e32:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3e34:	lsrs	r2, r4, #1
    3e36:	ldrb.w	r5, [r1, #1]!
    3e3a:	orr.w	r3, r2, r4, lsl #7
    3e3e:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3e42:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3e44:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3e46:	bne.n	3e34 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    3e48:	mov.w	r8, #229	; 0xe5
    3e4c:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    3e50:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    3e52:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3e54:	add.w	r0, r5, #36	; 0x24
    3e58:	strb	r3, [r6, #0]
  m_flags = 0;
    3e5a:	strb	r3, [r6, #2]
    3e5c:	bl	3570 <FatCache::sync()>
    3e60:	cbnz	r0, 3ea4 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    3e62:	movw	r0, #593	; 0x251
    3e66:	bl	39e8 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3e6a:	movs	r5, #0
}
    3e6c:	mov	r0, r5
    3e6e:	add	sp, #40	; 0x28
    3e70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    3e74:	ldr	r0, [r0, #8]
    3e76:	bl	3760 <FatPartition::freeChain(unsigned long)>
    3e7a:	mov	r5, r0
    3e7c:	cmp	r0, #0
    3e7e:	bne.n	3e1c <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    3e80:	movw	r0, #573	; 0x23d
    3e84:	bl	39e8 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    3e88:	mov	r0, r5
    3e8a:	add	sp, #40	; 0x28
    3e8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    3e90:	mov.w	r0, #568	; 0x238
    3e94:	and.w	r5, r3, #255	; 0xff
    3e98:	bl	39e8 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    3e9c:	mov	r0, r5
    3e9e:	add	sp, #40	; 0x28
    3ea0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ea4:	add.w	r0, r5, #560	; 0x230
    3ea8:	bl	3570 <FatCache::sync()>
    3eac:	cmp	r0, #0
    3eae:	beq.n	3e62 <FatFile::remove()+0x6a>
    3eb0:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3eb2:	ldr	r3, [r0, #0]
    3eb4:	ldr	r3, [r3, #20]
    3eb6:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3eb8:	mov	r5, r0
    3eba:	cmp	r0, #0
    3ebc:	beq.n	3e62 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    3ebe:	ldrb	r3, [r6, #3]
    3ec0:	cmp	r3, #0
    3ec2:	beq.n	3e6c <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    3ec4:	add	r0, sp, #4
    3ec6:	mov	r1, r6
    3ec8:	bl	3a48 <FatFile::openCluster(FatFile*)>
    3ecc:	mov	r3, r0
    3ece:	cmp	r0, #0
    3ed0:	beq.n	3f48 <FatFile::remove()+0x150>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    3ed2:	ldrb	r3, [r6, #3]
    3ed4:	movs	r7, #1
    3ed6:	cbnz	r3, 3f1c <FatFile::remove()+0x124>
    3ed8:	b.n	3f60 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3eda:	add	r0, sp, #4
    3edc:	bl	29f0 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    3ee0:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    3ee2:	mov	r3, r0
    3ee4:	cmp	r0, #0
    3ee6:	beq.n	3f6c <FatFile::remove()+0x174>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    3ee8:	ldrb	r2, [r0, #11]
    3eea:	cmp	r2, #15
    3eec:	bne.n	3f3c <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    3eee:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    3ef0:	and.w	r0, r2, #31
    3ef4:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    3ef6:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    3ef8:	bne.n	3f3c <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    3efa:	ldrb	r1, [r3, #13]
    3efc:	cmp	r1, r4
    3efe:	bne.n	3f3c <FatFile::remove()+0x144>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    3f00:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    3f04:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    3f06:	ldrb.w	r3, [r1, #36]	; 0x24
    3f0a:	orr.w	r3, r3, #1
    3f0e:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    3f12:	lsls	r3, r2, #25
    3f14:	bmi.n	3f78 <FatFile::remove()+0x180>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    3f16:	ldrb	r3, [r6, #3]
    3f18:	cmp	r3, r7
    3f1a:	bcc.n	3f60 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    3f1c:	ldrh	r1, [r6, #4]
    3f1e:	subs	r1, r1, r7
    3f20:	lsls	r1, r1, #5
    3f22:	add	r0, sp, #4
    3f24:	bl	2a40 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3f28:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    3f2a:	mov	r3, r0
    3f2c:	cmp	r0, #0
    3f2e:	bne.n	3eda <FatFile::remove()+0xe2>
      DBG_FAIL_MACRO;
    3f30:	movw	r0, #606	; 0x25e
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f34:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    3f36:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3f3a:	b.n	3e6c <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    3f3c:	movw	r0, #617	; 0x269
    3f40:	bl	39e8 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f44:	movs	r5, #0
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    3f46:	b.n	3e6c <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    3f48:	movw	r0, #601	; 0x259
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f4c:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    3f4e:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    3f52:	b.n	3e6c <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    3f54:	movw	r0, #579	; 0x243
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f58:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    3f5a:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    3f5e:	b.n	3e6c <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    3f60:	mov.w	r0, #632	; 0x278
    3f64:	bl	39e8 <dbgPrint(unsigned short)>

fail:
  return false;
    3f68:	movs	r5, #0
    3f6a:	b.n	3e6c <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    3f6c:	movw	r0, #611	; 0x263
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f70:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    3f72:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    3f76:	b.n	3e6c <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    3f78:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3f7a:	add.w	r0, r4, #36	; 0x24
    3f7e:	bl	3570 <FatCache::sync()>
    3f82:	cbnz	r0, 3f90 <FatFile::remove()+0x198>
        DBG_FAIL_MACRO;
    3f84:	movw	r0, #625	; 0x271
    3f88:	bl	39e8 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3f8c:	movs	r5, #0
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
        goto fail;
    3f8e:	b.n	3e6c <FatFile::remove()+0x74>
    3f90:	add.w	r0, r4, #560	; 0x230
    3f94:	bl	3570 <FatCache::sync()>
    3f98:	cmp	r0, #0
    3f9a:	beq.n	3f84 <FatFile::remove()+0x18c>
    3f9c:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3f9e:	ldr	r3, [r0, #0]
    3fa0:	ldr	r3, [r3, #20]
    3fa2:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3fa4:	cmp	r0, #0
    3fa6:	beq.n	3f84 <FatFile::remove()+0x18c>
    3fa8:	b.n	3e6c <FatFile::remove()+0x74>
    3faa:	nop

00003fac <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    3fac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    3fb0:	ldrb	r3, [r1, #0]
    3fb2:	lsls	r2, r3, #31
    3fb4:	bpl.n	40a4 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    3fb6:	ldrb	r7, [r1, #12]
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    3fb8:	adds	r3, r1, r7
    3fba:	mov	r5, r1
    3fbc:	ldrb	r2, [r3, #13]
    3fbe:	cmp	r2, #126	; 0x7e
    3fc0:	mov	r8, r0
    3fc2:	beq.n	3fec <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    3fc4:	ldrb	r3, [r3, #14]
    3fc6:	cmp	r3, #49	; 0x31
    3fc8:	beq.n	3fec <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3fca:	movs	r1, #9
    3fcc:	ldr	r0, [pc, #260]	; (40d4 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    3fce:	bl	8ff4 <usb_serial_write>
    3fd2:	movs	r1, #79	; 0x4f
    3fd4:	ldr	r0, [pc, #256]	; (40d8 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    3fd6:	bl	8ff4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3fda:	movw	r1, #645	; 0x285
    3fde:	ldr	r0, [pc, #252]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    3fe0:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3fe4:	ldr	r0, [pc, #244]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    3fe6:	bl	a624 <Print::println()>
    3fea:	b.n	3fea <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    3fec:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3fee:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    3ff2:	ldr	r1, [r5, #4]
    3ff4:	ldr	r2, [r5, #8]
    3ff6:	adds	r3, r6, r1
    3ff8:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    3ffa:	cbz	r1, 400e <FatFile::lfnUniqueSfn(fname_t*)+0x62>
    3ffc:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    3ffe:	ldrb.w	r1, [r2], #1
    4002:	add.w	r3, r3, r3, lsl #5
    4006:	eors	r3, r1
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    4008:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    400a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    400c:	bne.n	3ffe <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    400e:	cmp	r7, #3
    4010:	it	cs
    4012:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    4014:	adds	r2, r7, #4
    4016:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    4018:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    401c:	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    401e:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4020:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    4022:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4024:	ite	ls
    4026:	addls	r1, #48	; 0x30
    4028:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    402a:	cmp	r2, r7
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    402c:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    4030:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    4032:	bhi.n	4018 <FatFile::lfnUniqueSfn(fname_t*)+0x6c>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    4034:	adds	r3, r5, r7
    4036:	movs	r2, #126	; 0x7e
    4038:	strb	r2, [r3, #13]
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    403a:	movs	r1, #0
    403c:	mov	r0, r8
    403e:	bl	2a40 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    4042:	movs	r1, #1
    4044:	mov	r0, r8
    4046:	bl	29f0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    404a:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    404c:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    404e:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    4050:	cbz	r0, 407a <FatFile::lfnUniqueSfn(fname_t*)+0xce>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    4052:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4054:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    4056:	cbz	r3, 4080 <FatFile::lfnUniqueSfn(fname_t*)+0xd4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    4058:	ldrb	r3, [r4, #11]
    405a:	lsls	r3, r3, #28
    405c:	bmi.n	4042 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
    405e:	bl	c220 <memcmp>
    4062:	mov	r4, r0
    4064:	cmp	r0, #0
    4066:	bne.n	4042 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    4068:	cmp	r6, #99	; 0x63
    406a:	bne.n	4086 <FatFile::lfnUniqueSfn(fname_t*)+0xda>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    406c:	movw	r0, #685	; 0x2ad
    4070:	bl	39e8 <dbgPrint(unsigned short)>

fail:
  return false;
    4074:	mov	r0, r4
    4076:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    407a:	ldrb.w	r3, [r8, #1]
    407e:	cbnz	r3, 40c6 <FatFile::lfnUniqueSfn(fname_t*)+0x11a>

fail:
  return false;

done:
  return true;
    4080:	movs	r0, #1
    4082:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4086:	movs	r1, #79	; 0x4f
    4088:	ldr	r0, [pc, #76]	; (40d8 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    408a:	bl	8ff4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    408e:	movw	r1, #651	; 0x28b
    4092:	ldr	r0, [pc, #72]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    4094:	bl	a6f0 <Print::print(long)>
    4098:	adds	r6, #1
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    409a:	ldr	r0, [pc, #64]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    409c:	bl	a624 <Print::println()>
    40a0:	uxth	r6, r6
    40a2:	b.n	3ff2 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    40a4:	movs	r1, #9
    40a6:	ldr	r0, [pc, #44]	; (40d4 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    40a8:	bl	8ff4 <usb_serial_write>
    40ac:	movs	r1, #79	; 0x4f
    40ae:	ldr	r0, [pc, #40]	; (40d8 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    40b0:	bl	8ff4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    40b4:	mov.w	r1, #644	; 0x284
    40b8:	ldr	r0, [pc, #32]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    40ba:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    40be:	ldr	r0, [pc, #28]	; (40dc <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    40c0:	bl	a624 <Print::println()>
    40c4:	b.n	40c4 <FatFile::lfnUniqueSfn(fname_t*)+0x118>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    40c6:	mov.w	r0, #672	; 0x2a0
    40ca:	bl	39e8 <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    40ce:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    40d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40d4:	.word	0x0000fd94
    40d8:	.word	0x0000fda0
    40dc:	.word	0x1fff09c8

000040e0 <FatFile::open(FatFile*, fname_t*, int)>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    40e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40e4:	mov	r6, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    40e6:	ldrb	r1, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    40e8:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    40ea:	tst.w	r1, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    40ee:	str	r0, [sp, #32]
    40f0:	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    40f2:	beq.n	40f8 <FatFile::open(FatFile*, fname_t*, int)+0x18>
    40f4:	ldrb	r3, [r0, #0]
    40f6:	cbz	r3, 410a <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    40f8:	movw	r0, #313	; 0x139
    40fc:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    4100:	movs	r5, #0
}
    4102:	mov	r0, r5
    4104:	add	sp, #52	; 0x34
    4106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    410a:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    410c:	ldr.w	r8, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    4110:	lsls	r3, r3, #30
    4112:	mov	fp, r2
    4114:	bne.n	4198 <FatFile::open(FatFile*, fname_t*, int)+0xb8>
    4116:	movs	r7, #1
    4118:	movs	r1, #0
    411a:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    411c:	mov	r9, r1
    411e:	bl	2a40 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4122:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    4126:	str.w	r9, [sp, #28]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    412a:	str.w	r9, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    412e:	mov	r4, r9
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    4130:	mov	sl, r9
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    4132:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    4136:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    4138:	movs	r1, #1
    413a:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    413c:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    413e:	bl	29f0 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    4142:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    4146:	mov	r3, r0
    4148:	cmp	r0, #0
    414a:	beq.w	4262 <FatFile::open(FatFile*, fname_t*, int)+0x182>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    414e:	ldrb	r2, [r0, #0]
    4150:	cmp	r2, #229	; 0xe5
    4152:	beq.n	41c4 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
    4154:	cmp	r2, #0
    4156:	beq.n	41c4 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    4158:	cmp	r4, r7
    415a:	it	cc
    415c:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    415e:	cmp	r2, #46	; 0x2e
    4160:	beq.n	41be <FatFile::open(FatFile*, fname_t*, int)+0xde>
    4162:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    4164:	cmp	r1, #15
    4166:	beq.n	41e0 <FatFile::open(FatFile*, fname_t*, int)+0x100>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    4168:	and.w	r1, r1, #8
    416c:	and.w	r2, r1, #255	; 0xff
    4170:	cbnz	r1, 41be <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (lfnOrd) {
    4172:	cmp.w	sl, #0
    4176:	bne.w	44ca <FatFile::open(FatFile*, fname_t*, int)+0x3ea>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    417a:	mov	r0, r3
    417c:	movs	r2, #11
    417e:	ldr	r1, [sp, #16]
    4180:	bl	c220 <memcmp>
    4184:	cmp	r0, #0
    4186:	bne.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    4188:	ldrb.w	r3, [fp]
    418c:	lsls	r0, r3, #31
    418e:	bpl.w	44aa <FatFile::open(FatFile*, fname_t*, int)+0x3ca>
          goto found;
        }
        fnameFound = true;
    4192:	movs	r3, #1
    4194:	str	r3, [sp, #20]
    4196:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    4198:	ldr	r7, [pc, #744]	; (4484 <FatFile::open(FatFile*, fname_t*, int)+0x3a4>)
    419a:	add.w	r3, r8, #12
    419e:	umull	r3, r7, r7, r3
    41a2:	lsrs	r7, r7, #2
    41a4:	adds	r7, #1
    41a6:	uxtb	r7, r7
    41a8:	b.n	4118 <FatFile::open(FatFile*, fname_t*, int)+0x38>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    41aa:	ldr	r1, [sp, #12]
    41ac:	subs	r1, #1
    41ae:	uxtb	r1, r1
    41b0:	cmp	r2, r1
    41b2:	str	r1, [sp, #12]
    41b4:	bne.n	41be <FatFile::open(FatFile*, fname_t*, int)+0xde>
    41b6:	ldrb	r2, [r3, #13]
    41b8:	ldr	r1, [sp, #28]
    41ba:	cmp	r1, r2
    41bc:	beq.n	41f6 <FatFile::open(FatFile*, fname_t*, int)+0x116>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    41be:	mov.w	sl, #0
    41c2:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    41c4:	cmp	r4, #0
    41c6:	it	eq
    41c8:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    41ca:	cmp	r4, r7
        freeFound++;
    41cc:	itt	cc
    41ce:	addcc	r4, #1
    41d0:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    41d2:	cmp	r2, #0
    41d4:	beq.n	426a <FatFile::open(FatFile*, fname_t*, int)+0x18a>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    41d6:	cmp	r2, #229	; 0xe5
    41d8:	bne.n	415e <FatFile::open(FatFile*, fname_t*, int)+0x7e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    41da:	mov.w	sl, #0
    41de:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    41e0:	cmp.w	sl, #0
    41e4:	bne.n	41aa <FatFile::open(FatFile*, fname_t*, int)+0xca>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    41e6:	lsls	r5, r2, #25
    41e8:	bpl.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    41ea:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    41ee:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    41f0:	str.w	sl, [sp, #12]
        checksum = ldir->checksum;
    41f4:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    41f6:	ldr	r2, [sp, #12]
    41f8:	subs	r2, #1
    41fa:	add.w	r5, r2, r2, lsl #1
    41fe:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    4202:	cmp	r8, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    4204:	mov	r2, r5
      if (k >= len) {
    4206:	bls.n	41be <FatFile::open(FatFile*, fname_t*, int)+0xde>
    4208:	add.w	r1, r5, #13
    420c:	str.w	sl, [sp, #36]	; 0x24
    4210:	mov	sl, r1
    4212:	b.n	423e <FatFile::open(FatFile*, fname_t*, int)+0x15e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    4214:	ldr.w	r0, [fp, #8]
    4218:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    421a:	cmp.w	ip, #25
    421e:	it	ls
    4220:	addls	r1, #32
    4222:	sub.w	r0, r2, #65	; 0x41
    4226:	it	ls
    4228:	uxtbls	r1, r1
    422a:	cmp	r0, #25
    422c:	itt	ls
    422e:	addls	r2, #32
    4230:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    4232:	cmp	r2, r1
    4234:	bne.n	41be <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    4236:	cmp	lr, sl
    4238:	beq.w	43c6 <FatFile::open(FatFile*, fname_t*, int)+0x2e6>
    423c:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    423e:	subs	r1, r2, r5
    4240:	uxtb	r1, r1
    4242:	mov	r0, r3
    4244:	bl	39c0 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    4248:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    424a:	cmp	r8, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    424c:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    4250:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    4254:	beq.w	4474 <FatFile::open(FatFile*, fname_t*, int)+0x394>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    4258:	cmp	r0, #255	; 0xff
    425a:	bls.n	4214 <FatFile::open(FatFile*, fname_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    425c:	mov.w	sl, #0
    4260:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    4262:	ldrb	r2, [r6, #1]
    4264:	cmp	r2, #0
    4266:	bne.w	43cc <FatFile::open(FatFile*, fname_t*, int)+0x2ec>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    426a:	ldr	r2, [sp, #24]
    426c:	mov	r3, r2
    426e:	lsls	r2, r3, #22
    4270:	bpl.n	427c <FatFile::open(FatFile*, fname_t*, int)+0x19c>
    4272:	and.w	r3, r3, #3
    4276:	subs	r3, #1
    4278:	cmp	r3, #1
    427a:	bls.n	428e <FatFile::open(FatFile*, fname_t*, int)+0x1ae>
    DBG_FAIL_MACRO;
    427c:	mov.w	r0, #412	; 0x19c
    4280:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    4284:	movs	r5, #0
}
    4286:	mov	r0, r5
    4288:	add	sp, #52	; 0x34
    428a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    428e:	cmp	r4, #0
    4290:	it	eq
    4292:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    4294:	cmp	r4, r7
    4296:	bcc.n	42a0 <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
    4298:	b.n	42ec <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    429a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    429c:	cmp	r7, r4
    429e:	bls.n	42ec <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    dir = dirFile->readDirCache();
    42a0:	movs	r1, #0
    42a2:	mov	r0, r6
    42a4:	bl	29f0 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    42a8:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    42aa:	cmp	r0, #0
    42ac:	bne.n	429a <FatFile::open(FatFile*, fname_t*, int)+0x1ba>
      if (dirFile->getError()) {
    42ae:	ldrb	r2, [r6, #1]
    42b0:	mov	r3, r0
    42b2:	cbz	r2, 42c8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        DBG_FAIL_MACRO;
    42b4:	mov.w	r0, #424	; 0x1a8
    goto fail;
  }
  return true;

fail:
  return false;
    42b8:	mov	r5, r3

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    42ba:	bl	39e8 <dbgPrint(unsigned short)>
        goto fail;
    42be:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    42c0:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    42c2:	ldrb	r3, [r3, #4]
    42c4:	cmp	r3, #1
    42c6:	bhi.n	42ec <FatFile::open(FatFile*, fname_t*, int)+0x20c>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    42c8:	cmp	r7, r4
    42ca:	bls.n	42ec <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    42cc:	mov	r0, r6
    42ce:	bl	24c0 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    42d2:	adds	r4, #16
    42d4:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    42d6:	cmp	r0, #0
    42d8:	bne.n	42c0 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    42da:	mov	r5, r0
      DBG_FAIL_MACRO;
    42dc:	movw	r0, #435	; 0x1b3
    42e0:	bl	39e8 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    42e4:	mov	r0, r5
    42e6:	add	sp, #52	; 0x34
    42e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    42ec:	ldr	r3, [sp, #20]
    42ee:	cbz	r3, 4300 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    if (!dirFile->lfnUniqueSfn(fname)) {
    42f0:	mov	r1, fp
    42f2:	mov	r0, r6
    42f4:	bl	3fac <FatFile::lfnUniqueSfn(fname_t*)>
    42f8:	mov	r5, r0
    42fa:	cmp	r0, #0
    42fc:	beq.w	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    4300:	mov.w	r1, r9, lsl #5
    4304:	mov	r0, r6
    4306:	bl	2a40 <FatFile::seekSet(unsigned long)>
    430a:	mov	r5, r0
    430c:	cmp	r0, #0
    430e:	beq.w	44dc <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    4312:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    4314:	ands.w	sl, r7, #255	; 0xff
    4318:	beq.n	43e0 <FatFile::open(FatFile*, fname_t*, int)+0x300>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    431a:	orr.w	r5, sl, #64	; 0x40
    431e:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    4320:	mov	r7, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    4322:	mov.w	r9, #0
    4326:	movs	r1, #0
    4328:	mov	r0, r6
    432a:	bl	29f0 <FatFile::readDirCache(bool)>
    if (!ldir) {
    432e:	cmp	r0, #0
    4330:	beq.w	44bc <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    4334:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    4336:	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    433a:	cmp	sl, r7
    433c:	orr.w	r3, r3, #1
    4340:	ite	ne
    4342:	movne	r4, r7
    4344:	moveq	r4, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    4346:	movs	r1, #15
    4348:	strb.w	r3, [r2, #36]	; 0x24
    434c:	add.w	lr, fp, #23
    4350:	add.w	r3, fp, #12
    ldir->mustBeZero1 = 0;
    4354:	strb.w	r9, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    4358:	strb	r4, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    435a:	strb	r1, [r0, #11]
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    435c:	movs	r2, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    435e:	ldrb.w	ip, [r3, #1]!
    4362:	lsrs	r1, r2, #1
    4364:	orr.w	r2, r1, r2, lsl #7
    4368:	uxtab	r2, ip, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    436c:	cmp	r3, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    436e:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    4370:	bne.n	435e <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    4372:	and.w	r4, r4, #31
    4376:	subs	r4, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    4378:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    437a:	add.w	r3, r4, r4, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    437e:	ldr.w	r2, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4382:	strh.w	r9, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    4386:	add.w	r4, r4, r3, lsl #2
    438a:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    438c:	movs	r3, #0
    438e:	b.n	43ae <FatFile::open(FatFile*, fname_t*, int)+0x2ce>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    4390:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    4392:	ldrb	r1, [r2, r4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    4394:	bls.n	43c0 <FatFile::open(FatFile*, fname_t*, int)+0x2e0>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    4396:	cmp	r3, #10
    4398:	ite	ls
    439a:	strhls	r1, [r0, #0]
    439c:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    439e:	adds	r3, #1
    43a0:	uxtb	r3, r3
    43a2:	cmp	r3, #13
    43a4:	add.w	r4, r4, #1
    43a8:	add.w	r0, r0, #2
    43ac:	beq.n	43d8 <FatFile::open(FatFile*, fname_t*, int)+0x2f8>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    43ae:	cmp	r8, r4
    43b0:	bhi.n	4390 <FatFile::open(FatFile*, fname_t*, int)+0x2b0>
    43b2:	ite	ne
    43b4:	movne.w	r1, #4294967295
    43b8:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    43ba:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    43bc:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    43be:	bhi.n	4396 <FatFile::open(FatFile*, fname_t*, int)+0x2b6>
    43c0:	strh.w	r1, [r0, #-3]
    43c4:	b.n	439e <FatFile::open(FatFile*, fname_t*, int)+0x2be>
    43c6:	ldr.w	sl, [sp, #36]	; 0x24
    43ca:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    43cc:	movw	r0, #325	; 0x145
    goto fail;
  }
  return true;

fail:
  return false;
    43d0:	mov	r5, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    43d2:	bl	39e8 <dbgPrint(unsigned short)>
        goto fail;
    43d6:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    43d8:	subs	r7, #1
    43da:	ands.w	r7, r7, #255	; 0xff
    43de:	bne.n	4326 <FatFile::open(FatFile*, fname_t*, int)+0x246>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    43e0:	movs	r1, #0
    43e2:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    43e4:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    43e6:	bl	29f0 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    43ea:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    43ee:	mov	r4, r0
    43f0:	cmp	r0, #0
    43f2:	beq.n	44e6 <FatFile::open(FatFile*, fname_t*, int)+0x406>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    43f4:	movs	r2, #32
    43f6:	movs	r1, #0
    43f8:	bl	c34c <memset>
  memcpy(dir->name, fname->sfn, 11);
    43fc:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    43fe:	ldr	r2, [pc, #136]	; (4488 <FatFile::open(FatFile*, fname_t*, int)+0x3a8>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    4400:	ldr.w	r1, [r3, #13]!
    4404:	ldr	r0, [r3, #4]
    4406:	str	r0, [r4, #4]
    4408:	str	r1, [r4, #0]
    440a:	ldrh	r1, [r3, #8]
    440c:	ldrb	r3, [r3, #10]
    440e:	strb	r3, [r4, #10]
    4410:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4412:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    4416:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    4418:	and.w	r3, r3, #24
    441c:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    441e:	cbz	r7, 4444 <FatFile::open(FatFile*, fname_t*, int)+0x364>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    4420:	add.w	r2, sp, #43	; 0x2b
    4424:	add.w	r1, sp, #46	; 0x2e
    4428:	add	r0, sp, #44	; 0x2c
    442a:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    442c:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    4430:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    4434:	ldrb.w	r1, [sp, #43]	; 0x2b
    4438:	strb	r1, [r4, #13]
    443a:	strh	r3, [r4, #16]
    443c:	strh	r3, [r4, #18]
    443e:	strh	r3, [r4, #24]
    4440:	strh	r2, [r4, #14]
    4442:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    4444:	ldr	r2, [r6, #8]
    4446:	ldrb.w	r3, [r2, #36]	; 0x24
    444a:	orr.w	r3, r3, #1
    444e:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    4452:	mov	r2, r5
    4454:	str.w	sl, [sp]
    4458:	ldr	r3, [sp, #24]
    445a:	ldr	r0, [sp, #32]
    445c:	mov	r1, r6
    445e:	bl	2b64 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    4462:	mov	r5, r0
    4464:	cmp	r0, #0
    4466:	bne.w	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    446a:	mov.w	r0, #498	; 0x1f2
    446e:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    4472:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    4474:	cmp	r0, #0
    4476:	ldr.w	sl, [sp, #36]	; 0x24
    447a:	it	ne
    447c:	movne.w	sl, #0
    4480:	b.n	4138 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    4482:	nop
    4484:	.word	0x4ec4ec4f
    4488:	.word	0x1fff15ac
    448c:	subs	r4, r3, #1
    448e:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    4490:	ldrb.w	r0, [r4, #1]!
    4494:	lsrs	r1, r2, #1
    4496:	orr.w	r2, r1, r2, lsl #7
    449a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    449e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    44a0:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    44a2:	bne.n	4490 <FatFile::open(FatFile*, fname_t*, int)+0x3b0>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    44a4:	ldr	r3, [sp, #28]
    44a6:	cmp	r3, r2
    44a8:	bne.n	44d0 <FatFile::open(FatFile*, fname_t*, int)+0x3f0>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    44aa:	ldr	r3, [sp, #24]
    44ac:	lsls	r1, r3, #20
    44ae:	bpl.n	4452 <FatFile::open(FatFile*, fname_t*, int)+0x372>
    DBG_FAIL_MACRO;
    44b0:	mov.w	r0, #404	; 0x194
    44b4:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    44b8:	movs	r5, #0

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
    44ba:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    44bc:	mov	r3, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    44be:	movw	r0, #457	; 0x1c9
    goto fail;
  }
  return true;

fail:
  return false;
    44c2:	mov	r5, r3
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    44c4:	bl	39e8 <dbgPrint(unsigned short)>
      goto fail;
    44c8:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    44ca:	ldr	r1, [sp, #12]
    44cc:	cmp	r1, #1
    44ce:	beq.n	448c <FatFile::open(FatFile*, fname_t*, int)+0x3ac>
          goto found;
        }
        DBG_FAIL_MACRO;
    44d0:	movw	r0, #387	; 0x183
    44d4:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    44d8:	movs	r5, #0
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
    44da:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    44dc:	mov.w	r0, #450	; 0x1c2
    44e0:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    44e4:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    44e6:	movw	r0, #471	; 0x1d7
    goto fail;
  }
  return true;

fail:
  return false;
    44ea:	mov	r5, r4
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    44ec:	bl	39e8 <dbgPrint(unsigned short)>
    goto fail;
    44f0:	b.n	4102 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    44f2:	nop

000044f4 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    44f4:	push	{r3, r4, r5, lr}
    44f6:	movs	r1, #10
    44f8:	mov	r5, r0
    44fa:	ldr	r0, [pc, #40]	; (4524 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    44fc:	ldr	r4, [pc, #40]	; (4528 <dbgPrint(unsigned short)+0x34>)
    44fe:	bl	8ff4 <usb_serial_write>
    4502:	movs	r1, #14
    4504:	ldr	r0, [pc, #36]	; (452c <dbgPrint(unsigned short)+0x38>)
    4506:	bl	8ff4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    450a:	movs	r0, #46	; 0x2e
    450c:	bl	90fc <usb_serial_putchar>
    4510:	mov	r1, r5
    4512:	mov	r0, r4
    4514:	bl	a6f0 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4518:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    451a:	ldmia.w	sp!, {r3, r4, r5, lr}
    451e:	b.w	a624 <Print::println()>
    4522:	nop
    4524:	.word	0x0000fd18
    4528:	.word	0x1fff09c8
    452c:	.word	0x0000fdf0

00004530 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    4530:	push	{r3, r4, r5, r6, r7, lr}
    4532:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    4534:	cbz	r4, 4592 <FatFile::getSFN(char*)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    4536:	ands.w	r4, r4, #96	; 0x60
    453a:	mov	r5, r1
    453c:	beq.n	454a <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    453e:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    4540:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    4542:	strb	r2, [r1, #0]
    name[1] = '\0';
    4544:	strb	r3, [r1, #1]
    return true;
    4546:	movs	r0, #1
    4548:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    454a:	mov	r1, r4
    454c:	bl	2594 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    4550:	mov	r6, r0
    4552:	cbz	r0, 459c <FatFile::getSFN(char*)+0x6c>
    4554:	mov	r1, r4
    4556:	mov	r2, r4
    4558:	subs	r0, #1
    455a:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    455c:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    4560:	ldrb.w	r3, [r0, #1]!
    4564:	cmp	r3, #32
    4566:	beq.n	4584 <FatFile::getSFN(char*)+0x54>
      continue;
    }
    if (i == 8) {
    4568:	cmp	r1, #8
    456a:	beq.n	45a6 <FatFile::getSFN(char*)+0x76>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    456c:	sub.w	r4, r3, #65	; 0x41
    4570:	cmp	r4, #25
    4572:	bhi.n	457e <FatFile::getSFN(char*)+0x4e>
    4574:	ldrb	r4, [r6, #12]
    4576:	tst	r7, r4
      c += 'a' - 'A';
    4578:	itt	ne
    457a:	addne	r3, #32
    457c:	uxtbne	r3, r3
    }
    name[j++] = c;
    457e:	strb	r3, [r5, r2]
    4580:	adds	r2, #1
    4582:	uxtb	r2, r2
    4584:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    4586:	cmp	r1, #11
    4588:	bne.n	4560 <FatFile::getSFN(char*)+0x30>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    458a:	movs	r3, #0
    458c:	strb	r3, [r5, r2]
  return true;
    458e:	movs	r0, #1

fail:
  return false;
}
    4590:	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    4592:	movs	r0, #37	; 0x25
    4594:	bl	44f4 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    4598:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    459a:	pop	{r3, r4, r5, r6, r7, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    459c:	movs	r0, #48	; 0x30
    459e:	bl	44f4 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    45a2:	mov	r0, r6
    45a4:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    45a6:	strb.w	lr, [r5, r2]
    45aa:	adds	r2, #1
    45ac:	uxtb	r2, r2
    45ae:	ldrb	r3, [r0, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    45b0:	movs	r7, #16
    45b2:	b.n	456c <FatFile::getSFN(char*)+0x3c>

000045b4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    45b4:	push	{r4, lr}
    45b6:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    45b8:	ldr	r0, [r0, #56]	; 0x38
    45ba:	cbz	r0, 45c8 <FsBaseFile::close()+0x14>
    45bc:	bl	2664 <FatFile::close()>
    45c0:	cbz	r0, 45c8 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    45c2:	movs	r3, #0
    45c4:	str	r3, [r4, #56]	; 0x38
    return true;
    45c6:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    45c8:	ldr	r0, [r4, #60]	; 0x3c
    45ca:	cbz	r0, 45d8 <FsBaseFile::close()+0x24>
    45cc:	bl	730 <ExFatFile::close()>
    45d0:	cbz	r0, 45d8 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    45d2:	movs	r3, #0
    45d4:	str	r3, [r4, #60]	; 0x3c
    45d6:	pop	{r4, pc}
    return true;
  }
  return false;
    45d8:	movs	r0, #0
}
    45da:	pop	{r4, pc}

000045dc <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    45dc:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    45de:	push	{r3, r4, r5, r6, r7, lr}
    45e0:	mov	r6, r0
  if (this == &from) return *this;
    45e2:	beq.n	4610 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    45e4:	mov	r5, r1
  close();
    45e6:	bl	45b4 <FsBaseFile::close()>
  if (from.m_fFile) {
    45ea:	ldr	r4, [r5, #56]	; 0x38
    45ec:	cbz	r4, 4614 <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    45ee:	mov	r1, r6
    45f0:	movs	r0, #36	; 0x24
    45f2:	bl	4824 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    45f6:	movs	r3, #0
    45f8:	strb	r3, [r0, #0]
    45fa:	strb	r3, [r0, #1]
    45fc:	strb	r3, [r0, #2]
    45fe:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    4600:	ldr	r5, [r5, #56]	; 0x38
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    4602:	mov	r4, r0
    *m_fFile = *from.m_fFile;
    4604:	ldmia	r5!, {r0, r1, r2, r3}
    4606:	stmia	r4!, {r0, r1, r2, r3}
    4608:	ldmia	r5!, {r0, r1, r2, r3}
    460a:	stmia	r4!, {r0, r1, r2, r3}
    460c:	ldr	r3, [r5, #0]
    460e:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    4610:	mov	r0, r6
    4612:	pop	{r3, r4, r5, r6, r7, pc}
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    4614:	ldr	r3, [r5, #60]	; 0x3c
    4616:	cmp	r3, #0
    4618:	beq.n	4610 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    461a:	mov	r1, r6
    461c:	movs	r0, #56	; 0x38
    461e:	bl	4824 <operator new(unsigned int, unsigned long*)>
    4622:	strb.w	r4, [r0, #49]	; 0x31
    4626:	strb.w	r4, [r0, #50]	; 0x32
    462a:	strb.w	r4, [r0, #51]	; 0x33
    462e:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    4630:	ldr	r3, [r5, #60]	; 0x3c
    4632:	mov	r2, r0
    4634:	add.w	r1, r3, #48	; 0x30
    4638:	ldr	r5, [r3, #0]
    463a:	ldr	r4, [r3, #4]
    463c:	ldr	r0, [r3, #8]
    463e:	ldr	r7, [r3, #12]
    4640:	str	r7, [r2, #12]
    4642:	adds	r3, #16
    4644:	cmp	r3, r1
    4646:	str	r5, [r2, #0]
    4648:	str	r4, [r2, #4]
    464a:	str	r0, [r2, #8]
    464c:	add.w	r2, r2, #16
    4650:	bne.n	4638 <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    4652:	ldr	r3, [r3, #0]
    4654:	str	r3, [r2, #0]
    4656:	b.n	4610 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

00004658 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    4658:	cbz	r1, 46ce <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    465a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    465e:	mov	r4, r1
    4660:	mov	r5, r0
    4662:	mov	r8, r3
    4664:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    4666:	bl	45b4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    466a:	ldr.w	r6, [r4, #1144]	; 0x478
    466e:	cbz	r6, 469c <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    4670:	mov	r1, r5
    4672:	movs	r0, #36	; 0x24
    4674:	bl	4824 <operator new(unsigned int, unsigned long*)>
    4678:	movs	r1, #0
    467a:	strb	r1, [r0, #0]
    467c:	strb	r1, [r0, #1]
    467e:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4680:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    4684:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    4686:	mov	r3, r8
    4688:	mov	r2, r7
    468a:	bl	27d4 <FatFile::open(FatVolume*, char const*, int)>
    468e:	cbz	r0, 4696 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    4690:	movs	r0, #1
    4692:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    4696:	str	r0, [r5, #56]	; 0x38
    return false;
    4698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    469c:	ldr.w	r3, [r4, #1148]	; 0x47c
    46a0:	cbz	r3, 46d2 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    46a2:	mov	r1, r5
    46a4:	movs	r0, #56	; 0x38
    46a6:	bl	4824 <operator new(unsigned int, unsigned long*)>
    46aa:	strb.w	r6, [r0, #49]	; 0x31
    46ae:	strb.w	r6, [r0, #50]	; 0x32
    46b2:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    46b6:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    46ba:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    46bc:	mov	r3, r8
    46be:	mov	r2, r7
    46c0:	bl	1170 <ExFatFile::open(ExFatVolume*, char const*, int)>
    46c4:	cmp	r0, #0
    46c6:	bne.n	4690 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    46c8:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    46ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    46ce:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    46d0:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    46d2:	movs	r0, #0
    46d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000046d8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    46d8:	push	{r3, r4, r5, r6, r7, lr}
    46da:	mov	r5, r1
    46dc:	mov	r7, r2
    46de:	mov	r4, r0
  close();
    46e0:	bl	45b4 <FsBaseFile::close()>
  if (dir->m_fFile) {
    46e4:	ldr	r6, [r5, #56]	; 0x38
    46e6:	cbz	r6, 470c <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    46e8:	mov	r1, r4
    46ea:	movs	r0, #36	; 0x24
    46ec:	bl	4824 <operator new(unsigned int, unsigned long*)>
    46f0:	movs	r2, #0
    46f2:	strb	r2, [r0, #0]
    46f4:	strb	r2, [r0, #1]
    46f6:	strb	r2, [r0, #2]
    46f8:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    46fa:	mov	r2, r7
    46fc:	ldr	r1, [r5, #56]	; 0x38
    46fe:	bl	2c94 <FatFile::openNext(FatFile*, int)>
    4702:	cbz	r0, 4708 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    4704:	movs	r0, #1
    4706:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    4708:	str	r0, [r4, #56]	; 0x38
    470a:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    470c:	ldr	r0, [r5, #60]	; 0x3c
    470e:	cbz	r0, 4734 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    4710:	mov	r1, r4
    4712:	movs	r0, #56	; 0x38
    4714:	bl	4824 <operator new(unsigned int, unsigned long*)>
    4718:	strb.w	r6, [r0, #49]	; 0x31
    471c:	strb.w	r6, [r0, #50]	; 0x32
    4720:	strb.w	r6, [r0, #51]	; 0x33
    4724:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    4726:	mov	r2, r7
    4728:	ldr	r1, [r5, #60]	; 0x3c
    472a:	bl	1180 <ExFatFile::openNext(ExFatFile*, int)>
    472e:	cmp	r0, #0
    4730:	bne.n	4704 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    4732:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    4734:	pop	{r3, r4, r5, r6, r7, pc}
    4736:	nop

00004738 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    4738:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    473a:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    473c:	mov	r5, r0
  m_blockDev = blockDev;
    473e:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    4742:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    4746:	mov	r1, r0
    4748:	mov.w	r0, #1144	; 0x478
    474c:	bl	4824 <operator new(unsigned int, unsigned long*)>
    4750:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    4752:	str	r6, [r0, #4]
    invalidate();
    4754:	bl	1224 <FsCache::invalidate()>
    4758:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    475c:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    4760:	bl	1224 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    4764:	strb.w	r6, [r4, #1084]	; 0x43c
    4768:	strb.w	r6, [r4, #1137]	; 0x471
    476c:	strb.w	r6, [r4, #1138]	; 0x472
    4770:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    4774:	ldr.w	r1, [r5, #1152]	; 0x480
    4778:	str.w	r4, [r5, #1148]	; 0x47c
    477c:	mov	r0, r4
    477e:	movs	r2, #1
    4780:	bl	1380 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    4784:	cbnz	r0, 47c2 <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    4786:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    4788:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    478a:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    478e:	mov.w	r0, #1120	; 0x460
    4792:	bl	4824 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    4796:	strb	r6, [r0, #7]
    4798:	strb.w	r6, [r0, #1084]	; 0x43c
    479c:	strb.w	r6, [r0, #1085]	; 0x43d
    47a0:	strb.w	r6, [r0, #1086]	; 0x43e
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    47a4:	movs	r2, #1
    47a6:	ldr.w	r1, [r5, #1152]	; 0x480
    47aa:	str.w	r0, [r5, #1144]	; 0x478
    47ae:	mov	r4, r0
    47b0:	bl	3880 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    47b4:	cbnz	r0, 47e0 <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    47b6:	ldr	r3, [pc, #64]	; (47f8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    47b8:	movs	r0, #0
    47ba:	str	r0, [r3, #0]
  m_fVol = nullptr;
    47bc:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    47c0:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    47c2:	add.w	r6, r4, #1088	; 0x440
    47c6:	mov	r0, r6
    47c8:	bl	730 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    47cc:	mov	r1, r4
    47ce:	mov	r0, r6
    47d0:	bl	804 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    47d4:	cmp	r0, #0
    47d6:	beq.n	4786 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    47d8:	ldr	r3, [pc, #28]	; (47f8 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    47da:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    47dc:	str	r5, [r3, #0]
  return true;
    47de:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    47e0:	addw	r6, r4, #1084	; 0x43c
    47e4:	mov	r0, r6
    47e6:	bl	2664 <FatFile::close()>
    return m_vwd.openRoot(this);
    47ea:	mov	r1, r4
    47ec:	mov	r0, r6
    47ee:	bl	2684 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    47f2:	cmp	r0, #0
    47f4:	bne.n	47d8 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    47f6:	b.n	47b6 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    47f8:	.word	0x1fff15b0

000047fc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    47fc:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    47fe:	movs	r5, #0
    4800:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4804:	ldr	r6, [pc, #24]	; (4820 <FsVolume::open(char const*, int)+0x24>)
    4806:	str	r7, [r0, #8]
    4808:	mov	r4, r0
    480a:	strb	r5, [r0, #4]
    480c:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    480e:	str	r5, [r0, #72]	; 0x48
    4810:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4812:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    4816:	bl	4658 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    481a:	mov	r0, r4
    481c:	pop	{r3, r4, r5, r6, r7, pc}
    481e:	nop
    4820:	.word	0x0000fcf0

00004824 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    4824:	mov	r0, r1
    4826:	bx	lr

00004828 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    4828:	mov.w	r0, #4294967295
    482c:	bx	lr
    482e:	nop

00004830 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    4830:	ldrb	r0, [r0, #16]
    4832:	bx	lr

00004834 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    4834:	ldrb	r0, [r0, #18]
    4836:	bx	lr

00004838 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    4838:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    483a:	ldr	r4, [r0, #0]
    483c:	ldr	r4, [r4, #12]
    483e:	movs	r3, #1
    4840:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    4842:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    4846:	bx	ip

00004848 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    4848:	ldrb	r0, [r0, #19]
    484a:	bx	lr

0000484c <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    484c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    484e:	ldr	r4, [r0, #0]
    4850:	ldr	r4, [r4, #28]
    4852:	movs	r3, #1
    4854:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    4856:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    485a:	bx	ip

0000485c <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    485c:	bx	lr
    485e:	nop

00004860 <SdSpiCard::~SdSpiCard()>:
    4860:	push	{r4, lr}
    4862:	movs	r1, #20
    4864:	mov	r4, r0
    4866:	bl	a71c <operator delete(void*, unsigned int)>
    486a:	mov	r0, r4
    486c:	pop	{r4, pc}
    486e:	nop

00004870 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    4870:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4874:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    4876:	ldrb	r1, [r0, #8]
    4878:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    487a:	mov	r4, r0
    487c:	mov	r5, r2
    487e:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    4880:	beq.n	4892 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    4882:	ldr	r3, [r4, #0]
    4884:	mov	r0, r4
    4886:	ldr	r3, [r3, #20]
    4888:	blx	r3
    488a:	cbnz	r0, 48c4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    488c:	movs	r0, #0
    488e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    4892:	ldr	r3, [r0, #4]
    4894:	cmp	r3, r6
    4896:	bne.n	4882 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    4898:	movs	r6, #0
    489a:	cbz	r7, 48b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    489c:	ldr	r3, [r4, #0]
    489e:	mov	r1, r5
    48a0:	ldr	r3, [r3, #68]	; 0x44
    48a2:	mov	r0, r4
    48a4:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    48a6:	adds	r6, #1
    48a8:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    48ac:	cmp	r0, #0
    48ae:	beq.n	488c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    48b0:	cmp	r7, r6
    48b2:	bne.n	489c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    48b4:	ldr	r3, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    48b6:	ldrb	r2, [r4, #9]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    48b8:	add	r7, r3
    48ba:	str	r7, [r4, #4]
  return m_sharedSpi ? syncDevice() : true;
    48bc:	cbnz	r2, 48da <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    48be:	movs	r0, #1
    48c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    48c4:	ldr	r3, [r4, #0]
    48c6:	mov	r1, r6
    48c8:	ldr	r3, [r3, #72]	; 0x48
    48ca:	mov	r0, r4
    48cc:	blx	r3
    48ce:	cmp	r0, #0
    48d0:	beq.n	488c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    48d2:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    48d4:	str	r6, [r4, #4]
    m_curState = WRITE_STATE;
    48d6:	strb	r3, [r4, #8]
    48d8:	b.n	4898 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    48da:	ldr	r3, [r4, #0]
    48dc:	mov	r0, r4
    48de:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    48e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    48e4:	bx	r3
    48e6:	nop

000048e8 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    48e8:	push	{r3, r4, r5, lr}
    48ea:	ldr	r2, [r0, #12]
    48ec:	ldr	r3, [r2, #0]
    48ee:	ldr	r1, [r2, #4]
    48f0:	mov	r4, r0

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    48f2:	ldrb	r0, [r3, #11]
    48f4:	cbz	r0, 4938 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x50>
			__disable_irq();
    48f6:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    48f8:	ldrb	r2, [r3, #11]
    48fa:	lsls	r0, r2, #31
    48fc:	bpl.n	490c <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    48fe:	ldr	r0, [pc, #108]	; (496c <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x84>)
    4900:	ldr	r2, [r3, #12]
    4902:	ldr	r5, [r0, #0]
    4904:	ands	r2, r5
    4906:	str	r2, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    4908:	str	r2, [r0, #0]
    490a:	ldrb	r2, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    490c:	lsls	r5, r2, #30
    490e:	bpl.n	491e <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4910:	ldr	r0, [pc, #92]	; (4970 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x88>)
    4912:	ldr	r2, [r3, #16]
    4914:	ldr	r5, [r0, #0]
    4916:	ands	r2, r5
    4918:	str	r2, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    491a:	str	r2, [r0, #0]
    491c:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    491e:	lsls	r0, r2, #29
    4920:	bpl.n	4930 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4922:	ldr	r0, [pc, #80]	; (4974 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x8c>)
    4924:	ldr	r2, [r3, #20]
    4926:	ldr	r5, [r0, #0]
    4928:	ands	r2, r5
    492a:	str	r2, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    492c:	str	r2, [r0, #0]
    492e:	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    4930:	lsls	r2, r2, #28
    4932:	bmi.n	495e <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x76>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    4934:	cpsie	i
    4936:	ldr	r2, [r4, #12]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4938:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    493a:	ldr	r0, [r3, #12]
    493c:	cmp	r0, r1
    493e:	beq.n	4950 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x68>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    4940:	ldr	r5, [pc, #52]	; (4978 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x90>)
    4942:	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    4944:	ldr	r0, [pc, #52]	; (497c <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x94>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    4946:	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    4948:	orr.w	r5, r1, #1073741824	; 0x40000000
    494c:	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    494e:	str	r0, [r3, #0]
      m_spi->transfer(buf[i]);
    }
  }
  /** Set CS low. */
  void select() {
    digitalWrite(m_csPin, LOW);
    4950:	ldrb	r0, [r2, #8]
    4952:	movs	r1, #0
    4954:	bl	9380 <digitalWrite>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    4958:	movs	r3, #1
    495a:	strb	r3, [r4, #17]
    495c:	pop	{r3, r4, r5, pc}
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    495e:	ldr	r0, [pc, #32]	; (4980 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x98>)
    4960:	ldr	r2, [r3, #24]
    4962:	ldr	r5, [r0, #0]
    4964:	ands	r2, r5
    4966:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    4968:	str	r2, [r0, #0]
    496a:	b.n	4934 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]+0x4c>
    496c:	.word	0xe000e180
    4970:	.word	0xe000e184
    4974:	.word	0xe000e188
    4978:	.word	0x003f4001
    497c:	.word	0x803f0000
    4980:	.word	0xe000e18c

00004984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    4984:	push	{r4, lr}
    4986:	ldr	r3, [r0, #12]
    4988:	mov	r4, r0
  void setHighSpeed(SdSpiConfig spiConfig) {
    m_spiSettings = spiConfig.hsSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
    498a:	movs	r1, #1
    498c:	ldrb	r0, [r3, #8]
    498e:	bl	9380 <digitalWrite>
    4992:	ldr	r3, [r4, #12]
    4994:	ldr	r1, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4996:	ldr	r2, [r1, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4998:	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
    499c:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    499e:	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data;
    49a0:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    49a2:	ldr	r3, [r2, #44]	; 0x2c
    49a4:	cmp	r3, #0
    49a6:	bge.n	49a2 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x1e>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    49a8:	ldrb	r3, [r1, #11]
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    49aa:	ldr	r2, [r2, #56]	; 0x38
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    49ac:	cbz	r3, 49dc <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x58>
			if (interruptMasksUsed & 0x01) {
    49ae:	lsls	r2, r3, #31
    49b0:	bpl.n	49ba <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x36>
				NVIC_ISER0 = interruptSave[0];
    49b2:	ldr	r3, [pc, #48]	; (49e4 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x60>)
    49b4:	ldr	r2, [r1, #28]
    49b6:	str	r2, [r3, #0]
    49b8:	ldrb	r3, [r1, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    49ba:	lsls	r0, r3, #30
    49bc:	bpl.n	49c6 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x42>
				NVIC_ISER1 = interruptSave[1];
    49be:	ldr	r3, [pc, #40]	; (49e8 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x64>)
    49c0:	ldr	r2, [r1, #32]
    49c2:	str	r2, [r3, #0]
    49c4:	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    49c6:	lsls	r2, r3, #29
    49c8:	bpl.n	49d2 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x4e>
				NVIC_ISER2 = interruptSave[2];
    49ca:	ldr	r3, [pc, #32]	; (49ec <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x68>)
    49cc:	ldr	r2, [r1, #36]	; 0x24
    49ce:	str	r2, [r3, #0]
    49d0:	ldrb	r3, [r1, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    49d2:	lsls	r3, r3, #28
    49d4:	bpl.n	49dc <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x58>
				NVIC_ISER3 = interruptSave[3];
    49d6:	ldr	r3, [pc, #24]	; (49f0 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]+0x6c>)
    49d8:	ldr	r2, [r1, #40]	; 0x28
    49da:	str	r2, [r3, #0]
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    49dc:	movs	r3, #0
    49de:	strb	r3, [r4, #17]
    49e0:	pop	{r4, pc}
    49e2:	nop
    49e4:	.word	0xe000e100
    49e8:	.word	0xe000e104
    49ec:	.word	0xe000e108
    49f0:	.word	0xe000e10c

000049f4 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    49f4:	push	{r4, r5, r6, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    49f6:	ldrb	r6, [r0, #17]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    49f8:	mov	r5, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    49fa:	cbnz	r6, 4a00 <SdSpiCard::isBusy()+0xc>
    49fc:	bl	48e8 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]>
    4a00:	ldr	r3, [r5, #12]
    4a02:	ldr	r3, [r3, #0]
    4a04:	ldr	r2, [r3, #0]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    4a06:	movs	r1, #8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4a08:	mov.w	r4, #2147483648	; 0x80000000
		port().PUSHR = data;
    4a0c:	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4a0e:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    4a10:	str	r0, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4a12:	ldr	r3, [r2, #44]	; 0x2c
    4a14:	cmp	r3, #0
    4a16:	bge.n	4a12 <SdSpiCard::isBusy()+0x1e>
		return port().POPR;
    4a18:	ldr	r3, [r2, #56]	; 0x38
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    4a1a:	uxtb	r3, r3
    4a1c:	cmp	r3, #255	; 0xff
    4a1e:	beq.n	4a3e <SdSpiCard::isBusy()+0x4a>
    4a20:	subs	r3, r1, #1
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    4a22:	ands.w	r1, r3, #255	; 0xff
    4a26:	bne.n	4a0e <SdSpiCard::isBusy()+0x1a>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    4a28:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    4a2a:	cbnz	r6, 4a30 <SdSpiCard::isBusy()+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4a2c:	ldrb	r3, [r5, #17]
    4a2e:	cbnz	r3, 4a34 <SdSpiCard::isBusy()+0x40>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    4a30:	mov	r0, r4
    4a32:	pop	{r4, r5, r6, pc}
    4a34:	mov	r0, r5
    4a36:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4a3a:	mov	r0, r4
    4a3c:	pop	{r4, r5, r6, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    4a3e:	movs	r4, #0
    4a40:	b.n	4a2a <SdSpiCard::isBusy()+0x36>
    4a42:	nop

00004a44 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    4a44:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a46:	ldr	r7, [pc, #184]	; (4b00 <SdSpiCard::readData(unsigned char*, unsigned int)+0xbc>)
    4a48:	ldr	r5, [r0, #12]
    4a4a:	ldr	r3, [r7, #0]
    4a4c:	sub	sp, #12
    4a4e:	mov	lr, r1
    4a50:	str	r3, [sp, #0]
	return ret;
    4a52:	ldr	r6, [sp, #0]
    4a54:	mov	ip, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  uint16_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    4a56:	uxth	r6, r6
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4a58:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4a5c:	movs	r2, #255	; 0xff
    4a5e:	ldr	r3, [r5, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4a60:	ldr	r4, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4a62:	str	r1, [r4, #44]	; 0x2c
		port().PUSHR = data;
    4a64:	str	r2, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4a66:	ldr	r3, [r4, #44]	; 0x2c
    4a68:	cmp	r3, #0
    4a6a:	bge.n	4a66 <SdSpiCard::readData(unsigned char*, unsigned int)+0x22>
		return port().POPR;
    4a6c:	ldr	r3, [r4, #56]	; 0x38
    4a6e:	uxtb	r3, r3
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  uint16_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    4a70:	cmp	r3, #255	; 0xff
    4a72:	strb	r3, [r0, #18]
    4a74:	bne.n	4a9a <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a76:	ldr	r3, [r7, #0]
    4a78:	str	r3, [sp, #4]
	return ret;
    4a7a:	ldr	r3, [sp, #4]
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    4a7c:	uxth	r3, r3
    4a7e:	subs	r3, r3, r6
    4a80:	cmp.w	r3, #300	; 0x12c
    4a84:	ble.n	4a5e <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4a86:	movs	r3, #29
    4a88:	strb	r3, [r0, #16]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4a8a:	ldrb	r3, [r0, #17]
    4a8c:	cbz	r3, 4a94 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    4a8e:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    4a92:	movs	r3, #0
}
    4a94:	mov	r0, r3
    4a96:	add	sp, #12
    4a98:	pop	{r4, r5, r6, r7, pc}
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    4a9a:	cmp	r3, #254	; 0xfe
    4a9c:	beq.n	4aa4 <SdSpiCard::readData(unsigned char*, unsigned int)+0x60>
    4a9e:	movs	r3, #24
    4aa0:	strb	r3, [r0, #16]
    4aa2:	b.n	4a8a <SdSpiCard::readData(unsigned char*, unsigned int)+0x46>
  * \param[in] n Number of bytes to receive.
  *
  * \return Zero for no error or nonzero error code.
  */
  uint8_t receive(uint8_t* buf, size_t n) {
    for (size_t i = 0; i < n; i++) {
    4aa4:	cmp.w	ip, #0
    4aa8:	beq.n	4acc <SdSpiCard::readData(unsigned char*, unsigned int)+0x88>
    4aaa:	add	ip, lr
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4aac:	mov.w	r4, #2147483648	; 0x80000000
		port().PUSHR = data;
    4ab0:	movs	r1, #255	; 0xff
    4ab2:	ldr	r3, [r5, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4ab4:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ab6:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    4ab8:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4aba:	ldr	r3, [r2, #44]	; 0x2c
    4abc:	cmp	r3, #0
    4abe:	bge.n	4aba <SdSpiCard::readData(unsigned char*, unsigned int)+0x76>
		return port().POPR;
    4ac0:	ldr	r3, [r2, #56]	; 0x38
      buf[i] = m_spi->transfer(0XFF);
    4ac2:	strb.w	r3, [lr], #1
  * \param[in] n Number of bytes to receive.
  *
  * \return Zero for no error or nonzero error code.
  */
  uint8_t receive(uint8_t* buf, size_t n) {
    for (size_t i = 0; i < n; i++) {
    4ac6:	cmp	ip, lr
    4ac8:	bne.n	4ab2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6e>
    4aca:	ldr	r5, [r0, #12]
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    4acc:	movs	r3, #0
    4ace:	strb	r3, [r0, #18]
    4ad0:	ldr	r3, [r5, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4ad2:	ldr	r3, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ad4:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4ad8:	movs	r2, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ada:	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4adc:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4ade:	ldr	r2, [r3, #44]	; 0x2c
    4ae0:	cmp	r2, #0
    4ae2:	bge.n	4ade <SdSpiCard::readData(unsigned char*, unsigned int)+0x9a>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ae4:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4ae8:	movs	r2, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    4aea:	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4aec:	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4aee:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4af0:	ldr	r2, [r3, #44]	; 0x2c
    4af2:	cmp	r2, #0
    4af4:	bge.n	4af0 <SdSpiCard::readData(unsigned char*, unsigned int)+0xac>
		return port().POPR;
    4af6:	ldr	r3, [r3, #56]	; 0x38
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    4af8:	movs	r3, #1

fail:
  spiStop();
  return false;
}
    4afa:	mov	r0, r3
    4afc:	add	sp, #12
    4afe:	pop	{r4, r5, r6, r7, pc}
    4b00:	.word	0x1fff1ae4

00004b04 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
    4b04:	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b06:	ldr	r4, [pc, #72]	; (4b50 <SdSpiCard::waitNotBusy(unsigned short)+0x4c>)
    4b08:	ldr	r3, [r0, #12]
    4b0a:	ldr	r2, [r4, #0]
    4b0c:	ldr	r3, [r3, #0]
    4b0e:	sub	sp, #12
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4b10:	mov.w	r6, #2147483648	; 0x80000000
    4b14:	str	r2, [sp, #0]
	return ret;
    4b16:	ldr	r0, [sp, #0]
    4b18:	ldr	r2, [r3, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    4b1a:	uxth	r0, r0
		port().PUSHR = data;
    4b1c:	movs	r5, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4b1e:	str	r6, [r2, #44]	; 0x2c
		port().PUSHR = data;
    4b20:	str	r5, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4b22:	ldr	r3, [r2, #44]	; 0x2c
    4b24:	cmp	r3, #0
    4b26:	bge.n	4b22 <SdSpiCard::waitNotBusy(unsigned short)+0x1e>
		return port().POPR;
    4b28:	ldr	r3, [r2, #56]	; 0x38
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MICROS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    4b2a:	uxtb	r3, r3
    4b2c:	cmp	r3, #255	; 0xff
    4b2e:	beq.n	4b46 <SdSpiCard::waitNotBusy(unsigned short)+0x42>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b30:	ldr	r3, [r4, #0]
    4b32:	str	r3, [sp, #4]
	return ret;
    4b34:	ldr	r3, [sp, #4]
    if (isTimedOut(t0, timeoutMS)) {
    4b36:	uxth	r3, r3
    4b38:	subs	r3, r3, r0
    4b3a:	cmp	r3, r1
    4b3c:	ble.n	4b1e <SdSpiCard::waitNotBusy(unsigned short)+0x1a>
      return false;
    4b3e:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
    4b40:	add	sp, #12
    4b42:	pop	{r4, r5, r6}
    4b44:	bx	lr
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    4b46:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MICROS
}
    4b48:	add	sp, #12
    4b4a:	pop	{r4, r5, r6}
    4b4c:	bx	lr
    4b4e:	nop
    4b50:	.word	0x1fff1ae4

00004b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4b54:	push	{r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
    4b56:	ldrb	r3, [r0, #17]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    4b58:	sub	sp, #12
    4b5a:	mov	r4, r0
    4b5c:	mov	r6, r1
    4b5e:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    4b60:	cbnz	r3, 4b66 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x12>
    4b62:	bl	48e8 <SdSpiCard::spiStart() [clone .part.23] [clone .constprop.40]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    4b66:	cmp	r6, #0
    4b68:	bne.n	4bf8 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    4b6a:	ldr	r5, [r4, #12]
    4b6c:	ldr	r3, [r5, #0]
    4b6e:	ldr	r3, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4b70:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4b74:	orr.w	r2, r6, #64	; 0x40
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4b78:	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4b7a:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4b7c:	ldr	r2, [r3, #44]	; 0x2c
    4b7e:	cmp	r2, #0
    4b80:	bge.n	4b7c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
		return port().POPR;
    4b82:	ldr	r2, [r3, #56]	; 0x38
    4b84:	add	r7, sp, #4
    4b86:	add	r1, sp, #8
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4b88:	mov.w	r0, #2147483648	; 0x80000000
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
    4b8c:	ldrb.w	r2, [r1, #-1]!
    4b90:	str	r0, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4b92:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4b94:	ldr	r2, [r3, #44]	; 0x2c
    4b96:	cmp	r2, #0
    4b98:	bge.n	4b94 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x40>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    4b9a:	cmp	r1, r7
		return port().POPR;
    4b9c:	ldr	r2, [r3, #56]	; 0x38
    4b9e:	bne.n	4b8c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x38>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    4ba0:	cmp	r6, #0
    4ba2:	ite	ne
    4ba4:	movne	r2, #135	; 0x87
    4ba6:	moveq	r2, #149	; 0x95
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ba8:	mov.w	r1, #2147483648	; 0x80000000
    4bac:	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4bae:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4bb0:	ldr	r2, [r3, #44]	; 0x2c
    4bb2:	cmp	r2, #0
    4bb4:	bge.n	4bb0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x5c>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4bb6:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4bba:	movs	r2, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    4bbc:	ldr	r0, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4bbe:	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4bc0:	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4bc2:	ldr	r2, [r3, #44]	; 0x2c
    4bc4:	cmp	r2, #0
    4bc6:	bge.n	4bc2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
		return port().POPR;
    4bc8:	ldr	r2, [r3, #56]	; 0x38
    4bca:	movs	r1, #11
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4bcc:	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
    4bd0:	movs	r6, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4bd2:	str	r7, [r3, #44]	; 0x2c
		port().PUSHR = data;
    4bd4:	str	r6, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4bd6:	ldr	r2, [r3, #44]	; 0x2c
    4bd8:	cmp	r2, #0
    4bda:	bge.n	4bd6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x82>
		return port().POPR;
    4bdc:	ldr	r3, [r3, #56]	; 0x38
    4bde:	uxtb	r0, r3

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    4be0:	lsls	r3, r3, #24
    4be2:	strb	r0, [r4, #18]
    4be4:	bmi.n	4bea <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x96>
  }
  return m_status;
}
    4be6:	add	sp, #12
    4be8:	pop	{r4, r5, r6, r7, pc}
    4bea:	subs	r3, r1, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    4bec:	ands.w	r1, r3, #255	; 0xff
    4bf0:	beq.n	4be6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    4bf2:	ldr	r3, [r5, #0]
    4bf4:	ldr	r3, [r3, #0]
    4bf6:	b.n	4bd2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x7e>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    4bf8:	mov.w	r1, #300	; 0x12c
    4bfc:	mov	r0, r4
    4bfe:	bl	4b04 <SdSpiCard::waitNotBusy(unsigned short)>
    4c02:	b.n	4b6a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x16>

00004c04 <SdSpiCard::readOCR(unsigned long*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    4c04:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    4c06:	push	{r4, r5, r6, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    4c08:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    4c0a:	mov	r4, r0
    4c0c:	mov	r5, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    4c0e:	blx	r3
  if (cardCommand(CMD58, 0)) {
    4c10:	mov	r0, r4
    4c12:	movs	r2, #0
    4c14:	movs	r1, #58	; 0x3a
    4c16:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4c1a:	cbnz	r0, 4c48 <SdSpiCard::readOCR(unsigned long*)+0x44>
    4c1c:	adds	r1, r5, #4
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4c1e:	mov.w	r6, #2147483648	; 0x80000000
		port().PUSHR = data;
    4c22:	movs	r0, #255	; 0xff
    4c24:	ldr	r3, [r4, #12]
    4c26:	ldr	r3, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4c28:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4c2a:	str	r6, [r2, #44]	; 0x2c
		port().PUSHR = data;
    4c2c:	str	r0, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4c2e:	ldr	r3, [r2, #44]	; 0x2c
    4c30:	cmp	r3, #0
    4c32:	bge.n	4c2e <SdSpiCard::readOCR(unsigned long*)+0x2a>
		return port().POPR;
    4c34:	ldr	r3, [r2, #56]	; 0x38
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    4c36:	strb.w	r3, [r1, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    4c3a:	cmp	r5, r1
    4c3c:	bne.n	4c24 <SdSpiCard::readOCR(unsigned long*)+0x20>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4c3e:	ldrb	r5, [r4, #17]
    4c40:	cbnz	r5, 4c5e <SdSpiCard::readOCR(unsigned long*)+0x5a>
    4c42:	movs	r5, #1
  return true;

fail:
  spiStop();
  return false;
}
    4c44:	mov	r0, r5
    4c46:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4c48:	ldrb	r5, [r4, #17]
    4c4a:	movs	r3, #18
    4c4c:	strb	r3, [r4, #16]
    4c4e:	cmp	r5, #0
    4c50:	beq.n	4c44 <SdSpiCard::readOCR(unsigned long*)+0x40>
    4c52:	mov	r0, r4
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    4c54:	movs	r5, #0
    4c56:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
}
    4c5a:	mov	r0, r5
    4c5c:	pop	{r4, r5, r6, pc}
    4c5e:	mov	r0, r4
    4c60:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4c64:	mov	r0, r5
    4c66:	pop	{r4, r5, r6, pc}

00004c68 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    4c68:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    4c6a:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    4c6c:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    4c6e:	mov	r4, r0
    4c70:	mov	r5, r1
    4c72:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    4c74:	blx	r3
  if (cardCommand(cmd, 0)) {
    4c76:	mov	r1, r5
    4c78:	mov	r0, r4
    4c7a:	movs	r2, #0
    4c7c:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4c80:	cbz	r0, 4c94 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    4c82:	movs	r3, #27
    4c84:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4c86:	ldrb	r0, [r4, #17]
    4c88:	cbz	r0, 4c92 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    4c8a:	mov	r0, r4
    4c8c:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    4c90:	movs	r0, #0
}
    4c92:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    4c94:	mov	r1, r6
    4c96:	movs	r2, #16
    4c98:	mov	r0, r4
    4c9a:	bl	4a44 <SdSpiCard::readData(unsigned char*, unsigned int)>
    4c9e:	cmp	r0, #0
    4ca0:	beq.n	4c86 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4ca2:	ldrb	r5, [r4, #17]
    4ca4:	cmp	r5, #0
    4ca6:	beq.n	4c92 <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    4ca8:	mov	r0, r4
    4caa:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4cae:	mov	r0, r5
    4cb0:	pop	{r4, r5, r6, pc}
    4cb2:	nop

00004cb4 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    4cb4:	mov	r2, r1
    4cb6:	movs	r1, #9
    4cb8:	b.w	4c68 <SdSpiCard::readRegister(unsigned char, void*)>

00004cbc <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    4cbc:	mov	r2, r1
    4cbe:	movs	r1, #10
    4cc0:	b.w	4c68 <SdSpiCard::readRegister(unsigned char, void*)>

00004cc4 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    4cc4:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4cc6:	ldr	r3, [r0, #0]
    4cc8:	ldr	r2, [pc, #140]	; (4d58 <SdSpiCard::sectorCount()+0x94>)
    4cca:	ldr	r3, [r3, #52]	; 0x34
    4ccc:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    4cce:	sub	sp, #20
    4cd0:	bne.n	4d32 <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    4cd2:	mov	r2, sp
    4cd4:	movs	r1, #9
    4cd6:	bl	4c68 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4cda:	cbz	r0, 4cec <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    4cdc:	ldrb.w	r3, [sp]
    4ce0:	ands.w	r3, r3, #192	; 0xc0
    4ce4:	beq.n	4cf0 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    4ce6:	cmp	r3, #64	; 0x40
    4ce8:	beq.n	4d38 <SdSpiCard::sectorCount()+0x74>
    4cea:	movs	r0, #0
}
    4cec:	add	sp, #20
    4cee:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    4cf0:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    4cf4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4cf8:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    4cfc:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    4d00:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    4d04:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4d08:	and.w	r4, r4, #3
    4d0c:	lsls	r4, r4, #1
    4d0e:	lsls	r2, r2, #2
    4d10:	and.w	r3, r3, #3
    4d14:	orr.w	r0, r4, r0, lsr #7
    4d18:	and.w	r1, r1, #15
    4d1c:	orr.w	r3, r2, r3, lsl #10
    4d20:	add	r0, r1
    4d22:	orr.w	r3, r3, r5, lsr #6
    4d26:	adds	r3, #1
    4d28:	subs	r0, #7
    4d2a:	lsl.w	r0, r3, r0
    4d2e:	add	sp, #20
    4d30:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    4d32:	mov	r1, sp
    4d34:	blx	r3
    4d36:	b.n	4cda <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4d38:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    4d3c:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    4d40:	ldrb.w	r0, [sp, #8]
    4d44:	adds	r2, r3, #1
    4d46:	and.w	r3, r1, #63	; 0x3f
    4d4a:	add.w	r3, r2, r3, lsl #16
    4d4e:	add.w	r0, r3, r0, lsl #8
    4d52:	lsls	r0, r0, #10
}
    4d54:	add	sp, #20
    4d56:	pop	{r4, r5, pc}
    4d58:	.word	0x00004cb5

00004d5c <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    4d5c:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    4d5e:	ldr	r3, [r0, #0]
    4d60:	ldr	r5, [pc, #68]	; (4da8 <SdSpiCard::readStart(unsigned long)+0x4c>)
    4d62:	ldr	r3, [r3, #64]	; 0x40
    4d64:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    4d66:	sub	sp, #12
    4d68:	mov	r4, r0
    4d6a:	mov	r2, r1
    4d6c:	bne.n	4d9e <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    4d6e:	ldrb	r0, [r0, #19]
  if (type() != SD_CARD_TYPE_SDHC) {
    4d70:	cmp	r0, #3
    sector <<= 9;
    4d72:	it	ne
    4d74:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    4d76:	movs	r1, #18
    4d78:	mov	r0, r4
    4d7a:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4d7e:	cbz	r0, 4d98 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4d80:	ldrb	r0, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4d82:	movs	r3, #12
    4d84:	strb	r3, [r4, #16]
    4d86:	cbnz	r0, 4d8c <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    4d88:	add	sp, #12
    4d8a:	pop	{r4, r5, pc}
    4d8c:	mov	r0, r4
    4d8e:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4d92:	movs	r0, #0
    4d94:	add	sp, #12
    4d96:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    4d98:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    4d9a:	add	sp, #12
    4d9c:	pop	{r4, r5, pc}
    4d9e:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    4da0:	blx	r3
    4da2:	ldr	r2, [sp, #4]
    4da4:	b.n	4d70 <SdSpiCard::readStart(unsigned long)+0x14>
    4da6:	nop
    4da8:	.word	0x00004849

00004dac <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    4dac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4db0:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4db2:	ldrb	r1, [r0, #8]
    4db4:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    4db6:	mov	r6, r0
    4db8:	mov	r4, r2
    4dba:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4dbc:	beq.n	4dce <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    4dbe:	ldr	r3, [r6, #0]
    4dc0:	mov	r0, r6
    4dc2:	ldr	r3, [r3, #20]
    4dc4:	blx	r3
    4dc6:	cbnz	r0, 4e02 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    4dc8:	movs	r0, #0
    4dca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4dce:	ldr	r3, [r0, #4]
    4dd0:	cmp	r3, r5
    4dd2:	bne.n	4dbe <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4dd4:	movs	r5, #0
    4dd6:	cbz	r7, 4df2 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    4dd8:	mov	r1, r4
    4dda:	mov.w	r2, #512	; 0x200
    4dde:	mov	r0, r6
    4de0:	bl	4a44 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4de4:	adds	r5, #1
    4de6:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    4dea:	cmp	r0, #0
    4dec:	beq.n	4dc8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4dee:	cmp	r7, r5
    4df0:	bne.n	4dd8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    4df2:	ldr	r3, [r6, #4]
  return m_sharedSpi ? syncDevice() : true;
    4df4:	ldrb	r2, [r6, #9]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    4df6:	add	r7, r3
    4df8:	str	r7, [r6, #4]
  return m_sharedSpi ? syncDevice() : true;
    4dfa:	cbnz	r2, 4e16 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    4dfc:	movs	r0, #1
    4dfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    4e02:	mov	r1, r5
    4e04:	mov	r0, r6
    4e06:	bl	4d5c <SdSpiCard::readStart(unsigned long)>
    4e0a:	cmp	r0, #0
    4e0c:	beq.n	4dc8 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    4e0e:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    4e10:	str	r5, [r6, #4]
    m_curState = READ_STATE;
    4e12:	strb	r3, [r6, #8]
    4e14:	b.n	4dd4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    4e16:	ldr	r3, [r6, #0]
    4e18:	mov	r0, r6
    4e1a:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    4e1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    4e20:	bx	r3
    4e22:	nop

00004e24 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    4e24:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    4e26:	movs	r2, #0
    4e28:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    4e2a:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    4e2c:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4e30:	ldrb	r4, [r5, #17]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    4e32:	cbz	r0, 4e3e <SdSpiCard::readStop()+0x1a>
    4e34:	movs	r3, #9
    4e36:	strb	r3, [r5, #16]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4e38:	cbnz	r4, 4e50 <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    4e3a:	mov	r0, r4
    4e3c:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4e3e:	cbnz	r4, 4e46 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    4e40:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    4e42:	mov	r0, r4
    4e44:	pop	{r3, r4, r5, pc}
    4e46:	mov	r0, r5
    4e48:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4e4c:	mov	r0, r4
    4e4e:	pop	{r3, r4, r5, pc}
    4e50:	mov	r0, r5
    4e52:	movs	r4, #0
    4e54:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4e58:	mov	r0, r4
    4e5a:	pop	{r3, r4, r5, pc}

00004e5c <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    4e5c:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4e5e:	ldr	r3, [r0, #0]
    4e60:	ldr	r5, [pc, #68]	; (4ea8 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    4e62:	ldr	r3, [r3, #64]	; 0x40
    4e64:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    4e66:	sub	sp, #12
    4e68:	mov	r4, r0
    4e6a:	mov	r2, r1
    4e6c:	bne.n	4e9e <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    4e6e:	ldrb	r0, [r0, #19]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4e70:	cmp	r0, #3
    sector <<= 9;
    4e72:	it	ne
    4e74:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    4e76:	movs	r1, #25
    4e78:	mov	r0, r4
    4e7a:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4e7e:	cbz	r0, 4e98 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4e80:	ldrb	r0, [r4, #17]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4e82:	movs	r3, #14
    4e84:	strb	r3, [r4, #16]
    4e86:	cbnz	r0, 4e8c <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    4e88:	add	sp, #12
    4e8a:	pop	{r4, r5, pc}
    4e8c:	mov	r0, r4
    4e8e:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4e92:	movs	r0, #0
    4e94:	add	sp, #12
    4e96:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    4e98:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    4e9a:	add	sp, #12
    4e9c:	pop	{r4, r5, pc}
    4e9e:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    4ea0:	blx	r3
    4ea2:	ldr	r2, [sp, #4]
    4ea4:	b.n	4e70 <SdSpiCard::writeStart(unsigned long)+0x14>
    4ea6:	nop
    4ea8:	.word	0x00004849

00004eac <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4eac:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    4eae:	ldr	r3, [r0, #0]
    4eb0:	ldr	r7, [pc, #172]	; (4f60 <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    4eb2:	ldr	r3, [r3, #52]	; 0x34
    4eb4:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4eb6:	sub	sp, #20
    4eb8:	mov	r4, r0
    4eba:	mov	r5, r1
    4ebc:	mov	r6, r2
    4ebe:	bne.n	4f1c <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    4ec0:	mov	r2, sp
    4ec2:	movs	r1, #9
    4ec4:	bl	4c68 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    4ec8:	cbz	r0, 4ef0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    4eca:	ldrb.w	r3, [sp, #10]
    4ece:	lsls	r2, r3, #25
    4ed0:	bpl.n	4f00 <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    4ed2:	ldrb	r3, [r4, #19]
    4ed4:	cmp	r3, #3
    firstSector <<= 9;
    4ed6:	it	ne
    4ed8:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    4eda:	mov	r2, r5
    4edc:	mov.w	r1, #32
    4ee0:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    4ee2:	it	ne
    4ee4:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    4ee6:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    4eea:	cbz	r0, 4f22 <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4eec:	movs	r3, #37	; 0x25
    4eee:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4ef0:	ldrb	r0, [r4, #17]
    4ef2:	cbz	r0, 4efc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    4ef4:	mov	r0, r4
    4ef6:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    4efa:	movs	r0, #0
}
    4efc:	add	sp, #20
    4efe:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    4f00:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    4f04:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    4f08:	lsls	r3, r3, #1
    4f0a:	adds	r2, r6, #1
    4f0c:	orr.w	r3, r3, r1, lsr #7
    4f10:	orrs	r2, r5
    4f12:	tst	r3, r2
    4f14:	beq.n	4ed2 <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    4f16:	movs	r3, #38	; 0x26
    4f18:	strb	r3, [r4, #16]
    4f1a:	b.n	4ef0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    4f1c:	mov	r1, sp
    4f1e:	blx	r3
    4f20:	b.n	4ec8 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    4f22:	mov	r2, r6
    4f24:	movs	r1, #33	; 0x21
    4f26:	mov	r0, r4
    4f28:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4f2c:	cmp	r0, #0
    4f2e:	bne.n	4eec <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    4f30:	mov	r2, r0
    4f32:	movs	r1, #38	; 0x26
    4f34:	mov	r0, r4
    4f36:	bl	4b54 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4f3a:	cmp	r0, #0
    4f3c:	bne.n	4eec <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    4f3e:	movw	r1, #10000	; 0x2710
    4f42:	mov	r0, r4
    4f44:	bl	4b04 <SdSpiCard::waitNotBusy(unsigned short)>
    4f48:	cbnz	r0, 4f50 <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    4f4a:	movs	r3, #39	; 0x27
    4f4c:	strb	r3, [r4, #16]
    4f4e:	b.n	4ef0 <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4f50:	ldrb	r5, [r4, #17]
    4f52:	cmp	r5, #0
    4f54:	beq.n	4efc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    4f56:	mov	r0, r4
    4f58:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    4f5c:	mov	r0, r5
    4f5e:	b.n	4efc <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    4f60:	.word	0x00004cb5

00004f64 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    4f64:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4f66:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    4f6a:	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    4f6c:	bl	4b04 <SdSpiCard::waitNotBusy(unsigned short)>
    4f70:	mov	r5, r0
    4f72:	cbz	r0, 4f94 <SdSpiCard::writeStop()+0x30>
    4f74:	ldr	r3, [r4, #12]
    4f76:	ldr	r3, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4f78:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4f7a:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    4f7e:	movs	r3, #253	; 0xfd
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4f80:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    4f82:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4f84:	ldr	r3, [r2, #44]	; 0x2c
    4f86:	cmp	r3, #0
    4f88:	bge.n	4f84 <SdSpiCard::writeStop()+0x20>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4f8a:	ldrb	r6, [r4, #17]
		return port().POPR;
    4f8c:	ldr	r3, [r2, #56]	; 0x38
    4f8e:	cbnz	r6, 4fa8 <SdSpiCard::writeStop()+0x44>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4f90:	mov	r0, r5
    4f92:	pop	{r4, r5, r6, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4f94:	ldrb	r3, [r4, #17]
    4f96:	movs	r2, #30
    4f98:	strb	r2, [r4, #16]
    4f9a:	cmp	r3, #0
    4f9c:	beq.n	4f90 <SdSpiCard::writeStop()+0x2c>
    4f9e:	mov	r0, r4
    4fa0:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4fa4:	mov	r0, r5
    4fa6:	pop	{r4, r5, r6, pc}
    4fa8:	mov	r0, r4
    4faa:	mov	r5, r6
    4fac:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
    4fb0:	mov	r0, r5
    4fb2:	pop	{r4, r5, r6, pc}

00004fb4 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    4fb4:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    4fb6:	ldrb	r3, [r0, #8]
    4fb8:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    4fba:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    4fbc:	beq.n	4fca <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    4fbe:	cmp	r3, #2
    4fc0:	beq.n	4fd6 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    4fc2:	movs	r3, #0
    4fc4:	strb	r3, [r4, #8]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    4fc6:	movs	r0, #1
    4fc8:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    4fca:	bl	4e24 <SdSpiCard::readStop()>
    4fce:	cmp	r0, #0
    4fd0:	bne.n	4fc2 <SdSpiCard::syncDevice()+0xe>
      return false;
    4fd2:	movs	r0, #0
    4fd4:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    4fd6:	bl	4f64 <SdSpiCard::writeStop()>
    4fda:	cmp	r0, #0
    4fdc:	bne.n	4fc2 <SdSpiCard::syncDevice()+0xe>
    4fde:	b.n	4fd2 <SdSpiCard::syncDevice()+0x1e>

00004fe0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    4fe0:	push	{r3, r4, r5, lr}
    4fe2:	ldr	r3, [r0, #12]
    4fe4:	ldr	r3, [r3, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4fe6:	ldr	r4, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4fe8:	mov.w	r3, #2147483648	; 0x80000000
    4fec:	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
    4fee:	str	r1, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    4ff0:	ldr	r3, [r4, #44]	; 0x2c
    4ff2:	cmp	r3, #0
    4ff4:	bge.n	4ff0 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x10>
		return port().POPR;
    4ff6:	ldr	r3, [r4, #56]	; 0x38
    4ff8:	subs	r1, r2, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    4ffa:	mov.w	r5, #2147483648	; 0x80000000
    4ffe:	addw	r2, r2, #511	; 0x1ff
   * \param[in] buf Buffer for data to be sent.
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n) {
    for (size_t i = 0; i < n; i++) {
      m_spi->transfer(buf[i]);
    5002:	ldrb.w	r3, [r1, #1]!
    5006:	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
    5008:	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    500a:	ldr	r3, [r4, #44]	; 0x2c
    500c:	cmp	r3, #0
    500e:	bge.n	500a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x2a>
   *
   * \param[in] buf Buffer for data to be sent.
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n) {
    for (size_t i = 0; i < n; i++) {
    5010:	cmp	r1, r2
		return port().POPR;
    5012:	ldr	r3, [r4, #56]	; 0x38
    5014:	bne.n	5002 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x22>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5016:	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    501a:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    501c:	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    501e:	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5020:	ldr	r3, [r4, #44]	; 0x2c
    5022:	cmp	r3, #0
    5024:	bge.n	5020 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x40>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5026:	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    502a:	movs	r3, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    502c:	ldr	r1, [r4, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    502e:	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    5030:	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5032:	ldr	r3, [r4, #44]	; 0x2c
    5034:	cmp	r3, #0
    5036:	bge.n	5032 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x52>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5038:	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    503c:	movs	r3, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    503e:	ldr	r1, [r4, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    5040:	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    5042:	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5044:	ldr	r3, [r4, #44]	; 0x2c
    5046:	cmp	r3, #0
    5048:	bge.n	5044 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x64>
		return port().POPR;
    504a:	ldr	r3, [r4, #56]	; 0x38
    504c:	uxtb	r3, r3
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    504e:	and.w	r2, r3, #31
    5052:	cmp	r2, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    5054:	strb	r3, [r0, #18]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    5056:	beq.n	506a <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x8a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    5058:	ldrb	r3, [r0, #17]
    505a:	movs	r2, #31
    505c:	strb	r2, [r0, #16]
    505e:	cbz	r3, 5066 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x86>
    5060:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
  }
  return true;

fail:
  spiStop();
  return false;
    5064:	movs	r3, #0
}
    5066:	mov	r0, r3
    5068:	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    506a:	movs	r3, #1

fail:
  spiStop();
  return false;
}
    506c:	mov	r0, r3
    506e:	pop	{r3, r4, r5, pc}

00005070 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    5070:	push	{r3, r4, r5, lr}
    5072:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    5074:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    5078:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    507a:	bl	4b04 <SdSpiCard::waitNotBusy(unsigned short)>
    507e:	cbnz	r0, 5092 <SdSpiCard::writeData(unsigned char const*)+0x22>
    5080:	movs	r3, #35	; 0x23
    5082:	strb	r3, [r4, #16]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    5084:	ldrb	r0, [r4, #17]
    5086:	cbz	r0, 5090 <SdSpiCard::writeData(unsigned char const*)+0x20>
    5088:	mov	r0, r4
    508a:	bl	4984 <SdSpiCard::spiStop() [clone .part.24] [clone .constprop.43]>
  }
  return true;

fail:
  spiStop();
  return false;
    508e:	movs	r0, #0
}
    5090:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    5092:	mov	r2, r5
    5094:	movs	r1, #252	; 0xfc
    5096:	mov	r0, r4
    5098:	bl	4fe0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    509c:	cmp	r0, #0
    509e:	beq.n	5084 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    50a0:	pop	{r3, r4, r5, pc}
    50a2:	nop

000050a4 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    50a4:	push	{r4}
  SDHC_IRQSIGEN = 0;
    50a6:	ldr	r4, [pc, #28]	; (50c4 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    50a8:	ldr	r2, [pc, #28]	; (50c8 <sdIrs()+0x24>)
    50aa:	ldr	r1, [pc, #32]	; (50cc <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    50ac:	ldr	r0, [pc, #32]	; (50d0 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    50ae:	movs	r3, #0
    50b0:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    50b2:	ldr	r4, [r2, #0]
    50b4:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    50b6:	ldr	r1, [r1, #0]
    50b8:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    50ba:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    50be:	strb	r3, [r0, #0]
}
    50c0:	bx	lr
    50c2:	nop
    50c4:	.word	0x400b1038
    50c8:	.word	0x400b1030
    50cc:	.word	0x1fff15d8
    50d0:	.word	0x1fff15f0

000050d4 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    50d4:	ldr	r3, [pc, #12]	; (50e4 <isBusyCommandComplete()+0x10>)
    50d6:	ldr	r0, [pc, #16]	; (50e8 <isBusyCommandComplete()+0x14>)
    50d8:	ldr	r3, [r3, #0]
    50da:	ands	r0, r3
}
    50dc:	clz	r0, r0
    50e0:	lsrs	r0, r0, #5
    50e2:	bx	lr
    50e4:	.word	0x400b1030
    50e8:	.word	0x000f0001

000050ec <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    50ec:	ldr	r3, [pc, #8]	; (50f8 <isBusyCommandInhibit()+0xc>)
    50ee:	ldr	r0, [r3, #0]
}
    50f0:	and.w	r0, r0, #1
    50f4:	bx	lr
    50f6:	nop
    50f8:	.word	0x400b1024

000050fc <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    50fc:	ldr	r3, [pc, #4]	; (5104 <isBusyDMA()+0x8>)
    50fe:	ldrb	r0, [r3, #0]
}
    5100:	bx	lr
    5102:	nop
    5104:	.word	0x1fff15f0

00005108 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    5108:	ldr	r3, [pc, #12]	; (5118 <isBusyFifoRead()+0x10>)
    510a:	ldr	r0, [r3, #0]
    510c:	eor.w	r0, r0, #2048	; 0x800
}
    5110:	ubfx	r0, r0, #11, #1
    5114:	bx	lr
    5116:	nop
    5118:	.word	0x400b1024

0000511c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    511c:	ldr	r3, [pc, #12]	; (512c <isBusyFifoWrite()+0x10>)
    511e:	ldr	r0, [r3, #0]
    5120:	eor.w	r0, r0, #1024	; 0x400
}
    5124:	ubfx	r0, r0, #10, #1
    5128:	bx	lr
    512a:	nop
    512c:	.word	0x400b1024

00005130 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    5130:	ldr	r3, [pc, #12]	; (5140 <isBusyTransferComplete()+0x10>)
    5132:	ldr	r0, [pc, #16]	; (5144 <isBusyTransferComplete()+0x14>)
    5134:	ldr	r3, [r3, #0]
    5136:	ands	r0, r3
}
    5138:	clz	r0, r0
    513c:	lsrs	r0, r0, #5
    513e:	bx	lr
    5140:	.word	0x400b1030
    5144:	.word	0x117f0002

00005148 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    5148:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    514c:	ldr	r3, [pc, #176]	; (5200 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    514e:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5152:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    5154:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5156:	bhi.n	51f0 <setSdclk(unsigned long)+0xa8>
    5158:	ldr	r5, [pc, #168]	; (5204 <setSdclk(unsigned long)+0xbc>)
    515a:	movs	r2, #8
    515c:	movs	r1, #1
    sdclkfs <<= 1;
    515e:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    5160:	lsls	r3, r1, #4
    5162:	udiv	r3, r5, r3
    5166:	cmp	r0, r3
    5168:	ldr	r4, [pc, #152]	; (5204 <setSdclk(unsigned long)+0xbc>)
    516a:	bcs.n	51e8 <setSdclk(unsigned long)+0xa0>
    516c:	subs	r2, #1
    516e:	bne.n	515e <setSdclk(unsigned long)+0x16>
    5170:	udiv	r4, r4, r1
    5174:	lsrs	r3, r1, #1
    5176:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5178:	cmp	r0, r4
    517a:	bcs.n	51f8 <setSdclk(unsigned long)+0xb0>
    517c:	ldr	r6, [pc, #132]	; (5204 <setSdclk(unsigned long)+0xbc>)
    517e:	lsls	r3, r1, #1
    5180:	movs	r2, #1
    5182:	b.n	5186 <setSdclk(unsigned long)+0x3e>
    5184:	mov	r3, r4
    5186:	udiv	r4, r6, r3
    518a:	cmp	r0, r4
    dvs++;
    518c:	add.w	r5, r2, #1
    5190:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    5194:	bcs.n	51e4 <setSdclk(unsigned long)+0x9c>
    5196:	cmp	r5, #16
    5198:	mov	r2, r5
    519a:	bne.n	5184 <setSdclk(unsigned long)+0x3c>
    519c:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    519e:	ldr	r6, [pc, #104]	; (5208 <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    51a0:	ldr	r4, [pc, #104]	; (520c <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    51a2:	ldr	r0, [pc, #96]	; (5204 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    51a4:	ldr	r1, [pc, #104]	; (5210 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    51a6:	mov.w	r5, #1000	; 0x3e8
    51aa:	mul.w	r3, r5, r3
    51ae:	udiv	r3, r0, r3
    51b2:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    51b4:	ldr	r3, [r4, #0]
    51b6:	bic.w	r3, r3, #8
    51ba:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    51bc:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    51be:	bic.w	r3, r0, #1044480	; 0xff000
    51c2:	bic.w	r3, r3, #4080	; 0xff0
    51c6:	orr.w	r3, r3, #917504	; 0xe0000
    51ca:	orrs	r3, r7
    51cc:	orrs	r2, r3
    51ce:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    51d0:	ldr	r3, [r1, #0]
    51d2:	lsls	r3, r3, #28
    51d4:	bpl.n	51d0 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    51d6:	ldr	r2, [pc, #52]	; (520c <setSdclk(unsigned long)+0xc4>)
    51d8:	ldr	r3, [r2, #0]
    51da:	orr.w	r3, r3, #8
    51de:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    51e0:	pop	{r4, r5, r6, r7}
    51e2:	bx	lr
    51e4:	lsls	r2, r2, #4
    51e6:	b.n	519e <setSdclk(unsigned long)+0x56>
    51e8:	udiv	r4, r4, r1
    51ec:	lsls	r7, r1, #7
    51ee:	b.n	5178 <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    51f0:	ldr	r4, [pc, #16]	; (5204 <setSdclk(unsigned long)+0xbc>)
    51f2:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    51f4:	movs	r1, #1
    51f6:	b.n	5178 <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    51f8:	mov	r3, r1
    51fa:	movs	r2, #0
    51fc:	b.n	519e <setSdclk(unsigned long)+0x56>
    51fe:	nop
    5200:	.word	0x005b8d7f
    5204:	.word	0x05b8d800
    5208:	.word	0x1fff15f4
    520c:	.word	0x400b102c
    5210:	.word	0x400b1024

00005214 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    5214:	ldr	r3, [pc, #4]	; (521c <SdioCard::errorCode() const+0x8>)
}
    5216:	ldrb	r0, [r3, #0]
    5218:	bx	lr
    521a:	nop
    521c:	.word	0x1fff0974

00005220 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    5220:	ldr	r3, [pc, #4]	; (5228 <SdioCard::errorData() const+0x8>)
    5222:	ldr	r0, [r3, #0]
}
    5224:	bx	lr
    5226:	nop
    5228:	.word	0x1fff15d8

0000522c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    522c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    522e:	ldr	r4, [pc, #20]	; (5244 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    5230:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    5232:	ldmia	r4!, {r0, r1, r2, r3}
    5234:	str	r0, [r5, #0]
    5236:	str	r1, [r5, #4]
    5238:	str	r2, [r5, #8]
    523a:	str	r3, [r5, #12]
  return true;
}
    523c:	movs	r0, #1
    523e:	pop	{r4, r5}
    5240:	bx	lr
    5242:	nop
    5244:	.word	0x1fff15b8

00005248 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    5248:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    524a:	ldr	r4, [pc, #20]	; (5260 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    524c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    524e:	ldmia	r4!, {r0, r1, r2, r3}
    5250:	str	r0, [r5, #0]
    5252:	str	r1, [r5, #4]
    5254:	str	r2, [r5, #8]
    5256:	str	r3, [r5, #12]
  return true;
}
    5258:	movs	r0, #1
    525a:	pop	{r4, r5}
    525c:	bx	lr
    525e:	nop
    5260:	.word	0x1fff15e0

00005264 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    5264:	ldr	r3, [pc, #8]	; (5270 <SdioCard::readOCR(unsigned long*)+0xc>)
    5266:	ldr	r3, [r3, #0]
    5268:	str	r3, [r1, #0]
  return true;
}
    526a:	movs	r0, #1
    526c:	bx	lr
    526e:	nop
    5270:	.word	0x1fff15d0

00005274 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5274:	bx	lr
    5276:	nop

00005278 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    5278:	push	{r3, r4, r5, r6, r7, lr}
    527a:	mov	r5, r0
  uint32_t m = micros();
    527c:	bl	9398 <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5280:	ldr	r7, [pc, #24]	; (529c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    5282:	mov	r6, r0
    5284:	b.n	5290 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    5286:	bl	9398 <micros>
    528a:	subs	r0, r0, r6
    528c:	cmp	r0, r7
    528e:	bhi.n	5298 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    5290:	blx	r5
    5292:	mov	r4, r0
    5294:	cmp	r0, #0
    5296:	bne.n	5286 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    5298:	mov	r0, r4
    529a:	pop	{r3, r4, r5, r6, r7, pc}
    529c:	.word	0x000f4240

000052a0 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    52a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    52a4:	ldr.w	r8, [pc, #64]	; 52e8 <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    52a8:	ldr	r7, [pc, #56]	; (52e4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    52aa:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    52ae:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    52b0:	bl	9398 <micros>
    52b4:	mov	r6, r0
    52b6:	b.n	52c6 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    52b8:	bl	9398 <micros>
    52bc:	subs	r0, r0, r6
    52be:	cmp	r0, r7
    52c0:	bhi.n	52d8 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    52c2:	bl	a530 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    52c6:	blx	r5
    52c8:	mov	r4, r0
    52ca:	cmp	r0, #0
    52cc:	bne.n	52b8 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    52ce:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    52d2:	mov	r0, r4
    52d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    52d8:	movs	r3, #0
    52da:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    52de:	mov	r0, r4
    52e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52e4:	.word	0x000f4240
    52e8:	.word	0x1fff15c8

000052ec <SdioCard::~SdioCard()>:
    52ec:	push	{r4, lr}
    52ee:	movs	r1, #12
    52f0:	mov	r4, r0
    52f2:	bl	a71c <operator delete(void*, unsigned int)>
    52f6:	mov	r0, r4
    52f8:	pop	{r4, pc}
    52fa:	nop

000052fc <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    52fc:	ldr	r3, [pc, #20]	; (5314 <SdioCard::type() const+0x18>)
    52fe:	ldrb	r3, [r3, #0]
    5300:	cbz	r3, 5310 <SdioCard::type() const+0x14>
    5302:	ldr	r3, [pc, #20]	; (5318 <SdioCard::type() const+0x1c>)
    5304:	ldrb	r3, [r3, #0]
    5306:	cmp	r3, #0
    5308:	ite	ne
    530a:	movne	r0, #3
    530c:	moveq	r0, #2
    530e:	bx	lr
    5310:	movs	r0, #1
}
    5312:	bx	lr
    5314:	.word	0x1fff15b4
    5318:	.word	0x1fff15cc

0000531c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    531c:	push	{r3, r4, r5, lr}
    531e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    5320:	ldr	r0, [pc, #60]	; (5360 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    5322:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    5324:	bl	5278 <waitTimeout(bool (*)())>
    5328:	cbz	r0, 532e <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    532a:	movs	r0, #0
    532c:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    532e:	ldr	r2, [pc, #52]	; (5364 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    5330:	ldr	r3, [pc, #52]	; (5368 <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    5332:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    5334:	ldr	r0, [pc, #52]	; (536c <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    5336:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    5338:	bl	5278 <waitTimeout(bool (*)())>
    533c:	cmp	r0, #0
    533e:	bne.n	532a <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    5340:	ldr	r2, [pc, #44]	; (5370 <cardCommand(unsigned long, unsigned long)+0x54>)
    5342:	ldr	r3, [pc, #48]	; (5374 <cardCommand(unsigned long, unsigned long)+0x58>)
    5344:	ldr	r1, [r2, #0]
    5346:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5348:	ldr	r1, [r3, #0]
    534a:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    534c:	ldr	r2, [r3, #0]
    534e:	lsls	r2, r2, #31
    5350:	bpl.n	532a <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    5352:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    5354:	tst.w	r3, #983040	; 0xf0000
    5358:	bne.n	532a <cardCommand(unsigned long, unsigned long)+0xe>
    535a:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    535c:	pop	{r3, r4, r5, pc}
    535e:	nop
    5360:	.word	0x000050ed
    5364:	.word	0x400b1008
    5368:	.word	0x400b100c
    536c:	.word	0x000050d5
    5370:	.word	0x400b1030
    5374:	.word	0x1fff15d8

00005378 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    5378:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    537a:	ldr	r3, [pc, #16]	; (538c <SdioCard::status()+0x14>)
    537c:	ldr	r0, [pc, #16]	; (5390 <SdioCard::status()+0x18>)
    537e:	ldr	r1, [r3, #0]
    5380:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5384:	cbz	r0, 538a <SdioCard::status()+0x12>
    5386:	ldr	r3, [pc, #12]	; (5394 <SdioCard::status()+0x1c>)
    5388:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    538a:	pop	{r3, pc}
    538c:	.word	0x1fff15d4
    5390:	.word	0x0d1a0000
    5394:	.word	0x400b1010

00005398 <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    5398:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    539a:	ldr	r3, [pc, #84]	; (53f0 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    539c:	sub	sp, #20
    539e:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    53a0:	ldr	r1, [r3, #0]
    53a2:	bl	531c <cardCommand(unsigned long, unsigned long)>
    53a6:	cbz	r0, 53ea <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    53a8:	ldr	r2, [pc, #72]	; (53f4 <readReg16(unsigned long, void*)+0x5c>)
    53aa:	ldr	r3, [pc, #76]	; (53f8 <readReg16(unsigned long, void*)+0x60>)
    53ac:	ldr	r2, [r2, #0]
    53ae:	str	r2, [sp, #0]
    53b0:	ldr	r1, [r3, #0]
    53b2:	str	r1, [sp, #4]
    53b4:	ldr	r1, [r3, #4]
    53b6:	str	r1, [sp, #8]
    53b8:	adds	r3, #8
    53ba:	add.w	r4, r5, #15
    53be:	ldr	r3, [r3, #0]
    53c0:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    53c2:	movs	r3, #0
    53c4:	b.n	53ca <readReg16(unsigned long, void*)+0x32>
    53c6:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    53ca:	and.w	r1, r3, #3
    53ce:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    53d0:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    53d2:	lsrs	r2, r1
    53d4:	add.w	lr, sp, #16
    53d8:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    53dc:	cmp	r3, #15
    53de:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    53e0:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    53e4:	bne.n	53c6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    53e6:	movs	r3, #0
    53e8:	strb	r3, [r5, #15]
  return true;
}
    53ea:	add	sp, #20
    53ec:	pop	{r4, r5, pc}
    53ee:	nop
    53f0:	.word	0x1fff15d4
    53f4:	.word	0x400b1010
    53f8:	.word	0x400b1014

000053fc <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    53fc:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    53fe:	ldr	r3, [pc, #28]	; (541c <isBusyCMD13()+0x20>)
    5400:	ldr	r0, [pc, #28]	; (5420 <isBusyCMD13()+0x24>)
    5402:	ldr	r1, [r3, #0]
    5404:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5408:	cbz	r0, 5418 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    540a:	ldr	r3, [pc, #24]	; (5424 <isBusyCMD13()+0x28>)
    540c:	ldr	r0, [r3, #0]
    540e:	eor.w	r0, r0, #256	; 0x100
    5412:	ubfx	r0, r0, #8, #1
    5416:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    5418:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    541a:	pop	{r3, pc}
    541c:	.word	0x1fff15d4
    5420:	.word	0x0d1a0000
    5424:	.word	0x400b1010

00005428 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5428:	ldr	r3, [pc, #16]	; (543c <SdioCard::isBusy()+0x14>)
    542a:	ldr	r3, [r3, #0]
    542c:	cbz	r3, 5430 <SdioCard::isBusy()+0x8>
    542e:	bx	r3
    5430:	ldr	r3, [pc, #12]	; (5440 <SdioCard::isBusy()+0x18>)
    5432:	ldrb	r0, [r3, #0]
    5434:	cbnz	r0, 5438 <SdioCard::isBusy()+0x10>
}
    5436:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    5438:	b.w	53fc <isBusyCMD13()>
    543c:	.word	0x1fff15c8
    5440:	.word	0x1fff15dc

00005444 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5444:	ldr	r3, [pc, #20]	; (545c <waitDmaStatus() [clone .part.6]+0x18>)
    5446:	ldr	r0, [r3, #0]
    5448:	ands.w	r0, r0, #2
    544c:	beq.n	545a <waitDmaStatus() [clone .part.6]+0x16>
    544e:	ldr	r3, [r3, #0]
    5450:	ldr	r0, [pc, #12]	; (5460 <waitDmaStatus() [clone .part.6]+0x1c>)
    5452:	ands	r0, r3
    5454:	clz	r0, r0
    5458:	lsrs	r0, r0, #5
}
    545a:	bx	lr
    545c:	.word	0x1fff15d8
    5460:	.word	0x117f0000

00005464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    5464:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    5466:	lsls	r4, r2, #30
    5468:	bne.n	546c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    546a:	cbnz	r3, 547e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    546c:	ldr	r1, [pc, #124]	; (54ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    546e:	ldr	r3, [pc, #128]	; (54f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5470:	movs	r0, #36	; 0x24
  m_errorLine = line;
    5472:	movw	r2, #467	; 0x1d3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5476:	strb	r0, [r1, #0]
  m_errorLine = line;
    5478:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    547a:	movs	r0, #0
    547c:	pop	{r3, r4, r5, r6, r7, pc}
    547e:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    5480:	ldr	r0, [pc, #112]	; (54f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    5482:	mov	r4, r3
    5484:	mov	r7, r1
    5486:	mov	r5, r2
    5488:	bl	52a0 <yieldTimeout(bool (*)())>
    548c:	cbnz	r0, 54d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    548e:	ldr	r1, [pc, #104]	; (54f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    5490:	ldr	r2, [pc, #104]	; (54fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5492:	ldr.w	lr, [pc, #128]	; 5514 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    5496:	mov.w	ip, #1
    549a:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    549e:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    54a0:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    54a2:	ldr	r4, [pc, #92]	; (5500 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    54a4:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    54a6:	ldr	r2, [pc, #92]	; (5504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    54a8:	ldr	r1, [pc, #92]	; (5508 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    54aa:	ldr	r0, [pc, #96]	; (550c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    54ac:	orr.w	r3, r3, #512	; 0x200
    54b0:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    54b2:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    54b4:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    54b6:	cbnz	r3, 54e6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    54b8:	lsls	r1, r7, #9
    54ba:	mov	r0, r6
    54bc:	bl	531c <cardCommand(unsigned long, unsigned long)>
    54c0:	cmp	r0, #0
    54c2:	beq.n	547a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    54c4:	ldr	r0, [pc, #72]	; (5510 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    54c6:	bl	52a0 <yieldTimeout(bool (*)())>
    54ca:	cmp	r0, #0
    54cc:	bne.n	547a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    54ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    54d2:	b.w	5444 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    54d6:	ldr	r1, [pc, #20]	; (54ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    54d8:	ldr	r3, [pc, #20]	; (54f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    54da:	movs	r0, #10
  m_errorLine = line;
    54dc:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    54e0:	strb	r0, [r1, #0]
  m_errorLine = line;
    54e2:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    54e4:	b.n	547a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    54e6:	mov	r1, r7
    54e8:	b.n	54ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    54ea:	nop
    54ec:	.word	0x1fff0974
    54f0:	.word	0x1fff15f8
    54f4:	.word	0x000053fd
    54f8:	.word	0x1fff15d8
    54fc:	.word	0x400b1000
    5500:	.word	0x400b1004
    5504:	.word	0x1fff15cc
    5508:	.word	0x400b1038
    550c:	.word	0x117f0002
    5510:	.word	0x000050fd
    5514:	.word	0x1fff15f0

00005518 <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    5518:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    551a:	ldr	r1, [pc, #100]	; (5580 <SdioCard::sectorCount()+0x68>)
    551c:	ldrb	r3, [r1, #0]
    551e:	ands.w	r3, r3, #192	; 0xc0
    5522:	beq.n	5548 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    5524:	cmp	r3, #64	; 0x40
    5526:	beq.n	552e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    5528:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    552a:	pop	{r4, r5, r6}
    552c:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    552e:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    5530:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    5532:	ldrb	r0, [r1, #8]
    5534:	adds	r2, r3, #1
    5536:	and.w	r3, r4, #63	; 0x3f
    553a:	add.w	r3, r2, r3, lsl #16
    553e:	add.w	r0, r3, r0, lsl #8
    5542:	lsls	r0, r0, #10
    5544:	pop	{r4, r5, r6}
    5546:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    5548:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    554a:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    554c:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    554e:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    5550:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    5552:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    5554:	and.w	r1, r5, #3
    5558:	lsls	r1, r1, #1
    555a:	and.w	r3, r3, #3
    555e:	lsls	r2, r2, #2
    5560:	orr.w	r0, r1, r0, lsr #7
    5564:	orr.w	r3, r2, r3, lsl #10
    5568:	and.w	r1, r4, #15
    556c:	orr.w	r3, r3, r6, lsr #6
    5570:	add	r0, r1
    5572:	subs	r0, #7
    5574:	adds	r3, #1
    5576:	lsl.w	r0, r3, r0
    557a:	pop	{r4, r5, r6}
    557c:	bx	lr
    557e:	nop
    5580:	.word	0x1fff15e0

00005584 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    5584:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    5586:	ldr	r6, [pc, #176]	; (5638 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    5588:	ldrb	r3, [r6, #10]
    558a:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    558e:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    5590:	cbnz	r0, 55aa <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    5592:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    5596:	ldrb	r2, [r6, #11]
    5598:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    559c:	lsls	r3, r3, #1
    559e:	adds	r0, r5, #1
    55a0:	orr.w	r3, r3, r2, lsr #7
    55a4:	orrs	r0, r1
    55a6:	tst	r3, r0
    55a8:	bne.n	55ee <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    55aa:	ldr	r3, [pc, #144]	; (563c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    55ac:	ldrb	r3, [r3, #0]
    55ae:	cbnz	r3, 55b4 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    55b0:	lsls	r1, r1, #9
    lastSector <<= 9;
    55b2:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    55b4:	ldr	r0, [pc, #136]	; (5640 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    55b6:	bl	531c <cardCommand(unsigned long, unsigned long)>
    55ba:	mov	r4, r0
    55bc:	cbnz	r0, 55d0 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55be:	ldr	r1, [pc, #132]	; (5644 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    55c0:	ldr	r3, [pc, #132]	; (5648 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55c2:	movs	r0, #15
  m_errorLine = line;
    55c4:	movw	r2, #689	; 0x2b1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55c8:	strb	r0, [r1, #0]
  m_errorLine = line;
    55ca:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    55cc:	mov	r0, r4
    55ce:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    55d0:	mov	r1, r5
    55d2:	ldr	r0, [pc, #120]	; (564c <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    55d4:	bl	531c <cardCommand(unsigned long, unsigned long)>
    55d8:	mov	r4, r0
    55da:	cbnz	r0, 5600 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55dc:	ldr	r1, [pc, #100]	; (5644 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    55de:	ldr	r3, [pc, #104]	; (5648 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55e0:	movs	r0, #16
  m_errorLine = line;
    55e2:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55e6:	strb	r0, [r1, #0]
  m_errorLine = line;
    55e8:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    55ea:	mov	r0, r4
    55ec:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55ee:	ldr	r1, [pc, #84]	; (5644 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    55f0:	ldr	r3, [pc, #84]	; (5648 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55f2:	movs	r0, #38	; 0x26
  m_errorLine = line;
    55f4:	movw	r2, #681	; 0x2a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    55f8:	strb	r0, [r1, #0]
  m_errorLine = line;
    55fa:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    55fc:	mov	r0, r4
    55fe:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    5600:	movs	r1, #0
    5602:	ldr	r0, [pc, #76]	; (5650 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    5604:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5608:	mov	r4, r0
    560a:	cbnz	r0, 561c <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    560c:	ldr	r1, [pc, #52]	; (5644 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    560e:	ldr	r3, [pc, #56]	; (5648 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5610:	movs	r0, #17
  m_errorLine = line;
    5612:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5616:	strb	r0, [r1, #0]
  m_errorLine = line;
    5618:	str	r2, [r3, #0]
    561a:	b.n	55cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    561c:	ldr	r0, [pc, #52]	; (5654 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    561e:	bl	5278 <waitTimeout(bool (*)())>
    5622:	cmp	r0, #0
    5624:	beq.n	55cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5626:	ldr	r1, [pc, #28]	; (5644 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    5628:	ldr	r3, [pc, #28]	; (5648 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    562a:	movs	r0, #39	; 0x27
  m_errorLine = line;
    562c:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5630:	strb	r0, [r1, #0]
  m_errorLine = line;
    5632:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    5634:	movs	r4, #0
    5636:	b.n	55cc <SdioCard::erase(unsigned long, unsigned long)+0x48>
    5638:	.word	0x1fff15e0
    563c:	.word	0x1fff15cc
    5640:	.word	0x201a0000
    5644:	.word	0x1fff0974
    5648:	.word	0x1fff15f8
    564c:	.word	0x211a0000
    5650:	.word	0x261b0000
    5654:	.word	0x000053fd

00005658 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    5658:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    565a:	movs	r1, #0
    565c:	ldr	r0, [pc, #84]	; (56b4 <transferStop()+0x5c>)
    565e:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5662:	mov	r4, r0
    5664:	cbnz	r0, 5678 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5666:	ldr	r1, [pc, #80]	; (56b8 <transferStop()+0x60>)
  m_errorLine = line;
    5668:	ldr	r3, [pc, #80]	; (56bc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    566a:	movs	r0, #9
  m_errorLine = line;
    566c:	movw	r2, #537	; 0x219
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5670:	strb	r0, [r1, #0]
  m_errorLine = line;
    5672:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    5674:	mov	r0, r4
    5676:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    5678:	ldr	r0, [pc, #68]	; (56c0 <transferStop()+0x68>)
    567a:	bl	52a0 <yieldTimeout(bool (*)())>
    567e:	cbnz	r0, 569e <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    5680:	ldr	r0, [pc, #64]	; (56c4 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5682:	ldr	r1, [pc, #68]	; (56c8 <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5684:	ldr	r5, [pc, #68]	; (56cc <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    5686:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    5688:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    568a:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    568c:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    5690:	orr.w	r2, r2, #67108864	; 0x4000000
    5694:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    5696:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    5698:	str	r3, [r1, #0]
  return true;
}
    569a:	mov	r0, r4
    569c:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    569e:	ldr	r1, [pc, #24]	; (56b8 <transferStop()+0x60>)
  m_errorLine = line;
    56a0:	ldr	r3, [pc, #24]	; (56bc <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    56a2:	movs	r0, #10
  m_errorLine = line;
    56a4:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    56a8:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    56aa:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    56ac:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    56ae:	mov	r0, r4
    56b0:	pop	{r4, r5, r6, pc}
    56b2:	nop
    56b4:	.word	0x0cdb0000
    56b8:	.word	0x1fff0974
    56bc:	.word	0x1fff15f8
    56c0:	.word	0x000053fd
    56c4:	.word	0x400b1034
    56c8:	.word	0x400b1028
    56cc:	.word	0x400b102c

000056d0 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    56d0:	b.w	5658 <transferStop()>

000056d4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    56d4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    56d6:	ldr	r3, [pc, #160]	; (5778 <SdioCard::writeData(unsigned char const*)+0xa4>)
    56d8:	ldr	r3, [r3, #0]
    56da:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    56dc:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    56de:	bmi.n	56f2 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    56e0:	ldr	r3, [pc, #152]	; (577c <SdioCard::writeData(unsigned char const*)+0xa8>)
    56e2:	ldr	r2, [r3, #0]
    56e4:	bic.w	r2, r2, #65536	; 0x10000
    56e8:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    56ea:	ldr	r2, [r3, #0]
    56ec:	orr.w	r2, r2, #131072	; 0x20000
    56f0:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    56f2:	ldr	r2, [pc, #136]	; (577c <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    56f4:	ldr	r0, [pc, #136]	; (5780 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    56f6:	ldr	r3, [r2, #0]
    56f8:	orr.w	r3, r3, #65536	; 0x10000
    56fc:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    56fe:	bl	5278 <waitTimeout(bool (*)())>
    5702:	cmp	r0, #0
    5704:	bne.n	5764 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5706:	ldr	r4, [pc, #112]	; (5778 <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    5708:	ldr	r0, [pc, #120]	; (5784 <SdioCard::writeData(unsigned char const*)+0xb0>)
    570a:	subs	r3, r5, #4
    570c:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    5710:	ldr	r2, [r4, #0]
    5712:	lsls	r1, r2, #21
    5714:	bpl.n	5710 <SdioCard::writeData(unsigned char const*)+0x3c>
    5716:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    571a:	ldr.w	r2, [r3, #4]!
    571e:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5720:	cmp	r1, r3
    5722:	bne.n	571a <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    5724:	cmp	r5, r1
    5726:	mov	r3, r1
    5728:	bne.n	5710 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    572a:	ldr	r0, [pc, #92]	; (5788 <SdioCard::writeData(unsigned char const*)+0xb4>)
    572c:	bl	5278 <waitTimeout(bool (*)())>
    5730:	cbnz	r0, 5752 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    5732:	ldr	r2, [pc, #88]	; (578c <SdioCard::writeData(unsigned char const*)+0xb8>)
    5734:	ldr	r3, [pc, #88]	; (5790 <SdioCard::writeData(unsigned char const*)+0xbc>)
    5736:	ldr	r1, [r2, #0]
    5738:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    573a:	ldr	r1, [r3, #0]
    573c:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    573e:	ldr	r2, [r3, #0]
    5740:	lsls	r2, r2, #30
    5742:	bpl.n	5774 <SdioCard::writeData(unsigned char const*)+0xa0>
    5744:	ldr	r3, [r3, #0]
    5746:	ldr	r0, [pc, #76]	; (5794 <SdioCard::writeData(unsigned char const*)+0xc0>)
    5748:	ands	r0, r3
    574a:	clz	r0, r0
    574e:	lsrs	r0, r0, #5
    5750:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5752:	ldr	r1, [pc, #68]	; (5798 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    5754:	ldr	r3, [pc, #68]	; (579c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5756:	movs	r0, #35	; 0x23
  m_errorLine = line;
    5758:	movw	r2, #902	; 0x386
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    575c:	strb	r0, [r1, #0]
  m_errorLine = line;
    575e:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    5760:	movs	r0, #0
    5762:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5764:	ldr	r1, [pc, #48]	; (5798 <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    5766:	ldr	r3, [pc, #52]	; (579c <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5768:	movs	r0, #32
  m_errorLine = line;
    576a:	movw	r2, #891	; 0x37b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    576e:	strb	r0, [r1, #0]
  m_errorLine = line;
    5770:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    5772:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    5774:	pop	{r3, r4, r5, pc}
    5776:	nop
    5778:	.word	0x400b1024
    577c:	.word	0x400b1028
    5780:	.word	0x0000511d
    5784:	.word	0x400b1020
    5788:	.word	0x00005131
    578c:	.word	0x400b1030
    5790:	.word	0x1fff15d8
    5794:	.word	0x117f0000
    5798:	.word	0x1fff0974
    579c:	.word	0x1fff15f8

000057a0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    57a0:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    57a2:	ldr	r0, [pc, #80]	; (57f4 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    57a4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    57a6:	bl	52a0 <yieldTimeout(bool (*)())>
    57aa:	cbnz	r0, 57e0 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    57ac:	ldr	r2, [pc, #72]	; (57f8 <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    57ae:	ldr	r1, [pc, #76]	; (57fc <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    57b0:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    57b2:	ldr	r0, [pc, #76]	; (5800 <SdioCard::writeStart(unsigned long)+0x60>)
    57b4:	ldr	r5, [pc, #76]	; (5804 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    57b6:	bic.w	r3, r3, #65536	; 0x10000
    57ba:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    57bc:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    57be:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    57c0:	cbnz	r3, 57dc <SdioCard::writeStart(unsigned long)+0x3c>
    57c2:	lsls	r1, r4, #9
    57c4:	ldr	r0, [pc, #64]	; (5808 <SdioCard::writeStart(unsigned long)+0x68>)
    57c6:	bl	531c <cardCommand(unsigned long, unsigned long)>
    57ca:	cbnz	r0, 57da <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57cc:	ldr	r1, [pc, #60]	; (580c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    57ce:	ldr	r3, [pc, #64]	; (5810 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57d0:	movs	r4, #14
  m_errorLine = line;
    57d2:	movw	r2, #987	; 0x3db
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57d6:	strb	r4, [r1, #0]
  m_errorLine = line;
    57d8:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    57da:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    57dc:	mov	r1, r4
    57de:	b.n	57c4 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57e0:	ldr	r1, [pc, #40]	; (580c <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    57e2:	ldr	r3, [pc, #44]	; (5810 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57e4:	movs	r0, #10
  m_errorLine = line;
    57e6:	movw	r2, #975	; 0x3cf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    57ea:	strb	r0, [r1, #0]
  m_errorLine = line;
    57ec:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    57ee:	movs	r0, #0
    57f0:	pop	{r3, r4, r5, pc}
    57f2:	nop
    57f4:	.word	0x000053fd
    57f8:	.word	0x400b1028
    57fc:	.word	0x1fff15cc
    5800:	.word	0x400b1004
    5804:	.word	0xffff0200
    5808:	.word	0x193a0022
    580c:	.word	0x1fff0974
    5810:	.word	0x1fff15f8

00005814 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    5814:	push	{r3, r4, r5, r6, r7, lr}
    5816:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    5818:	ldrb	r0, [r0, #8]
    581a:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    581c:	mov	r4, r1
    581e:	mov	r5, r2
    5820:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    5822:	bmi.n	584c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    5824:	cbz	r3, 5848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5826:	add	r7, r1
    5828:	b.n	582e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    582a:	cmp	r4, r7
    582c:	beq.n	5848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    582e:	ldr	r3, [r6, #0]
    5830:	mov	r2, r5
    5832:	mov	r1, r4
    5834:	ldr	r3, [r3, #8]
    5836:	mov	r0, r6
    5838:	blx	r3
    583a:	adds	r4, #1
    583c:	add.w	r5, r5, #512	; 0x200
    5840:	cmp	r0, #0
    5842:	bne.n	582a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    5844:	movs	r0, #0
    5846:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    5848:	movs	r0, #1
    584a:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    584c:	lsls	r0, r2, #30
    584e:	beq.n	5876 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5850:	cmp	r3, #0
    5852:	beq.n	5848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    5854:	add	r7, r1
    5856:	b.n	585c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    5858:	cmp	r7, r4
    585a:	beq.n	5848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    585c:	ldr	r3, [r6, #0]
    585e:	mov	r2, r5
    5860:	mov	r1, r4
    5862:	ldr	r3, [r3, #8]
    5864:	mov	r0, r6
    5866:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    5868:	adds	r4, #1
    586a:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    586e:	cmp	r0, #0
    5870:	bne.n	5858 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    5872:	movs	r0, #0
    5874:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    5876:	ldr	r0, [pc, #24]	; (5890 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    5878:	bl	5464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    587c:	cmp	r0, #0
    587e:	bne.n	5848 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5880:	ldr	r1, [pc, #16]	; (5894 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    5882:	ldr	r3, [pc, #20]	; (5898 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5884:	movs	r4, #12
  m_errorLine = line;
    5886:	movw	r2, #817	; 0x331
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    588a:	strb	r4, [r1, #0]
  m_errorLine = line;
    588c:	str	r2, [r3, #0]
    588e:	pop	{r3, r4, r5, r6, r7, pc}
    5890:	.word	0x123a0037
    5894:	.word	0x1fff0974
    5898:	.word	0x1fff15f8

0000589c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    589c:	push	{r3, r4, r5, r6, r7, lr}
    589e:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    58a0:	ldrb	r0, [r0, #8]
    58a2:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    58a4:	mov	r4, r1
    58a6:	mov	r5, r2
    58a8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    58aa:	bmi.n	58d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    58ac:	cbz	r3, 58d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    58ae:	add	r7, r1
    58b0:	b.n	58b6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    58b2:	cmp	r4, r7
    58b4:	beq.n	58d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    58b6:	ldr	r3, [r6, #0]
    58b8:	mov	r2, r5
    58ba:	mov	r1, r4
    58bc:	ldr	r3, [r3, #24]
    58be:	mov	r0, r6
    58c0:	blx	r3
    58c2:	adds	r4, #1
    58c4:	add.w	r5, r5, #512	; 0x200
    58c8:	cmp	r0, #0
    58ca:	bne.n	58b2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    58cc:	movs	r0, #0
    58ce:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    58d0:	movs	r0, #1
    58d2:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    58d4:	lsls	r0, r2, #30
    58d6:	beq.n	58fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    58d8:	cmp	r3, #0
    58da:	beq.n	58d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    58dc:	add	r7, r1
    58de:	b.n	58e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    58e0:	cmp	r7, r4
    58e2:	beq.n	58d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    58e4:	ldr	r3, [r6, #0]
    58e6:	mov	r2, r5
    58e8:	mov	r1, r4
    58ea:	ldr	r3, [r3, #24]
    58ec:	mov	r0, r6
    58ee:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    58f0:	adds	r4, #1
    58f2:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    58f6:	cmp	r0, #0
    58f8:	bne.n	58e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    58fa:	movs	r0, #0
    58fc:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    58fe:	ldr	r0, [pc, #24]	; (5918 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    5900:	bl	5464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5904:	cmp	r0, #0
    5906:	bne.n	58d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5908:	ldr	r1, [pc, #16]	; (591c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    590a:	ldr	r3, [pc, #20]	; (5920 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    590c:	movs	r4, #14
  m_errorLine = line;
    590e:	movw	r2, #961	; 0x3c1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5912:	strb	r4, [r1, #0]
  m_errorLine = line;
    5914:	str	r2, [r3, #0]
    5916:	pop	{r3, r4, r5, r6, r7, pc}
    5918:	.word	0x193a0027
    591c:	.word	0x1fff0974
    5920:	.word	0x1fff15f8

00005924 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5924:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    5926:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    5928:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    592a:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    592c:	sub.w	sp, sp, #512	; 0x200
    5930:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    5932:	bpl.n	5968 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    5934:	lsls	r3, r5, #30
    5936:	beq.n	5946 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    5938:	mov	r1, r5
    593a:	mov	r0, sp
    593c:	mov.w	r2, #512	; 0x200
    5940:	bl	8df4 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    5944:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    5946:	mov	r2, r5
    5948:	mov	r1, r6
    594a:	movs	r3, #1
    594c:	ldr	r0, [pc, #120]	; (59c8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    594e:	bl	5464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5952:	cbnz	r0, 5962 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5954:	ldr	r1, [pc, #116]	; (59cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    5956:	ldr	r3, [pc, #120]	; (59d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5958:	movs	r4, #13
  m_errorLine = line;
    595a:	mov.w	r2, #920	; 0x398
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    595e:	strb	r4, [r1, #0]
  m_errorLine = line;
    5960:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    5962:	add.w	sp, sp, #512	; 0x200
    5966:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    5968:	ldrb	r3, [r0, #9]
    596a:	cmp	r3, #2
    596c:	mov	r4, r0
    596e:	beq.n	5982 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    5970:	ldr	r3, [r4, #0]
    5972:	mov	r0, r4
    5974:	ldr	r3, [r3, #20]
    5976:	blx	r3
    5978:	cbnz	r0, 59b2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    597a:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    597c:	add.w	sp, sp, #512	; 0x200
    5980:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    5982:	ldr	r3, [r0, #4]
    5984:	cmp	r1, r3
    5986:	bne.n	5970 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    5988:	ldr	r3, [r4, #0]
    598a:	mov	r1, r5
    598c:	ldr	r3, [r3, #68]	; 0x44
    598e:	mov	r0, r4
    5990:	blx	r3
    5992:	cmp	r0, #0
    5994:	beq.n	597a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    5996:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    5998:	ldr	r2, [pc, #56]	; (59d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    599a:	adds	r3, #1
    599c:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    599e:	ldr	r3, [r2, #0]
    59a0:	lsrs	r3, r3, #16
    59a2:	lsls	r3, r3, #16
    59a4:	cmp	r3, #0
    59a6:	bne.n	5962 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    59a8:	ldr	r3, [r4, #0]
    59aa:	mov	r0, r4
    59ac:	ldr	r3, [r3, #20]
    59ae:	blx	r3
    59b0:	b.n	5962 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    59b2:	ldr	r3, [r4, #0]
    59b4:	mov	r1, r6
    59b6:	ldr	r3, [r3, #72]	; 0x48
    59b8:	mov	r0, r4
    59ba:	blx	r3
    59bc:	cmp	r0, #0
    59be:	beq.n	597a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    59c0:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    59c2:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    59c4:	strb	r3, [r4, #9]
    59c6:	b.n	5988 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    59c8:	.word	0x183a0001
    59cc:	.word	0x1fff0974
    59d0:	.word	0x1fff15f8
    59d4:	.word	0x400b1004

000059d8 <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    59d8:	ldrb	r3, [r0, #9]
    59da:	cmp	r3, #1
    59dc:	beq.n	59f8 <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    59de:	cmp	r3, #2
    59e0:	beq.n	59e6 <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    59e2:	movs	r0, #1
    59e4:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    59e6:	movs	r1, #0
    if (!writeStop()) {
    59e8:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    59ea:	strb	r1, [r0, #9]
    if (!writeStop()) {
    59ec:	ldr	r3, [r3, #76]	; 0x4c
    59ee:	ldr	r2, [pc, #20]	; (5a04 <SdioCard::syncDevice()+0x2c>)
    59f0:	cmp	r3, r2
    59f2:	bne.n	5a00 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    59f4:	b.w	5658 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    59f8:	movs	r3, #0
    59fa:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    59fc:	b.w	5658 <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    5a00:	bx	r3
    5a02:	nop
    5a04:	.word	0x000056d1

00005a08 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5a08:	push	{r3, r4, r5, r6, r7, lr}
    5a0a:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5a0c:	ldr	r0, [pc, #116]	; (5a84 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    5a0e:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    5a10:	bl	5278 <waitTimeout(bool (*)())>
    5a14:	cbz	r0, 5a28 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a16:	ldr	r1, [pc, #112]	; (5a88 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    5a18:	ldr	r3, [pc, #112]	; (5a8c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a1a:	movs	r0, #10
  m_errorLine = line;
    5a1c:	mov.w	r2, #374	; 0x176
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a20:	strb	r0, [r1, #0]
  m_errorLine = line;
    5a22:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5a24:	movs	r0, #0
    5a26:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5a28:	ldr	r2, [pc, #100]	; (5a90 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5a2a:	ldr.w	lr, [pc, #132]	; 5ab0 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    5a2e:	ldr	r7, [pc, #100]	; (5a94 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5a30:	ldr	r6, [pc, #100]	; (5a98 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a32:	ldr	r3, [pc, #104]	; (5a9c <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    5a34:	mov.w	ip, #1
    5a38:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a3c:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    5a3e:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5a40:	ldr	r5, [pc, #92]	; (5aa0 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a42:	ldr	r2, [pc, #96]	; (5aa4 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    5a44:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a46:	ldr	r0, [pc, #96]	; (5aa8 <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    5a48:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    5a4a:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    5a4c:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5a50:	cbnz	r0, 5a62 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a52:	ldr	r1, [pc, #52]	; (5a88 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    5a54:	ldr	r3, [pc, #52]	; (5a8c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a56:	movs	r4, #4
  m_errorLine = line;
    5a58:	movw	r2, #381	; 0x17d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a5c:	strb	r4, [r1, #0]
  m_errorLine = line;
    5a5e:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    5a60:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    5a62:	ldr	r0, [pc, #72]	; (5aac <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    5a64:	bl	52a0 <yieldTimeout(bool (*)())>
    5a68:	cbnz	r0, 5a72 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    5a6a:	bl	5444 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    5a6e:	cbz	r0, 5a72 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    5a70:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a72:	ldr	r1, [pc, #20]	; (5a88 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    5a74:	ldr	r3, [pc, #20]	; (5a8c <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a76:	movs	r0, #36	; 0x24
  m_errorLine = line;
    5a78:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5a7c:	strb	r0, [r1, #0]
  m_errorLine = line;
    5a7e:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    5a80:	movs	r0, #0
    5a82:	pop	{r3, r4, r5, r6, r7, pc}
    5a84:	.word	0x000053fd
    5a88:	.word	0x1fff0974
    5a8c:	.word	0x1fff15f8
    5a90:	.word	0x1fff15d8
    5a94:	.word	0x400b1000
    5a98:	.word	0x400b1004
    5a9c:	.word	0x400b1038
    5aa0:	.word	0x00010040
    5aa4:	.word	0x117f0002
    5aa8:	.word	0x063a0011
    5aac:	.word	0x000050fd
    5ab0:	.word	0x1fff15f0

00005ab4 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    5ab4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    5ab8:	ldr	r5, [pc, #568]	; (5cf4 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    5aba:	ldr	r4, [pc, #572]	; (5cf8 <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    5abc:	ldr.w	r8, [pc, #684]	; 5d6c <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    5ac0:	ldr	r7, [pc, #568]	; (5cfc <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    5ac2:	ldr	r6, [pc, #572]	; (5d00 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    5ac4:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    5ac6:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    5ac8:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    5aca:	strb	r3, [r0, #9]
  m_initDone = false;
    5acc:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    5ad0:	strb	r3, [r7, #0]
  m_version2 = false;
    5ad2:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    5ad4:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    5ad6:	ldr	r2, [pc, #556]	; (5d04 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5ad8:	ldr	r0, [pc, #556]	; (5d08 <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5ada:	ldr	r1, [pc, #560]	; (5d0c <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5adc:	ldr.w	lr, [pc, #656]	; 5d70 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    5ae0:	orr.w	r3, r3, #201326592	; 0xc000000
    5ae4:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    5ae6:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5ae8:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    5aec:	orr.w	r3, r3, #131072	; 0x20000
    5af0:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5af2:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5af4:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5af8:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5afc:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5b00:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5b02:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5b06:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5b08:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5b0a:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    5b0c:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5b0e:	ldr	r3, [r2, #0]
    5b10:	orr.w	r3, r3, #16777216	; 0x1000000
    5b14:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    5b18:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    5b1a:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    5b1c:	ldr	r3, [r2, #0]
    5b1e:	ldr	r4, [pc, #496]	; (5d10 <SdioCard::begin(SdioConfig)+0x25c>)
    5b20:	lsls	r1, r3, #7
    5b22:	bmi.n	5b1c <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(400);
    5b24:	mov.w	r0, #400	; 0x190
    5b28:	bl	5148 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5b2c:	ldr.w	ip, [pc, #472]	; 5d08 <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5b30:	ldr.w	lr, [pc, #572]	; 5d70 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5b34:	ldr	r1, [pc, #468]	; (5d0c <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5b36:	ldr	r2, [pc, #476]	; (5d14 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5b38:	ldr	r0, [pc, #476]	; (5d18 <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5b3a:	movw	r3, #1091	; 0x443
    5b3e:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5b42:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5b46:	mov.w	lr, #1088	; 0x440
    5b4a:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5b4e:	str	r3, [r2, #0]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5b50:	add.w	r2, r2, #409600	; 0x64000
    5b54:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5b56:	str	r3, [r0, #0]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5b58:	ldr	r0, [pc, #448]	; (5d1c <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    5b5a:	str	r3, [r1, #12]
  setSdclk(400);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    5b5c:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    5b5e:	ldr	r1, [pc, #448]	; (5d20 <SdioCard::begin(SdioConfig)+0x26c>)
    5b60:	movs	r0, #81	; 0x51
    5b62:	bl	934c <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5b66:	ldr	r3, [pc, #444]	; (5d24 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    5b68:	ldr	r1, [pc, #444]	; (5d28 <SdioCard::begin(SdioConfig)+0x274>)
    5b6a:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5b6c:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    5b70:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    5b72:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    5b74:	ldr	r3, [r4, #0]
    5b76:	orr.w	r3, r3, #134217728	; 0x8000000
    5b7a:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    5b7c:	ldr	r1, [r4, #0]
    5b7e:	ands.w	r1, r1, #134217728	; 0x8000000
    5b82:	bne.n	5b7c <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    5b84:	mov	r0, r1
    5b86:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5b8a:	mov	r4, r0
    5b8c:	cmp	r0, #0
    5b8e:	beq.n	5c2e <SdioCard::begin(SdioConfig)+0x17a>
    5b90:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    5b92:	mov.w	r1, #426	; 0x1aa
    5b96:	ldr	r0, [pc, #404]	; (5d2c <SdioCard::begin(SdioConfig)+0x278>)
    5b98:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5b9c:	cmp	r0, #0
    5b9e:	bne.n	5c5c <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    5ba0:	subs	r4, #1
    5ba2:	bne.n	5b92 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    5ba4:	ldrb	r3, [r6, #0]
    5ba6:	ldr	r6, [pc, #392]	; (5d30 <SdioCard::begin(SdioConfig)+0x27c>)
    5ba8:	cmp	r3, #0
    5baa:	it	eq
    5bac:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    5bb0:	bl	9398 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    5bb4:	ldr	r4, [pc, #380]	; (5d34 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    5bb6:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    5bb8:	movs	r1, #0
    5bba:	ldr	r0, [pc, #380]	; (5d38 <SdioCard::begin(SdioConfig)+0x284>)
    5bbc:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5bc0:	cbnz	r0, 5bd8 <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5bc2:	ldr	r2, [pc, #376]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5bc4:	movw	r1, #618	; 0x26a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bc8:	movs	r3, #23
  m_errorLine = line;
    5bca:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5bcc:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    5bce:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    5bd0:	mov	r0, r4
    5bd2:	add	sp, #68	; 0x44
    5bd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    5bd8:	mov	r1, r6
    5bda:	ldr	r0, [pc, #356]	; (5d40 <SdioCard::begin(SdioConfig)+0x28c>)
    5bdc:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5be0:	cmp	r0, #0
    5be2:	beq.n	5bc2 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    5be4:	bl	9398 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    5be8:	ldr	r3, [pc, #344]	; (5d44 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    5bea:	ldr	r2, [pc, #328]	; (5d34 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    5bec:	rsb	r0, r9, r0
    5bf0:	cmp	r0, r3
    5bf2:	bhi.n	5bc2 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    5bf4:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    5bf6:	cmp	r3, #0
    5bf8:	bge.n	5bb8 <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    5bfa:	ldr	r3, [pc, #332]	; (5d48 <SdioCard::begin(SdioConfig)+0x294>)
    5bfc:	ldr	r1, [r2, #0]
    5bfe:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    5c00:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    5c02:	ldr	r0, [pc, #328]	; (5d4c <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    5c04:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    5c06:	it	mi
    5c08:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    5c0a:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    5c0e:	it	mi
    5c10:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    5c12:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5c16:	mov	r4, r0
    5c18:	cbnz	r0, 5c42 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c1a:	ldr	r2, [pc, #288]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5c1c:	movw	r1, #627	; 0x273
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c20:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    5c22:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c24:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c26:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    5c28:	add	sp, #68	; 0x44
    5c2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c2e:	ldr	r2, [pc, #268]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5c30:	movw	r1, #601	; 0x259
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c34:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    5c36:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c38:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c3a:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    5c3c:	add	sp, #68	; 0x44
    5c3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    5c42:	movs	r1, #0
    5c44:	ldr	r0, [pc, #264]	; (5d50 <SdioCard::begin(SdioConfig)+0x29c>)
    5c46:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5c4a:	mov	r4, r0
    5c4c:	cbnz	r0, 5c7e <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c4e:	ldr	r2, [pc, #236]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5c50:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c54:	movs	r3, #3
  m_errorLine = line;
    5c56:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c58:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    5c5a:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    5c5c:	ldr	r3, [pc, #212]	; (5d34 <SdioCard::begin(SdioConfig)+0x280>)
    5c5e:	ldr	r3, [r3, #0]
    5c60:	cmp.w	r3, #426	; 0x1aa
    5c64:	beq.n	5c76 <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c66:	ldr	r2, [pc, #212]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5c68:	movw	r1, #607	; 0x25f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c6c:	movs	r3, #6
  m_errorLine = line;
    5c6e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c70:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    5c72:	movs	r4, #0
    5c74:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    5c76:	movs	r3, #1
    5c78:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    5c7a:	ldr	r6, [pc, #180]	; (5d30 <SdioCard::begin(SdioConfig)+0x27c>)
    5c7c:	b.n	5bb0 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    5c7e:	ldr	r3, [pc, #180]	; (5d34 <SdioCard::begin(SdioConfig)+0x280>)
    5c80:	ldr	r6, [pc, #208]	; (5d54 <SdioCard::begin(SdioConfig)+0x2a0>)
    5c82:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    5c84:	ldr	r1, [pc, #208]	; (5d58 <SdioCard::begin(SdioConfig)+0x2a4>)
    5c86:	ldr	r0, [pc, #212]	; (5d5c <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    5c88:	lsrs	r3, r3, #16
    5c8a:	lsls	r3, r3, #16
    5c8c:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    5c8e:	bl	5398 <readReg16(unsigned long, void*)>
    5c92:	mov	r4, r0
    5c94:	cbnz	r0, 5ca4 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5c96:	ldr	r2, [pc, #164]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5c98:	movw	r1, #635	; 0x27b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5c9c:	movs	r3, #7
  m_errorLine = line;
    5c9e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ca0:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    5ca2:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    5ca4:	ldr	r1, [pc, #184]	; (5d60 <SdioCard::begin(SdioConfig)+0x2ac>)
    5ca6:	ldr	r0, [pc, #188]	; (5d64 <SdioCard::begin(SdioConfig)+0x2b0>)
    5ca8:	bl	5398 <readReg16(unsigned long, void*)>
    5cac:	mov	r4, r0
    5cae:	cbnz	r0, 5cbe <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5cb0:	ldr	r2, [pc, #136]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5cb2:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cb6:	movs	r3, #8
  m_errorLine = line;
    5cb8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cba:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    5cbc:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    5cbe:	ldr	r1, [r6, #0]
    5cc0:	ldr	r0, [pc, #164]	; (5d68 <SdioCard::begin(SdioConfig)+0x2b4>)
    5cc2:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5cc6:	mov	r4, r0
    5cc8:	cbnz	r0, 5cd8 <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5cca:	ldr	r2, [pc, #112]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5ccc:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cd0:	movs	r3, #5
  m_errorLine = line;
    5cd2:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cd4:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    5cd6:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    5cd8:	ldr	r1, [r6, #0]
    5cda:	ldr	r0, [pc, #92]	; (5d38 <SdioCard::begin(SdioConfig)+0x284>)
    5cdc:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5ce0:	cmp	r0, #0
    5ce2:	bne.n	5d74 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5ce4:	ldr	r2, [pc, #84]	; (5d3c <SdioCard::begin(SdioConfig)+0x288>)
    5ce6:	movw	r1, #645	; 0x285
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cea:	movs	r3, #20
  m_errorLine = line;
    5cec:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5cee:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    5cf0:	movs	r4, #0
    5cf2:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>
    5cf4:	.word	0x1fff0974
    5cf8:	.word	0x4000d800
    5cfc:	.word	0x1fff15cc
    5d00:	.word	0x1fff15b4
    5d04:	.word	0x40048030
    5d08:	.word	0x4004d000
    5d0c:	.word	0x4004d008
    5d10:	.word	0x400b102c
    5d14:	.word	0x4004d00c
    5d18:	.word	0x4004d010
    5d1c:	.word	0x117f000b
    5d20:	.word	0x000050a5
    5d24:	.word	0xe000e108
    5d28:	.word	0xe000e451
    5d2c:	.word	0x081a0000
    5d30:	.word	0x40300000
    5d34:	.word	0x400b1010
    5d38:	.word	0x371a0000
    5d3c:	.word	0x1fff15f8
    5d40:	.word	0x29020000
    5d44:	.word	0x000f4240
    5d48:	.word	0x1fff15d0
    5d4c:	.word	0x02090000
    5d50:	.word	0x031a0000
    5d54:	.word	0x1fff15d4
    5d58:	.word	0x1fff15e0
    5d5c:	.word	0x09090000
    5d60:	.word	0x1fff15b8
    5d64:	.word	0x0a090000
    5d68:	.word	0x071b0000
    5d6c:	.word	0x1fff15dc
    5d70:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    5d74:	movs	r1, #2
    5d76:	ldr	r0, [pc, #168]	; (5e20 <SdioCard::begin(SdioConfig)+0x36c>)
    5d78:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5d7c:	mov	r4, r0
    5d7e:	cmp	r0, #0
    5d80:	beq.n	5ce4 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    5d82:	ldr	r3, [pc, #160]	; (5e24 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    5d84:	ldr	r0, [pc, #160]	; (5e28 <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    5d86:	ldr	r2, [r3, #0]
    5d88:	bic.w	r2, r2, #6
    5d8c:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    5d8e:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    5d90:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    5d94:	orr.w	r2, r2, #2
    5d98:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    5d9a:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    5d9c:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    5d9e:	mvn.w	r0, #4278190080	; 0xff000000
    5da2:	bl	5a08 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    5da6:	cbz	r0, 5db0 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    5da8:	ldrb.w	r3, [sp, #13]
    5dac:	lsls	r3, r3, #30
    5dae:	bmi.n	5e02 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    5db0:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5db4:	ldr.w	fp, [pc, #132]	; 5e3c <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5db8:	ldr.w	sl, [pc, #132]	; 5e40 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5dbc:	ldr.w	r9, [pc, #132]	; 5e44 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5dc0:	ldr	r7, [pc, #104]	; (5e2c <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5dc2:	ldr	r6, [pc, #108]	; (5e30 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    5dc4:	ldr	r5, [pc, #108]	; (5e34 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5dc6:	movw	r3, #259	; 0x103
    5dca:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5dce:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5dd2:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5dd6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5dd8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    5dda:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    5ddc:	bl	5148 <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5de0:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5de4:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    5de8:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    5dea:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    5dee:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    5df2:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    5df6:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    5df8:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    5dfa:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    5dfc:	strb.w	r2, [r8]
  return true;
    5e00:	b.n	5bd0 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    5e02:	mov	r1, sp
    5e04:	ldr	r0, [pc, #48]	; (5e38 <SdioCard::begin(SdioConfig)+0x384>)
    5e06:	bl	5a08 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    5e0a:	cmp	r0, #0
    5e0c:	beq.n	5db0 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    5e0e:	ldrb.w	r3, [sp, #16]
    5e12:	and.w	r3, r3, #15
    5e16:	cmp	r3, #1
    5e18:	bne.n	5db0 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    5e1a:	movw	r0, #50000	; 0xc350
    5e1e:	b.n	5db4 <SdioCard::begin(SdioConfig)+0x300>
    5e20:	.word	0x061a0000
    5e24:	.word	0x400b1028
    5e28:	.word	0x400b1044
    5e2c:	.word	0x4004d00c
    5e30:	.word	0x4004d010
    5e34:	.word	0x4004d014
    5e38:	.word	0x80fffff1
    5e3c:	.word	0x4004d000
    5e40:	.word	0x4004d004
    5e44:	.word	0x4004d008

00005e48 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    5e48:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    5e4a:	ldr	r3, [pc, #160]	; (5eec <SdioCard::readData(unsigned char*)+0xa4>)
    5e4c:	ldr	r3, [r3, #0]
    5e4e:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    5e50:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    5e52:	bmi.n	5e72 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    5e54:	ldr	r3, [pc, #152]	; (5ef0 <SdioCard::readData(unsigned char*)+0xa8>)
    5e56:	ldr	r2, [r3, #0]
    5e58:	bic.w	r2, r2, #65536	; 0x10000
    5e5c:	str	r2, [r3, #0]
    noInterrupts();
    5e5e:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    5e60:	ldr	r2, [r3, #0]
    5e62:	orr.w	r2, r2, #131072	; 0x20000
    5e66:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5e68:	ldr	r2, [r3, #0]
    5e6a:	orr.w	r2, r2, #65536	; 0x10000
    5e6e:	str	r2, [r3, #0]
    interrupts();
    5e70:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    5e72:	ldr	r0, [pc, #128]	; (5ef4 <SdioCard::readData(unsigned char*)+0xac>)
    5e74:	bl	5278 <waitTimeout(bool (*)())>
    5e78:	cmp	r0, #0
    5e7a:	bne.n	5eda <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    5e7c:	ldr	r4, [pc, #108]	; (5eec <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    5e7e:	ldr	r0, [pc, #120]	; (5ef8 <SdioCard::readData(unsigned char*)+0xb0>)
    5e80:	subs	r3, r5, #4
    5e82:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    5e86:	ldr	r2, [r4, #0]
    5e88:	lsls	r1, r2, #20
    5e8a:	bpl.n	5e86 <SdioCard::readData(unsigned char*)+0x3e>
    5e8c:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    5e90:	ldr	r2, [r0, #0]
    5e92:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    5e96:	cmp	r1, r3
    5e98:	bne.n	5e90 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    5e9a:	cmp	r5, r1
    5e9c:	mov	r3, r1
    5e9e:	bne.n	5e86 <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    5ea0:	ldr	r0, [pc, #88]	; (5efc <SdioCard::readData(unsigned char*)+0xb4>)
    5ea2:	bl	5278 <waitTimeout(bool (*)())>
    5ea6:	cbnz	r0, 5ec8 <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    5ea8:	ldr	r2, [pc, #84]	; (5f00 <SdioCard::readData(unsigned char*)+0xb8>)
    5eaa:	ldr	r3, [pc, #88]	; (5f04 <SdioCard::readData(unsigned char*)+0xbc>)
    5eac:	ldr	r1, [r2, #0]
    5eae:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    5eb0:	ldr	r1, [r3, #0]
    5eb2:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    5eb4:	ldr	r2, [r3, #0]
    5eb6:	lsls	r2, r2, #30
    5eb8:	bpl.n	5eea <SdioCard::readData(unsigned char*)+0xa2>
    5eba:	ldr	r3, [r3, #0]
    5ebc:	ldr	r0, [pc, #72]	; (5f08 <SdioCard::readData(unsigned char*)+0xc0>)
    5ebe:	ands	r0, r3
    5ec0:	clz	r0, r0
    5ec4:	lsrs	r0, r0, #5
    5ec6:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ec8:	ldr	r1, [pc, #64]	; (5f0c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    5eca:	ldr	r3, [pc, #68]	; (5f10 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ecc:	movs	r0, #29
  m_errorLine = line;
    5ece:	mov.w	r2, #756	; 0x2f4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ed2:	strb	r0, [r1, #0]
  m_errorLine = line;
    5ed4:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    5ed6:	movs	r0, #0
    5ed8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5eda:	ldr	r1, [pc, #48]	; (5f0c <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    5edc:	ldr	r3, [pc, #48]	; (5f10 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ede:	movs	r0, #26
  m_errorLine = line;
    5ee0:	movw	r2, #745	; 0x2e9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ee4:	strb	r0, [r1, #0]
  m_errorLine = line;
    5ee6:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    5ee8:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    5eea:	pop	{r3, r4, r5, pc}
    5eec:	.word	0x400b1024
    5ef0:	.word	0x400b1028
    5ef4:	.word	0x00005109
    5ef8:	.word	0x400b1020
    5efc:	.word	0x00005131
    5f00:	.word	0x400b1030
    5f04:	.word	0x1fff15d8
    5f08:	.word	0x117f0000
    5f0c:	.word	0x1fff0974
    5f10:	.word	0x1fff15f8

00005f14 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    5f14:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    5f16:	ldr	r0, [pc, #80]	; (5f68 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    5f18:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    5f1a:	bl	52a0 <yieldTimeout(bool (*)())>
    5f1e:	cbnz	r0, 5f54 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5f20:	ldr	r2, [pc, #72]	; (5f6c <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f22:	ldr	r1, [pc, #76]	; (5f70 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5f24:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    5f26:	ldr	r0, [pc, #76]	; (5f74 <SdioCard::readStart(unsigned long)+0x60>)
    5f28:	ldr	r5, [pc, #76]	; (5f78 <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    5f2a:	orr.w	r3, r3, #65536	; 0x10000
    5f2e:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f30:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    5f32:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f34:	cbnz	r3, 5f50 <SdioCard::readStart(unsigned long)+0x3c>
    5f36:	lsls	r1, r4, #9
    5f38:	ldr	r0, [pc, #64]	; (5f7c <SdioCard::readStart(unsigned long)+0x68>)
    5f3a:	bl	531c <cardCommand(unsigned long, unsigned long)>
    5f3e:	cbnz	r0, 5f4e <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f40:	ldr	r1, [pc, #60]	; (5f80 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    5f42:	ldr	r3, [pc, #64]	; (5f84 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f44:	movs	r4, #12
  m_errorLine = line;
    5f46:	movw	r2, #845	; 0x34d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f4a:	strb	r4, [r1, #0]
  m_errorLine = line;
    5f4c:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    5f4e:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    5f50:	mov	r1, r4
    5f52:	b.n	5f38 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f54:	ldr	r1, [pc, #40]	; (5f80 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    5f56:	ldr	r3, [pc, #44]	; (5f84 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f58:	movs	r0, #10
  m_errorLine = line;
    5f5a:	movw	r2, #833	; 0x341
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5f5e:	strb	r0, [r1, #0]
  m_errorLine = line;
    5f60:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    5f62:	movs	r0, #0
    5f64:	pop	{r3, r4, r5, pc}
    5f66:	nop
    5f68:	.word	0x000053fd
    5f6c:	.word	0x400b1028
    5f70:	.word	0x1fff15cc
    5f74:	.word	0x400b1004
    5f78:	.word	0xffff0200
    5f7c:	.word	0x123a0032
    5f80:	.word	0x1fff0974
    5f84:	.word	0x1fff15f8

00005f88 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    5f88:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    5f8a:	ldrb	r3, [r0, #8]
    5f8c:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    5f8e:	sub.w	sp, sp, #512	; 0x200
    5f92:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    5f94:	bpl.n	5fbc <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    5f96:	lsls	r3, r2, #30
    5f98:	beq.n	5fda <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    5f9a:	mov	r2, sp
    5f9c:	movs	r3, #1
    5f9e:	ldr	r0, [pc, #168]	; (6048 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    5fa0:	bl	5464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5fa4:	cbz	r0, 5fe6 <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    5fa6:	mov	r1, sp
    5fa8:	mov	r0, r5
    5faa:	mov.w	r2, #512	; 0x200
    5fae:	bl	8df4 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    5fb2:	movs	r5, #1
}
    5fb4:	mov	r0, r5
    5fb6:	add.w	sp, sp, #512	; 0x200
    5fba:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    5fbc:	ldrb	r3, [r0, #9]
    5fbe:	cmp	r3, #1
    5fc0:	mov	r4, r0
    5fc2:	mov	r6, r1
    5fc4:	beq.n	5ffe <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    5fc6:	ldr	r3, [r4, #0]
    5fc8:	mov	r0, r4
    5fca:	ldr	r3, [r3, #20]
    5fcc:	blx	r3
    5fce:	cbnz	r0, 6024 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    5fd0:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    5fd2:	mov	r0, r5
    5fd4:	add.w	sp, sp, #512	; 0x200
    5fd8:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    5fda:	movs	r3, #1
    5fdc:	ldr	r0, [pc, #104]	; (6048 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    5fde:	bl	5464 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    5fe2:	cmp	r0, #0
    5fe4:	bne.n	5fb2 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5fe6:	ldr	r1, [pc, #100]	; (604c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    5fe8:	ldr	r3, [pc, #100]	; (6050 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5fea:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    5fec:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5fee:	movw	r2, #775	; 0x307
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    5ff2:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    5ff4:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    5ff6:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    5ff8:	add.w	sp, sp, #512	; 0x200
    5ffc:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    5ffe:	ldr	r3, [r0, #4]
    6000:	cmp	r1, r3
    6002:	bne.n	5fc6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    6004:	mov	r1, r5
    6006:	mov	r0, r4
    6008:	bl	5e48 <SdioCard::readData(unsigned char*)>
    600c:	mov	r5, r0
    600e:	cmp	r0, #0
    6010:	beq.n	5fd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    6012:	ldr	r3, [pc, #64]	; (6054 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    6014:	ldr	r3, [r3, #0]
    6016:	lsrs	r3, r3, #16
    6018:	lsls	r3, r3, #16
    601a:	cbz	r3, 6038 <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    601c:	ldr	r3, [r4, #4]
    601e:	adds	r3, #1
    6020:	str	r3, [r4, #4]
    6022:	b.n	5fd2 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    6024:	mov	r1, r6
    6026:	mov	r0, r4
    6028:	bl	5f14 <SdioCard::readStart(unsigned long)>
    602c:	cmp	r0, #0
    602e:	beq.n	5fd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    6030:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    6032:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    6034:	strb	r3, [r4, #9]
    6036:	b.n	6004 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    6038:	ldr	r3, [r4, #0]
    603a:	mov	r0, r4
    603c:	ldr	r3, [r3, #20]
    603e:	blx	r3
    6040:	cmp	r0, #0
    6042:	bne.n	601c <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    6044:	b.n	5fd0 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    6046:	nop
    6048:	.word	0x113a0011
    604c:	.word	0x1fff0974
    6050:	.word	0x1fff15f8
    6054:	.word	0x400b1004

00006058 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) { }

  bool MTPStorage_SD::readonly() { return false; }
    6058:	movs	r0, #0
    605a:	bx	lr

0000605c <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
    605c:	movs	r0, #1
    605e:	bx	lr

00006060 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume> {
    6060:	bx	lr
    6062:	nop

00006064 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

  // Call-back for file timestamps.  Only called for file create and sync().
  #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    6064:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6068:	mov	r7, r1
    606a:	mov	r6, r2
    606c:	mov	r8, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
    606e:	bl	8dcc <year()>
    6072:	mov	r4, r0
    6074:	bl	8dac <month()>
    6078:	mov	r5, r0
    607a:	bl	8d8c <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    607e:	subw	r3, r4, #1980	; 0x7bc
    6082:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    6084:	cmp	r3, #127	; 0x7f
    6086:	bhi.n	608e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    6088:	uxtb	r2, r5
    608a:	cmp	r2, #12
    608c:	bls.n	60e6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
    608e:	movs	r3, #0
    6090:	strh.w	r3, [r8]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
    6094:	bl	8d2c <hour()>
    6098:	mov	r4, r0
    609a:	bl	8d4c <minute()>
    609e:	mov	r5, r0
    60a0:	bl	8d6c <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    60a4:	uxtb	r3, r4
    60a6:	cmp	r3, #23
    60a8:	bhi.n	60b0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    60aa:	uxtb	r3, r5
    60ac:	cmp	r3, #59	; 0x3b
    60ae:	bls.n	60c8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
    60b0:	movs	r3, #0
    60b2:	strh	r3, [r7, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
    60b4:	bl	8d6c <second()>
    60b8:	tst.w	r0, #1
    60bc:	ite	ne
    60be:	movne	r3, #100	; 0x64
    60c0:	moveq	r3, #0
    60c2:	strb	r3, [r6, #0]
    60c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    60c8:	uxtb	r3, r0
    60ca:	cmp	r3, #59	; 0x3b
    60cc:	bhi.n	60b0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
    60ce:	lsls	r4, r4, #11
    60d0:	lsls	r3, r5, #5
    60d2:	and.w	r4, r4, #522240	; 0x7f800
    60d6:	and.w	r3, r3, #8160	; 0x1fe0
    60da:	orrs	r3, r4
    60dc:	ubfx	r0, r0, #1, #7
    60e0:	orrs	r3, r0
    60e2:	uxth	r3, r3
    60e4:	b.n	60b2 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
  #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
    60e6:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    60e8:	cmp	r0, #31
    60ea:	bhi.n	608e <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
    60ec:	lsls	r5, r5, #5
    60ee:	and.w	r5, r5, #8160	; 0x1fe0
    60f2:	orrs	r0, r5
    60f4:	orr.w	r3, r0, r3, lsl #9
    60f8:	uxth	r3, r3
    60fa:	b.n	6090 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000060fc <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
    60fc:	push	{r4, lr}
    60fe:	mov	r4, r0
    mtp_lock_storage(true);
    index_.close();
    6100:	adds	r0, #20
    6102:	bl	45b4 <FsBaseFile::close()>
    mtp_lock_storage(false);
    index_generated = false;
    6106:	movs	r3, #0
    6108:	strb.w	r3, [r4, #256]	; 0x100
    index_entries_ = 0;
    610c:	str.w	r3, [r4, #252]	; 0xfc
    6110:	pop	{r4, pc}
    6112:	nop

00006114 <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]>:
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    6114:	ldr	r3, [pc, #16]	; (6128 <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]+0x14>)
    6116:	ldr	r1, [r3, #0]
    6118:	cbz	r1, 6126 <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]+0x12>
    611a:	adds	r0, #20
    611c:	movw	r3, #16898	; 0x4202
    6120:	ldr	r2, [pc, #8]	; (612c <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]+0x18>)
    6122:	b.w	4658 <FsBaseFile::open(FsVolume*, char const*, int)>
    6126:	bx	lr
    6128:	.word	0x1fff15b0
    612c:	.word	0x0000fefc

00006130 <MTPStorage_SD::size()>:
void mtp_lock_storage(bool lock) { }

  bool MTPStorage_SD::readonly() { return false; }
  bool MTPStorage_SD::has_directories() { return true; }
  
  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
    6130:	ldr	r2, [pc, #64]	; (6174 <MTPStorage_SD::size()+0x44>)
    6132:	ldr.w	r3, [r2, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    6136:	cbz	r3, 614c <MTPStorage_SD::size()+0x1c>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    6138:	ldr	r2, [r3, #28]
    613a:	ldrb	r3, [r3, #4]
    613c:	subs	r2, #1
    613e:	umull	r2, r3, r3, r2
    6142:	lsls	r1, r3, #9
    6144:	orr.w	r1, r1, r2, lsr #23
    6148:	lsls	r0, r2, #9
    614a:	bx	lr
    614c:	ldr.w	r2, [r2, #1148]	; 0x47c
    6150:	cbz	r2, 616c <MTPStorage_SD::size()+0x3c>
    6152:	ldr.w	r3, [r2, #1064]	; 0x428
    6156:	ldrb.w	r1, [r2, #1085]	; 0x43d
    615a:	movs	r2, #1
    615c:	lsls	r2, r1
    615e:	lsls	r0, r3, #9
    6160:	umull	r0, r1, r2, r0
    6164:	lsrs	r3, r3, #23
    6166:	mla	r1, r2, r3, r1
    616a:	bx	lr
    616c:	movs	r0, #0
    616e:	movs	r1, #0
    6170:	bx	lr
    6172:	nop
    6174:	.word	0x1fff15fc

00006178 <MTPStorage_SD::free()>:
  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }
    6178:	push	{r4, lr}
    617a:	ldr	r4, [pc, #84]	; (61d0 <MTPStorage_SD::free()+0x58>)
    617c:	ldr.w	r0, [r4, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    6180:	cbz	r0, 6198 <MTPStorage_SD::free()+0x20>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    6182:	bl	37b8 <FatPartition::freeClusterCount()>
    6186:	ldr.w	r3, [r4, #1144]	; 0x478
    618a:	ldr	r2, [pc, #68]	; (61d0 <MTPStorage_SD::free()+0x58>)
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    618c:	cbz	r3, 61ac <MTPStorage_SD::free()+0x34>
    618e:	ldrb	r2, [r3, #4]
    6190:	lsls	r2, r2, #9
    6192:	umull	r0, r1, r2, r0
    6196:	pop	{r4, pc}
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    6198:	ldr.w	r0, [r4, #1148]	; 0x47c
    619c:	cbz	r0, 61c8 <MTPStorage_SD::free()+0x50>
    619e:	bl	170c <ExFatPartition::freeClusterCount()>
    61a2:	ldr.w	r3, [r4, #1144]	; 0x478
    61a6:	ldr	r2, [pc, #40]	; (61d0 <MTPStorage_SD::free()+0x58>)
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    61a8:	cmp	r3, #0
    61aa:	bne.n	618e <MTPStorage_SD::free()+0x16>
    61ac:	ldr.w	r3, [r2, #1148]	; 0x47c
    61b0:	lsrs	r4, r0, #23
    61b2:	lsls	r0, r0, #9
    61b4:	cbz	r3, 61c8 <MTPStorage_SD::free()+0x50>
    61b6:	ldrb.w	r2, [r3, #1085]	; 0x43d
    61ba:	movs	r3, #1
    61bc:	lsls	r3, r2
    61be:	umull	r0, r1, r3, r0
    61c2:	mla	r1, r3, r4, r1
    61c6:	pop	{r4, pc}
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    61c8:	movs	r0, #0
    61ca:	movs	r1, #0
    61cc:	pop	{r4, pc}
    61ce:	nop
    61d0:	.word	0x1fff15fc

000061d4 <MTPStorage_SD::write(char const*, unsigned long)>:
    }
    return ret;
  }

  void MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    61d4:	ldr.w	r3, [r0, #156]	; 0x9c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    61d8:	cbz	r3, 61e0 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    61da:	mov	r0, r3
    61dc:	b.w	3214 <FatFile::write(void const*, unsigned int)>
    61e0:	ldr.w	r0, [r0, #160]	; 0xa0
    61e4:	cbz	r0, 61ea <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    61e6:	b.w	2160 <ExFatFile::write(void const*, unsigned int)>
    61ea:	bx	lr

000061ec <MTPStorage_SD::ResetIndex()>:
  
  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }


  void MTPStorage_SD::ResetIndex() {
    61ec:	push	{r4, r5, r6, r7, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    61ee:	ldr	r3, [r0, #76]	; 0x4c
    61f0:	sub	sp, #84	; 0x54
    61f2:	cmp	r3, #0
    61f4:	beq.n	62a0 <MTPStorage_SD::ResetIndex()+0xb4>
    if(!index_) return;
    
    mtp_lock_storage(true);
    if(index_.isOpen()) index_.close();
    61f6:	add.w	r7, r0, #20
    61fa:	mov	r4, r0
    61fc:	mov	r0, r7
    61fe:	bl	45b4 <FsBaseFile::close()>
    6202:	ldr	r3, [pc, #164]	; (62a8 <MTPStorage_SD::ResetIndex()+0xbc>)
    6204:	ldr.w	r5, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    6208:	cbz	r5, 6274 <MTPStorage_SD::ResetIndex()+0x88>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    620a:	mov	r1, r5
    620c:	mov	r0, sp
    620e:	movs	r5, #0
    6210:	movs	r3, #1
    6212:	ldr	r2, [pc, #152]	; (62ac <MTPStorage_SD::ResetIndex()+0xc0>)
    6214:	strb.w	r5, [sp]
    6218:	mov	r6, sp
    621a:	strb.w	r5, [sp, #1]
    621e:	strb.w	r5, [sp, #2]
    6222:	bl	27d4 <FatFile::open(FatVolume*, char const*, int)>
    6226:	cbz	r0, 622e <MTPStorage_SD::ResetIndex()+0x42>
    6228:	mov	r0, sp
    622a:	bl	3df8 <FatFile::remove()>
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    622e:	mov	r0, r6
    6230:	movw	r3, #16898	; 0x4202
    6234:	ldr	r2, [pc, #116]	; (62ac <MTPStorage_SD::ResetIndex()+0xc0>)
    6236:	ldr	r1, [pc, #112]	; (62a8 <MTPStorage_SD::ResetIndex()+0xbc>)
    6238:	bl	47fc <FsVolume::open(char const*, int)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    623c:	ldr	r2, [sp, #8]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    623e:	ldrb.w	r1, [sp, #4]
    6242:	ldrb.w	r3, [sp, #12]
    6246:	str	r2, [r4, #12]
    6248:	strb	r1, [r4, #8]
    624a:	strb	r3, [r4, #16]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    624c:	add	r1, sp, #16
    624e:	mov	r0, r7
    6250:	bl	45dc <FsBaseFile::operator=(FsBaseFile const&)>
    6254:	ldr	r3, [pc, #88]	; (62b0 <MTPStorage_SD::ResetIndex()+0xc4>)
    6256:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    6258:	add	r0, sp, #16
    625a:	bl	45b4 <FsBaseFile::close()>
    mtp_lock_storage(false);

    all_scanned_ = false;
    625e:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
    6260:	mvn.w	r2, #1
    if(index_.isOpen()) index_.close();
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
    6264:	strb.w	r3, [r4, #257]	; 0x101
    index_generated=false;
    6268:	strb.w	r3, [r4, #256]	; 0x100
    open_file_ = 0xFFFFFFFEUL;
    626c:	str.w	r2, [r4, #248]	; 0xf8
  }
    6270:	add	sp, #84	; 0x54
    6272:	pop	{r4, r5, r6, r7, pc}
    6274:	ldr.w	r1, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6278:	mov	r6, sp
    627a:	cmp	r1, #0
    627c:	beq.n	622e <MTPStorage_SD::ResetIndex()+0x42>
    627e:	mov	r0, sp
    6280:	movs	r3, #1
    6282:	ldr	r2, [pc, #40]	; (62ac <MTPStorage_SD::ResetIndex()+0xc0>)
    6284:	strb.w	r5, [sp, #49]	; 0x31
    6288:	strb.w	r5, [sp, #50]	; 0x32
    628c:	strb.w	r5, [sp, #51]	; 0x33
    6290:	bl	1170 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6294:	cmp	r0, #0
    6296:	beq.n	622e <MTPStorage_SD::ResetIndex()+0x42>
    6298:	mov	r0, sp
    629a:	bl	1954 <ExFatFile::remove()>
    629e:	b.n	622e <MTPStorage_SD::ResetIndex()+0x42>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    62a0:	ldr	r3, [r0, #80]	; 0x50
    62a2:	cmp	r3, #0
    62a4:	bne.n	61f6 <MTPStorage_SD::ResetIndex()+0xa>
    62a6:	b.n	6270 <MTPStorage_SD::ResetIndex()+0x84>
    62a8:	.word	0x1fff15fc
    62ac:	.word	0x0000fefc
    62b0:	.word	0x0000fccc

000062b4 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    62b4:	push	{r3, r4, r5, lr}
    62b6:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    62b8:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    62ba:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    62bc:	bl	c900 <strlen>
    62c0:	ldr	r3, [r4, #0]
    62c2:	mov	r2, r0
    62c4:	mov	r1, r5
    62c6:	ldr	r3, [r3, #4]
    62c8:	mov	r0, r4
    62ca:	blx	r3
    62cc:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    62ce:	mov	r0, r4
    62d0:	bl	a624 <Print::println()>
    62d4:	add	r0, r5
    62d6:	pop	{r3, r4, r5, pc}

000062d8 <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes)

// These should probably be weak.
void mtp_yield() {}
    62d8:	bx	lr
    62da:	nop

000062dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    index_.open((char*)"mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    62dc:	ldr	r3, [r0, #76]	; 0x4c
    62de:	push	{r4, r5, r6, lr}
    62e0:	mov	r5, r0
    62e2:	mov	r4, r1
    62e4:	mov	r6, r2
    62e6:	cbz	r3, 6314 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x38>
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    62e8:	add.w	r4, r1, r1, lsl #2
    62ec:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    62ee:	mov	r0, r3
    62f0:	bl	2a40 <FatFile::seekSet(unsigned long)>
    62f4:	ldr	r0, [r5, #76]	; 0x4c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    62f6:	cbz	r0, 6304 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x28>
    62f8:	mov	r1, r6
    62fa:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    62fc:	ldmia.w	sp!, {r4, r5, r6, lr}
    6300:	b.w	3214 <FatFile::write(void const*, unsigned int)>
    6304:	ldr	r0, [r5, #80]	; 0x50
    6306:	cbz	r0, 6342 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x66>
    6308:	mov	r1, r6
    630a:	movs	r2, #80	; 0x50
    630c:	ldmia.w	sp!, {r4, r5, r6, lr}
    6310:	b.w	2160 <ExFatFile::write(void const*, unsigned int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6314:	ldr	r3, [r0, #80]	; 0x50
    6316:	cbz	r3, 6328 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x4c>

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    6318:	add.w	r4, r1, r1, lsl #2
    631c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    631e:	mov	r0, r3
    6320:	movs	r3, #0
    6322:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    6326:	b.n	62f4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x18>
    6328:	bl	6114 <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]>
    632c:	add.w	r4, r4, r4, lsl #2
    6330:	ldr	r3, [r5, #76]	; 0x4c
    6332:	lsls	r2, r4, #4
    6334:	mov	r1, r2
    6336:	cmp	r3, #0
    6338:	bne.n	62ee <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x12>
    633a:	ldr	r3, [r5, #80]	; 0x50
    633c:	cmp	r3, #0
    633e:	bne.n	631e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x42>
    6340:	pop	{r4, r5, r6, pc}
    6342:	pop	{r4, r5, r6, pc}

00006344 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    6344:	push	{r4, r5, r6, lr}
    6346:	ldr	r2, [pc, #136]	; (63d0 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x8c>)
    6348:	ldr.w	r5, [r2, #1144]	; 0x478
  {
    if (index_generated) return;
    index_generated = true;
    634c:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    634e:	sub	sp, #80	; 0x50
    6350:	mov	r4, r0
  {
    if (index_generated) return;
    index_generated = true;
    6352:	strb.w	r3, [r0, #256]	; 0x100
    6356:	cbz	r5, 63a6 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x62>
    6358:	mov	r1, r5
    635a:	mov	r0, sp
    635c:	movs	r5, #0
    635e:	ldr	r2, [pc, #116]	; (63d4 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x90>)
    6360:	strb.w	r5, [sp]
    6364:	mov	r6, sp
    6366:	strb.w	r5, [sp, #1]
    636a:	strb.w	r5, [sp, #2]
    636e:	bl	27d4 <FatFile::open(FatVolume*, char const*, int)>
    6372:	cbnz	r0, 639e <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x5a>
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    6374:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    6376:	movs	r5, #1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    6378:	str.w	r5, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    637c:	mov	r0, r4
    637e:	mov	r2, r6
    6380:	mov	r1, r3
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    6382:	movs	r4, #47	; 0x2f
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    6384:	str	r3, [sp, #0]
    r.sibling = 0;
    6386:	str	r3, [sp, #8]
    r.child = 0;
    6388:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    638a:	strb.w	r3, [sp, #13]

    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    638e:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    6392:	strh.w	r4, [sp, #14]
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    6396:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    639a:	add	sp, #80	; 0x50
    639c:	pop	{r4, r5, r6, pc}
    639e:	mov	r0, sp
    63a0:	bl	3df8 <FatFile::remove()>
    63a4:	b.n	6374 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x30>
    63a6:	ldr.w	r1, [r2, #1148]	; 0x47c
    63aa:	mov	r6, sp
    63ac:	cmp	r1, #0
    63ae:	beq.n	6374 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x30>
    63b0:	mov	r0, sp
    63b2:	ldr	r2, [pc, #32]	; (63d4 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x90>)
    63b4:	strb.w	r5, [sp, #49]	; 0x31
    63b8:	strb.w	r5, [sp, #50]	; 0x32
    63bc:	strb.w	r5, [sp, #51]	; 0x33
    63c0:	bl	1170 <ExFatFile::open(ExFatVolume*, char const*, int)>
    63c4:	cmp	r0, #0
    63c6:	beq.n	6374 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x30>
    63c8:	mov	r0, sp
    63ca:	bl	1954 <ExFatFile::remove()>
    63ce:	b.n	6374 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]+0x30>
    63d0:	.word	0x1fff15fc
    63d4:	.word	0x0000fefc

000063d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    63d8:	ldr.w	r3, [r1, #252]	; 0xfc
    63dc:	cmp	r3, r2
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    63de:	push	{r4, r5, r6, lr}
    63e0:	mov	r6, r0
    Record ret;
    if (i > index_entries_) 
    63e2:	bcc.n	6418 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    63e4:	ldr	r0, [r1, #76]	; 0x4c
    63e6:	mov	r5, r1
    63e8:	mov	r4, r2
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    63ea:	cbz	r0, 6424 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x4c>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    63ec:	add.w	r4, r2, r2, lsl #2
    63f0:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    63f2:	bl	2a40 <FatFile::seekSet(unsigned long)>
    63f6:	ldr	r0, [r5, #76]	; 0x4c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    63f8:	cbz	r0, 6406 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    63fa:	movs	r2, #80	; 0x50
    63fc:	mov	r1, r6
    63fe:	bl	27e4 <FatFile::read(void*, unsigned int)>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    6402:	mov	r0, r6
    6404:	pop	{r4, r5, r6, pc}
    6406:	ldr	r0, [r5, #80]	; 0x50
    6408:	cmp	r0, #0
    640a:	beq.n	6402 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    640c:	movs	r2, #80	; 0x50
    640e:	mov	r1, r6
    6410:	bl	8f8 <ExFatFile::read(void*, unsigned int)>
    6414:	mov	r0, r6
    6416:	pop	{r4, r5, r6, pc}
  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    6418:	movs	r2, #80	; 0x50
    641a:	movs	r1, #0
    641c:	bl	c34c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    6420:	mov	r0, r6
    6422:	pop	{r4, r5, r6, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6424:	ldr	r0, [r1, #80]	; 0x50
    6426:	cbz	r0, 6436 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x5e>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    6428:	add.w	r4, r2, r2, lsl #2
    642c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    642e:	movs	r3, #0
    6430:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    6434:	b.n	63f6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
    6436:	mov	r0, r1
    6438:	bl	6114 <MTPStorage_SD::OpenIndex() [clone .part.40] [clone .constprop.60]>
    643c:	add.w	r4, r4, r4, lsl #2
    6440:	ldr	r0, [r5, #76]	; 0x4c
    6442:	lsls	r2, r4, #4
    6444:	mov	r1, r2
    6446:	cmp	r0, #0
    6448:	bne.n	63f2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    644a:	ldr	r0, [r5, #80]	; 0x50
    644c:	cmp	r0, #0
    644e:	bne.n	642e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x56>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    6450:	mov	r0, r6
    6452:	pop	{r4, r5, r6, pc}

00006454 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    6454:	push	{r4, r5, lr}
    while (true) {
      if (next_ == 0) return 0;
    6456:	ldr.w	r5, [r0, #260]	; 0x104
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    645a:	sub	sp, #84	; 0x54
    645c:	mov	r4, r0
    while (true) {
      if (next_ == 0) return 0;
    645e:	cbnz	r5, 6474 <MTPStorage_SD::GetNextObjectHandle()+0x20>
    6460:	b.n	64aa <MTPStorage_SD::GetNextObjectHandle()+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    6462:	ldr	r3, [sp, #8]
    6464:	str.w	r3, [r4, #260]	; 0x104
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    6468:	ldrb.w	r3, [sp, #14]
    646c:	cbnz	r3, 64a4 <MTPStorage_SD::GetNextObjectHandle()+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    646e:	ldr.w	r5, [r4, #260]	; 0x104
    6472:	cbz	r5, 64aa <MTPStorage_SD::GetNextObjectHandle()+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    6474:	mov	r2, r5
    6476:	mov	r1, r4
    6478:	mov	r0, sp
    647a:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    647e:	ldrb.w	r2, [r4, #264]	; 0x108
    6482:	cmp	r2, #0
    6484:	bne.n	6462 <MTPStorage_SD::GetNextObjectHandle()+0xe>
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    6486:	ldr.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    648a:	ldr.w	r1, [r4, #252]	; 0xfc
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    648e:	adds	r3, #1
    6490:	str.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    6494:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    6496:	ldrb.w	r3, [sp, #14]
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
    649a:	it	cs
    649c:	strcs.w	r2, [r4, #260]	; 0x104
      }
      if (r.name[0]) return ret;
    64a0:	cmp	r3, #0
    64a2:	beq.n	646e <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    }
  }
    64a4:	mov	r0, r5
    64a6:	add	sp, #84	; 0x54
    64a8:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    64aa:	movs	r5, #0
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    64ac:	mov	r0, r5
    64ae:	add	sp, #84	; 0x54
    64b0:	pop	{r4, r5, pc}
    64b2:	nop

000064b4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    64b4:	push	{r4, r5, r6, lr}
    64b6:	sub	sp, #80	; 0x50
    64b8:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    64ba:	mov	r2, r1
    64bc:	mov	r1, r0
    64be:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    64c0:	mov	r4, r3
    64c2:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    64c4:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    64c8:	mov	r0, r6
    64ca:	add.w	r1, sp, #14
    64ce:	bl	c834 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    64d2:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    64d6:	ldr	r2, [sp, #0]
    64d8:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    64da:	cbnz	r3, 64e4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    64dc:	ldr	r3, [sp, #4]
    64de:	str	r3, [r4, #0]
  }
    64e0:	add	sp, #80	; 0x50
    64e2:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    64e4:	mov.w	r3, #4294967295
    64e8:	str	r3, [r4, #0]
  }
    64ea:	add	sp, #80	; 0x50
    64ec:	pop	{r4, r5, r6, pc}
    64ee:	nop

000064f0 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    64f0:	push	{lr}
    64f2:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    64f4:	mov	r2, r1
    64f6:	mov	r1, r0
    64f8:	mov	r0, sp
    64fa:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    64fe:	ldr	r0, [sp, #4]
    6500:	add	sp, #84	; 0x54
    6502:	ldr.w	pc, [sp], #4
    6506:	nop

00006508 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    6508:	push	{r4, r5, lr}
    650a:	ldr.w	r3, [r0, #156]	; 0x9c
    650e:	sub	sp, #84	; 0x54
    6510:	mov	r4, r0
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    6512:	cbz	r3, 6544 <MTPStorage_SD::close()+0x3c>
    6514:	ldr	r5, [r3, #28]
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    6516:	add.w	r0, r4, #100	; 0x64
    651a:	bl	45b4 <FsBaseFile::close()>
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    651e:	mov	r0, sp
    6520:	ldr.w	r2, [r4, #248]	; 0xf8
    6524:	mov	r1, r4
    6526:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    652a:	mov	r2, sp
    652c:	ldr.w	r1, [r4, #248]	; 0xf8
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    6530:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    6532:	mov	r0, r4
    6534:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    6538:	mvn.w	r3, #1
    653c:	str.w	r3, [r4, #248]	; 0xf8
  }
    6540:	add	sp, #84	; 0x54
    6542:	pop	{r4, r5, pc}
    6544:	ldr.w	r5, [r0, #160]	; 0xa0
    6548:	cmp	r5, #0
    654a:	beq.n	6516 <MTPStorage_SD::close()+0xe>
    654c:	ldr	r5, [r5, #16]
    654e:	b.n	6516 <MTPStorage_SD::close()+0xe>

00006550 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    6550:	cbz	r1, 65a0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    6552:	push	{r4, r5, r6, lr}
    6554:	sub	sp, #80	; 0x50
    6556:	mov	r5, r2
    6558:	mov	r4, r0
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    655a:	mov	r2, r1
    655c:	mov	r6, r3
    655e:	mov	r1, r0
    6560:	mov	r0, sp
    6562:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    6566:	mov	r3, r6
    6568:	mov	r0, r4
    656a:	mov	r2, r5
    656c:	ldr	r1, [sp, #0]
    656e:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    6572:	mov	r0, r5
    6574:	bl	c900 <strlen>
    6578:	adds	r3, r5, r0
    657a:	mov	r4, r0
    657c:	ldrb.w	r3, [r3, #-1]
    6580:	cmp	r3, #47	; 0x2f
    6582:	beq.n	658c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    6584:	ldr	r3, [pc, #48]	; (65b8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    6586:	ldrh	r3, [r3, #0]
    6588:	strh	r3, [r5, r0]
    658a:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    658c:	add.w	r0, sp, #14
    6590:	bl	c900 <strlen>
    6594:	add	r0, r4
    6596:	adds	r0, #1
    6598:	cmp	r0, r6
    659a:	bcc.n	65a8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    659c:	add	sp, #80	; 0x50
    659e:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    65a0:	ldr	r3, [pc, #20]	; (65b8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    65a2:	ldrh	r3, [r3, #0]
    65a4:	strh	r3, [r2, #0]
    65a6:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    65a8:	add.w	r1, sp, #14
    65ac:	mov	r0, r5
    65ae:	bl	c7f4 <strcat>
    }
  }
    65b2:	add	sp, #80	; 0x50
    65b4:	pop	{r4, r5, r6, pc}
    65b6:	nop
    65b8:	.word	0x0000ff0c

000065bc <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    65bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65c0:	adds	r2, r1, #1
    65c2:	sub	sp, #496	; 0x1f0
    65c4:	mov	r6, r1
    65c6:	mov	r4, r0
    65c8:	ite	ne
    65ca:	movne	r5, r1
    65cc:	moveq	r5, #0
    65ce:	b.n	65e0 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    65d0:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    65d2:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    65d4:	cbz	r3, 6600 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    65d6:	ldr	r3, [r4, #0]
    65d8:	ldr	r3, [r3, #48]	; 0x30
    65da:	blx	r3
    65dc:	cmp	r0, #0
    65de:	beq.n	66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    65e0:	mov	r2, r5
    65e2:	mov	r1, r4
    65e4:	mov	r0, sp
    65e6:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    65ea:	movs	r2, #80	; 0x50
    65ec:	mov	r1, sp
    65ee:	add.w	r0, sp, r2
    65f2:	bl	8df4 <memcpy>
      if (!r.isdir) break;
    65f6:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    65fa:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    65fc:	cmp	r3, #0
    65fe:	bne.n	65d0 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    6600:	adds	r3, r6, #1
    6602:	beq.n	66c6 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    6604:	mov.w	r3, #256	; 0x100
    6608:	add	r2, sp, #240	; 0xf0
    660a:	mov	r1, r6
    660c:	mov	r0, r4
    660e:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    6612:	ldrb.w	r7, [sp, #92]	; 0x5c
    6616:	ldr	r3, [pc, #296]	; (6740 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    6618:	cmp	r7, #0
    661a:	beq.n	66ce <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    661c:	ldr.w	r7, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    6620:	cbz	r7, 668e <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    6622:	add	r5, sp, #160	; 0xa0
    6624:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6628:	add	r2, sp, #240	; 0xf0
    662a:	mov	r1, r7
    662c:	mov	r0, r5
    662e:	mov	r3, lr
    6630:	strb.w	lr, [r5]
    6634:	strb.w	lr, [r5, #1]
    6638:	strb.w	lr, [r5, #2]
    663c:	bl	27d4 <FatFile::open(FatVolume*, char const*, int)>
    6640:	cbz	r0, 66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    6642:	mov	r0, r5
    6644:	bl	2afc <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    6648:	cbz	r0, 66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    664a:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    664e:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    6650:	add	r2, sp, #80	; 0x50
    6652:	mov	r1, r6
    6654:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    6656:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    665a:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    665e:	mov	r2, r8
    6660:	mov	r1, r4
    6662:	mov	r0, r5
    6664:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    6668:	ldr	r7, [r5, #4]
    666a:	cmp	r6, r7
    666c:	beq.n	66b8 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    666e:	cbz	r7, 66c6 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    6670:	mov	r2, r7
    6672:	mov	r1, r4
    6674:	mov	r0, sp
    6676:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    667a:	movs	r2, #80	; 0x50
    667c:	mov	r1, sp
    667e:	mov	r0, r5
    6680:	bl	8df4 <memcpy>
        if (tmp.sibling == object) 
    6684:	ldr	r3, [r5, #8]
    6686:	cmp	r6, r3
    6688:	beq.n	6724 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    668a:	mov	r7, r3
    668c:	b.n	666e <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    668e:	ldr.w	r1, [r3, #1148]	; 0x47c
    6692:	cbz	r1, 66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    6694:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6696:	add	r2, sp, #240	; 0xf0
    6698:	mov	r3, r7
    669a:	mov	r0, r5
    669c:	strb.w	r7, [r5, #49]	; 0x31
    66a0:	strb.w	r7, [r5, #50]	; 0x32
    66a4:	strb.w	r7, [r5, #51]	; 0x33
    66a8:	bl	1170 <ExFatFile::open(ExFatVolume*, char const*, int)>
    66ac:	cmp	r0, #0
    66ae:	bne.n	6736 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    66b0:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    66b2:	add	sp, #496	; 0x1f0
    66b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    66b8:	ldr	r3, [sp, #88]	; 0x58
    66ba:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    66bc:	mov	r2, r5
    66be:	mov	r1, r8
    66c0:	mov	r0, r4
    66c2:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    66c6:	movs	r0, #1
  }
    66c8:	add	sp, #496	; 0x1f0
    66ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66ce:	ldr.w	lr, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    66d2:	cmp.w	lr, #0
    66d6:	beq.n	66f8 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    66d8:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    66da:	add	r2, sp, #240	; 0xf0
    66dc:	mov	r1, lr
    66de:	mov	r0, r5
    66e0:	movs	r3, #1
    66e2:	strb	r7, [r5, #0]
    66e4:	strb	r7, [r5, #1]
    66e6:	strb	r7, [r5, #2]
    66e8:	bl	27d4 <FatFile::open(FatVolume*, char const*, int)>
    66ec:	cmp	r0, #0
    66ee:	beq.n	66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    66f0:	mov	r0, r5
    66f2:	bl	3df8 <FatFile::remove()>
    66f6:	b.n	6648 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    66f8:	ldr.w	r1, [r3, #1148]	; 0x47c
    66fc:	cmp	r1, #0
    66fe:	beq.n	66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    6700:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6702:	add	r2, sp, #240	; 0xf0
    6704:	mov	r0, r5
    6706:	movs	r3, #1
    6708:	strb.w	lr, [r5, #49]	; 0x31
    670c:	strb.w	lr, [r5, #50]	; 0x32
    6710:	strb.w	lr, [r5, #51]	; 0x33
    6714:	bl	1170 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6718:	cmp	r0, #0
    671a:	beq.n	66b0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    671c:	mov	r0, r5
    671e:	bl	1954 <ExFatFile::remove()>
    6722:	b.n	6648 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    6724:	ldr	r3, [sp, #88]	; 0x58
    6726:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    6728:	mov	r0, r4
    672a:	mov	r2, r5
    672c:	mov	r1, r7
    672e:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    6732:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    6734:	b.n	66b2 <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6736:	mov	r0, r5
    6738:	bl	1a7c <ExFatFile::rmdir()>
    673c:	b.n	6648 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    673e:	nop
    6740:	.word	0x1fff15fc

00006744 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    6744:	push	{r4, r5, r6, lr}
    6746:	sub.w	sp, sp, #648	; 0x288
    674a:	mov	r4, r0
    674c:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    674e:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    6752:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    6754:	add	r2, sp, #136	; 0x88
    6756:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    675a:	mov	r2, r5
    675c:	mov	r1, r4
    675e:	add	r0, sp, #56	; 0x38
    6760:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    6764:	mov	r1, r6
    6766:	add.w	r0, sp, #70	; 0x46
    676a:	bl	c834 <strcpy>
    WriteIndexRecord(handle, p1);
    676e:	mov	r0, r4
    6770:	add	r2, sp, #56	; 0x38
    6772:	mov	r1, r5
    6774:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    6778:	mov	r0, r4
    677a:	mov.w	r3, #256	; 0x100
    677e:	mov	r1, r5
    6780:	add	r2, sp, #392	; 0x188
    6782:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    6786:	ldr	r3, [pc, #116]	; (67fc <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    6788:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    678c:	cbz	r4, 67c4 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    678e:	movs	r5, #0
    return open(path.c_str(), oflag );
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    6790:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6794:	add	r2, sp, #136	; 0x88
    6796:	mov	r1, r4
    6798:	mov	r0, sp
    679a:	mov	r3, r5
    679c:	strb.w	r5, [sp]
    67a0:	strb.w	r5, [sp, #1]
    67a4:	strb.w	r5, [sp, #2]
    67a8:	bl	26d0 <FatFile::open(FatFile*, char const*, int)>
    67ac:	cbnz	r0, 67b4 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd.rename(oldName,newName);
  }
    67ae:	add.w	sp, sp, #648	; 0x288
    67b2:	pop	{r4, r5, r6, pc}
    67b4:	add	r2, sp, #392	; 0x188
    67b6:	mov	r1, r4
    67b8:	mov	r0, sp
    67ba:	bl	2fd0 <FatFile::rename(FatFile*, char const*)>
    67be:	add.w	sp, sp, #648	; 0x288
    67c2:	pop	{r4, r5, r6, pc}
    67c4:	ldr.w	r1, [r3, #1148]	; 0x47c
    67c8:	cmp	r1, #0
    67ca:	beq.n	67ae <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    67cc:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    67d0:	add	r2, sp, #136	; 0x88
    67d2:	mov	r1, r5
    67d4:	mov	r3, r4
    67d6:	mov	r0, sp
    67d8:	strb.w	r4, [sp, #49]	; 0x31
    67dc:	strb.w	r4, [sp, #50]	; 0x32
    67e0:	strb.w	r4, [sp, #51]	; 0x33
    67e4:	bl	1058 <ExFatFile::open(ExFatFile*, char const*, int)>
    67e8:	cmp	r0, #0
    67ea:	beq.n	67ae <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    67ec:	add	r2, sp, #392	; 0x188
    67ee:	mov	r1, r5
    67f0:	mov	r0, sp
    67f2:	bl	1f68 <ExFatFile::rename(ExFatFile*, char const*)>
    67f6:	add.w	sp, sp, #648	; 0x288
    67fa:	pop	{r4, r5, r6, pc}
    67fc:	.word	0x1fff15fc

00006800 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    6800:	push	{r4, r5, r6, lr}
    6802:	sub.w	sp, sp, #728	; 0x2d8
    6806:	mov	r4, r2
    6808:	mov	r5, r0
    680a:	mov	r6, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    680c:	mov.w	r3, #256	; 0x100
    6810:	add	r2, sp, #216	; 0xd8
    6812:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    6816:	mov	r2, r6
    6818:	mov	r1, r5
    681a:	add	r0, sp, #56	; 0x38
    681c:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    6820:	adds	r3, r4, #1
    6822:	it	eq
    6824:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    6826:	mov	r2, r4
    6828:	mov	r1, r5
    682a:	add	r0, sp, #136	; 0x88
    682c:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    6830:	ldr	r3, [sp, #140]	; 0x8c
    6832:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    6834:	add	r2, sp, #56	; 0x38
    6836:	mov	r1, r6
    6838:	mov	r0, r5

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    p1.parent = newParent;
    683a:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    683c:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    683e:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    6842:	mov	r1, r4
    6844:	add	r2, sp, #136	; 0x88
    6846:	mov	r0, r5
    6848:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    684c:	mov.w	r3, #256	; 0x100
    6850:	mov	r1, r6
    6852:	mov	r0, r5
    6854:	add	r2, sp, #472	; 0x1d8
    6856:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    685a:	ldr	r3, [pc, #116]	; (68d0 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    685c:	ldr.w	r4, [r3, #1144]	; 0x478
    6860:	cbz	r4, 6898 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    6862:	movs	r5, #0
    return open(path.c_str(), oflag );
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    6864:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6868:	add	r2, sp, #216	; 0xd8
    686a:	mov	r1, r4
    686c:	mov	r0, sp
    686e:	mov	r3, r5
    6870:	strb.w	r5, [sp]
    6874:	strb.w	r5, [sp, #1]
    6878:	strb.w	r5, [sp, #2]
    687c:	bl	26d0 <FatFile::open(FatFile*, char const*, int)>
    6880:	cbnz	r0, 6888 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd.rename(oldName,newName);
  }
    6882:	add.w	sp, sp, #728	; 0x2d8
    6886:	pop	{r4, r5, r6, pc}
    6888:	add	r2, sp, #472	; 0x1d8
    688a:	mov	r1, r4
    688c:	mov	r0, sp
    688e:	bl	2fd0 <FatFile::rename(FatFile*, char const*)>
    6892:	add.w	sp, sp, #728	; 0x2d8
    6896:	pop	{r4, r5, r6, pc}
    6898:	ldr.w	r1, [r3, #1148]	; 0x47c
    689c:	cmp	r1, #0
    689e:	beq.n	6882 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    68a0:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    68a4:	add	r2, sp, #216	; 0xd8
    68a6:	mov	r1, r5
    68a8:	mov	r3, r4
    68aa:	mov	r0, sp
    68ac:	strb.w	r4, [sp, #49]	; 0x31
    68b0:	strb.w	r4, [sp, #50]	; 0x32
    68b4:	strb.w	r4, [sp, #51]	; 0x33
    68b8:	bl	1058 <ExFatFile::open(ExFatFile*, char const*, int)>
    68bc:	cmp	r0, #0
    68be:	beq.n	6882 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    68c0:	add	r2, sp, #472	; 0x1d8
    68c2:	mov	r1, r5
    68c4:	mov	r0, sp
    68c6:	bl	1f68 <ExFatFile::rename(ExFatFile*, char const*)>
    68ca:	add.w	sp, sp, #728	; 0x2d8
    68ce:	pop	{r4, r5, r6, pc}
    68d0:	.word	0x1fff15fc

000068d4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    68d4:	push	{r4, r5, r6, r7, lr}
    if (open_file_ == i && mode_ == mode) return;
    68d6:	ldr.w	r3, [r0, #248]	; 0xf8
    68da:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    68dc:	sub	sp, #260	; 0x104
    if (open_file_ == i && mode_ == mode) return;
    68de:	beq.n	691c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x48>
    68e0:	mov	r4, r0
    char filename[256];
    ConstructFilename(i, filename, 256);
    68e2:	mov.w	r3, #256	; 0x100
    68e6:	mov	r6, r2
    68e8:	mov	r2, sp
    68ea:	mov	r5, r1
    68ec:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    68f0:	ldr.w	r3, [r4, #156]	; 0x9c
    mtp_lock_storage(true);
    if(file_) file_.close();
    68f4:	add.w	r7, r4, #100	; 0x64
    68f8:	cbz	r3, 6926 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x52>
    68fa:	mov	r0, r7
    68fc:	bl	45b4 <FsBaseFile::close()>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    6900:	ldr	r3, [pc, #44]	; (6930 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x5c>)
    6902:	ldr	r1, [r3, #0]
    6904:	cbz	r1, 6910 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    6906:	mov	r2, sp
    6908:	mov	r0, r7
    690a:	mov	r3, r6
    690c:	bl	4658 <FsBaseFile::open(FsVolume*, char const*, int)>
    file_.open(filename,mode);
    open_file_ = i;
    6910:	str.w	r5, [r4, #248]	; 0xf8
    mode_ = mode;
    6914:	str.w	r6, [r4, #244]	; 0xf4
    mtp_lock_storage(false);
  }
    6918:	add	sp, #260	; 0x104
    691a:	pop	{r4, r5, r6, r7, pc}
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    691c:	ldr.w	r3, [r0, #244]	; 0xf4
    6920:	cmp	r3, r2
    6922:	bne.n	68e0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    6924:	b.n	6918 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6926:	ldr.w	r3, [r4, #160]	; 0xa0
    692a:	cmp	r3, #0
    692c:	bne.n	68fa <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x26>
    692e:	b.n	6900 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c>
    6930:	.word	0x1fff15b0

00006934 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    6934:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    6938:	cmp.w	r1, #4294967295
    693c:	ite	ne
    693e:	movne	r6, r1
    6940:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    6942:	sub	sp, #476	; 0x1dc
    6944:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    6946:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    6948:	mov	r4, r0
    694a:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    694c:	add	r0, sp, #56	; 0x38
    694e:	mov	r2, r6
    6950:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    6954:	mov	r0, r5
    6956:	bl	c900 <strlen>
    695a:	cmp	r0, #62	; 0x3e
    695c:	bls.n	6968 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    695e:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    6960:	mov	r0, r5
    6962:	add	sp, #476	; 0x1dc
    6964:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    6968:	adds	r2, r0, #1
    696a:	mov	r1, r5
    696c:	add.w	r0, sp, #150	; 0x96
    6970:	bl	8df4 <memcpy>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    6974:	ldr.w	r5, [r4, #252]	; 0xfc
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    6978:	ldr	r3, [sp, #60]	; 0x3c
    697a:	str	r3, [sp, #144]	; 0x90
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    697c:	adds	r2, r5, #1
    697e:	str.w	r2, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    6982:	mov	r1, r5
    6984:	add	r2, sp, #136	; 0x88
    6986:	mov	r0, r4
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    6988:	mov.w	r8, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    698c:	mov.w	r9, #1
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    6990:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    6992:	strb.w	r7, [sp, #148]	; 0x94
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    6996:	str.w	r8, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    699a:	strb.w	r9, [sp, #149]	; 0x95
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    699e:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    69a2:	mov	r0, r4
    69a4:	add	r2, sp, #56	; 0x38
    69a6:	mov	r1, r6
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    69a8:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    69aa:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    69ae:	mov	r0, r4
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    69b0:	cbnz	r7, 69c4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x90>
      sd.mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    69b2:	movw	r2, #16898	; 0x4202
    69b6:	mov	r1, r5
    69b8:	bl	68d4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    69bc:	mov	r0, r5
    69be:	add	sp, #476	; 0x1dc
    69c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    69c4:	mov.w	r3, #256	; 0x100
    69c8:	add	r2, sp, #216	; 0xd8
    69ca:	mov	r1, r5
    69cc:	bl	6550 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    69d0:	ldr	r3, [pc, #68]	; (6a18 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe4>)
    69d2:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    69d6:	cbz	r4, 69f4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xc0>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    69d8:	mov	r3, r9
    69da:	add	r2, sp, #216	; 0xd8
    69dc:	addw	r1, r4, #1084	; 0x43c
    69e0:	mov	r0, sp
    69e2:	strb.w	r8, [sp]
    69e6:	strb.w	r8, [sp, #1]
    69ea:	strb.w	r8, [sp, #2]
    69ee:	bl	2ed4 <FatFile::mkdir(FatFile*, char const*, bool)>
    69f2:	b.n	6960 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    69f4:	ldr.w	r1, [r3, #1148]	; 0x47c
    69f8:	cmp	r1, #0
    69fa:	beq.n	6960 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    69fc:	mov	r3, r9
    69fe:	add	r2, sp, #216	; 0xd8
    6a00:	add.w	r1, r1, #1088	; 0x440
    6a04:	mov	r0, sp
    6a06:	strb.w	r4, [sp, #49]	; 0x31
    6a0a:	strb.w	r4, [sp, #50]	; 0x32
    6a0e:	strb.w	r4, [sp, #51]	; 0x33
    6a12:	bl	1e60 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6a16:	b.n	6960 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    6a18:	.word	0x1fff15fc

00006a1c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    6a1c:	push	{r3, r4, r5, r6, r7, lr}
    6a1e:	mov	r4, r0
    6a20:	mov	r7, r2
    OpenFileByIndex(handle);
    6a22:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    6a24:	mov	r5, r3
    6a26:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    6a28:	bl	68d4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    6a2c:	ldr.w	r0, [r4, #156]	; 0x9c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    6a30:	cbz	r0, 6a5c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x40>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    6a32:	mov	r1, r7
    6a34:	bl	2a40 <FatFile::seekSet(unsigned long)>
    6a38:	ldr.w	r0, [r4, #156]	; 0x9c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    6a3c:	cbz	r0, 6a4a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2e>
    6a3e:	mov	r2, r6
    6a40:	mov	r1, r5
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    6a42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a46:	b.w	27e4 <FatFile::read(void*, unsigned int)>
    6a4a:	ldr.w	r0, [r4, #160]	; 0xa0
    6a4e:	cbz	r0, 6a70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x54>
    6a50:	mov	r2, r6
    6a52:	mov	r1, r5
    6a54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6a58:	b.w	8f8 <ExFatFile::read(void*, unsigned int)>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    6a5c:	ldr.w	r1, [r4, #160]	; 0xa0
    6a60:	cbz	r1, 6a6e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x52>
    6a62:	mov	r3, r0
    6a64:	mov	r2, r7
    6a66:	mov	r0, r1
    6a68:	bl	b0c <ExFatFile::seekSet(unsigned long long)>
    6a6c:	b.n	6a38 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1c>
    6a6e:	pop	{r3, r4, r5, r6, r7, pc}
    6a70:	pop	{r3, r4, r5, r6, r7, pc}
    6a72:	nop

00006a74 <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    6a74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a78:	sub	sp, #164	; 0xa4
    Record record = ReadIndexRecord(i);
    6a7a:	mov	r2, r1
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    6a7c:	mov	r4, r0
    6a7e:	mov	r5, r1
    Record record = ReadIndexRecord(i);
    6a80:	mov	r1, r0
    6a82:	mov	r0, sp
    6a84:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    6a88:	ldrb.w	r3, [sp, #12]
    6a8c:	cbz	r3, 6a94 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    6a8e:	ldrb.w	r2, [sp, #13]
    6a92:	cbz	r2, 6a9a <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    6a94:	add	sp, #164	; 0xa4
    6a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    6a9a:	mov	r1, r5
    6a9c:	mov	r0, r4
    6a9e:	bl	68d4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6aa2:	ldr.w	r3, [r4, #156]	; 0x9c
    6aa6:	cmp	r3, #0
    6aa8:	beq.n	6b6e <MTPStorage_SD::ScanDir(unsigned long)+0xfa>
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    6aaa:	mov.w	r9, #0
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    6aae:	mov	r7, r9
    6ab0:	add.w	r6, r4, #180	; 0xb4
    6ab4:	add.w	r8, r4, #100	; 0x64
    6ab8:	b.n	6aea <MTPStorage_SD::ScanDir(unsigned long)+0x76>

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    6aba:	str	r7, [sp, #84]	; 0x54
        r.scanned = false;
    6abc:	strb.w	r7, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    6ac0:	strb.w	r7, [sp, #94]	; 0x5e
    return m_fFile ? m_fFile->getName(name, len) :
    6ac4:	movs	r2, #64	; 0x40
    6ac6:	add.w	r1, sp, #94	; 0x5e
    6aca:	bl	3a78 <FatFile::getName(char*, unsigned int)>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    6ace:	ldr.w	r9, [r4, #252]	; 0xfc
    6ad2:	add.w	r3, r9, #1
    WriteIndexRecord(new_record, r);
    6ad6:	mov	r0, r4
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    6ad8:	str.w	r3, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    6adc:	mov	r1, r9
    6ade:	add	r2, sp, #80	; 0x50
    6ae0:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
    6ae4:	mov	r0, r6
    6ae6:	bl	45b4 <FsBaseFile::close()>
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    6aea:	movs	r2, #0
    6aec:	mov	r1, r8
    6aee:	mov	r0, r6
    6af0:	bl	46d8 <FsBaseFile::openNext(FsBaseFile*, int)>
    6af4:	ldr.w	r0, [r4, #236]	; 0xec
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6af8:	cbz	r0, 6b22 <MTPStorage_SD::ScanDir(unsigned long)+0xae>
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    6afa:	str	r5, [sp, #80]	; 0x50
        r.sibling = sibling;
    6afc:	str.w	r9, [sp, #88]	; 0x58
    6b00:	ldrb	r3, [r0, #0]
    6b02:	and.w	r3, r3, #112	; 0x70
        r.isdir = child_.isDirectory();
    6b06:	cmp	r3, #0
    6b08:	ite	ne
    6b0a:	movne	r2, #1
    6b0c:	moveq	r2, #0
    6b0e:	strb.w	r2, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    6b12:	bne.n	6aba <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    6b14:	ldr	r2, [r0, #28]
        r.scanned = false;
    6b16:	strb.w	r3, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    6b1a:	strb.w	r3, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    6b1e:	str	r2, [sp, #84]	; 0x54
    6b20:	b.n	6ac4 <MTPStorage_SD::ScanDir(unsigned long)+0x50>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6b22:	ldr.w	r3, [r4, #240]	; 0xf0
    6b26:	cbz	r3, 6b78 <MTPStorage_SD::ScanDir(unsigned long)+0x104>
    6b28:	ldrb.w	r2, [r3, #49]	; 0x31
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    6b2c:	str	r5, [sp, #80]	; 0x50
    6b2e:	and.w	r2, r2, #80	; 0x50
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    6b32:	cmp	r2, #0
    6b34:	ite	ne
    6b36:	movne	r1, #1
    6b38:	moveq	r1, #0
        
        if(!child_) break;

        Record r;
        r.parent = i;
        r.sibling = sibling;
    6b3a:	str.w	r9, [sp, #88]	; 0x58
        r.isdir = child_.isDirectory();
    6b3e:	strb.w	r1, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    6b42:	bne.n	6b62 <MTPStorage_SD::ScanDir(unsigned long)+0xee>
    6b44:	ldr	r1, [r3, #16]
        r.scanned = false;
    6b46:	strb.w	r2, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    6b4a:	strb.w	r2, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    6b4e:	str	r1, [sp, #84]	; 0x54
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    6b50:	cmp	r3, #0
    6b52:	beq.n	6ace <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    6b54:	mov	r0, r3
    6b56:	movs	r2, #64	; 0x40
    6b58:	add.w	r1, sp, #94	; 0x5e
    6b5c:	bl	744 <ExFatFile::getName(char*, unsigned int)>
    6b60:	b.n	6ace <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    6b62:	str	r0, [sp, #84]	; 0x54
        r.scanned = false;
    6b64:	strb.w	r0, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    6b68:	strb.w	r0, [sp, #94]	; 0x5e
    6b6c:	b.n	6b50 <MTPStorage_SD::ScanDir(unsigned long)+0xdc>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    6b6e:	ldr.w	r3, [r4, #160]	; 0xa0
    6b72:	cmp	r3, #0
    6b74:	bne.n	6aaa <MTPStorage_SD::ScanDir(unsigned long)+0x36>
    6b76:	b.n	6a94 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    6b78:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    6b7a:	mov	r2, sp
    6b7c:	mov	r1, r5
    6b7e:	mov	r0, r4
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    6b80:	str.w	r9, [sp, #4]
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    6b84:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    6b88:	bl	62dc <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6b8c:	b.n	6a94 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    6b8e:	nop

00006b90 <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]>:
    }
  }

  void MTPStorage_SD::ScanAll() 
    6b90:	push	{r3, r4, r5, lr}
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    6b92:	ldrb.w	r3, [r0, #256]	; 0x100
  }

  void MTPStorage_SD::ScanAll() 
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    6b96:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    6b98:	mov	r5, r0
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    6b9a:	strb.w	r2, [r0, #257]	; 0x101
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    6b9e:	cbz	r3, 6bbc <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]+0x2c>
  {
    if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    6ba0:	ldr.w	r3, [r5, #252]	; 0xfc
    6ba4:	cbz	r3, 6bba <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]+0x2a>
    6ba6:	movs	r4, #0
    6ba8:	mov	r1, r4
    6baa:	mov	r0, r5
    6bac:	bl	6a74 <MTPStorage_SD::ScanDir(unsigned long)>
    6bb0:	ldr.w	r3, [r5, #252]	; 0xfc
    6bb4:	adds	r4, #1
    6bb6:	cmp	r3, r4
    6bb8:	bhi.n	6ba8 <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]+0x18>
    6bba:	pop	{r3, r4, r5, pc}
    6bbc:	bl	6344 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]>
    6bc0:	b.n	6ba0 <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]+0x10>
    6bc2:	nop

00006bc4 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    6bc4:	push	{r4, r5, lr}
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    6bc6:	ldrb.w	r3, [r0, #256]	; 0x100
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    6bca:	sub	sp, #84	; 0x54
    6bcc:	mov	r4, r0
    6bce:	mov	r5, r1
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    6bd0:	cbz	r3, 6c12 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4e>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    6bd2:	cbz	r5, 6bfc <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x38>
    { if (parent == 0xFFFFFFFF) parent = 0;
    6bd4:	adds	r3, r5, #1
    6bd6:	it	eq
    6bd8:	moveq	r5, #0

      ScanDir(parent);
    6bda:	mov	r1, r5
    6bdc:	mov	r0, r4
    6bde:	bl	6a74 <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    6be2:	movs	r3, #1
    6be4:	strb.w	r3, [r4, #264]	; 0x108
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    6be8:	mov	r2, r5
    6bea:	mov	r1, r4
    6bec:	mov	r0, sp
    6bee:	bl	63d8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6bf2:	ldr	r3, [sp, #4]
    6bf4:	str.w	r3, [r4, #260]	; 0x104
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    6bf8:	add	sp, #84	; 0x54
    6bfa:	pop	{r4, r5, pc}
    }
  }

  void MTPStorage_SD::ScanAll() 
  {
    if (all_scanned_) return;
    6bfc:	ldrb.w	r3, [r4, #257]	; 0x101
    6c00:	cbz	r3, 6c18 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x54>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    6c02:	movs	r2, #0
      next_ = 1;
    6c04:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    6c06:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    6c0a:	str.w	r3, [r4, #260]	; 0x104
    }
  }
    6c0e:	add	sp, #84	; 0x54
    6c10:	pop	{r4, r5, pc}
    6c12:	bl	6344 <MTPStorage_SD::GenerateIndex() [clone .part.41] [clone .constprop.59]>
    6c16:	b.n	6bd2 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    6c18:	mov	r0, r4
    6c1a:	bl	6b90 <MTPStorage_SD::ScanAll() [clone .part.44] [clone .constprop.56]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    6c1e:	movs	r2, #0
      next_ = 1;
    6c20:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    6c22:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    6c26:	str.w	r3, [r4, #260]	; 0x104
    6c2a:	b.n	6c0e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>

00006c2c <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    6c2c:	mov	r5, r0
    6c2e:	ldr.w	r0, [r0, #1156]	; 0x484
    6c32:	push	{r3, lr}
    6c34:	mov	r4, r1
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    6c36:	cbz	r0, 6c68 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    6c38:	ldr	r3, [r0, #0]
    6c3a:	ldr	r3, [r3, #36]	; 0x24
    6c3c:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    6c3e:	cbnz	r0, 6c68 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    6c40:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    6c44:	cbz	r3, 6c50 <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    6c46:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    6c48:	cbz	r3, 6c5e <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    6c4a:	bl	a530 <yield>
    6c4e:	b.n	6c4a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    6c50:	ldr.w	r3, [r5, #1148]	; 0x47c
    6c54:	cbz	r3, 6c5e <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    6c56:	ldrb.w	r3, [r3, #1084]	; 0x43c
    6c5a:	cmp	r3, #0
    6c5c:	bne.n	6c4a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    6c5e:	mov	r0, r4
    6c60:	ldr	r1, [pc, #84]	; (6cb8 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    6c62:	bl	62b4 <Print::println(__FlashStringHelper const*)>
    6c66:	b.n	6c4a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    6c68:	ldr	r1, [pc, #80]	; (6cbc <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    6c6a:	mov	r0, r4
    6c6c:	bl	6d8 <Print::write(char const*)>
    6c70:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    6c74:	cbz	r0, 6cb4 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    6c76:	ldr	r3, [r0, #0]
    6c78:	ldr	r3, [r3, #36]	; 0x24
    6c7a:	blx	r3
    6c7c:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    6c7e:	movs	r3, #0
    6c80:	movs	r2, #16
    6c82:	mov	r0, r4
    6c84:	bl	a670 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    6c88:	ldr	r1, [pc, #52]	; (6cc0 <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    6c8a:	mov	r0, r4
    6c8c:	bl	6d8 <Print::write(char const*)>
    6c90:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    6c94:	cbz	r0, 6cb0 <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    6c96:	ldr	r3, [r0, #0]
    6c98:	ldr	r3, [r3, #40]	; 0x28
    6c9a:	blx	r3
    6c9c:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    6c9e:	movs	r3, #0
    6ca0:	movs	r2, #16
    6ca2:	mov	r0, r4
    6ca4:	bl	a670 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    6ca8:	mov	r0, r4
    6caa:	bl	a624 <Print::println()>
    6cae:	b.n	6c4a <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    6cb0:	mov	r1, r0
    6cb2:	b.n	6c9e <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    6cb4:	movs	r1, #41	; 0x29
    6cb6:	b.n	6c7e <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    6cb8:	.word	0x0000ff20
    6cbc:	.word	0x0000ff10
    6cc0:	.word	0x0000ff1c

00006cc4 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
  void Storage_init(void)
  { 
    6cc4:	push	{r3, r4, r5, lr}
    #if DO_DEBUG>0
      Serial.println("Using SdFs");
    #endif
    #if USE_SDIO==0
      SPI.setMOSI(SD_MOSI);
    6cc6:	movs	r1, #7
    6cc8:	ldr	r0, [pc, #92]	; (6d28 <Storage_init()+0x64>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    6cca:	ldr	r5, [pc, #96]	; (6d2c <Storage_init()+0x68>)
    6ccc:	bl	88d0 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    6cd0:	movs	r1, #12
    6cd2:	ldr	r0, [pc, #84]	; (6d28 <Storage_init()+0x64>)
    6cd4:	bl	8974 <SPIClass::setMISO(unsigned char)>
    6cd8:	add.w	r4, r5, #1160	; 0x488
      SPI.setSCK(SD_SCK);
    6cdc:	movs	r1, #14
    6cde:	ldr	r0, [pc, #72]	; (6d28 <Storage_init()+0x64>)
    6ce0:	bl	8a14 <SPIClass::setSCK(unsigned char)>
    6ce4:	mov	r0, r4
    6ce6:	mov.w	r1, #0
    6cea:	bl	5ab4 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    6cee:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    6cf0:	str.w	r4, [r5, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    6cf4:	bl	5214 <SdioCard::errorCode() const>
    6cf8:	cbz	r0, 6d12 <Storage_init()+0x4e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    6cfa:	ldr	r1, [pc, #52]	; (6d30 <Storage_init()+0x6c>)
    6cfc:	ldr	r0, [pc, #52]	; (6d34 <Storage_init()+0x70>)
    6cfe:	bl	6d8 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    6d02:	ldr	r1, [pc, #52]	; (6d38 <Storage_init()+0x74>)
    6d04:	ldr	r0, [pc, #44]	; (6d34 <Storage_init()+0x70>)
    6d06:	bl	62b4 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    6d0a:	ldr	r1, [pc, #40]	; (6d34 <Storage_init()+0x70>)
    6d0c:	ldr	r0, [pc, #28]	; (6d2c <Storage_init()+0x68>)
    6d0e:	bl	6c2c <SdBase<FsVolume>::errorHalt(Print*)>
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    6d12:	ldr.w	r1, [r5, #1156]	; 0x484
    6d16:	mov	r0, r5
    6d18:	bl	4738 <FsVolume::begin(BlockDeviceInterface*)>
    6d1c:	cmp	r0, #0
    6d1e:	beq.n	6cfa <Storage_init()+0x36>
    #endif
    if (!sd.begin(SD_CONFIG)) sd.errorHalt("sd.begin failed");
  
    // Set Time callback
    FsDateTime::callback = dateTime;
    6d20:	ldr	r3, [pc, #24]	; (6d3c <Storage_init()+0x78>)
    6d22:	ldr	r2, [pc, #28]	; (6d40 <Storage_init()+0x7c>)
    6d24:	str	r2, [r3, #0]
    6d26:	pop	{r3, r4, r5, pc}
    6d28:	.word	0x1fff097c
    6d2c:	.word	0x1fff15fc
    6d30:	.word	0x0000ff34
    6d34:	.word	0x1fff09c8
    6d38:	.word	0x0000ff3c
    6d3c:	.word	0x1fff15ac
    6d40:	.word	0x00006065

00006d44 <_GLOBAL__sub_I__Z8dateTimePtS_Ph>:
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    6d44:	push	{r4, r5, r6, r7}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    6d46:	ldr	r3, [pc, #56]	; (6d80 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x3c>)
    6d48:	ldr	r0, [pc, #56]	; (6d84 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x40>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    6d4a:	ldr	r7, [pc, #60]	; (6d88 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x44>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    6d4c:	ldr	r5, [pc, #60]	; (6d8c <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x48>)
    6d4e:	str.w	r0, [r3, #1160]	; 0x488
    6d52:	movs	r4, #0
    6d54:	movs	r6, #40	; 0x28
    6d56:	strb.w	r6, [r3, #1188]	; 0x4a4
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    6d5a:	strb.w	r4, [r3, #1168]	; 0x490
    6d5e:	strb.w	r4, [r3, #1191]	; 0x4a7
    6d62:	str.w	r7, [r3, #1172]	; 0x494
    6d66:	str.w	r5, [r3, #1196]	; 0x4ac
    6d6a:	str.w	r4, [r3, #1144]	; 0x478
    6d6e:	str.w	r4, [r3, #1148]	; 0x47c
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    6d72:	ldr	r2, [pc, #28]	; (6d90 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x4c>)
    6d74:	ldr	r1, [pc, #28]	; (6d94 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x50>)
    6d76:	mov	r0, r3
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    6d78:	pop	{r4, r5, r6, r7}
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    6d7a:	b.w	af14 <__aeabi_atexit>
    6d7e:	nop
    6d80:	.word	0x1fff15fc
    6d84:	.word	0x0000fe60
    6d88:	.word	0x0000fe08
    6d8c:	.word	0x38011001
    6d90:	.word	0x1fff0970
    6d94:	.word	0x00006061

00006d98 <MTPD::get_buffer()>:
    }

#if defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    6d98:	push	{r4, lr}
    6d9a:	mov	r4, r0
    6d9c:	ldr	r0, [r4, #4]
    while (!data_buffer_) {
    6d9e:	cbnz	r0, 6da8 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    6da0:	bl	95e4 <usb_malloc>
    6da4:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    6da6:	cbz	r0, 6daa <MTPD::get_buffer()+0x12>
    6da8:	pop	{r4, pc}
    6daa:	bl	62d8 <mtp_yield()>
    6dae:	b.n	6d9c <MTPD::get_buffer()+0x4>

00006db0 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    6db0:	cmp	r2, #0
    6db2:	ble.n	6e12 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    6db4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    6db8:	mov.w	r9, #0
    6dbc:	mov	r6, r2
    6dbe:	mov	r7, r1
    6dc0:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6dc2:	mov	r8, r9
    6dc4:	b.n	6dca <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    6dc6:	cmp	r6, r9
    6dc8:	ble.n	6e0e <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    6dca:	mov	r0, r5
    6dcc:	bl	6d98 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    6dd0:	ldr	r3, [r5, #4]
    6dd2:	ldrh.w	r0, [r3], #8
    6dd6:	rsb	r2, r9, r6
    6dda:	rsb	r4, r0, #64	; 0x40
    6dde:	cmp	r4, r2
    6de0:	it	ge
    6de2:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    6de4:	add.w	r1, r7, r9
    6de8:	add	r0, r3
    6dea:	mov	r2, r4
    6dec:	bl	8df4 <memcpy>
        data_buffer_->len += to_copy;
    6df0:	ldr	r1, [r5, #4]
    6df2:	ldrh	r3, [r1, #0]
    6df4:	add	r3, r4
    6df6:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6df8:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    6dfa:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    6dfc:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    6dfe:	bne.n	6dc6 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    6e00:	movs	r0, #4
    6e02:	bl	97e0 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    6e06:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    6e08:	str.w	r8, [r5, #4]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    6e0c:	bgt.n	6dca <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    6e0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e12:	bx	lr

00006e14 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    6e14:	push	{r4, r5, lr}
    if (*str) 
    6e16:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    6e18:	sub	sp, #12
    6e1a:	mov	r4, r0
    if (*str) 
    6e1c:	cbz	r3, 6e78 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    6e1e:	mov	r0, r1
    6e20:	mov	r5, r1
    6e22:	bl	c900 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6e26:	ldrb	r1, [r4, #8]
    6e28:	adds	r0, #1
    6e2a:	strb.w	r0, [sp, #3]
    6e2e:	cbz	r1, 6e8a <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    6e30:	ldr	r3, [r4, #12]
    6e32:	adds	r3, #1
    6e34:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6e36:	ldrb	r2, [r5, #0]
    6e38:	cbnz	r2, 6e48 <MTPD::writestring(char const*)+0x34>
    6e3a:	b.n	6e70 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6e3c:	ldr	r3, [r4, #12]
    6e3e:	adds	r3, #2
    6e40:	str	r3, [r4, #12]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6e42:	ldrb.w	r2, [r5, #1]!
    6e46:	cbz	r2, 6e66 <MTPD::writestring(char const*)+0x52>
    6e48:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6e4c:	cmp	r1, #0
    6e4e:	bne.n	6e3c <MTPD::writestring(char const*)+0x28>
    6e50:	movs	r2, #2
    6e52:	add.w	r1, sp, #6
    6e56:	mov	r0, r4
    6e58:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6e5c:	ldrb.w	r2, [r5, #1]!
    6e60:	ldrb	r1, [r4, #8]
    6e62:	cmp	r2, #0
    6e64:	bne.n	6e48 <MTPD::writestring(char const*)+0x34>
    6e66:	movs	r3, #0
    6e68:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6e6c:	cbz	r1, 6eae <MTPD::writestring(char const*)+0x9a>
    6e6e:	ldr	r3, [r4, #12]
      write_length_ += len;
    6e70:	adds	r3, #2
    6e72:	str	r3, [r4, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    6e74:	add	sp, #12
    6e76:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6e78:	ldrb	r2, [r0, #8]
    6e7a:	strb.w	r3, [sp, #2]
    6e7e:	cbz	r2, 6ea0 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    6e80:	ldr	r3, [r0, #12]
    6e82:	adds	r3, #1
    6e84:	str	r3, [r0, #12]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    6e86:	add	sp, #12
    6e88:	pop	{r4, r5, pc}
    6e8a:	movs	r2, #1
    6e8c:	add.w	r1, sp, #3
    6e90:	mov	r0, r4
    6e92:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6e96:	ldrb	r2, [r5, #0]
    6e98:	ldrb	r1, [r4, #8]
    6e9a:	cmp	r2, #0
    6e9c:	bne.n	6e48 <MTPD::writestring(char const*)+0x34>
    6e9e:	b.n	6e66 <MTPD::writestring(char const*)+0x52>
    6ea0:	movs	r2, #1
    6ea2:	add.w	r1, sp, #2
    6ea6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    6eaa:	add	sp, #12
    6eac:	pop	{r4, r5, pc}
    6eae:	mov	r0, r4
    6eb0:	movs	r2, #2
    6eb2:	add	r1, sp, #4
    6eb4:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    6eb8:	add	sp, #12
    6eba:	pop	{r4, r5, pc}

00006ebc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    6ebc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6ebe:	ldrb	r3, [r0, #8]
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    6ec0:	sub	sp, #8
    6ec2:	mov	r4, r0
    6ec4:	mov	r5, r1
    6ec6:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6eca:	cbz	r3, 6f04 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    6ecc:	ldr	r3, [r0, #12]
    6ece:	movw	r2, #65535	; 0xffff
    6ed2:	adds	r3, #2
    6ed4:	str	r3, [r0, #12]
    6ed6:	strh.w	r2, [sp, #6]
    6eda:	adds	r3, #2
    6edc:	movs	r2, #0
    6ede:	str	r3, [r4, #12]
    6ee0:	strb.w	r2, [sp, #2]
    6ee4:	adds	r3, #1
    6ee6:	str	r3, [r4, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    6ee8:	movw	r3, #54274	; 0xd402
    6eec:	cmp	r5, r3
    6eee:	beq.n	6f40 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6ef0:	ldrb	r3, [r4, #8]
    6ef2:	movs	r2, #0
    6ef4:	strb.w	r2, [sp, #3]
    6ef8:	cbz	r3, 6f5c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    6efa:	ldr	r3, [r4, #12]
    6efc:	adds	r3, #1
    6efe:	str	r3, [r4, #12]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    6f00:	add	sp, #8
    6f02:	pop	{r4, r5, r6, pc}
    6f04:	movs	r2, #2
    6f06:	add	r1, sp, #4
    6f08:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    6f0c:	ldrb	r6, [r4, #8]
    6f0e:	movw	r3, #65535	; 0xffff
    6f12:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6f16:	cbnz	r6, 6f6c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    6f18:	movs	r2, #2
    6f1a:	add.w	r1, sp, #6
    6f1e:	mov	r0, r4
    6f20:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    6f24:	ldrb	r3, [r4, #8]
    6f26:	strb.w	r6, [sp, #2]
    6f2a:	cbnz	r3, 6f70 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    6f2c:	movs	r2, #1
    6f2e:	add.w	r1, sp, #2
    6f32:	mov	r0, r4
    6f34:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    6f38:	movw	r3, #54274	; 0xd402
    6f3c:	cmp	r5, r3
    6f3e:	bne.n	6ef0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    6f40:	ldr	r1, [pc, #48]	; (6f74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    6f42:	mov	r0, r4
    6f44:	bl	6e14 <MTPD::writestring(char const*)>
    6f48:	ldr	r1, [pc, #40]	; (6f74 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    6f4a:	mov	r0, r4
    6f4c:	bl	6e14 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6f50:	ldrb	r3, [r4, #8]
    6f52:	movs	r2, #0
    6f54:	strb.w	r2, [sp, #3]
    6f58:	cmp	r3, #0
    6f5a:	bne.n	6efa <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    6f5c:	mov	r0, r4
    6f5e:	movs	r2, #1
    6f60:	add.w	r1, sp, #3
    6f64:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    6f68:	add	sp, #8
    6f6a:	pop	{r4, r5, r6, pc}
    6f6c:	ldr	r3, [r4, #12]
    6f6e:	b.n	6eda <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    6f70:	ldr	r3, [r4, #12]
    6f72:	b.n	6ee4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    6f74:	.word	0x0000ff84

00006f78 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    6f78:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6f7a:	ldrb	r3, [r0, #8]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    6f7c:	sub	sp, #44	; 0x2c
    6f7e:	movs	r5, #100	; 0x64
    6f80:	mov	r4, r0
    6f82:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6f86:	cmp	r3, #0
    6f88:	beq.n	706a <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    6f8a:	ldr	r3, [r0, #12]
    6f8c:	movs	r2, #6
    6f8e:	adds	r3, #2
    6f90:	str	r3, [r0, #12]
    6f92:	str	r2, [sp, #20]
    6f94:	adds	r3, #4
    6f96:	movs	r2, #100	; 0x64
    6f98:	str	r3, [r4, #12]
    6f9a:	strh.w	r2, [sp, #4]
    6f9e:	adds	r3, #2
    6fa0:	str	r3, [r4, #12]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    6fa2:	ldr	r1, [pc, #464]	; (7174 <MTPD::WriteDescriptor()+0x1fc>)
    6fa4:	mov	r0, r4
    6fa6:	bl	6e14 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6faa:	ldrb	r3, [r4, #8]
    6fac:	movs	r2, #0
    6fae:	strh.w	r2, [sp, #2]
    6fb2:	cmp	r3, #0
    6fb4:	beq.w	712c <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    6fb8:	ldr	r3, [r4, #12]
    6fba:	movs	r2, #18
    6fbc:	adds	r3, #2
    6fbe:	str	r3, [r4, #12]
    6fc0:	str	r2, [sp, #16]
    6fc2:	adds	r3, #4
    6fc4:	str	r3, [r4, #12]
    6fc6:	movs	r6, #1
    6fc8:	ldr	r5, [pc, #428]	; (7178 <MTPD::WriteDescriptor()+0x200>)
    6fca:	movw	r3, #4097	; 0x1001
    6fce:	add.w	r7, r5, #34	; 0x22
    6fd2:	b.n	6fe4 <MTPD::WriteDescriptor()+0x6c>
    6fd4:	ldr	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    6fd6:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    6fd8:	add.w	r3, r3, #2
    6fdc:	str	r3, [r4, #12]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    6fde:	beq.n	6ffc <MTPD::WriteDescriptor()+0x84>
    6fe0:	ldrh.w	r3, [r5, #2]!
    6fe4:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    6fe8:	cmp	r6, #0
    6fea:	bne.n	6fd4 <MTPD::WriteDescriptor()+0x5c>
    6fec:	movs	r2, #2
    6fee:	add	r1, sp, #8
    6ff0:	mov	r0, r4
    6ff2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    6ff6:	cmp	r7, r5
    6ff8:	ldrb	r6, [r4, #8]
    6ffa:	bne.n	6fe0 <MTPD::WriteDescriptor()+0x68>
    6ffc:	movs	r3, #0
    6ffe:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7000:	cmp	r6, #0
    7002:	beq.n	709e <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    7004:	ldr	r3, [r4, #12]
    7006:	movs	r2, #1
    7008:	adds	r3, #4
    700a:	str	r3, [r4, #12]
    700c:	str	r2, [sp, #32]
    700e:	adds	r3, #4
    7010:	movw	r2, #54274	; 0xd402
    7014:	str	r3, [r4, #12]
    7016:	strh.w	r2, [sp, #14]
    701a:	adds	r3, #2
    701c:	movs	r2, #0
    701e:	str	r3, [r4, #12]
    7020:	str	r2, [sp, #28]
    7022:	adds	r3, #4
    7024:	movs	r2, #2
    7026:	str	r3, [r4, #12]
    7028:	str	r2, [sp, #24]
    702a:	adds	r3, #4
    702c:	mov.w	r2, #12288	; 0x3000
    7030:	str	r3, [r4, #12]
    7032:	strh.w	r2, [sp, #12]
    7036:	adds	r3, #2
    7038:	movw	r2, #12289	; 0x3001
    703c:	str	r3, [r4, #12]
    703e:	strh.w	r2, [sp, #10]
    7042:	adds	r3, #2
    7044:	str	r3, [r4, #12]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring("PJRC");     // Manufacturer
    7046:	mov	r0, r4
    7048:	ldr	r1, [pc, #304]	; (717c <MTPD::WriteDescriptor()+0x204>)
    704a:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("Teensy");   // Model
    704e:	mov	r0, r4
    7050:	ldr	r1, [pc, #300]	; (7180 <MTPD::WriteDescriptor()+0x208>)
    7052:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("1.0");      // version
    7056:	mov	r0, r4
    7058:	ldr	r1, [pc, #296]	; (7184 <MTPD::WriteDescriptor()+0x20c>)
    705a:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("???");      // serial
    705e:	mov	r0, r4
    7060:	ldr	r1, [pc, #292]	; (7188 <MTPD::WriteDescriptor()+0x210>)
    7062:	bl	6e14 <MTPD::writestring(char const*)>
  }
    7066:	add	sp, #44	; 0x2c
    7068:	pop	{r4, r5, r6, r7, pc}
    706a:	movs	r2, #2
    706c:	add.w	r1, sp, #6
    7070:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7074:	ldrb	r3, [r4, #8]
    7076:	movs	r2, #6
    7078:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    707a:	cmp	r3, #0
    707c:	bne.n	715a <MTPD::WriteDescriptor()+0x1e2>
    707e:	movs	r2, #4
    7080:	add	r1, sp, #20
    7082:	mov	r0, r4
    7084:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7088:	ldrb	r3, [r4, #8]
    708a:	strh.w	r5, [sp, #4]
    708e:	cmp	r3, #0
    7090:	bne.n	715e <MTPD::WriteDescriptor()+0x1e6>
    7092:	movs	r2, #2
    7094:	add	r1, sp, #4
    7096:	mov	r0, r4
    7098:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    709c:	b.n	6fa2 <MTPD::WriteDescriptor()+0x2a>
    709e:	movs	r2, #4
    70a0:	add	r1, sp, #36	; 0x24
    70a2:	mov	r0, r4
    70a4:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    70a8:	ldrb	r3, [r4, #8]
    70aa:	movs	r2, #1
    70ac:	str	r2, [sp, #32]
    70ae:	cmp	r3, #0
    70b0:	bne.n	7162 <MTPD::WriteDescriptor()+0x1ea>
    70b2:	movs	r2, #4
    70b4:	add	r1, sp, #32
    70b6:	mov	r0, r4
    70b8:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    70bc:	ldrb	r3, [r4, #8]
    70be:	movw	r2, #54274	; 0xd402
    70c2:	strh.w	r2, [sp, #14]
    70c6:	cmp	r3, #0
    70c8:	bne.n	7166 <MTPD::WriteDescriptor()+0x1ee>
    70ca:	movs	r2, #2
    70cc:	add.w	r1, sp, #14
    70d0:	mov	r0, r4
    70d2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    70d6:	ldrb	r3, [r4, #8]
    70d8:	str	r6, [sp, #28]
    70da:	cmp	r3, #0
    70dc:	bne.n	716a <MTPD::WriteDescriptor()+0x1f2>
    70de:	movs	r2, #4
    70e0:	add	r1, sp, #28
    70e2:	mov	r0, r4
    70e4:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    70e8:	ldrb	r3, [r4, #8]
    70ea:	movs	r5, #2
    70ec:	str	r5, [sp, #24]
    70ee:	cmp	r3, #0
    70f0:	bne.n	716e <MTPD::WriteDescriptor()+0x1f6>
    70f2:	movs	r2, #4
    70f4:	add	r1, sp, #24
    70f6:	mov	r0, r4
    70f8:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    70fc:	ldrb	r3, [r4, #8]
    70fe:	mov.w	r2, #12288	; 0x3000
    7102:	strh.w	r2, [sp, #12]
    7106:	cbnz	r3, 7152 <MTPD::WriteDescriptor()+0x1da>
    7108:	mov	r2, r5
    710a:	add	r1, sp, #12
    710c:	mov	r0, r4
    710e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7112:	ldrb	r3, [r4, #8]
    7114:	movw	r2, #12289	; 0x3001
    7118:	strh.w	r2, [sp, #10]
    711c:	cbnz	r3, 714e <MTPD::WriteDescriptor()+0x1d6>
    711e:	mov	r2, r5
    7120:	add.w	r1, sp, #10
    7124:	mov	r0, r4
    7126:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    712a:	b.n	7046 <MTPD::WriteDescriptor()+0xce>
    712c:	movs	r2, #2
    712e:	add.w	r1, sp, r2
    7132:	mov	r0, r4
    7134:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7138:	ldrb	r3, [r4, #8]
    713a:	movs	r2, #18
    713c:	str	r2, [sp, #16]
    713e:	cbnz	r3, 7156 <MTPD::WriteDescriptor()+0x1de>
    7140:	movs	r2, #4
    7142:	add	r1, sp, #16
    7144:	mov	r0, r4
    7146:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    714a:	ldrb	r6, [r4, #8]
    714c:	b.n	6fc8 <MTPD::WriteDescriptor()+0x50>
    714e:	ldr	r3, [r4, #12]
    7150:	b.n	7042 <MTPD::WriteDescriptor()+0xca>
    7152:	ldr	r3, [r4, #12]
    7154:	b.n	7036 <MTPD::WriteDescriptor()+0xbe>
    7156:	ldr	r3, [r4, #12]
    7158:	b.n	6fc2 <MTPD::WriteDescriptor()+0x4a>
    715a:	ldr	r3, [r4, #12]
    715c:	b.n	6f94 <MTPD::WriteDescriptor()+0x1c>
    715e:	ldr	r3, [r4, #12]
    7160:	b.n	6f9e <MTPD::WriteDescriptor()+0x26>
    7162:	ldr	r3, [r4, #12]
    7164:	b.n	700e <MTPD::WriteDescriptor()+0x96>
    7166:	ldr	r3, [r4, #12]
    7168:	b.n	701a <MTPD::WriteDescriptor()+0xa2>
    716a:	ldr	r3, [r4, #12]
    716c:	b.n	7022 <MTPD::WriteDescriptor()+0xaa>
    716e:	ldr	r3, [r4, #12]
    7170:	b.n	702a <MTPD::WriteDescriptor()+0xb2>
    7172:	nop
    7174:	.word	0x0000ff8c
    7178:	.word	0x0000ff4c
    717c:	.word	0x0000ffa0
    7180:	.word	0x0000ff84
    7184:	.word	0x0000ffa8
    7188:	.word	0x0000ffac

0000718c <MTPD::WriteStorageIDs()>:
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    718c:	push	{r4, r5, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    718e:	ldrb	r3, [r0, #8]
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    7190:	sub	sp, #12
    7192:	movs	r5, #1
    7194:	mov	r4, r0
    7196:	str	r5, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7198:	cbz	r3, 71a8 <MTPD::WriteStorageIDs()+0x1c>
      write_length_ += len;
    719a:	ldr	r3, [r0, #12]
    719c:	adds	r3, #4
    719e:	str	r3, [r0, #12]
    71a0:	adds	r3, #4
    71a2:	str	r3, [r4, #12]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    71a4:	add	sp, #12
    71a6:	pop	{r4, r5, pc}
    71a8:	movs	r2, #4
    71aa:	add.w	r1, sp, r2
    71ae:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    71b2:	ldrb	r3, [r4, #8]
    71b4:	str	r5, [sp, #0]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    71b6:	cbnz	r3, 71c6 <MTPD::WriteStorageIDs()+0x3a>
    71b8:	mov	r0, r4
    71ba:	movs	r2, #4
    71bc:	mov	r1, sp
    71be:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    71c2:	add	sp, #12
    71c4:	pop	{r4, r5, pc}
    71c6:	ldr	r3, [r4, #12]
    71c8:	b.n	71a0 <MTPD::WriteStorageIDs()+0x14>
    71ca:	nop

000071cc <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    71cc:	push	{r4, r5, r6, lr}
    71ce:	mov	r4, r0
    if (write_get_length_) {
    71d0:	ldrb	r5, [r0, #8]
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    71d2:	ldr	r0, [r0, #0]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    71d4:	sub	sp, #8
    71d6:	mov	r6, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    71d8:	ldr	r3, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    71da:	cbz	r5, 71fa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2e>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    71dc:	mov	r1, r2
    71de:	ldr	r3, [r3, #16]
    71e0:	blx	r3
    int num = 0;
    71e2:	movs	r5, #0
    while (storage_->GetNextObjectHandle()) num++;
    71e4:	ldr	r0, [r4, #0]
    71e6:	ldr	r3, [r0, #0]
    71e8:	ldr	r3, [r3, #20]
    71ea:	blx	r3
    71ec:	adds	r5, #1
    71ee:	cmp	r0, #0
    71f0:	bne.n	71e4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x18>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    71f2:	lsls	r5, r5, #2
    71f4:	str	r5, [r4, #12]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    71f6:	add	sp, #8
    71f8:	pop	{r4, r5, r6, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    71fa:	ldr	r3, [r3, #16]
    71fc:	mov	r1, r2
    71fe:	blx	r3
    7200:	b.n	7204 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    7202:	adds	r5, #1
    7204:	ldr	r0, [r4, #0]
    7206:	ldr	r3, [r0, #0]
    7208:	ldr	r3, [r3, #20]
    720a:	blx	r3
    720c:	cmp	r0, #0
    720e:	bne.n	7202 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7210:	ldrb	r3, [r4, #8]
    7212:	str	r5, [sp, #4]
    7214:	cbz	r3, 724c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x80>
      write_length_ += len;
    7216:	ldr	r3, [r4, #12]
    7218:	adds	r3, #4
    721a:	str	r3, [r4, #12]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    721c:	ldr	r0, [r4, #0]
    721e:	ldr	r3, [r0, #0]
    7220:	mov	r1, r6
    7222:	ldr	r3, [r3, #16]
    7224:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    7226:	ldr	r0, [r4, #0]
    7228:	ldr	r3, [r0, #0]
    722a:	ldr	r3, [r3, #20]
    722c:	blx	r3
    722e:	cmp	r0, #0
    7230:	beq.n	71f6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7232:	ldrb	r3, [r4, #8]
    7234:	str	r0, [sp, #0]
    7236:	cbz	r3, 7240 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
      write_length_ += len;
    7238:	ldr	r3, [r4, #12]
    723a:	adds	r3, #4
    723c:	str	r3, [r4, #12]
    723e:	b.n	7226 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    7240:	movs	r2, #4
    7242:	mov	r1, sp
    7244:	mov	r0, r4
    7246:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    724a:	b.n	7226 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    724c:	movs	r2, #4
    724e:	add.w	r1, sp, r2
    7252:	mov	r0, r4
    7254:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7258:	b.n	721c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    725a:	nop

0000725c <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    725c:	push	{r4, r5, r6, lr}
    725e:	mov	r4, r0
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    7260:	ldr	r0, [r0, #0]
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    7262:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    7264:	ldr	r3, [r0, #0]
    7266:	add	r5, sp, #24
    7268:	str	r5, [sp, #0]
    726a:	ldr	r6, [r3, #24]
    726c:	add	r2, sp, #72	; 0x48
    726e:	add	r3, sp, #20
    7270:	blx	r6
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7272:	ldrb	r3, [r4, #8]
    7274:	movs	r2, #1
    7276:	str	r2, [sp, #28]
    7278:	cmp	r3, #0
    727a:	beq.n	7330 <MTPD::GetObjectInfo(unsigned long)+0xd4>
      write_length_ += len;
    727c:	ldr	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    727e:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    7280:	adds	r3, #4
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    7282:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    7284:	str	r3, [r4, #12]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    7286:	beq.w	7460 <MTPD::GetObjectInfo(unsigned long)+0x204>
    728a:	movs	r2, #0
    728c:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    7290:	adds	r3, #2
    7292:	movs	r2, #0
    7294:	str	r3, [r4, #12]
    7296:	strh.w	r2, [sp, #14]
    729a:	adds	r3, #2
    729c:	ldr	r2, [sp, #20]
    729e:	str	r3, [r4, #12]
    72a0:	str	r2, [sp, #60]	; 0x3c
    72a2:	adds	r3, #4
    72a4:	movs	r2, #0
    72a6:	str	r3, [r4, #12]
    72a8:	strh.w	r2, [sp, #12]
    72ac:	adds	r3, #2
    72ae:	movs	r2, #0
    72b0:	str	r3, [r4, #12]
    72b2:	str	r2, [sp, #56]	; 0x38
    72b4:	adds	r3, #4
    72b6:	movs	r2, #0
    72b8:	str	r3, [r4, #12]
    72ba:	str	r2, [sp, #52]	; 0x34
    72bc:	adds	r3, #4
    72be:	movs	r2, #0
    72c0:	str	r3, [r4, #12]
    72c2:	str	r2, [sp, #48]	; 0x30
    72c4:	adds	r3, #4
    72c6:	movs	r2, #0
    72c8:	str	r3, [r4, #12]
    72ca:	str	r2, [sp, #44]	; 0x2c
    72cc:	adds	r3, #4
    72ce:	movs	r2, #0
    72d0:	str	r3, [r4, #12]
    72d2:	str	r2, [sp, #40]	; 0x28
    72d4:	adds	r3, #4
    72d6:	movs	r2, #0
    72d8:	str	r3, [r4, #12]
    72da:	str	r2, [sp, #36]	; 0x24
    72dc:	adds	r3, #4
    72de:	ldr	r2, [r5, #0]
    72e0:	str	r3, [r4, #12]
    72e2:	str	r2, [sp, #32]
    72e4:	ldr	r2, [sp, #20]
    72e6:	sub.w	r2, r2, #4294967295
    72ea:	clz	r2, r2
    72ee:	lsrs	r2, r2, #5
    72f0:	adds	r3, #4
    72f2:	str	r3, [r4, #12]
    72f4:	strh.w	r2, [sp, #18]
    72f8:	adds	r3, #2
    72fa:	movs	r2, #0
    72fc:	str	r3, [r4, #12]
    72fe:	str	r2, [sp, #68]	; 0x44
    7300:	adds	r3, #4
    7302:	movs	r2, #0
    7304:	str	r3, [r4, #12]
    7306:	str	r2, [sp, #64]	; 0x40
    7308:	adds	r3, #4
    730a:	str	r3, [r4, #12]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    730c:	add	r1, sp, #72	; 0x48
    730e:	mov	r0, r4
    7310:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("");  // date created
    7314:	mov	r0, r4
    7316:	ldr	r1, [pc, #396]	; (74a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    7318:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    731c:	mov	r0, r4
    731e:	ldr	r1, [pc, #388]	; (74a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    7320:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    7324:	mov	r0, r4
    7326:	ldr	r1, [pc, #380]	; (74a4 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    7328:	bl	6e14 <MTPD::writestring(char const*)>
  }
    732c:	add	sp, #328	; 0x148
    732e:	pop	{r4, r5, r6, pc}
    7330:	add	r1, sp, #28
    7332:	movs	r2, #4
    7334:	mov	r0, r4
    7336:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    733a:	ldr	r3, [sp, #20]
    733c:	ldrb	r6, [r4, #8]
    733e:	adds	r3, #1
    7340:	movw	r3, #12289	; 0x3001
    7344:	it	ne
    7346:	movne	r3, #0
    7348:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    734c:	cmp	r6, #0
    734e:	bne.w	7472 <MTPD::GetObjectInfo(unsigned long)+0x216>
    7352:	add	r1, sp, #16
    7354:	movs	r2, #2
    7356:	mov	r0, r4
    7358:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    735c:	ldrb	r3, [r4, #8]
    735e:	strh.w	r6, [sp, #14]
    7362:	cmp	r3, #0
    7364:	bne.w	7476 <MTPD::GetObjectInfo(unsigned long)+0x21a>
    7368:	movs	r2, #2
    736a:	add.w	r1, sp, #14
    736e:	mov	r0, r4
    7370:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7374:	ldrb	r3, [r4, #8]
    7376:	ldr	r2, [sp, #20]
    7378:	str	r2, [sp, #60]	; 0x3c
    737a:	cmp	r3, #0
    737c:	bne.n	747a <MTPD::GetObjectInfo(unsigned long)+0x21e>
    737e:	add	r1, sp, #60	; 0x3c
    7380:	movs	r2, #4
    7382:	mov	r0, r4
    7384:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7388:	ldrb	r3, [r4, #8]
    738a:	strh.w	r6, [sp, #12]
    738e:	cmp	r3, #0
    7390:	bne.n	747e <MTPD::GetObjectInfo(unsigned long)+0x222>
    7392:	add	r1, sp, #12
    7394:	movs	r2, #2
    7396:	mov	r0, r4
    7398:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    739c:	ldrb	r3, [r4, #8]
    739e:	str	r6, [sp, #56]	; 0x38
    73a0:	cmp	r3, #0
    73a2:	bne.n	7482 <MTPD::GetObjectInfo(unsigned long)+0x226>
    73a4:	add	r1, sp, #56	; 0x38
    73a6:	movs	r2, #4
    73a8:	mov	r0, r4
    73aa:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    73ae:	ldrb	r3, [r4, #8]
    73b0:	str	r6, [sp, #52]	; 0x34
    73b2:	cmp	r3, #0
    73b4:	bne.n	7486 <MTPD::GetObjectInfo(unsigned long)+0x22a>
    73b6:	add	r1, sp, #52	; 0x34
    73b8:	movs	r2, #4
    73ba:	mov	r0, r4
    73bc:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    73c0:	ldrb	r3, [r4, #8]
    73c2:	str	r6, [sp, #48]	; 0x30
    73c4:	cmp	r3, #0
    73c6:	bne.n	748a <MTPD::GetObjectInfo(unsigned long)+0x22e>
    73c8:	add	r1, sp, #48	; 0x30
    73ca:	movs	r2, #4
    73cc:	mov	r0, r4
    73ce:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    73d2:	ldrb	r3, [r4, #8]
    73d4:	str	r6, [sp, #44]	; 0x2c
    73d6:	cmp	r3, #0
    73d8:	bne.n	748e <MTPD::GetObjectInfo(unsigned long)+0x232>
    73da:	add	r1, sp, #44	; 0x2c
    73dc:	movs	r2, #4
    73de:	mov	r0, r4
    73e0:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    73e4:	ldrb	r3, [r4, #8]
    73e6:	str	r6, [sp, #40]	; 0x28
    73e8:	cmp	r3, #0
    73ea:	bne.n	7492 <MTPD::GetObjectInfo(unsigned long)+0x236>
    73ec:	add	r1, sp, #40	; 0x28
    73ee:	movs	r2, #4
    73f0:	mov	r0, r4
    73f2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    73f6:	ldrb	r3, [r4, #8]
    73f8:	str	r6, [sp, #36]	; 0x24
    73fa:	cmp	r3, #0
    73fc:	bne.n	7496 <MTPD::GetObjectInfo(unsigned long)+0x23a>
    73fe:	movs	r2, #4
    7400:	add	r1, sp, #36	; 0x24
    7402:	mov	r0, r4
    7404:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7408:	ldrb	r3, [r4, #8]
    740a:	ldr	r2, [r5, #0]
    740c:	str	r2, [sp, #32]
    740e:	cmp	r3, #0
    7410:	bne.n	749a <MTPD::GetObjectInfo(unsigned long)+0x23e>
    7412:	add	r1, sp, #32
    7414:	movs	r2, #4
    7416:	mov	r0, r4
    7418:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    741c:	ldr	r3, [sp, #20]
    741e:	ldrb	r6, [r4, #8]
    7420:	sub.w	r3, r3, #4294967295
    7424:	clz	r3, r3
    7428:	lsrs	r3, r3, #5
    742a:	strh.w	r3, [sp, #18]
    742e:	cmp	r6, #0
    7430:	bne.n	749e <MTPD::GetObjectInfo(unsigned long)+0x242>
    7432:	add.w	r1, sp, #18
    7436:	movs	r2, #2
    7438:	mov	r0, r4
    743a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    743e:	ldrb	r5, [r4, #8]
    7440:	str	r6, [sp, #68]	; 0x44
    7442:	cbnz	r5, 746e <MTPD::GetObjectInfo(unsigned long)+0x212>
    7444:	add	r1, sp, #68	; 0x44
    7446:	movs	r2, #4
    7448:	mov	r0, r4
    744a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    744e:	ldrb	r3, [r4, #8]
    7450:	str	r5, [sp, #64]	; 0x40
    7452:	cbnz	r3, 746a <MTPD::GetObjectInfo(unsigned long)+0x20e>
    7454:	add	r1, sp, #64	; 0x40
    7456:	movs	r2, #4
    7458:	mov	r0, r4
    745a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    745e:	b.n	730c <MTPD::GetObjectInfo(unsigned long)+0xb0>
    7460:	movw	r2, #12289	; 0x3001
    7464:	strh.w	r2, [sp, #16]
    7468:	b.n	7290 <MTPD::GetObjectInfo(unsigned long)+0x34>
    746a:	ldr	r3, [r4, #12]
    746c:	b.n	7308 <MTPD::GetObjectInfo(unsigned long)+0xac>
    746e:	ldr	r3, [r4, #12]
    7470:	b.n	7300 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    7472:	ldr	r3, [r4, #12]
    7474:	b.n	7290 <MTPD::GetObjectInfo(unsigned long)+0x34>
    7476:	ldr	r3, [r4, #12]
    7478:	b.n	729a <MTPD::GetObjectInfo(unsigned long)+0x3e>
    747a:	ldr	r3, [r4, #12]
    747c:	b.n	72a2 <MTPD::GetObjectInfo(unsigned long)+0x46>
    747e:	ldr	r3, [r4, #12]
    7480:	b.n	72ac <MTPD::GetObjectInfo(unsigned long)+0x50>
    7482:	ldr	r3, [r4, #12]
    7484:	b.n	72b4 <MTPD::GetObjectInfo(unsigned long)+0x58>
    7486:	ldr	r3, [r4, #12]
    7488:	b.n	72bc <MTPD::GetObjectInfo(unsigned long)+0x60>
    748a:	ldr	r3, [r4, #12]
    748c:	b.n	72c4 <MTPD::GetObjectInfo(unsigned long)+0x68>
    748e:	ldr	r3, [r4, #12]
    7490:	b.n	72cc <MTPD::GetObjectInfo(unsigned long)+0x70>
    7492:	ldr	r3, [r4, #12]
    7494:	b.n	72d4 <MTPD::GetObjectInfo(unsigned long)+0x78>
    7496:	ldr	r3, [r4, #12]
    7498:	b.n	72dc <MTPD::GetObjectInfo(unsigned long)+0x80>
    749a:	ldr	r3, [r4, #12]
    749c:	b.n	72e4 <MTPD::GetObjectInfo(unsigned long)+0x88>
    749e:	ldr	r3, [r4, #12]
    74a0:	b.n	72f8 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    74a2:	nop
    74a4:	.word	0x0000ff30

000074a8 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    74a8:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    74aa:	ldr	r7, [pc, #96]	; (750c <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    74ac:	ldrb	r2, [r0, #8]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    74ae:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    74b0:	sub	sp, #12
    74b2:	mov	r5, r0
    74b4:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    74b6:	cbz	r2, 74fe <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    74b8:	ldr	r2, [r0, #12]
    74ba:	adds	r2, #4
    74bc:	str	r2, [r0, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    74be:	cbz	r3, 74fa <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    74c0:	ldr	r6, [pc, #76]	; (7510 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    74c2:	movw	r2, #56321	; 0xdc01
    74c6:	movs	r4, #0
    74c8:	b.n	74dc <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    74ca:	ldr	r3, [r5, #12]
    74cc:	adds	r3, #2
    74ce:	str	r3, [r5, #12]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    74d0:	ldr	r3, [r7, #0]
    74d2:	adds	r4, #1
    74d4:	cmp	r3, r4
    74d6:	bls.n	74fa <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    74d8:	ldrh.w	r2, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    74dc:	ldrb	r3, [r5, #8]
    74de:	strh.w	r2, [sp, #2]
    74e2:	cmp	r3, #0
    74e4:	bne.n	74ca <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    74e6:	movs	r2, #2
    74e8:	add.w	r1, sp, r2
    74ec:	mov	r0, r5
    74ee:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    74f2:	ldr	r3, [r7, #0]
    74f4:	adds	r4, #1
    74f6:	cmp	r3, r4
    74f8:	bhi.n	74d8 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    74fa:	add	sp, #12
    74fc:	pop	{r4, r5, r6, r7, pc}
    74fe:	movs	r2, #4
    7500:	add.w	r1, sp, r2
    7504:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7508:	ldr	r3, [r7, #0]
    750a:	b.n	74be <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    750c:	.word	0x1fff0978
    7510:	.word	0x0000ff70

00007514 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    7514:	push	{r4, r5, r6, r7, lr}
    7516:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    7518:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    751a:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    751c:	ldr	r3, [r0, #0]
    751e:	add	r4, sp, #20
    7520:	str	r4, [sp, #0]
    7522:	ldr	r6, [r3, #24]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    7524:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    7526:	add	r3, sp, #16
    7528:	add	r2, sp, #56	; 0x38
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    752a:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    752c:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    752e:	sub.w	r2, r4, #56320	; 0xdc00
    7532:	subs	r2, #1
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    7534:	ldr	r3, [sp, #16]
      switch(p2)
    7536:	cmp	r2, #67	; 0x43
    7538:	bhi.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    753a:	tbb	[pc, r2]
    753e:	.short	0x463d
    7540:	.word	0x2f2f6e61
    7544:	.word	0x2f313137
    7548:	.word	0x2f2f2f56
    754c:	.word	0x2f2f2f2f
    7550:	.word	0x2f2f2f2f
    7554:	.word	0x2f2f2f2f
    7558:	.word	0x2f2f2f2f
    755c:	.word	0x2f2f2f2f
    7560:	.word	0x2f2f2f2f
    7564:	.word	0x2f2f2f2f
    7568:	.word	0x2f2f2f2f
    756c:	.word	0x2f2f2f2f
    7570:	.word	0x2f2f2f2f
    7574:	.word	0x2f2f2f2f
    7578:	.word	0x2f2f2f2f
    757c:	.word	0x2f222f2f
    7580:	.short	0x372f
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7582:	ldrb	r3, [r5, #8]
    7584:	str	r7, [sp, #52]	; 0x34
    7586:	cmp	r3, #0
    7588:	beq.n	762a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
      write_length_ += len;
    758a:	ldr	r3, [r5, #12]
    758c:	adds	r3, #4
    758e:	str	r3, [r5, #12]
    7590:	adds	r3, #4
    7592:	str	r3, [r5, #12]
    7594:	adds	r3, #4
    7596:	str	r3, [r5, #12]
    7598:	adds	r3, #4
    759a:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    759c:	add	sp, #188	; 0xbc
    759e:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    75a0:	mov	r0, r5
    75a2:	ldr	r1, [pc, #264]	; (76ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>)
    75a4:	bl	6e14 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    75a8:	add	sp, #188	; 0xbc
    75aa:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    75ac:	add	r1, sp, #56	; 0x38
    75ae:	mov	r0, r5
    75b0:	bl	6e14 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    75b4:	add	sp, #188	; 0xbc
    75b6:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    75b8:	ldrb	r3, [r5, #8]
    75ba:	str	r7, [sp, #24]
    75bc:	cmp	r3, #0
    75be:	beq.n	7678 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    75c0:	ldr	r3, [r5, #12]
    75c2:	adds	r3, #4
    75c4:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    75c6:	add	sp, #188	; 0xbc
    75c8:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    75ca:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    75cc:	ldrb	r2, [r5, #8]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    75ce:	movw	r3, #12289	; 0x3001
    75d2:	it	ne
    75d4:	movne.w	r3, #12288	; 0x3000
    75d8:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    75dc:	cmp	r2, #0
    75de:	beq.n	766c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
      write_length_ += len;
    75e0:	ldr	r3, [r5, #12]
    75e2:	adds	r3, #2
    75e4:	str	r3, [r5, #12]
          writestring(name);
          break;
        default:
          break;
      }
    }
    75e6:	add	sp, #188	; 0xbc
    75e8:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    75ea:	ldrb	r3, [r5, #8]
    75ec:	ldr	r2, [sp, #20]
    75ee:	str	r2, [sp, #36]	; 0x24
    75f0:	cmp	r3, #0
    75f2:	bne.n	75c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac>
    75f4:	mov	r0, r5
    75f6:	movs	r2, #4
    75f8:	add	r1, sp, #36	; 0x24
    75fa:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    75fe:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    7600:	ldrb	r3, [r5, #8]
    7602:	movs	r2, #0
    7604:	strh.w	r2, [sp, #14]
    7608:	cmp	r3, #0
    760a:	bne.n	75e0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    760c:	mov	r0, r5
    760e:	movs	r2, #2
    7610:	add.w	r1, sp, #14
    7614:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7618:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    761a:	ldrb	r4, [r5, #8]
    761c:	str	r3, [sp, #32]
    761e:	cmp	r4, #0
    7620:	beq.n	7684 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    7622:	ldr	r3, [r5, #12]
    7624:	adds	r3, #4
    7626:	str	r3, [r5, #12]
    7628:	b.n	7598 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    762a:	movs	r2, #4
    762c:	add	r1, sp, #52	; 0x34
    762e:	mov	r0, r5
    7630:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7634:	ldrb	r3, [r5, #8]
    7636:	ldr	r2, [sp, #20]
    7638:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    763a:	cmp	r3, #0
    763c:	bne.n	76a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x194>
    763e:	movs	r2, #4
    7640:	add	r1, sp, #48	; 0x30
    7642:	mov	r0, r5
    7644:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7648:	ldrb	r4, [r5, #8]
    764a:	movs	r3, #1
    764c:	str	r3, [sp, #44]	; 0x2c
    764e:	cbnz	r4, 76a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x190>
    7650:	movs	r2, #4
    7652:	add	r1, sp, #44	; 0x2c
    7654:	mov	r0, r5
    7656:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    765a:	ldrb	r3, [r5, #8]
    765c:	str	r4, [sp, #40]	; 0x28
    765e:	cbnz	r3, 76a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    7660:	mov	r0, r5
    7662:	movs	r2, #4
    7664:	add	r1, sp, #40	; 0x28
    7666:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    766a:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    766c:	mov	r0, r5
    766e:	movs	r2, #2
    7670:	add	r1, sp, #12
    7672:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7676:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    7678:	mov	r0, r5
    767a:	movs	r2, #4
    767c:	add	r1, sp, #24
    767e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7682:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    7684:	movs	r2, #4
    7686:	add	r1, sp, #32
    7688:	mov	r0, r5
    768a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    768e:	ldrb	r3, [r5, #8]
    7690:	str	r4, [sp, #28]
    7692:	cbnz	r3, 76a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    7694:	mov	r0, r5
    7696:	movs	r2, #4
    7698:	add	r1, sp, #28
    769a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    769e:	b.n	759c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    76a0:	ldr	r3, [r5, #12]
    76a2:	b.n	7598 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    76a4:	ldr	r3, [r5, #12]
    76a6:	b.n	7594 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
    76a8:	ldr	r3, [r5, #12]
    76aa:	b.n	7590 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c>
    76ac:	.word	0x0000ff30

000076b0 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    76b0:	push	{r4, r5, lr}
    76b2:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    76b4:	ldr	r0, [r0, #0]
    76b6:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    76b8:	sub	sp, #36	; 0x24
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    76ba:	ldr	r3, [r3, #0]
    76bc:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    76be:	ldrb	r3, [r4, #8]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    76c0:	cmp	r0, #0
    76c2:	ite	eq
    76c4:	moveq	r2, #4
    76c6:	movne	r2, #1
    76c8:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    76cc:	cmp	r3, #0
    76ce:	beq.n	774c <MTPD::GetStorageInfo(unsigned long)+0x9c>
      write_length_ += len;
    76d0:	ldr	r3, [r4, #12]
    76d2:	adds	r3, #2
    76d4:	str	r3, [r4, #12]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    76d6:	ldr	r0, [r4, #0]
    76d8:	ldr	r3, [r0, #0]
    76da:	ldr	r3, [r3, #4]
    76dc:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    76de:	ldrb	r5, [r4, #8]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    76e0:	cmp	r0, #0
    76e2:	ite	eq
    76e4:	moveq	r3, #1
    76e6:	movne	r3, #2
    76e8:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    76ec:	cmp	r5, #0
    76ee:	beq.n	7786 <MTPD::GetStorageInfo(unsigned long)+0xd6>
      write_length_ += len;
    76f0:	ldr	r3, [r4, #12]
    76f2:	movs	r2, #0
    76f4:	adds	r3, #2
    76f6:	str	r3, [r4, #12]
    76f8:	strh.w	r2, [sp, #8]
    76fc:	adds	r3, #2
    76fe:	str	r3, [r4, #12]

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    write64(storage_->size());  // max capacity
    7700:	ldr	r0, [r4, #0]
    7702:	ldr	r3, [r0, #0]
    7704:	ldr	r3, [r3, #8]
    7706:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7708:	ldrb	r3, [r4, #8]
    770a:	strd	r0, r1, [sp, #24]
    770e:	cmp	r3, #0
    7710:	beq.n	777a <MTPD::GetStorageInfo(unsigned long)+0xca>
      write_length_ += len;
    7712:	ldr	r3, [r4, #12]
    7714:	adds	r3, #8
    7716:	str	r3, [r4, #12]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    write64(storage_->size());  // max capacity
    write64(storage_->free());  // free space (100M)
    7718:	ldr	r0, [r4, #0]
    771a:	ldr	r3, [r0, #0]
    771c:	ldr	r3, [r3, #12]
    771e:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7720:	ldrb	r3, [r4, #8]
    7722:	strd	r0, r1, [sp, #16]
    7726:	cbz	r3, 775a <MTPD::GetStorageInfo(unsigned long)+0xaa>
      write_length_ += len;
    7728:	ldr	r3, [r4, #12]
    772a:	mov.w	r2, #4294967295
    772e:	adds	r3, #8
    7730:	str	r3, [r4, #12]
    7732:	str	r2, [sp, #12]
    7734:	adds	r3, #4
    7736:	str	r3, [r4, #12]
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    write64(storage_->size());  // max capacity
    write64(storage_->free());  // free space (100M)
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring("SD Card");  // storage descriptor
    7738:	mov	r0, r4
    773a:	ldr	r1, [pc, #116]	; (77b0 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    773c:	bl	6e14 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    7740:	mov	r0, r4
    7742:	ldr	r1, [pc, #112]	; (77b4 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    7744:	bl	6e14 <MTPD::writestring(char const*)>
  }
    7748:	add	sp, #36	; 0x24
    774a:	pop	{r4, r5, pc}
    774c:	movs	r2, #2
    774e:	add.w	r1, sp, #6
    7752:	mov	r0, r4
    7754:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7758:	b.n	76d6 <MTPD::GetStorageInfo(unsigned long)+0x26>
    775a:	movs	r2, #8
    775c:	add	r1, sp, #16
    775e:	mov	r0, r4
    7760:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7764:	ldrb	r3, [r4, #8]
    7766:	mov.w	r2, #4294967295
    776a:	str	r2, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    776c:	cbnz	r3, 77a6 <MTPD::GetStorageInfo(unsigned long)+0xf6>
    776e:	movs	r2, #4
    7770:	add	r1, sp, #12
    7772:	mov	r0, r4
    7774:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7778:	b.n	7738 <MTPD::GetStorageInfo(unsigned long)+0x88>
    777a:	movs	r2, #8
    777c:	add	r1, sp, #24
    777e:	mov	r0, r4
    7780:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7784:	b.n	7718 <MTPD::GetStorageInfo(unsigned long)+0x68>
    7786:	movs	r2, #2
    7788:	add.w	r1, sp, #10
    778c:	mov	r0, r4
    778e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7792:	ldrb	r3, [r4, #8]
    7794:	strh.w	r5, [sp, #8]
    7798:	cbnz	r3, 77aa <MTPD::GetStorageInfo(unsigned long)+0xfa>
    779a:	movs	r2, #2
    779c:	add	r1, sp, #8
    779e:	mov	r0, r4
    77a0:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    77a4:	b.n	7700 <MTPD::GetStorageInfo(unsigned long)+0x50>
    77a6:	ldr	r3, [r4, #12]
    77a8:	b.n	7734 <MTPD::GetStorageInfo(unsigned long)+0x84>
    77aa:	ldr	r3, [r4, #12]
    77ac:	b.n	76fc <MTPD::GetStorageInfo(unsigned long)+0x4c>
    77ae:	nop
    77b0:	.word	0x0000ffb0
    77b4:	.word	0x0000ff30

000077b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    77b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    77bc:	sub.w	r1, r1, #56320	; 0xdc00
    77c0:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    77c2:	sub	sp, #148	; 0x94
    77c4:	mov	r4, r0
      switch(p1)
    77c6:	cmp	r1, #67	; 0x43
    77c8:	bhi.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    77ca:	tbh	[pc, r1, lsl #1]
    77ce:	.short	0x005c
    77d0:	.word	0x0080006e
    77d4:	.word	0x005900c6
    77d8:	.word	0x00d80059
    77dc:	.word	0x01690121
    77e0:	.word	0x01b10059
    77e4:	.word	0x00590059
    77e8:	.word	0x00590059
    77ec:	.word	0x00590059
    77f0:	.word	0x00590059
    77f4:	.word	0x00590059
    77f8:	.word	0x00590059
    77fc:	.word	0x00590059
    7800:	.word	0x00590059
    7804:	.word	0x00590059
    7808:	.word	0x00590059
    780c:	.word	0x00590059
    7810:	.word	0x00590059
    7814:	.word	0x00590059
    7818:	.word	0x00590059
    781c:	.word	0x00590059
    7820:	.word	0x00590059
    7824:	.word	0x00590059
    7828:	.word	0x00590059
    782c:	.word	0x00590059
    7830:	.word	0x00590059
    7834:	.word	0x00590059
    7838:	.word	0x00590059
    783c:	.word	0x00590059
    7840:	.word	0x00590059
    7844:	.word	0x00590059
    7848:	.word	0x00590059
    784c:	.word	0x01f70059
    7850:	.word	0x00590059
    7854:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7856:	ldrb	r3, [r0, #8]
    7858:	movw	r2, #56388	; 0xdc44
    785c:	strh.w	r2, [sp, #70]	; 0x46
    7860:	cmp	r3, #0
    7862:	beq.w	7ce0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    7866:	ldr	r3, [r4, #12]
    7868:	adds	r3, #2
    786a:	str	r3, [r4, #12]
    786c:	adds	r3, #2
    786e:	str	r3, [r4, #12]
    7870:	adds	r3, #1
    7872:	str	r3, [r4, #12]
    7874:	adds	r3, #1
    7876:	str	r3, [r4, #12]
    7878:	adds	r3, #4
    787a:	str	r3, [r4, #12]
    787c:	adds	r3, #1
    787e:	str	r3, [r4, #12]
          write8(0);
          break;
        default:
          break;
      }
    }
    7880:	add	sp, #148	; 0x94
    7882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7886:	ldrb	r3, [r0, #8]
    7888:	movw	r2, #56321	; 0xdc01
    788c:	strh.w	r2, [sp, #30]
    7890:	cmp	r3, #0
    7892:	beq.w	7df4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    7896:	ldr	r3, [r4, #12]
    7898:	adds	r3, #2
    789a:	str	r3, [r4, #12]
    789c:	adds	r3, #2
    789e:	str	r3, [r4, #12]
    78a0:	adds	r3, #1
    78a2:	str	r3, [r4, #12]
    78a4:	adds	r3, #4
    78a6:	str	r3, [r4, #12]
    78a8:	b.n	7878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    78aa:	ldrb	r3, [r0, #8]
    78ac:	movw	r2, #56322	; 0xdc02
    78b0:	strh.w	r2, [sp, #36]	; 0x24
    78b4:	cmp	r3, #0
    78b6:	beq.w	7c62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    78ba:	ldr	r3, [r4, #12]
    78bc:	adds	r3, #2
    78be:	str	r3, [r4, #12]
    78c0:	adds	r3, #2
    78c2:	str	r3, [r4, #12]
    78c4:	adds	r3, #1
    78c6:	str	r3, [r4, #12]
    78c8:	adds	r3, #2
    78ca:	str	r3, [r4, #12]
    78cc:	b.n	7878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    78ce:	ldrb	r3, [r0, #8]
    78d0:	movw	r2, #56323	; 0xdc03
    78d4:	strh.w	r2, [sp, #42]	; 0x2a
    78d8:	cmp	r3, #0
    78da:	bne.n	78ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    78dc:	movs	r2, #2
    78de:	add.w	r1, sp, #42	; 0x2a
    78e2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    78e6:	ldrb	r7, [r4, #8]
    78e8:	movs	r6, #4
    78ea:	strh.w	r6, [sp, #40]	; 0x28
    78ee:	cmp	r7, #0
    78f0:	bne.w	7e8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    78f4:	movs	r2, #2
    78f6:	add	r1, sp, #40	; 0x28
    78f8:	mov	r0, r4
    78fa:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    78fe:	ldrb	r5, [r4, #8]
    7900:	strb.w	r7, [sp, #9]
    7904:	cmp	r5, #0
    7906:	bne.w	7e86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    790a:	movs	r2, #1
    790c:	add.w	r1, sp, #9
    7910:	mov	r0, r4
    7912:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7916:	ldrb	r7, [r4, #8]
    7918:	strh.w	r5, [sp, #38]	; 0x26
    791c:	cmp	r7, #0
    791e:	bne.w	7e82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    7922:	movs	r2, #2
    7924:	add.w	r1, sp, #38	; 0x26
    7928:	mov	r0, r4
    792a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    792e:	ldrb	r5, [r4, #8]
    7930:	str	r7, [sp, #84]	; 0x54
    7932:	cmp	r5, #0
    7934:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7938:	mov	r2, r6
    793a:	add	r1, sp, #84	; 0x54
    793c:	mov	r0, r4
    793e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7942:	ldrb	r3, [r4, #8]
    7944:	strb.w	r5, [sp, #8]
    7948:	cmp	r3, #0
    794a:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    794e:	mov	r0, r4
    7950:	movs	r2, #1
    7952:	add	r1, sp, #8
    7954:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7958:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    795a:	ldrb	r3, [r0, #8]
    795c:	movw	r2, #56324	; 0xdc04
    7960:	strh.w	r2, [sp, #46]	; 0x2e
    7964:	cmp	r3, #0
    7966:	beq.w	7be0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    796a:	ldr	r3, [r0, #12]
    796c:	adds	r3, #2
    796e:	str	r3, [r0, #12]
    7970:	adds	r3, #2
    7972:	str	r3, [r4, #12]
    7974:	adds	r3, #1
    7976:	str	r3, [r4, #12]
    7978:	adds	r3, #8
    797a:	str	r3, [r4, #12]
    797c:	b.n	7878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    797e:	ldrb	r3, [r0, #8]
    7980:	movw	r2, #56327	; 0xdc07
    7984:	strh.w	r2, [sp, #50]	; 0x32
    7988:	cmp	r3, #0
    798a:	bne.w	7866 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    798e:	movs	r2, #2
    7990:	add.w	r1, sp, #50	; 0x32
    7994:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7998:	ldrb	r3, [r4, #8]
    799a:	movw	r2, #65535	; 0xffff
    799e:	strh.w	r2, [sp, #48]	; 0x30
    79a2:	cmp	r3, #0
    79a4:	bne.w	7e72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    79a8:	movs	r2, #2
    79aa:	add	r1, sp, #48	; 0x30
    79ac:	mov	r0, r4
    79ae:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    79b2:	ldrb	r6, [r4, #8]
    79b4:	movs	r5, #1
    79b6:	strb.w	r5, [sp, #14]
    79ba:	cmp	r6, #0
    79bc:	bne.w	7e6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    79c0:	mov	r2, r5
    79c2:	add.w	r1, sp, #14
    79c6:	mov	r0, r4
    79c8:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    79cc:	ldrb	r7, [r4, #8]
    79ce:	strb.w	r6, [sp, #13]
    79d2:	cmp	r7, #0
    79d4:	bne.w	7e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    79d8:	mov	r2, r5
    79da:	add.w	r1, sp, #13
    79de:	mov	r0, r4
    79e0:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    79e4:	ldrb	r6, [r4, #8]
    79e6:	str	r7, [sp, #92]	; 0x5c
    79e8:	cmp	r6, #0
    79ea:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    79ee:	movs	r2, #4
    79f0:	add	r1, sp, #92	; 0x5c
    79f2:	mov	r0, r4
    79f4:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    79f8:	ldrb	r3, [r4, #8]
    79fa:	strb.w	r6, [sp, #12]
    79fe:	cmp	r3, #0
    7a00:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7a04:	mov	r2, r5
    7a06:	mov	r0, r4
    7a08:	add	r1, sp, #12
    7a0a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a0e:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7a10:	ldrb	r3, [r0, #8]
    7a12:	movw	r2, #56328	; 0xdc08
    7a16:	strh.w	r2, [sp, #54]	; 0x36
    7a1a:	cmp	r3, #0
    7a1c:	bne.w	7866 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    7a20:	movs	r2, #2
    7a22:	add.w	r1, sp, #54	; 0x36
    7a26:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a2a:	ldrb	r6, [r4, #8]
    7a2c:	movw	r3, #65535	; 0xffff
    7a30:	strh.w	r3, [sp, #52]	; 0x34
    7a34:	cmp	r6, #0
    7a36:	bne.w	7e72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    7a3a:	movs	r2, #2
    7a3c:	add	r1, sp, #52	; 0x34
    7a3e:	mov	r0, r4
    7a40:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a44:	ldrb	r5, [r4, #8]
    7a46:	strb.w	r6, [sp, #17]
    7a4a:	cmp	r5, #0
    7a4c:	bne.w	7e6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    7a50:	movs	r2, #1
    7a52:	add.w	r1, sp, #17
    7a56:	mov	r0, r4
    7a58:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a5c:	ldrb	r6, [r4, #8]
    7a5e:	strb.w	r5, [sp, #16]
    7a62:	cmp	r6, #0
    7a64:	bne.w	7e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    7a68:	movs	r2, #1
    7a6a:	add	r1, sp, #16
    7a6c:	mov	r0, r4
    7a6e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a72:	ldrb	r5, [r4, #8]
    7a74:	str	r6, [sp, #96]	; 0x60
    7a76:	cmp	r5, #0
    7a78:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7a7c:	movs	r2, #4
    7a7e:	add	r1, sp, #96	; 0x60
    7a80:	mov	r0, r4
    7a82:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a86:	ldrb	r3, [r4, #8]
    7a88:	strb.w	r5, [sp, #15]
    7a8c:	cmp	r3, #0
    7a8e:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7a92:	mov	r0, r4
    7a94:	movs	r2, #1
    7a96:	add.w	r1, sp, #15
    7a9a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7a9e:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7aa0:	ldrb	r3, [r0, #8]
    7aa2:	movw	r2, #56329	; 0xdc09
    7aa6:	strh.w	r2, [sp, #58]	; 0x3a
    7aaa:	cmp	r3, #0
    7aac:	bne.w	7866 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    7ab0:	movs	r2, #2
    7ab2:	add.w	r1, sp, #58	; 0x3a
    7ab6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7aba:	ldrb	r6, [r4, #8]
    7abc:	movw	r3, #65535	; 0xffff
    7ac0:	strh.w	r3, [sp, #56]	; 0x38
    7ac4:	cmp	r6, #0
    7ac6:	bne.w	7e72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    7aca:	movs	r2, #2
    7acc:	add	r1, sp, #56	; 0x38
    7ace:	mov	r0, r4
    7ad0:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7ad4:	ldrb	r5, [r4, #8]
    7ad6:	strb.w	r6, [sp, #20]
    7ada:	cmp	r5, #0
    7adc:	bne.w	7e6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    7ae0:	movs	r2, #1
    7ae2:	add	r1, sp, #20
    7ae4:	mov	r0, r4
    7ae6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7aea:	ldrb	r6, [r4, #8]
    7aec:	strb.w	r5, [sp, #19]
    7af0:	cmp	r6, #0
    7af2:	bne.w	7e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    7af6:	movs	r2, #1
    7af8:	add.w	r1, sp, #19
    7afc:	mov	r0, r4
    7afe:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b02:	ldrb	r5, [r4, #8]
    7b04:	str	r6, [sp, #100]	; 0x64
    7b06:	cmp	r5, #0
    7b08:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7b0c:	movs	r2, #4
    7b0e:	add	r1, sp, #100	; 0x64
    7b10:	mov	r0, r4
    7b12:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b16:	ldrb	r3, [r4, #8]
    7b18:	strb.w	r5, [sp, #18]
    7b1c:	cmp	r3, #0
    7b1e:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7b22:	mov	r0, r4
    7b24:	movs	r2, #1
    7b26:	add.w	r1, sp, #18
    7b2a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b2e:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7b30:	ldrb	r3, [r0, #8]
    7b32:	movw	r2, #56331	; 0xdc0b
    7b36:	strh.w	r2, [sp, #62]	; 0x3e
    7b3a:	cmp	r3, #0
    7b3c:	bne.w	7896 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    7b40:	movs	r2, #2
    7b42:	add.w	r1, sp, #62	; 0x3e
    7b46:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b4a:	ldrb	r6, [r4, #8]
    7b4c:	movs	r3, #6
    7b4e:	strh.w	r3, [sp, #60]	; 0x3c
    7b52:	cmp	r6, #0
    7b54:	bne.w	7e6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    7b58:	movs	r2, #2
    7b5a:	add	r1, sp, #60	; 0x3c
    7b5c:	mov	r0, r4
    7b5e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b62:	ldrb	r5, [r4, #8]
    7b64:	strb.w	r6, [sp, #22]
    7b68:	cmp	r5, #0
    7b6a:	bne.w	7e66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    7b6e:	movs	r2, #1
    7b70:	add.w	r1, sp, #22
    7b74:	mov	r0, r4
    7b76:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b7a:	ldrb	r6, [r4, #8]
    7b7c:	str	r5, [sp, #108]	; 0x6c
    7b7e:	cmp	r6, #0
    7b80:	bne.w	7e62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    7b84:	movs	r2, #4
    7b86:	add	r1, sp, #108	; 0x6c
    7b88:	mov	r0, r4
    7b8a:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7b8e:	ldrb	r5, [r4, #8]
    7b90:	str	r6, [sp, #104]	; 0x68
    7b92:	cmp	r5, #0
    7b94:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7b98:	movs	r2, #4
    7b9a:	add	r1, sp, #104	; 0x68
    7b9c:	mov	r0, r4
    7b9e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7ba2:	ldrb	r3, [r4, #8]
    7ba4:	strb.w	r5, [sp, #21]
    7ba8:	cmp	r3, #0
    7baa:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7bae:	mov	r0, r4
    7bb0:	movs	r2, #1
    7bb2:	add.w	r1, sp, #21
    7bb6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7bba:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7bbc:	ldrb	r3, [r0, #8]
    7bbe:	movw	r2, #56385	; 0xdc41
    7bc2:	strh.w	r2, [sp, #66]	; 0x42
    7bc6:	cmp	r3, #0
    7bc8:	beq.w	7d62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    7bcc:	ldr	r3, [r0, #12]
    7bce:	adds	r3, #2
    7bd0:	str	r3, [r0, #12]
    7bd2:	adds	r3, #2
    7bd4:	str	r3, [r4, #12]
    7bd6:	adds	r3, #1
    7bd8:	str	r3, [r4, #12]
    7bda:	adds	r3, #8
    7bdc:	str	r3, [r4, #12]
    7bde:	b.n	7978 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    7be0:	movs	r2, #2
    7be2:	add.w	r1, sp, #46	; 0x2e
    7be6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7bea:	ldrb	r6, [r4, #8]
    7bec:	movs	r5, #8
    7bee:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    7bf2:	cmp	r6, #0
    7bf4:	bne.w	7e7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    7bf8:	movs	r2, #2
    7bfa:	add	r1, sp, #44	; 0x2c
    7bfc:	mov	r0, r4
    7bfe:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c02:	ldrb	r3, [r4, #8]
    7c04:	strb.w	r6, [sp, #11]
    7c08:	cmp	r3, #0
    7c0a:	bne.w	7e76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    7c0e:	movs	r2, #1
    7c10:	add.w	r1, sp, #11
    7c14:	mov	r0, r4
    7c16:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c1a:	ldrb	r6, [r4, #8]
    7c1c:	movs	r2, #0
    7c1e:	movs	r3, #0
    7c20:	strd	r2, r3, [sp, #120]	; 0x78
    7c24:	cmp	r6, #0
    7c26:	bne.w	7e8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    7c2a:	mov	r2, r5
    7c2c:	add	r1, sp, #120	; 0x78
    7c2e:	mov	r0, r4
    7c30:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c34:	ldrb	r5, [r4, #8]
    7c36:	str	r6, [sp, #88]	; 0x58
    7c38:	cmp	r5, #0
    7c3a:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7c3e:	movs	r2, #4
    7c40:	add	r1, sp, #88	; 0x58
    7c42:	mov	r0, r4
    7c44:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c48:	ldrb	r3, [r4, #8]
    7c4a:	strb.w	r5, [sp, #10]
    7c4e:	cmp	r3, #0
    7c50:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7c54:	mov	r0, r4
    7c56:	movs	r2, #1
    7c58:	add.w	r1, sp, #10
    7c5c:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c60:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7c62:	movs	r2, #2
    7c64:	add	r1, sp, #36	; 0x24
    7c66:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c6a:	ldrb	r7, [r4, #8]
    7c6c:	movs	r6, #4
    7c6e:	strh.w	r6, [sp, #34]	; 0x22
    7c72:	cmp	r7, #0
    7c74:	bne.w	7e8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    7c78:	movs	r2, #2
    7c7a:	add.w	r1, sp, #34	; 0x22
    7c7e:	mov	r0, r4
    7c80:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c84:	ldrb	r5, [r4, #8]
    7c86:	strb.w	r7, [sp, #7]
    7c8a:	cmp	r5, #0
    7c8c:	bne.w	7e86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    7c90:	movs	r2, #1
    7c92:	add.w	r1, sp, #7
    7c96:	mov	r0, r4
    7c98:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7c9c:	ldrb	r7, [r4, #8]
    7c9e:	strh.w	r5, [sp, #32]
    7ca2:	cmp	r7, #0
    7ca4:	bne.w	7e82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    7ca8:	movs	r2, #2
    7caa:	add	r1, sp, #32
    7cac:	mov	r0, r4
    7cae:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7cb2:	ldrb	r5, [r4, #8]
    7cb4:	str	r7, [sp, #80]	; 0x50
    7cb6:	cmp	r5, #0
    7cb8:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7cbc:	mov	r2, r6
    7cbe:	add	r1, sp, #80	; 0x50
    7cc0:	mov	r0, r4
    7cc2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7cc6:	ldrb	r3, [r4, #8]
    7cc8:	strb.w	r5, [sp, #6]
    7ccc:	cmp	r3, #0
    7cce:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7cd2:	mov	r0, r4
    7cd4:	movs	r2, #1
    7cd6:	add.w	r1, sp, #6
    7cda:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7cde:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7ce0:	movs	r2, #2
    7ce2:	add.w	r1, sp, #70	; 0x46
    7ce6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7cea:	ldrb	r6, [r4, #8]
    7cec:	movw	r3, #65535	; 0xffff
    7cf0:	strh.w	r3, [sp, #68]	; 0x44
    7cf4:	cmp	r6, #0
    7cf6:	bne.w	7e72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    7cfa:	movs	r2, #2
    7cfc:	add	r1, sp, #68	; 0x44
    7cfe:	mov	r0, r4
    7d00:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d04:	ldrb	r5, [r4, #8]
    7d06:	strb.w	r6, [sp, #27]
    7d0a:	cmp	r5, #0
    7d0c:	bne.w	7e6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    7d10:	movs	r2, #1
    7d12:	add.w	r1, sp, #27
    7d16:	mov	r0, r4
    7d18:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d1c:	ldrb	r6, [r4, #8]
    7d1e:	strb.w	r5, [sp, #26]
    7d22:	cmp	r6, #0
    7d24:	bne.w	7e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    7d28:	movs	r2, #1
    7d2a:	add.w	r1, sp, #26
    7d2e:	mov	r0, r4
    7d30:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d34:	ldrb	r5, [r4, #8]
    7d36:	str	r6, [sp, #116]	; 0x74
    7d38:	cmp	r5, #0
    7d3a:	bne.w	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7d3e:	movs	r2, #4
    7d40:	add	r1, sp, #116	; 0x74
    7d42:	mov	r0, r4
    7d44:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d48:	ldrb	r3, [r4, #8]
    7d4a:	strb.w	r5, [sp, #25]
    7d4e:	cmp	r3, #0
    7d50:	bne.w	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7d54:	mov	r0, r4
    7d56:	movs	r2, #1
    7d58:	add.w	r1, sp, #25
    7d5c:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d60:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7d62:	movs	r2, #2
    7d64:	add.w	r1, sp, #66	; 0x42
    7d68:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d6c:	ldrb	r5, [r4, #8]
    7d6e:	movs	r3, #10
    7d70:	strh.w	r3, [sp, #64]	; 0x40
    7d74:	cmp	r5, #0
    7d76:	bne.w	7e9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    7d7a:	movs	r2, #2
    7d7c:	add	r1, sp, #64	; 0x40
    7d7e:	mov	r0, r4
    7d80:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d84:	ldrb	r3, [r4, #8]
    7d86:	strb.w	r5, [sp, #24]
    7d8a:	cmp	r3, #0
    7d8c:	bne.w	7e96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    7d90:	movs	r2, #1
    7d92:	add	r1, sp, #24
    7d94:	mov	r0, r4
    7d96:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7d9a:	ldrb	r3, [r4, #8]
    7d9c:	mov.w	r8, #0
    7da0:	mov.w	r9, #0
    7da4:	strd	r8, r9, [sp, #136]	; 0x88
    7da8:	cmp	r3, #0
    7daa:	bne.n	7e92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    7dac:	movs	r2, #8
    7dae:	add	r1, sp, #136	; 0x88
    7db0:	mov	r0, r4
    7db2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7db6:	ldrb	r6, [r4, #8]
    7db8:	strd	r8, r9, [sp, #128]	; 0x80
    7dbc:	cmp	r6, #0
    7dbe:	bne.n	7e8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    7dc0:	movs	r2, #8
    7dc2:	add	r1, sp, #128	; 0x80
    7dc4:	mov	r0, r4
    7dc6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7dca:	ldrb	r5, [r4, #8]
    7dcc:	str	r6, [sp, #112]	; 0x70
    7dce:	cmp	r5, #0
    7dd0:	bne.n	7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7dd2:	movs	r2, #4
    7dd4:	add	r1, sp, #112	; 0x70
    7dd6:	mov	r0, r4
    7dd8:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7ddc:	ldrb	r3, [r4, #8]
    7dde:	strb.w	r5, [sp, #23]
    7de2:	cmp	r3, #0
    7de4:	bne.n	7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7de6:	mov	r0, r4
    7de8:	movs	r2, #1
    7dea:	add.w	r1, sp, #23
    7dee:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7df2:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7df4:	movs	r2, #2
    7df6:	add.w	r1, sp, #30
    7dfa:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7dfe:	ldrb	r6, [r4, #8]
    7e00:	movs	r3, #6
    7e02:	strh.w	r3, [sp, #28]
    7e06:	cbnz	r6, 7e6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    7e08:	movs	r2, #2
    7e0a:	add	r1, sp, #28
    7e0c:	mov	r0, r4
    7e0e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7e12:	ldrb	r5, [r4, #8]
    7e14:	strb.w	r6, [sp, #5]
    7e18:	cbnz	r5, 7e66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    7e1a:	movs	r2, #1
    7e1c:	add.w	r1, sp, #5
    7e20:	mov	r0, r4
    7e22:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7e26:	ldrb	r6, [r4, #8]
    7e28:	str	r5, [sp, #76]	; 0x4c
    7e2a:	cbnz	r6, 7e62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    7e2c:	movs	r2, #4
    7e2e:	add	r1, sp, #76	; 0x4c
    7e30:	mov	r0, r4
    7e32:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7e36:	ldrb	r5, [r4, #8]
    7e38:	str	r6, [sp, #72]	; 0x48
    7e3a:	cbnz	r5, 7e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    7e3c:	movs	r2, #4
    7e3e:	add	r1, sp, #72	; 0x48
    7e40:	mov	r0, r4
    7e42:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7e46:	ldrb	r3, [r4, #8]
    7e48:	strb.w	r5, [sp, #4]
    7e4c:	cbnz	r3, 7e5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    7e4e:	mov	r0, r4
    7e50:	movs	r2, #1
    7e52:	add	r1, sp, #4
    7e54:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    7e58:	b.n	7880 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    7e5a:	ldr	r3, [r4, #12]
    7e5c:	b.n	787c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    7e5e:	ldr	r3, [r4, #12]
    7e60:	b.n	7878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    7e62:	ldr	r3, [r4, #12]
    7e64:	b.n	78a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    7e66:	ldr	r3, [r4, #12]
    7e68:	b.n	78a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    7e6a:	ldr	r3, [r4, #12]
    7e6c:	b.n	789c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    7e6e:	ldr	r3, [r4, #12]
    7e70:	b.n	7870 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    7e72:	ldr	r3, [r4, #12]
    7e74:	b.n	786c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    7e76:	ldr	r3, [r4, #12]
    7e78:	b.n	7974 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    7e7a:	ldr	r3, [r4, #12]
    7e7c:	b.n	7970 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    7e7e:	ldr	r3, [r4, #12]
    7e80:	b.n	7874 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    7e82:	ldr	r3, [r4, #12]
    7e84:	b.n	78c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    7e86:	ldr	r3, [r4, #12]
    7e88:	b.n	78c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    7e8a:	ldr	r3, [r4, #12]
    7e8c:	b.n	78c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    7e8e:	ldr	r3, [r4, #12]
    7e90:	b.n	7978 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    7e92:	ldr	r3, [r4, #12]
    7e94:	b.n	7bda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    7e96:	ldr	r3, [r4, #12]
    7e98:	b.n	7bd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    7e9a:	ldr	r3, [r4, #12]
    7e9c:	b.n	7bd2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    7e9e:	nop

00007ea0 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    7ea0:	push	{r4, lr}
    7ea2:	mov	r4, r0
    7ea4:	ldr	r3, [r4, #4]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    7ea6:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    7ea8:	cbnz	r3, 7eb2 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    7eaa:	bl	9670 <usb_rx>
    7eae:	str	r0, [r4, #4]
      if (!data_buffer_) mtp_yield();
    7eb0:	cbz	r0, 7eb4 <MTPD::receive_buffer()+0x14>
    7eb2:	pop	{r4, pc}
    7eb4:	bl	62d8 <mtp_yield()>
    7eb8:	b.n	7ea4 <MTPD::receive_buffer()+0x4>
    7eba:	nop

00007ebc <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    7ebc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ec0:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    7ec2:	ldr	r0, [r0, #0]
    7ec4:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    7ec6:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    7ec8:	ldr	r3, [r3, #28]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    7eca:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    7ecc:	blx	r3
    if (write_get_length_) {
    7ece:	ldrb	r5, [r6, #8]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    7ed0:	mov	r7, r0
    if (write_get_length_) {
    7ed2:	cbnz	r5, 7f2c <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    7ed4:	cbz	r0, 7f26 <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    7ed6:	mov	r9, r5
    7ed8:	b.n	7ede <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    7eda:	cmp	r7, r5
    7edc:	bls.n	7f26 <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    7ede:	mov	r0, r6
    7ee0:	bl	6d98 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    7ee4:	ldmia.w	r6, {r0, r3}
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    7ee8:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    7eec:	ldr	r1, [r0, #0]
    7eee:	subs	r4, r7, r5
    7ef0:	rsb	lr, r2, #64	; 0x40
    7ef4:	cmp	r4, lr
    7ef6:	it	cs
    7ef8:	movcs	r4, lr
    7efa:	str	r4, [sp, #0]
    7efc:	add	r3, r2
    7efe:	ldr.w	sl, [r1, #36]	; 0x24
    7f02:	mov	r2, r5
    7f04:	mov	r1, r8
    7f06:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    7f08:	ldr	r1, [r6, #4]
    7f0a:	ldrh	r3, [r1, #0]
    7f0c:	add	r3, r4
    7f0e:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    7f10:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    7f12:	add	r5, r4
        data_buffer_->len += to_copy;
    7f14:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    7f16:	bne.n	7eda <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    7f18:	movs	r0, #4
    7f1a:	bl	97e0 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    7f1e:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    7f20:	str.w	r9, [r6, #4]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    7f24:	bhi.n	7ede <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    7f26:	add	sp, #8
    7f28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    7f2c:	ldr	r3, [r6, #12]
    7f2e:	add	r7, r3
    7f30:	str	r7, [r6, #12]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    7f32:	add	sp, #8
    7f34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007f38 <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    7f38:	cbz	r2, 7fa4 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    7f3a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f3e:	mov	r6, r0
    7f40:	mov	r5, r1
    while (size) {
    7f42:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    7f44:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    7f46:	mov	r0, r6
    7f48:	bl	7ea0 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    7f4c:	ldr	r3, [r6, #4]
    7f4e:	ldrh.w	lr, [r3, #2]
    7f52:	ldrh.w	ip, [r3]
    7f56:	rsb	r4, lr, ip
    7f5a:	cmp	r4, r8
    7f5c:	it	cs
    7f5e:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    7f60:	add.w	r1, r3, #8
    7f64:	add	r1, lr
    7f66:	mov	r0, r5
    7f68:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    7f6a:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    7f6e:	cbz	r5, 7f80 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    7f70:	bl	8df4 <memcpy>
    7f74:	ldr	r3, [r6, #4]
    7f76:	ldrh.w	lr, [r3, #2]
    7f7a:	ldrh.w	ip, [r3]
        data += to_copy;
    7f7e:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    7f80:	add	r4, lr
    7f82:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    7f84:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    7f86:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    7f88:	beq.n	7f94 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    7f8a:	cmp.w	r8, #0
    7f8e:	bne.n	7f46 <MTPD::read(char*, unsigned long)+0xe>
    7f90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    7f94:	mov	r0, r3
    7f96:	bl	9624 <usb_free>
        data_buffer_ = NULL;
    7f9a:	str	r7, [r6, #4]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    7f9c:	cmp.w	r8, #0
    7fa0:	bne.n	7f46 <MTPD::read(char*, unsigned long)+0xe>
    7fa2:	b.n	7f90 <MTPD::read(char*, unsigned long)+0x58>
    7fa4:	bx	lr
    7fa6:	nop

00007fa8 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    7fa8:	push	{r4, r5, r6, lr}
    7faa:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    7fac:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    7fae:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    7fb0:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    7fb4:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    7fb6:	bl	7f38 <MTPD::read(char*, unsigned long)>
    7fba:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    7fbe:	cbz	r4, 7fe0 <MTPD::readstring(char*)+0x38>
    7fc0:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    7fc2:	cbz	r2, 7fdc <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7fc4:	movs	r2, #2
    7fc6:	add.w	r1, sp, #6
    7fca:	mov	r0, r6
    7fcc:	bl	7f38 <MTPD::read(char*, unsigned long)>
    7fd0:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    7fd4:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    7fd8:	cmp	r5, r4
    7fda:	bne.n	7fc4 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    7fdc:	add	sp, #8
    7fde:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    7fe0:	lsls	r2, r2, #1
    7fe2:	mov	r1, r4
    7fe4:	mov	r0, r6
    7fe6:	bl	7f38 <MTPD::read(char*, unsigned long)>
    7fea:	b.n	7fdc <MTPD::readstring(char*)+0x34>

00007fec <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    7fec:	push	{r4, r5, lr}
    7fee:	sub	sp, #132	; 0x84
    7ff0:	mov	r4, r0
    7ff2:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7ff4:	movs	r2, #12
    7ff6:	mov	r1, sp
    7ff8:	bl	7f38 <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    7ffc:	mov	r1, sp
    7ffe:	mov	r0, r4
    8000:	bl	7fa8 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    8004:	ldr	r0, [r4, #0]
    8006:	ldr	r3, [r0, #0]
    8008:	mov	r2, sp
    800a:	mov	r1, r5
    800c:	ldr	r3, [r3, #60]	; 0x3c
    800e:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    8010:	movw	r0, #8193	; 0x2001
    8014:	add	sp, #132	; 0x84
    8016:	pop	{r4, r5, pc}

00008018 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    8018:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    801c:	sub	sp, #268	; 0x10c


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    801e:	add	r1, sp, #8
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    8020:	mov	r9, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    8022:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    8024:	mov	r5, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    8026:	bl	7f38 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    802a:	ldrh.w	r3, [sp, #12]
    802e:	cmp	r3, #2
    8030:	it	eq
    8032:	ldreq	r4, [sp, #8]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8034:	mov.w	r2, #4
    8038:	add	r1, sp, #8
    803a:	mov	r0, r5
    803c:	ite	eq
    803e:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    8040:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8044:	bl	7f38 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8048:	movs	r2, #2
    804a:	add	r1, sp, #8
    804c:	mov	r0, r5
    804e:	bl	7f38 <MTPD::read(char*, unsigned long)>
    8052:	ldrh.w	r8, [sp, #8]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    8056:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    805a:	movs	r2, #2
    805c:	add	r1, sp, #8
    805e:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    8060:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8064:	bl	7f38 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8068:	movs	r2, #4
    806a:	add	r1, sp, #8
    806c:	mov	r0, r5
    806e:	bl	7f38 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8072:	movs	r2, #2
    8074:	add	r1, sp, #8
    8076:	mov	r0, r5
    8078:	bl	7f38 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    807c:	movs	r2, #4
    807e:	add	r1, sp, #8
    8080:	mov	r0, r5
    8082:	bl	7f38 <MTPD::read(char*, unsigned long)>
    8086:	movs	r2, #4
    8088:	add	r1, sp, #8
    808a:	mov	r0, r5
    808c:	bl	7f38 <MTPD::read(char*, unsigned long)>
    8090:	movs	r2, #4
    8092:	add	r1, sp, #8
    8094:	mov	r0, r5
    8096:	bl	7f38 <MTPD::read(char*, unsigned long)>
    809a:	movs	r2, #4
    809c:	add	r1, sp, #8
    809e:	mov	r0, r5
    80a0:	bl	7f38 <MTPD::read(char*, unsigned long)>
    80a4:	movs	r2, #4
    80a6:	add	r1, sp, #8
    80a8:	mov	r0, r5
    80aa:	bl	7f38 <MTPD::read(char*, unsigned long)>
    80ae:	movs	r2, #4
    80b0:	add	r1, sp, #8
    80b2:	mov	r0, r5
    80b4:	bl	7f38 <MTPD::read(char*, unsigned long)>
    80b8:	movs	r2, #4
    80ba:	add	r1, sp, #8
    80bc:	mov	r0, r5
    80be:	bl	7f38 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    80c2:	movs	r2, #2
    80c4:	add	r1, sp, #8
    80c6:	mov	r0, r5
    80c8:	bl	7f38 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    80cc:	movs	r2, #4
    80ce:	add	r1, sp, #8
    80d0:	mov	r0, r5
    80d2:	bl	7f38 <MTPD::read(char*, unsigned long)>
    80d6:	movs	r2, #4
    80d8:	add	r1, sp, #8
    80da:	mov	r0, r5
    80dc:	bl	7f38 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    80e0:	add	r1, sp, #8
    80e2:	mov	r0, r5
    80e4:	bl	7fa8 <MTPD::readstring(char*)>
    80e8:	add	r0, sp, #8
    80ea:	bl	c900 <strlen>
    80ee:	adds	r0, #1
    80f0:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    80f4:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    80f8:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    80fa:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    80fe:	bls.n	8118 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x100>
    8100:	mov	r6, r4
    8102:	add	r7, sp, #4
    8104:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    8106:	movs	r2, #4
    8108:	mov	r1, r7
    810a:	mov	r0, r5
    810c:	bl	7f38 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    8110:	cmp	r6, #3
    8112:	bhi.n	8104 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xec>
    8114:	and.w	r4, r4, #3
    8118:	add	r7, sp, #4
    while(len) {read8(); len--;}
    811a:	cbz	r4, 812a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x112>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    811c:	movs	r2, #1
    811e:	mov	r1, r7
    8120:	mov	r0, r5
    8122:	bl	7f38 <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    8126:	subs	r4, #1
    8128:	bne.n	811c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x104>
    
    return storage_->Create(parent, dir, filename);
    812a:	ldr	r0, [r5, #0]
    812c:	ldr	r4, [r0, #0]
    812e:	add	r3, sp, #8
    8130:	mov	r2, r8
    8132:	mov	r1, r9
    8134:	ldr	r4, [r4, #32]
    8136:	blx	r4
  }
    8138:	add	sp, #268	; 0x10c
    813a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    813e:	nop

00008140 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    8140:	push	{r4, r5, r6, r7, lr}
    8142:	sub	sp, #20


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    8144:	movs	r2, #12
    8146:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    8148:	mov	r7, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    814a:	bl	7f38 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    814e:	ldrh.w	r3, [sp, #8]
    8152:	cmp	r3, #2
    8154:	beq.n	8162 <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    8156:	ldr	r0, [r7, #0]
    8158:	ldr	r3, [r0, #0]
    815a:	ldr	r3, [r3, #44]	; 0x2c
    815c:	blx	r3
  }
    815e:	add	sp, #20
    8160:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    8162:	ldr	r5, [sp, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    8164:	subs	r5, #12
    8166:	beq.n	8156 <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    8168:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    816a:	mov	r0, r7
    816c:	bl	7ea0 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    8170:	ldmia.w	r7, {r0, r1}
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    8174:	ldrh	r2, [r1, #2]
    8176:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    817a:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    817c:	subs	r4, r4, r2
    817e:	cmp	r4, r5
    8180:	it	cs
    8182:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    8184:	ldr	r3, [r3, #40]	; 0x28
    8186:	add	r1, r2
    8188:	mov	r2, r4
    818a:	blx	r3
      data_buffer_->index += to_copy;
    818c:	ldr	r0, [r7, #4]
    818e:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    8190:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    8192:	add	r3, r4
    8194:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    8196:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    8198:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    819c:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    819e:	beq.n	81a6 <MTPD::SendObject()+0x66>
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    81a0:	cmp	r5, #0
    81a2:	bne.n	816a <MTPD::SendObject()+0x2a>
    81a4:	b.n	8156 <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    81a6:	bl	9624 <usb_free>
        data_buffer_ = NULL;
    81aa:	str	r6, [r7, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    81ac:	cmp	r5, #0
    81ae:	bne.n	816a <MTPD::SendObject()+0x2a>
    81b0:	b.n	8156 <MTPD::SendObject()+0x16>
    81b2:	nop

000081b4 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    81b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    81b8:	mov	r5, r0
    81ba:	sub	sp, #44	; 0x2c
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    81bc:	movs	r0, #5
    81be:	bl	9670 <usb_rx>
    81c2:	cmp	r0, #0
    81c4:	beq.n	822a <MTPD::loop()+0x76>
      printContainer();
    81c6:	ldr	r1, [r0, #28]
    81c8:	ldr	r3, [r0, #8]
    81ca:	ldrh	r2, [r0, #14]
    81cc:	str	r1, [sp, #16]
    81ce:	ldr	r1, [r0, #24]
    81d0:	str	r1, [sp, #12]
    81d2:	ldr	r1, [r0, #20]
    81d4:	str	r1, [sp, #8]
    81d6:	ldr	r1, [r0, #16]
    81d8:	str	r1, [sp, #4]
    81da:	ldrh	r1, [r0, #12]
    81dc:	str	r1, [sp, #0]
    81de:	mov	r4, r0
    81e0:	ldr	r1, [pc, #740]	; (84c8 <MTPD::loop()+0x314>)
    81e2:	ldr	r0, [pc, #744]	; (84cc <MTPD::loop()+0x318>)
    81e4:	bl	a654 <Print::printf(char const*, ...)>
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    81e8:	ldrh	r3, [r4, #0]
    81ea:	cmp	r3, #11
    81ec:	bls.n	823c <MTPD::loop()+0x88>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    81ee:	ldrh	r3, [r4, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    81f0:	movs	r6, #12
        
        if (CONTAINER->type == 1) { // command
    81f2:	cmp	r3, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    81f4:	strh	r6, [r4, #0]
        
        if (CONTAINER->type == 1) { // command
    81f6:	beq.n	8244 <MTPD::loop()+0x90>
    81f8:	mov.w	r2, #8192	; 0x2000
    81fc:	ldr	r3, [r4, #8]
    81fe:	ldr	r6, [r4, #24]
    8200:	ldr	r0, [r4, #28]
    8202:	mov	r5, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    8204:	movs	r7, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    8206:	movs	r1, #3
    8208:	strh	r1, [r4, #12]
        CONTAINER->op = return_code;
    820a:	strh	r5, [r4, #14]
        CONTAINER->params[0] = p1;
    820c:	str	r7, [r4, #20]
        printContainer();
    820e:	str	r0, [sp, #16]
    8210:	str	r6, [sp, #12]
    8212:	str	r7, [sp, #8]
    8214:	ldr	r0, [r4, #16]
    8216:	str	r0, [sp, #4]
    8218:	str	r1, [sp, #0]
    821a:	ldr	r0, [pc, #688]	; (84cc <MTPD::loop()+0x318>)
    821c:	ldr	r1, [pc, #680]	; (84c8 <MTPD::loop()+0x314>)
    821e:	bl	a654 <Print::printf(char const*, ...)>

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    8222:	mov	r1, r4
    8224:	movs	r0, #4
    8226:	bl	97e0 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    822a:	movs	r0, #6
    822c:	bl	9670 <usb_rx>
    8230:	cbz	r0, 8236 <MTPD::loop()+0x82>
      usb_free(receive_buffer);
    8232:	bl	9624 <usb_free>
    }
  }
    8236:	add	sp, #44	; 0x2c
    8238:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    823c:	mov	r0, r4
    823e:	bl	9624 <usb_free>
    8242:	b.n	822a <MTPD::loop()+0x76>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    8244:	ldrh	r1, [r4, #14]
    8246:	movw	r2, #4108	; 0x100c
    824a:	cmp	r1, r2
    824c:	beq.w	868c <MTPD::loop()+0x4d8>
    8250:	bhi.n	8296 <MTPD::loop()+0xe2>
    8252:	movw	r2, #4101	; 0x1005
    8256:	cmp	r1, r2
    8258:	beq.w	8560 <MTPD::loop()+0x3ac>
    825c:	bls.n	831e <MTPD::loop()+0x16a>
    825e:	movw	r2, #4104	; 0x1008
    8262:	cmp	r1, r2
    8264:	beq.w	85ba <MTPD::loop()+0x406>
    8268:	bhi.w	840a <MTPD::loop()+0x256>
    826c:	movw	r3, #4102	; 0x1006
    8270:	cmp	r1, r3
    8272:	beq.w	86b0 <MTPD::loop()+0x4fc>
    8276:	movw	r3, #4103	; 0x1007
    827a:	cmp	r1, r3
    827c:	bne.w	83f6 <MTPD::loop()+0x242>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    8280:	ldr	r6, [r4, #24]
    8282:	cmp	r6, #0
    8284:	beq.w	8708 <MTPD::loop()+0x554>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    8288:	movw	r2, #8212	; 0x2014
    828c:	mov	r5, r2
    828e:	ldr	r3, [r4, #8]
    8290:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    8292:	movs	r7, #0
    8294:	b.n	8206 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    8296:	movw	r2, #4121	; 0x1019
    829a:	cmp	r1, r2
    829c:	beq.w	859a <MTPD::loop()+0x3e6>
    82a0:	bls.n	8382 <MTPD::loop()+0x1ce>
    82a2:	movw	r2, #38914	; 0x9802
    82a6:	cmp	r1, r2
    82a8:	beq.w	85f4 <MTPD::loop()+0x440>
    82ac:	bhi.w	8442 <MTPD::loop()+0x28e>
    82b0:	movw	r3, #4122	; 0x101a
    82b4:	cmp	r1, r3
    82b6:	beq.w	83f6 <MTPD::loop()+0x242>
    82ba:	movw	r3, #38913	; 0x9801
    82be:	cmp	r1, r3
    82c0:	bne.w	83f6 <MTPD::loop()+0x242>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    82c4:	ldr	r7, [r4, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    82c6:	movs	r3, #1
    82c8:	movs	r6, #0
    82ca:	mov	r1, r7
    82cc:	strb	r3, [r5, #8]
    82ce:	mov	r0, r5
    82d0:	str	r6, [r5, #12]
    82d2:	bl	74a8 <MTPD::getObjectPropsSupported(unsigned long)>
    82d6:	ldr	r3, [r5, #12]
    82d8:	strb	r6, [r5, #8]
    82da:	adds	r3, #12
    82dc:	movs	r2, #2
    82de:	strh.w	r2, [sp, #32]
    82e2:	str	r3, [sp, #28]
    82e4:	ldrh	r3, [r4, #14]
    82e6:	strh.w	r3, [sp, #34]	; 0x22
    82ea:	ldr	r3, [r4, #16]
    82ec:	str	r3, [sp, #36]	; 0x24
    82ee:	add	r1, sp, #28
    82f0:	mov	r0, r5
    82f2:	movs	r2, #12
    82f4:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    82f8:	mov	r1, r7
    82fa:	mov	r0, r5
    82fc:	bl	74a8 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    8300:	mov	r0, r5
    8302:	bl	6d98 <MTPD::get_buffer()>
    8306:	ldr	r1, [r5, #4]
    8308:	movs	r0, #4
    830a:	bl	97e0 <usb_tx>
    830e:	str	r6, [r5, #4]
              break;
    8310:	movw	r2, #8193	; 0x2001
    8314:	ldr	r3, [r4, #8]
    8316:	ldr	r6, [r4, #24]
    8318:	ldr	r0, [r4, #28]
    831a:	mov	r5, r2
    831c:	b.n	8206 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    831e:	movw	r3, #4098	; 0x1002
    8322:	cmp	r1, r3
    8324:	beq.n	83fc <MTPD::loop()+0x248>
    8326:	bls.w	8474 <MTPD::loop()+0x2c0>
    832a:	movw	r3, #4099	; 0x1003
    832e:	cmp	r1, r3
    8330:	beq.n	8404 <MTPD::loop()+0x250>
    8332:	movw	r3, #4100	; 0x1004
    8336:	cmp	r1, r3
    8338:	bne.n	83f6 <MTPD::loop()+0x242>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    833a:	movs	r3, #1
    833c:	movs	r7, #0
    833e:	strb	r3, [r5, #8]
    8340:	mov	r0, r5
    8342:	str	r7, [r5, #12]
    8344:	bl	718c <MTPD::WriteStorageIDs()>
    8348:	ldr	r3, [r5, #12]
    834a:	strb	r7, [r5, #8]
    834c:	adds	r3, #12
    834e:	movs	r2, #2
    8350:	strh.w	r2, [sp, #32]
    8354:	str	r3, [sp, #28]
    8356:	ldrh	r3, [r4, #14]
    8358:	strh.w	r3, [sp, #34]	; 0x22
    835c:	ldr	r3, [r4, #16]
    835e:	str	r3, [sp, #36]	; 0x24
    8360:	mov	r0, r5
    8362:	movs	r2, #12
    8364:	add	r1, sp, #28
    8366:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    836a:	mov	r0, r5
    836c:	bl	718c <MTPD::WriteStorageIDs()>
    8370:	mov	r0, r5
    8372:	bl	6d98 <MTPD::get_buffer()>
    8376:	ldr	r1, [r5, #4]
    8378:	movs	r0, #4
    837a:	bl	97e0 <usb_tx>
    837e:	str	r7, [r5, #4]
    8380:	b.n	8310 <MTPD::loop()+0x15c>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    8382:	movw	r3, #4112	; 0x1010
    8386:	cmp	r1, r3
    8388:	beq.n	83f6 <MTPD::loop()+0x242>
    838a:	bls.w	84b4 <MTPD::loop()+0x300>
    838e:	movw	r3, #4116	; 0x1014
    8392:	cmp	r1, r3
    8394:	beq.w	8516 <MTPD::loop()+0x362>
    8398:	movw	r3, #4117	; 0x1015
    839c:	cmp	r1, r3
    839e:	bne.n	83f6 <MTPD::loop()+0x242>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    83a0:	movs	r2, #0
    83a2:	movs	r3, #1
    83a4:	strb	r3, [r5, #8]
    83a6:	str	r2, [r5, #12]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    83a8:	ldr	r2, [r4, #20]
    83aa:	movw	r3, #54274	; 0xd402
    83ae:	cmp	r2, r3
    83b0:	beq.w	876e <MTPD::loop()+0x5ba>
    83b4:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    83b6:	movs	r1, #0
    83b8:	movs	r2, #2
    83ba:	strb	r1, [r5, #8]
    83bc:	strh.w	r2, [sp, #32]
    83c0:	str	r3, [sp, #28]
    83c2:	ldrh	r3, [r4, #14]
    83c4:	strh.w	r3, [sp, #34]	; 0x22
    83c8:	ldr	r3, [r4, #16]
    83ca:	str	r3, [sp, #36]	; 0x24
    83cc:	movs	r2, #12
    83ce:	add	r1, sp, #28
    83d0:	mov	r0, r5
    83d2:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    83d6:	ldr	r2, [r4, #20]
    83d8:	movw	r3, #54274	; 0xd402
    83dc:	cmp	r2, r3
    83de:	beq.w	8764 <MTPD::loop()+0x5b0>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    83e2:	mov	r0, r5
    83e4:	bl	6d98 <MTPD::get_buffer()>
    83e8:	movs	r7, #0
    83ea:	ldr	r1, [r5, #4]
    83ec:	movs	r0, #4
    83ee:	bl	97e0 <usb_tx>
    83f2:	str	r7, [r5, #4]
    83f4:	b.n	8310 <MTPD::loop()+0x15c>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    83f6:	movw	r2, #8197	; 0x2005
    83fa:	b.n	81fc <MTPD::loop()+0x48>
      return 0x2001;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    83fc:	ldr	r0, [r5, #0]
    83fe:	ldr	r3, [r0, #0]
    8400:	ldr	r3, [r3, #56]	; 0x38
    8402:	blx	r3
    8404:	movw	r2, #8193	; 0x2001
    8408:	b.n	81fc <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    840a:	movw	r3, #4105	; 0x1009
    840e:	cmp	r1, r3
    8410:	beq.w	8650 <MTPD::loop()+0x49c>
    8414:	movw	r3, #4107	; 0x100b
    8418:	cmp	r1, r3
    841a:	bne.n	83f6 <MTPD::loop()+0x242>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    841c:	ldr	r6, [r4, #24]
    841e:	cmp	r6, #0
    8420:	bne.w	8288 <MTPD::loop()+0xd4>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    8424:	ldr	r0, [r5, #0]
    8426:	ldr	r1, [r4, #20]
    8428:	ldr	r3, [r0, #0]
    842a:	ldr	r3, [r3, #48]	; 0x30
    842c:	blx	r3
    842e:	cmp	r0, #0
    8430:	bne.n	8404 <MTPD::loop()+0x250>
    8432:	movw	r2, #8210	; 0x2012
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    8436:	mov	r7, r0
    8438:	mov	r5, r2
    843a:	ldr	r3, [r4, #8]
    843c:	ldr	r6, [r4, #24]
    843e:	ldr	r0, [r4, #28]
    8440:	b.n	8206 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    8442:	movw	r3, #38915	; 0x9803
    8446:	cmp	r1, r3
    8448:	beq.n	84d0 <MTPD::loop()+0x31c>
    844a:	movw	r3, #38916	; 0x9804
    844e:	cmp	r1, r3
    8450:	bne.n	83f6 <MTPD::loop()+0x242>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    8452:	ldr	r6, [r4, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    8454:	ldr	r7, [r4, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    8456:	mov	r0, r5
    8458:	bl	7ea0 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    845c:	movw	r3, #56327	; 0xdc07
    8460:	cmp	r6, r3
    8462:	beq.w	86e2 <MTPD::loop()+0x52e>
    8466:	movw	r2, #8197	; 0x2005
    846a:	mov	r5, r2
    846c:	ldr	r3, [r4, #8]
    846e:	ldr	r6, [r4, #24]
    8470:	ldr	r0, [r4, #28]
    8472:	b.n	8206 <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    8474:	movw	r3, #4097	; 0x1001
    8478:	cmp	r1, r3
    847a:	bne.n	83f6 <MTPD::loop()+0x242>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    847c:	movs	r7, #0
    847e:	movs	r3, #1
    8480:	strb	r3, [r5, #8]
    8482:	mov	r0, r5
    8484:	str	r7, [r5, #12]
    8486:	bl	6f78 <MTPD::WriteDescriptor()>
    848a:	ldr	r3, [r5, #12]
    848c:	strb	r7, [r5, #8]
    848e:	adds	r3, #12
    8490:	movs	r2, #2
    8492:	strh.w	r2, [sp, #32]
    8496:	str	r3, [sp, #28]
    8498:	ldrh	r3, [r4, #14]
    849a:	strh.w	r3, [sp, #34]	; 0x22
    849e:	ldr	r3, [r4, #16]
    84a0:	str	r3, [sp, #36]	; 0x24
    84a2:	mov	r0, r5
    84a4:	movs	r2, #12
    84a6:	add	r1, sp, #28
    84a8:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    84ac:	mov	r0, r5
    84ae:	bl	6f78 <MTPD::WriteDescriptor()>
    84b2:	b.n	8370 <MTPD::loop()+0x1bc>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    84b4:	movw	r3, #4109	; 0x100d
    84b8:	cmp	r1, r3
    84ba:	bne.n	83f6 <MTPD::loop()+0x242>
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    84bc:	mov	r0, r5
    84be:	bl	8140 <MTPD::SendObject()>
              break;
    84c2:	movw	r2, #8193	; 0x2001
    84c6:	b.n	81fc <MTPD::loop()+0x48>
    84c8:	.word	0x0000ffb8
    84cc:	.word	0x1fff09c8

            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    84d0:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    84d2:	ldr.w	r8, [r4, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    84d6:	movs	r6, #0
    84d8:	movs	r3, #1
    84da:	mov	r1, r7
    84dc:	mov	r2, r8
    84de:	strb	r3, [r5, #8]
    84e0:	mov	r0, r5
    84e2:	str	r6, [r5, #12]
    84e4:	bl	7514 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    84e8:	ldr	r3, [r5, #12]
    84ea:	strb	r6, [r5, #8]
    84ec:	adds	r3, #12
    84ee:	movs	r2, #2
    84f0:	strh.w	r2, [sp, #32]
    84f4:	str	r3, [sp, #28]
    84f6:	ldrh	r3, [r4, #14]
    84f8:	strh.w	r3, [sp, #34]	; 0x22
    84fc:	ldr	r3, [r4, #16]
    84fe:	str	r3, [sp, #36]	; 0x24
    8500:	add	r1, sp, #28
    8502:	mov	r0, r5
    8504:	movs	r2, #12
    8506:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    850a:	mov	r2, r8
    850c:	mov	r1, r7
    850e:	mov	r0, r5
    8510:	bl	7514 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    8514:	b.n	8300 <MTPD::loop()+0x14c>
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    8516:	movs	r3, #1
    8518:	movs	r2, #0
    851a:	strb	r3, [r5, #8]
    851c:	str	r2, [r5, #12]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    851e:	ldr	r1, [r4, #20]
    8520:	movw	r3, #54274	; 0xd402
    8524:	cmp	r1, r3
    8526:	beq.w	86fc <MTPD::loop()+0x548>
    852a:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    852c:	movs	r1, #0
    852e:	movs	r2, #2
    8530:	strb	r1, [r5, #8]
    8532:	strh.w	r2, [sp, #32]
    8536:	str	r3, [sp, #28]
    8538:	ldrh	r3, [r4, #14]
    853a:	strh.w	r3, [sp, #34]	; 0x22
    853e:	ldr	r3, [r4, #16]
    8540:	str	r3, [sp, #36]	; 0x24
    8542:	add	r1, sp, #28
    8544:	movs	r2, #12
    8546:	mov	r0, r5
    8548:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    854c:	ldr	r1, [r4, #20]
    854e:	movw	r3, #54274	; 0xd402
    8552:	cmp	r1, r3
    8554:	bne.w	83e2 <MTPD::loop()+0x22e>
    8558:	mov	r0, r5
    855a:	bl	6ebc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    855e:	b.n	83e2 <MTPD::loop()+0x22e>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    8560:	movs	r7, #0
    8562:	strb	r3, [r5, #8]
    8564:	str	r7, [r5, #12]
    8566:	ldr	r1, [r4, #20]
    8568:	mov	r0, r5
    856a:	bl	76b0 <MTPD::GetStorageInfo(unsigned long)>
    856e:	ldr	r3, [r5, #12]
    8570:	strb	r7, [r5, #8]
    8572:	adds	r3, #12
    8574:	movs	r2, #2
    8576:	strh.w	r2, [sp, #32]
    857a:	str	r3, [sp, #28]
    857c:	ldrh	r3, [r4, #14]
    857e:	strh.w	r3, [sp, #34]	; 0x22
    8582:	ldr	r3, [r4, #16]
    8584:	str	r3, [sp, #36]	; 0x24
    8586:	add	r1, sp, #28
    8588:	mov	r0, r5
    858a:	mov	r2, r6
    858c:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    8590:	ldr	r1, [r4, #20]
    8592:	mov	r0, r5
    8594:	bl	76b0 <MTPD::GetStorageInfo(unsigned long)>
    8598:	b.n	8370 <MTPD::loop()+0x1bc>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    859a:	ldr	r0, [r5, #0]
    859c:	ldr	r2, [r4, #28]
    859e:	ldr	r3, [r0, #0]
    85a0:	ldr	r1, [r4, #20]
    85a2:	ldr	r3, [r3, #64]	; 0x40
    85a4:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    85a6:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    85aa:	strh	r6, [r4, #0]
    85ac:	str	r6, [r4, #8]
              break;
    85ae:	mov	r3, r6
    85b0:	mov	r5, r2
    85b2:	ldr	r6, [r4, #24]
    85b4:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    85b6:	movs	r7, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    85b8:	b.n	8206 <MTPD::loop()+0x52>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    85ba:	movs	r7, #0
    85bc:	strb	r3, [r5, #8]
    85be:	str	r7, [r5, #12]
    85c0:	ldr	r1, [r4, #20]
    85c2:	mov	r0, r5
    85c4:	bl	725c <MTPD::GetObjectInfo(unsigned long)>
    85c8:	ldr	r3, [r5, #12]
    85ca:	strb	r7, [r5, #8]
    85cc:	adds	r3, #12
    85ce:	movs	r2, #2
    85d0:	strh.w	r2, [sp, #32]
    85d4:	str	r3, [sp, #28]
    85d6:	ldrh	r3, [r4, #14]
    85d8:	strh.w	r3, [sp, #34]	; 0x22
    85dc:	ldr	r3, [r4, #16]
    85de:	str	r3, [sp, #36]	; 0x24
    85e0:	add	r1, sp, #28
    85e2:	mov	r0, r5
    85e4:	mov	r2, r6
    85e6:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    85ea:	ldr	r1, [r4, #20]
    85ec:	mov	r0, r5
    85ee:	bl	725c <MTPD::GetObjectInfo(unsigned long)>
    85f2:	b.n	8370 <MTPD::loop()+0x1bc>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    85f4:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    85f6:	ldr.w	r9, [r4, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    85fa:	strb	r3, [r5, #8]
    85fc:	mov.w	r8, #0
    8600:	mov	r1, r7
    8602:	mov	r2, r9
    8604:	mov	r0, r5
    8606:	str.w	r8, [r5, #12]
    860a:	bl	77b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    860e:	ldr	r3, [r5, #12]
    8610:	strb.w	r8, [r5, #8]
    8614:	adds	r3, #12
    8616:	movs	r2, #2
    8618:	strh.w	r2, [sp, #32]
    861c:	str	r3, [sp, #28]
    861e:	ldrh	r3, [r4, #14]
    8620:	strh.w	r3, [sp, #34]	; 0x22
    8624:	ldr	r3, [r4, #16]
    8626:	str	r3, [sp, #36]	; 0x24
    8628:	mov	r2, r6
    862a:	add	r1, sp, #28
    862c:	mov	r0, r5
    862e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    8632:	mov	r2, r9
    8634:	mov	r1, r7
    8636:	mov	r0, r5
    8638:	bl	77b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    863c:	mov	r0, r5
    863e:	bl	6d98 <MTPD::get_buffer()>
    8642:	ldr	r1, [r5, #4]
    8644:	movs	r0, #4
    8646:	bl	97e0 <usb_tx>
    864a:	str.w	r8, [r5, #4]
    864e:	b.n	8310 <MTPD::loop()+0x15c>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    8650:	movs	r7, #0
    8652:	movs	r3, #1
    8654:	strb	r3, [r5, #8]
    8656:	str	r7, [r5, #12]
    8658:	ldr	r1, [r4, #20]
    865a:	mov	r0, r5
    865c:	bl	7ebc <MTPD::GetObject(unsigned long)>
    8660:	ldr	r3, [r5, #12]
    8662:	strb	r7, [r5, #8]
    8664:	adds	r3, #12
    8666:	movs	r2, #2
    8668:	strh.w	r2, [sp, #32]
    866c:	str	r3, [sp, #28]
    866e:	ldrh	r3, [r4, #14]
    8670:	strh.w	r3, [sp, #34]	; 0x22
    8674:	ldr	r3, [r4, #16]
    8676:	str	r3, [sp, #36]	; 0x24
    8678:	add	r1, sp, #28
    867a:	mov	r0, r5
    867c:	movs	r2, #12
    867e:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    8682:	ldr	r1, [r4, #20]
    8684:	mov	r0, r5
    8686:	bl	7ebc <MTPD::GetObject(unsigned long)>
    868a:	b.n	8370 <MTPD::loop()+0x1bc>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    868c:	mov	r0, r5
    868e:	ldr	r2, [r4, #24]
    8690:	ldr	r1, [r4, #20]
    8692:	bl	8018 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    8696:	ldr	r7, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    8698:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    869a:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    869c:	cmp	r7, #0
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
    869e:	movw	r2, #8193	; 0x2001
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    86a2:	it	eq
    86a4:	moveq	r7, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    86a6:	strh	r3, [r4, #0]
    86a8:	str	r3, [r4, #8]
              break;
    86aa:	mov	r5, r2
    86ac:	ldr	r6, [r4, #24]
    86ae:	b.n	8206 <MTPD::loop()+0x52>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    86b0:	ldr	r6, [r4, #24]
    86b2:	cmp	r6, #0
    86b4:	bne.w	8288 <MTPD::loop()+0xd4>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    86b8:	ldr	r0, [r5, #0]
    86ba:	ldr	r1, [r4, #28]
    86bc:	ldr	r3, [r0, #0]
    86be:	ldr	r3, [r3, #16]
    86c0:	blx	r3
    86c2:	b.n	86c6 <MTPD::loop()+0x512>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    86c4:	adds	r6, #1
    86c6:	ldr	r0, [r5, #0]
    86c8:	ldr	r3, [r0, #0]
    86ca:	ldr	r3, [r3, #20]
    86cc:	blx	r3
    86ce:	cmp	r0, #0
    86d0:	bne.n	86c4 <MTPD::loop()+0x510>
    return num;
    86d2:	movw	r2, #8193	; 0x2001
    86d6:	mov	r7, r6
    86d8:	mov	r5, r2
    86da:	ldr	r3, [r4, #8]
    86dc:	ldr	r6, [r4, #24]
    86de:	ldr	r0, [r4, #28]
    86e0:	b.n	8206 <MTPD::loop()+0x52>
    86e2:	mov	r0, r5
    86e4:	mov	r1, r7
    86e6:	bl	7fec <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    86ea:	cmp	r0, #0
    86ec:	beq.w	823c <MTPD::loop()+0x88>
    86f0:	uxth	r5, r0
    86f2:	ldr	r3, [r4, #8]
    86f4:	ldr	r6, [r4, #24]
    86f6:	ldr	r0, [r4, #28]
    86f8:	mov	r2, r5
    86fa:	b.n	8206 <MTPD::loop()+0x52>
    86fc:	mov	r0, r5
    86fe:	bl	6ebc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    8702:	ldr	r3, [r5, #12]
    8704:	adds	r3, #12
    8706:	b.n	852c <MTPD::loop()+0x378>
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    8708:	movs	r3, #1
    870a:	str	r6, [r5, #12]
    870c:	strb	r3, [r5, #8]
    870e:	mov	r0, r5
    8710:	ldr	r2, [r4, #28]
    8712:	ldr	r1, [r4, #20]
    8714:	bl	71cc <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    8718:	ldr	r3, [r5, #12]
    871a:	strb	r6, [r5, #8]
    871c:	adds	r3, #12
    871e:	movs	r2, #2
    8720:	strh.w	r2, [sp, #32]
    8724:	str	r3, [sp, #28]
    8726:	ldrh	r3, [r4, #14]
    8728:	strh.w	r3, [sp, #34]	; 0x22
    872c:	ldr	r3, [r4, #16]
    872e:	str	r3, [sp, #36]	; 0x24
    8730:	mov	r0, r5
    8732:	movs	r2, #12
    8734:	add	r1, sp, #28
    8736:	bl	6db0 <MTPD::write(char const*, int) [clone .part.2]>
    873a:	ldr	r2, [r4, #28]
    873c:	ldr	r1, [r4, #20]
    873e:	mov	r0, r5
    8740:	bl	71cc <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    8744:	mov	r0, r5
    8746:	bl	6d98 <MTPD::get_buffer()>
    874a:	ldr	r1, [r5, #4]
    874c:	movs	r0, #4
    874e:	bl	97e0 <usb_tx>
    8752:	str	r6, [r5, #4]
    8754:	movw	r2, #8193	; 0x2001
    8758:	ldr	r3, [r4, #8]
    875a:	ldr	r6, [r4, #24]
    875c:	ldr	r0, [r4, #28]
    875e:	mov	r5, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    8760:	movs	r7, #0
    8762:	b.n	8206 <MTPD::loop()+0x52>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    8764:	ldr	r1, [pc, #20]	; (877c <MTPD::loop()+0x5c8>)
    8766:	mov	r0, r5
    8768:	bl	6e14 <MTPD::writestring(char const*)>
    876c:	b.n	83e2 <MTPD::loop()+0x22e>
    876e:	ldr	r1, [pc, #12]	; (877c <MTPD::loop()+0x5c8>)
    8770:	mov	r0, r5
    8772:	bl	6e14 <MTPD::writestring(char const*)>
    8776:	ldr	r3, [r5, #12]
    8778:	adds	r3, #12
    877a:	b.n	83b6 <MTPD::loop()+0x202>
    877c:	.word	0x0000ff84

00008780 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    8780:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    8782:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    8784:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    8786:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    8788:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    878a:	beq.n	8794 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    878c:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    8790:	b.w	a358 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    8794:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    8796:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    879a:	bx	r3

0000879c <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    879c:	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    879e:	ldr	r3, [pc, #280]	; (88b8 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    87a0:	ldr	r2, [pc, #280]	; (88bc <_spi_dma_rxISR0()+0x120>)
    87a2:	ldr	r0, [r3, #56]	; 0x38
    87a4:	ldr	r4, [r3, #52]	; 0x34
    87a6:	ldrb	r1, [r0, #4]
    87a8:	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    87aa:	ldr	r1, [pc, #276]	; (88c0 <_spi_dma_rxISR0()+0x124>)
    87ac:	ldrb	r2, [r4, #4]
    87ae:	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    87b0:	ldr	r2, [r3, #48]	; 0x30
    87b2:	ldrb	r0, [r0, #4]
    87b4:	strb	r0, [r1, #0]
    87b6:	cmp	r2, #0
    87b8:	beq.n	8848 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    87ba:	ldr	r1, [r3, #4]
    87bc:	ldr	r1, [r1, #12]
    87be:	cmp	r2, r1
    87c0:	bhi.n	8840 <_spi_dma_rxISR0()+0xa4>
    87c2:	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    87c4:	ldrh	r4, [r1, #30]
    87c6:	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    87c8:	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    87cc:	bmi.n	889a <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    87ce:	ubfx	r0, r0, #0, #15
    87d2:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    87d4:	ldrh	r0, [r1, #30]
    87d6:	uxth	r0, r0
    87d8:	strh	r0, [r1, #22]
    87da:	ldr	r1, [r3, #56]	; 0x38
    87dc:	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    87de:	ldrh	r0, [r1, #30]
    87e0:	lsls	r0, r0, #16
    87e2:	bmi.n	888a <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    87e4:	ubfx	r0, r2, #0, #15
    87e8:	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    87ea:	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    87ec:	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    87ee:	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    87f0:	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    87f4:	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    87f6:	it	ne
    87f8:	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    87fa:	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    87fc:	ldr	r1, [r3, #52]	; 0x34
    87fe:	ldr	r0, [pc, #184]	; (88b8 <_spi_dma_rxISR0()+0x11c>)
    8800:	ldr	r1, [r1, #0]
    8802:	ldr	r5, [r1, #0]
    8804:	add.w	r4, r0, #44	; 0x2c
    8808:	cmp	r5, r4
    880a:	beq.n	887a <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    880c:	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    880e:	ldr	r4, [r0, #12]
    8810:	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8814:	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8816:	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8818:	itete	ne
    881a:	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    881c:	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    881e:	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8820:	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8822:	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8826:	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8828:	str	r4, [r0, #52]	; 0x34
    882a:	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    882c:	ldr	r3, [pc, #148]	; (88c4 <_spi_dma_rxISR0()+0x128>)
    882e:	ldrb	r1, [r1, #4]
    8830:	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    8832:	ldr	r1, [pc, #132]	; (88b8 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    8834:	cbz	r2, 883c <_spi_dma_rxISR0()+0xa0>
    8836:	ldr	r2, [r1, #52]	; 0x34
    8838:	ldrb	r2, [r2, #4]
    883a:	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    883c:	pop	{r4, r5, r6, r7}
    883e:	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    8840:	subs	r2, r2, r1
    8842:	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8844:	movs	r2, #1
    8846:	b.n	87fc <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    8848:	ldr	r0, [r3, #60]	; 0x3c
    884a:	ldr	r1, [r3, #0]
    884c:	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    884e:	ldr	r4, [pc, #120]	; (88c8 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    8850:	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    8852:	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8854:	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    8856:	ldr	r5, [r5, #0]
    8858:	ldr	r6, [pc, #112]	; (88cc <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    885a:	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    885e:	movs	r7, #3
    8860:	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8862:	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8864:	strb.w	r7, [r3, #45]	; 0x2d
    8868:	bne.n	88aa <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    886a:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    886c:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    886e:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    8870:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8872:	beq.n	88b2 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8874:	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    8876:	b.w	a358 <EventResponder::triggerEventNotImmediate()>
    887a:	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    887c:	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8880:	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8882:	orr.w	r0, r0, #2147483648	; 0x80000000
    8886:	str	r0, [r1, #52]	; 0x34
    8888:	b.n	882a <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    888a:	ldrh	r4, [r1, #30]
    888c:	ubfx	r0, r2, #0, #9
    8890:	and.w	r4, r4, #65024	; 0xfe00
    8894:	orrs	r0, r4
    8896:	strh	r0, [r1, #30]
    8898:	b.n	87ea <_spi_dma_rxISR0()+0x4e>
    889a:	ldrh	r4, [r1, #30]
    889c:	ubfx	r0, r0, #0, #9
    88a0:	and.w	r4, r4, #65024	; 0xfe00
    88a4:	orrs	r0, r4
    88a6:	strh	r0, [r1, #30]
    88a8:	b.n	87d4 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    88aa:	mov	r3, r5
    88ac:	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    88ae:	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    88b0:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    88b2:	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    88b4:	pop	{r4, r5, r6, r7}
    88b6:	bx	r3
    88b8:	.word	0x1fff097c
    88bc:	.word	0x4000801f
    88c0:	.word	0x4000801c
    88c4:	.word	0x4000801b
    88c8:	.word	0xff0f0000
    88cc:	.word	0x00008781

000088d0 <SPIClass::setMOSI(unsigned char)>:
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    88d0:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    88d2:	ldr	r3, [pc, #148]	; (8968 <SPIClass::setMOSI(unsigned char)+0x98>)
    88d4:	ldr	r5, [r0, #4]
    88d6:	cmp	r3, r5
    88d8:	beq.n	88fe <SPIClass::setMOSI(unsigned char)+0x2e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    88da:	ldrb	r3, [r0, #9]
    88dc:	add	r3, r5
    88de:	ldrb.w	r6, [r3, #44]	; 0x2c
    88e2:	cmp	r1, r6
    88e4:	beq.n	88fa <SPIClass::setMOSI(unsigned char)+0x2a>
    88e6:	add.w	r2, r5, #43	; 0x2b
    88ea:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    88ec:	ldrb.w	r4, [r2, #1]!
    88f0:	cmp	r4, r1
    88f2:	beq.n	892a <SPIClass::setMOSI(unsigned char)+0x5a>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    88f4:	adds	r3, #1
    88f6:	cmp	r3, #4
    88f8:	bne.n	88ec <SPIClass::setMOSI(unsigned char)+0x1c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    88fa:	pop	{r4, r5, r6, r7}
    88fc:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    88fe:	cmp	r1, #11
    8900:	beq.n	895c <SPIClass::setMOSI(unsigned char)+0x8c>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    8902:	cmp	r1, #7
    8904:	beq.n	891a <SPIClass::setMOSI(unsigned char)+0x4a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    8906:	cmp	r1, #28
    8908:	bne.n	88da <SPIClass::setMOSI(unsigned char)+0xa>
    890a:	ldr	r2, [pc, #96]	; (896c <SPIClass::setMOSI(unsigned char)+0x9c>)
    890c:	ldrb	r3, [r2, #0]
    890e:	bic.w	r3, r3, #3
    8912:	orr.w	r3, r3, #2
    8916:	strb	r3, [r2, #0]
    8918:	b.n	88da <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    891a:	ldr	r2, [pc, #80]	; (896c <SPIClass::setMOSI(unsigned char)+0x9c>)
    891c:	ldrb	r3, [r2, #0]
    891e:	bic.w	r3, r3, #3
    8922:	orr.w	r3, r3, #1
    8926:	strb	r3, [r2, #0]
    8928:	b.n	88da <SPIClass::setMOSI(unsigned char)+0xa>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    892a:	ldmia.w	r5, {r1, r2}
    892e:	ldr	r1, [r1, #0]
    8930:	tst	r1, r2
    8932:	beq.n	8956 <SPIClass::setMOSI(unsigned char)+0x86>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    8934:	ldr	r2, [pc, #56]	; (8970 <SPIClass::setMOSI(unsigned char)+0xa0>)
    8936:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
    893a:	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    893c:	ldr	r4, [r6, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    893e:	adds	r1, r5, r3
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    8940:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    8942:	ldrb.w	r1, [r1, #44]	; 0x2c
    8946:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    894a:	add.w	r1, r3, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    894e:	ldr	r4, [r2, #4]
					*reg = hardware().mosi_mux[i];
    8950:	ldr.w	r2, [r5, r1, lsl #2]
    8954:	str	r2, [r4, #0]
				}	
				mosi_pin_index = i;
    8956:	strb	r3, [r0, #9]
				return;
			}
		}
	}
}
    8958:	pop	{r4, r5, r6, r7}
    895a:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    895c:	ldr	r2, [pc, #12]	; (896c <SPIClass::setMOSI(unsigned char)+0x9c>)
    895e:	ldrb	r3, [r2, #0]
    8960:	bic.w	r3, r3, #3
    8964:	strb	r3, [r2, #0]
    8966:	b.n	88da <SPIClass::setMOSI(unsigned char)+0xa>
    8968:	.word	0x0000ffd0
    896c:	.word	0x1fff1c10
    8970:	.word	0x00010070

00008974 <SPIClass::setMISO(unsigned char)>:

void SPIClass::setMISO(uint8_t pin)
{
    8974:	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    8976:	ldr	r3, [pc, #144]	; (8a08 <SPIClass::setMISO(unsigned char)+0x94>)
    8978:	ldr	r5, [r0, #4]
    897a:	cmp	r3, r5
    897c:	beq.n	89a0 <SPIClass::setMISO(unsigned char)+0x2c>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    897e:	ldrb	r3, [r0, #8]
    8980:	add	r3, r5
    8982:	ldrb	r6, [r3, #24]
    8984:	cmp	r1, r6
    8986:	beq.n	899c <SPIClass::setMISO(unsigned char)+0x28>
    8988:	add.w	r2, r5, #23
    898c:	movs	r3, #0
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    898e:	ldrb.w	r4, [r2, #1]!
    8992:	cmp	r4, r1
    8994:	beq.n	89cc <SPIClass::setMISO(unsigned char)+0x58>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    8996:	adds	r3, #1
    8998:	cmp	r3, #4
    899a:	bne.n	898e <SPIClass::setMISO(unsigned char)+0x1a>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    899c:	pop	{r4, r5, r6, r7}
    899e:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    89a0:	cmp	r1, #12
    89a2:	beq.n	89fa <SPIClass::setMISO(unsigned char)+0x86>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    89a4:	cmp	r1, #8
    89a6:	beq.n	89bc <SPIClass::setMISO(unsigned char)+0x48>
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    89a8:	cmp	r1, #39	; 0x27
    89aa:	bne.n	897e <SPIClass::setMISO(unsigned char)+0xa>
    89ac:	ldr	r2, [pc, #92]	; (8a0c <SPIClass::setMISO(unsigned char)+0x98>)
    89ae:	ldrb	r3, [r2, #0]
    89b0:	bic.w	r3, r3, #12
    89b4:	orr.w	r3, r3, #8
    89b8:	strb	r3, [r2, #0]
    89ba:	b.n	897e <SPIClass::setMISO(unsigned char)+0xa>
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    89bc:	ldr	r2, [pc, #76]	; (8a0c <SPIClass::setMISO(unsigned char)+0x98>)
    89be:	ldrb	r3, [r2, #0]
    89c0:	bic.w	r3, r3, #12
    89c4:	orr.w	r3, r3, #4
    89c8:	strb	r3, [r2, #0]
    89ca:	b.n	897e <SPIClass::setMISO(unsigned char)+0xa>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    89cc:	ldmia.w	r5, {r1, r2}
    89d0:	ldr	r1, [r1, #0]
    89d2:	tst	r1, r2
    89d4:	beq.n	89f4 <SPIClass::setMISO(unsigned char)+0x80>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    89d6:	ldr	r2, [pc, #56]	; (8a10 <SPIClass::setMISO(unsigned char)+0x9c>)
    89d8:	add.w	r6, r2, r6, lsl #3
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    89dc:	adds	r1, r5, r3
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    89de:	ldr	r4, [r6, #4]
					*reg = 0;
    89e0:	movs	r7, #0
    89e2:	str	r7, [r4, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    89e4:	ldrb	r1, [r1, #24]
    89e6:	add.w	r2, r2, r1, lsl #3
					*reg = hardware().miso_mux[i];
    89ea:	add.w	r5, r5, r3, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    89ee:	ldr	r2, [r2, #4]
					*reg = hardware().miso_mux[i];
    89f0:	ldr	r1, [r5, #28]
    89f2:	str	r1, [r2, #0]
				}	
				miso_pin_index = i;
    89f4:	strb	r3, [r0, #8]
				return;
			}
		}
	}
}
    89f6:	pop	{r4, r5, r6, r7}
    89f8:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    89fa:	ldr	r2, [pc, #16]	; (8a0c <SPIClass::setMISO(unsigned char)+0x98>)
    89fc:	ldrb	r3, [r2, #0]
    89fe:	bic.w	r3, r3, #12
    8a02:	strb	r3, [r2, #0]
    8a04:	b.n	897e <SPIClass::setMISO(unsigned char)+0xa>
    8a06:	nop
    8a08:	.word	0x0000ffd0
    8a0c:	.word	0x1fff1c10
    8a10:	.word	0x00010070

00008a14 <SPIClass::setSCK(unsigned char)>:

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    8a14:	ldr	r2, [pc, #160]	; (8ab8 <SPIClass::setSCK(unsigned char)+0xa4>)
    8a16:	ldr	r3, [r0, #4]
    8a18:	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    8a1a:	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    8a1c:	beq.n	8a4a <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    8a1e:	ldrb	r2, [r0, #10]
    8a20:	add	r2, r3
    8a22:	ldrb.w	r2, [r2, #64]	; 0x40
    8a26:	cmp	r1, r2
    8a28:	beq.n	8a46 <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    8a2a:	ldrb.w	r4, [r3, #64]	; 0x40
    8a2e:	cmp	r4, r1
    8a30:	beq.n	8ab2 <SPIClass::setSCK(unsigned char)+0x9e>
    8a32:	ldrb.w	r4, [r3, #65]	; 0x41
    8a36:	cmp	r4, r1
    8a38:	beq.n	8a76 <SPIClass::setSCK(unsigned char)+0x62>
    8a3a:	ldrb.w	r4, [r3, #66]	; 0x42
    8a3e:	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    8a40:	it	eq
    8a42:	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    8a44:	beq.n	8a78 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    8a46:	pop	{r4, r5, r6}
    8a48:	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    8a4a:	cmp	r1, #13
    8a4c:	beq.n	8aa6 <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    8a4e:	cmp	r1, #14
    8a50:	beq.n	8a66 <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    8a52:	cmp	r1, #27
    8a54:	bne.n	8a1e <SPIClass::setSCK(unsigned char)+0xa>
    8a56:	ldr	r4, [pc, #100]	; (8abc <SPIClass::setSCK(unsigned char)+0xa8>)
    8a58:	ldrb	r2, [r4, #0]
    8a5a:	bic.w	r2, r2, #48	; 0x30
    8a5e:	orr.w	r2, r2, #32
    8a62:	strb	r2, [r4, #0]
    8a64:	b.n	8a1e <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    8a66:	ldr	r4, [pc, #84]	; (8abc <SPIClass::setSCK(unsigned char)+0xa8>)
    8a68:	ldrb	r2, [r4, #0]
    8a6a:	bic.w	r2, r2, #48	; 0x30
    8a6e:	orr.w	r2, r2, #16
    8a72:	strb	r2, [r4, #0]
    8a74:	b.n	8a1e <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    8a76:	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    8a78:	ldr	r5, [r3, #0]
    8a7a:	ldr	r4, [r3, #4]
    8a7c:	ldr	r5, [r5, #0]
    8a7e:	tst	r5, r4
    8a80:	beq.n	8aa2 <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    8a82:	ldr	r4, [pc, #60]	; (8ac0 <SPIClass::setSCK(unsigned char)+0xac>)
    8a84:	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    8a88:	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    8a8a:	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    8a8c:	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    8a8e:	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    8a90:	ldrb.w	r2, [r2, #64]	; 0x40
    8a94:	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    8a98:	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    8a9c:	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    8a9e:	ldr	r3, [r3, #68]	; 0x44
    8aa0:	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    8aa2:	strb	r1, [r0, #10]
				return;
    8aa4:	b.n	8a46 <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    8aa6:	ldr	r4, [pc, #20]	; (8abc <SPIClass::setSCK(unsigned char)+0xa8>)
    8aa8:	ldrb	r2, [r4, #0]
    8aaa:	bic.w	r2, r2, #48	; 0x30
    8aae:	strb	r2, [r4, #0]
    8ab0:	b.n	8a1e <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    8ab2:	movs	r1, #0
    8ab4:	b.n	8a78 <SPIClass::setSCK(unsigned char)+0x64>
    8ab6:	nop
    8ab8:	.word	0x0000ffd0
    8abc:	.word	0x1fff1c10
    8ac0:	.word	0x00010070

00008ac4 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    8ac4:	ldr	r2, [pc, #400]	; (8c58 <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8ac6:	ldr	r3, [pc, #404]	; (8c5c <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    8ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8acc:	ldr	r6, [pc, #400]	; (8c60 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8ace:	ldr.w	sl, [pc, #416]	; 8c70 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8ad2:	ldr	r4, [pc, #400]	; (8c64 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    8ad4:	ldr.w	r9, [pc, #400]	; 8c68 <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    8ad8:	umull	r5, r2, r2, r0
    8adc:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8ae0:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8ae4:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8ae8:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8aec:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8af0:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8af2:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8af4:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8af8:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8afc:	rsb	r6, fp, r7
    8b00:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8b04:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8b06:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8b08:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8b0a:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8b0e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8b12:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8b16:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8b1a:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8b1c:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8b20:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8b24:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8b28:	adds	r6, #1
    8b2a:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    8b2c:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    8b2e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    8b30:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    8b32:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    8b34:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    8b36:	movw	fp, #365	; 0x16d
    8b3a:	mov.w	r8, #100	; 0x64
    8b3e:	mov.w	sl, #400	; 0x190
    8b42:	b.n	8b62 <breakTime(long, tmElements_t&)+0x9e>
    8b44:	rsb	r5, r6, r5, asr #7
    8b48:	mls	r5, sl, r5, r3
    8b4c:	cbnz	r0, 8bac <breakTime(long, tmElements_t&)+0xe8>
    8b4e:	cmp	r5, #0
    8b50:	ite	ne
    8b52:	movne	r0, fp
    8b54:	moveq.w	r0, #366	; 0x16e
    8b58:	add	r2, r0
    8b5a:	cmp	ip, r2
    8b5c:	add.w	r4, r4, #1
    8b60:	bcc.n	8b8a <breakTime(long, tmElements_t&)+0xc6>
    8b62:	uxtb	r7, r4
    8b64:	addw	r3, r7, #1970	; 0x7b2
    8b68:	smull	r0, r5, r9, r3
    8b6c:	asrs	r6, r3, #31
    8b6e:	rsb	r0, r6, r5, asr #5
    8b72:	ands.w	lr, r3, #3
    8b76:	mls	r0, r8, r0, r3
    8b7a:	beq.n	8b44 <breakTime(long, tmElements_t&)+0x80>
    8b7c:	movw	r0, #365	; 0x16d
    8b80:	add	r2, r0
    8b82:	cmp	ip, r2
    8b84:	add.w	r4, r4, #1
    8b88:	bcs.n	8b62 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    8b8a:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    8b8c:	cmp.w	lr, #0
    8b90:	bne.n	8bb2 <breakTime(long, tmElements_t&)+0xee>
    8b92:	ldr	r0, [pc, #212]	; (8c68 <breakTime(long, tmElements_t&)+0x1a4>)
    8b94:	asrs	r6, r3, #31
    8b96:	smull	r4, r0, r0, r3
    8b9a:	rsb	r4, r6, r0, asr #5
    8b9e:	movs	r5, #100	; 0x64
    8ba0:	mls	r4, r5, r4, r3
    8ba4:	cbz	r4, 8c16 <breakTime(long, tmElements_t&)+0x152>
    8ba6:	mov.w	r4, #366	; 0x16e
    8baa:	b.n	8bb8 <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    8bac:	mov.w	r0, #366	; 0x16e
    8bb0:	b.n	8b58 <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    8bb2:	movw	r4, #365	; 0x16d
    8bb6:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    8bb8:	ldr	r0, [pc, #172]	; (8c68 <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    8bba:	ldr	r5, [pc, #176]	; (8c6c <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    8bbc:	smull	r7, r0, r0, r3
    8bc0:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    8bc4:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    8bc6:	rsb	r6, r6, r0, asr #7
    8bca:	movs	r4, #100	; 0x64
    8bcc:	mov.w	r0, #400	; 0x190
    8bd0:	mls	r6, r0, r6, r3
    8bd4:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    8bd8:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    8bdc:	movs	r0, #1
    8bde:	movs	r3, #0
    8be0:	b.n	8be8 <breakTime(long, tmElements_t&)+0x124>
    8be2:	adds	r0, #1
    8be4:	uxtb	r0, r0
    8be6:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    8be8:	cmp	r3, #1
    8bea:	uxtb	r7, r3
    8bec:	beq.n	8c30 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    8bee:	ldrb	r4, [r3, r5]
    8bf0:	cmp	r4, r2
    8bf2:	bhi.n	8c08 <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    8bf4:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    8bf6:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    8bfa:	bne.n	8be2 <breakTime(long, tmElements_t&)+0x11e>
    8bfc:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    8bfe:	adds	r2, #1
    8c00:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    8c02:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    8c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c08:	adds	r7, #1
    8c0a:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    8c0c:	adds	r2, #1
    8c0e:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    8c10:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    8c12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    8c16:	mov.w	r4, #400	; 0x190
    8c1a:	rsb	r0, r6, r0, asr #7
    8c1e:	mls	r0, r4, r0, r3
    8c22:	cmp	r0, #0
    8c24:	movw	r4, #365	; 0x16d
    8c28:	it	eq
    8c2a:	moveq.w	r4, #366	; 0x16e
    8c2e:	b.n	8bb8 <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    8c30:	cmp.w	lr, #0
    8c34:	bne.n	8c4c <breakTime(long, tmElements_t&)+0x188>
    8c36:	cmp.w	r8, #0
    8c3a:	bne.n	8c54 <breakTime(long, tmElements_t&)+0x190>
    8c3c:	cmp	r6, #0
    8c3e:	ite	ne
    8c40:	movne	r4, #28
    8c42:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    8c44:	cmp	r2, r4
    8c46:	bcc.n	8c50 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    8c48:	subs	r2, r2, r4
    8c4a:	b.n	8be2 <breakTime(long, tmElements_t&)+0x11e>
    8c4c:	movs	r4, #28
    8c4e:	b.n	8c44 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    8c50:	movs	r7, #2
    8c52:	b.n	8bfe <breakTime(long, tmElements_t&)+0x13a>
    8c54:	movs	r4, #29
    8c56:	b.n	8c44 <breakTime(long, tmElements_t&)+0x180>
    8c58:	.word	0xc22e4507
    8c5c:	.word	0x88888889
    8c60:	.word	0x91a2b3c5
    8c64:	.word	0xaaaaaaab
    8c68:	.word	0x51eb851f
    8c6c:	.word	0x00010064
    8c70:	.word	0x24924925

00008c74 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8c74:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    8c76:	ldr	r1, [pc, #12]	; (8c84 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8c78:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    8c7a:	bl	8ac4 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    8c7e:	ldr	r3, [pc, #8]	; (8c88 <refreshCache(long) [clone .part.0]+0x14>)
    8c80:	str	r4, [r3, #0]
    8c82:	pop	{r4, pc}
    8c84:	.word	0x1fff1ab4
    8c88:	.word	0x1fff1ab0

00008c8c <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8c8c:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c8e:	ldr	r4, [pc, #128]	; (8d10 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8c90:	ldr	r6, [pc, #128]	; (8d14 <now()+0x88>)
    8c92:	ldr	r3, [r4, #0]
    8c94:	ldr	r2, [r6, #0]
    8c96:	ldr	r5, [pc, #128]	; (8d18 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8c98:	sub	sp, #12
    8c9a:	ldr	r0, [r5, #0]
    8c9c:	str	r3, [sp, #0]
	return ret;
    8c9e:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8ca0:	subs	r3, r3, r2
    8ca2:	cmp.w	r3, #1000	; 0x3e8
    8ca6:	bcc.n	8cc8 <now()+0x3c>
    8ca8:	adds	r0, #1
    8caa:	b.n	8cae <now()+0x22>
    8cac:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8cae:	ldr	r3, [r4, #0]
    8cb0:	str	r3, [sp, #0]
	return ret;
    8cb2:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    8cb4:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8cb8:	subs	r3, r3, r2
    8cba:	cmp.w	r3, #1000	; 0x3e8
    8cbe:	add.w	r1, r0, #1
    8cc2:	bcs.n	8cac <now()+0x20>
    8cc4:	str	r0, [r5, #0]
    8cc6:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8cc8:	ldr	r7, [pc, #80]	; (8d1c <now()+0x90>)
    8cca:	ldr	r3, [r7, #0]
    8ccc:	cmp	r0, r3
    8cce:	bcc.n	8cf0 <now()+0x64>
    if (getTimePtr != 0) {
    8cd0:	ldr	r3, [pc, #76]	; (8d20 <now()+0x94>)
    8cd2:	ldr	r3, [r3, #0]
    8cd4:	cbz	r3, 8cf0 <now()+0x64>
      time_t t = getTimePtr();
    8cd6:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8cd8:	ldr	r3, [pc, #72]	; (8d24 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    8cda:	cbnz	r0, 8cf4 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8cdc:	ldr	r1, [pc, #72]	; (8d28 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8cde:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ce0:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8ce2:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ce4:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8ce6:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ce8:	it	ne
    8cea:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8cec:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8cee:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    8cf0:	add	sp, #12
    8cf2:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8cf4:	ldr	r2, [r4, #0]
    8cf6:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8cf8:	ldr	r3, [r3, #0]
  Status = timeSet;
    8cfa:	ldr	r2, [pc, #44]	; (8d28 <now()+0x9c>)
	return ret;
    8cfc:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    8cfe:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    8d00:	add	r3, r0
  Status = timeSet;
    8d02:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    8d04:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8d06:	str	r3, [r7, #0]
  Status = timeSet;
    8d08:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    8d0a:	add	sp, #12
    8d0c:	pop	{r4, r5, r6, r7, pc}
    8d0e:	nop
    8d10:	.word	0x1fff1ae4
    8d14:	.word	0x1fff1ac8
    8d18:	.word	0x1fff1abc
    8d1c:	.word	0x1fff1acc
    8d20:	.word	0x1fff1ac4
    8d24:	.word	0x1fff09bc
    8d28:	.word	0x1fff1ac0

00008d2c <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    8d2c:	push	{r3, lr}
  return hour(now()); 
    8d2e:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8d32:	ldr	r3, [pc, #16]	; (8d44 <hour()+0x18>)
    8d34:	ldr	r3, [r3, #0]
    8d36:	cmp	r0, r3
    8d38:	beq.n	8d3e <hour()+0x12>
    8d3a:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    8d3e:	ldr	r3, [pc, #8]	; (8d48 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    8d40:	ldrb	r0, [r3, #2]
    8d42:	pop	{r3, pc}
    8d44:	.word	0x1fff1ab0
    8d48:	.word	0x1fff1ab4

00008d4c <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    8d4c:	push	{r3, lr}
  return minute(now()); 
    8d4e:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8d52:	ldr	r3, [pc, #16]	; (8d64 <minute()+0x18>)
    8d54:	ldr	r3, [r3, #0]
    8d56:	cmp	r0, r3
    8d58:	beq.n	8d5e <minute()+0x12>
    8d5a:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    8d5e:	ldr	r3, [pc, #8]	; (8d68 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    8d60:	ldrb	r0, [r3, #1]
    8d62:	pop	{r3, pc}
    8d64:	.word	0x1fff1ab0
    8d68:	.word	0x1fff1ab4

00008d6c <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    8d6c:	push	{r3, lr}
  return second(now()); 
    8d6e:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8d72:	ldr	r3, [pc, #16]	; (8d84 <second()+0x18>)
    8d74:	ldr	r3, [r3, #0]
    8d76:	cmp	r0, r3
    8d78:	beq.n	8d7e <second()+0x12>
    8d7a:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    8d7e:	ldr	r3, [pc, #8]	; (8d88 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    8d80:	ldrb	r0, [r3, #0]
    8d82:	pop	{r3, pc}
    8d84:	.word	0x1fff1ab0
    8d88:	.word	0x1fff1ab4

00008d8c <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    8d8c:	push	{r3, lr}
  return(day(now())); 
    8d8e:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8d92:	ldr	r3, [pc, #16]	; (8da4 <day()+0x18>)
    8d94:	ldr	r3, [r3, #0]
    8d96:	cmp	r0, r3
    8d98:	beq.n	8d9e <day()+0x12>
    8d9a:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    8d9e:	ldr	r3, [pc, #8]	; (8da8 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8da0:	ldrb	r0, [r3, #4]
    8da2:	pop	{r3, pc}
    8da4:	.word	0x1fff1ab0
    8da8:	.word	0x1fff1ab4

00008dac <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    8dac:	push	{r3, lr}
  return month(now()); 
    8dae:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8db2:	ldr	r3, [pc, #16]	; (8dc4 <month()+0x18>)
    8db4:	ldr	r3, [r3, #0]
    8db6:	cmp	r0, r3
    8db8:	beq.n	8dbe <month()+0x12>
    8dba:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    8dbe:	ldr	r3, [pc, #8]	; (8dc8 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8dc0:	ldrb	r0, [r3, #5]
    8dc2:	pop	{r3, pc}
    8dc4:	.word	0x1fff1ab0
    8dc8:	.word	0x1fff1ab4

00008dcc <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    8dcc:	push	{r3, lr}
  return year(now()); 
    8dce:	bl	8c8c <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    8dd2:	ldr	r3, [pc, #20]	; (8de8 <year()+0x1c>)
    8dd4:	ldr	r3, [r3, #0]
    8dd6:	cmp	r0, r3
    8dd8:	beq.n	8dde <year()+0x12>
    8dda:	bl	8c74 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    8dde:	ldr	r3, [pc, #12]	; (8dec <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    8de0:	ldrb	r0, [r3, #6]
}
    8de2:	addw	r0, r0, #1970	; 0x7b2
    8de6:	pop	{r3, pc}
    8de8:	.word	0x1fff1ab0
    8dec:	.word	0x1fff1ab4

00008df0 <usb_mtp_configure>:
	usb_receive(MTP_EVENT_ENDPOINT, xfer);

	return MTP_EVENT_SIZE;
}
#else
void usb_mtp_configure(void) {}
    8df0:	bx	lr
    8df2:	nop

00008df4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8df4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8df6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8dfa:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8dfe:	bne.n	8edc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8e00:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8e02:	bcc.n	8e88 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8e04:	ldr.w	r3, [r1], #4
    8e08:	str.w	r3, [r0], #4
    8e0c:	ldr.w	r3, [r1], #4
    8e10:	str.w	r3, [r0], #4
    8e14:	ldr.w	r3, [r1], #4
    8e18:	str.w	r3, [r0], #4
    8e1c:	ldr.w	r3, [r1], #4
    8e20:	str.w	r3, [r0], #4
    8e24:	ldr.w	r3, [r1], #4
    8e28:	str.w	r3, [r0], #4
    8e2c:	ldr.w	r3, [r1], #4
    8e30:	str.w	r3, [r0], #4
    8e34:	ldr.w	r3, [r1], #4
    8e38:	str.w	r3, [r0], #4
    8e3c:	ldr.w	r3, [r1], #4
    8e40:	str.w	r3, [r0], #4
    8e44:	ldr.w	r3, [r1], #4
    8e48:	str.w	r3, [r0], #4
    8e4c:	ldr.w	r3, [r1], #4
    8e50:	str.w	r3, [r0], #4
    8e54:	ldr.w	r3, [r1], #4
    8e58:	str.w	r3, [r0], #4
    8e5c:	ldr.w	r3, [r1], #4
    8e60:	str.w	r3, [r0], #4
    8e64:	ldr.w	r3, [r1], #4
    8e68:	str.w	r3, [r0], #4
    8e6c:	ldr.w	r3, [r1], #4
    8e70:	str.w	r3, [r0], #4
    8e74:	ldr.w	r3, [r1], #4
    8e78:	str.w	r3, [r0], #4
    8e7c:	ldr.w	r3, [r1], #4
    8e80:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8e84:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8e86:	bcs.n	8e04 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8e88:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8e8a:	bcc.n	8eb0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8e8c:	ldr.w	r3, [r1], #4
    8e90:	str.w	r3, [r0], #4
    8e94:	ldr.w	r3, [r1], #4
    8e98:	str.w	r3, [r0], #4
    8e9c:	ldr.w	r3, [r1], #4
    8ea0:	str.w	r3, [r0], #4
    8ea4:	ldr.w	r3, [r1], #4
    8ea8:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8eac:	subs	r2, #16
	bhs	.Lmid_block_loop
    8eae:	bcs.n	8e8c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8eb0:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8eb2:	bcc.n	8ec0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8eb4:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8eb8:	str.w	r3, [r0], #4
	subs	r2, #4
    8ebc:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8ebe:	bcs.n	8eb4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8ec0:	adds	r2, #4
	beq	.Ldone
    8ec2:	beq.n	8ed6 <memcpy+0xe2>

	lsls	r2, r2, #31
    8ec4:	lsls	r2, r2, #31
	itt ne
    8ec6:	itt	ne
	ldrbne  r3, [r1], #1
    8ec8:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8ecc:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8ed0:	bcc.n	8ed6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8ed2:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8ed4:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8ed6:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8ed8:	bx	lr
    8eda:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8edc:	cmp	r2, #8
	blo	.Lbyte_copy
    8ede:	bcc.n	8f08 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8ee0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8ee2:	beq.n	8e00 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8ee4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8ee8:	beq.n	8e00 <memcpy+0xc>

	rsb	r3, #4
    8eea:	rsb	r3, r3, #4
	subs	r2, r3
    8eee:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8ef0:	lsls	r3, r3, #31
	itt ne
    8ef2:	itt	ne
	ldrbne  r3, [r1], #1
    8ef4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8ef8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8efc:	bcc.n	8e00 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8efe:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8f02:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8f06:	b.n	8e00 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8f08:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8f0a:	bcc.n	8ec0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8f0c:	subs	r2, #1
	ldrb    r3, [r1], #1
    8f0e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8f12:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8f16:	bcs.n	8f0c <memcpy+0x118>

	ldrb	r3, [r1]
    8f18:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8f1a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8f1c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8f1e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8f20:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8f22:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8f24:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8f26:	bx	lr

00008f28 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8f28:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    8f2a:	ldr	r5, [pc, #60]	; (8f68 <usb_serial_getchar+0x40>)
    8f2c:	ldr	r0, [r5, #0]
    8f2e:	cbz	r0, 8f50 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    8f30:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    8f32:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8f34:	adds	r1, r0, r3
    8f36:	adds	r3, #1
	if (i >= rx_packet->len) {
    8f38:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    8f3a:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    8f3c:	bcs.n	8f44 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    8f3e:	strh	r3, [r0, #2]
	}
	return c;
    8f40:	mov	r0, r4
}
    8f42:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    8f44:	bl	9624 <usb_free>
		rx_packet = NULL;
    8f48:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    8f4a:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8f4c:	str	r3, [r5, #0]
    8f4e:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8f50:	ldr	r3, [pc, #24]	; (8f6c <usb_serial_getchar+0x44>)
    8f52:	ldrb	r3, [r3, #0]
    8f54:	cbz	r3, 8f62 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8f56:	movs	r0, #2
    8f58:	bl	9670 <usb_rx>
    8f5c:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    8f5e:	cmp	r0, #0
    8f60:	bne.n	8f30 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8f62:	mov.w	r0, #4294967295
    8f66:	pop	{r3, r4, r5, pc}
    8f68:	.word	0x1fff1adc
    8f6c:	.word	0x1fff1be8

00008f70 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    8f70:	push	{r4, lr}
	if (!rx_packet) {
    8f72:	ldr	r4, [pc, #36]	; (8f98 <usb_serial_peekchar+0x28>)
    8f74:	ldr	r0, [r4, #0]
    8f76:	cbz	r0, 8f80 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    8f78:	ldrh	r3, [r0, #2]
    8f7a:	add	r0, r3
    8f7c:	ldrb	r0, [r0, #8]
}
    8f7e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8f80:	ldr	r3, [pc, #24]	; (8f9c <usb_serial_peekchar+0x2c>)
    8f82:	ldrb	r3, [r3, #0]
    8f84:	cbz	r3, 8f92 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    8f86:	movs	r0, #2
    8f88:	bl	9670 <usb_rx>
    8f8c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    8f8e:	cmp	r0, #0
    8f90:	bne.n	8f78 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    8f92:	mov.w	r0, #4294967295
    8f96:	pop	{r4, pc}
    8f98:	.word	0x1fff1adc
    8f9c:	.word	0x1fff1be8

00008fa0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8fa0:	ldr	r3, [pc, #16]	; (8fb4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    8fa2:	ldr	r2, [pc, #20]	; (8fb8 <usb_serial_available+0x18>)
    8fa4:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    8fa6:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    8fa8:	cbz	r3, 8fb2 <usb_serial_available+0x12>
    8faa:	ldrh	r2, [r3, #0]
    8fac:	ldrh	r3, [r3, #2]
    8fae:	subs	r3, r2, r3
    8fb0:	add	r0, r3
	return count;
}
    8fb2:	bx	lr
    8fb4:	.word	0x1fff1adc
    8fb8:	.word	0x1fff1f54

00008fbc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    8fbc:	ldr	r3, [pc, #44]	; (8fec <usb_serial_flush_input+0x30>)
    8fbe:	ldrb	r3, [r3, #0]
    8fc0:	cbz	r3, 8fea <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    8fc2:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    8fc4:	ldr	r4, [pc, #40]	; (8ff0 <usb_serial_flush_input+0x34>)
    8fc6:	ldr	r0, [r4, #0]
    8fc8:	cbz	r0, 8fde <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    8fca:	bl	9624 <usb_free>
		rx_packet = NULL;
    8fce:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8fd0:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    8fd2:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8fd4:	bl	9670 <usb_rx>
		if (!rx) break;
    8fd8:	cbz	r0, 8fe8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    8fda:	bl	9624 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    8fde:	movs	r0, #2
    8fe0:	bl	9670 <usb_rx>
		if (!rx) break;
    8fe4:	cmp	r0, #0
    8fe6:	bne.n	8fda <usb_serial_flush_input+0x1e>
    8fe8:	pop	{r4, pc}
    8fea:	bx	lr
    8fec:	.word	0x1fff1be8
    8ff0:	.word	0x1fff1adc

00008ff4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8ff4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8ff8:	ldr.w	r9, [pc, #248]	; 90f4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    8ffc:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    8ffe:	movs	r2, #1
    9000:	strb.w	r2, [r9]
	while (size > 0) {
    9004:	str	r1, [sp, #4]
    9006:	cbz	r1, 9064 <usb_serial_write+0x70>
    9008:	ldr.w	r8, [pc, #236]	; 90f8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    900c:	ldr	r7, [pc, #216]	; (90e8 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    900e:	ldr	r6, [sp, #4]
    9010:	mov	fp, r0
		if (!tx_packet) {
    9012:	ldr.w	r0, [r8]
    9016:	cbz	r0, 9086 <usb_serial_write+0x92>
    9018:	ldr	r5, [pc, #208]	; (90ec <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    901a:	ldrh	r4, [r0, #2]
    901c:	rsb	r1, r4, #64	; 0x40
    9020:	cmp	r1, r6
    9022:	it	cs
    9024:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9026:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    902a:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    902c:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    9030:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    9032:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    9034:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    9038:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    903c:	cbz	r1, 9054 <usb_serial_write+0x60>
    903e:	subs	r4, #1
    9040:	add	r2, r4
    9042:	add	r1, fp
    9044:	ldrb.w	r4, [fp], #1
    9048:	strb.w	r4, [r2, #1]!
    904c:	cmp	fp, r1
    904e:	bne.n	9044 <usb_serial_write+0x50>
    9050:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    9054:	cmp.w	lr, #63	; 0x3f
    9058:	bhi.n	9072 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    905a:	ldr	r2, [pc, #148]	; (90f0 <usb_serial_write+0xfc>)
    905c:	movs	r1, #5
    905e:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    9060:	cmp	r6, #0
    9062:	bne.n	9012 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    9064:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    9066:	movs	r3, #0
    9068:	strb.w	r3, [r9]
	return ret;
}
    906c:	add	sp, #12
    906e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9072:	movs	r2, #64	; 0x40
    9074:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9076:	mov	r1, r0
    9078:	movs	r0, #3
    907a:	bl	97e0 <usb_tx>
			tx_packet = NULL;
    907e:	movs	r2, #0
    9080:	str.w	r2, [r8]
    9084:	b.n	905a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9086:	ldrb	r2, [r7, #0]
    9088:	cbz	r2, 90d6 <usb_serial_write+0xe2>
    908a:	ldr	r5, [pc, #96]	; (90ec <usb_serial_write+0xf8>)
    908c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9090:	mov.w	sl, #1
    9094:	b.n	90a6 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9096:	subs	r4, #1
    9098:	beq.n	90c8 <usb_serial_write+0xd4>
    909a:	ldrb	r2, [r5, #0]
    909c:	cbnz	r2, 90c8 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    909e:	bl	a530 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    90a2:	ldrb	r2, [r7, #0]
    90a4:	cbz	r2, 90d6 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    90a6:	movs	r0, #3
    90a8:	bl	96ac <usb_tx_packet_count>
    90ac:	cmp	r0, #7
    90ae:	bhi.n	9096 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    90b0:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    90b4:	bl	95e4 <usb_malloc>
    90b8:	str.w	r0, [r8]
					if (tx_packet) break;
    90bc:	cmp	r0, #0
    90be:	bne.n	901a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    90c0:	ldr	r3, [pc, #48]	; (90f4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    90c2:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    90c4:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    90c6:	bne.n	909a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    90c8:	movs	r3, #1
					return -1;
    90ca:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    90ce:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    90d0:	add	sp, #12
    90d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    90d6:	movs	r3, #0
					return -1;
    90d8:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    90dc:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    90e0:	add	sp, #12
    90e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e6:	nop
    90e8:	.word	0x1fff1be8
    90ec:	.word	0x1fff1ad8
    90f0:	.word	0x1fff1ad0
    90f4:	.word	0x1fff1ad1
    90f8:	.word	0x1fff1ad4

000090fc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    90fc:	push	{lr}
    90fe:	sub	sp, #12
    9100:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9102:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9104:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9108:	mov	r0, r3
    910a:	bl	8ff4 <usb_serial_write>
}
    910e:	add	sp, #12
    9110:	ldr.w	pc, [sp], #4

00009114 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    9114:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    9116:	ldr	r5, [pc, #56]	; (9150 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    9118:	ldr	r4, [pc, #56]	; (9154 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    911a:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    911c:	movs	r3, #1
    911e:	strb	r3, [r4, #0]
	if (!tx_packet) {
    9120:	cbz	r0, 912e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9122:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    9124:	movs	r3, #0
    9126:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    9128:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    912c:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    912e:	ldr	r3, [pc, #40]	; (9158 <usb_serial_write_buffer_free+0x44>)
    9130:	ldrb	r3, [r3, #0]
    9132:	cbnz	r3, 913a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    9134:	movs	r0, #0
    9136:	strb	r0, [r4, #0]
			return 0;
    9138:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    913a:	movs	r0, #3
    913c:	bl	96ac <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    9140:	cmp	r0, #7
    9142:	bhi.n	9134 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    9144:	bl	95e4 <usb_malloc>
    9148:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    914a:	cmp	r0, #0
    914c:	bne.n	9122 <usb_serial_write_buffer_free+0xe>
    914e:	b.n	9134 <usb_serial_write_buffer_free+0x20>
    9150:	.word	0x1fff1ad4
    9154:	.word	0x1fff1ad1
    9158:	.word	0x1fff1be8

0000915c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    915c:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    915e:	ldr	r3, [pc, #68]	; (91a4 <usb_serial_flush_output+0x48>)
    9160:	ldrb	r3, [r3, #0]
    9162:	cbz	r3, 9188 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    9164:	ldr	r6, [pc, #64]	; (91a8 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    9166:	ldr	r5, [pc, #68]	; (91ac <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    9168:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    916a:	movs	r7, #1
    916c:	strb	r7, [r5, #0]
	if (tx_packet) {
    916e:	cbz	r4, 918a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9170:	ldr	r2, [pc, #60]	; (91b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9172:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9174:	movs	r7, #0
    9176:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9178:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    917a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    917c:	movs	r0, #3
    917e:	bl	97e0 <usb_tx>
		tx_packet = NULL;
    9182:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9184:	movs	r3, #0
    9186:	strb	r3, [r5, #0]
    9188:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    918a:	bl	95e4 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    918e:	ldr	r3, [pc, #32]	; (91b0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9190:	cbz	r0, 919e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9192:	mov	r1, r0
    9194:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9196:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9198:	bl	97e0 <usb_tx>
    919c:	b.n	9184 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    919e:	strb	r7, [r3, #0]
    91a0:	b.n	9184 <usb_serial_flush_output+0x28>
    91a2:	nop
    91a4:	.word	0x1fff1be8
    91a8:	.word	0x1fff1ad4
    91ac:	.word	0x1fff1ad1
    91b0:	.word	0x1fff1ad0

000091b4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    91b4:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    91b6:	ldr	r3, [pc, #56]	; (91f0 <usb_serial_flush_callback+0x3c>)
    91b8:	ldrb	r3, [r3, #0]
    91ba:	cbnz	r3, 91da <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    91bc:	ldr	r4, [pc, #52]	; (91f4 <usb_serial_flush_callback+0x40>)
    91be:	ldr	r1, [r4, #0]
    91c0:	cbz	r1, 91dc <usb_serial_flush_callback+0x28>
    91c2:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    91c6:	ldrh	r3, [r1, #2]
    91c8:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    91ca:	movs	r0, #3
    91cc:	bl	97e0 <usb_tx>
		tx_packet = NULL;
    91d0:	str	r5, [r4, #0]
    91d2:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    91d4:	ldr	r3, [pc, #32]	; (91f8 <usb_serial_flush_callback+0x44>)
    91d6:	movs	r2, #1
    91d8:	strb	r2, [r3, #0]
    91da:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    91dc:	bl	95e4 <usb_malloc>
		if (tx) {
    91e0:	cmp	r0, #0
    91e2:	beq.n	91d4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    91e4:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    91e6:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    91ea:	movs	r0, #3
    91ec:	b.w	97e0 <usb_tx>
    91f0:	.word	0x1fff1ad1
    91f4:	.word	0x1fff1ad4
    91f8:	.word	0x1fff1ad0

000091fc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    91fc:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    91fe:	ldr	r4, [pc, #64]	; (9240 <fault_isr+0x44>)
    9200:	b.n	9214 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9202:	ldr	r3, [r4, #0]
    9204:	lsls	r1, r3, #21
    9206:	bmi.n	9224 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9208:	ldr	r3, [r4, #0]
    920a:	lsls	r2, r3, #20
    920c:	bmi.n	922e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    920e:	ldr	r3, [r4, #0]
    9210:	lsls	r3, r3, #19
    9212:	bmi.n	9238 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9214:	ldr	r3, [r4, #0]
    9216:	lsls	r0, r3, #13
    9218:	bpl.n	9202 <fault_isr+0x6>
    921a:	bl	9864 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    921e:	ldr	r3, [r4, #0]
    9220:	lsls	r1, r3, #21
    9222:	bpl.n	9208 <fault_isr+0xc>
    9224:	bl	ab3c <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9228:	ldr	r3, [r4, #0]
    922a:	lsls	r2, r3, #20
    922c:	bpl.n	920e <fault_isr+0x12>
    922e:	bl	a918 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9232:	ldr	r3, [r4, #0]
    9234:	lsls	r3, r3, #19
    9236:	bpl.n	9214 <fault_isr+0x18>
    9238:	bl	ae34 <uart2_status_isr>
    923c:	b.n	9214 <fault_isr+0x18>
    923e:	nop
    9240:	.word	0x40048034

00009244 <unused_isr>:
	}
}

void unused_isr(void)
{
    9244:	push	{r3, lr}
	fault_isr();
    9246:	bl	91fc <fault_isr>
    924a:	nop

0000924c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    924c:	ldr	r3, [pc, #4]	; (9254 <startup_early_hook+0x8>)
    924e:	movs	r2, #16
    9250:	strh	r2, [r3, #0]
    9252:	bx	lr
    9254:	.word	0x40052000

00009258 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    9258:	bx	lr
    925a:	nop

0000925c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    925c:	ldr	r1, [pc, #36]	; (9284 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    925e:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    9260:	ldr	r3, [r1, #0]
	if (incr != 0) {
    9262:	cbz	r0, 9272 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9264:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9266:	add	r0, r3
    9268:	sub.w	r2, r2, #8192	; 0x2000
    926c:	cmp	r0, r2
    926e:	bcs.n	9276 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9270:	str	r0, [r1, #0]
	}
	return prev;
    9272:	mov	r0, r3
}
    9274:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9276:	bl	bb64 <__errno>
    927a:	movs	r3, #12
    927c:	str	r3, [r0, #0]
			return (void *)-1;
    927e:	mov.w	r0, #4294967295
    9282:	pop	{r3, pc}
    9284:	.word	0x1fff09c0

00009288 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9288:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    928a:	ldr	r3, [pc, #68]	; (92d0 <digitalWrite.part.1+0x48>)
    928c:	ldr.w	r2, [r3, r0, lsl #3]
    9290:	ldrb.w	r4, [r2, #640]	; 0x280
    9294:	cbz	r4, 92a4 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    9296:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9298:	cbz	r1, 92ba <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    929a:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    929e:	ldr.w	r4, [sp], #4
    92a2:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    92a4:	add.w	r3, r3, r0, lsl #3
    92a8:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92aa:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    92ac:	cbnz	r1, 92c4 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    92ae:	bic.w	r2, r2, #2
    92b2:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92b4:	ldr.w	r4, [sp], #4
    92b8:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    92ba:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92be:	ldr.w	r4, [sp], #4
    92c2:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92c4:	orr.w	r2, r2, #3
    92c8:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92ca:	ldr.w	r4, [sp], #4
    92ce:	bx	lr
    92d0:	.word	0x00010070

000092d4 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    92d4:	ldr	r2, [pc, #112]	; (9348 <pinMode.part.2+0x74>)
    92d6:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    92da:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    92dc:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    92de:	beq.n	9304 <pinMode.part.2+0x30>
    92e0:	cmp	r1, #4
    92e2:	beq.n	931c <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    92e4:	ldr.w	r0, [r2, r0, lsl #3]
    92e8:	movs	r2, #0
    92ea:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    92ee:	cbz	r1, 92fc <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    92f0:	cmp	r1, #2
    92f2:	beq.n	9336 <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    92f4:	cmp	r1, #3
    92f6:	beq.n	933e <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    92f8:	str	r2, [r3, #0]
    92fa:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    92fc:	mov.w	r2, #256	; 0x100
    9300:	str	r2, [r3, #0]
    9302:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9304:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9308:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    930c:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9310:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9312:	ldr	r2, [r3, #0]
    9314:	bic.w	r2, r2, #32
    9318:	str	r2, [r3, #0]
    931a:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    931c:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9320:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9324:	movs	r0, #1
    9326:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    932a:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    932c:	ldr	r2, [r3, #0]
    932e:	orr.w	r2, r2, #32
    9332:	str	r2, [r3, #0]
    9334:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9336:	movw	r2, #259	; 0x103
    933a:	str	r2, [r3, #0]
    933c:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    933e:	mov.w	r2, #258	; 0x102
    9342:	str	r2, [r3, #0]
    9344:	bx	lr
    9346:	nop
    9348:	.word	0x00010070

0000934c <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    934c:	adds	r0, #16
    934e:	ldr	r3, [pc, #8]	; (9358 <attachInterruptVector+0xc>)
    9350:	str.w	r1, [r3, r0, lsl #2]
    9354:	bx	lr
    9356:	nop
    9358:	.word	0x1fff0200

0000935c <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    935c:	push	{r4, r5}
	RTC_SR = 0;
    935e:	ldr	r3, [pc, #20]	; (9374 <rtc_set+0x18>)
	RTC_TPR = 0;
    9360:	ldr	r5, [pc, #20]	; (9378 <rtc_set+0x1c>)
	RTC_TSR = t;
    9362:	ldr	r4, [pc, #24]	; (937c <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9364:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9366:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9368:	str	r2, [r3, #0]
	RTC_TPR = 0;
    936a:	str	r2, [r5, #0]
	RTC_TSR = t;
    936c:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    936e:	str	r1, [r3, #0]
}
    9370:	pop	{r4, r5}
    9372:	bx	lr
    9374:	.word	0x4003d014
    9378:	.word	0x4003d004
    937c:	.word	0x4003d000

00009380 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9380:	cmp	r0, #63	; 0x3f
    9382:	bhi.n	9388 <digitalWrite+0x8>
    9384:	b.w	9288 <digitalWrite.part.1>
    9388:	bx	lr
    938a:	nop

0000938c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    938c:	cmp	r0, #63	; 0x3f
    938e:	bhi.n	9394 <pinMode+0x8>
    9390:	b.w	92d4 <pinMode.part.2>
    9394:	bx	lr
    9396:	nop

00009398 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9398:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    939a:	ldr	r1, [pc, #48]	; (93cc <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    939c:	ldr	r3, [pc, #48]	; (93d0 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    939e:	ldr	r2, [pc, #52]	; (93d4 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    93a0:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    93a2:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    93a4:	ldr	r2, [r2, #0]
	__enable_irq();
    93a6:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    93a8:	lsls	r2, r2, #5
    93aa:	bpl.n	93b2 <micros+0x1a>
    93ac:	cmp	r3, #50	; 0x32
    93ae:	it	hi
    93b0:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    93b2:	ldr	r1, [pc, #36]	; (93d8 <micros+0x40>)
    93b4:	rsb	r3, r3, #95744	; 0x17600
    93b8:	mov.w	r2, #1000	; 0x3e8
    93bc:	adds	r3, #255	; 0xff
    93be:	umull	r1, r3, r1, r3
    93c2:	mul.w	r0, r2, r0
}
    93c6:	add.w	r0, r0, r3, lsr #6
    93ca:	bx	lr
    93cc:	.word	0x1fff1ae4
    93d0:	.word	0xe000e018
    93d4:	.word	0xe000ed04
    93d8:	.word	0xaaaaaaab

000093dc <delay>:

void delay(uint32_t ms)
{
    93dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    93e0:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    93e2:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    93e4:	ldr	r7, [pc, #128]	; (9468 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    93e6:	ldr	r3, [pc, #132]	; (946c <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    93e8:	ldr	r2, [pc, #132]	; (9470 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    93ea:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    93ec:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    93ee:	ldr	r2, [r2, #0]
	__enable_irq();
    93f0:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    93f2:	lsls	r2, r2, #5
    93f4:	bpl.n	93fc <delay+0x20>
    93f6:	cmp	r3, #50	; 0x32
    93f8:	it	hi
    93fa:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    93fc:	cbz	r5, 9464 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    93fe:	rsb	r3, r3, #95744	; 0x17600
    9402:	ldr	r6, [pc, #112]	; (9474 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9404:	ldr.w	r9, [pc, #100]	; 946c <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9408:	ldr.w	r8, [pc, #100]	; 9470 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    940c:	adds	r3, #255	; 0xff
    940e:	mov.w	r2, #1000	; 0x3e8
    9412:	umull	r1, r3, r6, r3
    9416:	mul.w	r4, r2, r4
    941a:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    941e:	cpsid	i
	current = SYST_CVR;
    9420:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9424:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9426:	ldr.w	lr, [r8]
	__enable_irq();
    942a:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    942c:	rsb	r3, r1, #95744	; 0x17600
    9430:	adds	r3, #255	; 0xff
    9432:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9436:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    943a:	rsb	r3, r4, r3, lsr #6
    943e:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9442:	beq.n	944a <delay+0x6e>
    9444:	cmp	r1, #50	; 0x32
    9446:	it	hi
    9448:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    944a:	mla	r3, r0, r2, r3
    944e:	cmp.w	r3, #1000	; 0x3e8
    9452:	bcc.n	945e <delay+0x82>
				ms--;
				if (ms == 0) return;
    9454:	subs	r5, #1
    9456:	beq.n	9464 <delay+0x88>
				start += 1000;
    9458:	add.w	r4, r4, #1000	; 0x3e8
    945c:	b.n	941e <delay+0x42>
			}
			yield();
    945e:	bl	a530 <yield>
		}
    9462:	b.n	941e <delay+0x42>
    9464:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9468:	.word	0x1fff1ae4
    946c:	.word	0xe000e018
    9470:	.word	0xe000ed04
    9474:	.word	0xaaaaaaab

00009478 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    9478:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    947a:	ldr	r3, [pc, #312]	; (95b4 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    947c:	ldr	r0, [pc, #312]	; (95b8 <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    947e:	ldr.w	ip, [pc, #348]	; 95dc <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9482:	ldr	r4, [pc, #312]	; (95bc <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9484:	ldr	r1, [pc, #312]	; (95c0 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9486:	ldr.w	lr, [pc, #344]	; 95e0 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    948a:	ldr	r6, [pc, #312]	; (95c4 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    948c:	ldr	r5, [pc, #312]	; (95c8 <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    948e:	ldr	r7, [pc, #316]	; (95cc <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9490:	mov.w	r2, #134217728	; 0x8000000
    9494:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9496:	mov.w	r2, #268435456	; 0x10000000
    949a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    949c:	mov.w	r2, #536870912	; 0x20000000
    94a0:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    94a2:	mov.w	r2, #1073741824	; 0x40000000
    94a6:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    94a8:	mov.w	r2, #2147483648	; 0x80000000
    94ac:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    94ae:	movs	r2, #0
    94b0:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94b2:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    94b4:	movw	r0, #49151	; 0xbfff
    94b8:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    94bc:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    94c0:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    94c2:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    94c6:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    94c8:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    94ca:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    94cc:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    94d0:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    94d2:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    94d6:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    94d8:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    94dc:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    94de:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    94e2:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    94e6:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    94ea:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    94ee:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    94f2:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    94f4:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    94f8:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    94fa:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    94fc:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    94fe:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9502:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9504:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9506:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9508:	ldr	r4, [pc, #196]	; (95d0 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    950a:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    950c:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    950e:	movs	r1, #9
    9510:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9512:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9516:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    951a:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    951c:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    951e:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9520:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9522:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9524:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9526:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    952a:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    952e:	add.w	r7, r7, #520192	; 0x7f000
    9532:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9534:	addw	r4, r4, #2044	; 0x7fc
    9538:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    953a:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    953c:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    953e:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9540:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9544:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9546:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    954a:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    954e:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9550:	sub.w	r4, r4, #460800	; 0x70800
    9554:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9558:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    955a:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    955c:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9560:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9562:	ldr	r0, [pc, #112]	; (95d4 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9564:	orr.w	r1, r1, #512	; 0x200
    9568:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    956a:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    956c:	ldr	r4, [pc, #104]	; (95d8 <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    956e:	add.w	lr, lr, #65280	; 0xff00
    9572:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9576:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    957a:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    957e:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9582:	orr.w	r1, r1, #33554432	; 0x2000000
    9586:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9588:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    958c:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9590:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9592:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9594:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9596:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9598:	str	r2, [r4, #0]
#endif
	analog_init();
    959a:	bl	a818 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    959e:	movs	r0, #25
    95a0:	bl	93dc <delay>
	usb_init();
    95a4:	bl	a290 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    95a8:	movw	r0, #275	; 0x113
}
    95ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    95b0:	b.w	93dc <delay>
    95b4:	.word	0xe000e104
    95b8:	.word	0x40038004
    95bc:	.word	0x40038014
    95c0:	.word	0x4003801c
    95c4:	.word	0x40038024
    95c8:	.word	0x4003802c
    95cc:	.word	0x40038034
    95d0:	.word	0x40038000
    95d4:	.word	0x40048004
    95d8:	.word	0x400c9000
    95dc:	.word	0x40038008
    95e0:	.word	0x4003800c

000095e4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    95e4:	cpsid	i
	avail = usb_buffer_available;
    95e6:	ldr	r0, [pc, #52]	; (961c <usb_malloc+0x38>)
    95e8:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    95ea:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    95ee:	cmp	r3, #19
    95f0:	bgt.n	9614 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    95f2:	mov.w	r1, #2147483648	; 0x80000000
    95f6:	lsrs	r1, r3
    95f8:	bic.w	r2, r2, r1
    95fc:	str	r2, [r0, #0]
	__enable_irq();
    95fe:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9600:	ldr	r0, [pc, #28]	; (9620 <usb_malloc+0x3c>)
    9602:	add.w	r3, r3, r3, lsl #3
    9606:	lsls	r3, r3, #3
    9608:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    960a:	movs	r1, #0
    960c:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    960e:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9610:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9612:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9614:	cpsie	i
		return NULL;
    9616:	movs	r0, #0
    9618:	bx	lr
    961a:	nop
    961c:	.word	0x1fff09c4
    9620:	.word	0x1fff03d0

00009624 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9624:	ldr	r3, [pc, #52]	; (965c <usb_free+0x38>)
    9626:	ldr	r2, [pc, #56]	; (9660 <usb_free+0x3c>)
    9628:	subs	r3, r0, r3
    962a:	umull	r2, r3, r2, r3
    962e:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9630:	cmp	r3, #19
    9632:	bhi.n	964e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9634:	ldr	r2, [pc, #44]	; (9664 <usb_free+0x40>)
    9636:	ldrb	r2, [r2, #0]
    9638:	cbnz	r2, 9650 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    963a:	cpsid	i
	usb_buffer_available |= mask;
    963c:	ldr	r0, [pc, #40]	; (9668 <usb_free+0x44>)
    963e:	mov.w	r1, #2147483648	; 0x80000000
    9642:	ldr	r2, [r0, #0]
    9644:	lsr.w	r3, r1, r3
    9648:	orrs	r2, r3
    964a:	str	r2, [r0, #0]
	__enable_irq();
    964c:	cpsie	i
    964e:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9650:	ldr	r2, [pc, #24]	; (966c <usb_free+0x48>)
    9652:	ldrb	r2, [r2, #0]
    9654:	cmp	r2, #0
    9656:	beq.n	963a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9658:	b.w	96d8 <usb_rx_memory>
    965c:	.word	0x1fff03d0
    9660:	.word	0x38e38e39
    9664:	.word	0x1fff1bdd
    9668:	.word	0x1fff09c4
    966c:	.word	0x1fff1be8

00009670 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9670:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9672:	cmp	r3, #5
    9674:	bhi.n	96a0 <usb_rx+0x30>
	__disable_irq();
    9676:	cpsid	i
	ret = rx_first[endpoint];
    9678:	ldr	r1, [pc, #40]	; (96a4 <usb_rx+0x34>)
    967a:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    967e:	cbz	r0, 969c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9680:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9682:	ldr	r4, [pc, #36]	; (96a8 <usb_rx+0x38>)
    9684:	ldrh	r5, [r0, #0]
    9686:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    968a:	ldr	r6, [r0, #4]
    968c:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9690:	subs	r2, r2, r5
    9692:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9696:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9698:	pop	{r4, r5, r6}
    969a:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    969c:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    969e:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    96a0:	movs	r0, #0
    96a2:	bx	lr
    96a4:	.word	0x1fff1b48
    96a8:	.word	0x1fff1f54

000096ac <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    96ac:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    96ae:	cmp	r0, #5
    96b0:	bhi.n	96ca <usb_tx_packet_count+0x1e>
	__disable_irq();
    96b2:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    96b4:	ldr	r3, [pc, #28]	; (96d4 <usb_tx_packet_count+0x28>)
    96b6:	ldr.w	r3, [r3, r0, lsl #2]
    96ba:	cbz	r3, 96ce <usb_tx_packet_count+0x22>
    96bc:	movs	r0, #0
    96be:	ldr	r3, [r3, #4]
    96c0:	adds	r0, #1
    96c2:	cmp	r3, #0
    96c4:	bne.n	96be <usb_tx_packet_count+0x12>
	__enable_irq();
    96c6:	cpsie	i
	return count;
    96c8:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    96ca:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    96cc:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    96ce:	mov	r0, r3
    96d0:	b.n	96c6 <usb_tx_packet_count+0x1a>
    96d2:	nop
    96d4:	.word	0x1fff1ba4

000096d8 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    96d8:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    96da:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96dc:	ldr	r2, [pc, #236]	; (97cc <usb_rx_memory+0xf4>)
    96de:	ldrb	r3, [r2, #0]
    96e0:	lsls	r1, r3, #28
    96e2:	bpl.n	96f2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96e4:	ldr	r3, [pc, #232]	; (97d0 <usb_rx_memory+0xf8>)
    96e6:	ldr	r1, [r3, #32]
    96e8:	cmp	r1, #0
    96ea:	beq.n	978c <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    96ec:	ldr	r1, [r3, #40]	; 0x28
    96ee:	cmp	r1, #0
    96f0:	beq.n	97a8 <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96f2:	ldrb	r3, [r2, #1]
    96f4:	lsls	r3, r3, #28
    96f6:	bpl.n	9706 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96f8:	ldr	r3, [pc, #212]	; (97d0 <usb_rx_memory+0xf8>)
    96fa:	ldr	r1, [r3, #64]	; 0x40
    96fc:	cmp	r1, #0
    96fe:	beq.n	97bc <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9700:	ldr	r1, [r3, #72]	; 0x48
    9702:	cmp	r1, #0
    9704:	beq.n	97ac <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9706:	ldrb	r3, [r2, #2]
    9708:	lsls	r5, r3, #28
    970a:	bpl.n	971a <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    970c:	ldr	r3, [pc, #192]	; (97d0 <usb_rx_memory+0xf8>)
    970e:	ldr	r1, [r3, #96]	; 0x60
    9710:	cmp	r1, #0
    9712:	beq.n	97b8 <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9714:	ldr	r1, [r3, #104]	; 0x68
    9716:	cmp	r1, #0
    9718:	beq.n	97b0 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    971a:	ldrb	r3, [r2, #3]
    971c:	lsls	r4, r3, #28
    971e:	bpl.n	9732 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9720:	ldr	r3, [pc, #172]	; (97d0 <usb_rx_memory+0xf8>)
    9722:	ldr.w	r1, [r3, #128]	; 0x80
    9726:	cmp	r1, #0
    9728:	beq.n	97c0 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    972a:	ldr.w	r1, [r3, #136]	; 0x88
    972e:	cmp	r1, #0
    9730:	beq.n	97b4 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9732:	ldrb	r3, [r2, #4]
    9734:	lsls	r1, r3, #28
    9736:	bpl.n	9748 <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9738:	ldr	r3, [pc, #148]	; (97d0 <usb_rx_memory+0xf8>)
    973a:	ldr.w	r1, [r3, #160]	; 0xa0
    973e:	cmp	r1, #0
    9740:	beq.n	97c8 <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9742:	ldr.w	r1, [r3, #168]	; 0xa8
    9746:	cbz	r1, 976e <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9748:	ldrb	r3, [r2, #5]
    974a:	lsls	r3, r3, #28
    974c:	bpl.n	9760 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    974e:	ldr	r3, [pc, #128]	; (97d0 <usb_rx_memory+0xf8>)
    9750:	ldr.w	r2, [r3, #192]	; 0xc0
    9754:	cmp	r2, #0
    9756:	beq.n	97c4 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9758:	ldr.w	r2, [r3, #200]	; 0xc8
    975c:	movs	r4, #25
    975e:	cbz	r2, 9770 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9760:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9762:	ldr	r3, [pc, #112]	; (97d4 <usb_rx_memory+0xfc>)
    9764:	movs	r2, #0
    9766:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9768:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    976a:	b.w	9624 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    976e:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9770:	ldr	r1, [pc, #96]	; (97d4 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9772:	ldr	r5, [pc, #100]	; (97d8 <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    9774:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9776:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    977a:	add.w	r3, r3, r4, lsl #3
    977e:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9780:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9782:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9784:	strb	r2, [r1, #0]
				__enable_irq();
    9786:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9788:	pop	{r4, r5}
    978a:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    978c:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    978e:	ldr	r4, [pc, #68]	; (97d4 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9790:	ldr	r5, [pc, #72]	; (97dc <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    9792:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9794:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9798:	add.w	r3, r3, r2, lsl #3
    979c:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    979e:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    97a0:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    97a2:	strb	r2, [r4, #0]
				__enable_irq();
    97a4:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    97a6:	b.n	9788 <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    97a8:	movs	r4, #5
    97aa:	b.n	9770 <usb_rx_memory+0x98>
    97ac:	movs	r4, #9
    97ae:	b.n	9770 <usb_rx_memory+0x98>
    97b0:	movs	r4, #13
    97b2:	b.n	9770 <usb_rx_memory+0x98>
    97b4:	movs	r4, #17
    97b6:	b.n	9770 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    97b8:	movs	r2, #12
    97ba:	b.n	978e <usb_rx_memory+0xb6>
    97bc:	movs	r2, #8
    97be:	b.n	978e <usb_rx_memory+0xb6>
    97c0:	movs	r2, #16
    97c2:	b.n	978e <usb_rx_memory+0xb6>
    97c4:	movs	r2, #24
    97c6:	b.n	978e <usb_rx_memory+0xb6>
    97c8:	movs	r2, #20
    97ca:	b.n	978e <usb_rx_memory+0xb6>
    97cc:	.word	0x0001029c
    97d0:	.word	0x1fff0000
    97d4:	.word	0x1fff1bdd
    97d8:	.word	0x004000c8
    97dc:	.word	0x00400088

000097e0 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    97e0:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    97e2:	cmp	r3, #5
    97e4:	bhi.n	9822 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    97e6:	ldr	r2, [pc, #108]	; (9854 <usb_tx+0x74>)
    97e8:	lsls	r0, r0, #5
    97ea:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    97ee:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    97f0:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    97f2:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    97f4:	ldr	r4, [pc, #96]	; (9858 <usb_tx+0x78>)
    97f6:	ldrb	r2, [r4, r3]
    97f8:	cmp	r2, #3
    97fa:	bhi.n	9834 <usb_tx+0x54>
    97fc:	tbb	[pc, r2]
    9800:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9804:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9806:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9808:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    980a:	tst.w	r0, #8
    980e:	ite	ne
    9810:	movne	r3, #200	; 0xc8
    9812:	moveq	r3, #136	; 0x88
    9814:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9818:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    981a:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    981c:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    981e:	cpsie	i
}
    9820:	pop	{r4, r5}
    9822:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9824:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9826:	movs	r2, #2
		break;
    9828:	b.n	9806 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    982a:	movs	r2, #5
    982c:	b.n	9806 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    982e:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9830:	movs	r2, #4
		break;
    9832:	b.n	9806 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9834:	ldr	r2, [pc, #36]	; (985c <usb_tx+0x7c>)
    9836:	ldr.w	r0, [r2, r3, lsl #2]
    983a:	cbz	r0, 984c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    983c:	ldr	r2, [pc, #32]	; (9860 <usb_tx+0x80>)
    983e:	ldr.w	r0, [r2, r3, lsl #2]
    9842:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9844:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9848:	cpsie	i
		return;
    984a:	b.n	9820 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    984c:	str.w	r1, [r2, r3, lsl #2]
    9850:	ldr	r2, [pc, #12]	; (9860 <usb_tx+0x80>)
    9852:	b.n	9844 <usb_tx+0x64>
    9854:	.word	0x1fff0000
    9858:	.word	0x1fff1bec
    985c:	.word	0x1fff1ba4
    9860:	.word	0x1fff1bbc

00009864 <usb_isr>:
}



void usb_isr(void)
{
    9864:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9868:	ldr.w	fp, [pc, #776]	; 9b74 <usb_isr+0x310>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    986c:	ldr.w	sl, [pc, #776]	; 9b78 <usb_isr+0x314>
}



void usb_isr(void)
{
    9870:	sub	sp, #28
    9872:	b.n	98fe <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    9874:	ldr	r7, [pc, #688]	; (9b28 <usb_isr+0x2c4>)
    9876:	mov.w	r8, r3, lsr #2
    987a:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    987e:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    9880:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    9884:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    9888:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    988a:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    988e:	and.w	r4, r3, #255	; 0xff
    9892:	cmp	r3, #0
    9894:	bne.w	9a9e <usb_isr+0x23a>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    9898:	ldr.w	r3, [r7, r8, lsl #3]
    989c:	lsrs	r3, r3, #16
    989e:	uxth	r1, r3
    98a0:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    98a4:	cmp	r3, #0
    98a6:	beq.w	9a8c <usb_isr+0x228>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    98aa:	ldr	r3, [pc, #640]	; (9b2c <usb_isr+0x2c8>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    98ac:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    98b0:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    98b4:	ldr.w	r2, [r3, r6, lsl #2]
    98b8:	cmp	r2, #0
    98ba:	beq.w	9cf2 <usb_isr+0x48e>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    98be:	ldr	r5, [pc, #624]	; (9b30 <usb_isr+0x2cc>)
    98c0:	ldr.w	r3, [r5, r6, lsl #2]
    98c4:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    98c6:	ldr	r4, [pc, #620]	; (9b34 <usb_isr+0x2d0>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    98c8:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    98cc:	ldrh.w	r3, [r4, r6, lsl #1]
    98d0:	add	r1, r3
    98d2:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    98d6:	bl	95e4 <usb_malloc>
					if (packet) {
    98da:	cmp	r0, #0
    98dc:	beq.w	9cfa <usb_isr+0x496>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    98e0:	ldr	r2, [pc, #596]	; (9b38 <usb_isr+0x2d4>)
    98e2:	ldr	r3, [pc, #600]	; (9b3c <usb_isr+0x2d8>)
    98e4:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    98e8:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    98ec:	it	ne
    98ee:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    98f0:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    98f4:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    98f8:	movs	r3, #8
    98fa:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    98fe:	ldrb.w	r4, [fp]
    9902:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9904:	lsls	r5, r4, #29
    9906:	bpl.n	993e <usb_isr+0xda>
		if (usb_configuration) {
    9908:	ldr	r3, [pc, #564]	; (9b40 <usb_isr+0x2dc>)
    990a:	ldrb	r3, [r3, #0]
    990c:	cbz	r3, 9938 <usb_isr+0xd4>
			t = usb_reboot_timer;
    990e:	ldr	r1, [pc, #564]	; (9b44 <usb_isr+0x2e0>)
    9910:	ldrb	r2, [r1, #0]
			if (t) {
    9912:	and.w	r3, r2, #255	; 0xff
    9916:	cbz	r2, 9922 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    9918:	subs	r3, #1
    991a:	uxtb	r3, r3
    991c:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    991e:	cbnz	r3, 9922 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    9920:	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    9922:	ldr	r1, [pc, #548]	; (9b48 <usb_isr+0x2e4>)
    9924:	ldrb	r2, [r1, #0]
			if (t) {
    9926:	and.w	r3, r2, #255	; 0xff
    992a:	cbz	r2, 9938 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    992c:	subs	r3, #1
    992e:	uxtb	r3, r3
    9930:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9932:	cmp	r3, #0
    9934:	beq.w	9c9e <usb_isr+0x43a>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9938:	movs	r3, #4
    993a:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    993e:	and.w	r3, r4, #8
    9942:	and.w	r2, r3, #255	; 0xff
    9946:	cmp	r3, #0
    9948:	beq.w	9ae6 <usb_isr+0x282>
		uint8_t endpoint;
		stat = USB0_STAT;
    994c:	ldrb.w	r3, [sl]
    9950:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    9952:	lsrs	r6, r3, #4
    9954:	bne.n	9874 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9956:	lsrs	r0, r3, #2
    9958:	ldr.w	r9, [pc, #460]	; 9b28 <usb_isr+0x2c4>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    995c:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    9960:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    9964:	ubfx	r2, r2, #2, #4
    9968:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    996a:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    996c:	cmp	r2, #12
    996e:	bhi.w	9a84 <usb_isr+0x220>
    9972:	tbb	[pc, r2]
    9976:	.short	0x7d7d
    9978:	.word	0x87878787
    997c:	.word	0x87488787
    9980:	.short	0x8787
    9982:	.byte	0x07
    9983:	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9984:	ldr	r2, [r1, #0]
    9986:	ldr	r5, [pc, #452]	; (9b4c <usb_isr+0x2e8>)
		setup.word2 = *(uint32_t *)(buf + 4);
    9988:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    998a:	ldr	r7, [pc, #452]	; (9b50 <usb_isr+0x2ec>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    998c:	ldr	r6, [pc, #452]	; (9b54 <usb_isr+0x2f0>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    998e:	ldr	r4, [pc, #424]	; (9b38 <usb_isr+0x2d4>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    9990:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9992:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9994:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    9998:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    999a:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    999c:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    999e:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    99a2:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    99a4:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    99a8:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    99ac:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    99ae:	beq.w	9e16 <usb_isr+0x5b2>
    99b2:	bls.w	9b7c <usb_isr+0x318>
    99b6:	movw	r4, #8993	; 0x2321
    99ba:	cmp	r1, r4
    99bc:	beq.w	9e5c <usb_isr+0x5f8>
    99c0:	bhi.w	9d24 <usb_isr+0x4c0>
    99c4:	movw	r4, #8225	; 0x2021
    99c8:	cmp	r1, r4
    99ca:	beq.w	9d3c <usb_isr+0x4d8>
    99ce:	movw	r4, #8737	; 0x2221
    99d2:	cmp	r1, r4
    99d4:	beq.w	9e20 <usb_isr+0x5bc>
    99d8:	cmp.w	r1, #2304	; 0x900
    99dc:	bne.w	9d36 <usb_isr+0x4d2>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    99e0:	ldr	r2, [pc, #348]	; (9b40 <usb_isr+0x2dc>)
    99e2:	ldr	r4, [pc, #324]	; (9b28 <usb_isr+0x2c4>)
    99e4:	ldrb	r1, [r5, #2]
    99e6:	strb	r1, [r2, #0]
    99e8:	add.w	r5, r4, #192	; 0xc0
    99ec:	b.n	99f6 <usb_isr+0x192>
    99ee:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    99f0:	cmp	r5, r4
    99f2:	beq.w	9ec4 <usb_isr+0x660>
			if (table[i].desc & BDT_OWN) {
    99f6:	ldr	r3, [r4, #32]
    99f8:	lsls	r0, r3, #24
    99fa:	bpl.n	99ee <usb_isr+0x18a>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    99fc:	ldr	r0, [r4, #36]	; 0x24
    99fe:	subs	r0, #8
    9a00:	bl	9624 <usb_free>
    9a04:	b.n	99ee <usb_isr+0x18a>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    9a06:	ldr	r7, [pc, #328]	; (9b50 <usb_isr+0x2ec>)
    9a08:	ldr	r2, [r7, #0]
		if (data) {
    9a0a:	cbz	r2, 9a5a <usb_isr+0x1f6>
			size = ep0_tx_len;
    9a0c:	ldr	r3, [pc, #328]	; (9b58 <usb_isr+0x2f4>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a0e:	ldr	r6, [pc, #324]	; (9b54 <usb_isr+0x2f0>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a10:	ldr	r1, [pc, #328]	; (9b5c <usb_isr+0x2f8>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    9a12:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a14:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a16:	ldrb	r5, [r1, #0]
    9a18:	cmp	r0, #64	; 0x40
    9a1a:	mov	lr, r0
    9a1c:	orr.w	r8, r5, #2
    9a20:	it	cs
    9a22:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a26:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    9a28:	eor.w	r4, r4, #1
    9a2c:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a2e:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a32:	ite	eq
    9a34:	moveq	r4, #136	; 0x88
    9a36:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a38:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a3c:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9a3e:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a42:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a46:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    9a48:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a4a:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    9a4e:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9a50:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9a52:	cmp	r0, #0
    9a54:	beq.w	9c40 <usb_isr+0x3dc>
    9a58:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    9a5a:	ldr	r3, [pc, #240]	; (9b4c <usb_isr+0x2e8>)
    9a5c:	ldrh	r2, [r3, #0]
    9a5e:	cmp.w	r2, #1280	; 0x500
    9a62:	bne.n	9a84 <usb_isr+0x220>
			setup.bRequest = 0;
    9a64:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a66:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    9a68:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    9a6a:	ldr	r3, [pc, #244]	; (9b60 <usb_isr+0x2fc>)
    9a6c:	strb	r2, [r3, #0]
    9a6e:	b.n	9a84 <usb_isr+0x220>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    9a70:	ldr	r2, [pc, #216]	; (9b4c <usb_isr+0x2e8>)
    9a72:	ldrh	r4, [r2, #0]
    9a74:	movw	r2, #8225	; 0x2021
    9a78:	cmp	r4, r2
    9a7a:	beq.w	9c4a <usb_isr+0x3e6>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    9a7e:	ldr	r2, [pc, #184]	; (9b38 <usb_isr+0x2d4>)
    9a80:	str.w	r2, [r9, r0, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9a84:	ldr	r2, [pc, #220]	; (9b64 <usb_isr+0x300>)
    9a86:	movs	r3, #1
    9a88:	strb	r3, [r2, #0]
    9a8a:	b.n	98f8 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9a8c:	ldr	r2, [pc, #168]	; (9b38 <usb_isr+0x2d4>)
    9a8e:	ldr	r3, [pc, #172]	; (9b3c <usb_isr+0x2d8>)
    9a90:	tst.w	r9, #8
    9a94:	it	ne
    9a96:	movne	r3, r2
    9a98:	str.w	r3, [r7, r8, lsl #3]
    9a9c:	b.n	98f8 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    9a9e:	bl	9624 <usb_free>
				packet = tx_first[endpoint];
    9aa2:	ldr	r2, [pc, #196]	; (9b68 <usb_isr+0x304>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9aa4:	ldr	r1, [pc, #196]	; (9b6c <usb_isr+0x308>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    9aa6:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    9aaa:	cmp	r3, #0
    9aac:	beq.w	9d08 <usb_isr+0x4a4>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9ab0:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    9ab2:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    9ab4:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    9ab8:	add.w	r2, r3, #8
    9abc:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    9ac0:	cmp	r4, #3
    9ac2:	bhi.n	9ad0 <usb_isr+0x26c>
    9ac4:	tbb	[pc, r4]
    9ac8:	.word	0x2629022c
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9acc:	movs	r2, #2
    9ace:	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    9ad0:	ldrh	r2, [r3, #0]
    9ad2:	tst.w	r9, #8
    9ad6:	ite	eq
    9ad8:	moveq	r3, #136	; 0x88
    9ada:	movne	r3, #200	; 0xc8
    9adc:	orr.w	r3, r3, r2, lsl #16
    9ae0:	str.w	r3, [r7, r8, lsl #3]
    9ae4:	b.n	98f8 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9ae6:	lsls	r0, r4, #31
    9ae8:	bmi.w	9ca4 <usb_isr+0x440>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    9aec:	lsls	r1, r4, #24
    9aee:	bmi.w	9d44 <usb_isr+0x4e0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9af2:	lsls	r2, r4, #30
    9af4:	bpl.n	9b04 <usb_isr+0x2a0>
		uint8_t err = USB0_ERRSTAT;
    9af6:	ldr	r2, [pc, #120]	; (9b70 <usb_isr+0x30c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9af8:	ldr	r1, [pc, #120]	; (9b74 <usb_isr+0x310>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9afa:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9afc:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    9afe:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    9b00:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9b02:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9b04:	lsls	r3, r4, #27
    9b06:	bpl.n	9b0e <usb_isr+0x2aa>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9b08:	ldr	r3, [pc, #104]	; (9b74 <usb_isr+0x310>)
    9b0a:	movs	r2, #16
    9b0c:	strb	r2, [r3, #0]
	}

}
    9b0e:	add	sp, #28
    9b10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9b14:	movs	r2, #4
    9b16:	strb	r2, [r1, r6]
						break;
    9b18:	b.n	9ad0 <usb_isr+0x26c>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    9b1a:	movs	r2, #5
    9b1c:	strb	r2, [r1, r6]
						break;
    9b1e:	b.n	9ad0 <usb_isr+0x26c>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    9b20:	movs	r2, #3
    9b22:	strb	r2, [r1, r6]
						break;
    9b24:	b.n	9ad0 <usb_isr+0x26c>
    9b26:	nop
    9b28:	.word	0x1fff0000
    9b2c:	.word	0x1fff1b48
    9b30:	.word	0x1fff1aec
    9b34:	.word	0x1fff1f54
    9b38:	.word	0x004000c8
    9b3c:	.word	0x00400088
    9b40:	.word	0x1fff1be8
    9b44:	.word	0x1fff1b61
    9b48:	.word	0x1fff1ad0
    9b4c:	.word	0x1fff1bd4
    9b50:	.word	0x1fff1ae8
    9b54:	.word	0x1fff1b60
    9b58:	.word	0x1fff1b04
    9b5c:	.word	0x1fff1bdc
    9b60:	.word	0x40072098
    9b64:	.word	0x40072094
    9b68:	.word	0x1fff1ba4
    9b6c:	.word	0x1fff1bec
    9b70:	.word	0x40072088
    9b74:	.word	0x40072080
    9b78:	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9b7c:	movw	r4, #770	; 0x302
    9b80:	cmp	r1, r4
    9b82:	beq.w	a008 <usb_isr+0x7a4>
    9b86:	bhi.w	9d64 <usb_isr+0x500>
    9b8a:	cmp	r1, #130	; 0x82
    9b8c:	beq.w	a05e <usb_isr+0x7fa>
    9b90:	cmp.w	r1, #258	; 0x102
    9b94:	beq.w	a038 <usb_isr+0x7d4>
    9b98:	cmp	r1, #128	; 0x80
    9b9a:	bne.w	9d36 <usb_isr+0x4d2>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9b9e:	ldr	r4, [pc, #708]	; (9e64 <usb_isr+0x600>)
		reply_buffer[1] = 0;
		datalen = 2;
    9ba0:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9ba2:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    9ba4:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9ba6:	ldrh	r2, [r5, #6]
    9ba8:	cmp	r2, r0
    9baa:	bcs.w	a270 <usb_isr+0xa0c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9bae:	ldr	r1, [pc, #696]	; (9e68 <usb_isr+0x604>)
    9bb0:	ldrb	r5, [r1, #0]
    9bb2:	cmp	r2, #64	; 0x40
    9bb4:	mov	lr, r2
    9bb6:	orr.w	ip, r5, #2
    9bba:	it	cs
    9bbc:	movcs.w	lr, #64	; 0x40
    9bc0:	add.w	r3, r4, lr
    9bc4:	add.w	r0, r9, ip, lsl #3
    9bc8:	str	r3, [sp, #4]
    9bca:	movs	r3, #1
    9bcc:	str	r4, [r0, #4]
    9bce:	mov.w	r8, lr, lsl #16
    9bd2:	rsb	r0, lr, r2
    9bd6:	str	r3, [sp, #8]
    9bd8:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9bda:	movs	r4, #200	; 0xc8
    9bdc:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9be0:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9be4:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9be8:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9bea:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9bec:	ldr.w	ip, [pc, #648]	; 9e78 <usb_isr+0x614>
	ep0_tx_data_toggle ^= 1;
    9bf0:	ldr	r3, [pc, #632]	; (9e6c <usb_isr+0x608>)
	ep0_tx_bdt_bank ^= 1;
    9bf2:	ldr.w	r8, [pc, #628]	; 9e68 <usb_isr+0x604>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9bf6:	cmp	r0, #0
    9bf8:	bne.w	9da4 <usb_isr+0x540>
    9bfc:	cmp.w	lr, #64	; 0x40
    9c00:	bne.w	9d3c <usb_isr+0x4d8>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c04:	orr.w	ip, r4, #2
    9c08:	add.w	r3, r9, ip, lsl #3
    9c0c:	ldr	r4, [sp, #4]
    9c0e:	ldr.w	lr, [pc, #616]	; 9e78 <usb_isr+0x614>
    9c12:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c14:	cmp	r2, #0
    9c16:	bne.w	9dd0 <usb_isr+0x56c>
    9c1a:	lsls	r2, r0, #16
    9c1c:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9c20:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c24:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9c28:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9c2a:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    9c2c:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9c2e:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    9c30:	cmp	r0, #64	; 0x40
    9c32:	bne.w	9d3c <usb_isr+0x4d8>
    9c36:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    9c38:	ldr	r2, [pc, #564]	; (9e70 <usb_isr+0x60c>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    9c3a:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    9c3c:	strh	r0, [r2, #0]
    9c3e:	b.n	9d3c <usb_isr+0x4d8>
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9c40:	cmp.w	lr, #64	; 0x40
    9c44:	it	ne
    9c46:	movne	r2, #0
    9c48:	b.n	9a58 <usb_isr+0x1f4>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9c4a:	ldr	r2, [pc, #552]	; (9e74 <usb_isr+0x610>)
    9c4c:	ldrb	r5, [r1, #0]
    9c4e:	ldrb	r4, [r1, #1]
    9c50:	strb	r5, [r2, #0]
    9c52:	strb	r4, [r2, #1]
    9c54:	ldrb	r5, [r1, #2]
    9c56:	ldrb	r4, [r1, #3]
    9c58:	strb	r5, [r2, #2]
    9c5a:	strb	r4, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9c5c:	ldr	r4, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9c5e:	ldrb	r5, [r1, #4]
    9c60:	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9c62:	cmp	r4, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    9c64:	ldrb	r5, [r1, #5]
    9c66:	ldrb	r1, [r1, #6]
    9c68:	strb	r5, [r2, #5]
    9c6a:	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9c6c:	beq.w	9e0e <usb_isr+0x5aa>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c70:	ldr	r1, [pc, #500]	; (9e68 <usb_isr+0x604>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c72:	ldr	r6, [pc, #504]	; (9e6c <usb_isr+0x608>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c74:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c76:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9c78:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c7c:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c7e:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9c82:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c84:	ite	eq
    9c86:	moveq	r1, #136	; 0x88
    9c88:	movne	r1, #200	; 0xc8
    9c8a:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c8e:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9c92:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c96:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    9c98:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c9a:	str	r1, [r2, #4]
    9c9c:	b.n	9a7e <usb_isr+0x21a>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    9c9e:	bl	91b4 <usb_serial_flush_callback>
    9ca2:	b.n	9938 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9ca4:	ldr	r3, [pc, #464]	; (9e78 <usb_isr+0x614>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9ca6:	ldr	r0, [pc, #468]	; (9e7c <usb_isr+0x618>)
		ep0_tx_bdt_bank = 0;
    9ca8:	ldr	r1, [pc, #444]	; (9e68 <usb_isr+0x604>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    9caa:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    9cac:	mov.w	lr, #2
    9cb0:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9cb4:	ldr	r7, [pc, #456]	; (9e80 <usb_isr+0x61c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    9cb6:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9cb8:	ldr	r1, [pc, #456]	; (9e84 <usb_isr+0x620>)
    9cba:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9cbc:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9cbe:	ldr	r6, [pc, #456]	; (9e88 <usb_isr+0x624>)
		USB0_ISTAT = 0xFF;
    9cc0:	ldr	r5, [pc, #456]	; (9e8c <usb_isr+0x628>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9cc2:	ldr	r4, [pc, #460]	; (9e90 <usb_isr+0x62c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    9cc4:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9cc6:	movs	r1, #13
    9cc8:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    9cca:	movs	r1, #255	; 0xff
    9ccc:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9cce:	ldr.w	lr, [pc, #492]	; 9ebc <usb_isr+0x658>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    9cd2:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    9cd4:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9cd6:	ldr	r5, [pc, #444]	; (9e94 <usb_isr+0x630>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9cd8:	ldr	r2, [pc, #444]	; (9e98 <usb_isr+0x634>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    9cda:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9cde:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9ce0:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9ce2:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9ce6:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    9ce8:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9cea:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    9cec:	add	sp, #28
    9cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    9cf2:	str.w	r0, [r3, r6, lsl #2]
    9cf6:	ldr	r5, [pc, #420]	; (9e9c <usb_isr+0x638>)
    9cf8:	b.n	98c6 <usb_isr+0x62>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    9cfa:	ldr	r2, [pc, #420]	; (9ea0 <usb_isr+0x63c>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    9cfc:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    9d00:	ldrb	r3, [r2, #0]
    9d02:	adds	r3, #1
    9d04:	strb	r3, [r2, #0]
    9d06:	b.n	98f8 <usb_isr+0x94>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    9d08:	ldrb	r3, [r1, r6]
    9d0a:	cmp	r3, #3
    9d0c:	bhi.n	9e00 <usb_isr+0x59c>
    9d0e:	add	r2, pc, #4	; (adr r2, 9d14 <usb_isr+0x4b0>)
    9d10:	ldr.w	pc, [r2, r3, lsl #2]
    9d14:	.word	0x000098f9
    9d18:	.word	0x000098f9
    9d1c:	.word	0x00009d5f
    9d20:	.word	0x00009d59
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9d24:	movw	r2, #26273	; 0x66a1
    9d28:	cmp	r1, r2
    9d2a:	beq.n	9d36 <usb_isr+0x4d2>
    9d2c:	movw	r2, #26529	; 0x67a1
    9d30:	cmp	r1, r2
    9d32:	beq.w	a02e <usb_isr+0x7ca>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9d36:	ldr	r2, [pc, #328]	; (9e80 <usb_isr+0x61c>)
    9d38:	movs	r3, #15
    9d3a:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9d3c:	ldr	r2, [pc, #316]	; (9e7c <usb_isr+0x618>)
    9d3e:	movs	r3, #1
    9d40:	strb	r3, [r2, #0]
    9d42:	b.n	9a84 <usb_isr+0x220>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9d44:	ldr	r1, [pc, #312]	; (9e80 <usb_isr+0x61c>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9d46:	ldr	r3, [pc, #324]	; (9e8c <usb_isr+0x628>)
    9d48:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9d4a:	movs	r0, #13
    9d4c:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    9d4e:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9d50:	lsls	r2, r4, #30
    9d52:	bpl.w	9b04 <usb_isr+0x2a0>
    9d56:	b.n	9af6 <usb_isr+0x292>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9d58:	movs	r3, #1
    9d5a:	strb	r3, [r1, r6]
						break;
    9d5c:	b.n	98f8 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9d5e:	movs	r3, #0
    9d60:	strb	r3, [r1, r6]
						break;
    9d62:	b.n	98f8 <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9d64:	cmp.w	r1, #1280	; 0x500
    9d68:	beq.n	9e5c <usb_isr+0x5f8>
    9d6a:	bcc.n	9d36 <usb_isr+0x4d2>
    9d6c:	sub.w	r1, r1, #1664	; 0x680
    9d70:	cmp	r1, #1
    9d72:	bhi.n	9d36 <usb_isr+0x4d2>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    9d74:	ldr	r2, [pc, #300]	; (9ea4 <usb_isr+0x640>)
    9d76:	ldr	r4, [r2, #4]
    9d78:	cmp	r4, #0
    9d7a:	beq.n	9d36 <usb_isr+0x4d2>
    9d7c:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9d7e:	ldrh.w	lr, [r5, #4]
    9d82:	b.n	9d8c <usb_isr+0x528>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    9d84:	adds	r2, #12
			if (list->addr == NULL) break;
    9d86:	ldr	r4, [r2, #4]
    9d88:	cmp	r4, #0
    9d8a:	beq.n	9d36 <usb_isr+0x4d2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9d8c:	ldrh	r3, [r2, #0]
    9d8e:	cmp	r3, r0
    9d90:	bne.n	9d84 <usb_isr+0x520>
    9d92:	ldrh	r3, [r2, #2]
    9d94:	cmp	r3, lr
    9d96:	bne.n	9d84 <usb_isr+0x520>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    9d98:	lsrs	r0, r0, #8
    9d9a:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    9d9c:	ite	eq
    9d9e:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    9da0:	ldrhne	r0, [r2, #8]
    9da2:	b.n	9ba6 <usb_isr+0x342>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    9da4:	cmp	r0, #64	; 0x40
    9da6:	bls.w	9c04 <usb_isr+0x3a0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9daa:	orr.w	r4, r4, #2
    9dae:	add.w	r1, ip, r4, lsl #3
    9db2:	ldr	r6, [sp, #4]
    9db4:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9db6:	cbz	r2, 9de8 <usb_isr+0x584>
	ep0_tx_data_toggle ^= 1;
    9db8:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dbc:	ldr	r2, [pc, #232]	; (9ea8 <usb_isr+0x644>)
	ep0_tx_data_toggle ^= 1;
    9dbe:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9dc0:	mov	r3, r6
    9dc2:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9dc4:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9dc8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dca:	str.w	r2, [ip, r4, lsl #3]
    9dce:	b.n	9c38 <usb_isr+0x3d4>
	ep0_tx_data_toggle ^= 1;
    9dd0:	ldrb.w	r3, [sp, #8]
    9dd4:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dd6:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9dd8:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9dda:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ddc:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9de0:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9de2:	str.w	r2, [lr, ip, lsl #3]
    9de6:	b.n	9c30 <usb_isr+0x3cc>
	ep0_tx_data_toggle ^= 1;
    9de8:	ldrb.w	r1, [sp, #8]
    9dec:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9dee:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9df0:	ldr	r2, [pc, #144]	; (9e84 <usb_isr+0x620>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    9df2:	strb.w	r5, [r8]
    9df6:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    9df8:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9dfa:	str.w	r2, [ip, r4, lsl #3]
    9dfe:	b.n	9c38 <usb_isr+0x3d4>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9e00:	tst.w	r9, #8
    9e04:	ite	eq
    9e06:	moveq	r3, #2
    9e08:	movne	r3, #3
    9e0a:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    9e0c:	b.n	98f8 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    9e0e:	ldr	r2, [pc, #156]	; (9eac <usb_isr+0x648>)
    9e10:	movs	r1, #15
    9e12:	strb	r1, [r2, #0]
    9e14:	b.n	9c70 <usb_isr+0x40c>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9e16:	ldr	r2, [pc, #152]	; (9eb0 <usb_isr+0x64c>)
    9e18:	ldr	r4, [pc, #72]	; (9e64 <usb_isr+0x600>)
    9e1a:	ldrb	r2, [r2, #0]
    9e1c:	strb	r2, [r4, #0]
    9e1e:	b.n	9ba6 <usb_isr+0x342>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9e20:	ldr.w	ip, [pc, #156]	; 9ec0 <usb_isr+0x65c>
    9e24:	ldr	r3, [pc, #140]	; (9eb4 <usb_isr+0x650>)
		usb_cdc_line_rtsdtr = setup.wValue;
    9e26:	ldr	r1, [pc, #144]	; (9eb8 <usb_isr+0x654>)
    9e28:	ldrb	r4, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9e2a:	ldr.w	r5, [ip]
    9e2e:	str	r5, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9e30:	str	r0, [sp, #8]
    9e32:	strb	r4, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    9e34:	movs	r0, #0
    9e36:	str	r0, [sp, #4]
    9e38:	mov	r8, r0
    9e3a:	mov	lr, r0
    9e3c:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e3e:	ldr	r1, [pc, #40]	; (9e68 <usb_isr+0x604>)
    9e40:	ldrb	r5, [r1, #0]
    9e42:	orr.w	ip, r5, #2
    9e46:	add.w	r3, r9, ip, lsl #3
    9e4a:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e4c:	ldr	r3, [sp, #8]
    9e4e:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e50:	ldr	r3, [sp, #12]
    9e52:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e54:	ite	eq
    9e56:	moveq	r4, #136	; 0x88
    9e58:	movne	r4, #200	; 0xc8
    9e5a:	b.n	9bdc <usb_isr+0x378>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    9e5c:	movs	r3, #1
    9e5e:	movs	r2, #0
    9e60:	str	r3, [sp, #8]
    9e62:	b.n	9e34 <usb_isr+0x5d0>
    9e64:	.word	0x1fff1be0
    9e68:	.word	0x1fff1bdc
    9e6c:	.word	0x1fff1b60
    9e70:	.word	0x1fff1b04
    9e74:	.word	0x1fff1f48
    9e78:	.word	0x1fff0000
    9e7c:	.word	0x40072094
    9e80:	.word	0x400720c0
    9e84:	.word	0x00400088
    9e88:	.word	0x40072088
    9e8c:	.word	0x40072080
    9e90:	.word	0x40072098
    9e94:	.word	0x1fff1b08
    9e98:	.word	0x1fff1b64
    9e9c:	.word	0x1fff1aec
    9ea0:	.word	0x1fff1bdd
    9ea4:	.word	0x000102a4
    9ea8:	.word	0x004000c8
    9eac:	.word	0x1fff1b61
    9eb0:	.word	0x1fff1be8
    9eb4:	.word	0x1fff1f50
    9eb8:	.word	0x1fff1ae0
    9ebc:	.word	0x4007208c
    9ec0:	.word	0x1fff1ae4
    9ec4:	ldr	r4, [pc, #724]	; (a19c <usb_isr+0x938>)
    9ec6:	ldr	r2, [pc, #728]	; (a1a0 <usb_isr+0x93c>)
    9ec8:	ldr	r1, [pc, #728]	; (a1a4 <usb_isr+0x940>)
    9eca:	ldr	r0, [pc, #732]	; (a1a8 <usb_isr+0x944>)
    9ecc:	ldr	r5, [pc, #732]	; (a1ac <usb_isr+0x948>)
    9ece:	str	r4, [sp, #4]
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9ed0:	movs	r3, #0
    9ed2:	ldr	r4, [pc, #732]	; (a1b0 <usb_isr+0x94c>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9ed4:	str	r4, [sp, #8]
    9ed6:	str	r6, [sp, #20]
    9ed8:	str	r5, [sp, #12]
    9eda:	mov	r8, r0
    9edc:	mov	r4, r3
    9ede:	str	r7, [sp, #16]
    9ee0:	mov	r6, r2
    9ee2:	mov	r5, r1
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    9ee4:	ldr	r0, [r6, #0]
			while (p) {
    9ee6:	cbz	r0, 9ef4 <usb_isr+0x690>
				n = p->next;
    9ee8:	ldr	r7, [r0, #4]
				usb_free(p);
    9eea:	bl	9624 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    9eee:	mov	r0, r7
    9ef0:	cmp	r7, #0
    9ef2:	bne.n	9ee8 <usb_isr+0x684>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    9ef4:	movs	r3, #0
    9ef6:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    9ef8:	ldr	r3, [sp, #12]
			p = tx_first[i];
    9efa:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    9efc:	mov	r2, r3
    9efe:	movs	r3, #0
    9f00:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    9f04:	cbz	r0, 9f12 <usb_isr+0x6ae>
				n = p->next;
    9f06:	ldr	r7, [r0, #4]
				usb_free(p);
    9f08:	bl	9624 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    9f0c:	mov	r0, r7
    9f0e:	cmp	r7, #0
    9f10:	bne.n	9f06 <usb_isr+0x6a2>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9f12:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9f14:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    9f16:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    9f18:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    9f1a:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    9f1e:	ldr	r2, [sp, #8]
    9f20:	mov.w	r1, #0
			switch (tx_state[i]) {
    9f24:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    9f26:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    9f2a:	cmp	r3, #3
    9f2c:	bhi.n	9f3e <usb_isr+0x6da>
    9f2e:	tbb	[pc, r3]
    9f32:	.short	0x0266
    9f34:	.short	0x0266
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9f36:	ldr	r3, [sp, #4]
    9f38:	mov.w	r2, #1
    9f3c:	strb	r2, [r3, #0]
    9f3e:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9f40:	adds	r4, #1
    9f42:	adds	r3, #1
    9f44:	cmp	r4, #6
    9f46:	add.w	r6, r6, #4
    9f4a:	add.w	r5, r5, #4
    9f4e:	str	r3, [sp, #4]
    9f50:	bne.n	9ee4 <usb_isr+0x680>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f52:	ldr	r5, [pc, #608]	; (a1b4 <usb_isr+0x950>)
			*reg = epconf;
    9f54:	ldr	r1, [pc, #608]	; (a1b8 <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f56:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    9f58:	ldr	r4, [pc, #608]	; (a1bc <usb_isr+0x958>)
    9f5a:	ldr	r7, [sp, #16]
    9f5c:	ldr	r6, [sp, #20]
    9f5e:	movs	r0, #0
    9f60:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f62:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f64:	lsls	r1, r2, #28
    9f66:	bmi.w	a10c <usb_isr+0x8a8>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f6a:	ldrb	r2, [r5, #1]
			*reg = epconf;
    9f6c:	ldr	r1, [pc, #592]	; (a1c0 <usb_isr+0x95c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f6e:	ldr.w	r8, [pc, #612]	; a1d4 <usb_isr+0x970>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f72:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f74:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f76:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f78:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    9f7c:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f80:	bmi.w	a0e0 <usb_isr+0x87c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9f84:	ldrb	r2, [r5, #2]
			*reg = epconf;
    9f86:	ldr	r1, [pc, #572]	; (a1c4 <usb_isr+0x960>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f88:	ldr.w	r8, [pc, #584]	; a1d4 <usb_isr+0x970>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9f8c:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f8e:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9f90:	mov.w	r1, #0
    9f94:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    9f98:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9f9c:	bmi.w	a162 <usb_isr+0x8fe>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9fa0:	ldrb	r2, [r5, #3]
			*reg = epconf;
    9fa2:	ldr	r1, [pc, #548]	; (a1c8 <usb_isr+0x964>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fa4:	ldr.w	r8, [pc, #556]	; a1d4 <usb_isr+0x970>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9fa8:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9faa:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fac:	mov.w	r1, #0
    9fb0:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    9fb4:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9fb8:	bmi.w	a138 <usb_isr+0x8d4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9fbc:	ldr	r1, [pc, #524]	; (a1cc <usb_isr+0x968>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9fbe:	ldrb	r2, [r5, #4]
			*reg = epconf;
    9fc0:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fc2:	movs	r1, #0
    9fc4:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    9fc8:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9fcc:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fce:	ldr.w	r8, [pc, #516]	; a1d4 <usb_isr+0x970>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9fd2:	bmi.n	a0b2 <usb_isr+0x84e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    9fd4:	ldrb	r2, [r5, #5]
			*reg = epconf;
    9fd6:	ldr	r1, [pc, #504]	; (a1d0 <usb_isr+0x96c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fd8:	ldr	r5, [pc, #504]	; (a1d4 <usb_isr+0x970>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    9fda:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fdc:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9fde:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fe0:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    9fe4:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    9fe8:	bmi.n	a084 <usb_isr+0x820>
    9fea:	ldrb	r3, [r6, #0]
    9fec:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    9fee:	movs	r1, #0
    9ff0:	eor.w	r2, r3, #1
    9ff4:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    9ff8:	str.w	r1, [r9, #216]	; 0xd8
    9ffc:	b.n	9e34 <usb_isr+0x5d0>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9ffe:	ldr	r3, [sp, #4]
    a000:	mov.w	r2, #0
    a004:	strb	r2, [r3, #0]
    a006:	b.n	9f3e <usb_isr+0x6da>
    a008:	ldrh	r1, [r5, #4]
    a00a:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a00e:	cmp	r1, #6
    a010:	bhi.w	9d36 <usb_isr+0x4d2>
    a014:	ldrh	r2, [r5, #2]
    a016:	cmp	r2, #0
    a018:	bne.w	9d36 <usb_isr+0x4d2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a01c:	ldr	r4, [pc, #440]	; (a1d8 <usb_isr+0x974>)
    a01e:	str	r0, [sp, #8]
    a020:	lsls	r1, r1, #2
    a022:	add	r4, r1
    a024:	ldrb	r1, [r4, #0]
    a026:	orr.w	r1, r1, #2
    a02a:	strb	r1, [r4, #0]
    a02c:	b.n	9e34 <usb_isr+0x5d0>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    a02e:	ldr	r4, [pc, #428]	; (a1dc <usb_isr+0x978>)
    a030:	ldr	r3, [pc, #428]	; (a1e0 <usb_isr+0x97c>)
    a032:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    a034:	movs	r0, #4
    a036:	b.n	9ba6 <usb_isr+0x342>
    a038:	ldrh	r1, [r5, #4]
    a03a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a03e:	cmp	r1, #6
    a040:	bhi.w	9d36 <usb_isr+0x4d2>
    a044:	ldrh	r2, [r5, #2]
    a046:	cmp	r2, #0
    a048:	bne.w	9d36 <usb_isr+0x4d2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a04c:	ldr	r4, [pc, #392]	; (a1d8 <usb_isr+0x974>)
    a04e:	str	r0, [sp, #8]
    a050:	lsls	r1, r1, #2
    a052:	add	r4, r1
    a054:	ldrb	r1, [r4, #0]
    a056:	bic.w	r1, r1, #2
    a05a:	strb	r1, [r4, #0]
    a05c:	b.n	9e34 <usb_isr+0x5d0>
    a05e:	ldrh	r1, [r5, #4]
    a060:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a064:	cmp	r1, #6
    a066:	bhi.w	9d36 <usb_isr+0x4d2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a06a:	ldr	r3, [pc, #364]	; (a1d8 <usb_isr+0x974>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a06c:	ldr	r4, [pc, #364]	; (a1dc <usb_isr+0x978>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a06e:	lsls	r1, r1, #2
    a070:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a072:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a074:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a076:	ldrb	r2, [r3, #0]
    a078:	lsls	r3, r2, #30
    a07a:	bpl.w	a18c <usb_isr+0x928>
    a07e:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    a080:	movs	r0, #2
    a082:	b.n	9ba6 <usb_isr+0x342>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a084:	bl	95e4 <usb_malloc>
				if (p) {
    a088:	cmp	r0, #0
    a08a:	beq.w	a21c <usb_isr+0x9b8>
					table[index(i, RX, EVEN)].addr = p->buf;
    a08e:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a090:	ldr	r2, [pc, #336]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a092:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a096:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a09a:	bl	95e4 <usb_malloc>
				if (p) {
    a09e:	cmp	r0, #0
    a0a0:	beq.w	a210 <usb_isr+0x9ac>
					table[index(i, RX, ODD)].addr = p->buf;
    a0a4:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0a6:	ldr	r2, [pc, #320]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a0a8:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0ac:	str.w	r2, [r9, #200]	; 0xc8
    a0b0:	b.n	9fea <usb_isr+0x786>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a0b2:	bl	95e4 <usb_malloc>
				if (p) {
    a0b6:	cmp	r0, #0
    a0b8:	beq.w	a24c <usb_isr+0x9e8>
					table[index(i, RX, EVEN)].addr = p->buf;
    a0bc:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0be:	ldr	r2, [pc, #292]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0c0:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0c4:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0c8:	bl	95e4 <usb_malloc>
				if (p) {
    a0cc:	cmp	r0, #0
    a0ce:	beq.w	a240 <usb_isr+0x9dc>
					table[index(i, RX, ODD)].addr = p->buf;
    a0d2:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0d4:	ldr	r2, [pc, #272]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a0d6:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a0da:	str.w	r2, [r9, #168]	; 0xa8
    a0de:	b.n	9fd4 <usb_isr+0x770>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a0e0:	bl	95e4 <usb_malloc>
				if (p) {
    a0e4:	cmp	r0, #0
    a0e6:	beq.w	a1ec <usb_isr+0x988>
					table[index(i, RX, EVEN)].addr = p->buf;
    a0ea:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0ec:	ldr	r2, [pc, #244]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a0ee:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a0f2:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a0f6:	bl	95e4 <usb_malloc>
				if (p) {
    a0fa:	cmp	r0, #0
    a0fc:	beq.n	a190 <usb_isr+0x92c>
					table[index(i, RX, ODD)].addr = p->buf;
    a0fe:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a100:	ldr	r2, [pc, #228]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a102:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a106:	str.w	r2, [r9, #72]	; 0x48
    a10a:	b.n	9f84 <usb_isr+0x720>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a10c:	bl	95e4 <usb_malloc>
				if (p) {
    a110:	cmp	r0, #0
    a112:	beq.w	a234 <usb_isr+0x9d0>
					table[index(i, RX, EVEN)].addr = p->buf;
    a116:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a118:	ldr	r2, [pc, #200]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a11a:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a11e:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a122:	bl	95e4 <usb_malloc>
				if (p) {
    a126:	cmp	r0, #0
    a128:	beq.n	a228 <usb_isr+0x9c4>
					table[index(i, RX, ODD)].addr = p->buf;
    a12a:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a12c:	ldr	r2, [pc, #184]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a12e:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a132:	str.w	r2, [r9, #40]	; 0x28
    a136:	b.n	9f6a <usb_isr+0x706>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a138:	bl	95e4 <usb_malloc>
				if (p) {
    a13c:	cmp	r0, #0
    a13e:	beq.n	a204 <usb_isr+0x9a0>
					table[index(i, RX, EVEN)].addr = p->buf;
    a140:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a142:	ldr	r2, [pc, #160]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a144:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a148:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a14c:	bl	95e4 <usb_malloc>
				if (p) {
    a150:	cmp	r0, #0
    a152:	beq.n	a1f8 <usb_isr+0x994>
					table[index(i, RX, ODD)].addr = p->buf;
    a154:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a156:	ldr	r2, [pc, #144]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a158:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a15c:	str.w	r2, [r9, #136]	; 0x88
    a160:	b.n	9fbc <usb_isr+0x758>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a162:	bl	95e4 <usb_malloc>
				if (p) {
    a166:	cmp	r0, #0
    a168:	beq.n	a264 <usb_isr+0xa00>
					table[index(i, RX, EVEN)].addr = p->buf;
    a16a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a16c:	ldr	r2, [pc, #116]	; (a1e4 <usb_isr+0x980>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a16e:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a172:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a176:	bl	95e4 <usb_malloc>
				if (p) {
    a17a:	cmp	r0, #0
    a17c:	beq.n	a258 <usb_isr+0x9f4>
					table[index(i, RX, ODD)].addr = p->buf;
    a17e:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a180:	ldr	r2, [pc, #100]	; (a1e8 <usb_isr+0x984>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a182:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a186:	str.w	r2, [r9, #104]	; 0x68
    a18a:	b.n	9fa0 <usb_isr+0x73c>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a18c:	movs	r0, #2
    a18e:	b.n	9ba6 <usb_isr+0x342>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a190:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a192:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    a196:	adds	r2, #1
    a198:	strb	r2, [r4, #0]
    a19a:	b.n	9f84 <usb_isr+0x720>
    a19c:	.word	0x1fff1bec
    a1a0:	.word	0x1fff1b48
    a1a4:	.word	0x1fff1ba4
    a1a8:	.word	0x1fff1bbc
    a1ac:	.word	0x1fff1aec
    a1b0:	.word	0x1fff1f54
    a1b4:	.word	0x0001029c
    a1b8:	.word	0x400720c4
    a1bc:	.word	0x1fff1bdd
    a1c0:	.word	0x400720c8
    a1c4:	.word	0x400720cc
    a1c8:	.word	0x400720d0
    a1cc:	.word	0x400720d4
    a1d0:	.word	0x400720d8
    a1d4:	.word	0x1fff0000
    a1d8:	.word	0x400720c0
    a1dc:	.word	0x1fff1be0
    a1e0:	.word	0x20010004
    a1e4:	.word	0x00400088
    a1e8:	.word	0x004000c8
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a1ec:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a1ee:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    a1f2:	adds	r2, #1
    a1f4:	strb	r2, [r4, #0]
    a1f6:	b.n	a0f6 <usb_isr+0x892>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a1f8:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a1fa:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a1fe:	adds	r2, #1
    a200:	strb	r2, [r4, #0]
    a202:	b.n	9fbc <usb_isr+0x758>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a204:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a206:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    a20a:	adds	r2, #1
    a20c:	strb	r2, [r4, #0]
    a20e:	b.n	a14c <usb_isr+0x8e8>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a210:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a212:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    a216:	adds	r2, #1
    a218:	strb	r2, [r4, #0]
    a21a:	b.n	9fea <usb_isr+0x786>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a21c:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a21e:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    a222:	adds	r2, #1
    a224:	strb	r2, [r4, #0]
    a226:	b.n	a09a <usb_isr+0x836>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a228:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a22a:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a22e:	adds	r2, #1
    a230:	strb	r2, [r4, #0]
    a232:	b.n	9f6a <usb_isr+0x706>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a234:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a236:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a23a:	adds	r2, #1
    a23c:	strb	r2, [r4, #0]
    a23e:	b.n	a122 <usb_isr+0x8be>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a240:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a242:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    a246:	adds	r2, #1
    a248:	strb	r2, [r4, #0]
    a24a:	b.n	9fd4 <usb_isr+0x770>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a24c:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a24e:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    a252:	adds	r2, #1
    a254:	strb	r2, [r4, #0]
    a256:	b.n	a0c8 <usb_isr+0x864>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a258:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a25a:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    a25e:	adds	r2, #1
    a260:	strb	r2, [r4, #0]
    a262:	b.n	9fa0 <usb_isr+0x73c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a264:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a266:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    a26a:	adds	r2, #1
    a26c:	strb	r2, [r4, #0]
    a26e:	b.n	a176 <usb_isr+0x912>
    a270:	cmp	r0, #64	; 0x40
    a272:	mov	lr, r0
    a274:	it	cs
    a276:	movcs.w	lr, #64	; 0x40
    a27a:	add.w	r3, r4, lr
    a27e:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a280:	movs	r3, #1
    a282:	rsb	r0, lr, r0
    a286:	mov.w	r8, lr, lsl #16
    a28a:	movs	r2, #0
    a28c:	str	r3, [sp, #8]
    a28e:	b.n	9e3e <usb_isr+0x5da>

0000a290 <usb_init>:
}



void usb_init(void)
{
    a290:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a294:	ldr	r4, [pc, #144]	; (a328 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a296:	bl	ad4c <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a29a:	movs	r2, #0
    a29c:	add.w	r0, r4, #200	; 0xc8
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    a2a0:	mov	r3, r4

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    a2a2:	str	r2, [r3, #0]
		table[i].addr = 0;
    a2a4:	str	r2, [r3, #4]
    a2a6:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    a2a8:	cmp	r3, r0
		table[i].desc = 0;
    a2aa:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    a2ae:	bne.n	a2a2 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a2b0:	ldr	r0, [pc, #120]	; (a32c <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a2b2:	ldr	r2, [pc, #124]	; (a330 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a2b4:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a2b6:	ldr.w	lr, [pc, #144]	; a348 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a2ba:	ldr	r7, [pc, #120]	; (a334 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a2bc:	ldr	r5, [pc, #120]	; (a338 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    a2be:	ldr	r6, [pc, #124]	; (a33c <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a2c0:	ldr.w	r8, [pc, #136]	; a34c <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    a2c4:	ldr.w	ip, [pc, #136]	; a350 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a2c8:	ldr.w	r9, [pc, #136]	; a354 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    a2cc:	orr.w	r3, r3, #262144	; 0x40000
    a2d0:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a2d2:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a2d4:	ldr	r0, [pc, #104]	; (a340 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    a2d6:	orr.w	r3, r3, #50331648	; 0x3000000
    a2da:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    a2dc:	ubfx	r3, r4, #8, #8
    a2e0:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    a2e4:	ubfx	r3, r4, #16, #8
    a2e8:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a2ea:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a2ec:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a2ee:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    a2f2:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a2f4:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    a2f8:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a2fc:	ldr	r5, [pc, #68]	; (a344 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    a2fe:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    a302:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    a304:	movs	r3, #1
    a306:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a30a:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a30c:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a310:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a314:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    a316:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    a31a:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    a31c:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a31e:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    a320:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    a324:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a328:	.word	0x1fff0000
    a32c:	.word	0x40048034
    a330:	.word	0x4000d800
    a334:	.word	0x400720b0
    a338:	.word	0x400720b4
    a33c:	.word	0x40072010
    a340:	.word	0xe000e104
    a344:	.word	0xe000e435
    a348:	.word	0x4007209c
    a34c:	.word	0x40072080
    a350:	.word	0x40072088
    a354:	.word	0x40072094

0000a358 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    a358:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a35a:	mrs	r2, PRIMASK
		__disable_irq();
    a35e:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    a360:	ldrb	r3, [r0, #29]
    a362:	cbnz	r3, a372 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    a364:	ldrb	r1, [r0, #28]
    a366:	cmp	r1, #1
    a368:	beq.n	a37c <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    a36a:	cmp	r1, #3
    a36c:	beq.n	a390 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    a36e:	movs	r3, #1
    a370:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a372:	cbnz	r2, a376 <EventResponder::triggerEventNotImmediate()+0x1e>
    a374:	cpsie	i
	}
	enableInterrupts(irq);
}
    a376:	ldr.w	r4, [sp], #4
    a37a:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    a37c:	ldr	r4, [pc, #68]	; (a3c4 <EventResponder::triggerEventNotImmediate()+0x6c>)
    a37e:	ldr	r1, [r4, #0]
    a380:	cbz	r1, a3ac <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    a382:	ldr	r1, [pc, #68]	; (a3c8 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    a384:	str	r3, [r0, #20]
				_prev = lastYield;
    a386:	ldr	r3, [r1, #0]
    a388:	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    a38a:	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    a38c:	str	r0, [r3, #20]
    a38e:	b.n	a36e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    a390:	ldr	r4, [pc, #56]	; (a3cc <EventResponder::triggerEventNotImmediate()+0x74>)
    a392:	ldr	r1, [r4, #0]
    a394:	cbz	r1, a3b8 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    a396:	ldr	r1, [pc, #56]	; (a3d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    a398:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    a39a:	ldr	r3, [r1, #0]
    a39c:	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    a39e:	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    a3a0:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    a3a2:	ldr	r3, [pc, #48]	; (a3d4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    a3a4:	mov.w	r1, #268435456	; 0x10000000
    a3a8:	str	r1, [r3, #0]
    a3aa:	b.n	a36e <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    a3ac:	ldr	r3, [pc, #24]	; (a3c8 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    a3ae:	str	r1, [r0, #20]
				_prev = nullptr;
    a3b0:	str	r1, [r0, #24]
				firstYield = this;
    a3b2:	str	r0, [r4, #0]
				lastYield = this;
    a3b4:	str	r0, [r3, #0]
    a3b6:	b.n	a36e <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    a3b8:	ldr	r3, [pc, #20]	; (a3d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    a3ba:	str	r1, [r0, #20]
				_prev = nullptr;
    a3bc:	str	r1, [r0, #24]
				firstInterrupt = this;
    a3be:	str	r0, [r4, #0]
				lastInterrupt = this;
    a3c0:	str	r0, [r3, #0]
    a3c2:	b.n	a3a2 <EventResponder::triggerEventNotImmediate()+0x4a>
    a3c4:	.word	0x1fff1c04
    a3c8:	.word	0x1fff1c00
    a3cc:	.word	0x1fff1bf4
    a3d0:	.word	0x1fff1bf8
    a3d4:	.word	0xe000ed04

0000a3d8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a3d8:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3da:	mrs	r2, PRIMASK
		__disable_irq();
    a3de:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a3e0:	ldr	r4, [pc, #48]	; (a414 <EventResponder::runFromInterrupt()+0x3c>)
    a3e2:	ldr	r0, [r4, #0]
		if (first) {
    a3e4:	cbz	r0, a408 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a3e6:	ldr	r6, [pc, #48]	; (a418 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a3e8:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a3ea:	ldr	r3, [r0, #20]
    a3ec:	str	r3, [r4, #0]
			if (firstInterrupt) {
    a3ee:	cbz	r3, a40e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    a3f0:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a3f2:	cbnz	r2, a3f6 <EventResponder::runFromInterrupt()+0x1e>
    a3f4:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a3f6:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    a3f8:	ldr	r3, [r0, #8]
    a3fa:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3fc:	mrs	r2, PRIMASK
		__disable_irq();
    a400:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a402:	ldr	r0, [r4, #0]
		if (first) {
    a404:	cmp	r0, #0
    a406:	bne.n	a3ea <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a408:	cbnz	r2, a40c <EventResponder::runFromInterrupt()+0x34>
    a40a:	cpsie	i
    a40c:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a40e:	str	r3, [r6, #0]
    a410:	b.n	a3f2 <EventResponder::runFromInterrupt()+0x1a>
    a412:	nop
    a414:	.word	0x1fff1bf4
    a418:	.word	0x1fff1bf8

0000a41c <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a41c:	b.w	a3d8 <EventResponder::runFromInterrupt()>

0000a420 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    a420:	ldr	r2, [pc, #96]	; (a484 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    a422:	push	{r4, r5}
	if (listActive == nullptr) {
    a424:	ldr	r4, [r2, #0]
    a426:	cmp	r4, #0
    a428:	beq.n	a47a <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    a42a:	ldr	r3, [r0, #0]
    a42c:	ldr	r1, [r4, #0]
    a42e:	cmp	r3, r1
    a430:	bcs.n	a450 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a432:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    a434:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    a436:	str	r4, [r0, #8]
		_prev = nullptr;
    a438:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    a43a:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    a43c:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    a43e:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    a440:	movs	r3, #2
    a442:	strb	r3, [r0, #20]
}
    a444:	pop	{r4, r5}
    a446:	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    a448:	ldr	r1, [r2, #0]
    a44a:	cmp	r3, r1
    a44c:	mov	r4, r2
    a44e:	bcc.n	a462 <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a450:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    a452:	subs	r3, r3, r1
    a454:	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    a456:	cmp	r2, #0
    a458:	bne.n	a448 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    a45a:	str	r2, [r0, #8]
		_prev = timer;
    a45c:	str	r4, [r0, #12]
		timer->_next = this;
    a45e:	str	r0, [r4, #8]
    a460:	b.n	a440 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    a462:	ldr	r2, [r2, #12]
    a464:	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    a466:	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    a468:	str	r0, [r4, #12]
				_prev->_next = this;
    a46a:	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    a46c:	subs	r3, r1, r3
				_state = TimerActive;
    a46e:	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    a470:	str	r0, [r5, #8]
				timer->_ms -= _ms;
    a472:	str	r3, [r4, #0]
				_state = TimerActive;
    a474:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    a476:	pop	{r4, r5}
    a478:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    a47a:	str	r4, [r0, #8]
		_prev = nullptr;
    a47c:	str	r4, [r0, #12]
		listActive = this;
    a47e:	str	r0, [r2, #0]
    a480:	b.n	a440 <MillisTimer::addToActiveList()+0x20>
    a482:	nop
    a484:	.word	0x1fff1bfc

0000a488 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    a488:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    a48a:	ldr	r6, [pc, #136]	; (a514 <MillisTimer::runFromTimer()+0x8c>)
    a48c:	ldr	r4, [r6, #0]
	while (timer) {
    a48e:	cbz	r4, a4dc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a490:	ldr	r3, [r4, #0]
    a492:	cmp	r3, #0
    a494:	bne.n	a50c <MillisTimer::runFromTimer()+0x84>
    a496:	ldr	r7, [pc, #128]	; (a518 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    a498:	mov	r5, r3
    a49a:	b.n	a4a6 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    a49c:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a49e:	cbz	r4, a4dc <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    a4a0:	ldr	r3, [r4, #0]
    a4a2:	cmp	r3, #0
    a4a4:	bne.n	a50c <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    a4a6:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    a4a8:	cbz	r3, a4ac <MillisTimer::runFromTimer()+0x24>
    a4aa:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    a4ac:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    a4ae:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a4b0:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    a4b2:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a4b4:	ldr	r3, [r3, #0]
    a4b6:	cmp	r3, r7
    a4b8:	bne.n	a4fe <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    a4ba:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    a4bc:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    a4be:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    a4c0:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    a4c2:	beq.n	a506 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    a4c4:	bl	a358 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    a4c8:	ldr	r3, [r4, #4]
    a4ca:	cmp	r3, #0
    a4cc:	beq.n	a49c <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    a4ce:	str	r3, [r4, #0]
				timer->addToActiveList();
    a4d0:	mov	r0, r4
    a4d2:	bl	a420 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    a4d6:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    a4d8:	cmp	r4, #0
    a4da:	bne.n	a4a0 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a4dc:	mrs	r3, PRIMASK
		__disable_irq();
    a4e0:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a4e2:	ldr	r2, [pc, #56]	; (a51c <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a4e4:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    a4e6:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    a4e8:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    a4ea:	cbnz	r3, a4ee <MillisTimer::runFromTimer()+0x66>
    a4ec:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    a4ee:	cbz	r0, a4fc <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    a4f0:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    a4f2:	bl	a420 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    a4f6:	mov	r0, r4
    a4f8:	cmp	r0, #0
    a4fa:	bne.n	a4f0 <MillisTimer::runFromTimer()+0x68>
    a4fc:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    a4fe:	mov	r2, r4
    a500:	movs	r1, #0
    a502:	blx	r3
    a504:	b.n	a4c8 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    a506:	ldr	r3, [r0, #8]
    a508:	blx	r3
    a50a:	b.n	a4c8 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    a50c:	subs	r3, #1
    a50e:	str	r3, [r4, #0]
			break;
    a510:	b.n	a4dc <MillisTimer::runFromTimer()+0x54>
    a512:	nop
    a514:	.word	0x1fff1bfc
    a518:	.word	0x00008781
    a51c:	.word	0x1fff1c0c

0000a520 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    a520:	ldr	r2, [pc, #8]	; (a52c <systick_isr+0xc>)
    a522:	ldr	r3, [r2, #0]
    a524:	adds	r3, #1
    a526:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    a528:	b.w	a488 <MillisTimer::runFromTimer()>
    a52c:	.word	0x1fff1ae4

0000a530 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a530:	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    a532:	ldr	r4, [pc, #176]	; (a5e4 <yield+0xb4>)
    a534:	ldrb	r3, [r4, #0]
    a536:	cbz	r3, a53a <yield+0xa>
    a538:	pop	{r3, r4, r5, pc}
	running = 1;
    a53a:	movs	r3, #1
    a53c:	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a53e:	bl	8fa0 <usb_serial_available>
	if (Serial.available()) serialEvent();
    a542:	cmp	r0, #0
    a544:	bne.n	a5cc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    a546:	bl	ab1c <serial_available>
	if (Serial1.available()) serialEvent1();
    a54a:	cmp	r0, #0
    a54c:	bne.n	a5c6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    a54e:	bl	a8f8 <serial2_available>
	if (Serial2.available()) serialEvent2();
    a552:	cmp	r0, #0
    a554:	bne.n	a5c0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    a556:	bl	ae14 <serial3_available>
	if (Serial3.available()) serialEvent3();
    a55a:	cbnz	r0, a5ba <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    a55c:	bl	aa24 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    a560:	cbnz	r0, a5b4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    a562:	bl	a720 <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    a566:	cbnz	r0, a5ae <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    a568:	bl	ac48 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    a56c:	cbnz	r0, a5a8 <yield+0x78>
#endif
	running = 0;
    a56e:	movs	r3, #0
    a570:	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a572:	mrs	r3, IPSR
		if (ipsr != 0) return;
    a576:	cmp	r3, #0
    a578:	bne.n	a538 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a57a:	mrs	r1, PRIMASK
		__disable_irq();
    a57e:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a580:	ldr	r3, [pc, #100]	; (a5e8 <yield+0xb8>)
    a582:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a584:	cbz	r0, a5d2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a586:	ldr	r4, [pc, #100]	; (a5ec <yield+0xbc>)
    a588:	ldrb	r2, [r4, #0]
    a58a:	cbnz	r2, a5d2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    a58c:	ldr	r5, [r0, #20]
    a58e:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a590:	movs	r3, #1
    a592:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    a594:	cbz	r5, a5da <yield+0xaa>
			firstYield->_prev = nullptr;
    a596:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a598:	cbnz	r1, a59c <yield+0x6c>
    a59a:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a59c:	movs	r5, #0
    a59e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a5a0:	ldr	r3, [r0, #8]
    a5a2:	blx	r3
		runningFromYield = false;
    a5a4:	strb	r5, [r4, #0]
    a5a6:	b.n	a538 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    a5a8:	bl	a718 <serialEvent6()>
    a5ac:	b.n	a56e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    a5ae:	bl	a5f4 <serialEvent5()>
    a5b2:	b.n	a568 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    a5b4:	bl	a704 <serialEvent4()>
    a5b8:	b.n	a562 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    a5ba:	bl	af10 <serialEvent3()>
    a5be:	b.n	a55c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    a5c0:	bl	a700 <serialEvent2()>
    a5c4:	b.n	a556 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    a5c6:	bl	af0c <serialEvent1()>
    a5ca:	b.n	a54e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    a5cc:	bl	a620 <serialEvent()>
    a5d0:	b.n	a546 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a5d2:	cmp	r1, #0
    a5d4:	bne.n	a538 <yield+0x8>
    a5d6:	cpsie	i
    a5d8:	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a5da:	ldr	r3, [pc, #20]	; (a5f0 <yield+0xc0>)
    a5dc:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a5de:	cmp	r1, #0
    a5e0:	bne.n	a59c <yield+0x6c>
    a5e2:	b.n	a59a <yield+0x6a>
    a5e4:	.word	0x1fff1c11
    a5e8:	.word	0x1fff1c04
    a5ec:	.word	0x1fff1c08
    a5f0:	.word	0x1fff1c00

0000a5f4 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    a5f4:	bx	lr
    a5f6:	nop

0000a5f8 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a5f8:	b.w	8fbc <usb_serial_flush_input>

0000a5fc <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a5fc:	b.w	8f70 <usb_serial_peekchar>

0000a600 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a600:	b.w	8f28 <usb_serial_getchar>

0000a604 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a604:	b.w	8fa0 <usb_serial_available>

0000a608 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a608:	b.w	915c <usb_serial_flush_output>

0000a60c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a60c:	b.w	9114 <usb_serial_write_buffer_free>

0000a610 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a610:	mov	r0, r1
    a612:	mov	r1, r2
    a614:	b.w	8ff4 <usb_serial_write>

0000a618 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a618:	mov	r0, r1
    a61a:	b.w	90fc <usb_serial_putchar>
    a61e:	nop

0000a620 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    a620:	bx	lr
    a622:	nop

0000a624 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a624:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    a626:	ldr	r2, [pc, #24]	; (a640 <Print::println()+0x1c>)
	return write(buf, 2);
    a628:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a62a:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    a62c:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a62e:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a630:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a632:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    a636:	movs	r2, #2
    a638:	blx	r3
}
    a63a:	add	sp, #12
    a63c:	ldr.w	pc, [sp], #4
    a640:	.word	0x00010298

0000a644 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a644:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    a646:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a648:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a64a:	ldr	r3, [r3, #4]
    a64c:	blx	r3
	return len;
}
    a64e:	mov	r0, r4
    a650:	pop	{r4, pc}
    a652:	nop

0000a654 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a654:	push	{r1, r2, r3}
    a656:	push	{lr}
    a658:	sub	sp, #8
    a65a:	add	r2, sp, #12
    a65c:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    a660:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a662:	bl	cac8 <vdprintf>
#endif
}
    a666:	add	sp, #8
    a668:	ldr.w	lr, [sp], #4
    a66c:	add	sp, #12
    a66e:	bx	lr

0000a670 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a670:	push	{r4, r5, r6, r7, lr}
    a672:	mov	r7, r0
    a674:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a676:	cmp	r2, #0
    a678:	beq.n	a6e2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a67a:	cmp	r2, #1
    a67c:	it	eq
    a67e:	moveq	r2, #10
	}


	if (n == 0) {
    a680:	cbz	r1, a6d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a682:	movs	r4, #33	; 0x21
    a684:	b.n	a688 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a686:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a688:	udiv	r5, r1, r2
    a68c:	mls	r1, r2, r5, r1
    a690:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a692:	cmp	r1, #9
    a694:	add.w	r1, r0, #48	; 0x30
    a698:	it	ls
    a69a:	uxtbls	r0, r1
    a69c:	add	r1, sp, #40	; 0x28
    a69e:	it	hi
    a6a0:	addhi	r0, #55	; 0x37
    a6a2:	add	r1, r4
    a6a4:	it	hi
    a6a6:	uxtbhi	r0, r0
    a6a8:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    a6ac:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    a6ae:	mov	r1, r5
    a6b0:	cmp	r5, #0
    a6b2:	bne.n	a686 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a6b4:	cbz	r3, a6c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a6b6:	subs	r4, #1
    a6b8:	uxtb	r4, r4
		buf[i] = '-';
    a6ba:	add	r3, sp, #40	; 0x28
    a6bc:	add	r3, r4
    a6be:	movs	r2, #45	; 0x2d
    a6c0:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a6c4:	ldr	r3, [r7, #0]
    a6c6:	add	r2, sp, #4
    a6c8:	adds	r1, r2, r4
    a6ca:	ldr	r3, [r3, #4]
    a6cc:	mov	r0, r7
    a6ce:	rsb	r2, r4, #34	; 0x22
    a6d2:	blx	r3
}
    a6d4:	add	sp, #44	; 0x2c
    a6d6:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a6d8:	movs	r2, #48	; 0x30
    a6da:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    a6de:	movs	r4, #33	; 0x21
    a6e0:	b.n	a6b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a6e2:	ldr	r3, [r0, #0]
    a6e4:	uxtb	r1, r1
    a6e6:	ldr	r3, [r3, #0]
    a6e8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a6ea:	add	sp, #44	; 0x2c
    a6ec:	pop	{r4, r5, r6, r7, pc}
    a6ee:	nop

0000a6f0 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a6f0:	cmp	r1, #0
		sign = '-';
		n = -n;
    a6f2:	itte	lt
    a6f4:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a6f6:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    a6f8:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a6fa:	movs	r2, #10
    a6fc:	b.w	a670 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000a700 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    a700:	bx	lr
    a702:	nop

0000a704 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    a704:	bx	lr
    a706:	nop

0000a708 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a708:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a70a:	bl	5e4 <setup>
	while (1) {
		loop();
    a70e:	bl	610 <loop>
		yield();
    a712:	bl	a530 <yield>
    a716:	b.n	a70e <main+0x6>

0000a718 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    a718:	bx	lr
    a71a:	nop

0000a71c <operator delete(void*, unsigned int)>:
    a71c:	b.w	bbd0 <free>

0000a720 <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a720:	ldr	r2, [pc, #20]	; (a738 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    a722:	ldr	r3, [pc, #24]	; (a73c <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a724:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a726:	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a728:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a72a:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a72c:	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    a72e:	it	cc
    a730:	addcc	r0, #64	; 0x40
    a732:	subs	r0, r0, r3
}
    a734:	bx	lr
    a736:	nop
    a738:	.word	0x1fff1c18
    a73c:	.word	0x1fff1c19

0000a740 <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    a740:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    a742:	ldr	r3, [pc, #172]	; (a7f0 <uart4_status_isr+0xb0>)
    a744:	ldrb	r2, [r3, #4]
    a746:	lsls	r4, r2, #26
    a748:	bpl.n	a78a <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a74a:	ldr	r0, [pc, #168]	; (a7f4 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a74c:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    a74e:	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a750:	ldr	r1, [pc, #164]	; (a7f8 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a752:	adds	r3, #1
    a754:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a756:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    a758:	it	gt
    a75a:	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a75c:	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    a75e:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    a760:	beq.n	a76a <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    a762:	ldr	r4, [pc, #152]	; (a7fc <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    a764:	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    a766:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    a768:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    a76a:	ldr	r2, [pc, #148]	; (a800 <uart4_status_isr+0xc0>)
    a76c:	ldr	r1, [r2, #0]
    a76e:	cbz	r1, a78a <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    a770:	ldr	r2, [pc, #144]	; (a804 <uart4_status_isr+0xc4>)
    a772:	ldrb	r2, [r2, #0]
    a774:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    a776:	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a778:	itet	cc
    a77a:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    a77e:	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    a780:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a782:	cmp	r3, #39	; 0x27
    a784:	itt	gt
    a786:	movgt	r3, #1
    a788:	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    a78a:	ldr	r2, [pc, #100]	; (a7f0 <uart4_status_isr+0xb0>)
    a78c:	ldrb	r3, [r2, #3]
    a78e:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a790:	lsls	r0, r3, #24
    a792:	bmi.n	a7b8 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    a794:	lsls	r2, r3, #25
    a796:	bpl.n	a7b4 <uart4_status_isr+0x74>
    a798:	ldr	r3, [pc, #84]	; (a7f0 <uart4_status_isr+0xb0>)
    a79a:	ldrb	r3, [r3, #4]
    a79c:	lsls	r3, r3, #25
    a79e:	bpl.n	a7b4 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a7a0:	ldr	r3, [pc, #100]	; (a808 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a7a2:	ldr	r1, [pc, #104]	; (a80c <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    a7a4:	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    a7a6:	movs	r2, #0
    a7a8:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a7aa:	cbz	r3, a7ae <uart4_status_isr+0x6e>
    a7ac:	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    a7ae:	ldr	r3, [pc, #64]	; (a7f0 <uart4_status_isr+0xb0>)
    a7b0:	movs	r2, #44	; 0x2c
    a7b2:	strb	r2, [r3, #3]
	}
}
    a7b4:	pop	{r4, r5}
    a7b6:	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    a7b8:	ldrb	r1, [r2, #4]
    a7ba:	lsls	r1, r1, #24
    a7bc:	bpl.n	a794 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    a7be:	ldr	r1, [pc, #80]	; (a810 <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    a7c0:	ldr	r0, [pc, #64]	; (a804 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a7c2:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    a7c4:	ldrb	r1, [r0, #0]
    a7c6:	uxtb	r1, r1
		if (head == tail) {
    a7c8:	cmp	r4, r1
    a7ca:	beq.n	a7e8 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    a7cc:	adds	r2, r1, #1
    a7ce:	cmp	r2, #39	; 0x27
    a7d0:	itt	hi
    a7d2:	movhi	r1, #0
    a7d4:	movhi	r2, r1
			n = tx_buffer[tail];
    a7d6:	ldr	r5, [pc, #60]	; (a814 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a7d8:	ldr	r4, [pc, #20]	; (a7f0 <uart4_status_isr+0xb0>)
    a7da:	it	ls
    a7dc:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    a7de:	ldrb	r2, [r5, r2]
    a7e0:	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    a7e2:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    a7e4:	strb	r1, [r0, #0]
    a7e6:	b.n	a794 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    a7e8:	movs	r1, #108	; 0x6c
    a7ea:	strb	r1, [r2, #3]
    a7ec:	b.n	a794 <uart4_status_isr+0x54>
    a7ee:	nop
    a7f0:	.word	0x400ea000
    a7f4:	.word	0x1fff1c18
    a7f8:	.word	0x1fff1c19
    a7fc:	.word	0x1fff1c44
    a800:	.word	0x1fff1c14
    a804:	.word	0x1fff1c85
    a808:	.word	0x1fff1c88
    a80c:	.word	0x1fff1c84
    a810:	.word	0x1fff1c8c
    a814:	.word	0x1fff1c1c

0000a818 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    a818:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a81a:	ldr	r0, [pc, #164]	; (a8c0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a81c:	ldr	r2, [pc, #164]	; (a8c4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    a81e:	ldr	r3, [pc, #168]	; (a8c8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a820:	ldr	r5, [pc, #168]	; (a8cc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a822:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a824:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a826:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a828:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    a82a:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a82c:	ldr	r4, [pc, #160]	; (a8d0 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a82e:	cmp	r3, #8
    a830:	beq.n	a894 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a832:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a834:	ldr	r0, [pc, #156]	; (a8d4 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a836:	ldr	r1, [pc, #160]	; (a8d8 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a838:	beq.n	a8aa <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a83a:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a83c:	ite	eq
    a83e:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a840:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a842:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a844:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a846:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a848:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a84a:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a84c:	ldr	r3, [pc, #140]	; (a8dc <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a84e:	ldr	r1, [pc, #144]	; (a8e0 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a850:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a852:	ldr	r2, [pc, #144]	; (a8e4 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a854:	cbz	r3, a886 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a856:	movs	r3, #1
    a858:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a85a:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a85c:	ldr	r3, [pc, #136]	; (a8e8 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a85e:	ldr	r1, [pc, #140]	; (a8ec <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a860:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a862:	ldr	r2, [pc, #140]	; (a8f0 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    a864:	cmp	r3, #1
    a866:	bls.n	a8b6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    a868:	cmp	r3, #4
    a86a:	bls.n	a88c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    a86c:	cmp	r3, #8
    a86e:	bls.n	a8ae <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    a870:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a872:	ite	ls
    a874:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a876:	movhi	r3, #135	; 0x87
    a878:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a87a:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    a87c:	ldr	r3, [pc, #116]	; (a8f4 <analog_init+0xdc>)
    a87e:	movs	r2, #1
    a880:	strb	r2, [r3, #0]
}
    a882:	pop	{r4, r5}
    a884:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a886:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a888:	str	r3, [r2, #0]
    a88a:	b.n	a85c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a88c:	movs	r3, #132	; 0x84
    a88e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a890:	str	r3, [r2, #0]
    a892:	b.n	a87c <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a894:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a898:	ldr	r1, [pc, #60]	; (a8d8 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a89a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a89c:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a89e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a8a0:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a8a2:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a8a4:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a8a6:	str	r3, [r1, #0]
    a8a8:	b.n	a84c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a8aa:	movs	r2, #57	; 0x39
    a8ac:	b.n	a89e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a8ae:	movs	r3, #133	; 0x85
    a8b0:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a8b2:	str	r3, [r2, #0]
    a8b4:	b.n	a87c <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a8b6:	movs	r3, #128	; 0x80
    a8b8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a8ba:	str	r3, [r2, #0]
    a8bc:	b.n	a87c <analog_init+0x64>
    a8be:	nop
    a8c0:	.word	0x40074000
    a8c4:	.word	0x40074001
    a8c8:	.word	0x1fff09d8
    a8cc:	.word	0x4003b008
    a8d0:	.word	0x4003b00c
    a8d4:	.word	0x400bb008
    a8d8:	.word	0x400bb00c
    a8dc:	.word	0x1fff1c8e
    a8e0:	.word	0x4003b020
    a8e4:	.word	0x400bb020
    a8e8:	.word	0x1fff09d9
    a8ec:	.word	0x4003b024
    a8f0:	.word	0x400bb024
    a8f4:	.word	0x1fff1c8d

0000a8f8 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8f8:	ldr	r2, [pc, #20]	; (a910 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    a8fa:	ldr	r3, [pc, #24]	; (a914 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a8fc:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    a8fe:	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a900:	uxtb	r0, r0
	tail = rx_buffer_tail;
    a902:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    a904:	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    a906:	it	cc
    a908:	addcc	r0, #64	; 0x40
    a90a:	subs	r0, r0, r3
}
    a90c:	bx	lr
    a90e:	nop
    a910:	.word	0x1fff1d00
    a914:	.word	0x1fff1c95

0000a918 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a918:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a91a:	ldr	r3, [pc, #224]	; (a9fc <uart1_status_isr+0xe4>)
    a91c:	ldrb	r2, [r3, #4]
    a91e:	tst.w	r2, #48	; 0x30
    a922:	beq.n	a97e <uart1_status_isr+0x66>
		__disable_irq();
    a924:	cpsid	i
		avail = UART1_RCFIFO;
    a926:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    a928:	and.w	r2, r1, #255	; 0xff
    a92c:	cmp	r1, #0
    a92e:	beq.n	a9ac <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a930:	cpsie	i
			head = rx_buffer_head;
    a932:	ldr	r7, [pc, #204]	; (aa00 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    a934:	ldr	r1, [pc, #204]	; (aa04 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a936:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    a938:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a93a:	ldr	r6, [pc, #204]	; (aa08 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a93c:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    a93e:	uxtb	r0, r0
			tail = rx_buffer_tail;
    a940:	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    a942:	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a944:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a946:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    a948:	it	cs
    a94a:	movcs	r3, #0
				if (newhead != tail) {
    a94c:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    a94e:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    a952:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    a954:	itt	ne
    a956:	strbne	r1, [r6, r3]
    a958:	movne	r0, r3
				}
			} while (--avail > 0);
    a95a:	ands.w	r2, r2, #255	; 0xff
    a95e:	bne.n	a942 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    a960:	ldr	r3, [pc, #168]	; (aa0c <uart1_status_isr+0xf4>)
    a962:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    a964:	uxtb	r2, r0
    a966:	strb	r2, [r7, #0]
			if (rts_pin) {
    a968:	cbz	r3, a97e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    a96a:	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a96c:	itet	cc
    a96e:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    a972:	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    a974:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    a976:	cmp	r0, #39	; 0x27
    a978:	itt	gt
    a97a:	movgt	r2, #1
    a97c:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    a97e:	ldr	r1, [pc, #124]	; (a9fc <uart1_status_isr+0xe4>)
    a980:	ldrb	r2, [r1, #3]
    a982:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a984:	lsls	r5, r2, #24
    a986:	bmi.n	a9b6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a988:	lsls	r2, r2, #25
    a98a:	bpl.n	a9a8 <uart1_status_isr+0x90>
    a98c:	ldr	r3, [pc, #108]	; (a9fc <uart1_status_isr+0xe4>)
    a98e:	ldrb	r3, [r3, #4]
    a990:	lsls	r3, r3, #25
    a992:	bpl.n	a9a8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a994:	ldr	r3, [pc, #120]	; (aa10 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a996:	ldr	r1, [pc, #124]	; (aa14 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    a998:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    a99a:	movs	r2, #0
    a99c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a99e:	cbz	r3, a9a2 <uart1_status_isr+0x8a>
    a9a0:	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    a9a2:	ldr	r3, [pc, #88]	; (a9fc <uart1_status_isr+0xe4>)
    a9a4:	movs	r2, #60	; 0x3c
    a9a6:	strb	r2, [r3, #3]
	}
}
    a9a8:	pop	{r4, r5, r6, r7}
    a9aa:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a9ac:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    a9ae:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a9b0:	strb	r2, [r3, #17]
			__enable_irq();
    a9b2:	cpsie	i
    a9b4:	b.n	a97e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a9b6:	ldrb	r3, [r1, #4]
    a9b8:	lsls	r4, r3, #24
    a9ba:	bpl.n	a988 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    a9bc:	ldr	r3, [pc, #88]	; (aa18 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    a9be:	ldr	r6, [pc, #92]	; (aa1c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a9c0:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    a9c2:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    a9c4:	uxtb	r4, r4
		tail = tx_buffer_tail;
    a9c6:	uxtb	r3, r3
		do {
			if (tail == head) break;
    a9c8:	cmp	r4, r3
    a9ca:	beq.n	a9ea <uart1_status_isr+0xd2>
    a9cc:	ldr	r5, [pc, #80]	; (aa20 <uart1_status_isr+0x108>)
    a9ce:	b.n	a9d4 <uart1_status_isr+0xbc>
    a9d0:	cmp	r3, r4
    a9d2:	beq.n	a9ea <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    a9d4:	adds	r3, #1
    a9d6:	cmp	r3, #40	; 0x28
    a9d8:	it	cs
    a9da:	movcs	r3, #0
			avail = UART1_S1;
    a9dc:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    a9de:	ldrb	r0, [r5, r3]
    a9e0:	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    a9e2:	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    a9e4:	ldrb	r0, [r1, #20]
    a9e6:	cmp	r0, #7
    a9e8:	bls.n	a9d0 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    a9ea:	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9ec:	ldr	r1, [pc, #12]	; (a9fc <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    a9ee:	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9f0:	ldrb	r3, [r1, #4]
    a9f2:	lsls	r0, r3, #24
    a9f4:	itt	mi
    a9f6:	movmi	r3, #124	; 0x7c
    a9f8:	strbmi	r3, [r1, #3]
    a9fa:	b.n	a988 <uart1_status_isr+0x70>
    a9fc:	.word	0x4006b000
    aa00:	.word	0x1fff1d00
    aa04:	.word	0x1fff1c95
    aa08:	.word	0x1fff1cc0
    aa0c:	.word	0x1fff1c90
    aa10:	.word	0x1fff1d04
    aa14:	.word	0x1fff1c94
    aa18:	.word	0x1fff1d08
    aa1c:	.word	0x1fff1d01
    aa20:	.word	0x1fff1c98

0000aa24 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa24:	ldr	r2, [pc, #20]	; (aa3c <serial4_available+0x18>)
	tail = rx_buffer_tail;
    aa26:	ldr	r3, [pc, #24]	; (aa40 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa28:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    aa2a:	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa2c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    aa2e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    aa30:	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa32:	it	cc
    aa34:	addcc	r0, #64	; 0x40
    aa36:	subs	r0, r0, r3
}
    aa38:	bx	lr
    aa3a:	nop
    aa3c:	.word	0x1fff1d10
    aa40:	.word	0x1fff1d11

0000aa44 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    aa44:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    aa46:	ldr	r3, [pc, #172]	; (aaf4 <uart3_status_isr+0xb0>)
    aa48:	ldrb	r2, [r3, #4]
    aa4a:	lsls	r4, r2, #26
    aa4c:	bpl.n	aa8e <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa4e:	ldr	r0, [pc, #168]	; (aaf8 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    aa50:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    aa52:	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa54:	ldr	r1, [pc, #164]	; (aafc <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa56:	adds	r3, #1
    aa58:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa5a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    aa5c:	it	gt
    aa5e:	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa60:	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    aa62:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    aa64:	beq.n	aa6e <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    aa66:	ldr	r4, [pc, #152]	; (ab00 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    aa68:	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    aa6a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    aa6c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    aa6e:	ldr	r2, [pc, #148]	; (ab04 <uart3_status_isr+0xc0>)
    aa70:	ldr	r1, [r2, #0]
    aa72:	cbz	r1, aa8e <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    aa74:	ldr	r2, [pc, #144]	; (ab08 <uart3_status_isr+0xc4>)
    aa76:	ldrb	r2, [r2, #0]
    aa78:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    aa7a:	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa7c:	itet	cc
    aa7e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    aa82:	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    aa84:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    aa86:	cmp	r3, #39	; 0x27
    aa88:	itt	gt
    aa8a:	movgt	r3, #1
    aa8c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    aa8e:	ldr	r2, [pc, #100]	; (aaf4 <uart3_status_isr+0xb0>)
    aa90:	ldrb	r3, [r2, #3]
    aa92:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    aa94:	lsls	r0, r3, #24
    aa96:	bmi.n	aabc <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    aa98:	lsls	r2, r3, #25
    aa9a:	bpl.n	aab8 <uart3_status_isr+0x74>
    aa9c:	ldr	r3, [pc, #84]	; (aaf4 <uart3_status_isr+0xb0>)
    aa9e:	ldrb	r3, [r3, #4]
    aaa0:	lsls	r3, r3, #25
    aaa2:	bpl.n	aab8 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    aaa4:	ldr	r3, [pc, #100]	; (ab0c <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    aaa6:	ldr	r1, [pc, #104]	; (ab10 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    aaa8:	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    aaaa:	movs	r2, #0
    aaac:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    aaae:	cbz	r3, aab2 <uart3_status_isr+0x6e>
    aab0:	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    aab2:	ldr	r3, [pc, #64]	; (aaf4 <uart3_status_isr+0xb0>)
    aab4:	movs	r2, #44	; 0x2c
    aab6:	strb	r2, [r3, #3]
	}
}
    aab8:	pop	{r4, r5}
    aaba:	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    aabc:	ldrb	r1, [r2, #4]
    aabe:	lsls	r1, r1, #24
    aac0:	bpl.n	aa98 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    aac2:	ldr	r1, [pc, #80]	; (ab14 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    aac4:	ldr	r0, [pc, #64]	; (ab08 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    aac6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    aac8:	ldrb	r1, [r0, #0]
    aaca:	uxtb	r1, r1
		if (head == tail) {
    aacc:	cmp	r4, r1
    aace:	beq.n	aaec <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    aad0:	adds	r2, r1, #1
    aad2:	cmp	r2, #39	; 0x27
    aad4:	itt	hi
    aad6:	movhi	r1, #0
    aad8:	movhi	r2, r1
			n = tx_buffer[tail];
    aada:	ldr	r5, [pc, #60]	; (ab18 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    aadc:	ldr	r4, [pc, #20]	; (aaf4 <uart3_status_isr+0xb0>)
    aade:	it	ls
    aae0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    aae2:	ldrb	r2, [r5, r2]
    aae4:	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    aae6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    aae8:	strb	r1, [r0, #0]
    aaea:	b.n	aa98 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    aaec:	movs	r1, #108	; 0x6c
    aaee:	strb	r1, [r2, #3]
    aaf0:	b.n	aa98 <uart3_status_isr+0x54>
    aaf2:	nop
    aaf4:	.word	0x4006d000
    aaf8:	.word	0x1fff1d10
    aafc:	.word	0x1fff1d11
    ab00:	.word	0x1fff1d3c
    ab04:	.word	0x1fff1d0c
    ab08:	.word	0x1fff1d7d
    ab0c:	.word	0x1fff1d80
    ab10:	.word	0x1fff1d7c
    ab14:	.word	0x1fff1d84
    ab18:	.word	0x1fff1d14

0000ab1c <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab1c:	ldr	r2, [pc, #20]	; (ab34 <serial_available+0x18>)
	tail = rx_buffer_tail;
    ab1e:	ldr	r3, [pc, #24]	; (ab38 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab20:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ab22:	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab24:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ab26:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ab28:	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab2a:	it	cc
    ab2c:	addcc	r0, #64	; 0x40
    ab2e:	subs	r0, r0, r3
}
    ab30:	bx	lr
    ab32:	nop
    ab34:	.word	0x1fff1d8c
    ab38:	.word	0x1fff1d8d

0000ab3c <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    ab3c:	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ab3e:	ldr	r3, [pc, #224]	; (ac20 <uart0_status_isr+0xe4>)
    ab40:	ldrb	r2, [r3, #4]
    ab42:	tst.w	r2, #48	; 0x30
    ab46:	beq.n	aba2 <uart0_status_isr+0x66>
		__disable_irq();
    ab48:	cpsid	i
		avail = UART0_RCFIFO;
    ab4a:	ldrb	r1, [r3, #22]
		if (avail == 0) {
    ab4c:	and.w	r2, r1, #255	; 0xff
    ab50:	cmp	r1, #0
    ab52:	beq.n	abd0 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    ab54:	cpsie	i
			head = rx_buffer_head;
    ab56:	ldr	r7, [pc, #204]	; (ac24 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    ab58:	ldr	r1, [pc, #204]	; (ac28 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ab5a:	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    ab5c:	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    ab5e:	ldr	r6, [pc, #204]	; (ac2c <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab60:	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    ab62:	uxtb	r0, r0
			tail = rx_buffer_tail;
    ab64:	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    ab66:	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    ab68:	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab6a:	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    ab6c:	it	cs
    ab6e:	movcs	r3, #0
				if (newhead != tail) {
    ab70:	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    ab72:	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    ab76:	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    ab78:	itt	ne
    ab7a:	strbne	r1, [r6, r3]
    ab7c:	movne	r0, r3
				}
			} while (--avail > 0);
    ab7e:	ands.w	r2, r2, #255	; 0xff
    ab82:	bne.n	ab66 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    ab84:	ldr	r3, [pc, #168]	; (ac30 <uart0_status_isr+0xf4>)
    ab86:	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    ab88:	uxtb	r2, r0
    ab8a:	strb	r2, [r7, #0]
			if (rts_pin) {
    ab8c:	cbz	r3, aba2 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    ab8e:	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab90:	itet	cc
    ab92:	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    ab96:	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    ab98:	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    ab9a:	cmp	r0, #39	; 0x27
    ab9c:	itt	gt
    ab9e:	movgt	r2, #1
    aba0:	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    aba2:	ldr	r1, [pc, #124]	; (ac20 <uart0_status_isr+0xe4>)
    aba4:	ldrb	r2, [r1, #3]
    aba6:	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    aba8:	lsls	r5, r2, #24
    abaa:	bmi.n	abda <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    abac:	lsls	r2, r2, #25
    abae:	bpl.n	abcc <uart0_status_isr+0x90>
    abb0:	ldr	r3, [pc, #108]	; (ac20 <uart0_status_isr+0xe4>)
    abb2:	ldrb	r3, [r3, #4]
    abb4:	lsls	r3, r3, #25
    abb6:	bpl.n	abcc <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    abb8:	ldr	r3, [pc, #120]	; (ac34 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    abba:	ldr	r1, [pc, #124]	; (ac38 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    abbc:	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    abbe:	movs	r2, #0
    abc0:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    abc2:	cbz	r3, abc6 <uart0_status_isr+0x8a>
    abc4:	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    abc6:	ldr	r3, [pc, #88]	; (ac20 <uart0_status_isr+0xe4>)
    abc8:	movs	r2, #60	; 0x3c
    abca:	strb	r2, [r3, #3]
	}
}
    abcc:	pop	{r4, r5, r6, r7}
    abce:	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    abd0:	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    abd2:	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    abd4:	strb	r2, [r3, #17]
			__enable_irq();
    abd6:	cpsie	i
    abd8:	b.n	aba2 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    abda:	ldrb	r3, [r1, #4]
    abdc:	lsls	r4, r3, #24
    abde:	bpl.n	abac <uart0_status_isr+0x70>
		head = tx_buffer_head;
    abe0:	ldr	r3, [pc, #88]	; (ac3c <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    abe2:	ldr	r6, [pc, #92]	; (ac40 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    abe4:	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    abe6:	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    abe8:	uxtb	r4, r4
		tail = tx_buffer_tail;
    abea:	uxtb	r3, r3
		do {
			if (tail == head) break;
    abec:	cmp	r4, r3
    abee:	beq.n	ac0e <uart0_status_isr+0xd2>
    abf0:	ldr	r5, [pc, #80]	; (ac44 <uart0_status_isr+0x108>)
    abf2:	b.n	abf8 <uart0_status_isr+0xbc>
    abf4:	cmp	r3, r4
    abf6:	beq.n	ac0e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    abf8:	adds	r3, #1
    abfa:	cmp	r3, #64	; 0x40
    abfc:	it	cs
    abfe:	movcs	r3, #0
			avail = UART0_S1;
    ac00:	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    ac02:	ldrb	r0, [r5, r3]
    ac04:	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    ac06:	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    ac08:	ldrb	r0, [r1, #20]
    ac0a:	cmp	r0, #7
    ac0c:	bls.n	abf4 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    ac0e:	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ac10:	ldr	r1, [pc, #12]	; (ac20 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    ac12:	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    ac14:	ldrb	r3, [r1, #4]
    ac16:	lsls	r0, r3, #24
    ac18:	itt	mi
    ac1a:	movmi	r3, #124	; 0x7c
    ac1c:	strbmi	r3, [r1, #3]
    ac1e:	b.n	abac <uart0_status_isr+0x70>
    ac20:	.word	0x4006a000
    ac24:	.word	0x1fff1d8c
    ac28:	.word	0x1fff1d8d
    ac2c:	.word	0x1fff1dd0
    ac30:	.word	0x1fff1d88
    ac34:	.word	0x1fff1e14
    ac38:	.word	0x1fff1e10
    ac3c:	.word	0x1fff1e18
    ac40:	.word	0x1fff1e11
    ac44:	.word	0x1fff1d90

0000ac48 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac48:	ldr	r2, [pc, #20]	; (ac60 <serial6_available+0x18>)
	tail = rx_buffer_tail;
    ac4a:	ldr	r3, [pc, #24]	; (ac64 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac4c:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ac4e:	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac50:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ac52:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ac54:	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    ac56:	it	cc
    ac58:	addcc	r0, #64	; 0x40
    ac5a:	subs	r0, r0, r3
}
    ac5c:	bx	lr
    ac5e:	nop
    ac60:	.word	0x1fff1e20
    ac64:	.word	0x1fff1e21

0000ac68 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
    ac68:	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
    ac6a:	ldr	r3, [pc, #176]	; (ad1c <lpuart0_status_isr+0xb4>)
    ac6c:	ldr	r2, [r3, #4]
    ac6e:	lsls	r4, r2, #10
    ac70:	bpl.n	acb2 <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac72:	ldr	r0, [pc, #172]	; (ad20 <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
    ac74:	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
    ac76:	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac78:	ldr	r1, [pc, #168]	; (ad24 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac7a:	adds	r3, #1
    ac7c:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac7e:	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
    ac80:	it	gt
    ac82:	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ac84:	cmp	r3, r1
    ac86:	beq.n	ac92 <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
    ac88:	ldr	r4, [pc, #156]	; (ad28 <lpuart0_status_isr+0xc0>)
    ac8a:	uxtb	r2, r2
			rx_buffer_head = head;
    ac8c:	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    ac8e:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    ac90:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    ac92:	ldr	r2, [pc, #152]	; (ad2c <lpuart0_status_isr+0xc4>)
    ac94:	ldr	r1, [r2, #0]
    ac96:	cbz	r1, acb2 <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    ac98:	ldr	r2, [pc, #148]	; (ad30 <lpuart0_status_isr+0xc8>)
    ac9a:	ldrb	r2, [r2, #0]
    ac9c:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    ac9e:	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    aca0:	itet	cc
    aca2:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    aca6:	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    aca8:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    acaa:	cmp	r3, #39	; 0x27
    acac:	itt	gt
    acae:	movgt	r3, #1
    acb0:	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
    acb2:	ldr	r2, [pc, #104]	; (ad1c <lpuart0_status_isr+0xb4>)
    acb4:	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
    acb6:	lsls	r0, r3, #8
    acb8:	bpl.n	acc0 <lpuart0_status_isr+0x58>
    acba:	ldr	r2, [r2, #4]
    acbc:	lsls	r1, r2, #8
    acbe:	bmi.n	ace4 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
    acc0:	lsls	r2, r3, #9
    acc2:	bpl.n	ace0 <lpuart0_status_isr+0x78>
    acc4:	ldr	r3, [pc, #84]	; (ad1c <lpuart0_status_isr+0xb4>)
    acc6:	ldr	r3, [r3, #4]
    acc8:	lsls	r3, r3, #9
    acca:	bpl.n	ace0 <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    accc:	ldr	r3, [pc, #100]	; (ad34 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    acce:	ldr	r1, [pc, #104]	; (ad38 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
    acd0:	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
    acd2:	movs	r2, #0
    acd4:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    acd6:	cbz	r3, acda <lpuart0_status_isr+0x72>
    acd8:	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
    acda:	ldr	r3, [pc, #96]	; (ad3c <lpuart0_status_isr+0xd4>)
    acdc:	movs	r2, #0
    acde:	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
    ace0:	pop	{r4, r5}
    ace2:	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    ace4:	ldr	r2, [pc, #88]	; (ad40 <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
    ace6:	ldr	r1, [pc, #72]	; (ad30 <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
    ace8:	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
    acea:	ldrb	r2, [r1, #0]
    acec:	uxtb	r2, r2
		if (head == tail) {
    acee:	cmp	r0, r2
    acf0:	beq.n	ad0e <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    acf2:	adds	r2, #1
    acf4:	cmp	r2, #39	; 0x27
    acf6:	itt	hi
    acf8:	movhi	r0, #0
    acfa:	movhi	r2, r0
			n = tx_buffer[tail];
    acfc:	ldr	r5, [pc, #68]	; (ad44 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    acfe:	ldr	r4, [pc, #28]	; (ad1c <lpuart0_status_isr+0xb4>)
    ad00:	it	ls
    ad02:	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    ad04:	ldrb	r2, [r5, r2]
    ad06:	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
    ad08:	str	r2, [r4, #12]
			tx_buffer_tail = tail;
    ad0a:	strb	r0, [r1, #0]
    ad0c:	b.n	acc0 <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad0e:	ldr	r0, [pc, #56]	; (ad48 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad10:	ldr	r2, [pc, #40]	; (ad3c <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad12:	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad14:	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
    ad16:	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
    ad18:	str	r1, [r2, #0]
    ad1a:	b.n	acc0 <lpuart0_status_isr+0x58>
    ad1c:	.word	0x400c4000
    ad20:	.word	0x1fff1e20
    ad24:	.word	0x1fff1e21
    ad28:	.word	0x1fff1e4c
    ad2c:	.word	0x1fff1e1c
    ad30:	.word	0x1fff1e8d
    ad34:	.word	0x1fff1e90
    ad38:	.word	0x1fff1e8c
    ad3c:	.word	0x43880158
    ad40:	.word	0x1fff1e94
    ad44:	.word	0x1fff1e24
    ad48:	.word	0x4388015c

0000ad4c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ad4c:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ad4e:	ldr	r2, [pc, #96]	; (adb0 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad50:	ldr	r3, [pc, #96]	; (adb4 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ad52:	ldr	r1, [pc, #100]	; (adb8 <usb_init_serialnumber+0x6c>)
    ad54:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad56:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ad58:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ad5a:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ad5c:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ad5e:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ad60:	ldrb	r3, [r2, #0]
    ad62:	lsls	r3, r3, #24
    ad64:	bpl.n	ad60 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ad66:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ad68:	ldr	r3, [pc, #80]	; (adbc <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ad6a:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ad6c:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    ad6e:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ad70:	ldr	r3, [pc, #76]	; (adc0 <usb_init_serialnumber+0x74>)
    ad72:	ldr	r4, [pc, #80]	; (adc4 <usb_init_serialnumber+0x78>)
    ad74:	cmp	r0, r3
    ad76:	it	ls
    ad78:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    ad7c:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ad7e:	it	ls
    ad80:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    ad82:	movs	r2, #10
    ad84:	bl	adc8 <ultoa>
    ad88:	add	r1, sp, #4
    ad8a:	mov	r0, r4
	for (i=0; i<10; i++) {
    ad8c:	movs	r3, #0
		char c = buf[i];
    ad8e:	ldrb.w	r2, [r1], #1
    ad92:	adds	r3, #1
		if (!c) break;
    ad94:	cbz	r2, ada6 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    ad96:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    ad98:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    ad9c:	bne.n	ad8e <usb_init_serialnumber+0x42>
    ad9e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ada0:	strb	r3, [r4, #0]
}
    ada2:	add	sp, #16
    ada4:	pop	{r4, pc}
    ada6:	lsls	r3, r3, #1
    ada8:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    adaa:	strb	r3, [r4, #0]
}
    adac:	add	sp, #16
    adae:	pop	{r4, pc}
    adb0:	.word	0x40020004
    adb4:	.word	0x40020000
    adb8:	.word	0x41070000
    adbc:	.word	0x4002000c
    adc0:	.word	0x0098967f
    adc4:	.word	0x1fff0ab0

0000adc8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    adc8:	push	{r4, r5, r6, r7}
    adca:	subs	r5, r1, #1
    adcc:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    adce:	movs	r4, #0
    add0:	b.n	add4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    add2:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    add4:	udiv	r3, r0, r2
    add8:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    addc:	cmp	r0, #9
    adde:	add.w	r7, r0, #48	; 0x30
    ade2:	itet	hi
    ade4:	addhi	r0, #55	; 0x37
    ade6:	uxtbls	r0, r7
    ade8:	uxtbhi	r0, r0
    adea:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    adee:	mov	r0, r3
    adf0:	cmp	r3, #0
    adf2:	bne.n	add2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    adf4:	adds	r2, r1, r4
    adf6:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    adf8:	cbz	r4, ae0e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    adfa:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    adfc:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    ae00:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ae02:	adds	r3, #1
    ae04:	subs	r0, r4, r3
    ae06:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    ae08:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    ae0c:	blt.n	adfa <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    ae0e:	mov	r0, r1
    ae10:	pop	{r4, r5, r6, r7}
    ae12:	bx	lr

0000ae14 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae14:	ldr	r2, [pc, #20]	; (ae2c <serial3_available+0x18>)
	tail = rx_buffer_tail;
    ae16:	ldr	r3, [pc, #24]	; (ae30 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae18:	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    ae1a:	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ae1c:	uxtb	r0, r0
	tail = rx_buffer_tail;
    ae1e:	uxtb	r3, r3
	if (head >= tail) return head - tail;
    ae20:	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae22:	it	cc
    ae24:	addcc	r0, #64	; 0x40
    ae26:	subs	r0, r0, r3
}
    ae28:	bx	lr
    ae2a:	nop
    ae2c:	.word	0x1fff1e9c
    ae30:	.word	0x1fff1e9d

0000ae34 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    ae34:	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    ae36:	ldr	r3, [pc, #172]	; (aee4 <uart2_status_isr+0xb0>)
    ae38:	ldrb	r2, [r3, #4]
    ae3a:	lsls	r4, r2, #26
    ae3c:	bpl.n	ae7e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae3e:	ldr	r0, [pc, #168]	; (aee8 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    ae40:	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    ae42:	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae44:	ldr	r1, [pc, #164]	; (aeec <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae46:	adds	r3, #1
    ae48:	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae4a:	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    ae4c:	it	gt
    ae4e:	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae50:	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    ae52:	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    ae54:	beq.n	ae5e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    ae56:	ldr	r4, [pc, #152]	; (aef0 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    ae58:	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    ae5a:	strb	r2, [r4, r3]
			rx_buffer_head = head;
    ae5c:	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    ae5e:	ldr	r2, [pc, #148]	; (aef4 <uart2_status_isr+0xc0>)
    ae60:	ldr	r1, [r2, #0]
    ae62:	cbz	r1, ae7e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    ae64:	ldr	r2, [pc, #144]	; (aef8 <uart2_status_isr+0xc4>)
    ae66:	ldrb	r2, [r2, #0]
    ae68:	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    ae6a:	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae6c:	itet	cc
    ae6e:	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    ae72:	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    ae74:	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    ae76:	cmp	r3, #39	; 0x27
    ae78:	itt	gt
    ae7a:	movgt	r3, #1
    ae7c:	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    ae7e:	ldr	r2, [pc, #100]	; (aee4 <uart2_status_isr+0xb0>)
    ae80:	ldrb	r3, [r2, #3]
    ae82:	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    ae84:	lsls	r0, r3, #24
    ae86:	bmi.n	aeac <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    ae88:	lsls	r2, r3, #25
    ae8a:	bpl.n	aea8 <uart2_status_isr+0x74>
    ae8c:	ldr	r3, [pc, #84]	; (aee4 <uart2_status_isr+0xb0>)
    ae8e:	ldrb	r3, [r3, #4]
    ae90:	lsls	r3, r3, #25
    ae92:	bpl.n	aea8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ae94:	ldr	r3, [pc, #100]	; (aefc <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae96:	ldr	r1, [pc, #104]	; (af00 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    ae98:	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    ae9a:	movs	r2, #0
    ae9c:	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    ae9e:	cbz	r3, aea2 <uart2_status_isr+0x6e>
    aea0:	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    aea2:	ldr	r3, [pc, #64]	; (aee4 <uart2_status_isr+0xb0>)
    aea4:	movs	r2, #44	; 0x2c
    aea6:	strb	r2, [r3, #3]
	}
}
    aea8:	pop	{r4, r5}
    aeaa:	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    aeac:	ldrb	r1, [r2, #4]
    aeae:	lsls	r1, r1, #24
    aeb0:	bpl.n	ae88 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    aeb2:	ldr	r1, [pc, #80]	; (af04 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    aeb4:	ldr	r0, [pc, #64]	; (aef8 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    aeb6:	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    aeb8:	ldrb	r1, [r0, #0]
    aeba:	uxtb	r1, r1
		if (head == tail) {
    aebc:	cmp	r4, r1
    aebe:	beq.n	aedc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    aec0:	adds	r2, r1, #1
    aec2:	cmp	r2, #39	; 0x27
    aec4:	itt	hi
    aec6:	movhi	r1, #0
    aec8:	movhi	r2, r1
			n = tx_buffer[tail];
    aeca:	ldr	r5, [pc, #60]	; (af08 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    aecc:	ldr	r4, [pc, #20]	; (aee4 <uart2_status_isr+0xb0>)
    aece:	it	ls
    aed0:	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    aed2:	ldrb	r2, [r5, r2]
    aed4:	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    aed6:	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    aed8:	strb	r1, [r0, #0]
    aeda:	b.n	ae88 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    aedc:	movs	r1, #108	; 0x6c
    aede:	strb	r1, [r2, #3]
    aee0:	b.n	ae88 <uart2_status_isr+0x54>
    aee2:	nop
    aee4:	.word	0x4006c000
    aee8:	.word	0x1fff1e9c
    aeec:	.word	0x1fff1e9d
    aef0:	.word	0x1fff1ec8
    aef4:	.word	0x1fff1e98
    aef8:	.word	0x1fff1f09
    aefc:	.word	0x1fff1f0c
    af00:	.word	0x1fff1f08
    af04:	.word	0x1fff1f10
    af08:	.word	0x1fff1ea0

0000af0c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    af0c:	bx	lr
    af0e:	nop

0000af10 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    af10:	bx	lr
    af12:	nop

0000af14 <__aeabi_atexit>:
    af14:	mov	r3, r1
    af16:	mov	r1, r0
    af18:	mov	r0, r3
    af1a:	b.w	bb58 <__cxa_atexit>
    af1e:	nop

0000af20 <__aeabi_drsub>:
    af20:	eor.w	r1, r1, #2147483648	; 0x80000000
    af24:	b.n	af2c <__adddf3>
    af26:	nop

0000af28 <__aeabi_dsub>:
    af28:	eor.w	r3, r3, #2147483648	; 0x80000000

0000af2c <__adddf3>:
    af2c:	push	{r4, r5, lr}
    af2e:	mov.w	r4, r1, lsl #1
    af32:	mov.w	r5, r3, lsl #1
    af36:	teq	r4, r5
    af3a:	it	eq
    af3c:	teqeq	r0, r2
    af40:	itttt	ne
    af42:	orrsne.w	ip, r4, r0
    af46:	orrsne.w	ip, r5, r2
    af4a:	mvnsne.w	ip, r4, asr #21
    af4e:	mvnsne.w	ip, r5, asr #21
    af52:	beq.w	b11a <__adddf3+0x1ee>
    af56:	mov.w	r4, r4, lsr #21
    af5a:	rsbs	r5, r4, r5, lsr #21
    af5e:	it	lt
    af60:	neglt	r5, r5
    af62:	ble.n	af7e <__adddf3+0x52>
    af64:	add	r4, r5
    af66:	eor.w	r2, r0, r2
    af6a:	eor.w	r3, r1, r3
    af6e:	eor.w	r0, r2, r0
    af72:	eor.w	r1, r3, r1
    af76:	eor.w	r2, r0, r2
    af7a:	eor.w	r3, r1, r3
    af7e:	cmp	r5, #54	; 0x36
    af80:	it	hi
    af82:	pophi	{r4, r5, pc}
    af84:	tst.w	r1, #2147483648	; 0x80000000
    af88:	mov.w	r1, r1, lsl #12
    af8c:	mov.w	ip, #1048576	; 0x100000
    af90:	orr.w	r1, ip, r1, lsr #12
    af94:	beq.n	af9c <__adddf3+0x70>
    af96:	negs	r0, r0
    af98:	sbc.w	r1, r1, r1, lsl #1
    af9c:	tst.w	r3, #2147483648	; 0x80000000
    afa0:	mov.w	r3, r3, lsl #12
    afa4:	orr.w	r3, ip, r3, lsr #12
    afa8:	beq.n	afb0 <__adddf3+0x84>
    afaa:	negs	r2, r2
    afac:	sbc.w	r3, r3, r3, lsl #1
    afb0:	teq	r4, r5
    afb4:	beq.w	b106 <__adddf3+0x1da>
    afb8:	sub.w	r4, r4, #1
    afbc:	rsbs	lr, r5, #32
    afc0:	blt.n	afde <__adddf3+0xb2>
    afc2:	lsl.w	ip, r2, lr
    afc6:	lsr.w	r2, r2, r5
    afca:	adds	r0, r0, r2
    afcc:	adc.w	r1, r1, #0
    afd0:	lsl.w	r2, r3, lr
    afd4:	adds	r0, r0, r2
    afd6:	asr.w	r3, r3, r5
    afda:	adcs	r1, r3
    afdc:	b.n	affc <__adddf3+0xd0>
    afde:	sub.w	r5, r5, #32
    afe2:	add.w	lr, lr, #32
    afe6:	cmp	r2, #1
    afe8:	lsl.w	ip, r3, lr
    afec:	it	cs
    afee:	orrcs.w	ip, ip, #2
    aff2:	asr.w	r3, r3, r5
    aff6:	adds	r0, r0, r3
    aff8:	adcs.w	r1, r1, r3, asr #31
    affc:	and.w	r5, r1, #2147483648	; 0x80000000
    b000:	bpl.n	b012 <__adddf3+0xe6>
    b002:	mov.w	lr, #0
    b006:	rsbs	ip, ip, #0
    b00a:	sbcs.w	r0, lr, r0
    b00e:	sbc.w	r1, lr, r1
    b012:	cmp.w	r1, #1048576	; 0x100000
    b016:	bcc.n	b050 <__adddf3+0x124>
    b018:	cmp.w	r1, #2097152	; 0x200000
    b01c:	bcc.n	b038 <__adddf3+0x10c>
    b01e:	lsrs	r1, r1, #1
    b020:	movs.w	r0, r0, rrx
    b024:	mov.w	ip, ip, rrx
    b028:	add.w	r4, r4, #1
    b02c:	mov.w	r2, r4, lsl #21
    b030:	cmn.w	r2, #4194304	; 0x400000
    b034:	bcs.w	b16c <__adddf3+0x240>
    b038:	cmp.w	ip, #2147483648	; 0x80000000
    b03c:	it	eq
    b03e:	movseq.w	ip, r0, lsr #1
    b042:	adcs.w	r0, r0, #0
    b046:	adc.w	r1, r1, r4, lsl #20
    b04a:	orr.w	r1, r1, r5
    b04e:	pop	{r4, r5, pc}
    b050:	movs.w	ip, ip, lsl #1
    b054:	adcs	r0, r0
    b056:	adc.w	r1, r1, r1
    b05a:	tst.w	r1, #1048576	; 0x100000
    b05e:	sub.w	r4, r4, #1
    b062:	bne.n	b038 <__adddf3+0x10c>
    b064:	teq	r1, #0
    b068:	itt	eq
    b06a:	moveq	r1, r0
    b06c:	moveq	r0, #0
    b06e:	clz	r3, r1
    b072:	it	eq
    b074:	addeq	r3, #32
    b076:	sub.w	r3, r3, #11
    b07a:	subs.w	r2, r3, #32
    b07e:	bge.n	b09a <__adddf3+0x16e>
    b080:	adds	r2, #12
    b082:	ble.n	b096 <__adddf3+0x16a>
    b084:	add.w	ip, r2, #20
    b088:	rsb	r2, r2, #12
    b08c:	lsl.w	r0, r1, ip
    b090:	lsr.w	r1, r1, r2
    b094:	b.n	b0b0 <__adddf3+0x184>
    b096:	add.w	r2, r2, #20
    b09a:	it	le
    b09c:	rsble	ip, r2, #32
    b0a0:	lsl.w	r1, r1, r2
    b0a4:	lsr.w	ip, r0, ip
    b0a8:	itt	le
    b0aa:	orrle.w	r1, r1, ip
    b0ae:	lslle	r0, r2
    b0b0:	subs	r4, r4, r3
    b0b2:	ittt	ge
    b0b4:	addge.w	r1, r1, r4, lsl #20
    b0b8:	orrge	r1, r5
    b0ba:	popge	{r4, r5, pc}
    b0bc:	mvn.w	r4, r4
    b0c0:	subs	r4, #31
    b0c2:	bge.n	b0fe <__adddf3+0x1d2>
    b0c4:	adds	r4, #12
    b0c6:	bgt.n	b0e6 <__adddf3+0x1ba>
    b0c8:	add.w	r4, r4, #20
    b0cc:	rsb	r2, r4, #32
    b0d0:	lsr.w	r0, r0, r4
    b0d4:	lsl.w	r3, r1, r2
    b0d8:	orr.w	r0, r0, r3
    b0dc:	lsr.w	r3, r1, r4
    b0e0:	orr.w	r1, r5, r3
    b0e4:	pop	{r4, r5, pc}
    b0e6:	rsb	r4, r4, #12
    b0ea:	rsb	r2, r4, #32
    b0ee:	lsr.w	r0, r0, r2
    b0f2:	lsl.w	r3, r1, r4
    b0f6:	orr.w	r0, r0, r3
    b0fa:	mov	r1, r5
    b0fc:	pop	{r4, r5, pc}
    b0fe:	lsr.w	r0, r1, r4
    b102:	mov	r1, r5
    b104:	pop	{r4, r5, pc}
    b106:	teq	r4, #0
    b10a:	eor.w	r3, r3, #1048576	; 0x100000
    b10e:	itte	eq
    b110:	eoreq.w	r1, r1, #1048576	; 0x100000
    b114:	addeq	r4, #1
    b116:	subne	r5, #1
    b118:	b.n	afb8 <__adddf3+0x8c>
    b11a:	mvns.w	ip, r4, asr #21
    b11e:	it	ne
    b120:	mvnsne.w	ip, r5, asr #21
    b124:	beq.n	b17a <__adddf3+0x24e>
    b126:	teq	r4, r5
    b12a:	it	eq
    b12c:	teqeq	r0, r2
    b130:	beq.n	b13e <__adddf3+0x212>
    b132:	orrs.w	ip, r4, r0
    b136:	itt	eq
    b138:	moveq	r1, r3
    b13a:	moveq	r0, r2
    b13c:	pop	{r4, r5, pc}
    b13e:	teq	r1, r3
    b142:	ittt	ne
    b144:	movne	r1, #0
    b146:	movne	r0, #0
    b148:	popne	{r4, r5, pc}
    b14a:	movs.w	ip, r4, lsr #21
    b14e:	bne.n	b15c <__adddf3+0x230>
    b150:	lsls	r0, r0, #1
    b152:	adcs	r1, r1
    b154:	it	cs
    b156:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b15a:	pop	{r4, r5, pc}
    b15c:	adds.w	r4, r4, #4194304	; 0x400000
    b160:	itt	cc
    b162:	addcc.w	r1, r1, #1048576	; 0x100000
    b166:	popcc	{r4, r5, pc}
    b168:	and.w	r5, r1, #2147483648	; 0x80000000
    b16c:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b170:	orr.w	r1, r1, #15728640	; 0xf00000
    b174:	mov.w	r0, #0
    b178:	pop	{r4, r5, pc}
    b17a:	mvns.w	ip, r4, asr #21
    b17e:	itte	ne
    b180:	movne	r1, r3
    b182:	movne	r0, r2
    b184:	mvnseq.w	ip, r5, asr #21
    b188:	itt	ne
    b18a:	movne	r3, r1
    b18c:	movne	r2, r0
    b18e:	orrs.w	r4, r0, r1, lsl #12
    b192:	itte	eq
    b194:	orrseq.w	r5, r2, r3, lsl #12
    b198:	teqeq	r1, r3
    b19c:	orrne.w	r1, r1, #524288	; 0x80000
    b1a0:	pop	{r4, r5, pc}
    b1a2:	nop

0000b1a4 <__aeabi_ui2d>:
    b1a4:	teq	r0, #0
    b1a8:	itt	eq
    b1aa:	moveq	r1, #0
    b1ac:	bxeq	lr
    b1ae:	push	{r4, r5, lr}
    b1b0:	mov.w	r4, #1024	; 0x400
    b1b4:	add.w	r4, r4, #50	; 0x32
    b1b8:	mov.w	r5, #0
    b1bc:	mov.w	r1, #0
    b1c0:	b.n	b064 <__adddf3+0x138>
    b1c2:	nop

0000b1c4 <__aeabi_i2d>:
    b1c4:	teq	r0, #0
    b1c8:	itt	eq
    b1ca:	moveq	r1, #0
    b1cc:	bxeq	lr
    b1ce:	push	{r4, r5, lr}
    b1d0:	mov.w	r4, #1024	; 0x400
    b1d4:	add.w	r4, r4, #50	; 0x32
    b1d8:	ands.w	r5, r0, #2147483648	; 0x80000000
    b1dc:	it	mi
    b1de:	negmi	r0, r0
    b1e0:	mov.w	r1, #0
    b1e4:	b.n	b064 <__adddf3+0x138>
    b1e6:	nop

0000b1e8 <__aeabi_f2d>:
    b1e8:	lsls	r2, r0, #1
    b1ea:	mov.w	r1, r2, asr #3
    b1ee:	mov.w	r1, r1, rrx
    b1f2:	mov.w	r0, r2, lsl #28
    b1f6:	itttt	ne
    b1f8:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b1fc:	teqne	r3, #4278190080	; 0xff000000
    b200:	eorne.w	r1, r1, #939524096	; 0x38000000
    b204:	bxne	lr
    b206:	teq	r2, #0
    b20a:	ite	ne
    b20c:	teqne	r3, #4278190080	; 0xff000000
    b210:	bxeq	lr
    b212:	push	{r4, r5, lr}
    b214:	mov.w	r4, #896	; 0x380
    b218:	and.w	r5, r1, #2147483648	; 0x80000000
    b21c:	bic.w	r1, r1, #2147483648	; 0x80000000
    b220:	b.n	b064 <__adddf3+0x138>
    b222:	nop

0000b224 <__aeabi_ul2d>:
    b224:	orrs.w	r2, r0, r1
    b228:	it	eq
    b22a:	bxeq	lr
    b22c:	push	{r4, r5, lr}
    b22e:	mov.w	r5, #0
    b232:	b.n	b24a <__aeabi_l2d+0x16>

0000b234 <__aeabi_l2d>:
    b234:	orrs.w	r2, r0, r1
    b238:	it	eq
    b23a:	bxeq	lr
    b23c:	push	{r4, r5, lr}
    b23e:	ands.w	r5, r1, #2147483648	; 0x80000000
    b242:	bpl.n	b24a <__aeabi_l2d+0x16>
    b244:	negs	r0, r0
    b246:	sbc.w	r1, r1, r1, lsl #1
    b24a:	mov.w	r4, #1024	; 0x400
    b24e:	add.w	r4, r4, #50	; 0x32
    b252:	movs.w	ip, r1, lsr #22
    b256:	beq.w	b012 <__adddf3+0xe6>
    b25a:	mov.w	r2, #3
    b25e:	movs.w	ip, ip, lsr #3
    b262:	it	ne
    b264:	addne	r2, #3
    b266:	movs.w	ip, ip, lsr #3
    b26a:	it	ne
    b26c:	addne	r2, #3
    b26e:	add.w	r2, r2, ip, lsr #3
    b272:	rsb	r3, r2, #32
    b276:	lsl.w	ip, r0, r3
    b27a:	lsr.w	r0, r0, r2
    b27e:	lsl.w	lr, r1, r3
    b282:	orr.w	r0, r0, lr
    b286:	lsr.w	r1, r1, r2
    b28a:	add	r4, r2
    b28c:	b.n	b012 <__adddf3+0xe6>
    b28e:	nop

0000b290 <__aeabi_dmul>:
    b290:	push	{r4, r5, r6, lr}
    b292:	mov.w	ip, #255	; 0xff
    b296:	orr.w	ip, ip, #1792	; 0x700
    b29a:	ands.w	r4, ip, r1, lsr #20
    b29e:	ittte	ne
    b2a0:	andsne.w	r5, ip, r3, lsr #20
    b2a4:	teqne	r4, ip
    b2a8:	teqne	r5, ip
    b2ac:	bleq	b46c <__aeabi_dmul+0x1dc>
    b2b0:	add	r4, r5
    b2b2:	eor.w	r6, r1, r3
    b2b6:	bic.w	r1, r1, ip, lsl #21
    b2ba:	bic.w	r3, r3, ip, lsl #21
    b2be:	orrs.w	r5, r0, r1, lsl #12
    b2c2:	it	ne
    b2c4:	orrsne.w	r5, r2, r3, lsl #12
    b2c8:	orr.w	r1, r1, #1048576	; 0x100000
    b2cc:	orr.w	r3, r3, #1048576	; 0x100000
    b2d0:	beq.n	b344 <__aeabi_dmul+0xb4>
    b2d2:	umull	ip, lr, r0, r2
    b2d6:	mov.w	r5, #0
    b2da:	umlal	lr, r5, r1, r2
    b2de:	and.w	r2, r6, #2147483648	; 0x80000000
    b2e2:	umlal	lr, r5, r0, r3
    b2e6:	mov.w	r6, #0
    b2ea:	umlal	r5, r6, r1, r3
    b2ee:	teq	ip, #0
    b2f2:	it	ne
    b2f4:	orrne.w	lr, lr, #1
    b2f8:	sub.w	r4, r4, #255	; 0xff
    b2fc:	cmp.w	r6, #512	; 0x200
    b300:	sbc.w	r4, r4, #768	; 0x300
    b304:	bcs.n	b310 <__aeabi_dmul+0x80>
    b306:	movs.w	lr, lr, lsl #1
    b30a:	adcs	r5, r5
    b30c:	adc.w	r6, r6, r6
    b310:	orr.w	r1, r2, r6, lsl #11
    b314:	orr.w	r1, r1, r5, lsr #21
    b318:	mov.w	r0, r5, lsl #11
    b31c:	orr.w	r0, r0, lr, lsr #21
    b320:	mov.w	lr, lr, lsl #11
    b324:	subs.w	ip, r4, #253	; 0xfd
    b328:	it	hi
    b32a:	cmphi.w	ip, #1792	; 0x700
    b32e:	bhi.n	b36e <__aeabi_dmul+0xde>
    b330:	cmp.w	lr, #2147483648	; 0x80000000
    b334:	it	eq
    b336:	movseq.w	lr, r0, lsr #1
    b33a:	adcs.w	r0, r0, #0
    b33e:	adc.w	r1, r1, r4, lsl #20
    b342:	pop	{r4, r5, r6, pc}
    b344:	and.w	r6, r6, #2147483648	; 0x80000000
    b348:	orr.w	r1, r6, r1
    b34c:	orr.w	r0, r0, r2
    b350:	eor.w	r1, r1, r3
    b354:	subs.w	r4, r4, ip, lsr #1
    b358:	ittt	gt
    b35a:	rsbsgt	r5, r4, ip
    b35e:	orrgt.w	r1, r1, r4, lsl #20
    b362:	popgt	{r4, r5, r6, pc}
    b364:	orr.w	r1, r1, #1048576	; 0x100000
    b368:	mov.w	lr, #0
    b36c:	subs	r4, #1
    b36e:	bgt.w	b4c8 <__aeabi_dmul+0x238>
    b372:	cmn.w	r4, #54	; 0x36
    b376:	ittt	le
    b378:	movle	r0, #0
    b37a:	andle.w	r1, r1, #2147483648	; 0x80000000
    b37e:	pople	{r4, r5, r6, pc}
    b380:	rsb	r4, r4, #0
    b384:	subs	r4, #32
    b386:	bge.n	b3f4 <__aeabi_dmul+0x164>
    b388:	adds	r4, #12
    b38a:	bgt.n	b3c4 <__aeabi_dmul+0x134>
    b38c:	add.w	r4, r4, #20
    b390:	rsb	r5, r4, #32
    b394:	lsl.w	r3, r0, r5
    b398:	lsr.w	r0, r0, r4
    b39c:	lsl.w	r2, r1, r5
    b3a0:	orr.w	r0, r0, r2
    b3a4:	and.w	r2, r1, #2147483648	; 0x80000000
    b3a8:	bic.w	r1, r1, #2147483648	; 0x80000000
    b3ac:	adds.w	r0, r0, r3, lsr #31
    b3b0:	lsr.w	r6, r1, r4
    b3b4:	adc.w	r1, r2, r6
    b3b8:	orrs.w	lr, lr, r3, lsl #1
    b3bc:	it	eq
    b3be:	biceq.w	r0, r0, r3, lsr #31
    b3c2:	pop	{r4, r5, r6, pc}
    b3c4:	rsb	r4, r4, #12
    b3c8:	rsb	r5, r4, #32
    b3cc:	lsl.w	r3, r0, r4
    b3d0:	lsr.w	r0, r0, r5
    b3d4:	lsl.w	r2, r1, r4
    b3d8:	orr.w	r0, r0, r2
    b3dc:	and.w	r1, r1, #2147483648	; 0x80000000
    b3e0:	adds.w	r0, r0, r3, lsr #31
    b3e4:	adc.w	r1, r1, #0
    b3e8:	orrs.w	lr, lr, r3, lsl #1
    b3ec:	it	eq
    b3ee:	biceq.w	r0, r0, r3, lsr #31
    b3f2:	pop	{r4, r5, r6, pc}
    b3f4:	rsb	r5, r4, #32
    b3f8:	lsl.w	r2, r0, r5
    b3fc:	orr.w	lr, lr, r2
    b400:	lsr.w	r3, r0, r4
    b404:	lsl.w	r2, r1, r5
    b408:	orr.w	r3, r3, r2
    b40c:	lsr.w	r0, r1, r4
    b410:	and.w	r1, r1, #2147483648	; 0x80000000
    b414:	lsr.w	r2, r1, r4
    b418:	bic.w	r0, r0, r2
    b41c:	add.w	r0, r0, r3, lsr #31
    b420:	orrs.w	lr, lr, r3, lsl #1
    b424:	it	eq
    b426:	biceq.w	r0, r0, r3, lsr #31
    b42a:	pop	{r4, r5, r6, pc}
    b42c:	teq	r4, #0
    b430:	bne.n	b452 <__aeabi_dmul+0x1c2>
    b432:	and.w	r6, r1, #2147483648	; 0x80000000
    b436:	lsls	r0, r0, #1
    b438:	adc.w	r1, r1, r1
    b43c:	tst.w	r1, #1048576	; 0x100000
    b440:	it	eq
    b442:	subeq	r4, #1
    b444:	beq.n	b436 <__aeabi_dmul+0x1a6>
    b446:	orr.w	r1, r1, r6
    b44a:	teq	r5, #0
    b44e:	it	ne
    b450:	bxne	lr
    b452:	and.w	r6, r3, #2147483648	; 0x80000000
    b456:	lsls	r2, r2, #1
    b458:	adc.w	r3, r3, r3
    b45c:	tst.w	r3, #1048576	; 0x100000
    b460:	it	eq
    b462:	subeq	r5, #1
    b464:	beq.n	b456 <__aeabi_dmul+0x1c6>
    b466:	orr.w	r3, r3, r6
    b46a:	bx	lr
    b46c:	teq	r4, ip
    b470:	and.w	r5, ip, r3, lsr #20
    b474:	it	ne
    b476:	teqne	r5, ip
    b47a:	beq.n	b496 <__aeabi_dmul+0x206>
    b47c:	orrs.w	r6, r0, r1, lsl #1
    b480:	it	ne
    b482:	orrsne.w	r6, r2, r3, lsl #1
    b486:	bne.n	b42c <__aeabi_dmul+0x19c>
    b488:	eor.w	r1, r1, r3
    b48c:	and.w	r1, r1, #2147483648	; 0x80000000
    b490:	mov.w	r0, #0
    b494:	pop	{r4, r5, r6, pc}
    b496:	orrs.w	r6, r0, r1, lsl #1
    b49a:	itte	eq
    b49c:	moveq	r0, r2
    b49e:	moveq	r1, r3
    b4a0:	orrsne.w	r6, r2, r3, lsl #1
    b4a4:	beq.n	b4da <__aeabi_dmul+0x24a>
    b4a6:	teq	r4, ip
    b4aa:	bne.n	b4b2 <__aeabi_dmul+0x222>
    b4ac:	orrs.w	r6, r0, r1, lsl #12
    b4b0:	bne.n	b4da <__aeabi_dmul+0x24a>
    b4b2:	teq	r5, ip
    b4b6:	bne.n	b4c4 <__aeabi_dmul+0x234>
    b4b8:	orrs.w	r6, r2, r3, lsl #12
    b4bc:	itt	ne
    b4be:	movne	r0, r2
    b4c0:	movne	r1, r3
    b4c2:	bne.n	b4da <__aeabi_dmul+0x24a>
    b4c4:	eor.w	r1, r1, r3
    b4c8:	and.w	r1, r1, #2147483648	; 0x80000000
    b4cc:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b4d0:	orr.w	r1, r1, #15728640	; 0xf00000
    b4d4:	mov.w	r0, #0
    b4d8:	pop	{r4, r5, r6, pc}
    b4da:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b4de:	orr.w	r1, r1, #16252928	; 0xf80000
    b4e2:	pop	{r4, r5, r6, pc}

0000b4e4 <__aeabi_ddiv>:
    b4e4:	push	{r4, r5, r6, lr}
    b4e6:	mov.w	ip, #255	; 0xff
    b4ea:	orr.w	ip, ip, #1792	; 0x700
    b4ee:	ands.w	r4, ip, r1, lsr #20
    b4f2:	ittte	ne
    b4f4:	andsne.w	r5, ip, r3, lsr #20
    b4f8:	teqne	r4, ip
    b4fc:	teqne	r5, ip
    b500:	bleq	b652 <__aeabi_ddiv+0x16e>
    b504:	sub.w	r4, r4, r5
    b508:	eor.w	lr, r1, r3
    b50c:	orrs.w	r5, r2, r3, lsl #12
    b510:	mov.w	r1, r1, lsl #12
    b514:	beq.w	b628 <__aeabi_ddiv+0x144>
    b518:	mov.w	r3, r3, lsl #12
    b51c:	mov.w	r5, #268435456	; 0x10000000
    b520:	orr.w	r3, r5, r3, lsr #4
    b524:	orr.w	r3, r3, r2, lsr #24
    b528:	mov.w	r2, r2, lsl #8
    b52c:	orr.w	r5, r5, r1, lsr #4
    b530:	orr.w	r5, r5, r0, lsr #24
    b534:	mov.w	r6, r0, lsl #8
    b538:	and.w	r1, lr, #2147483648	; 0x80000000
    b53c:	cmp	r5, r3
    b53e:	it	eq
    b540:	cmpeq	r6, r2
    b542:	adc.w	r4, r4, #253	; 0xfd
    b546:	add.w	r4, r4, #768	; 0x300
    b54a:	bcs.n	b552 <__aeabi_ddiv+0x6e>
    b54c:	lsrs	r3, r3, #1
    b54e:	mov.w	r2, r2, rrx
    b552:	subs	r6, r6, r2
    b554:	sbc.w	r5, r5, r3
    b558:	lsrs	r3, r3, #1
    b55a:	mov.w	r2, r2, rrx
    b55e:	mov.w	r0, #1048576	; 0x100000
    b562:	mov.w	ip, #524288	; 0x80000
    b566:	subs.w	lr, r6, r2
    b56a:	sbcs.w	lr, r5, r3
    b56e:	ittt	cs
    b570:	subcs	r6, r6, r2
    b572:	movcs	r5, lr
    b574:	orrcs.w	r0, r0, ip
    b578:	lsrs	r3, r3, #1
    b57a:	mov.w	r2, r2, rrx
    b57e:	subs.w	lr, r6, r2
    b582:	sbcs.w	lr, r5, r3
    b586:	ittt	cs
    b588:	subcs	r6, r6, r2
    b58a:	movcs	r5, lr
    b58c:	orrcs.w	r0, r0, ip, lsr #1
    b590:	lsrs	r3, r3, #1
    b592:	mov.w	r2, r2, rrx
    b596:	subs.w	lr, r6, r2
    b59a:	sbcs.w	lr, r5, r3
    b59e:	ittt	cs
    b5a0:	subcs	r6, r6, r2
    b5a2:	movcs	r5, lr
    b5a4:	orrcs.w	r0, r0, ip, lsr #2
    b5a8:	lsrs	r3, r3, #1
    b5aa:	mov.w	r2, r2, rrx
    b5ae:	subs.w	lr, r6, r2
    b5b2:	sbcs.w	lr, r5, r3
    b5b6:	ittt	cs
    b5b8:	subcs	r6, r6, r2
    b5ba:	movcs	r5, lr
    b5bc:	orrcs.w	r0, r0, ip, lsr #3
    b5c0:	orrs.w	lr, r5, r6
    b5c4:	beq.n	b5f8 <__aeabi_ddiv+0x114>
    b5c6:	mov.w	r5, r5, lsl #4
    b5ca:	orr.w	r5, r5, r6, lsr #28
    b5ce:	mov.w	r6, r6, lsl #4
    b5d2:	mov.w	r3, r3, lsl #3
    b5d6:	orr.w	r3, r3, r2, lsr #29
    b5da:	mov.w	r2, r2, lsl #3
    b5de:	movs.w	ip, ip, lsr #4
    b5e2:	bne.n	b566 <__aeabi_ddiv+0x82>
    b5e4:	tst.w	r1, #1048576	; 0x100000
    b5e8:	bne.n	b602 <__aeabi_ddiv+0x11e>
    b5ea:	orr.w	r1, r1, r0
    b5ee:	mov.w	r0, #0
    b5f2:	mov.w	ip, #2147483648	; 0x80000000
    b5f6:	b.n	b566 <__aeabi_ddiv+0x82>
    b5f8:	tst.w	r1, #1048576	; 0x100000
    b5fc:	itt	eq
    b5fe:	orreq	r1, r0
    b600:	moveq	r0, #0
    b602:	subs.w	ip, r4, #253	; 0xfd
    b606:	it	hi
    b608:	cmphi.w	ip, #1792	; 0x700
    b60c:	bhi.w	b36e <__aeabi_dmul+0xde>
    b610:	subs.w	ip, r5, r3
    b614:	itt	eq
    b616:	subseq.w	ip, r6, r2
    b61a:	movseq.w	ip, r0, lsr #1
    b61e:	adcs.w	r0, r0, #0
    b622:	adc.w	r1, r1, r4, lsl #20
    b626:	pop	{r4, r5, r6, pc}
    b628:	and.w	lr, lr, #2147483648	; 0x80000000
    b62c:	orr.w	r1, lr, r1, lsr #12
    b630:	adds.w	r4, r4, ip, lsr #1
    b634:	ittt	gt
    b636:	rsbsgt	r5, r4, ip
    b63a:	orrgt.w	r1, r1, r4, lsl #20
    b63e:	popgt	{r4, r5, r6, pc}
    b640:	orr.w	r1, r1, #1048576	; 0x100000
    b644:	mov.w	lr, #0
    b648:	subs	r4, #1
    b64a:	b.n	b36e <__aeabi_dmul+0xde>
    b64c:	orr.w	lr, r5, r6
    b650:	b.n	b36e <__aeabi_dmul+0xde>
    b652:	and.w	r5, ip, r3, lsr #20
    b656:	teq	r4, ip
    b65a:	it	eq
    b65c:	teqeq	r5, ip
    b660:	beq.w	b4da <__aeabi_dmul+0x24a>
    b664:	teq	r4, ip
    b668:	bne.n	b680 <__aeabi_ddiv+0x19c>
    b66a:	orrs.w	r4, r0, r1, lsl #12
    b66e:	bne.w	b4da <__aeabi_dmul+0x24a>
    b672:	teq	r5, ip
    b676:	bne.w	b4c4 <__aeabi_dmul+0x234>
    b67a:	mov	r0, r2
    b67c:	mov	r1, r3
    b67e:	b.n	b4da <__aeabi_dmul+0x24a>
    b680:	teq	r5, ip
    b684:	bne.n	b694 <__aeabi_ddiv+0x1b0>
    b686:	orrs.w	r5, r2, r3, lsl #12
    b68a:	beq.w	b488 <__aeabi_dmul+0x1f8>
    b68e:	mov	r0, r2
    b690:	mov	r1, r3
    b692:	b.n	b4da <__aeabi_dmul+0x24a>
    b694:	orrs.w	r6, r0, r1, lsl #1
    b698:	it	ne
    b69a:	orrsne.w	r6, r2, r3, lsl #1
    b69e:	bne.w	b42c <__aeabi_dmul+0x19c>
    b6a2:	orrs.w	r4, r0, r1, lsl #1
    b6a6:	bne.w	b4c4 <__aeabi_dmul+0x234>
    b6aa:	orrs.w	r5, r2, r3, lsl #1
    b6ae:	bne.w	b488 <__aeabi_dmul+0x1f8>
    b6b2:	b.n	b4da <__aeabi_dmul+0x24a>

0000b6b4 <__gedf2>:
    b6b4:	mov.w	ip, #4294967295
    b6b8:	b.n	b6c8 <__cmpdf2+0x4>
    b6ba:	nop

0000b6bc <__ledf2>:
    b6bc:	mov.w	ip, #1
    b6c0:	b.n	b6c8 <__cmpdf2+0x4>
    b6c2:	nop

0000b6c4 <__cmpdf2>:
    b6c4:	mov.w	ip, #1
    b6c8:	str.w	ip, [sp, #-4]!
    b6cc:	mov.w	ip, r1, lsl #1
    b6d0:	mvns.w	ip, ip, asr #21
    b6d4:	mov.w	ip, r3, lsl #1
    b6d8:	it	ne
    b6da:	mvnsne.w	ip, ip, asr #21
    b6de:	beq.n	b718 <__cmpdf2+0x54>
    b6e0:	add	sp, #4
    b6e2:	orrs.w	ip, r0, r1, lsl #1
    b6e6:	ite	eq
    b6e8:	orrseq.w	ip, r2, r3, lsl #1
    b6ec:	teqne	r1, r3
    b6f0:	ittt	eq
    b6f2:	teqeq	r0, r2
    b6f6:	moveq	r0, #0
    b6f8:	bxeq	lr
    b6fa:	cmn.w	r0, #0
    b6fe:	teq	r1, r3
    b702:	it	pl
    b704:	cmppl	r1, r3
    b706:	it	eq
    b708:	cmpeq	r0, r2
    b70a:	ite	cs
    b70c:	asrcs	r0, r3, #31
    b70e:	mvncc.w	r0, r3, asr #31
    b712:	orr.w	r0, r0, #1
    b716:	bx	lr
    b718:	mov.w	ip, r1, lsl #1
    b71c:	mvns.w	ip, ip, asr #21
    b720:	bne.n	b728 <__cmpdf2+0x64>
    b722:	orrs.w	ip, r0, r1, lsl #12
    b726:	bne.n	b738 <__cmpdf2+0x74>
    b728:	mov.w	ip, r3, lsl #1
    b72c:	mvns.w	ip, ip, asr #21
    b730:	bne.n	b6e0 <__cmpdf2+0x1c>
    b732:	orrs.w	ip, r2, r3, lsl #12
    b736:	beq.n	b6e0 <__cmpdf2+0x1c>
    b738:	ldr.w	r0, [sp], #4
    b73c:	bx	lr
    b73e:	nop

0000b740 <__aeabi_cdrcmple>:
    b740:	mov	ip, r0
    b742:	mov	r0, r2
    b744:	mov	r2, ip
    b746:	mov	ip, r1
    b748:	mov	r1, r3
    b74a:	mov	r3, ip
    b74c:	b.n	b750 <__aeabi_cdcmpeq>
    b74e:	nop

0000b750 <__aeabi_cdcmpeq>:
    b750:	push	{r0, lr}
    b752:	bl	b6c4 <__cmpdf2>
    b756:	cmp	r0, #0
    b758:	it	mi
    b75a:	cmnmi.w	r0, #0
    b75e:	pop	{r0, pc}

0000b760 <__aeabi_dcmpeq>:
    b760:	str.w	lr, [sp, #-8]!
    b764:	bl	b750 <__aeabi_cdcmpeq>
    b768:	ite	eq
    b76a:	moveq	r0, #1
    b76c:	movne	r0, #0
    b76e:	ldr.w	pc, [sp], #8
    b772:	nop

0000b774 <__aeabi_dcmplt>:
    b774:	str.w	lr, [sp, #-8]!
    b778:	bl	b750 <__aeabi_cdcmpeq>
    b77c:	ite	cc
    b77e:	movcc	r0, #1
    b780:	movcs	r0, #0
    b782:	ldr.w	pc, [sp], #8
    b786:	nop

0000b788 <__aeabi_dcmple>:
    b788:	str.w	lr, [sp, #-8]!
    b78c:	bl	b750 <__aeabi_cdcmpeq>
    b790:	ite	ls
    b792:	movls	r0, #1
    b794:	movhi	r0, #0
    b796:	ldr.w	pc, [sp], #8
    b79a:	nop

0000b79c <__aeabi_dcmpge>:
    b79c:	str.w	lr, [sp, #-8]!
    b7a0:	bl	b740 <__aeabi_cdrcmple>
    b7a4:	ite	ls
    b7a6:	movls	r0, #1
    b7a8:	movhi	r0, #0
    b7aa:	ldr.w	pc, [sp], #8
    b7ae:	nop

0000b7b0 <__aeabi_dcmpgt>:
    b7b0:	str.w	lr, [sp, #-8]!
    b7b4:	bl	b740 <__aeabi_cdrcmple>
    b7b8:	ite	cc
    b7ba:	movcc	r0, #1
    b7bc:	movcs	r0, #0
    b7be:	ldr.w	pc, [sp], #8
    b7c2:	nop

0000b7c4 <__aeabi_dcmpun>:
    b7c4:	mov.w	ip, r1, lsl #1
    b7c8:	mvns.w	ip, ip, asr #21
    b7cc:	bne.n	b7d4 <__aeabi_dcmpun+0x10>
    b7ce:	orrs.w	ip, r0, r1, lsl #12
    b7d2:	bne.n	b7ea <__aeabi_dcmpun+0x26>
    b7d4:	mov.w	ip, r3, lsl #1
    b7d8:	mvns.w	ip, ip, asr #21
    b7dc:	bne.n	b7e4 <__aeabi_dcmpun+0x20>
    b7de:	orrs.w	ip, r2, r3, lsl #12
    b7e2:	bne.n	b7ea <__aeabi_dcmpun+0x26>
    b7e4:	mov.w	r0, #0
    b7e8:	bx	lr
    b7ea:	mov.w	r0, #1
    b7ee:	bx	lr

0000b7f0 <__aeabi_d2iz>:
    b7f0:	mov.w	r2, r1, lsl #1
    b7f4:	adds.w	r2, r2, #2097152	; 0x200000
    b7f8:	bcs.n	b826 <__aeabi_d2iz+0x36>
    b7fa:	bpl.n	b820 <__aeabi_d2iz+0x30>
    b7fc:	mvn.w	r3, #992	; 0x3e0
    b800:	subs.w	r2, r3, r2, asr #21
    b804:	bls.n	b82c <__aeabi_d2iz+0x3c>
    b806:	mov.w	r3, r1, lsl #11
    b80a:	orr.w	r3, r3, #2147483648	; 0x80000000
    b80e:	orr.w	r3, r3, r0, lsr #21
    b812:	tst.w	r1, #2147483648	; 0x80000000
    b816:	lsr.w	r0, r3, r2
    b81a:	it	ne
    b81c:	negne	r0, r0
    b81e:	bx	lr
    b820:	mov.w	r0, #0
    b824:	bx	lr
    b826:	orrs.w	r0, r0, r1, lsl #12
    b82a:	bne.n	b838 <__aeabi_d2iz+0x48>
    b82c:	ands.w	r0, r1, #2147483648	; 0x80000000
    b830:	it	eq
    b832:	mvneq.w	r0, #2147483648	; 0x80000000
    b836:	bx	lr
    b838:	mov.w	r0, #0
    b83c:	bx	lr
    b83e:	nop

0000b840 <__aeabi_uldivmod>:
    b840:	cbnz	r3, b858 <__aeabi_uldivmod+0x18>
    b842:	cbnz	r2, b858 <__aeabi_uldivmod+0x18>
    b844:	cmp	r1, #0
    b846:	it	eq
    b848:	cmpeq	r0, #0
    b84a:	itt	ne
    b84c:	movne.w	r1, #4294967295
    b850:	movne.w	r0, #4294967295
    b854:	b.w	bb54 <__aeabi_idiv0>
    b858:	sub.w	ip, sp, #8
    b85c:	strd	ip, lr, [sp, #-16]!
    b860:	bl	b870 <__udivmoddi4>
    b864:	ldr.w	lr, [sp, #4]
    b868:	ldrd	r2, r3, [sp, #8]
    b86c:	add	sp, #16
    b86e:	bx	lr

0000b870 <__udivmoddi4>:
    b870:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b874:	mov	ip, r1
    b876:	mov	r6, r1
    b878:	mov	r4, r0
    b87a:	ldr	r5, [sp, #32]
    b87c:	cmp	r3, #0
    b87e:	bne.n	b922 <__udivmoddi4+0xb2>
    b880:	cmp	r2, r1
    b882:	mov	r7, r2
    b884:	bls.n	b960 <__udivmoddi4+0xf0>
    b886:	clz	lr, r2
    b88a:	cmp.w	lr, #0
    b88e:	beq.n	b8a8 <__udivmoddi4+0x38>
    b890:	rsb	r4, lr, #32
    b894:	lsr.w	r4, r0, r4
    b898:	lsl.w	r6, r1, lr
    b89c:	orr.w	ip, r4, r6
    b8a0:	lsl.w	r7, r2, lr
    b8a4:	lsl.w	r4, r0, lr
    b8a8:	mov.w	r9, r7, lsr #16
    b8ac:	lsrs	r2, r4, #16
    b8ae:	udiv	r0, ip, r9
    b8b2:	uxth.w	r8, r7
    b8b6:	mls	r6, r9, r0, ip
    b8ba:	orr.w	r6, r2, r6, lsl #16
    b8be:	mul.w	r3, r0, r8
    b8c2:	cmp	r3, r6
    b8c4:	bls.n	b8da <__udivmoddi4+0x6a>
    b8c6:	adds	r6, r6, r7
    b8c8:	add.w	r2, r0, #4294967295
    b8cc:	bcs.w	bb14 <__udivmoddi4+0x2a4>
    b8d0:	cmp	r3, r6
    b8d2:	bls.w	bb14 <__udivmoddi4+0x2a4>
    b8d6:	subs	r0, #2
    b8d8:	add	r6, r7
    b8da:	subs	r6, r6, r3
    b8dc:	uxth	r2, r4
    b8de:	udiv	r3, r6, r9
    b8e2:	mls	r6, r9, r3, r6
    b8e6:	orr.w	r4, r2, r6, lsl #16
    b8ea:	mul.w	r8, r3, r8
    b8ee:	cmp	r8, r4
    b8f0:	bls.n	b906 <__udivmoddi4+0x96>
    b8f2:	adds	r4, r4, r7
    b8f4:	add.w	r2, r3, #4294967295
    b8f8:	bcs.w	bb10 <__udivmoddi4+0x2a0>
    b8fc:	cmp	r8, r4
    b8fe:	bls.w	bb10 <__udivmoddi4+0x2a0>
    b902:	subs	r3, #2
    b904:	add	r4, r7
    b906:	rsb	r4, r8, r4
    b90a:	orr.w	r0, r3, r0, lsl #16
    b90e:	movs	r1, #0
    b910:	cmp	r5, #0
    b912:	beq.n	b9da <__udivmoddi4+0x16a>
    b914:	lsr.w	r4, r4, lr
    b918:	movs	r3, #0
    b91a:	str	r4, [r5, #0]
    b91c:	str	r3, [r5, #4]
    b91e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b922:	cmp	r3, r1
    b924:	bls.n	b936 <__udivmoddi4+0xc6>
    b926:	cmp	r5, #0
    b928:	beq.n	b9d6 <__udivmoddi4+0x166>
    b92a:	movs	r1, #0
    b92c:	stmia.w	r5, {r0, r6}
    b930:	mov	r0, r1
    b932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b936:	clz	r1, r3
    b93a:	cmp	r1, #0
    b93c:	bne.w	ba60 <__udivmoddi4+0x1f0>
    b940:	cmp	r3, r6
    b942:	bcc.n	b94a <__udivmoddi4+0xda>
    b944:	cmp	r2, r0
    b946:	bhi.w	bb3a <__udivmoddi4+0x2ca>
    b94a:	subs	r4, r0, r2
    b94c:	sbc.w	r6, r6, r3
    b950:	movs	r0, #1
    b952:	mov	ip, r6
    b954:	cmp	r5, #0
    b956:	beq.n	b9da <__udivmoddi4+0x16a>
    b958:	stmia.w	r5, {r4, ip}
    b95c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b960:	cbnz	r2, b968 <__udivmoddi4+0xf8>
    b962:	movs	r7, #1
    b964:	udiv	r7, r7, r2
    b968:	clz	lr, r7
    b96c:	cmp.w	lr, #0
    b970:	bne.n	b9de <__udivmoddi4+0x16e>
    b972:	subs	r3, r6, r7
    b974:	mov.w	r8, r7, lsr #16
    b978:	uxth.w	ip, r7
    b97c:	movs	r1, #1
    b97e:	udiv	r0, r3, r8
    b982:	lsrs	r2, r4, #16
    b984:	mls	r6, r8, r0, r3
    b988:	orr.w	r6, r2, r6, lsl #16
    b98c:	mul.w	r3, ip, r0
    b990:	cmp	r3, r6
    b992:	bls.n	b9a4 <__udivmoddi4+0x134>
    b994:	adds	r6, r6, r7
    b996:	add.w	r2, r0, #4294967295
    b99a:	bcs.n	b9a2 <__udivmoddi4+0x132>
    b99c:	cmp	r3, r6
    b99e:	bhi.w	bb3e <__udivmoddi4+0x2ce>
    b9a2:	mov	r0, r2
    b9a4:	subs	r6, r6, r3
    b9a6:	uxth	r2, r4
    b9a8:	udiv	r3, r6, r8
    b9ac:	mls	r6, r8, r3, r6
    b9b0:	orr.w	r4, r2, r6, lsl #16
    b9b4:	mul.w	ip, ip, r3
    b9b8:	cmp	ip, r4
    b9ba:	bls.n	b9cc <__udivmoddi4+0x15c>
    b9bc:	adds	r4, r4, r7
    b9be:	add.w	r2, r3, #4294967295
    b9c2:	bcs.n	b9ca <__udivmoddi4+0x15a>
    b9c4:	cmp	ip, r4
    b9c6:	bhi.w	bb34 <__udivmoddi4+0x2c4>
    b9ca:	mov	r3, r2
    b9cc:	rsb	r4, ip, r4
    b9d0:	orr.w	r0, r3, r0, lsl #16
    b9d4:	b.n	b910 <__udivmoddi4+0xa0>
    b9d6:	mov	r1, r5
    b9d8:	mov	r0, r5
    b9da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9de:	rsb	r1, lr, #32
    b9e2:	lsl.w	r3, r6, lr
    b9e6:	lsl.w	r7, r7, lr
    b9ea:	lsr.w	r9, r0, r1
    b9ee:	mov.w	r8, r7, lsr #16
    b9f2:	lsrs	r6, r1
    b9f4:	orr.w	r9, r9, r3
    b9f8:	udiv	sl, r6, r8
    b9fc:	mov.w	r4, r9, lsr #16
    ba00:	mls	r6, r8, sl, r6
    ba04:	uxth.w	ip, r7
    ba08:	orr.w	r3, r4, r6, lsl #16
    ba0c:	mul.w	r2, sl, ip
    ba10:	cmp	r2, r3
    ba12:	lsl.w	r4, r0, lr
    ba16:	bls.n	ba2e <__udivmoddi4+0x1be>
    ba18:	adds	r3, r3, r7
    ba1a:	add.w	r1, sl, #4294967295
    ba1e:	bcs.w	bb30 <__udivmoddi4+0x2c0>
    ba22:	cmp	r2, r3
    ba24:	bls.w	bb30 <__udivmoddi4+0x2c0>
    ba28:	sub.w	sl, sl, #2
    ba2c:	add	r3, r7
    ba2e:	subs	r3, r3, r2
    ba30:	uxth.w	r9, r9
    ba34:	udiv	r1, r3, r8
    ba38:	mls	r3, r8, r1, r3
    ba3c:	orr.w	r3, r9, r3, lsl #16
    ba40:	mul.w	r6, r1, ip
    ba44:	cmp	r6, r3
    ba46:	bls.n	ba58 <__udivmoddi4+0x1e8>
    ba48:	adds	r3, r3, r7
    ba4a:	add.w	r2, r1, #4294967295
    ba4e:	bcs.n	bb28 <__udivmoddi4+0x2b8>
    ba50:	cmp	r6, r3
    ba52:	bls.n	bb28 <__udivmoddi4+0x2b8>
    ba54:	subs	r1, #2
    ba56:	add	r3, r7
    ba58:	subs	r3, r3, r6
    ba5a:	orr.w	r1, r1, sl, lsl #16
    ba5e:	b.n	b97e <__udivmoddi4+0x10e>
    ba60:	rsb	lr, r1, #32
    ba64:	lsr.w	r4, r2, lr
    ba68:	lsls	r3, r1
    ba6a:	orrs	r3, r4
    ba6c:	lsr.w	r7, r0, lr
    ba70:	lsl.w	r4, r6, r1
    ba74:	mov.w	ip, r3, lsr #16
    ba78:	lsr.w	r6, r6, lr
    ba7c:	orrs	r4, r7
    ba7e:	udiv	r9, r6, ip
    ba82:	lsrs	r7, r4, #16
    ba84:	mls	r6, ip, r9, r6
    ba88:	uxth.w	r8, r3
    ba8c:	orr.w	r6, r7, r6, lsl #16
    ba90:	mul.w	r7, r9, r8
    ba94:	cmp	r7, r6
    ba96:	lsl.w	r2, r2, r1
    ba9a:	lsl.w	sl, r0, r1
    ba9e:	bls.n	bab2 <__udivmoddi4+0x242>
    baa0:	adds	r6, r6, r3
    baa2:	add.w	r0, r9, #4294967295
    baa6:	bcs.n	bb2c <__udivmoddi4+0x2bc>
    baa8:	cmp	r7, r6
    baaa:	bls.n	bb2c <__udivmoddi4+0x2bc>
    baac:	sub.w	r9, r9, #2
    bab0:	add	r6, r3
    bab2:	subs	r6, r6, r7
    bab4:	uxth	r0, r4
    bab6:	udiv	r4, r6, ip
    baba:	mls	r6, ip, r4, r6
    babe:	orr.w	r7, r0, r6, lsl #16
    bac2:	mul.w	r8, r4, r8
    bac6:	cmp	r8, r7
    bac8:	bls.n	bada <__udivmoddi4+0x26a>
    baca:	adds	r7, r7, r3
    bacc:	add.w	r0, r4, #4294967295
    bad0:	bcs.n	bb24 <__udivmoddi4+0x2b4>
    bad2:	cmp	r8, r7
    bad4:	bls.n	bb24 <__udivmoddi4+0x2b4>
    bad6:	subs	r4, #2
    bad8:	add	r7, r3
    bada:	orr.w	r0, r4, r9, lsl #16
    bade:	rsb	r7, r8, r7
    bae2:	umull	r8, r9, r0, r2
    bae6:	cmp	r7, r9
    bae8:	mov	r4, r8
    baea:	mov	r6, r9
    baec:	bcc.n	bb18 <__udivmoddi4+0x2a8>
    baee:	beq.n	bb44 <__udivmoddi4+0x2d4>
    baf0:	cbz	r5, bb4c <__udivmoddi4+0x2dc>
    baf2:	subs.w	r3, sl, r4
    baf6:	sbc.w	r7, r7, r6
    bafa:	lsl.w	lr, r7, lr
    bafe:	lsrs	r3, r1
    bb00:	lsrs	r7, r1
    bb02:	orr.w	r3, lr, r3
    bb06:	stmia.w	r5, {r3, r7}
    bb0a:	movs	r1, #0
    bb0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb10:	mov	r3, r2
    bb12:	b.n	b906 <__udivmoddi4+0x96>
    bb14:	mov	r0, r2
    bb16:	b.n	b8da <__udivmoddi4+0x6a>
    bb18:	subs.w	r4, r8, r2
    bb1c:	sbc.w	r6, r9, r3
    bb20:	subs	r0, #1
    bb22:	b.n	baf0 <__udivmoddi4+0x280>
    bb24:	mov	r4, r0
    bb26:	b.n	bada <__udivmoddi4+0x26a>
    bb28:	mov	r1, r2
    bb2a:	b.n	ba58 <__udivmoddi4+0x1e8>
    bb2c:	mov	r9, r0
    bb2e:	b.n	bab2 <__udivmoddi4+0x242>
    bb30:	mov	sl, r1
    bb32:	b.n	ba2e <__udivmoddi4+0x1be>
    bb34:	subs	r3, #2
    bb36:	add	r4, r7
    bb38:	b.n	b9cc <__udivmoddi4+0x15c>
    bb3a:	mov	r0, r1
    bb3c:	b.n	b954 <__udivmoddi4+0xe4>
    bb3e:	subs	r0, #2
    bb40:	add	r6, r7
    bb42:	b.n	b9a4 <__udivmoddi4+0x134>
    bb44:	cmp	sl, r8
    bb46:	bcc.n	bb18 <__udivmoddi4+0x2a8>
    bb48:	mov	r6, r7
    bb4a:	b.n	baf0 <__udivmoddi4+0x280>
    bb4c:	mov	r1, r5
    bb4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb52:	nop

0000bb54 <__aeabi_idiv0>:
    bb54:	bx	lr
    bb56:	nop

0000bb58 <__cxa_atexit>:
    bb58:	mov	r3, r2
    bb5a:	mov	r2, r1
    bb5c:	mov	r1, r0
    bb5e:	movs	r0, #2
    bb60:	b.w	cb28 <__register_exitproc>

0000bb64 <__errno>:
    bb64:	ldr	r3, [pc, #4]	; (bb6c <__errno+0x8>)
    bb66:	ldr	r0, [r3, #0]
    bb68:	bx	lr
    bb6a:	nop
    bb6c:	.word	0x1fff0ef0

0000bb70 <__libc_init_array>:
    bb70:	push	{r4, r5, r6, lr}
    bb72:	ldr	r6, [pc, #60]	; (bbb0 <__libc_init_array+0x40>)
    bb74:	ldr	r5, [pc, #60]	; (bbb4 <__libc_init_array+0x44>)
    bb76:	subs	r6, r6, r5
    bb78:	asrs	r6, r6, #2
    bb7a:	it	ne
    bb7c:	movne	r4, #0
    bb7e:	beq.n	bb8c <__libc_init_array+0x1c>
    bb80:	adds	r4, #1
    bb82:	ldr.w	r3, [r5], #4
    bb86:	blx	r3
    bb88:	cmp	r6, r4
    bb8a:	bne.n	bb80 <__libc_init_array+0x10>
    bb8c:	ldr	r6, [pc, #40]	; (bbb8 <__libc_init_array+0x48>)
    bb8e:	ldr	r5, [pc, #44]	; (bbbc <__libc_init_array+0x4c>)
    bb90:	subs	r6, r6, r5
    bb92:	bl	10590 <_init>
    bb96:	asrs	r6, r6, #2
    bb98:	it	ne
    bb9a:	movne	r4, #0
    bb9c:	beq.n	bbac <__libc_init_array+0x3c>
    bb9e:	adds	r4, #1
    bba0:	ldr.w	r3, [r5], #4
    bba4:	blx	r3
    bba6:	cmp	r6, r4
    bba8:	bne.n	bb9e <__libc_init_array+0x2e>
    bbaa:	pop	{r4, r5, r6, pc}
    bbac:	pop	{r4, r5, r6, pc}
    bbae:	nop
    bbb0:	.word	0x0001059c
    bbb4:	.word	0x0001059c
    bbb8:	.word	0x000105ac
    bbbc:	.word	0x0001059c

0000bbc0 <malloc>:
    bbc0:	ldr	r3, [pc, #8]	; (bbcc <malloc+0xc>)
    bbc2:	mov	r1, r0
    bbc4:	ldr	r0, [r3, #0]
    bbc6:	b.w	bbe0 <_malloc_r>
    bbca:	nop
    bbcc:	.word	0x1fff0ef0

0000bbd0 <free>:
    bbd0:	ldr	r3, [pc, #8]	; (bbdc <free+0xc>)
    bbd2:	mov	r1, r0
    bbd4:	ldr	r0, [r3, #0]
    bbd6:	b.w	ccb0 <_free_r>
    bbda:	nop
    bbdc:	.word	0x1fff0ef0

0000bbe0 <_malloc_r>:
    bbe0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbe4:	add.w	r5, r1, #11
    bbe8:	cmp	r5, #22
    bbea:	sub	sp, #12
    bbec:	mov	r6, r0
    bbee:	bls.w	bd30 <_malloc_r+0x150>
    bbf2:	bics.w	r5, r5, #7
    bbf6:	bmi.w	bd78 <_malloc_r+0x198>
    bbfa:	cmp	r1, r5
    bbfc:	bhi.w	bd78 <_malloc_r+0x198>
    bc00:	bl	c3e8 <__malloc_lock>
    bc04:	cmp.w	r5, #504	; 0x1f8
    bc08:	bcc.w	c144 <_malloc_r+0x564>
    bc0c:	lsrs	r3, r5, #9
    bc0e:	beq.w	bd86 <_malloc_r+0x1a6>
    bc12:	cmp	r3, #4
    bc14:	bhi.w	bf1e <_malloc_r+0x33e>
    bc18:	lsrs	r0, r5, #6
    bc1a:	add.w	lr, r0, #57	; 0x39
    bc1e:	mov.w	r3, lr, lsl #1
    bc22:	adds	r0, #56	; 0x38
    bc24:	ldr	r7, [pc, #784]	; (bf38 <_malloc_r+0x358>)
    bc26:	add.w	r3, r7, r3, lsl #2
    bc2a:	sub.w	r1, r3, #8
    bc2e:	ldr	r4, [r3, #4]
    bc30:	cmp	r1, r4
    bc32:	bne.n	bc44 <_malloc_r+0x64>
    bc34:	b.n	bd90 <_malloc_r+0x1b0>
    bc36:	cmp	r2, #0
    bc38:	bge.w	bd94 <_malloc_r+0x1b4>
    bc3c:	ldr	r4, [r4, #12]
    bc3e:	cmp	r1, r4
    bc40:	beq.w	bd90 <_malloc_r+0x1b0>
    bc44:	ldr	r3, [r4, #4]
    bc46:	bic.w	r3, r3, #3
    bc4a:	subs	r2, r3, r5
    bc4c:	cmp	r2, #15
    bc4e:	ble.n	bc36 <_malloc_r+0x56>
    bc50:	ldr	r1, [pc, #740]	; (bf38 <_malloc_r+0x358>)
    bc52:	ldr	r4, [r7, #16]
    bc54:	add.w	lr, r1, #8
    bc58:	cmp	r4, lr
    bc5a:	beq.w	bfc4 <_malloc_r+0x3e4>
    bc5e:	ldr	r3, [r4, #4]
    bc60:	bic.w	r3, r3, #3
    bc64:	subs	r2, r3, r5
    bc66:	cmp	r2, #15
    bc68:	bgt.w	bf9e <_malloc_r+0x3be>
    bc6c:	cmp	r2, #0
    bc6e:	str.w	lr, [r1, #20]
    bc72:	str.w	lr, [r1, #16]
    bc76:	bge.w	bdb6 <_malloc_r+0x1d6>
    bc7a:	cmp.w	r3, #512	; 0x200
    bc7e:	bcs.w	bf50 <_malloc_r+0x370>
    bc82:	lsrs	r3, r3, #3
    bc84:	add.w	ip, r3, #1
    bc88:	movs	r2, #1
    bc8a:	asrs	r3, r3, #2
    bc8c:	lsl.w	r3, r2, r3
    bc90:	ldr	r2, [r1, #4]
    bc92:	ldr.w	r8, [r1, ip, lsl #3]
    bc96:	str.w	r8, [r4, #8]
    bc9a:	add.w	r9, r1, ip, lsl #3
    bc9e:	orrs	r2, r3
    bca0:	sub.w	r3, r9, #8
    bca4:	str	r3, [r4, #12]
    bca6:	str	r2, [r1, #4]
    bca8:	str.w	r4, [r1, ip, lsl #3]
    bcac:	str.w	r4, [r8, #12]
    bcb0:	asrs	r3, r0, #2
    bcb2:	movs	r4, #1
    bcb4:	lsls	r4, r3
    bcb6:	cmp	r4, r2
    bcb8:	bhi.w	bdd0 <_malloc_r+0x1f0>
    bcbc:	tst	r4, r2
    bcbe:	bne.n	bcce <_malloc_r+0xee>
    bcc0:	bic.w	r0, r0, #3
    bcc4:	lsls	r4, r4, #1
    bcc6:	tst	r4, r2
    bcc8:	add.w	r0, r0, #4
    bccc:	beq.n	bcc4 <_malloc_r+0xe4>
    bcce:	add.w	r9, r7, r0, lsl #3
    bcd2:	mov	ip, r9
    bcd4:	mov	r8, r0
    bcd6:	ldr.w	r1, [ip, #12]
    bcda:	cmp	ip, r1
    bcdc:	bne.n	bcee <_malloc_r+0x10e>
    bcde:	b.n	bfc8 <_malloc_r+0x3e8>
    bce0:	cmp	r2, #0
    bce2:	bge.w	bfe8 <_malloc_r+0x408>
    bce6:	ldr	r1, [r1, #12]
    bce8:	cmp	ip, r1
    bcea:	beq.w	bfc8 <_malloc_r+0x3e8>
    bcee:	ldr	r3, [r1, #4]
    bcf0:	bic.w	r3, r3, #3
    bcf4:	subs	r2, r3, r5
    bcf6:	cmp	r2, #15
    bcf8:	ble.n	bce0 <_malloc_r+0x100>
    bcfa:	mov	r4, r1
    bcfc:	ldr.w	ip, [r1, #12]
    bd00:	ldr.w	r8, [r4, #8]!
    bd04:	adds	r3, r1, r5
    bd06:	orr.w	r5, r5, #1
    bd0a:	str	r5, [r1, #4]
    bd0c:	orr.w	r1, r2, #1
    bd10:	str.w	ip, [r8, #12]
    bd14:	mov	r0, r6
    bd16:	str.w	r8, [ip, #8]
    bd1a:	str	r3, [r7, #20]
    bd1c:	str	r3, [r7, #16]
    bd1e:	str.w	lr, [r3, #12]
    bd22:	str.w	lr, [r3, #8]
    bd26:	str	r1, [r3, #4]
    bd28:	str	r2, [r3, r2]
    bd2a:	bl	c3ec <__malloc_unlock>
    bd2e:	b.n	bd70 <_malloc_r+0x190>
    bd30:	cmp	r1, #16
    bd32:	bhi.n	bd78 <_malloc_r+0x198>
    bd34:	bl	c3e8 <__malloc_lock>
    bd38:	movs	r5, #16
    bd3a:	movs	r3, #6
    bd3c:	movs	r0, #2
    bd3e:	ldr	r7, [pc, #504]	; (bf38 <_malloc_r+0x358>)
    bd40:	add.w	r3, r7, r3, lsl #2
    bd44:	sub.w	r2, r3, #8
    bd48:	ldr	r4, [r3, #4]
    bd4a:	cmp	r4, r2
    bd4c:	beq.w	bfda <_malloc_r+0x3fa>
    bd50:	ldr	r3, [r4, #4]
    bd52:	ldr	r1, [r4, #12]
    bd54:	ldr	r5, [r4, #8]
    bd56:	bic.w	r3, r3, #3
    bd5a:	add	r3, r4
    bd5c:	mov	r0, r6
    bd5e:	ldr	r2, [r3, #4]
    bd60:	str	r1, [r5, #12]
    bd62:	orr.w	r2, r2, #1
    bd66:	str	r5, [r1, #8]
    bd68:	str	r2, [r3, #4]
    bd6a:	bl	c3ec <__malloc_unlock>
    bd6e:	adds	r4, #8
    bd70:	mov	r0, r4
    bd72:	add	sp, #12
    bd74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd78:	movs	r4, #0
    bd7a:	movs	r3, #12
    bd7c:	mov	r0, r4
    bd7e:	str	r3, [r6, #0]
    bd80:	add	sp, #12
    bd82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd86:	movs	r3, #128	; 0x80
    bd88:	mov.w	lr, #64	; 0x40
    bd8c:	movs	r0, #63	; 0x3f
    bd8e:	b.n	bc24 <_malloc_r+0x44>
    bd90:	mov	r0, lr
    bd92:	b.n	bc50 <_malloc_r+0x70>
    bd94:	add	r3, r4
    bd96:	ldr	r1, [r4, #12]
    bd98:	ldr	r2, [r3, #4]
    bd9a:	ldr	r5, [r4, #8]
    bd9c:	orr.w	r2, r2, #1
    bda0:	str	r1, [r5, #12]
    bda2:	mov	r0, r6
    bda4:	str	r5, [r1, #8]
    bda6:	str	r2, [r3, #4]
    bda8:	bl	c3ec <__malloc_unlock>
    bdac:	adds	r4, #8
    bdae:	mov	r0, r4
    bdb0:	add	sp, #12
    bdb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb6:	add	r3, r4
    bdb8:	mov	r0, r6
    bdba:	ldr	r2, [r3, #4]
    bdbc:	orr.w	r2, r2, #1
    bdc0:	str	r2, [r3, #4]
    bdc2:	bl	c3ec <__malloc_unlock>
    bdc6:	adds	r4, #8
    bdc8:	mov	r0, r4
    bdca:	add	sp, #12
    bdcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdd0:	ldr	r4, [r7, #8]
    bdd2:	ldr	r3, [r4, #4]
    bdd4:	bic.w	r8, r3, #3
    bdd8:	cmp	r8, r5
    bdda:	bcc.n	bde6 <_malloc_r+0x206>
    bddc:	rsb	r3, r5, r8
    bde0:	cmp	r3, #15
    bde2:	bgt.w	befe <_malloc_r+0x31e>
    bde6:	ldr	r3, [pc, #340]	; (bf3c <_malloc_r+0x35c>)
    bde8:	ldr.w	r9, [pc, #352]	; bf4c <_malloc_r+0x36c>
    bdec:	ldr	r2, [r3, #0]
    bdee:	ldr.w	r3, [r9]
    bdf2:	adds	r3, #1
    bdf4:	add	r2, r5
    bdf6:	add.w	sl, r4, r8
    bdfa:	beq.w	c0be <_malloc_r+0x4de>
    bdfe:	add.w	r2, r2, #4096	; 0x1000
    be02:	adds	r2, #15
    be04:	bic.w	r2, r2, #4080	; 0xff0
    be08:	bic.w	r2, r2, #15
    be0c:	mov	r1, r2
    be0e:	mov	r0, r6
    be10:	str	r2, [sp, #4]
    be12:	bl	c7d0 <_sbrk_r>
    be16:	cmp.w	r0, #4294967295
    be1a:	mov	fp, r0
    be1c:	ldr	r2, [sp, #4]
    be1e:	beq.w	c0d2 <_malloc_r+0x4f2>
    be22:	cmp	sl, r0
    be24:	bhi.w	c020 <_malloc_r+0x440>
    be28:	ldr	r3, [pc, #276]	; (bf40 <_malloc_r+0x360>)
    be2a:	ldr	r1, [r3, #0]
    be2c:	cmp	sl, fp
    be2e:	add	r1, r2
    be30:	str	r1, [r3, #0]
    be32:	beq.w	c0dc <_malloc_r+0x4fc>
    be36:	ldr.w	r0, [r9]
    be3a:	ldr.w	lr, [pc, #272]	; bf4c <_malloc_r+0x36c>
    be3e:	adds	r0, #1
    be40:	ittet	ne
    be42:	rsbne	sl, sl, fp
    be46:	addne	r1, sl
    be48:	streq.w	fp, [lr]
    be4c:	strne	r1, [r3, #0]
    be4e:	ands.w	r1, fp, #7
    be52:	beq.w	c084 <_malloc_r+0x4a4>
    be56:	rsb	r0, r1, #8
    be5a:	rsb	r1, r1, #4096	; 0x1000
    be5e:	add	fp, r0
    be60:	adds	r1, #8
    be62:	add	r2, fp
    be64:	ubfx	r2, r2, #0, #12
    be68:	rsb	r9, r2, r1
    be6c:	mov	r1, r9
    be6e:	mov	r0, r6
    be70:	str	r3, [sp, #4]
    be72:	bl	c7d0 <_sbrk_r>
    be76:	adds	r3, r0, #1
    be78:	ldr	r3, [sp, #4]
    be7a:	beq.w	c0fc <_malloc_r+0x51c>
    be7e:	rsb	r2, fp, r0
    be82:	add	r2, r9
    be84:	orr.w	r2, r2, #1
    be88:	ldr	r1, [r3, #0]
    be8a:	str.w	fp, [r7, #8]
    be8e:	add	r1, r9
    be90:	cmp	r4, r7
    be92:	str.w	r2, [fp, #4]
    be96:	str	r1, [r3, #0]
    be98:	ldr.w	r9, [pc, #164]	; bf40 <_malloc_r+0x360>
    be9c:	beq.n	becc <_malloc_r+0x2ec>
    be9e:	cmp.w	r8, #15
    bea2:	bls.w	c0a0 <_malloc_r+0x4c0>
    bea6:	ldr	r2, [r4, #4]
    bea8:	sub.w	r3, r8, #12
    beac:	bic.w	r3, r3, #7
    beb0:	adds	r0, r4, r3
    beb2:	and.w	r2, r2, #1
    beb6:	mov.w	lr, #5
    beba:	orrs	r2, r3
    bebc:	cmp	r3, #15
    bebe:	str	r2, [r4, #4]
    bec0:	str.w	lr, [r0, #4]
    bec4:	str.w	lr, [r0, #8]
    bec8:	bhi.w	c104 <_malloc_r+0x524>
    becc:	ldr	r3, [pc, #116]	; (bf44 <_malloc_r+0x364>)
    bece:	ldr	r4, [r7, #8]
    bed0:	ldr	r2, [r3, #0]
    bed2:	cmp	r1, r2
    bed4:	it	hi
    bed6:	strhi	r1, [r3, #0]
    bed8:	ldr	r3, [pc, #108]	; (bf48 <_malloc_r+0x368>)
    beda:	ldr	r2, [r3, #0]
    bedc:	cmp	r1, r2
    bede:	ldr	r2, [r4, #4]
    bee0:	it	hi
    bee2:	strhi	r1, [r3, #0]
    bee4:	bic.w	r2, r2, #3
    bee8:	cmp	r5, r2
    beea:	sub.w	r3, r2, r5
    beee:	bhi.n	bef4 <_malloc_r+0x314>
    bef0:	cmp	r3, #15
    bef2:	bgt.n	befe <_malloc_r+0x31e>
    bef4:	mov	r0, r6
    bef6:	bl	c3ec <__malloc_unlock>
    befa:	movs	r4, #0
    befc:	b.n	bd70 <_malloc_r+0x190>
    befe:	adds	r2, r4, r5
    bf00:	orr.w	r3, r3, #1
    bf04:	orr.w	r5, r5, #1
    bf08:	str	r5, [r4, #4]
    bf0a:	mov	r0, r6
    bf0c:	str	r2, [r7, #8]
    bf0e:	str	r3, [r2, #4]
    bf10:	bl	c3ec <__malloc_unlock>
    bf14:	adds	r4, #8
    bf16:	mov	r0, r4
    bf18:	add	sp, #12
    bf1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf1e:	cmp	r3, #20
    bf20:	bls.n	c006 <_malloc_r+0x426>
    bf22:	cmp	r3, #84	; 0x54
    bf24:	bhi.w	c070 <_malloc_r+0x490>
    bf28:	lsrs	r0, r5, #12
    bf2a:	add.w	lr, r0, #111	; 0x6f
    bf2e:	mov.w	r3, lr, lsl #1
    bf32:	adds	r0, #110	; 0x6e
    bf34:	b.n	bc24 <_malloc_r+0x44>
    bf36:	nop
    bf38:	.word	0x1fff1060
    bf3c:	.word	0x1fff1f1c
    bf40:	.word	0x1fff1f20
    bf44:	.word	0x1fff1f18
    bf48:	.word	0x1fff1f14
    bf4c:	.word	0x1fff146c
    bf50:	lsrs	r2, r3, #9
    bf52:	cmp	r2, #4
    bf54:	bls.n	c014 <_malloc_r+0x434>
    bf56:	cmp	r2, #20
    bf58:	bhi.w	c0c2 <_malloc_r+0x4e2>
    bf5c:	add.w	r1, r2, #92	; 0x5c
    bf60:	lsls	r1, r1, #1
    bf62:	adds	r2, #91	; 0x5b
    bf64:	add.w	ip, r7, r1, lsl #2
    bf68:	ldr.w	r1, [r7, r1, lsl #2]
    bf6c:	ldr.w	r8, [pc, #476]	; c14c <_malloc_r+0x56c>
    bf70:	sub.w	ip, ip, #8
    bf74:	cmp	ip, r1
    bf76:	beq.w	c08a <_malloc_r+0x4aa>
    bf7a:	ldr	r2, [r1, #4]
    bf7c:	bic.w	r2, r2, #3
    bf80:	cmp	r3, r2
    bf82:	bcs.n	bf8a <_malloc_r+0x3aa>
    bf84:	ldr	r1, [r1, #8]
    bf86:	cmp	ip, r1
    bf88:	bne.n	bf7a <_malloc_r+0x39a>
    bf8a:	ldr.w	ip, [r1, #12]
    bf8e:	ldr	r2, [r7, #4]
    bf90:	str.w	ip, [r4, #12]
    bf94:	str	r1, [r4, #8]
    bf96:	str.w	r4, [ip, #8]
    bf9a:	str	r4, [r1, #12]
    bf9c:	b.n	bcb0 <_malloc_r+0xd0>
    bf9e:	adds	r3, r4, r5
    bfa0:	orr.w	r7, r2, #1
    bfa4:	orr.w	r5, r5, #1
    bfa8:	str	r5, [r4, #4]
    bfaa:	mov	r0, r6
    bfac:	str	r3, [r1, #20]
    bfae:	str	r3, [r1, #16]
    bfb0:	str.w	lr, [r3, #12]
    bfb4:	str.w	lr, [r3, #8]
    bfb8:	str	r7, [r3, #4]
    bfba:	str	r2, [r3, r2]
    bfbc:	adds	r4, #8
    bfbe:	bl	c3ec <__malloc_unlock>
    bfc2:	b.n	bd70 <_malloc_r+0x190>
    bfc4:	ldr	r2, [r1, #4]
    bfc6:	b.n	bcb0 <_malloc_r+0xd0>
    bfc8:	add.w	r8, r8, #1
    bfcc:	tst.w	r8, #3
    bfd0:	add.w	ip, ip, #8
    bfd4:	bne.w	bcd6 <_malloc_r+0xf6>
    bfd8:	b.n	c03c <_malloc_r+0x45c>
    bfda:	ldr	r4, [r3, #12]
    bfdc:	cmp	r3, r4
    bfde:	it	eq
    bfe0:	addeq	r0, #2
    bfe2:	beq.w	bc50 <_malloc_r+0x70>
    bfe6:	b.n	bd50 <_malloc_r+0x170>
    bfe8:	add	r3, r1
    bfea:	mov	r4, r1
    bfec:	ldr	r2, [r3, #4]
    bfee:	ldr	r1, [r1, #12]
    bff0:	ldr.w	r5, [r4, #8]!
    bff4:	orr.w	r2, r2, #1
    bff8:	str	r2, [r3, #4]
    bffa:	mov	r0, r6
    bffc:	str	r1, [r5, #12]
    bffe:	str	r5, [r1, #8]
    c000:	bl	c3ec <__malloc_unlock>
    c004:	b.n	bd70 <_malloc_r+0x190>
    c006:	add.w	lr, r3, #92	; 0x5c
    c00a:	add.w	r0, r3, #91	; 0x5b
    c00e:	mov.w	r3, lr, lsl #1
    c012:	b.n	bc24 <_malloc_r+0x44>
    c014:	lsrs	r2, r3, #6
    c016:	add.w	r1, r2, #57	; 0x39
    c01a:	lsls	r1, r1, #1
    c01c:	adds	r2, #56	; 0x38
    c01e:	b.n	bf64 <_malloc_r+0x384>
    c020:	cmp	r4, r7
    c022:	ldr	r3, [pc, #296]	; (c14c <_malloc_r+0x56c>)
    c024:	beq.w	be28 <_malloc_r+0x248>
    c028:	ldr	r4, [r3, #8]
    c02a:	ldr	r2, [r4, #4]
    c02c:	bic.w	r2, r2, #3
    c030:	b.n	bee8 <_malloc_r+0x308>
    c032:	ldr.w	r3, [r9], #-8
    c036:	cmp	r9, r3
    c038:	bne.w	c140 <_malloc_r+0x560>
    c03c:	tst.w	r0, #3
    c040:	add.w	r0, r0, #4294967295
    c044:	bne.n	c032 <_malloc_r+0x452>
    c046:	ldr	r3, [r7, #4]
    c048:	bic.w	r3, r3, r4
    c04c:	str	r3, [r7, #4]
    c04e:	lsls	r4, r4, #1
    c050:	cmp	r4, r3
    c052:	bhi.w	bdd0 <_malloc_r+0x1f0>
    c056:	cmp	r4, #0
    c058:	beq.w	bdd0 <_malloc_r+0x1f0>
    c05c:	tst	r4, r3
    c05e:	mov	r0, r8
    c060:	bne.w	bcce <_malloc_r+0xee>
    c064:	lsls	r4, r4, #1
    c066:	tst	r4, r3
    c068:	add.w	r0, r0, #4
    c06c:	beq.n	c064 <_malloc_r+0x484>
    c06e:	b.n	bcce <_malloc_r+0xee>
    c070:	cmp.w	r3, #340	; 0x154
    c074:	bhi.n	c0a8 <_malloc_r+0x4c8>
    c076:	lsrs	r0, r5, #15
    c078:	add.w	lr, r0, #120	; 0x78
    c07c:	mov.w	r3, lr, lsl #1
    c080:	adds	r0, #119	; 0x77
    c082:	b.n	bc24 <_malloc_r+0x44>
    c084:	mov.w	r1, #4096	; 0x1000
    c088:	b.n	be62 <_malloc_r+0x282>
    c08a:	movs	r1, #1
    c08c:	ldr.w	r3, [r8, #4]
    c090:	asrs	r2, r2, #2
    c092:	lsl.w	r2, r1, r2
    c096:	orrs	r2, r3
    c098:	str.w	r2, [r8, #4]
    c09c:	mov	r1, ip
    c09e:	b.n	bf90 <_malloc_r+0x3b0>
    c0a0:	movs	r3, #1
    c0a2:	str.w	r3, [fp, #4]
    c0a6:	b.n	bef4 <_malloc_r+0x314>
    c0a8:	movw	r2, #1364	; 0x554
    c0ac:	cmp	r3, r2
    c0ae:	bhi.n	c0f2 <_malloc_r+0x512>
    c0b0:	lsrs	r0, r5, #18
    c0b2:	add.w	lr, r0, #125	; 0x7d
    c0b6:	mov.w	r3, lr, lsl #1
    c0ba:	adds	r0, #124	; 0x7c
    c0bc:	b.n	bc24 <_malloc_r+0x44>
    c0be:	adds	r2, #16
    c0c0:	b.n	be0c <_malloc_r+0x22c>
    c0c2:	cmp	r2, #84	; 0x54
    c0c4:	bhi.n	c114 <_malloc_r+0x534>
    c0c6:	lsrs	r2, r3, #12
    c0c8:	add.w	r1, r2, #111	; 0x6f
    c0cc:	lsls	r1, r1, #1
    c0ce:	adds	r2, #110	; 0x6e
    c0d0:	b.n	bf64 <_malloc_r+0x384>
    c0d2:	ldr	r4, [r7, #8]
    c0d4:	ldr	r2, [r4, #4]
    c0d6:	bic.w	r2, r2, #3
    c0da:	b.n	bee8 <_malloc_r+0x308>
    c0dc:	ubfx	r0, sl, #0, #12
    c0e0:	cmp	r0, #0
    c0e2:	bne.w	be36 <_malloc_r+0x256>
    c0e6:	add	r2, r8
    c0e8:	ldr	r3, [r7, #8]
    c0ea:	orr.w	r2, r2, #1
    c0ee:	str	r2, [r3, #4]
    c0f0:	b.n	becc <_malloc_r+0x2ec>
    c0f2:	movs	r3, #254	; 0xfe
    c0f4:	mov.w	lr, #127	; 0x7f
    c0f8:	movs	r0, #126	; 0x7e
    c0fa:	b.n	bc24 <_malloc_r+0x44>
    c0fc:	movs	r2, #1
    c0fe:	mov.w	r9, #0
    c102:	b.n	be88 <_malloc_r+0x2a8>
    c104:	add.w	r1, r4, #8
    c108:	mov	r0, r6
    c10a:	bl	ccb0 <_free_r>
    c10e:	ldr.w	r1, [r9]
    c112:	b.n	becc <_malloc_r+0x2ec>
    c114:	cmp.w	r2, #340	; 0x154
    c118:	bhi.n	c126 <_malloc_r+0x546>
    c11a:	lsrs	r2, r3, #15
    c11c:	add.w	r1, r2, #120	; 0x78
    c120:	lsls	r1, r1, #1
    c122:	adds	r2, #119	; 0x77
    c124:	b.n	bf64 <_malloc_r+0x384>
    c126:	movw	r1, #1364	; 0x554
    c12a:	cmp	r2, r1
    c12c:	bhi.n	c13a <_malloc_r+0x55a>
    c12e:	lsrs	r2, r3, #18
    c130:	add.w	r1, r2, #125	; 0x7d
    c134:	lsls	r1, r1, #1
    c136:	adds	r2, #124	; 0x7c
    c138:	b.n	bf64 <_malloc_r+0x384>
    c13a:	movs	r1, #254	; 0xfe
    c13c:	movs	r2, #126	; 0x7e
    c13e:	b.n	bf64 <_malloc_r+0x384>
    c140:	ldr	r3, [r7, #4]
    c142:	b.n	c04e <_malloc_r+0x46e>
    c144:	lsrs	r0, r5, #3
    c146:	adds	r3, r0, #1
    c148:	lsls	r3, r3, #1
    c14a:	b.n	bd3e <_malloc_r+0x15e>
    c14c:	.word	0x1fff1060

0000c150 <__ascii_mbtowc>:
    c150:	sub	sp, #8
    c152:	cbz	r1, c168 <__ascii_mbtowc+0x18>
    c154:	cbz	r2, c16e <__ascii_mbtowc+0x1e>
    c156:	cbz	r3, c174 <__ascii_mbtowc+0x24>
    c158:	ldrb	r3, [r2, #0]
    c15a:	str	r3, [r1, #0]
    c15c:	ldrb	r2, [r2, #0]
    c15e:	adds	r0, r2, #0
    c160:	it	ne
    c162:	movne	r0, #1
    c164:	add	sp, #8
    c166:	bx	lr
    c168:	add	r1, sp, #4
    c16a:	cmp	r2, #0
    c16c:	bne.n	c156 <__ascii_mbtowc+0x6>
    c16e:	mov	r0, r2
    c170:	add	sp, #8
    c172:	bx	lr
    c174:	mvn.w	r0, #1
    c178:	b.n	c164 <__ascii_mbtowc+0x14>
    c17a:	nop
    c17c:			; <UNDEFINED> instruction: 0xffffffff

0000c180 <memchr>:
    c180:	and.w	r1, r1, #255	; 0xff
    c184:	cmp	r2, #16
    c186:	blt.n	c1e0 <memchr+0x60>
    c188:	tst.w	r0, #7
    c18c:	beq.n	c1a0 <memchr+0x20>
    c18e:	ldrb.w	r3, [r0], #1
    c192:	subs	r2, #1
    c194:	cmp	r3, r1
    c196:	beq.n	c1f4 <memchr+0x74>
    c198:	tst.w	r0, #7
    c19c:	cbz	r2, c1f0 <memchr+0x70>
    c19e:	bne.n	c18e <memchr+0xe>
    c1a0:	push	{r4, r5, r6, r7}
    c1a2:	orr.w	r1, r1, r1, lsl #8
    c1a6:	orr.w	r1, r1, r1, lsl #16
    c1aa:	bic.w	r4, r2, #7
    c1ae:	mvns.w	r7, #0
    c1b2:	movs	r3, #0
    c1b4:	ldrd	r5, r6, [r0], #8
    c1b8:	subs	r4, #8
    c1ba:	eor.w	r5, r5, r1
    c1be:	eor.w	r6, r6, r1
    c1c2:	uadd8	r5, r5, r7
    c1c6:	sel	r5, r3, r7
    c1ca:	uadd8	r6, r6, r7
    c1ce:	sel	r6, r5, r7
    c1d2:	cbnz	r6, c1f8 <memchr+0x78>
    c1d4:	bne.n	c1b4 <memchr+0x34>
    c1d6:	pop	{r4, r5, r6, r7}
    c1d8:	and.w	r1, r1, #255	; 0xff
    c1dc:	and.w	r2, r2, #7
    c1e0:	cbz	r2, c1f0 <memchr+0x70>
    c1e2:	ldrb.w	r3, [r0], #1
    c1e6:	subs	r2, #1
    c1e8:	eor.w	r3, r3, r1
    c1ec:	cbz	r3, c1f4 <memchr+0x74>
    c1ee:	bne.n	c1e2 <memchr+0x62>
    c1f0:	movs	r0, #0
    c1f2:	bx	lr
    c1f4:	subs	r0, #1
    c1f6:	bx	lr
    c1f8:	cmp	r5, #0
    c1fa:	itte	eq
    c1fc:	moveq	r5, r6
    c1fe:	subeq	r0, #3
    c200:	subne	r0, #7
    c202:	tst.w	r5, #1
    c206:	bne.n	c218 <memchr+0x98>
    c208:	adds	r0, #1
    c20a:	tst.w	r5, #256	; 0x100
    c20e:	ittt	eq
    c210:	addeq	r0, #1
    c212:	tsteq.w	r5, #98304	; 0x18000
    c216:	addeq	r0, #1
    c218:	pop	{r4, r5, r6, r7}
    c21a:	subs	r0, #1
    c21c:	bx	lr
    c21e:	nop

0000c220 <memcmp>:
    c220:	cmp	r2, #3
    c222:	push	{r4, r5, r6}
    c224:	bls.n	c274 <memcmp+0x54>
    c226:	orr.w	r3, r0, r1
    c22a:	lsls	r3, r3, #30
    c22c:	beq.n	c252 <memcmp+0x32>
    c22e:	ldrb	r4, [r0, #0]
    c230:	ldrb	r5, [r1, #0]
    c232:	cmp	r4, r5
    c234:	bne.n	c27c <memcmp+0x5c>
    c236:	add	r2, r0
    c238:	adds	r3, r0, #1
    c23a:	b.n	c248 <memcmp+0x28>
    c23c:	ldrb.w	r4, [r3], #1
    c240:	ldrb.w	r5, [r1, #1]!
    c244:	cmp	r4, r5
    c246:	bne.n	c27c <memcmp+0x5c>
    c248:	cmp	r3, r2
    c24a:	bne.n	c23c <memcmp+0x1c>
    c24c:	movs	r0, #0
    c24e:	pop	{r4, r5, r6}
    c250:	bx	lr
    c252:	mov	r4, r1
    c254:	mov	r3, r0
    c256:	ldr	r6, [r3, #0]
    c258:	ldr	r5, [r4, #0]
    c25a:	cmp	r6, r5
    c25c:	mov	r0, r3
    c25e:	mov	r1, r4
    c260:	add.w	r3, r3, #4
    c264:	add.w	r4, r4, #4
    c268:	bne.n	c22e <memcmp+0xe>
    c26a:	subs	r2, #4
    c26c:	cmp	r2, #3
    c26e:	mov	r0, r3
    c270:	mov	r1, r4
    c272:	bhi.n	c256 <memcmp+0x36>
    c274:	cmp	r2, #0
    c276:	bne.n	c22e <memcmp+0xe>
    c278:	mov	r0, r2
    c27a:	b.n	c24e <memcmp+0x2e>
    c27c:	subs	r0, r4, r5
    c27e:	pop	{r4, r5, r6}
    c280:	bx	lr
    c282:	nop

0000c284 <memmove>:
    c284:	cmp	r0, r1
    c286:	push	{r4, r5, r6, r7, lr}
    c288:	bls.n	c2a6 <memmove+0x22>
    c28a:	adds	r3, r1, r2
    c28c:	cmp	r0, r3
    c28e:	bcs.n	c2a6 <memmove+0x22>
    c290:	adds	r1, r0, r2
    c292:	cmp	r2, #0
    c294:	beq.n	c33a <memmove+0xb6>
    c296:	subs	r2, r3, r2
    c298:	ldrb.w	r4, [r3, #-1]!
    c29c:	strb.w	r4, [r1, #-1]!
    c2a0:	cmp	r3, r2
    c2a2:	bne.n	c298 <memmove+0x14>
    c2a4:	pop	{r4, r5, r6, r7, pc}
    c2a6:	cmp	r2, #15
    c2a8:	bls.n	c33c <memmove+0xb8>
    c2aa:	orr.w	r3, r1, r0
    c2ae:	lsls	r3, r3, #30
    c2b0:	bne.n	c340 <memmove+0xbc>
    c2b2:	add.w	r4, r0, #16
    c2b6:	add.w	r3, r1, #16
    c2ba:	mov	r5, r2
    c2bc:	ldr.w	r6, [r3, #-16]
    c2c0:	str.w	r6, [r4, #-16]
    c2c4:	ldr.w	r6, [r3, #-12]
    c2c8:	str.w	r6, [r4, #-12]
    c2cc:	ldr.w	r6, [r3, #-8]
    c2d0:	str.w	r6, [r4, #-8]
    c2d4:	subs	r5, #16
    c2d6:	ldr.w	r6, [r3, #-4]
    c2da:	str.w	r6, [r4, #-4]
    c2de:	cmp	r5, #15
    c2e0:	add.w	r3, r3, #16
    c2e4:	add.w	r4, r4, #16
    c2e8:	bhi.n	c2bc <memmove+0x38>
    c2ea:	sub.w	r3, r2, #16
    c2ee:	bic.w	r3, r3, #15
    c2f2:	and.w	lr, r2, #15
    c2f6:	adds	r3, #16
    c2f8:	cmp.w	lr, #3
    c2fc:	add	r1, r3
    c2fe:	add	r3, r0
    c300:	bls.n	c346 <memmove+0xc2>
    c302:	subs	r6, r3, #4
    c304:	mov	r5, r1
    c306:	mov	r4, lr
    c308:	subs	r4, #4
    c30a:	ldr.w	r7, [r5], #4
    c30e:	str.w	r7, [r6, #4]!
    c312:	cmp	r4, #3
    c314:	bhi.n	c308 <memmove+0x84>
    c316:	sub.w	r4, lr, #4
    c31a:	bic.w	r4, r4, #3
    c31e:	adds	r4, #4
    c320:	add	r3, r4
    c322:	add	r1, r4
    c324:	and.w	r2, r2, #3
    c328:	cbz	r2, c344 <memmove+0xc0>
    c32a:	subs	r3, #1
    c32c:	add	r2, r1
    c32e:	ldrb.w	r4, [r1], #1
    c332:	strb.w	r4, [r3, #1]!
    c336:	cmp	r2, r1
    c338:	bne.n	c32e <memmove+0xaa>
    c33a:	pop	{r4, r5, r6, r7, pc}
    c33c:	mov	r3, r0
    c33e:	b.n	c328 <memmove+0xa4>
    c340:	mov	r3, r0
    c342:	b.n	c32a <memmove+0xa6>
    c344:	pop	{r4, r5, r6, r7, pc}
    c346:	mov	r2, lr
    c348:	b.n	c328 <memmove+0xa4>
    c34a:	nop

0000c34c <memset>:
    c34c:	push	{r4, r5, r6}
    c34e:	lsls	r4, r0, #30
    c350:	beq.n	c3e0 <memset+0x94>
    c352:	subs	r4, r2, #1
    c354:	cmp	r2, #0
    c356:	beq.n	c3dc <memset+0x90>
    c358:	uxtb	r5, r1
    c35a:	mov	r3, r0
    c35c:	b.n	c364 <memset+0x18>
    c35e:	subs	r2, r4, #1
    c360:	cbz	r4, c3dc <memset+0x90>
    c362:	mov	r4, r2
    c364:	strb.w	r5, [r3], #1
    c368:	lsls	r2, r3, #30
    c36a:	bne.n	c35e <memset+0x12>
    c36c:	cmp	r4, #3
    c36e:	bls.n	c3ce <memset+0x82>
    c370:	uxtb	r5, r1
    c372:	orr.w	r5, r5, r5, lsl #8
    c376:	cmp	r4, #15
    c378:	orr.w	r5, r5, r5, lsl #16
    c37c:	bls.n	c3b2 <memset+0x66>
    c37e:	add.w	r2, r3, #16
    c382:	mov	r6, r4
    c384:	subs	r6, #16
    c386:	cmp	r6, #15
    c388:	str.w	r5, [r2, #-16]
    c38c:	str.w	r5, [r2, #-12]
    c390:	str.w	r5, [r2, #-8]
    c394:	str.w	r5, [r2, #-4]
    c398:	add.w	r2, r2, #16
    c39c:	bhi.n	c384 <memset+0x38>
    c39e:	sub.w	r2, r4, #16
    c3a2:	bic.w	r2, r2, #15
    c3a6:	and.w	r4, r4, #15
    c3aa:	adds	r2, #16
    c3ac:	cmp	r4, #3
    c3ae:	add	r3, r2
    c3b0:	bls.n	c3ce <memset+0x82>
    c3b2:	mov	r6, r3
    c3b4:	mov	r2, r4
    c3b6:	subs	r2, #4
    c3b8:	cmp	r2, #3
    c3ba:	str.w	r5, [r6], #4
    c3be:	bhi.n	c3b6 <memset+0x6a>
    c3c0:	subs	r2, r4, #4
    c3c2:	bic.w	r2, r2, #3
    c3c6:	adds	r2, #4
    c3c8:	add	r3, r2
    c3ca:	and.w	r4, r4, #3
    c3ce:	cbz	r4, c3dc <memset+0x90>
    c3d0:	uxtb	r1, r1
    c3d2:	add	r4, r3
    c3d4:	strb.w	r1, [r3], #1
    c3d8:	cmp	r3, r4
    c3da:	bne.n	c3d4 <memset+0x88>
    c3dc:	pop	{r4, r5, r6}
    c3de:	bx	lr
    c3e0:	mov	r4, r2
    c3e2:	mov	r3, r0
    c3e4:	b.n	c36c <memset+0x20>
    c3e6:	nop

0000c3e8 <__malloc_lock>:
    c3e8:	bx	lr
    c3ea:	nop

0000c3ec <__malloc_unlock>:
    c3ec:	bx	lr
    c3ee:	nop

0000c3f0 <_realloc_r>:
    c3f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c3f4:	mov	r7, r2
    c3f6:	sub	sp, #12
    c3f8:	cmp	r1, #0
    c3fa:	beq.w	c580 <_realloc_r+0x190>
    c3fe:	mov	r6, r1
    c400:	mov	r9, r0
    c402:	add.w	r5, r7, #11
    c406:	bl	c3e8 <__malloc_lock>
    c40a:	ldr.w	lr, [r6, #-4]
    c40e:	cmp	r5, #22
    c410:	bic.w	r4, lr, #3
    c414:	sub.w	r8, r6, #8
    c418:	bhi.n	c49c <_realloc_r+0xac>
    c41a:	movs	r2, #16
    c41c:	mov	r5, r2
    c41e:	cmp	r7, r5
    c420:	bhi.n	c4a6 <_realloc_r+0xb6>
    c422:	cmp	r4, r2
    c424:	bge.n	c512 <_realloc_r+0x122>
    c426:	ldr	r3, [pc, #804]	; (c74c <_realloc_r+0x35c>)
    c428:	ldr	r1, [r3, #8]
    c42a:	add.w	r0, r8, r4
    c42e:	cmp	r0, r1
    c430:	ldr	r1, [r0, #4]
    c432:	beq.w	c5e8 <_realloc_r+0x1f8>
    c436:	bic.w	r3, r1, #1
    c43a:	add	r3, r0
    c43c:	ldr	r3, [r3, #4]
    c43e:	lsls	r3, r3, #31
    c440:	bpl.n	c53e <_realloc_r+0x14e>
    c442:	tst.w	lr, #1
    c446:	beq.n	c4b4 <_realloc_r+0xc4>
    c448:	mov	r1, r7
    c44a:	mov	r0, r9
    c44c:	bl	bbe0 <_malloc_r>
    c450:	mov	r7, r0
    c452:	cbz	r0, c48e <_realloc_r+0x9e>
    c454:	ldr.w	r3, [r6, #-4]
    c458:	bic.w	r3, r3, #1
    c45c:	add	r3, r8
    c45e:	sub.w	r2, r0, #8
    c462:	cmp	r2, r3
    c464:	beq.w	c6f0 <_realloc_r+0x300>
    c468:	subs	r2, r4, #4
    c46a:	cmp	r2, #36	; 0x24
    c46c:	bhi.w	c6d2 <_realloc_r+0x2e2>
    c470:	cmp	r2, #19
    c472:	bhi.w	c67e <_realloc_r+0x28e>
    c476:	mov	r3, r0
    c478:	mov	r2, r6
    c47a:	ldr	r1, [r2, #0]
    c47c:	str	r1, [r3, #0]
    c47e:	ldr	r1, [r2, #4]
    c480:	str	r1, [r3, #4]
    c482:	ldr	r2, [r2, #8]
    c484:	str	r2, [r3, #8]
    c486:	mov	r1, r6
    c488:	mov	r0, r9
    c48a:	bl	ccb0 <_free_r>
    c48e:	mov	r0, r9
    c490:	bl	c3ec <__malloc_unlock>
    c494:	mov	r0, r7
    c496:	add	sp, #12
    c498:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c49c:	bic.w	r5, r5, #7
    c4a0:	cmp	r5, #0
    c4a2:	mov	r2, r5
    c4a4:	bge.n	c41e <_realloc_r+0x2e>
    c4a6:	movs	r3, #12
    c4a8:	movs	r0, #0
    c4aa:	str.w	r3, [r9]
    c4ae:	add	sp, #12
    c4b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4b4:	ldr.w	r3, [r6, #-8]
    c4b8:	rsb	sl, r3, r8
    c4bc:	ldr.w	r3, [sl, #4]
    c4c0:	bic.w	ip, r3, #3
    c4c4:	add.w	r3, r4, ip
    c4c8:	cmp	r3, r2
    c4ca:	blt.n	c448 <_realloc_r+0x58>
    c4cc:	mov	r7, sl
    c4ce:	ldr.w	r1, [sl, #12]
    c4d2:	ldr.w	r0, [r7, #8]!
    c4d6:	subs	r2, r4, #4
    c4d8:	cmp	r2, #36	; 0x24
    c4da:	str	r1, [r0, #12]
    c4dc:	str	r0, [r1, #8]
    c4de:	bhi.w	c710 <_realloc_r+0x320>
    c4e2:	cmp	r2, #19
    c4e4:	bls.w	c70c <_realloc_r+0x31c>
    c4e8:	ldr	r1, [r6, #0]
    c4ea:	str.w	r1, [sl, #8]
    c4ee:	ldr	r1, [r6, #4]
    c4f0:	str.w	r1, [sl, #12]
    c4f4:	cmp	r2, #27
    c4f6:	bhi.w	c750 <_realloc_r+0x360>
    c4fa:	adds	r6, #8
    c4fc:	add.w	r2, sl, #16
    c500:	ldr	r1, [r6, #0]
    c502:	str	r1, [r2, #0]
    c504:	ldr	r1, [r6, #4]
    c506:	str	r1, [r2, #4]
    c508:	ldr	r1, [r6, #8]
    c50a:	str	r1, [r2, #8]
    c50c:	mov	r6, r7
    c50e:	mov	r4, r3
    c510:	mov	r8, sl
    c512:	subs	r3, r4, r5
    c514:	cmp	r3, #15
    c516:	bhi.n	c554 <_realloc_r+0x164>
    c518:	ldr.w	r3, [r8, #4]
    c51c:	and.w	r3, r3, #1
    c520:	orrs	r3, r4
    c522:	add	r4, r8
    c524:	str.w	r3, [r8, #4]
    c528:	ldr	r3, [r4, #4]
    c52a:	orr.w	r3, r3, #1
    c52e:	str	r3, [r4, #4]
    c530:	mov	r0, r9
    c532:	bl	c3ec <__malloc_unlock>
    c536:	mov	r0, r6
    c538:	add	sp, #12
    c53a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c53e:	bic.w	r1, r1, #3
    c542:	add	r1, r4
    c544:	cmp	r1, r2
    c546:	blt.n	c58c <_realloc_r+0x19c>
    c548:	ldr	r3, [r0, #12]
    c54a:	ldr	r2, [r0, #8]
    c54c:	mov	r4, r1
    c54e:	str	r3, [r2, #12]
    c550:	str	r2, [r3, #8]
    c552:	b.n	c512 <_realloc_r+0x122>
    c554:	ldr.w	r2, [r8, #4]
    c558:	add.w	r1, r8, r5
    c55c:	and.w	r2, r2, #1
    c560:	orrs	r5, r2
    c562:	orr.w	r2, r3, #1
    c566:	add	r3, r1
    c568:	str.w	r5, [r8, #4]
    c56c:	str	r2, [r1, #4]
    c56e:	ldr	r2, [r3, #4]
    c570:	orr.w	r2, r2, #1
    c574:	adds	r1, #8
    c576:	str	r2, [r3, #4]
    c578:	mov	r0, r9
    c57a:	bl	ccb0 <_free_r>
    c57e:	b.n	c530 <_realloc_r+0x140>
    c580:	mov	r1, r2
    c582:	add	sp, #12
    c584:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c588:	b.w	bbe0 <_malloc_r>
    c58c:	tst.w	lr, #1
    c590:	bne.w	c448 <_realloc_r+0x58>
    c594:	ldr.w	r3, [r6, #-8]
    c598:	rsb	sl, r3, r8
    c59c:	ldr.w	r3, [sl, #4]
    c5a0:	bic.w	ip, r3, #3
    c5a4:	add.w	lr, r1, ip
    c5a8:	cmp	lr, r2
    c5aa:	blt.n	c4c4 <_realloc_r+0xd4>
    c5ac:	ldr	r3, [r0, #12]
    c5ae:	ldr	r2, [r0, #8]
    c5b0:	mov	r7, sl
    c5b2:	str	r3, [r2, #12]
    c5b4:	str	r2, [r3, #8]
    c5b6:	ldr.w	r1, [r7, #8]!
    c5ba:	ldr.w	r3, [sl, #12]
    c5be:	str	r3, [r1, #12]
    c5c0:	subs	r2, r4, #4
    c5c2:	cmp	r2, #36	; 0x24
    c5c4:	str	r1, [r3, #8]
    c5c6:	bhi.w	c6fc <_realloc_r+0x30c>
    c5ca:	cmp	r2, #19
    c5cc:	bls.n	c694 <_realloc_r+0x2a4>
    c5ce:	ldr	r3, [r6, #0]
    c5d0:	str.w	r3, [sl, #8]
    c5d4:	ldr	r3, [r6, #4]
    c5d6:	str.w	r3, [sl, #12]
    c5da:	cmp	r2, #27
    c5dc:	bhi.w	c720 <_realloc_r+0x330>
    c5e0:	adds	r6, #8
    c5e2:	add.w	r3, sl, #16
    c5e6:	b.n	c696 <_realloc_r+0x2a6>
    c5e8:	bic.w	fp, r1, #3
    c5ec:	add	fp, r4
    c5ee:	add.w	r0, r5, #16
    c5f2:	cmp	fp, r0
    c5f4:	bge.n	c6aa <_realloc_r+0x2ba>
    c5f6:	tst.w	lr, #1
    c5fa:	bne.w	c448 <_realloc_r+0x58>
    c5fe:	ldr.w	r1, [r6, #-8]
    c602:	rsb	sl, r1, r8
    c606:	ldr.w	r1, [sl, #4]
    c60a:	bic.w	ip, r1, #3
    c60e:	add	fp, ip
    c610:	cmp	r0, fp
    c612:	bgt.w	c4c4 <_realloc_r+0xd4>
    c616:	mov	r7, sl
    c618:	ldr.w	r1, [sl, #12]
    c61c:	ldr.w	r0, [r7, #8]!
    c620:	subs	r2, r4, #4
    c622:	cmp	r2, #36	; 0x24
    c624:	str	r1, [r0, #12]
    c626:	str	r0, [r1, #8]
    c628:	bhi.w	c794 <_realloc_r+0x3a4>
    c62c:	cmp	r2, #19
    c62e:	bls.w	c77c <_realloc_r+0x38c>
    c632:	ldr	r1, [r6, #0]
    c634:	str.w	r1, [sl, #8]
    c638:	ldr	r1, [r6, #4]
    c63a:	str.w	r1, [sl, #12]
    c63e:	cmp	r2, #27
    c640:	bhi.w	c7a2 <_realloc_r+0x3b2>
    c644:	adds	r6, #8
    c646:	add.w	r2, sl, #16
    c64a:	ldr	r1, [r6, #0]
    c64c:	str	r1, [r2, #0]
    c64e:	ldr	r1, [r6, #4]
    c650:	str	r1, [r2, #4]
    c652:	ldr	r1, [r6, #8]
    c654:	str	r1, [r2, #8]
    c656:	add.w	r1, sl, r5
    c65a:	rsb	r2, r5, fp
    c65e:	orr.w	r2, r2, #1
    c662:	str	r1, [r3, #8]
    c664:	str	r2, [r1, #4]
    c666:	ldr.w	r3, [sl, #4]
    c66a:	and.w	r3, r3, #1
    c66e:	orrs	r5, r3
    c670:	mov	r0, r9
    c672:	str.w	r5, [sl, #4]
    c676:	bl	c3ec <__malloc_unlock>
    c67a:	mov	r0, r7
    c67c:	b.n	c538 <_realloc_r+0x148>
    c67e:	ldr	r3, [r6, #0]
    c680:	str	r3, [r0, #0]
    c682:	ldr	r3, [r6, #4]
    c684:	str	r3, [r0, #4]
    c686:	cmp	r2, #27
    c688:	bhi.n	c6da <_realloc_r+0x2ea>
    c68a:	add.w	r3, r0, #8
    c68e:	add.w	r2, r6, #8
    c692:	b.n	c47a <_realloc_r+0x8a>
    c694:	mov	r3, r7
    c696:	ldr	r2, [r6, #0]
    c698:	str	r2, [r3, #0]
    c69a:	ldr	r2, [r6, #4]
    c69c:	str	r2, [r3, #4]
    c69e:	ldr	r2, [r6, #8]
    c6a0:	str	r2, [r3, #8]
    c6a2:	mov	r6, r7
    c6a4:	mov	r4, lr
    c6a6:	mov	r8, sl
    c6a8:	b.n	c512 <_realloc_r+0x122>
    c6aa:	add.w	r1, r8, r5
    c6ae:	rsb	fp, r5, fp
    c6b2:	orr.w	r2, fp, #1
    c6b6:	str	r1, [r3, #8]
    c6b8:	str	r2, [r1, #4]
    c6ba:	ldr.w	r3, [r6, #-4]
    c6be:	and.w	r3, r3, #1
    c6c2:	orrs	r5, r3
    c6c4:	mov	r0, r9
    c6c6:	str.w	r5, [r6, #-4]
    c6ca:	bl	c3ec <__malloc_unlock>
    c6ce:	mov	r0, r6
    c6d0:	b.n	c538 <_realloc_r+0x148>
    c6d2:	mov	r1, r6
    c6d4:	bl	c284 <memmove>
    c6d8:	b.n	c486 <_realloc_r+0x96>
    c6da:	ldr	r3, [r6, #8]
    c6dc:	str	r3, [r0, #8]
    c6de:	ldr	r3, [r6, #12]
    c6e0:	str	r3, [r0, #12]
    c6e2:	cmp	r2, #36	; 0x24
    c6e4:	beq.n	c738 <_realloc_r+0x348>
    c6e6:	add.w	r3, r0, #16
    c6ea:	add.w	r2, r6, #16
    c6ee:	b.n	c47a <_realloc_r+0x8a>
    c6f0:	ldr.w	r3, [r0, #-4]
    c6f4:	bic.w	r3, r3, #3
    c6f8:	add	r4, r3
    c6fa:	b.n	c512 <_realloc_r+0x122>
    c6fc:	mov	r1, r6
    c6fe:	mov	r0, r7
    c700:	mov	r4, lr
    c702:	mov	r8, sl
    c704:	bl	c284 <memmove>
    c708:	mov	r6, r7
    c70a:	b.n	c512 <_realloc_r+0x122>
    c70c:	mov	r2, r7
    c70e:	b.n	c500 <_realloc_r+0x110>
    c710:	mov	r1, r6
    c712:	mov	r0, r7
    c714:	mov	r4, r3
    c716:	mov	r8, sl
    c718:	bl	c284 <memmove>
    c71c:	mov	r6, r7
    c71e:	b.n	c512 <_realloc_r+0x122>
    c720:	ldr	r3, [r6, #8]
    c722:	str.w	r3, [sl, #16]
    c726:	ldr	r3, [r6, #12]
    c728:	str.w	r3, [sl, #20]
    c72c:	cmp	r2, #36	; 0x24
    c72e:	beq.n	c768 <_realloc_r+0x378>
    c730:	adds	r6, #16
    c732:	add.w	r3, sl, #24
    c736:	b.n	c696 <_realloc_r+0x2a6>
    c738:	ldr	r3, [r6, #16]
    c73a:	str	r3, [r0, #16]
    c73c:	ldr	r3, [r6, #20]
    c73e:	str	r3, [r0, #20]
    c740:	add.w	r2, r6, #24
    c744:	add.w	r3, r0, #24
    c748:	b.n	c47a <_realloc_r+0x8a>
    c74a:	nop
    c74c:	.word	0x1fff1060
    c750:	ldr	r1, [r6, #8]
    c752:	str.w	r1, [sl, #16]
    c756:	ldr	r1, [r6, #12]
    c758:	str.w	r1, [sl, #20]
    c75c:	cmp	r2, #36	; 0x24
    c75e:	beq.n	c780 <_realloc_r+0x390>
    c760:	adds	r6, #16
    c762:	add.w	r2, sl, #24
    c766:	b.n	c500 <_realloc_r+0x110>
    c768:	ldr	r3, [r6, #16]
    c76a:	str.w	r3, [sl, #24]
    c76e:	ldr	r3, [r6, #20]
    c770:	str.w	r3, [sl, #28]
    c774:	adds	r6, #24
    c776:	add.w	r3, sl, #32
    c77a:	b.n	c696 <_realloc_r+0x2a6>
    c77c:	mov	r2, r7
    c77e:	b.n	c64a <_realloc_r+0x25a>
    c780:	ldr	r2, [r6, #16]
    c782:	str.w	r2, [sl, #24]
    c786:	ldr	r2, [r6, #20]
    c788:	str.w	r2, [sl, #28]
    c78c:	adds	r6, #24
    c78e:	add.w	r2, sl, #32
    c792:	b.n	c500 <_realloc_r+0x110>
    c794:	mov	r1, r6
    c796:	mov	r0, r7
    c798:	str	r3, [sp, #4]
    c79a:	bl	c284 <memmove>
    c79e:	ldr	r3, [sp, #4]
    c7a0:	b.n	c656 <_realloc_r+0x266>
    c7a2:	ldr	r1, [r6, #8]
    c7a4:	str.w	r1, [sl, #16]
    c7a8:	ldr	r1, [r6, #12]
    c7aa:	str.w	r1, [sl, #20]
    c7ae:	cmp	r2, #36	; 0x24
    c7b0:	beq.n	c7ba <_realloc_r+0x3ca>
    c7b2:	adds	r6, #16
    c7b4:	add.w	r2, sl, #24
    c7b8:	b.n	c64a <_realloc_r+0x25a>
    c7ba:	ldr	r2, [r6, #16]
    c7bc:	str.w	r2, [sl, #24]
    c7c0:	ldr	r2, [r6, #20]
    c7c2:	str.w	r2, [sl, #28]
    c7c6:	adds	r6, #24
    c7c8:	add.w	r2, sl, #32
    c7cc:	b.n	c64a <_realloc_r+0x25a>
    c7ce:	nop

0000c7d0 <_sbrk_r>:
    c7d0:	push	{r3, r4, r5, lr}
    c7d2:	ldr	r4, [pc, #28]	; (c7f0 <_sbrk_r+0x20>)
    c7d4:	movs	r3, #0
    c7d6:	mov	r5, r0
    c7d8:	mov	r0, r1
    c7da:	str	r3, [r4, #0]
    c7dc:	bl	925c <_sbrk>
    c7e0:	adds	r3, r0, #1
    c7e2:	beq.n	c7e6 <_sbrk_r+0x16>
    c7e4:	pop	{r3, r4, r5, pc}
    c7e6:	ldr	r3, [r4, #0]
    c7e8:	cmp	r3, #0
    c7ea:	beq.n	c7e4 <_sbrk_r+0x14>
    c7ec:	str	r3, [r5, #0]
    c7ee:	pop	{r3, r4, r5, pc}
    c7f0:	.word	0x1fff1f60

0000c7f4 <strcat>:
    c7f4:	lsls	r3, r0, #30
    c7f6:	push	{r4, lr}
    c7f8:	mov	r4, r0
    c7fa:	bne.n	c81e <strcat+0x2a>
    c7fc:	ldr	r2, [r0, #0]
    c7fe:	sub.w	r3, r2, #16843009	; 0x1010101
    c802:	bic.w	r3, r3, r2
    c806:	tst.w	r3, #2155905152	; 0x80808080
    c80a:	bne.n	c81e <strcat+0x2a>
    c80c:	ldr.w	r2, [r0, #4]!
    c810:	sub.w	r3, r2, #16843009	; 0x1010101
    c814:	bic.w	r3, r3, r2
    c818:	tst.w	r3, #2155905152	; 0x80808080
    c81c:	beq.n	c80c <strcat+0x18>
    c81e:	ldrb	r3, [r0, #0]
    c820:	cbz	r3, c82a <strcat+0x36>
    c822:	ldrb.w	r3, [r0, #1]!
    c826:	cmp	r3, #0
    c828:	bne.n	c822 <strcat+0x2e>
    c82a:	bl	c834 <strcpy>
    c82e:	mov	r0, r4
    c830:	pop	{r4, pc}
    c832:	nop

0000c834 <strcpy>:
    c834:	eor.w	r2, r0, r1
    c838:	mov	ip, r0
    c83a:	tst.w	r2, #3
    c83e:	bne.n	c8e0 <strcpy+0xac>
    c840:	tst.w	r1, #3
    c844:	bne.n	c8ac <strcpy+0x78>
    c846:	str.w	r4, [sp, #-4]!
    c84a:	tst.w	r1, #4
    c84e:	ldr.w	r3, [r1], #4
    c852:	beq.n	c86c <strcpy+0x38>
    c854:	sub.w	r2, r3, #16843009	; 0x1010101
    c858:	bics	r2, r3
    c85a:	tst.w	r2, #2155905152	; 0x80808080
    c85e:	itt	eq
    c860:	streq.w	r3, [ip], #4
    c864:	ldreq.w	r3, [r1], #4
    c868:	bne.n	c898 <strcpy+0x64>
    c86a:	nop
    c86c:	ldr.w	r4, [r1], #4
    c870:	sub.w	r2, r3, #16843009	; 0x1010101
    c874:	bics	r2, r3
    c876:	tst.w	r2, #2155905152	; 0x80808080
    c87a:	sub.w	r2, r4, #16843009	; 0x1010101
    c87e:	bne.n	c898 <strcpy+0x64>
    c880:	str.w	r3, [ip], #4
    c884:	bics	r2, r4
    c886:	tst.w	r2, #2155905152	; 0x80808080
    c88a:	itt	eq
    c88c:	ldreq.w	r3, [r1], #4
    c890:	streq.w	r4, [ip], #4
    c894:	beq.n	c86c <strcpy+0x38>
    c896:	mov	r3, r4
    c898:	strb.w	r3, [ip], #1
    c89c:	tst.w	r3, #255	; 0xff
    c8a0:	mov.w	r3, r3, ror #8
    c8a4:	bne.n	c898 <strcpy+0x64>
    c8a6:	ldr.w	r4, [sp], #4
    c8aa:	bx	lr
    c8ac:	tst.w	r1, #1
    c8b0:	beq.n	c8c0 <strcpy+0x8c>
    c8b2:	ldrb.w	r2, [r1], #1
    c8b6:	strb.w	r2, [ip], #1
    c8ba:	cmp	r2, #0
    c8bc:	it	eq
    c8be:	bxeq	lr
    c8c0:	tst.w	r1, #2
    c8c4:	beq.n	c846 <strcpy+0x12>
    c8c6:	ldrh.w	r2, [r1], #2
    c8ca:	tst.w	r2, #255	; 0xff
    c8ce:	itet	ne
    c8d0:	strhne.w	r2, [ip], #2
    c8d4:	strbeq.w	r2, [ip]
    c8d8:	tstne.w	r2, #65280	; 0xff00
    c8dc:	bne.n	c846 <strcpy+0x12>
    c8de:	bx	lr
    c8e0:	ldrb.w	r2, [r1], #1
    c8e4:	strb.w	r2, [ip], #1
    c8e8:	cmp	r2, #0
    c8ea:	bne.n	c8e0 <strcpy+0xac>
    c8ec:	bx	lr
    c8ee:	nop
    c8f0:			; <UNDEFINED> instruction: 0xffffffff
    c8f4:			; <UNDEFINED> instruction: 0xffffffff
    c8f8:			; <UNDEFINED> instruction: 0xffffffff
    c8fc:			; <UNDEFINED> instruction: 0xffffffff

0000c900 <strlen>:
    c900:	pld	[r0]
    c904:	strd	r4, r5, [sp, #-8]!
    c908:	bic.w	r1, r0, #7
    c90c:	mvn.w	ip, #0
    c910:	ands.w	r4, r0, #7
    c914:	pld	[r1, #32]
    c918:	bne.w	c9ae <strlen+0xae>
    c91c:	mov.w	r4, #0
    c920:	mvn.w	r0, #7
    c924:	ldrd	r2, r3, [r1]
    c928:	pld	[r1, #64]	; 0x40
    c92c:	add.w	r0, r0, #8
    c930:	uadd8	r2, r2, ip
    c934:	sel	r2, r4, ip
    c938:	uadd8	r3, r3, ip
    c93c:	sel	r3, r2, ip
    c940:	cbnz	r3, c996 <strlen+0x96>
    c942:	ldrd	r2, r3, [r1, #8]
    c946:	uadd8	r2, r2, ip
    c94a:	add.w	r0, r0, #8
    c94e:	sel	r2, r4, ip
    c952:	uadd8	r3, r3, ip
    c956:	sel	r3, r2, ip
    c95a:	cbnz	r3, c996 <strlen+0x96>
    c95c:	ldrd	r2, r3, [r1, #16]
    c960:	uadd8	r2, r2, ip
    c964:	add.w	r0, r0, #8
    c968:	sel	r2, r4, ip
    c96c:	uadd8	r3, r3, ip
    c970:	sel	r3, r2, ip
    c974:	cbnz	r3, c996 <strlen+0x96>
    c976:	ldrd	r2, r3, [r1, #24]
    c97a:	add.w	r1, r1, #32
    c97e:	uadd8	r2, r2, ip
    c982:	add.w	r0, r0, #8
    c986:	sel	r2, r4, ip
    c98a:	uadd8	r3, r3, ip
    c98e:	sel	r3, r2, ip
    c992:	cmp	r3, #0
    c994:	beq.n	c924 <strlen+0x24>
    c996:	cmp	r2, #0
    c998:	itt	eq
    c99a:	addeq	r0, #4
    c99c:	moveq	r2, r3
    c99e:	rev	r2, r2
    c9a0:	clz	r2, r2
    c9a4:	ldrd	r4, r5, [sp], #8
    c9a8:	add.w	r0, r0, r2, lsr #3
    c9ac:	bx	lr
    c9ae:	ldrd	r2, r3, [r1]
    c9b2:	and.w	r5, r4, #3
    c9b6:	rsb	r0, r4, #0
    c9ba:	mov.w	r5, r5, lsl #3
    c9be:	tst.w	r4, #4
    c9c2:	pld	[r1, #64]	; 0x40
    c9c6:	lsl.w	r5, ip, r5
    c9ca:	orn	r2, r2, r5
    c9ce:	itt	ne
    c9d0:	ornne	r3, r3, r5
    c9d4:	movne	r2, ip
    c9d6:	mov.w	r4, #0
    c9da:	b.n	c930 <strlen+0x30>

0000c9dc <strncmp>:
    c9dc:	cmp	r2, #0
    c9de:	beq.n	ca64 <strncmp+0x88>
    c9e0:	orr.w	r3, r0, r1
    c9e4:	ands.w	r3, r3, #3
    c9e8:	push	{r4, r5, r6, r7}
    c9ea:	bne.n	ca38 <strncmp+0x5c>
    c9ec:	cmp	r2, #3
    c9ee:	bls.n	ca38 <strncmp+0x5c>
    c9f0:	ldr	r4, [r0, #0]
    c9f2:	ldr	r5, [r1, #0]
    c9f4:	cmp	r4, r5
    c9f6:	bne.n	ca38 <strncmp+0x5c>
    c9f8:	subs	r2, #4
    c9fa:	beq.n	ca68 <strncmp+0x8c>
    c9fc:	sub.w	r5, r4, #16843009	; 0x1010101
    ca00:	bic.w	r4, r5, r4
    ca04:	tst.w	r4, #2155905152	; 0x80808080
    ca08:	bne.n	ca6e <strncmp+0x92>
    ca0a:	adds	r7, r0, #4
    ca0c:	adds	r5, r1, #4
    ca0e:	b.n	ca2c <strncmp+0x50>
    ca10:	ldr.w	r3, [r7], #4
    ca14:	ldr	r6, [r1, #0]
    ca16:	sub.w	r4, r3, #16843009	; 0x1010101
    ca1a:	cmp	r3, r6
    ca1c:	bic.w	r4, r4, r3
    ca20:	bne.n	ca38 <strncmp+0x5c>
    ca22:	subs	r2, #4
    ca24:	beq.n	ca68 <strncmp+0x8c>
    ca26:	tst.w	r4, #2155905152	; 0x80808080
    ca2a:	bne.n	ca74 <strncmp+0x98>
    ca2c:	cmp	r2, #3
    ca2e:	mov	r1, r5
    ca30:	mov	r0, r7
    ca32:	add.w	r5, r5, #4
    ca36:	bhi.n	ca10 <strncmp+0x34>
    ca38:	ldrb	r3, [r0, #0]
    ca3a:	ldrb	r4, [r1, #0]
    ca3c:	cmp	r4, r3
    ca3e:	add.w	r2, r2, #4294967295
    ca42:	bne.n	ca5e <strncmp+0x82>
    ca44:	cbz	r2, ca68 <strncmp+0x8c>
    ca46:	cbnz	r4, ca4e <strncmp+0x72>
    ca48:	b.n	ca78 <strncmp+0x9c>
    ca4a:	cbz	r2, ca68 <strncmp+0x8c>
    ca4c:	cbz	r3, ca6e <strncmp+0x92>
    ca4e:	ldrb.w	r3, [r0, #1]!
    ca52:	ldrb.w	r4, [r1, #1]!
    ca56:	cmp	r3, r4
    ca58:	add.w	r2, r2, #4294967295
    ca5c:	beq.n	ca4a <strncmp+0x6e>
    ca5e:	subs	r0, r3, r4
    ca60:	pop	{r4, r5, r6, r7}
    ca62:	bx	lr
    ca64:	mov	r0, r2
    ca66:	bx	lr
    ca68:	mov	r0, r2
    ca6a:	pop	{r4, r5, r6, r7}
    ca6c:	bx	lr
    ca6e:	mov	r0, r3
    ca70:	pop	{r4, r5, r6, r7}
    ca72:	bx	lr
    ca74:	movs	r0, #0
    ca76:	b.n	ca60 <strncmp+0x84>
    ca78:	mov	r0, r4
    ca7a:	b.n	ca60 <strncmp+0x84>

0000ca7c <_vdprintf_r>:
    ca7c:	push	{r4, r5, r6, r7, lr}
    ca7e:	sub.w	sp, sp, #532	; 0x214
    ca82:	add	r5, sp, #16
    ca84:	str	r3, [sp, #0]
    ca86:	mov	r7, r1
    ca88:	mov	r3, r2
    ca8a:	mov.w	r4, #512	; 0x200
    ca8e:	add	r2, sp, #12
    ca90:	mov	r1, r5
    ca92:	str	r4, [sp, #12]
    ca94:	mov	r6, r0
    ca96:	bl	d4c0 <_vasnprintf_r>
    ca9a:	cbz	r0, cac0 <_vdprintf_r+0x44>
    ca9c:	mov	r4, r0
    ca9e:	mov	r2, r0
    caa0:	mov	r1, r7
    caa2:	ldr	r3, [sp, #12]
    caa4:	mov	r0, r6
    caa6:	bl	cafc <_write_r>
    caaa:	cmp	r4, r5
    caac:	str	r0, [sp, #12]
    caae:	beq.n	caba <_vdprintf_r+0x3e>
    cab0:	mov	r0, r6
    cab2:	mov	r1, r4
    cab4:	bl	ccb0 <_free_r>
    cab8:	ldr	r0, [sp, #12]
    caba:	add.w	sp, sp, #532	; 0x214
    cabe:	pop	{r4, r5, r6, r7, pc}
    cac0:	mov.w	r0, #4294967295
    cac4:	b.n	caba <_vdprintf_r+0x3e>
    cac6:	nop

0000cac8 <vdprintf>:
    cac8:	push	{r4}
    caca:	ldr	r4, [pc, #16]	; (cadc <vdprintf+0x14>)
    cacc:	mov	r3, r2
    cace:	mov	r2, r1
    cad0:	mov	r1, r0
    cad2:	ldr	r0, [r4, #0]
    cad4:	ldr.w	r4, [sp], #4
    cad8:	b.w	ca7c <_vdprintf_r>
    cadc:	.word	0x1fff0ef0

0000cae0 <__ascii_wctomb>:
    cae0:	cbz	r1, caec <__ascii_wctomb+0xc>
    cae2:	cmp	r2, #255	; 0xff
    cae4:	bhi.n	caf0 <__ascii_wctomb+0x10>
    cae6:	strb	r2, [r1, #0]
    cae8:	movs	r0, #1
    caea:	bx	lr
    caec:	mov	r0, r1
    caee:	bx	lr
    caf0:	movs	r3, #138	; 0x8a
    caf2:	str	r3, [r0, #0]
    caf4:	mov.w	r0, #4294967295
    caf8:	bx	lr
    cafa:	nop

0000cafc <_write_r>:
    cafc:	push	{r4, r5, r6, lr}
    cafe:	mov	r5, r1
    cb00:	ldr	r4, [pc, #32]	; (cb24 <_write_r+0x28>)
    cb02:	mov	r1, r2
    cb04:	mov	r6, r0
    cb06:	mov	r2, r3
    cb08:	mov	r0, r5
    cb0a:	movs	r3, #0
    cb0c:	str	r3, [r4, #0]
    cb0e:	bl	a644 <_write>
    cb12:	adds	r3, r0, #1
    cb14:	beq.n	cb18 <_write_r+0x1c>
    cb16:	pop	{r4, r5, r6, pc}
    cb18:	ldr	r3, [r4, #0]
    cb1a:	cmp	r3, #0
    cb1c:	beq.n	cb16 <_write_r+0x1a>
    cb1e:	str	r3, [r6, #0]
    cb20:	pop	{r4, r5, r6, pc}
    cb22:	nop
    cb24:	.word	0x1fff1f60

0000cb28 <__register_exitproc>:
    cb28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb2c:	ldr	r4, [pc, #148]	; (cbc4 <__register_exitproc+0x9c>)
    cb2e:	ldr	r5, [r4, #0]
    cb30:	ldr.w	r4, [r5, #328]	; 0x148
    cb34:	mov	r6, r0
    cb36:	mov	r8, r1
    cb38:	mov	sl, r2
    cb3a:	mov	r9, r3
    cb3c:	cbz	r4, cbb0 <__register_exitproc+0x88>
    cb3e:	ldr	r0, [r4, #4]
    cb40:	cmp	r0, #31
    cb42:	bgt.n	cb74 <__register_exitproc+0x4c>
    cb44:	adds	r3, r0, #1
    cb46:	cbz	r6, cb66 <__register_exitproc+0x3e>
    cb48:	add.w	r5, r4, r0, lsl #2
    cb4c:	movs	r2, #1
    cb4e:	str.w	sl, [r5, #136]	; 0x88
    cb52:	ldr.w	r1, [r4, #392]	; 0x188
    cb56:	lsls	r2, r0
    cb58:	orrs	r1, r2
    cb5a:	cmp	r6, #2
    cb5c:	str.w	r1, [r4, #392]	; 0x188
    cb60:	str.w	r9, [r5, #264]	; 0x108
    cb64:	beq.n	cba4 <__register_exitproc+0x7c>
    cb66:	adds	r0, #2
    cb68:	str	r3, [r4, #4]
    cb6a:	str.w	r8, [r4, r0, lsl #2]
    cb6e:	movs	r0, #0
    cb70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb74:	ldr	r3, [pc, #80]	; (cbc8 <__register_exitproc+0xa0>)
    cb76:	cbz	r3, cbba <__register_exitproc+0x92>
    cb78:	mov.w	r0, #400	; 0x190
    cb7c:	bl	bbc0 <malloc>
    cb80:	mov	r4, r0
    cb82:	cbz	r0, cbba <__register_exitproc+0x92>
    cb84:	ldr.w	r3, [r5, #328]	; 0x148
    cb88:	movs	r7, #0
    cb8a:	stmia.w	r0, {r3, r7}
    cb8e:	str.w	r4, [r5, #328]	; 0x148
    cb92:	mov	r0, r7
    cb94:	movs	r3, #1
    cb96:	str.w	r7, [r4, #392]	; 0x188
    cb9a:	str.w	r7, [r4, #396]	; 0x18c
    cb9e:	cmp	r6, #0
    cba0:	beq.n	cb66 <__register_exitproc+0x3e>
    cba2:	b.n	cb48 <__register_exitproc+0x20>
    cba4:	ldr.w	r1, [r4, #396]	; 0x18c
    cba8:	orrs	r2, r1
    cbaa:	str.w	r2, [r4, #396]	; 0x18c
    cbae:	b.n	cb66 <__register_exitproc+0x3e>
    cbb0:	add.w	r4, r5, #332	; 0x14c
    cbb4:	str.w	r4, [r5, #328]	; 0x148
    cbb8:	b.n	cb3e <__register_exitproc+0x16>
    cbba:	mov.w	r0, #4294967295
    cbbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbc2:	nop
    cbc4:	.word	0x00010304
    cbc8:	.word	0x0000bbc1

0000cbcc <register_fini>:
    cbcc:	ldr	r3, [pc, #8]	; (cbd8 <register_fini+0xc>)
    cbce:	cbz	r3, cbd6 <register_fini+0xa>
    cbd0:	ldr	r0, [pc, #8]	; (cbdc <register_fini+0x10>)
    cbd2:	b.w	cbe0 <atexit>
    cbd6:	bx	lr
    cbd8:	.word	0x00000000
    cbdc:	.word	0x0000cbed

0000cbe0 <atexit>:
    cbe0:	movs	r3, #0
    cbe2:	mov	r1, r0
    cbe4:	mov	r2, r3
    cbe6:	mov	r0, r3
    cbe8:	b.w	cb28 <__register_exitproc>

0000cbec <__libc_fini_array>:
    cbec:	push	{r3, r4, r5, lr}
    cbee:	ldr	r5, [pc, #28]	; (cc0c <__libc_fini_array+0x20>)
    cbf0:	ldr	r4, [pc, #28]	; (cc10 <__libc_fini_array+0x24>)
    cbf2:	subs	r4, r5, r4
    cbf4:	asrs	r4, r4, #2
    cbf6:	beq.n	cc04 <__libc_fini_array+0x18>
    cbf8:	subs	r4, #1
    cbfa:	ldr.w	r3, [r5, #-4]!
    cbfe:	blx	r3
    cc00:	cmp	r4, #0
    cc02:	bne.n	cbf8 <__libc_fini_array+0xc>
    cc04:	ldmia.w	sp!, {r3, r4, r5, lr}
    cc08:	b.w	105ac <__init_array_end>
	...

0000cc14 <_malloc_trim_r>:
    cc14:	push	{r3, r4, r5, r6, r7, lr}
    cc16:	ldr	r7, [pc, #140]	; (cca4 <_malloc_trim_r+0x90>)
    cc18:	mov	r4, r1
    cc1a:	mov	r6, r0
    cc1c:	bl	c3e8 <__malloc_lock>
    cc20:	ldr	r3, [r7, #8]
    cc22:	ldr	r5, [r3, #4]
    cc24:	bic.w	r5, r5, #3
    cc28:	subs	r1, r5, r4
    cc2a:	addw	r1, r1, #4079	; 0xfef
    cc2e:	bic.w	r1, r1, #4080	; 0xff0
    cc32:	bic.w	r1, r1, #15
    cc36:	sub.w	r4, r1, #4096	; 0x1000
    cc3a:	cmp.w	r4, #4096	; 0x1000
    cc3e:	blt.n	cc50 <_malloc_trim_r+0x3c>
    cc40:	movs	r1, #0
    cc42:	mov	r0, r6
    cc44:	bl	c7d0 <_sbrk_r>
    cc48:	ldr	r3, [r7, #8]
    cc4a:	add	r3, r5
    cc4c:	cmp	r0, r3
    cc4e:	beq.n	cc5a <_malloc_trim_r+0x46>
    cc50:	mov	r0, r6
    cc52:	bl	c3ec <__malloc_unlock>
    cc56:	movs	r0, #0
    cc58:	pop	{r3, r4, r5, r6, r7, pc}
    cc5a:	negs	r1, r4
    cc5c:	mov	r0, r6
    cc5e:	bl	c7d0 <_sbrk_r>
    cc62:	adds	r0, #1
    cc64:	beq.n	cc82 <_malloc_trim_r+0x6e>
    cc66:	ldr	r3, [pc, #64]	; (cca8 <_malloc_trim_r+0x94>)
    cc68:	ldr	r2, [r7, #8]
    cc6a:	ldr	r1, [r3, #0]
    cc6c:	subs	r5, r5, r4
    cc6e:	orr.w	r5, r5, #1
    cc72:	mov	r0, r6
    cc74:	subs	r1, r1, r4
    cc76:	str	r5, [r2, #4]
    cc78:	str	r1, [r3, #0]
    cc7a:	bl	c3ec <__malloc_unlock>
    cc7e:	movs	r0, #1
    cc80:	pop	{r3, r4, r5, r6, r7, pc}
    cc82:	movs	r1, #0
    cc84:	mov	r0, r6
    cc86:	bl	c7d0 <_sbrk_r>
    cc8a:	ldr	r2, [r7, #8]
    cc8c:	subs	r3, r0, r2
    cc8e:	cmp	r3, #15
    cc90:	ble.n	cc50 <_malloc_trim_r+0x3c>
    cc92:	ldr	r4, [pc, #24]	; (ccac <_malloc_trim_r+0x98>)
    cc94:	ldr	r1, [pc, #16]	; (cca8 <_malloc_trim_r+0x94>)
    cc96:	ldr	r4, [r4, #0]
    cc98:	orr.w	r3, r3, #1
    cc9c:	subs	r0, r0, r4
    cc9e:	str	r3, [r2, #4]
    cca0:	str	r0, [r1, #0]
    cca2:	b.n	cc50 <_malloc_trim_r+0x3c>
    cca4:	.word	0x1fff1060
    cca8:	.word	0x1fff1f20
    ccac:	.word	0x1fff146c

0000ccb0 <_free_r>:
    ccb0:	cmp	r1, #0
    ccb2:	beq.n	cd40 <_free_r+0x90>
    ccb4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccb8:	mov	r5, r1
    ccba:	mov	r8, r0
    ccbc:	bl	c3e8 <__malloc_lock>
    ccc0:	ldr.w	r7, [r5, #-4]
    ccc4:	ldr	r1, [pc, #424]	; (ce70 <_free_r+0x1c0>)
    ccc6:	bic.w	r3, r7, #1
    ccca:	sub.w	r4, r5, #8
    ccce:	adds	r2, r4, r3
    ccd0:	ldr	r6, [r1, #8]
    ccd2:	ldr	r0, [r2, #4]
    ccd4:	cmp	r2, r6
    ccd6:	bic.w	r0, r0, #3
    ccda:	beq.n	cda2 <_free_r+0xf2>
    ccdc:	lsls	r6, r7, #31
    ccde:	str	r0, [r2, #4]
    cce0:	bmi.n	ccfa <_free_r+0x4a>
    cce2:	ldr.w	r7, [r5, #-8]
    cce6:	subs	r4, r4, r7
    cce8:	add.w	lr, r1, #8
    ccec:	ldr	r5, [r4, #8]
    ccee:	cmp	r5, lr
    ccf0:	add	r3, r7
    ccf2:	beq.n	cdd4 <_free_r+0x124>
    ccf4:	ldr	r7, [r4, #12]
    ccf6:	str	r7, [r5, #12]
    ccf8:	str	r5, [r7, #8]
    ccfa:	adds	r5, r2, r0
    ccfc:	ldr	r5, [r5, #4]
    ccfe:	lsls	r5, r5, #31
    cd00:	bpl.n	cd88 <_free_r+0xd8>
    cd02:	orr.w	r2, r3, #1
    cd06:	str	r2, [r4, #4]
    cd08:	str	r3, [r4, r3]
    cd0a:	cmp.w	r3, #512	; 0x200
    cd0e:	bcs.n	cd42 <_free_r+0x92>
    cd10:	lsrs	r3, r3, #3
    cd12:	adds	r2, r3, #1
    cd14:	ldr	r5, [r1, #4]
    cd16:	ldr.w	r7, [r1, r2, lsl #3]
    cd1a:	str	r7, [r4, #8]
    cd1c:	movs	r0, #1
    cd1e:	asrs	r3, r3, #2
    cd20:	lsl.w	r3, r0, r3
    cd24:	add.w	r0, r1, r2, lsl #3
    cd28:	orrs	r5, r3
    cd2a:	subs	r0, #8
    cd2c:	str	r0, [r4, #12]
    cd2e:	str	r5, [r1, #4]
    cd30:	str.w	r4, [r1, r2, lsl #3]
    cd34:	str	r4, [r7, #12]
    cd36:	mov	r0, r8
    cd38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd3c:	b.w	c3ec <__malloc_unlock>
    cd40:	bx	lr
    cd42:	lsrs	r2, r3, #9
    cd44:	cmp	r2, #4
    cd46:	bhi.n	cdf0 <_free_r+0x140>
    cd48:	lsrs	r2, r3, #6
    cd4a:	add.w	r7, r2, #57	; 0x39
    cd4e:	lsls	r7, r7, #1
    cd50:	add.w	r5, r2, #56	; 0x38
    cd54:	add.w	r0, r1, r7, lsl #2
    cd58:	ldr.w	r2, [r1, r7, lsl #2]
    cd5c:	ldr	r1, [pc, #272]	; (ce70 <_free_r+0x1c0>)
    cd5e:	subs	r0, #8
    cd60:	cmp	r0, r2
    cd62:	beq.n	ce00 <_free_r+0x150>
    cd64:	ldr	r1, [r2, #4]
    cd66:	bic.w	r1, r1, #3
    cd6a:	cmp	r3, r1
    cd6c:	bcs.n	cd74 <_free_r+0xc4>
    cd6e:	ldr	r2, [r2, #8]
    cd70:	cmp	r0, r2
    cd72:	bne.n	cd64 <_free_r+0xb4>
    cd74:	ldr	r0, [r2, #12]
    cd76:	str	r0, [r4, #12]
    cd78:	str	r2, [r4, #8]
    cd7a:	str	r4, [r0, #8]
    cd7c:	str	r4, [r2, #12]
    cd7e:	mov	r0, r8
    cd80:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd84:	b.w	c3ec <__malloc_unlock>
    cd88:	ldr	r5, [r2, #8]
    cd8a:	ldr	r7, [pc, #232]	; (ce74 <_free_r+0x1c4>)
    cd8c:	cmp	r5, r7
    cd8e:	add	r3, r0
    cd90:	beq.n	ce12 <_free_r+0x162>
    cd92:	ldr	r0, [r2, #12]
    cd94:	str	r0, [r5, #12]
    cd96:	orr.w	r2, r3, #1
    cd9a:	str	r5, [r0, #8]
    cd9c:	str	r2, [r4, #4]
    cd9e:	str	r3, [r4, r3]
    cda0:	b.n	cd0a <_free_r+0x5a>
    cda2:	lsls	r7, r7, #31
    cda4:	add	r3, r0
    cda6:	bmi.n	cdb8 <_free_r+0x108>
    cda8:	ldr.w	r2, [r5, #-8]
    cdac:	subs	r4, r4, r2
    cdae:	add	r3, r2
    cdb0:	ldr	r0, [r4, #8]
    cdb2:	ldr	r2, [r4, #12]
    cdb4:	str	r2, [r0, #12]
    cdb6:	str	r0, [r2, #8]
    cdb8:	ldr	r2, [pc, #188]	; (ce78 <_free_r+0x1c8>)
    cdba:	ldr	r2, [r2, #0]
    cdbc:	orr.w	r0, r3, #1
    cdc0:	cmp	r3, r2
    cdc2:	str	r0, [r4, #4]
    cdc4:	str	r4, [r1, #8]
    cdc6:	bcc.n	cd36 <_free_r+0x86>
    cdc8:	ldr	r3, [pc, #176]	; (ce7c <_free_r+0x1cc>)
    cdca:	mov	r0, r8
    cdcc:	ldr	r1, [r3, #0]
    cdce:	bl	cc14 <_malloc_trim_r>
    cdd2:	b.n	cd36 <_free_r+0x86>
    cdd4:	adds	r1, r2, r0
    cdd6:	ldr	r1, [r1, #4]
    cdd8:	lsls	r1, r1, #31
    cdda:	bmi.n	ce66 <_free_r+0x1b6>
    cddc:	ldr	r1, [r2, #8]
    cdde:	ldr	r2, [r2, #12]
    cde0:	str	r2, [r1, #12]
    cde2:	add	r3, r0
    cde4:	orr.w	r0, r3, #1
    cde8:	str	r1, [r2, #8]
    cdea:	str	r0, [r4, #4]
    cdec:	str	r3, [r4, r3]
    cdee:	b.n	cd36 <_free_r+0x86>
    cdf0:	cmp	r2, #20
    cdf2:	bhi.n	ce24 <_free_r+0x174>
    cdf4:	add.w	r7, r2, #92	; 0x5c
    cdf8:	lsls	r7, r7, #1
    cdfa:	add.w	r5, r2, #91	; 0x5b
    cdfe:	b.n	cd54 <_free_r+0xa4>
    ce00:	asrs	r2, r5, #2
    ce02:	ldr	r3, [r1, #4]
    ce04:	movs	r5, #1
    ce06:	lsl.w	r2, r5, r2
    ce0a:	orrs	r3, r2
    ce0c:	str	r3, [r1, #4]
    ce0e:	mov	r2, r0
    ce10:	b.n	cd76 <_free_r+0xc6>
    ce12:	orr.w	r2, r3, #1
    ce16:	str	r4, [r1, #20]
    ce18:	str	r4, [r1, #16]
    ce1a:	str	r5, [r4, #12]
    ce1c:	str	r5, [r4, #8]
    ce1e:	str	r2, [r4, #4]
    ce20:	str	r3, [r4, r3]
    ce22:	b.n	cd36 <_free_r+0x86>
    ce24:	cmp	r2, #84	; 0x54
    ce26:	bhi.n	ce36 <_free_r+0x186>
    ce28:	lsrs	r2, r3, #12
    ce2a:	add.w	r7, r2, #111	; 0x6f
    ce2e:	lsls	r7, r7, #1
    ce30:	add.w	r5, r2, #110	; 0x6e
    ce34:	b.n	cd54 <_free_r+0xa4>
    ce36:	cmp.w	r2, #340	; 0x154
    ce3a:	bhi.n	ce4a <_free_r+0x19a>
    ce3c:	lsrs	r2, r3, #15
    ce3e:	add.w	r7, r2, #120	; 0x78
    ce42:	lsls	r7, r7, #1
    ce44:	add.w	r5, r2, #119	; 0x77
    ce48:	b.n	cd54 <_free_r+0xa4>
    ce4a:	movw	r0, #1364	; 0x554
    ce4e:	cmp	r2, r0
    ce50:	bhi.n	ce60 <_free_r+0x1b0>
    ce52:	lsrs	r2, r3, #18
    ce54:	add.w	r7, r2, #125	; 0x7d
    ce58:	lsls	r7, r7, #1
    ce5a:	add.w	r5, r2, #124	; 0x7c
    ce5e:	b.n	cd54 <_free_r+0xa4>
    ce60:	movs	r7, #254	; 0xfe
    ce62:	movs	r5, #126	; 0x7e
    ce64:	b.n	cd54 <_free_r+0xa4>
    ce66:	orr.w	r2, r3, #1
    ce6a:	str	r2, [r4, #4]
    ce6c:	str	r3, [r4, r3]
    ce6e:	b.n	cd36 <_free_r+0x86>
    ce70:	.word	0x1fff1060
    ce74:	.word	0x1fff1068
    ce78:	.word	0x1fff1468
    ce7c:	.word	0x1fff1f1c

0000ce80 <_localeconv_r>:
    ce80:	ldr	r2, [pc, #16]	; (ce94 <_localeconv_r+0x14>)
    ce82:	ldr	r3, [pc, #20]	; (ce98 <_localeconv_r+0x18>)
    ce84:	ldr	r2, [r2, #0]
    ce86:	ldr	r0, [r2, #52]	; 0x34
    ce88:	cmp	r0, #0
    ce8a:	it	eq
    ce8c:	moveq	r0, r3
    ce8e:	adds	r0, #240	; 0xf0
    ce90:	bx	lr
    ce92:	nop
    ce94:	.word	0x1fff0ef0
    ce98:	.word	0x1fff0ef4

0000ce9c <_Balloc>:
    ce9c:	ldr	r3, [r0, #76]	; 0x4c
    ce9e:	push	{r4, r5, r6, lr}
    cea0:	mov	r5, r0
    cea2:	mov	r4, r1
    cea4:	cbz	r3, ceba <_Balloc+0x1e>
    cea6:	ldr.w	r0, [r3, r4, lsl #2]
    ceaa:	cbz	r0, cece <_Balloc+0x32>
    ceac:	ldr	r2, [r0, #0]
    ceae:	str.w	r2, [r3, r4, lsl #2]
    ceb2:	movs	r3, #0
    ceb4:	str	r3, [r0, #16]
    ceb6:	str	r3, [r0, #12]
    ceb8:	pop	{r4, r5, r6, pc}
    ceba:	movs	r2, #33	; 0x21
    cebc:	movs	r1, #4
    cebe:	bl	d520 <_calloc_r>
    cec2:	str	r0, [r5, #76]	; 0x4c
    cec4:	mov	r3, r0
    cec6:	cmp	r0, #0
    cec8:	bne.n	cea6 <_Balloc+0xa>
    ceca:	movs	r0, #0
    cecc:	pop	{r4, r5, r6, pc}
    cece:	movs	r1, #1
    ced0:	lsl.w	r6, r1, r4
    ced4:	adds	r2, r6, #5
    ced6:	mov	r0, r5
    ced8:	lsls	r2, r2, #2
    ceda:	bl	d520 <_calloc_r>
    cede:	cmp	r0, #0
    cee0:	beq.n	ceca <_Balloc+0x2e>
    cee2:	str	r4, [r0, #4]
    cee4:	str	r6, [r0, #8]
    cee6:	b.n	ceb2 <_Balloc+0x16>

0000cee8 <_Bfree>:
    cee8:	cbz	r1, cef8 <_Bfree+0x10>
    ceea:	ldr	r3, [r0, #76]	; 0x4c
    ceec:	ldr	r2, [r1, #4]
    ceee:	ldr.w	r0, [r3, r2, lsl #2]
    cef2:	str	r0, [r1, #0]
    cef4:	str.w	r1, [r3, r2, lsl #2]
    cef8:	bx	lr
    cefa:	nop

0000cefc <__multadd>:
    cefc:	push	{r4, r5, r6, r7, lr}
    cefe:	ldr	r4, [r1, #16]
    cf00:	sub	sp, #12
    cf02:	mov	r5, r1
    cf04:	mov	r6, r0
    cf06:	add.w	lr, r1, #20
    cf0a:	movs	r7, #0
    cf0c:	ldr.w	r0, [lr]
    cf10:	uxth	r1, r0
    cf12:	mla	r1, r2, r1, r3
    cf16:	lsrs	r3, r1, #16
    cf18:	lsrs	r0, r0, #16
    cf1a:	mla	r3, r2, r0, r3
    cf1e:	uxth	r1, r1
    cf20:	adds	r7, #1
    cf22:	add.w	r1, r1, r3, lsl #16
    cf26:	cmp	r4, r7
    cf28:	str.w	r1, [lr], #4
    cf2c:	mov.w	r3, r3, lsr #16
    cf30:	bgt.n	cf0c <__multadd+0x10>
    cf32:	cbz	r3, cf44 <__multadd+0x48>
    cf34:	ldr	r2, [r5, #8]
    cf36:	cmp	r4, r2
    cf38:	bge.n	cf4a <__multadd+0x4e>
    cf3a:	add.w	r2, r5, r4, lsl #2
    cf3e:	adds	r4, #1
    cf40:	str	r3, [r2, #20]
    cf42:	str	r4, [r5, #16]
    cf44:	mov	r0, r5
    cf46:	add	sp, #12
    cf48:	pop	{r4, r5, r6, r7, pc}
    cf4a:	ldr	r1, [r5, #4]
    cf4c:	str	r3, [sp, #4]
    cf4e:	adds	r1, #1
    cf50:	mov	r0, r6
    cf52:	bl	ce9c <_Balloc>
    cf56:	ldr	r2, [r5, #16]
    cf58:	adds	r2, #2
    cf5a:	add.w	r1, r5, #12
    cf5e:	mov	r7, r0
    cf60:	lsls	r2, r2, #2
    cf62:	adds	r0, #12
    cf64:	bl	8df4 <memcpy>
    cf68:	ldr	r2, [r6, #76]	; 0x4c
    cf6a:	ldr	r1, [r5, #4]
    cf6c:	ldr	r3, [sp, #4]
    cf6e:	ldr.w	r0, [r2, r1, lsl #2]
    cf72:	str	r0, [r5, #0]
    cf74:	str.w	r5, [r2, r1, lsl #2]
    cf78:	mov	r5, r7
    cf7a:	b.n	cf3a <__multadd+0x3e>

0000cf7c <__hi0bits>:
    cf7c:	lsrs	r3, r0, #16
    cf7e:	lsls	r3, r3, #16
    cf80:	cbnz	r3, cfb0 <__hi0bits+0x34>
    cf82:	lsls	r0, r0, #16
    cf84:	movs	r3, #16
    cf86:	tst.w	r0, #4278190080	; 0xff000000
    cf8a:	itt	eq
    cf8c:	lsleq	r0, r0, #8
    cf8e:	addeq	r3, #8
    cf90:	tst.w	r0, #4026531840	; 0xf0000000
    cf94:	itt	eq
    cf96:	lsleq	r0, r0, #4
    cf98:	addeq	r3, #4
    cf9a:	tst.w	r0, #3221225472	; 0xc0000000
    cf9e:	itt	eq
    cfa0:	lsleq	r0, r0, #2
    cfa2:	addeq	r3, #2
    cfa4:	cmp	r0, #0
    cfa6:	blt.n	cfb8 <__hi0bits+0x3c>
    cfa8:	lsls	r2, r0, #1
    cfaa:	bmi.n	cfb4 <__hi0bits+0x38>
    cfac:	movs	r0, #32
    cfae:	bx	lr
    cfb0:	movs	r3, #0
    cfb2:	b.n	cf86 <__hi0bits+0xa>
    cfb4:	adds	r0, r3, #1
    cfb6:	bx	lr
    cfb8:	mov	r0, r3
    cfba:	bx	lr

0000cfbc <__lo0bits>:
    cfbc:	ldr	r3, [r0, #0]
    cfbe:	ands.w	r2, r3, #7
    cfc2:	beq.n	cfd4 <__lo0bits+0x18>
    cfc4:	lsls	r1, r3, #31
    cfc6:	bmi.n	d00a <__lo0bits+0x4e>
    cfc8:	lsls	r2, r3, #30
    cfca:	bmi.n	d00e <__lo0bits+0x52>
    cfcc:	lsrs	r3, r3, #2
    cfce:	str	r3, [r0, #0]
    cfd0:	movs	r0, #2
    cfd2:	bx	lr
    cfd4:	uxth	r1, r3
    cfd6:	cbnz	r1, cfdc <__lo0bits+0x20>
    cfd8:	lsrs	r3, r3, #16
    cfda:	movs	r2, #16
    cfdc:	tst.w	r3, #255	; 0xff
    cfe0:	itt	eq
    cfe2:	lsreq	r3, r3, #8
    cfe4:	addeq	r2, #8
    cfe6:	lsls	r1, r3, #28
    cfe8:	itt	eq
    cfea:	lsreq	r3, r3, #4
    cfec:	addeq	r2, #4
    cfee:	lsls	r1, r3, #30
    cff0:	itt	eq
    cff2:	lsreq	r3, r3, #2
    cff4:	addeq	r2, #2
    cff6:	lsls	r1, r3, #31
    cff8:	bmi.n	d004 <__lo0bits+0x48>
    cffa:	lsrs	r3, r3, #1
    cffc:	bne.n	d002 <__lo0bits+0x46>
    cffe:	movs	r0, #32
    d000:	bx	lr
    d002:	adds	r2, #1
    d004:	str	r3, [r0, #0]
    d006:	mov	r0, r2
    d008:	bx	lr
    d00a:	movs	r0, #0
    d00c:	bx	lr
    d00e:	lsrs	r3, r3, #1
    d010:	str	r3, [r0, #0]
    d012:	movs	r0, #1
    d014:	bx	lr
    d016:	nop

0000d018 <__i2b>:
    d018:	push	{r4, lr}
    d01a:	mov	r4, r1
    d01c:	movs	r1, #1
    d01e:	bl	ce9c <_Balloc>
    d022:	movs	r2, #1
    d024:	str	r4, [r0, #20]
    d026:	str	r2, [r0, #16]
    d028:	pop	{r4, pc}
    d02a:	nop

0000d02c <__multiply>:
    d02c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d030:	ldr	r5, [r1, #16]
    d032:	ldr	r7, [r2, #16]
    d034:	cmp	r5, r7
    d036:	sub	sp, #12
    d038:	mov	r4, r1
    d03a:	mov	r6, r2
    d03c:	bge.n	d048 <__multiply+0x1c>
    d03e:	mov	r2, r5
    d040:	mov	r4, r6
    d042:	mov	r5, r7
    d044:	mov	r6, r1
    d046:	mov	r7, r2
    d048:	ldr	r3, [r4, #8]
    d04a:	ldr	r1, [r4, #4]
    d04c:	add.w	r8, r5, r7
    d050:	cmp	r8, r3
    d052:	it	gt
    d054:	addgt	r1, #1
    d056:	bl	ce9c <_Balloc>
    d05a:	add.w	ip, r0, #20
    d05e:	add.w	r9, ip, r8, lsl #2
    d062:	cmp	ip, r9
    d064:	str	r0, [sp, #0]
    d066:	bcs.n	d074 <__multiply+0x48>
    d068:	mov	r3, ip
    d06a:	movs	r1, #0
    d06c:	str.w	r1, [r3], #4
    d070:	cmp	r9, r3
    d072:	bhi.n	d06c <__multiply+0x40>
    d074:	add.w	r2, r6, #20
    d078:	add.w	sl, r2, r7, lsl #2
    d07c:	add.w	r3, r4, #20
    d080:	cmp	r2, sl
    d082:	add.w	lr, r3, r5, lsl #2
    d086:	bcs.n	d132 <__multiply+0x106>
    d088:	str.w	r9, [sp, #4]
    d08c:	mov	r9, r3
    d08e:	ldr.w	r3, [r2], #4
    d092:	uxth.w	fp, r3
    d096:	cmp.w	fp, #0
    d09a:	beq.n	d0de <__multiply+0xb2>
    d09c:	movs	r0, #0
    d09e:	mov	r7, r9
    d0a0:	mov	r6, ip
    d0a2:	mov	r5, r0
    d0a4:	b.n	d0a8 <__multiply+0x7c>
    d0a6:	mov	r6, r3
    d0a8:	ldr.w	r4, [r7], #4
    d0ac:	ldr	r0, [r6, #0]
    d0ae:	uxth	r1, r4
    d0b0:	uxth	r3, r0
    d0b2:	mla	r1, fp, r1, r3
    d0b6:	lsrs	r4, r4, #16
    d0b8:	lsrs	r0, r0, #16
    d0ba:	adds	r3, r1, r5
    d0bc:	mla	r0, fp, r4, r0
    d0c0:	add.w	r0, r0, r3, lsr #16
    d0c4:	uxth	r1, r3
    d0c6:	mov	r3, r6
    d0c8:	orr.w	r1, r1, r0, lsl #16
    d0cc:	cmp	lr, r7
    d0ce:	mov.w	r5, r0, lsr #16
    d0d2:	str.w	r1, [r3], #4
    d0d6:	bhi.n	d0a6 <__multiply+0x7a>
    d0d8:	str	r5, [r6, #4]
    d0da:	ldr.w	r3, [r2, #-4]
    d0de:	movs.w	fp, r3, lsr #16
    d0e2:	beq.n	d126 <__multiply+0xfa>
    d0e4:	ldr.w	r3, [ip]
    d0e8:	mov	r7, ip
    d0ea:	mov	r0, r3
    d0ec:	mov	r5, r9
    d0ee:	movs	r1, #0
    d0f0:	b.n	d0f4 <__multiply+0xc8>
    d0f2:	mov	r7, r6
    d0f4:	ldrh	r4, [r5, #0]
    d0f6:	lsrs	r0, r0, #16
    d0f8:	mla	r0, fp, r4, r0
    d0fc:	add	r1, r0
    d0fe:	uxth	r4, r3
    d100:	mov	r6, r7
    d102:	orr.w	r3, r4, r1, lsl #16
    d106:	str.w	r3, [r6], #4
    d10a:	ldr	r0, [r7, #4]
    d10c:	ldr.w	r4, [r5], #4
    d110:	uxth	r3, r0
    d112:	lsrs	r4, r4, #16
    d114:	mla	r4, fp, r4, r3
    d118:	add.w	r3, r4, r1, lsr #16
    d11c:	cmp	lr, r5
    d11e:	mov.w	r1, r3, lsr #16
    d122:	bhi.n	d0f2 <__multiply+0xc6>
    d124:	str	r3, [r7, #4]
    d126:	cmp	sl, r2
    d128:	add.w	ip, ip, #4
    d12c:	bhi.n	d08e <__multiply+0x62>
    d12e:	ldr.w	r9, [sp, #4]
    d132:	cmp.w	r8, #0
    d136:	ble.n	d150 <__multiply+0x124>
    d138:	ldr.w	r3, [r9, #-4]
    d13c:	sub.w	r9, r9, #4
    d140:	cbz	r3, d14a <__multiply+0x11e>
    d142:	b.n	d150 <__multiply+0x124>
    d144:	ldr.w	r3, [r9, #-4]!
    d148:	cbnz	r3, d150 <__multiply+0x124>
    d14a:	subs.w	r8, r8, #1
    d14e:	bne.n	d144 <__multiply+0x118>
    d150:	ldr	r0, [sp, #0]
    d152:	str.w	r8, [r0, #16]
    d156:	add	sp, #12
    d158:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d15c <__pow5mult>:
    d15c:	ands.w	r3, r2, #3
    d160:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d164:	mov	r4, r2
    d166:	mov	r7, r0
    d168:	bne.n	d1c8 <__pow5mult+0x6c>
    d16a:	mov	r6, r1
    d16c:	asrs	r4, r4, #2
    d16e:	beq.n	d1aa <__pow5mult+0x4e>
    d170:	ldr	r5, [r7, #72]	; 0x48
    d172:	cbz	r5, d1da <__pow5mult+0x7e>
    d174:	lsls	r3, r4, #31
    d176:	mov.w	r8, #0
    d17a:	bmi.n	d18a <__pow5mult+0x2e>
    d17c:	asrs	r4, r4, #1
    d17e:	beq.n	d1aa <__pow5mult+0x4e>
    d180:	ldr	r0, [r5, #0]
    d182:	cbz	r0, d1b0 <__pow5mult+0x54>
    d184:	mov	r5, r0
    d186:	lsls	r3, r4, #31
    d188:	bpl.n	d17c <__pow5mult+0x20>
    d18a:	mov	r2, r5
    d18c:	mov	r1, r6
    d18e:	mov	r0, r7
    d190:	bl	d02c <__multiply>
    d194:	cbz	r6, d1c4 <__pow5mult+0x68>
    d196:	ldr	r2, [r6, #4]
    d198:	ldr	r3, [r7, #76]	; 0x4c
    d19a:	asrs	r4, r4, #1
    d19c:	ldr.w	r1, [r3, r2, lsl #2]
    d1a0:	str	r1, [r6, #0]
    d1a2:	str.w	r6, [r3, r2, lsl #2]
    d1a6:	mov	r6, r0
    d1a8:	bne.n	d180 <__pow5mult+0x24>
    d1aa:	mov	r0, r6
    d1ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1b0:	mov	r2, r5
    d1b2:	mov	r1, r5
    d1b4:	mov	r0, r7
    d1b6:	bl	d02c <__multiply>
    d1ba:	str	r0, [r5, #0]
    d1bc:	str.w	r8, [r0]
    d1c0:	mov	r5, r0
    d1c2:	b.n	d186 <__pow5mult+0x2a>
    d1c4:	mov	r6, r0
    d1c6:	b.n	d17c <__pow5mult+0x20>
    d1c8:	subs	r2, r3, #1
    d1ca:	ldr	r5, [pc, #44]	; (d1f8 <__pow5mult+0x9c>)
    d1cc:	movs	r3, #0
    d1ce:	ldr.w	r2, [r5, r2, lsl #2]
    d1d2:	bl	cefc <__multadd>
    d1d6:	mov	r6, r0
    d1d8:	b.n	d16c <__pow5mult+0x10>
    d1da:	movs	r1, #1
    d1dc:	mov	r0, r7
    d1de:	bl	ce9c <_Balloc>
    d1e2:	movw	r1, #625	; 0x271
    d1e6:	movs	r2, #1
    d1e8:	movs	r3, #0
    d1ea:	str	r1, [r0, #20]
    d1ec:	str	r2, [r0, #16]
    d1ee:	mov	r5, r0
    d1f0:	str	r0, [r7, #72]	; 0x48
    d1f2:	str	r3, [r0, #0]
    d1f4:	b.n	d174 <__pow5mult+0x18>
    d1f6:	nop
    d1f8:	.word	0x00010510

0000d1fc <__lshift>:
    d1fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d200:	mov	r9, r2
    d202:	ldr	r2, [r1, #16]
    d204:	ldr	r3, [r1, #8]
    d206:	mov.w	r4, r9, asr #5
    d20a:	add.w	r8, r4, r2
    d20e:	add.w	r5, r8, #1
    d212:	cmp	r5, r3
    d214:	mov	r6, r1
    d216:	mov	sl, r0
    d218:	ldr	r1, [r1, #4]
    d21a:	ble.n	d226 <__lshift+0x2a>
    d21c:	lsls	r3, r3, #1
    d21e:	cmp	r5, r3
    d220:	add.w	r1, r1, #1
    d224:	bgt.n	d21c <__lshift+0x20>
    d226:	mov	r0, sl
    d228:	bl	ce9c <_Balloc>
    d22c:	cmp	r4, #0
    d22e:	add.w	r2, r0, #20
    d232:	ble.n	d2a6 <__lshift+0xaa>
    d234:	add.w	r3, r2, r4, lsl #2
    d238:	movs	r1, #0
    d23a:	str.w	r1, [r2], #4
    d23e:	cmp	r3, r2
    d240:	bne.n	d23a <__lshift+0x3e>
    d242:	ldr	r4, [r6, #16]
    d244:	add.w	r1, r6, #20
    d248:	ands.w	r9, r9, #31
    d24c:	add.w	lr, r1, r4, lsl #2
    d250:	beq.n	d296 <__lshift+0x9a>
    d252:	rsb	r2, r9, #32
    d256:	movs	r4, #0
    d258:	ldr	r7, [r1, #0]
    d25a:	lsl.w	ip, r7, r9
    d25e:	orr.w	r4, ip, r4
    d262:	mov	ip, r3
    d264:	str.w	r4, [r3], #4
    d268:	ldr.w	r4, [r1], #4
    d26c:	cmp	lr, r1
    d26e:	lsr.w	r4, r4, r2
    d272:	bhi.n	d258 <__lshift+0x5c>
    d274:	str.w	r4, [ip, #4]
    d278:	cbz	r4, d27e <__lshift+0x82>
    d27a:	add.w	r5, r8, #2
    d27e:	ldr.w	r3, [sl, #76]	; 0x4c
    d282:	ldr	r2, [r6, #4]
    d284:	subs	r5, #1
    d286:	ldr.w	r1, [r3, r2, lsl #2]
    d28a:	str	r5, [r0, #16]
    d28c:	str	r1, [r6, #0]
    d28e:	str.w	r6, [r3, r2, lsl #2]
    d292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d296:	subs	r3, #4
    d298:	ldr.w	r2, [r1], #4
    d29c:	str.w	r2, [r3, #4]!
    d2a0:	cmp	lr, r1
    d2a2:	bhi.n	d298 <__lshift+0x9c>
    d2a4:	b.n	d27e <__lshift+0x82>
    d2a6:	mov	r3, r2
    d2a8:	b.n	d242 <__lshift+0x46>
    d2aa:	nop

0000d2ac <__mcmp>:
    d2ac:	ldr	r2, [r0, #16]
    d2ae:	ldr	r3, [r1, #16]
    d2b0:	subs	r2, r2, r3
    d2b2:	bne.n	d2dc <__mcmp+0x30>
    d2b4:	lsls	r3, r3, #2
    d2b6:	adds	r0, #20
    d2b8:	adds	r1, #20
    d2ba:	add	r1, r3
    d2bc:	push	{r4}
    d2be:	add	r3, r0
    d2c0:	b.n	d2c6 <__mcmp+0x1a>
    d2c2:	cmp	r0, r3
    d2c4:	bcs.n	d2e0 <__mcmp+0x34>
    d2c6:	ldr.w	r4, [r3, #-4]!
    d2ca:	ldr.w	r2, [r1, #-4]!
    d2ce:	cmp	r4, r2
    d2d0:	beq.n	d2c2 <__mcmp+0x16>
    d2d2:	bcc.n	d2e8 <__mcmp+0x3c>
    d2d4:	movs	r0, #1
    d2d6:	ldr.w	r4, [sp], #4
    d2da:	bx	lr
    d2dc:	mov	r0, r2
    d2de:	bx	lr
    d2e0:	movs	r0, #0
    d2e2:	ldr.w	r4, [sp], #4
    d2e6:	bx	lr
    d2e8:	mov.w	r0, #4294967295
    d2ec:	b.n	d2d6 <__mcmp+0x2a>
    d2ee:	nop

0000d2f0 <__mdiff>:
    d2f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d2f4:	ldr	r3, [r1, #16]
    d2f6:	mov	r7, r1
    d2f8:	ldr	r1, [r2, #16]
    d2fa:	subs	r3, r3, r1
    d2fc:	cmp	r3, #0
    d2fe:	mov	r8, r2
    d300:	bne.n	d332 <__mdiff+0x42>
    d302:	lsls	r1, r1, #2
    d304:	add.w	r2, r7, #20
    d308:	add.w	r5, r8, #20
    d30c:	adds	r3, r2, r1
    d30e:	add	r1, r5
    d310:	b.n	d316 <__mdiff+0x26>
    d312:	cmp	r2, r3
    d314:	bcs.n	d3d4 <__mdiff+0xe4>
    d316:	ldr.w	r6, [r3, #-4]!
    d31a:	ldr.w	r4, [r1, #-4]!
    d31e:	cmp	r6, r4
    d320:	beq.n	d312 <__mdiff+0x22>
    d322:	bcs.n	d3e6 <__mdiff+0xf6>
    d324:	mov	r3, r7
    d326:	mov	r4, r2
    d328:	mov	r7, r8
    d32a:	mov.w	r9, #1
    d32e:	mov	r8, r3
    d330:	b.n	d340 <__mdiff+0x50>
    d332:	blt.n	d3f0 <__mdiff+0x100>
    d334:	add.w	r5, r7, #20
    d338:	add.w	r4, r2, #20
    d33c:	mov.w	r9, #0
    d340:	ldr	r1, [r7, #4]
    d342:	bl	ce9c <_Balloc>
    d346:	ldr.w	r3, [r8, #16]
    d34a:	ldr	r6, [r7, #16]
    d34c:	str.w	r9, [r0, #12]
    d350:	add.w	ip, r4, r3, lsl #2
    d354:	mov	lr, r4
    d356:	add.w	r7, r5, r6, lsl #2
    d35a:	add.w	r4, r0, #20
    d35e:	movs	r3, #0
    d360:	ldr.w	r1, [lr], #4
    d364:	ldr.w	r8, [r5], #4
    d368:	uxth	r2, r1
    d36a:	uxtah	r3, r3, r8
    d36e:	lsrs	r1, r1, #16
    d370:	subs	r2, r3, r2
    d372:	rsb	r3, r1, r8, lsr #16
    d376:	add.w	r3, r3, r2, asr #16
    d37a:	uxth	r2, r2
    d37c:	orr.w	r2, r2, r3, lsl #16
    d380:	cmp	ip, lr
    d382:	str.w	r2, [r4], #4
    d386:	mov.w	r3, r3, asr #16
    d38a:	bhi.n	d360 <__mdiff+0x70>
    d38c:	cmp	r7, r5
    d38e:	bls.n	d3c0 <__mdiff+0xd0>
    d390:	mov	ip, r4
    d392:	mov	r1, r5
    d394:	ldr.w	lr, [r1], #4
    d398:	uxtah	r2, r3, lr
    d39c:	asrs	r3, r2, #16
    d39e:	add.w	r3, r3, lr, lsr #16
    d3a2:	uxth	r2, r2
    d3a4:	orr.w	r2, r2, r3, lsl #16
    d3a8:	cmp	r7, r1
    d3aa:	str.w	r2, [ip], #4
    d3ae:	mov.w	r3, r3, asr #16
    d3b2:	bhi.n	d394 <__mdiff+0xa4>
    d3b4:	mvns	r5, r5
    d3b6:	add	r5, r7
    d3b8:	bic.w	r5, r5, #3
    d3bc:	adds	r5, #4
    d3be:	add	r4, r5
    d3c0:	subs	r4, #4
    d3c2:	cbnz	r2, d3ce <__mdiff+0xde>
    d3c4:	ldr.w	r3, [r4, #-4]!
    d3c8:	subs	r6, #1
    d3ca:	cmp	r3, #0
    d3cc:	beq.n	d3c4 <__mdiff+0xd4>
    d3ce:	str	r6, [r0, #16]
    d3d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3d4:	movs	r1, #0
    d3d6:	bl	ce9c <_Balloc>
    d3da:	movs	r2, #1
    d3dc:	movs	r3, #0
    d3de:	str	r2, [r0, #16]
    d3e0:	str	r3, [r0, #20]
    d3e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3e6:	mov	r4, r5
    d3e8:	mov.w	r9, #0
    d3ec:	mov	r5, r2
    d3ee:	b.n	d340 <__mdiff+0x50>
    d3f0:	mov	r3, r7
    d3f2:	add.w	r4, r7, #20
    d3f6:	add.w	r5, r8, #20
    d3fa:	mov	r7, r8
    d3fc:	mov.w	r9, #1
    d400:	mov	r8, r3
    d402:	b.n	d340 <__mdiff+0x50>

0000d404 <__d2b>:
    d404:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d408:	vmov	r6, r7, d0
    d40c:	sub	sp, #12
    d40e:	mov	r8, r1
    d410:	movs	r1, #1
    d412:	mov	r4, r7
    d414:	ubfx	r5, r7, #20, #11
    d418:	mov	r7, r2
    d41a:	bl	ce9c <_Balloc>
    d41e:	ubfx	r4, r4, #0, #20
    d422:	mov	r9, r0
    d424:	cbz	r5, d42a <__d2b+0x26>
    d426:	orr.w	r4, r4, #1048576	; 0x100000
    d42a:	str	r4, [sp, #4]
    d42c:	cbz	r6, d476 <__d2b+0x72>
    d42e:	add	r0, sp, #8
    d430:	str.w	r6, [r0, #-8]!
    d434:	bl	cfbc <__lo0bits>
    d438:	cmp	r0, #0
    d43a:	bne.n	d4a6 <__d2b+0xa2>
    d43c:	ldmia.w	sp, {r2, r3}
    d440:	str.w	r2, [r9, #20]
    d444:	cmp	r3, #0
    d446:	ite	eq
    d448:	moveq	r1, #1
    d44a:	movne	r1, #2
    d44c:	str.w	r3, [r9, #24]
    d450:	str.w	r1, [r9, #16]
    d454:	cbnz	r5, d48e <__d2b+0x8a>
    d456:	add.w	r3, r9, r1, lsl #2
    d45a:	subw	r0, r0, #1074	; 0x432
    d45e:	str.w	r0, [r8]
    d462:	ldr	r0, [r3, #16]
    d464:	bl	cf7c <__hi0bits>
    d468:	rsb	r0, r0, r1, lsl #5
    d46c:	str	r0, [r7, #0]
    d46e:	mov	r0, r9
    d470:	add	sp, #12
    d472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d476:	add	r0, sp, #4
    d478:	bl	cfbc <__lo0bits>
    d47c:	ldr	r3, [sp, #4]
    d47e:	str.w	r3, [r9, #20]
    d482:	movs	r1, #1
    d484:	adds	r0, #32
    d486:	str.w	r1, [r9, #16]
    d48a:	cmp	r5, #0
    d48c:	beq.n	d456 <__d2b+0x52>
    d48e:	subw	r5, r5, #1075	; 0x433
    d492:	add	r5, r0
    d494:	rsb	r0, r0, #53	; 0x35
    d498:	str.w	r5, [r8]
    d49c:	str	r0, [r7, #0]
    d49e:	mov	r0, r9
    d4a0:	add	sp, #12
    d4a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d4a6:	ldmia.w	sp, {r2, r3}
    d4aa:	rsb	r1, r0, #32
    d4ae:	lsl.w	r1, r3, r1
    d4b2:	orrs	r2, r1
    d4b4:	lsrs	r3, r0
    d4b6:	str	r3, [sp, #4]
    d4b8:	str.w	r2, [r9, #20]
    d4bc:	b.n	d444 <__d2b+0x40>
    d4be:	nop

0000d4c0 <_vasnprintf_r>:
    d4c0:	push	{r4, r5, r6, lr}
    d4c2:	mov	r5, r2
    d4c4:	sub	sp, #104	; 0x68
    d4c6:	ldr	r4, [r2, #0]
    d4c8:	cbz	r1, d4ce <_vasnprintf_r+0xe>
    d4ca:	cmp	r4, #0
    d4cc:	bne.n	d504 <_vasnprintf_r+0x44>
    d4ce:	movs	r4, #0
    d4d0:	mov.w	r2, #648	; 0x288
    d4d4:	strh.w	r2, [sp, #12]
    d4d8:	str	r4, [sp, #0]
    d4da:	str	r4, [sp, #16]
    d4dc:	mov	r2, r3
    d4de:	movw	r6, #65535	; 0xffff
    d4e2:	ldr	r3, [sp, #120]	; 0x78
    d4e4:	str	r4, [sp, #8]
    d4e6:	mov	r1, sp
    d4e8:	str	r4, [sp, #20]
    d4ea:	strh.w	r6, [sp, #14]
    d4ee:	bl	e4e0 <_svfprintf_r>
    d4f2:	cmp	r0, #0
    d4f4:	blt.n	d51a <_vasnprintf_r+0x5a>
    d4f6:	ldr	r3, [sp, #0]
    d4f8:	str	r0, [r5, #0]
    d4fa:	movs	r2, #0
    d4fc:	strb	r2, [r3, #0]
    d4fe:	ldr	r0, [sp, #16]
    d500:	add	sp, #104	; 0x68
    d502:	pop	{r4, r5, r6, pc}
    d504:	mov.w	r2, #1544	; 0x608
    d508:	str	r1, [sp, #0]
    d50a:	str	r1, [sp, #16]
    d50c:	strh.w	r2, [sp, #12]
    d510:	bge.n	d4dc <_vasnprintf_r+0x1c>
    d512:	movs	r3, #139	; 0x8b
    d514:	str	r3, [r0, #0]
    d516:	movs	r0, #0
    d518:	b.n	d500 <_vasnprintf_r+0x40>
    d51a:	movs	r0, #0
    d51c:	b.n	d500 <_vasnprintf_r+0x40>
    d51e:	nop

0000d520 <_calloc_r>:
    d520:	push	{r4, lr}
    d522:	mul.w	r1, r2, r1
    d526:	bl	bbe0 <_malloc_r>
    d52a:	mov	r4, r0
    d52c:	cbz	r0, d566 <_calloc_r+0x46>
    d52e:	ldr.w	r2, [r0, #-4]
    d532:	bic.w	r2, r2, #3
    d536:	subs	r2, #4
    d538:	cmp	r2, #36	; 0x24
    d53a:	bhi.n	d56e <_calloc_r+0x4e>
    d53c:	cmp	r2, #19
    d53e:	bls.n	d56a <_calloc_r+0x4a>
    d540:	movs	r3, #0
    d542:	cmp	r2, #27
    d544:	str	r3, [r0, #0]
    d546:	str	r3, [r0, #4]
    d548:	bls.n	d578 <_calloc_r+0x58>
    d54a:	cmp	r2, #36	; 0x24
    d54c:	str	r3, [r0, #8]
    d54e:	str	r3, [r0, #12]
    d550:	iteee	ne
    d552:	addne.w	r2, r0, #16
    d556:	streq	r3, [r0, #16]
    d558:	streq	r3, [r0, #20]
    d55a:	addeq.w	r2, r0, #24
    d55e:	movs	r3, #0
    d560:	str	r3, [r2, #0]
    d562:	str	r3, [r2, #4]
    d564:	str	r3, [r2, #8]
    d566:	mov	r0, r4
    d568:	pop	{r4, pc}
    d56a:	mov	r2, r0
    d56c:	b.n	d55e <_calloc_r+0x3e>
    d56e:	movs	r1, #0
    d570:	bl	c34c <memset>
    d574:	mov	r0, r4
    d576:	pop	{r4, pc}
    d578:	add.w	r2, r0, #8
    d57c:	b.n	d55e <_calloc_r+0x3e>
    d57e:	nop

0000d580 <quorem>:
    d580:	ldr	r2, [r0, #16]
    d582:	ldr	r3, [r1, #16]
    d584:	cmp	r3, r2
    d586:	bgt.w	d6a4 <quorem+0x124>
    d58a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d58e:	add.w	r8, r3, #4294967295
    d592:	add.w	r7, r1, #20
    d596:	add.w	fp, r0, #20
    d59a:	ldr.w	r2, [r7, r8, lsl #2]
    d59e:	ldr.w	r3, [fp, r8, lsl #2]
    d5a2:	mov.w	r4, r8, lsl #2
    d5a6:	sub	sp, #12
    d5a8:	adds	r2, #1
    d5aa:	udiv	r9, r3, r2
    d5ae:	add.w	r3, fp, r4
    d5b2:	str	r4, [sp, #0]
    d5b4:	add.w	sl, r7, r4
    d5b8:	str	r3, [sp, #4]
    d5ba:	cmp.w	r9, #0
    d5be:	beq.n	d634 <quorem+0xb4>
    d5c0:	movs	r5, #0
    d5c2:	mov	ip, r7
    d5c4:	mov	lr, fp
    d5c6:	mov	r3, r5
    d5c8:	ldr.w	r6, [ip], #4
    d5cc:	ldr.w	r2, [lr]
    d5d0:	uxth	r4, r6
    d5d2:	mla	r5, r9, r4, r5
    d5d6:	lsrs	r6, r6, #16
    d5d8:	lsrs	r4, r5, #16
    d5da:	mla	r4, r9, r6, r4
    d5de:	uxth	r5, r5
    d5e0:	subs	r3, r3, r5
    d5e2:	uxth	r6, r4
    d5e4:	uxtah	r3, r3, r2
    d5e8:	rsb	r6, r6, r2, lsr #16
    d5ec:	add.w	r6, r6, r3, asr #16
    d5f0:	uxth	r3, r3
    d5f2:	orr.w	r3, r3, r6, lsl #16
    d5f6:	cmp	sl, ip
    d5f8:	str.w	r3, [lr], #4
    d5fc:	mov.w	r5, r4, lsr #16
    d600:	mov.w	r3, r6, asr #16
    d604:	bcs.n	d5c8 <quorem+0x48>
    d606:	ldr	r3, [sp, #0]
    d608:	ldr.w	r3, [fp, r3]
    d60c:	cbnz	r3, d634 <quorem+0xb4>
    d60e:	ldr	r4, [sp, #4]
    d610:	subs	r3, r4, #4
    d612:	cmp	fp, r3
    d614:	bcs.n	d630 <quorem+0xb0>
    d616:	ldr.w	r3, [r4, #-4]
    d61a:	cbnz	r3, d630 <quorem+0xb0>
    d61c:	sub.w	r3, r4, #8
    d620:	b.n	d628 <quorem+0xa8>
    d622:	ldr	r2, [r3, #0]
    d624:	subs	r3, #4
    d626:	cbnz	r2, d630 <quorem+0xb0>
    d628:	cmp	fp, r3
    d62a:	add.w	r8, r8, #4294967295
    d62e:	bcc.n	d622 <quorem+0xa2>
    d630:	str.w	r8, [r0, #16]
    d634:	mov	r4, r0
    d636:	bl	d2ac <__mcmp>
    d63a:	cmp	r0, #0
    d63c:	blt.n	d69c <quorem+0x11c>
    d63e:	add.w	r9, r9, #1
    d642:	mov	r5, fp
    d644:	movs	r3, #0
    d646:	ldr.w	r1, [r7], #4
    d64a:	ldr	r0, [r5, #0]
    d64c:	uxth	r2, r1
    d64e:	subs	r2, r3, r2
    d650:	lsrs	r1, r1, #16
    d652:	uxtah	r2, r2, r0
    d656:	rsb	r3, r1, r0, lsr #16
    d65a:	add.w	r3, r3, r2, asr #16
    d65e:	uxth	r1, r2
    d660:	orr.w	r1, r1, r3, lsl #16
    d664:	cmp	sl, r7
    d666:	str.w	r1, [r5], #4
    d66a:	mov.w	r3, r3, asr #16
    d66e:	bcs.n	d646 <quorem+0xc6>
    d670:	ldr.w	r2, [fp, r8, lsl #2]
    d674:	add.w	r3, fp, r8, lsl #2
    d678:	cbnz	r2, d69c <quorem+0x11c>
    d67a:	subs	r2, r3, #4
    d67c:	cmp	fp, r2
    d67e:	bcs.n	d698 <quorem+0x118>
    d680:	ldr.w	r2, [r3, #-4]
    d684:	cbnz	r2, d698 <quorem+0x118>
    d686:	subs	r3, #8
    d688:	b.n	d690 <quorem+0x110>
    d68a:	ldr	r2, [r3, #0]
    d68c:	subs	r3, #4
    d68e:	cbnz	r2, d698 <quorem+0x118>
    d690:	cmp	fp, r3
    d692:	add.w	r8, r8, #4294967295
    d696:	bcc.n	d68a <quorem+0x10a>
    d698:	str.w	r8, [r4, #16]
    d69c:	mov	r0, r9
    d69e:	add	sp, #12
    d6a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6a4:	movs	r0, #0
    d6a6:	bx	lr

0000d6a8 <_dtoa_r>:
    d6a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6ac:	vmov	r6, r7, d0
    d6b0:	sub	sp, #108	; 0x6c
    d6b2:	ldr	r4, [r0, #64]	; 0x40
    d6b4:	ldr	r5, [sp, #144]	; 0x90
    d6b6:	str	r1, [sp, #0]
    d6b8:	mov	r9, r0
    d6ba:	str	r2, [sp, #20]
    d6bc:	str	r3, [sp, #12]
    d6be:	vmov	sl, s0
    d6c2:	mov	fp, r7
    d6c4:	cbz	r4, d6dc <_dtoa_r+0x34>
    d6c6:	ldr	r2, [r0, #68]	; 0x44
    d6c8:	str	r2, [r4, #4]
    d6ca:	movs	r3, #1
    d6cc:	lsls	r3, r2
    d6ce:	str	r3, [r4, #8]
    d6d0:	mov	r1, r4
    d6d2:	bl	cee8 <_Bfree>
    d6d6:	movs	r3, #0
    d6d8:	str.w	r3, [r9, #64]	; 0x40
    d6dc:	cmp.w	fp, #0
    d6e0:	mov	r4, fp
    d6e2:	blt.n	d74e <_dtoa_r+0xa6>
    d6e4:	movs	r3, #0
    d6e6:	str	r3, [r5, #0]
    d6e8:	ldr	r3, [pc, #644]	; (d970 <_dtoa_r+0x2c8>)
    d6ea:	mov	r2, r3
    d6ec:	ands	r3, r4
    d6ee:	cmp	r3, r2
    d6f0:	beq.n	d720 <_dtoa_r+0x78>
    d6f2:	movs	r2, #0
    d6f4:	movs	r3, #0
    d6f6:	mov	r0, sl
    d6f8:	mov	r1, fp
    d6fa:	bl	b760 <__aeabi_dcmpeq>
    d6fe:	mov	r6, sl
    d700:	mov	r7, fp
    d702:	mov	r8, r0
    d704:	cbz	r0, d75a <_dtoa_r+0xb2>
    d706:	ldr	r2, [sp, #12]
    d708:	movs	r3, #1
    d70a:	str	r3, [r2, #0]
    d70c:	ldr	r3, [sp, #148]	; 0x94
    d70e:	cmp	r3, #0
    d710:	beq.w	d890 <_dtoa_r+0x1e8>
    d714:	ldr	r0, [pc, #604]	; (d974 <_dtoa_r+0x2cc>)
    d716:	str	r0, [r3, #0]
    d718:	subs	r0, #1
    d71a:	add	sp, #108	; 0x6c
    d71c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d720:	ldr	r2, [sp, #12]
    d722:	movw	r3, #9999	; 0x270f
    d726:	str	r3, [r2, #0]
    d728:	cmp.w	sl, #0
    d72c:	beq.w	d864 <_dtoa_r+0x1bc>
    d730:	ldr	r0, [pc, #580]	; (d978 <_dtoa_r+0x2d0>)
    d732:	ldr	r3, [sp, #148]	; 0x94
    d734:	cmp	r3, #0
    d736:	beq.n	d71a <_dtoa_r+0x72>
    d738:	ldrb	r3, [r0, #3]
    d73a:	cmp	r3, #0
    d73c:	beq.w	d894 <_dtoa_r+0x1ec>
    d740:	add.w	r3, r0, #8
    d744:	ldr	r2, [sp, #148]	; 0x94
    d746:	str	r3, [r2, #0]
    d748:	add	sp, #108	; 0x6c
    d74a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d74e:	movs	r3, #1
    d750:	bic.w	r4, fp, #2147483648	; 0x80000000
    d754:	str	r3, [r5, #0]
    d756:	mov	fp, r4
    d758:	b.n	d6e8 <_dtoa_r+0x40>
    d75a:	add	r2, sp, #96	; 0x60
    d75c:	add	r1, sp, #100	; 0x64
    d75e:	vmov	d0, r6, r7
    d762:	mov	r0, r9
    d764:	bl	d404 <__d2b>
    d768:	lsrs	r5, r4, #20
    d76a:	str	r0, [sp, #40]	; 0x28
    d76c:	bne.w	d876 <_dtoa_r+0x1ce>
    d770:	ldr	r5, [sp, #96]	; 0x60
    d772:	ldr	r6, [sp, #100]	; 0x64
    d774:	add	r6, r5
    d776:	addw	r3, r6, #1074	; 0x432
    d77a:	cmp	r3, #32
    d77c:	ble.w	dc90 <_dtoa_r+0x5e8>
    d780:	rsb	r3, r3, #64	; 0x40
    d784:	addw	r0, r6, #1042	; 0x412
    d788:	lsls	r4, r3
    d78a:	lsr.w	r0, sl, r0
    d78e:	orrs	r0, r4
    d790:	bl	b1a4 <__aeabi_ui2d>
    d794:	movs	r3, #1
    d796:	subs	r4, r6, #1
    d798:	sub.w	r1, r1, #32505856	; 0x1f00000
    d79c:	str	r3, [sp, #60]	; 0x3c
    d79e:	movs	r2, #0
    d7a0:	ldr	r3, [pc, #472]	; (d97c <_dtoa_r+0x2d4>)
    d7a2:	bl	af28 <__aeabi_dsub>
    d7a6:	add	r3, pc, #432	; (adr r3, d958 <_dtoa_r+0x2b0>)
    d7a8:	ldrd	r2, r3, [r3]
    d7ac:	bl	b290 <__aeabi_dmul>
    d7b0:	add	r3, pc, #428	; (adr r3, d960 <_dtoa_r+0x2b8>)
    d7b2:	ldrd	r2, r3, [r3]
    d7b6:	bl	af2c <__adddf3>
    d7ba:	mov	r6, r0
    d7bc:	mov	r0, r4
    d7be:	mov	r7, r1
    d7c0:	bl	b1c4 <__aeabi_i2d>
    d7c4:	add	r3, pc, #416	; (adr r3, d968 <_dtoa_r+0x2c0>)
    d7c6:	ldrd	r2, r3, [r3]
    d7ca:	bl	b290 <__aeabi_dmul>
    d7ce:	mov	r2, r0
    d7d0:	mov	r3, r1
    d7d2:	mov	r0, r6
    d7d4:	mov	r1, r7
    d7d6:	bl	af2c <__adddf3>
    d7da:	mov	r6, r0
    d7dc:	mov	r7, r1
    d7de:	bl	b7f0 <__aeabi_d2iz>
    d7e2:	movs	r2, #0
    d7e4:	str	r0, [sp, #16]
    d7e6:	movs	r3, #0
    d7e8:	mov	r0, r6
    d7ea:	mov	r1, r7
    d7ec:	bl	b774 <__aeabi_dcmplt>
    d7f0:	cmp	r0, #0
    d7f2:	bne.w	dc46 <_dtoa_r+0x59e>
    d7f6:	ldr	r6, [sp, #16]
    d7f8:	cmp	r6, #22
    d7fa:	bhi.w	dc40 <_dtoa_r+0x598>
    d7fe:	ldr	r3, [pc, #384]	; (d980 <_dtoa_r+0x2d8>)
    d800:	add.w	r3, r3, r6, lsl #3
    d804:	ldrd	r0, r1, [r3]
    d808:	mov	r2, sl
    d80a:	mov	r3, fp
    d80c:	bl	b7b0 <__aeabi_dcmpgt>
    d810:	cmp	r0, #0
    d812:	beq.w	dc9a <_dtoa_r+0x5f2>
    d816:	subs	r3, r6, #1
    d818:	str	r3, [sp, #16]
    d81a:	movs	r3, #0
    d81c:	str	r3, [sp, #52]	; 0x34
    d81e:	subs	r5, r5, r4
    d820:	subs.w	r8, r5, #1
    d824:	bmi.w	dc7c <_dtoa_r+0x5d4>
    d828:	movs	r3, #0
    d82a:	str	r3, [sp, #28]
    d82c:	ldr	r3, [sp, #16]
    d82e:	cmp	r3, #0
    d830:	blt.w	dc6a <_dtoa_r+0x5c2>
    d834:	add	r8, r3
    d836:	str	r3, [sp, #48]	; 0x30
    d838:	movs	r3, #0
    d83a:	str	r3, [sp, #24]
    d83c:	ldr	r3, [sp, #0]
    d83e:	cmp	r3, #9
    d840:	bhi.n	d898 <_dtoa_r+0x1f0>
    d842:	cmp	r3, #5
    d844:	ble.w	e4d0 <_dtoa_r+0xe28>
    d848:	subs	r3, #4
    d84a:	str	r3, [sp, #0]
    d84c:	movs	r6, #0
    d84e:	ldr	r3, [sp, #0]
    d850:	subs	r3, #2
    d852:	cmp	r3, #3
    d854:	bhi.w	e49e <_dtoa_r+0xdf6>
    d858:	tbh	[pc, r3, lsl #1]
    d85c:	.word	0x0224032b
    d860:	.word	0x04500336
    d864:	ldr	r3, [pc, #272]	; (d978 <_dtoa_r+0x2d0>)
    d866:	ldr	r2, [pc, #284]	; (d984 <_dtoa_r+0x2dc>)
    d868:	ubfx	r0, r4, #0, #20
    d86c:	cmp	r0, #0
    d86e:	ite	ne
    d870:	movne	r0, r3
    d872:	moveq	r0, r2
    d874:	b.n	d732 <_dtoa_r+0x8a>
    d876:	ubfx	r3, fp, #0, #20
    d87a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d87e:	subw	r4, r5, #1023	; 0x3ff
    d882:	mov	r0, sl
    d884:	str.w	r8, [sp, #60]	; 0x3c
    d888:	orr.w	r1, r1, #3145728	; 0x300000
    d88c:	ldr	r5, [sp, #96]	; 0x60
    d88e:	b.n	d79e <_dtoa_r+0xf6>
    d890:	ldr	r0, [pc, #244]	; (d988 <_dtoa_r+0x2e0>)
    d892:	b.n	d71a <_dtoa_r+0x72>
    d894:	adds	r3, r0, #3
    d896:	b.n	d744 <_dtoa_r+0x9c>
    d898:	movs	r1, #0
    d89a:	str.w	r1, [r9, #68]	; 0x44
    d89e:	mov	r0, r9
    d8a0:	mov	r4, r1
    d8a2:	str	r1, [sp, #0]
    d8a4:	bl	ce9c <_Balloc>
    d8a8:	mov.w	r3, #4294967295
    d8ac:	str	r3, [sp, #32]
    d8ae:	str	r3, [sp, #56]	; 0x38
    d8b0:	movs	r3, #1
    d8b2:	str	r0, [sp, #36]	; 0x24
    d8b4:	str.w	r0, [r9, #64]	; 0x40
    d8b8:	str	r4, [sp, #20]
    d8ba:	str	r3, [sp, #44]	; 0x2c
    d8bc:	ldr	r3, [sp, #100]	; 0x64
    d8be:	cmp	r3, #0
    d8c0:	blt.w	da64 <_dtoa_r+0x3bc>
    d8c4:	ldr	r2, [sp, #16]
    d8c6:	cmp	r2, #14
    d8c8:	bgt.w	da64 <_dtoa_r+0x3bc>
    d8cc:	ldr	r3, [pc, #176]	; (d980 <_dtoa_r+0x2d8>)
    d8ce:	add.w	r3, r3, r2, lsl #3
    d8d2:	vldr	d7, [r3]
    d8d6:	ldr	r3, [sp, #20]
    d8d8:	cmp	r3, #0
    d8da:	vstr	d7, [sp]
    d8de:	blt.w	dede <_dtoa_r+0x836>
    d8e2:	mov	r6, sl
    d8e4:	mov	r7, fp
    d8e6:	ldrd	sl, fp, [sp]
    d8ea:	mov	r0, r6
    d8ec:	mov	r2, sl
    d8ee:	mov	r3, fp
    d8f0:	mov	r1, r7
    d8f2:	bl	b4e4 <__aeabi_ddiv>
    d8f6:	bl	b7f0 <__aeabi_d2iz>
    d8fa:	mov	r4, r0
    d8fc:	bl	b1c4 <__aeabi_i2d>
    d900:	mov	r2, sl
    d902:	mov	r3, fp
    d904:	bl	b290 <__aeabi_dmul>
    d908:	mov	r3, r1
    d90a:	mov	r2, r0
    d90c:	mov	r1, r7
    d90e:	mov	r0, r6
    d910:	bl	af28 <__aeabi_dsub>
    d914:	ldr	r5, [sp, #36]	; 0x24
    d916:	add.w	r3, r4, #48	; 0x30
    d91a:	strb	r3, [r5, #0]
    d91c:	ldr	r3, [sp, #32]
    d91e:	cmp	r3, #1
    d920:	mov	r6, r0
    d922:	mov	r7, r1
    d924:	add.w	r5, r5, #1
    d928:	beq.n	d9ee <_dtoa_r+0x346>
    d92a:	movs	r2, #0
    d92c:	ldr	r3, [pc, #92]	; (d98c <_dtoa_r+0x2e4>)
    d92e:	bl	b290 <__aeabi_dmul>
    d932:	movs	r2, #0
    d934:	movs	r3, #0
    d936:	mov	r6, r0
    d938:	mov	r7, r1
    d93a:	bl	b760 <__aeabi_dcmpeq>
    d93e:	cmp	r0, #0
    d940:	bne.n	da3e <_dtoa_r+0x396>
    d942:	str.w	r9, [sp, #20]
    d946:	ldr.w	sl, [sp, #32]
    d94a:	ldr.w	fp, [sp, #36]	; 0x24
    d94e:	ldrd	r8, r9, [sp]
    d952:	b.n	d9a6 <_dtoa_r+0x2fe>
    d954:	nop.w
    d958:	.word	0x636f4361
    d95c:	.word	0x3fd287a7
    d960:	.word	0x8b60c8b3
    d964:	.word	0x3fc68a28
    d968:	.word	0x509f79fb
    d96c:	.word	0x3fd34413
    d970:	.word	0x7ff00000
    d974:	.word	0x0001052d
    d978:	.word	0x00010528
    d97c:	.word	0x3ff80000
    d980:	.word	0x00010420
    d984:	.word	0x0001051c
    d988:	.word	0x0001052c
    d98c:	.word	0x40240000
    d990:	bl	b290 <__aeabi_dmul>
    d994:	movs	r2, #0
    d996:	movs	r3, #0
    d998:	mov	r6, r0
    d99a:	mov	r7, r1
    d99c:	bl	b760 <__aeabi_dcmpeq>
    d9a0:	cmp	r0, #0
    d9a2:	bne.w	e102 <_dtoa_r+0xa5a>
    d9a6:	mov	r2, r8
    d9a8:	mov	r3, r9
    d9aa:	mov	r0, r6
    d9ac:	mov	r1, r7
    d9ae:	bl	b4e4 <__aeabi_ddiv>
    d9b2:	bl	b7f0 <__aeabi_d2iz>
    d9b6:	mov	r4, r0
    d9b8:	bl	b1c4 <__aeabi_i2d>
    d9bc:	mov	r2, r8
    d9be:	mov	r3, r9
    d9c0:	bl	b290 <__aeabi_dmul>
    d9c4:	mov	r2, r0
    d9c6:	mov	r3, r1
    d9c8:	mov	r0, r6
    d9ca:	mov	r1, r7
    d9cc:	bl	af28 <__aeabi_dsub>
    d9d0:	add.w	lr, r4, #48	; 0x30
    d9d4:	strb.w	lr, [r5], #1
    d9d8:	rsb	lr, fp, r5
    d9dc:	cmp	lr, sl
    d9de:	mov	r6, r0
    d9e0:	mov	r7, r1
    d9e2:	mov.w	r2, #0
    d9e6:	ldr	r3, [pc, #696]	; (dca0 <_dtoa_r+0x5f8>)
    d9e8:	bne.n	d990 <_dtoa_r+0x2e8>
    d9ea:	ldr.w	r9, [sp, #20]
    d9ee:	mov	r2, r6
    d9f0:	mov	r3, r7
    d9f2:	mov	r0, r6
    d9f4:	mov	r1, r7
    d9f6:	bl	af2c <__adddf3>
    d9fa:	mov	r6, r0
    d9fc:	mov	r7, r1
    d9fe:	mov	r2, r0
    da00:	mov	r3, r1
    da02:	ldrd	r0, r1, [sp]
    da06:	bl	b774 <__aeabi_dcmplt>
    da0a:	cbnz	r0, da1e <_dtoa_r+0x376>
    da0c:	mov	r2, r6
    da0e:	mov	r3, r7
    da10:	ldrd	r0, r1, [sp]
    da14:	bl	b760 <__aeabi_dcmpeq>
    da18:	cbz	r0, da3e <_dtoa_r+0x396>
    da1a:	lsls	r3, r4, #31
    da1c:	bpl.n	da3e <_dtoa_r+0x396>
    da1e:	ldrb.w	r4, [r5, #-1]
    da22:	ldr	r2, [sp, #36]	; 0x24
    da24:	subs	r3, r5, #1
    da26:	b.n	da32 <_dtoa_r+0x38a>
    da28:	cmp	r2, r3
    da2a:	beq.w	e226 <_dtoa_r+0xb7e>
    da2e:	ldrb.w	r4, [r3, #-1]!
    da32:	cmp	r4, #57	; 0x39
    da34:	add.w	r5, r3, #1
    da38:	beq.n	da28 <_dtoa_r+0x380>
    da3a:	adds	r4, #1
    da3c:	strb	r4, [r3, #0]
    da3e:	ldr	r1, [sp, #40]	; 0x28
    da40:	mov	r0, r9
    da42:	bl	cee8 <_Bfree>
    da46:	movs	r2, #0
    da48:	ldr	r3, [sp, #16]
    da4a:	strb	r2, [r5, #0]
    da4c:	ldr	r2, [sp, #12]
    da4e:	adds	r3, #1
    da50:	str	r3, [r2, #0]
    da52:	ldr	r3, [sp, #148]	; 0x94
    da54:	cmp	r3, #0
    da56:	beq.w	e190 <_dtoa_r+0xae8>
    da5a:	ldr	r0, [sp, #36]	; 0x24
    da5c:	str	r5, [r3, #0]
    da5e:	add	sp, #108	; 0x6c
    da60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da64:	ldr	r2, [sp, #44]	; 0x2c
    da66:	cmp	r2, #0
    da68:	beq.w	dc88 <_dtoa_r+0x5e0>
    da6c:	ldr	r2, [sp, #0]
    da6e:	cmp	r2, #1
    da70:	ble.w	df22 <_dtoa_r+0x87a>
    da74:	ldr	r3, [sp, #32]
    da76:	ldr	r2, [sp, #24]
    da78:	subs	r7, r3, #1
    da7a:	cmp	r2, r7
    da7c:	blt.w	e196 <_dtoa_r+0xaee>
    da80:	subs	r7, r2, r7
    da82:	ldr	r3, [sp, #32]
    da84:	cmp	r3, #0
    da86:	blt.w	e38a <_dtoa_r+0xce2>
    da8a:	ldr	r5, [sp, #28]
    da8c:	ldr	r3, [sp, #32]
    da8e:	ldr	r2, [sp, #28]
    da90:	movs	r1, #1
    da92:	add	r2, r3
    da94:	mov	r0, r9
    da96:	str	r2, [sp, #28]
    da98:	add	r8, r3
    da9a:	bl	d018 <__i2b>
    da9e:	mov	r6, r0
    daa0:	cbz	r5, dabc <_dtoa_r+0x414>
    daa2:	cmp.w	r8, #0
    daa6:	ble.n	dabc <_dtoa_r+0x414>
    daa8:	cmp	r5, r8
    daaa:	ldr	r2, [sp, #28]
    daac:	mov	r3, r5
    daae:	it	ge
    dab0:	movge	r3, r8
    dab2:	subs	r2, r2, r3
    dab4:	str	r2, [sp, #28]
    dab6:	subs	r5, r5, r3
    dab8:	rsb	r8, r3, r8
    dabc:	ldr	r3, [sp, #24]
    dabe:	cmp	r3, #0
    dac0:	ble.w	e0ae <_dtoa_r+0xa06>
    dac4:	ldr	r2, [sp, #44]	; 0x2c
    dac6:	cmp	r2, #0
    dac8:	beq.w	ded0 <_dtoa_r+0x828>
    dacc:	cmp	r7, #0
    dace:	beq.w	ded0 <_dtoa_r+0x828>
    dad2:	mov	r1, r6
    dad4:	mov	r2, r7
    dad6:	mov	r0, r9
    dad8:	bl	d15c <__pow5mult>
    dadc:	ldr	r2, [sp, #40]	; 0x28
    dade:	mov	r1, r0
    dae0:	mov	r6, r0
    dae2:	mov	r0, r9
    dae4:	bl	d02c <__multiply>
    dae8:	ldr	r1, [sp, #40]	; 0x28
    daea:	mov	r4, r0
    daec:	mov	r0, r9
    daee:	bl	cee8 <_Bfree>
    daf2:	ldr	r3, [sp, #24]
    daf4:	subs	r3, r3, r7
    daf6:	str	r3, [sp, #24]
    daf8:	bne.w	dece <_dtoa_r+0x826>
    dafc:	movs	r1, #1
    dafe:	mov	r0, r9
    db00:	bl	d018 <__i2b>
    db04:	ldr	r3, [sp, #48]	; 0x30
    db06:	str	r0, [sp, #24]
    db08:	cmp	r3, #0
    db0a:	beq.w	df38 <_dtoa_r+0x890>
    db0e:	mov	r1, r0
    db10:	mov	r2, r3
    db12:	mov	r0, r9
    db14:	bl	d15c <__pow5mult>
    db18:	ldr	r3, [sp, #0]
    db1a:	str	r0, [sp, #24]
    db1c:	cmp	r3, #1
    db1e:	ble.w	e108 <_dtoa_r+0xa60>
    db22:	movs	r7, #0
    db24:	ldr	r2, [sp, #24]
    db26:	ldr	r3, [r2, #16]
    db28:	add.w	r3, r2, r3, lsl #2
    db2c:	ldr	r0, [r3, #16]
    db2e:	bl	cf7c <__hi0bits>
    db32:	rsb	r0, r0, #32
    db36:	add	r0, r8
    db38:	ands.w	r0, r0, #31
    db3c:	beq.w	df34 <_dtoa_r+0x88c>
    db40:	rsb	r3, r0, #32
    db44:	cmp	r3, #4
    db46:	ble.w	e4c4 <_dtoa_r+0xe1c>
    db4a:	rsb	r0, r0, #28
    db4e:	ldr	r3, [sp, #28]
    db50:	add	r3, r0
    db52:	str	r3, [sp, #28]
    db54:	add	r5, r0
    db56:	add	r8, r0
    db58:	ldr	r3, [sp, #28]
    db5a:	cmp	r3, #0
    db5c:	ble.n	db6a <_dtoa_r+0x4c2>
    db5e:	mov	r1, r4
    db60:	mov	r2, r3
    db62:	mov	r0, r9
    db64:	bl	d1fc <__lshift>
    db68:	mov	r4, r0
    db6a:	cmp.w	r8, #0
    db6e:	ble.n	db7c <_dtoa_r+0x4d4>
    db70:	mov	r2, r8
    db72:	ldr	r1, [sp, #24]
    db74:	mov	r0, r9
    db76:	bl	d1fc <__lshift>
    db7a:	str	r0, [sp, #24]
    db7c:	ldr	r3, [sp, #52]	; 0x34
    db7e:	cmp	r3, #0
    db80:	bne.w	e078 <_dtoa_r+0x9d0>
    db84:	ldr	r3, [sp, #32]
    db86:	cmp	r3, #0
    db88:	ble.w	e0b2 <_dtoa_r+0xa0a>
    db8c:	ldr	r3, [sp, #44]	; 0x2c
    db8e:	cmp	r3, #0
    db90:	bne.w	df7c <_dtoa_r+0x8d4>
    db94:	ldr.w	fp, [sp, #36]	; 0x24
    db98:	ldr	r7, [sp, #32]
    db9a:	ldr.w	r8, [sp, #24]
    db9e:	mov	r5, fp
    dba0:	b.n	dba8 <_dtoa_r+0x500>
    dba2:	bl	cefc <__multadd>
    dba6:	mov	r4, r0
    dba8:	mov	r1, r8
    dbaa:	mov	r0, r4
    dbac:	bl	d580 <quorem>
    dbb0:	add.w	sl, r0, #48	; 0x30
    dbb4:	strb.w	sl, [r5], #1
    dbb8:	rsb	r3, fp, r5
    dbbc:	cmp	r3, r7
    dbbe:	mov.w	r2, #10
    dbc2:	mov.w	r3, #0
    dbc6:	mov	r1, r4
    dbc8:	mov	r0, r9
    dbca:	blt.n	dba2 <_dtoa_r+0x4fa>
    dbcc:	ldr	r3, [sp, #36]	; 0x24
    dbce:	ldr	r2, [sp, #32]
    dbd0:	cmp	r2, #1
    dbd2:	ite	ge
    dbd4:	addge	r3, r3, r2
    dbd6:	addlt	r3, #1
    dbd8:	mov	r5, r3
    dbda:	mov.w	fp, #0
    dbde:	mov	r1, r4
    dbe0:	movs	r2, #1
    dbe2:	mov	r0, r9
    dbe4:	bl	d1fc <__lshift>
    dbe8:	ldr	r1, [sp, #24]
    dbea:	str	r0, [sp, #40]	; 0x28
    dbec:	bl	d2ac <__mcmp>
    dbf0:	cmp	r0, #0
    dbf2:	ble.w	e200 <_dtoa_r+0xb58>
    dbf6:	ldrb.w	r2, [r5, #-1]
    dbfa:	ldr	r1, [sp, #36]	; 0x24
    dbfc:	subs	r3, r5, #1
    dbfe:	b.n	dc0a <_dtoa_r+0x562>
    dc00:	cmp	r3, r1
    dc02:	beq.w	e0ee <_dtoa_r+0xa46>
    dc06:	ldrb.w	r2, [r3, #-1]!
    dc0a:	cmp	r2, #57	; 0x39
    dc0c:	add.w	r5, r3, #1
    dc10:	beq.n	dc00 <_dtoa_r+0x558>
    dc12:	adds	r2, #1
    dc14:	strb	r2, [r3, #0]
    dc16:	ldr	r1, [sp, #24]
    dc18:	mov	r0, r9
    dc1a:	bl	cee8 <_Bfree>
    dc1e:	cmp	r6, #0
    dc20:	beq.w	da3e <_dtoa_r+0x396>
    dc24:	cmp.w	fp, #0
    dc28:	beq.n	dc36 <_dtoa_r+0x58e>
    dc2a:	cmp	fp, r6
    dc2c:	beq.n	dc36 <_dtoa_r+0x58e>
    dc2e:	mov	r1, fp
    dc30:	mov	r0, r9
    dc32:	bl	cee8 <_Bfree>
    dc36:	mov	r1, r6
    dc38:	mov	r0, r9
    dc3a:	bl	cee8 <_Bfree>
    dc3e:	b.n	da3e <_dtoa_r+0x396>
    dc40:	movs	r3, #1
    dc42:	str	r3, [sp, #52]	; 0x34
    dc44:	b.n	d81e <_dtoa_r+0x176>
    dc46:	ldr.w	r8, [sp, #16]
    dc4a:	mov	r0, r8
    dc4c:	bl	b1c4 <__aeabi_i2d>
    dc50:	mov	r2, r0
    dc52:	mov	r3, r1
    dc54:	mov	r0, r6
    dc56:	mov	r1, r7
    dc58:	bl	b760 <__aeabi_dcmpeq>
    dc5c:	cmp	r0, #0
    dc5e:	bne.w	d7f6 <_dtoa_r+0x14e>
    dc62:	add.w	r3, r8, #4294967295
    dc66:	str	r3, [sp, #16]
    dc68:	b.n	d7f6 <_dtoa_r+0x14e>
    dc6a:	ldr	r2, [sp, #28]
    dc6c:	ldr	r3, [sp, #16]
    dc6e:	subs	r2, r2, r3
    dc70:	negs	r3, r3
    dc72:	str	r3, [sp, #24]
    dc74:	movs	r3, #0
    dc76:	str	r2, [sp, #28]
    dc78:	str	r3, [sp, #48]	; 0x30
    dc7a:	b.n	d83c <_dtoa_r+0x194>
    dc7c:	rsb	r3, r8, #0
    dc80:	str	r3, [sp, #28]
    dc82:	mov.w	r8, #0
    dc86:	b.n	d82c <_dtoa_r+0x184>
    dc88:	ldr	r7, [sp, #24]
    dc8a:	ldr	r5, [sp, #28]
    dc8c:	ldr	r6, [sp, #44]	; 0x2c
    dc8e:	b.n	daa0 <_dtoa_r+0x3f8>
    dc90:	rsb	r4, r3, #32
    dc94:	lsl.w	r0, sl, r4
    dc98:	b.n	d790 <_dtoa_r+0xe8>
    dc9a:	str	r0, [sp, #52]	; 0x34
    dc9c:	b.n	d81e <_dtoa_r+0x176>
    dc9e:	nop
    dca0:	.word	0x40240000
    dca4:	movs	r3, #0
    dca6:	str	r3, [sp, #44]	; 0x2c
    dca8:	ldr	r3, [sp, #16]
    dcaa:	ldr	r2, [sp, #20]
    dcac:	add	r3, r2
    dcae:	str	r3, [sp, #56]	; 0x38
    dcb0:	adds	r3, #1
    dcb2:	cmp	r3, #0
    dcb4:	str	r3, [sp, #32]
    dcb6:	ble.w	e1b4 <_dtoa_r+0xb0c>
    dcba:	ldr	r4, [sp, #32]
    dcbc:	mov	r5, r4
    dcbe:	movs	r1, #0
    dcc0:	cmp	r5, #23
    dcc2:	str.w	r1, [r9, #68]	; 0x44
    dcc6:	bls.n	dce0 <_dtoa_r+0x638>
    dcc8:	movs	r2, #1
    dcca:	movs	r3, #4
    dccc:	lsls	r3, r3, #1
    dcce:	add.w	r0, r3, #20
    dcd2:	cmp	r0, r5
    dcd4:	mov	r1, r2
    dcd6:	add.w	r2, r2, #1
    dcda:	bls.n	dccc <_dtoa_r+0x624>
    dcdc:	str.w	r1, [r9, #68]	; 0x44
    dce0:	mov	r0, r9
    dce2:	bl	ce9c <_Balloc>
    dce6:	cmp	r4, #14
    dce8:	str	r0, [sp, #36]	; 0x24
    dcea:	str.w	r0, [r9, #64]	; 0x40
    dcee:	bhi.w	d8bc <_dtoa_r+0x214>
    dcf2:	cmp	r6, #0
    dcf4:	beq.w	d8bc <_dtoa_r+0x214>
    dcf8:	ldr	r1, [sp, #16]
    dcfa:	cmp	r1, #0
    dcfc:	strd	sl, fp, [sp, #64]	; 0x40
    dd00:	ble.w	e238 <_dtoa_r+0xb90>
    dd04:	ldr	r3, [pc, #576]	; (df48 <_dtoa_r+0x8a0>)
    dd06:	and.w	r2, r1, #15
    dd0a:	asrs	r6, r1, #4
    dd0c:	add.w	r3, r3, r2, lsl #3
    dd10:	lsls	r0, r6, #27
    dd12:	ldrd	r4, r5, [r3]
    dd16:	bpl.w	e1a6 <_dtoa_r+0xafe>
    dd1a:	ldr	r3, [pc, #560]	; (df4c <_dtoa_r+0x8a4>)
    dd1c:	mov	r0, sl
    dd1e:	mov	r1, fp
    dd20:	ldrd	r2, r3, [r3, #32]
    dd24:	bl	b4e4 <__aeabi_ddiv>
    dd28:	strd	r0, r1, [sp, #72]	; 0x48
    dd2c:	and.w	r6, r6, #15
    dd30:	mov.w	sl, #3
    dd34:	cbz	r6, dd58 <_dtoa_r+0x6b0>
    dd36:	ldr	r7, [pc, #532]	; (df4c <_dtoa_r+0x8a4>)
    dd38:	lsls	r1, r6, #31
    dd3a:	bpl.n	dd50 <_dtoa_r+0x6a8>
    dd3c:	mov	r0, r4
    dd3e:	mov	r1, r5
    dd40:	ldrd	r2, r3, [r7]
    dd44:	bl	b290 <__aeabi_dmul>
    dd48:	add.w	sl, sl, #1
    dd4c:	mov	r4, r0
    dd4e:	mov	r5, r1
    dd50:	asrs	r6, r6, #1
    dd52:	add.w	r7, r7, #8
    dd56:	bne.n	dd38 <_dtoa_r+0x690>
    dd58:	mov	r2, r4
    dd5a:	mov	r3, r5
    dd5c:	ldrd	r0, r1, [sp, #72]	; 0x48
    dd60:	bl	b4e4 <__aeabi_ddiv>
    dd64:	mov	r6, r0
    dd66:	mov	r7, r1
    dd68:	ldr	r3, [sp, #52]	; 0x34
    dd6a:	cbz	r3, dd7e <_dtoa_r+0x6d6>
    dd6c:	movs	r2, #0
    dd6e:	ldr	r3, [pc, #480]	; (df50 <_dtoa_r+0x8a8>)
    dd70:	mov	r0, r6
    dd72:	mov	r1, r7
    dd74:	bl	b774 <__aeabi_dcmplt>
    dd78:	cmp	r0, #0
    dd7a:	bne.w	e3b2 <_dtoa_r+0xd0a>
    dd7e:	mov	r0, sl
    dd80:	bl	b1c4 <__aeabi_i2d>
    dd84:	mov	r2, r6
    dd86:	mov	r3, r7
    dd88:	bl	b290 <__aeabi_dmul>
    dd8c:	ldr	r3, [pc, #452]	; (df54 <_dtoa_r+0x8ac>)
    dd8e:	movs	r2, #0
    dd90:	bl	af2c <__adddf3>
    dd94:	ldr	r3, [sp, #32]
    dd96:	mov	r4, r0
    dd98:	sub.w	r5, r1, #54525952	; 0x3400000
    dd9c:	cmp	r3, #0
    dd9e:	beq.w	e158 <_dtoa_r+0xab0>
    dda2:	ldr	r3, [sp, #16]
    dda4:	str	r3, [sp, #88]	; 0x58
    dda6:	ldr	r3, [sp, #32]
    dda8:	str	r3, [sp, #72]	; 0x48
    ddaa:	ldr	r3, [sp, #44]	; 0x2c
    ddac:	cmp	r3, #0
    ddae:	beq.w	e2da <_dtoa_r+0xc32>
    ddb2:	ldr	r2, [sp, #72]	; 0x48
    ddb4:	ldr	r3, [pc, #400]	; (df48 <_dtoa_r+0x8a0>)
    ddb6:	ldr	r1, [pc, #416]	; (df58 <_dtoa_r+0x8b0>)
    ddb8:	add.w	r3, r3, r2, lsl #3
    ddbc:	ldrd	r2, r3, [r3, #-8]
    ddc0:	movs	r0, #0
    ddc2:	bl	b4e4 <__aeabi_ddiv>
    ddc6:	mov	r2, r4
    ddc8:	mov	r3, r5
    ddca:	bl	af28 <__aeabi_dsub>
    ddce:	mov	sl, r0
    ddd0:	mov	fp, r1
    ddd2:	mov	r0, r6
    ddd4:	mov	r1, r7
    ddd6:	bl	b7f0 <__aeabi_d2iz>
    ddda:	mov	r4, r0
    dddc:	bl	b1c4 <__aeabi_i2d>
    dde0:	mov	r2, r0
    dde2:	mov	r3, r1
    dde4:	mov	r0, r6
    dde6:	mov	r1, r7
    dde8:	bl	af28 <__aeabi_dsub>
    ddec:	adds	r4, #48	; 0x30
    ddee:	ldr	r5, [sp, #36]	; 0x24
    ddf0:	uxtb	r4, r4
    ddf2:	mov	r6, r0
    ddf4:	mov	r7, r1
    ddf6:	strb	r4, [r5, #0]
    ddf8:	mov	r2, r0
    ddfa:	mov	r3, r1
    ddfc:	mov	r0, sl
    ddfe:	mov	r1, fp
    de00:	adds	r5, #1
    de02:	bl	b7b0 <__aeabi_dcmpgt>
    de06:	cmp	r0, #0
    de08:	bne.n	deac <_dtoa_r+0x804>
    de0a:	mov	r2, r6
    de0c:	mov	r3, r7
    de0e:	movs	r0, #0
    de10:	ldr	r1, [pc, #316]	; (df50 <_dtoa_r+0x8a8>)
    de12:	bl	af28 <__aeabi_dsub>
    de16:	mov	r2, r0
    de18:	mov	r3, r1
    de1a:	mov	r0, sl
    de1c:	mov	r1, fp
    de1e:	bl	b7b0 <__aeabi_dcmpgt>
    de22:	cmp	r0, #0
    de24:	bne.w	e438 <_dtoa_r+0xd90>
    de28:	ldr	r2, [sp, #72]	; 0x48
    de2a:	cmp	r2, #1
    de2c:	ble.w	e21e <_dtoa_r+0xb76>
    de30:	ldr	r3, [sp, #72]	; 0x48
    de32:	ldr	r2, [sp, #36]	; 0x24
    de34:	str.w	r8, [sp, #72]	; 0x48
    de38:	add	r3, r2
    de3a:	mov	r8, r3
    de3c:	b.n	de5a <_dtoa_r+0x7b2>
    de3e:	movs	r0, #0
    de40:	ldr	r1, [pc, #268]	; (df50 <_dtoa_r+0x8a8>)
    de42:	bl	af28 <__aeabi_dsub>
    de46:	mov	r2, sl
    de48:	mov	r3, fp
    de4a:	bl	b774 <__aeabi_dcmplt>
    de4e:	cmp	r0, #0
    de50:	bne.w	e438 <_dtoa_r+0xd90>
    de54:	cmp	r5, r8
    de56:	beq.w	e21a <_dtoa_r+0xb72>
    de5a:	mov	r0, sl
    de5c:	mov	r1, fp
    de5e:	movs	r2, #0
    de60:	ldr	r3, [pc, #248]	; (df5c <_dtoa_r+0x8b4>)
    de62:	bl	b290 <__aeabi_dmul>
    de66:	movs	r2, #0
    de68:	ldr	r3, [pc, #240]	; (df5c <_dtoa_r+0x8b4>)
    de6a:	mov	sl, r0
    de6c:	mov	fp, r1
    de6e:	mov	r0, r6
    de70:	mov	r1, r7
    de72:	bl	b290 <__aeabi_dmul>
    de76:	mov	r7, r1
    de78:	mov	r6, r0
    de7a:	bl	b7f0 <__aeabi_d2iz>
    de7e:	mov	r4, r0
    de80:	bl	b1c4 <__aeabi_i2d>
    de84:	mov	r2, r0
    de86:	mov	r3, r1
    de88:	mov	r0, r6
    de8a:	mov	r1, r7
    de8c:	bl	af28 <__aeabi_dsub>
    de90:	adds	r4, #48	; 0x30
    de92:	uxtb	r4, r4
    de94:	mov	r2, sl
    de96:	mov	r3, fp
    de98:	strb.w	r4, [r5], #1
    de9c:	mov	r6, r0
    de9e:	mov	r7, r1
    dea0:	bl	b774 <__aeabi_dcmplt>
    dea4:	mov	r2, r6
    dea6:	mov	r3, r7
    dea8:	cmp	r0, #0
    deaa:	beq.n	de3e <_dtoa_r+0x796>
    deac:	ldr	r3, [sp, #88]	; 0x58
    deae:	str	r3, [sp, #16]
    deb0:	b.n	da3e <_dtoa_r+0x396>
    deb2:	movs	r3, #0
    deb4:	str	r3, [sp, #44]	; 0x2c
    deb6:	ldr	r3, [sp, #20]
    deb8:	cmp	r3, #0
    deba:	ble.w	e1be <_dtoa_r+0xb16>
    debe:	mov	r5, r3
    dec0:	mov	r4, r3
    dec2:	str	r3, [sp, #56]	; 0x38
    dec4:	str	r3, [sp, #32]
    dec6:	b.n	dcbe <_dtoa_r+0x616>
    dec8:	movs	r3, #1
    deca:	str	r3, [sp, #44]	; 0x2c
    decc:	b.n	deb6 <_dtoa_r+0x80e>
    dece:	str	r4, [sp, #40]	; 0x28
    ded0:	ldr	r2, [sp, #24]
    ded2:	ldr	r1, [sp, #40]	; 0x28
    ded4:	mov	r0, r9
    ded6:	bl	d15c <__pow5mult>
    deda:	mov	r4, r0
    dedc:	b.n	dafc <_dtoa_r+0x454>
    dede:	ldr	r3, [sp, #32]
    dee0:	cmp	r3, #0
    dee2:	bgt.w	d8e2 <_dtoa_r+0x23a>
    dee6:	bne.w	e188 <_dtoa_r+0xae0>
    deea:	movs	r2, #0
    deec:	ldr	r3, [pc, #112]	; (df60 <_dtoa_r+0x8b8>)
    deee:	ldrd	r0, r1, [sp]
    def2:	bl	b290 <__aeabi_dmul>
    def6:	mov	r3, fp
    def8:	mov	r2, sl
    defa:	bl	b79c <__aeabi_dcmpge>
    defe:	ldr	r3, [sp, #32]
    df00:	str	r3, [sp, #24]
    df02:	mov	r6, r3
    df04:	cmp	r0, #0
    df06:	beq.w	e0de <_dtoa_r+0xa36>
    df0a:	ldr	r3, [sp, #20]
    df0c:	ldr	r5, [sp, #36]	; 0x24
    df0e:	mvns	r3, r3
    df10:	str	r3, [sp, #16]
    df12:	ldr	r1, [sp, #24]
    df14:	mov	r0, r9
    df16:	bl	cee8 <_Bfree>
    df1a:	cmp	r6, #0
    df1c:	beq.w	da3e <_dtoa_r+0x396>
    df20:	b.n	dc36 <_dtoa_r+0x58e>
    df22:	ldr	r2, [sp, #60]	; 0x3c
    df24:	cmp	r2, #0
    df26:	beq.w	e39a <_dtoa_r+0xcf2>
    df2a:	addw	r3, r3, #1075	; 0x433
    df2e:	ldr	r7, [sp, #24]
    df30:	ldr	r5, [sp, #28]
    df32:	b.n	da8e <_dtoa_r+0x3e6>
    df34:	movs	r0, #28
    df36:	b.n	db4e <_dtoa_r+0x4a6>
    df38:	ldr	r3, [sp, #0]
    df3a:	cmp	r3, #1
    df3c:	ble.w	e440 <_dtoa_r+0xd98>
    df40:	ldr	r7, [sp, #48]	; 0x30
    df42:	movs	r0, #1
    df44:	b.n	db36 <_dtoa_r+0x48e>
    df46:	nop
    df48:	.word	0x00010420
    df4c:	.word	0x000104e8
    df50:	.word	0x3ff00000
    df54:	.word	0x401c0000
    df58:	.word	0x3fe00000
    df5c:	.word	0x40240000
    df60:	.word	0x40140000
    df64:	mov	r1, r6
    df66:	movs	r3, #0
    df68:	movs	r2, #10
    df6a:	mov	r0, r9
    df6c:	bl	cefc <__multadd>
    df70:	ldr	r3, [sp, #56]	; 0x38
    df72:	cmp	r3, #0
    df74:	mov	r6, r0
    df76:	ble.w	e494 <_dtoa_r+0xdec>
    df7a:	str	r3, [sp, #32]
    df7c:	cmp	r5, #0
    df7e:	ble.n	df8c <_dtoa_r+0x8e4>
    df80:	mov	r1, r6
    df82:	mov	r2, r5
    df84:	mov	r0, r9
    df86:	bl	d1fc <__lshift>
    df8a:	mov	r6, r0
    df8c:	cmp	r7, #0
    df8e:	bne.w	e28a <_dtoa_r+0xbe2>
    df92:	mov	r8, r6
    df94:	ldr	r3, [sp, #32]
    df96:	ldr	r2, [sp, #36]	; 0x24
    df98:	subs	r3, #1
    df9a:	adds	r3, r2, r3
    df9c:	str	r3, [sp, #32]
    df9e:	and.w	r3, sl, #1
    dfa2:	str	r3, [sp, #40]	; 0x28
    dfa4:	mov	r7, r2
    dfa6:	ldr.w	fp, [sp, #24]
    dfaa:	mov	r0, r4
    dfac:	mov	r1, fp
    dfae:	bl	d580 <quorem>
    dfb2:	mov	r1, r6
    dfb4:	mov	r5, r0
    dfb6:	mov	r0, r4
    dfb8:	bl	d2ac <__mcmp>
    dfbc:	mov	r2, r8
    dfbe:	mov	r1, fp
    dfc0:	mov	sl, r0
    dfc2:	mov	r0, r9
    dfc4:	bl	d2f0 <__mdiff>
    dfc8:	ldr	r2, [r0, #12]
    dfca:	mov	fp, r0
    dfcc:	add.w	r3, r5, #48	; 0x30
    dfd0:	cmp	r2, #0
    dfd2:	bne.n	e068 <_dtoa_r+0x9c0>
    dfd4:	mov	r1, r0
    dfd6:	mov	r0, r4
    dfd8:	str	r3, [sp, #28]
    dfda:	bl	d2ac <__mcmp>
    dfde:	mov	r1, fp
    dfe0:	str	r0, [sp, #20]
    dfe2:	mov	r0, r9
    dfe4:	bl	cee8 <_Bfree>
    dfe8:	ldr	r2, [sp, #20]
    dfea:	ldr	r3, [sp, #28]
    dfec:	cbnz	r2, dffa <_dtoa_r+0x952>
    dfee:	ldr	r1, [sp, #0]
    dff0:	cbnz	r1, dffa <_dtoa_r+0x952>
    dff2:	ldr	r1, [sp, #40]	; 0x28
    dff4:	cmp	r1, #0
    dff6:	beq.w	e464 <_dtoa_r+0xdbc>
    dffa:	cmp.w	sl, #0
    dffe:	blt.w	e1c8 <_dtoa_r+0xb20>
    e002:	bne.n	e010 <_dtoa_r+0x968>
    e004:	ldr	r1, [sp, #0]
    e006:	cbnz	r1, e010 <_dtoa_r+0x968>
    e008:	ldr	r1, [sp, #40]	; 0x28
    e00a:	cmp	r1, #0
    e00c:	beq.w	e1c8 <_dtoa_r+0xb20>
    e010:	cmp	r2, #0
    e012:	bgt.w	e2b2 <_dtoa_r+0xc0a>
    e016:	ldr	r2, [sp, #32]
    e018:	strb	r3, [r7, #0]
    e01a:	add.w	sl, r7, #1
    e01e:	cmp	r7, r2
    e020:	mov	r5, sl
    e022:	beq.w	e2ca <_dtoa_r+0xc22>
    e026:	mov	r1, r4
    e028:	movs	r3, #0
    e02a:	movs	r2, #10
    e02c:	mov	r0, r9
    e02e:	bl	cefc <__multadd>
    e032:	cmp	r6, r8
    e034:	mov	r4, r0
    e036:	mov	r1, r6
    e038:	mov.w	r3, #0
    e03c:	mov.w	r2, #10
    e040:	mov	r0, r9
    e042:	beq.n	e05c <_dtoa_r+0x9b4>
    e044:	bl	cefc <__multadd>
    e048:	mov	r1, r8
    e04a:	mov	r6, r0
    e04c:	movs	r3, #0
    e04e:	movs	r2, #10
    e050:	mov	r0, r9
    e052:	bl	cefc <__multadd>
    e056:	mov	r7, sl
    e058:	mov	r8, r0
    e05a:	b.n	dfa6 <_dtoa_r+0x8fe>
    e05c:	bl	cefc <__multadd>
    e060:	mov	r7, sl
    e062:	mov	r6, r0
    e064:	mov	r8, r0
    e066:	b.n	dfa6 <_dtoa_r+0x8fe>
    e068:	mov	r1, r0
    e06a:	mov	r0, r9
    e06c:	str	r3, [sp, #20]
    e06e:	bl	cee8 <_Bfree>
    e072:	movs	r2, #1
    e074:	ldr	r3, [sp, #20]
    e076:	b.n	dffa <_dtoa_r+0x952>
    e078:	ldr	r1, [sp, #24]
    e07a:	mov	r0, r4
    e07c:	bl	d2ac <__mcmp>
    e080:	cmp	r0, #0
    e082:	bge.w	db84 <_dtoa_r+0x4dc>
    e086:	mov	r1, r4
    e088:	ldr	r4, [sp, #16]
    e08a:	movs	r3, #0
    e08c:	subs	r4, #1
    e08e:	movs	r2, #10
    e090:	mov	r0, r9
    e092:	str	r4, [sp, #16]
    e094:	bl	cefc <__multadd>
    e098:	ldr	r3, [sp, #44]	; 0x2c
    e09a:	mov	r4, r0
    e09c:	cmp	r3, #0
    e09e:	bne.w	df64 <_dtoa_r+0x8bc>
    e0a2:	ldr	r3, [sp, #56]	; 0x38
    e0a4:	cmp	r3, #0
    e0a6:	ble.w	e484 <_dtoa_r+0xddc>
    e0aa:	str	r3, [sp, #32]
    e0ac:	b.n	db94 <_dtoa_r+0x4ec>
    e0ae:	ldr	r4, [sp, #40]	; 0x28
    e0b0:	b.n	dafc <_dtoa_r+0x454>
    e0b2:	ldr	r3, [sp, #0]
    e0b4:	cmp	r3, #2
    e0b6:	ble.w	db8c <_dtoa_r+0x4e4>
    e0ba:	ldr	r3, [sp, #32]
    e0bc:	cmp	r3, #0
    e0be:	bne.w	e3fc <_dtoa_r+0xd54>
    e0c2:	ldr	r1, [sp, #24]
    e0c4:	movs	r2, #5
    e0c6:	mov	r0, r9
    e0c8:	bl	cefc <__multadd>
    e0cc:	mov	r1, r0
    e0ce:	str	r0, [sp, #24]
    e0d0:	mov	r0, r4
    e0d2:	bl	d2ac <__mcmp>
    e0d6:	cmp	r0, #0
    e0d8:	str	r4, [sp, #40]	; 0x28
    e0da:	ble.w	df0a <_dtoa_r+0x862>
    e0de:	ldr	r2, [sp, #16]
    e0e0:	ldr	r1, [sp, #36]	; 0x24
    e0e2:	movs	r3, #49	; 0x31
    e0e4:	adds	r2, #1
    e0e6:	str	r2, [sp, #16]
    e0e8:	strb	r3, [r1, #0]
    e0ea:	adds	r5, r1, #1
    e0ec:	b.n	df12 <_dtoa_r+0x86a>
    e0ee:	ldr	r2, [sp, #16]
    e0f0:	adds	r2, #1
    e0f2:	str	r2, [sp, #16]
    e0f4:	ldr	r2, [sp, #36]	; 0x24
    e0f6:	movs	r3, #49	; 0x31
    e0f8:	strb	r3, [r2, #0]
    e0fa:	b.n	dc16 <_dtoa_r+0x56e>
    e0fc:	movs	r3, #1
    e0fe:	str	r3, [sp, #44]	; 0x2c
    e100:	b.n	dca8 <_dtoa_r+0x600>
    e102:	ldr.w	r9, [sp, #20]
    e106:	b.n	da3e <_dtoa_r+0x396>
    e108:	cmp.w	sl, #0
    e10c:	bne.w	db22 <_dtoa_r+0x47a>
    e110:	ubfx	r3, fp, #0, #20
    e114:	cmp	r3, #0
    e116:	bne.w	e396 <_dtoa_r+0xcee>
    e11a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e11e:	lsrs	r7, r7, #20
    e120:	lsls	r7, r7, #20
    e122:	cbz	r7, e130 <_dtoa_r+0xa88>
    e124:	ldr	r3, [sp, #28]
    e126:	adds	r3, #1
    e128:	str	r3, [sp, #28]
    e12a:	add.w	r8, r8, #1
    e12e:	movs	r7, #1
    e130:	ldr	r3, [sp, #48]	; 0x30
    e132:	movs	r0, #1
    e134:	cmp	r3, #0
    e136:	beq.w	db36 <_dtoa_r+0x48e>
    e13a:	b.n	db24 <_dtoa_r+0x47c>
    e13c:	mov	r0, sl
    e13e:	bl	b1c4 <__aeabi_i2d>
    e142:	mov	r2, r6
    e144:	mov	r3, r7
    e146:	bl	b290 <__aeabi_dmul>
    e14a:	movs	r2, #0
    e14c:	ldr	r3, [pc, #764]	; (e44c <_dtoa_r+0xda4>)
    e14e:	bl	af2c <__adddf3>
    e152:	mov	r4, r0
    e154:	sub.w	r5, r1, #54525952	; 0x3400000
    e158:	mov	r0, r6
    e15a:	mov	r1, r7
    e15c:	movs	r2, #0
    e15e:	ldr	r3, [pc, #752]	; (e450 <_dtoa_r+0xda8>)
    e160:	bl	af28 <__aeabi_dsub>
    e164:	mov	r2, r4
    e166:	mov	r3, r5
    e168:	mov	r6, r0
    e16a:	mov	r7, r1
    e16c:	bl	b7b0 <__aeabi_dcmpgt>
    e170:	cmp	r0, #0
    e172:	bne.w	e2d2 <_dtoa_r+0xc2a>
    e176:	mov	r2, r4
    e178:	add.w	r3, r5, #2147483648	; 0x80000000
    e17c:	mov	r0, r6
    e17e:	mov	r1, r7
    e180:	bl	b774 <__aeabi_dcmplt>
    e184:	cmp	r0, #0
    e186:	beq.n	e21e <_dtoa_r+0xb76>
    e188:	movs	r3, #0
    e18a:	str	r3, [sp, #24]
    e18c:	mov	r6, r3
    e18e:	b.n	df0a <_dtoa_r+0x862>
    e190:	ldr	r0, [sp, #36]	; 0x24
    e192:	b.w	d71a <_dtoa_r+0x72>
    e196:	ldr	r3, [sp, #24]
    e198:	ldr	r2, [sp, #48]	; 0x30
    e19a:	str	r7, [sp, #24]
    e19c:	subs	r3, r7, r3
    e19e:	add	r2, r3
    e1a0:	str	r2, [sp, #48]	; 0x30
    e1a2:	movs	r7, #0
    e1a4:	b.n	da82 <_dtoa_r+0x3da>
    e1a6:	vldr	d7, [sp, #64]	; 0x40
    e1aa:	mov.w	sl, #2
    e1ae:	vstr	d7, [sp, #72]	; 0x48
    e1b2:	b.n	dd34 <_dtoa_r+0x68c>
    e1b4:	mov	r4, r3
    e1b6:	movs	r1, #0
    e1b8:	str.w	r1, [r9, #68]	; 0x44
    e1bc:	b.n	dce0 <_dtoa_r+0x638>
    e1be:	movs	r4, #1
    e1c0:	str	r4, [sp, #56]	; 0x38
    e1c2:	str	r4, [sp, #32]
    e1c4:	str	r4, [sp, #20]
    e1c6:	b.n	e1b6 <_dtoa_r+0xb0e>
    e1c8:	cmp	r2, #0
    e1ca:	mov	sl, r3
    e1cc:	ble.n	e1f2 <_dtoa_r+0xb4a>
    e1ce:	mov	r1, r4
    e1d0:	movs	r2, #1
    e1d2:	mov	r0, r9
    e1d4:	bl	d1fc <__lshift>
    e1d8:	ldr	r1, [sp, #24]
    e1da:	mov	r4, r0
    e1dc:	bl	d2ac <__mcmp>
    e1e0:	cmp	r0, #0
    e1e2:	ble.w	e476 <_dtoa_r+0xdce>
    e1e6:	cmp.w	sl, #57	; 0x39
    e1ea:	beq.w	e400 <_dtoa_r+0xd58>
    e1ee:	add.w	sl, r5, #49	; 0x31
    e1f2:	mov	fp, r6
    e1f4:	strb.w	sl, [r7]
    e1f8:	adds	r5, r7, #1
    e1fa:	mov	r6, r8
    e1fc:	str	r4, [sp, #40]	; 0x28
    e1fe:	b.n	dc16 <_dtoa_r+0x56e>
    e200:	bne.n	e20c <_dtoa_r+0xb64>
    e202:	tst.w	sl, #1
    e206:	beq.n	e20c <_dtoa_r+0xb64>
    e208:	b.n	dbf6 <_dtoa_r+0x54e>
    e20a:	mov	r5, r2
    e20c:	ldrb.w	r3, [r5, #-1]
    e210:	cmp	r3, #48	; 0x30
    e212:	add.w	r2, r5, #4294967295
    e216:	beq.n	e20a <_dtoa_r+0xb62>
    e218:	b.n	dc16 <_dtoa_r+0x56e>
    e21a:	ldr.w	r8, [sp, #72]	; 0x48
    e21e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e222:	b.w	d8bc <_dtoa_r+0x214>
    e226:	ldr	r1, [sp, #36]	; 0x24
    e228:	movs	r2, #48	; 0x30
    e22a:	strb	r2, [r1, #0]
    e22c:	ldr	r2, [sp, #16]
    e22e:	ldrb.w	r4, [r5, #-1]
    e232:	adds	r2, #1
    e234:	str	r2, [sp, #16]
    e236:	b.n	da3a <_dtoa_r+0x392>
    e238:	ldr	r3, [sp, #16]
    e23a:	negs	r4, r3
    e23c:	cmp	r4, #0
    e23e:	beq.w	e3a8 <_dtoa_r+0xd00>
    e242:	ldr	r3, [pc, #528]	; (e454 <_dtoa_r+0xdac>)
    e244:	and.w	r2, r4, #15
    e248:	add.w	r3, r3, r2, lsl #3
    e24c:	ldrd	r2, r3, [r3]
    e250:	ldrd	r0, r1, [sp, #64]	; 0x40
    e254:	bl	b290 <__aeabi_dmul>
    e258:	asrs	r4, r4, #4
    e25a:	mov	r6, r0
    e25c:	mov	r7, r1
    e25e:	beq.w	e48e <_dtoa_r+0xde6>
    e262:	ldr	r5, [pc, #500]	; (e458 <_dtoa_r+0xdb0>)
    e264:	mov.w	sl, #2
    e268:	lsls	r2, r4, #31
    e26a:	bpl.n	e280 <_dtoa_r+0xbd8>
    e26c:	mov	r0, r6
    e26e:	mov	r1, r7
    e270:	ldrd	r2, r3, [r5]
    e274:	bl	b290 <__aeabi_dmul>
    e278:	add.w	sl, sl, #1
    e27c:	mov	r6, r0
    e27e:	mov	r7, r1
    e280:	asrs	r4, r4, #1
    e282:	add.w	r5, r5, #8
    e286:	bne.n	e268 <_dtoa_r+0xbc0>
    e288:	b.n	dd68 <_dtoa_r+0x6c0>
    e28a:	ldr	r1, [r6, #4]
    e28c:	mov	r0, r9
    e28e:	bl	ce9c <_Balloc>
    e292:	ldr	r3, [r6, #16]
    e294:	adds	r2, r3, #2
    e296:	mov	r5, r0
    e298:	lsls	r2, r2, #2
    e29a:	add.w	r1, r6, #12
    e29e:	adds	r0, #12
    e2a0:	bl	8df4 <memcpy>
    e2a4:	mov	r1, r5
    e2a6:	movs	r2, #1
    e2a8:	mov	r0, r9
    e2aa:	bl	d1fc <__lshift>
    e2ae:	mov	r8, r0
    e2b0:	b.n	df94 <_dtoa_r+0x8ec>
    e2b2:	cmp	r3, #57	; 0x39
    e2b4:	beq.w	e400 <_dtoa_r+0xd58>
    e2b8:	add.w	sl, r3, #1
    e2bc:	mov	fp, r6
    e2be:	strb.w	sl, [r7]
    e2c2:	adds	r5, r7, #1
    e2c4:	mov	r6, r8
    e2c6:	str	r4, [sp, #40]	; 0x28
    e2c8:	b.n	dc16 <_dtoa_r+0x56e>
    e2ca:	mov	fp, r6
    e2cc:	mov	sl, r3
    e2ce:	mov	r6, r8
    e2d0:	b.n	dbde <_dtoa_r+0x536>
    e2d2:	movs	r3, #0
    e2d4:	str	r3, [sp, #24]
    e2d6:	mov	r6, r3
    e2d8:	b.n	e0de <_dtoa_r+0xa36>
    e2da:	ldr	r3, [sp, #72]	; 0x48
    e2dc:	ldr	r1, [pc, #372]	; (e454 <_dtoa_r+0xdac>)
    e2de:	subs	r2, r3, #1
    e2e0:	add.w	r1, r1, r2, lsl #3
    e2e4:	mov	r3, r5
    e2e6:	str	r2, [sp, #92]	; 0x5c
    e2e8:	ldrd	r0, r1, [r1]
    e2ec:	mov	r2, r4
    e2ee:	bl	b290 <__aeabi_dmul>
    e2f2:	strd	r0, r1, [sp, #80]	; 0x50
    e2f6:	mov	r1, r7
    e2f8:	mov	r0, r6
    e2fa:	bl	b7f0 <__aeabi_d2iz>
    e2fe:	mov	r4, r0
    e300:	bl	b1c4 <__aeabi_i2d>
    e304:	mov	r3, r1
    e306:	mov	r2, r0
    e308:	mov	r1, r7
    e30a:	mov	r0, r6
    e30c:	bl	af28 <__aeabi_dsub>
    e310:	ldr	r3, [sp, #72]	; 0x48
    e312:	mov	r7, r1
    e314:	ldr	r1, [sp, #36]	; 0x24
    e316:	adds	r4, #48	; 0x30
    e318:	cmp	r3, #1
    e31a:	mov	r6, r0
    e31c:	strb	r4, [r1, #0]
    e31e:	add.w	r5, r1, #1
    e322:	beq.n	e366 <_dtoa_r+0xcbe>
    e324:	ldr	r3, [sp, #72]	; 0x48
    e326:	ldr	r2, [sp, #36]	; 0x24
    e328:	add	r3, r2
    e32a:	mov	sl, r3
    e32c:	mov	fp, r5
    e32e:	movs	r2, #0
    e330:	ldr	r3, [pc, #296]	; (e45c <_dtoa_r+0xdb4>)
    e332:	mov	r0, r6
    e334:	mov	r1, r7
    e336:	bl	b290 <__aeabi_dmul>
    e33a:	mov	r7, r1
    e33c:	mov	r6, r0
    e33e:	bl	b7f0 <__aeabi_d2iz>
    e342:	mov	r4, r0
    e344:	bl	b1c4 <__aeabi_i2d>
    e348:	adds	r4, #48	; 0x30
    e34a:	mov	r2, r0
    e34c:	mov	r3, r1
    e34e:	mov	r0, r6
    e350:	mov	r1, r7
    e352:	bl	af28 <__aeabi_dsub>
    e356:	strb.w	r4, [fp], #1
    e35a:	cmp	sl, fp
    e35c:	mov	r6, r0
    e35e:	mov	r7, r1
    e360:	bne.n	e32e <_dtoa_r+0xc86>
    e362:	ldr	r3, [sp, #92]	; 0x5c
    e364:	add	r5, r3
    e366:	movs	r2, #0
    e368:	ldr	r3, [pc, #244]	; (e460 <_dtoa_r+0xdb8>)
    e36a:	ldrd	r0, r1, [sp, #80]	; 0x50
    e36e:	bl	af2c <__adddf3>
    e372:	mov	r2, r6
    e374:	mov	r3, r7
    e376:	bl	b774 <__aeabi_dcmplt>
    e37a:	cmp	r0, #0
    e37c:	beq.n	e410 <_dtoa_r+0xd68>
    e37e:	ldr	r3, [sp, #88]	; 0x58
    e380:	str	r3, [sp, #16]
    e382:	ldrb.w	r4, [r5, #-1]
    e386:	b.w	da22 <_dtoa_r+0x37a>
    e38a:	ldr	r3, [sp, #28]
    e38c:	ldr	r2, [sp, #32]
    e38e:	subs	r5, r3, r2
    e390:	movs	r3, #0
    e392:	b.w	da8e <_dtoa_r+0x3e6>
    e396:	movs	r7, #0
    e398:	b.n	e130 <_dtoa_r+0xa88>
    e39a:	ldr	r3, [sp, #96]	; 0x60
    e39c:	ldr	r7, [sp, #24]
    e39e:	ldr	r5, [sp, #28]
    e3a0:	rsb	r3, r3, #54	; 0x36
    e3a4:	b.w	da8e <_dtoa_r+0x3e6>
    e3a8:	ldrd	r6, r7, [sp, #64]	; 0x40
    e3ac:	mov.w	sl, #2
    e3b0:	b.n	dd68 <_dtoa_r+0x6c0>
    e3b2:	ldr	r3, [sp, #32]
    e3b4:	cmp	r3, #0
    e3b6:	beq.w	e13c <_dtoa_r+0xa94>
    e3ba:	ldr	r3, [sp, #56]	; 0x38
    e3bc:	cmp	r3, #0
    e3be:	ble.w	e21e <_dtoa_r+0xb76>
    e3c2:	movs	r2, #0
    e3c4:	ldr	r3, [pc, #148]	; (e45c <_dtoa_r+0xdb4>)
    e3c6:	mov	r0, r6
    e3c8:	mov	r1, r7
    e3ca:	bl	b290 <__aeabi_dmul>
    e3ce:	mov	r6, r0
    e3d0:	mov	r7, r1
    e3d2:	add.w	r0, sl, #1
    e3d6:	bl	b1c4 <__aeabi_i2d>
    e3da:	mov	r2, r6
    e3dc:	mov	r3, r7
    e3de:	bl	b290 <__aeabi_dmul>
    e3e2:	movs	r2, #0
    e3e4:	ldr	r3, [pc, #100]	; (e44c <_dtoa_r+0xda4>)
    e3e6:	bl	af2c <__adddf3>
    e3ea:	ldr	r2, [sp, #16]
    e3ec:	ldr	r3, [sp, #56]	; 0x38
    e3ee:	str	r3, [sp, #72]	; 0x48
    e3f0:	subs	r2, #1
    e3f2:	mov	r4, r0
    e3f4:	sub.w	r5, r1, #54525952	; 0x3400000
    e3f8:	str	r2, [sp, #88]	; 0x58
    e3fa:	b.n	ddaa <_dtoa_r+0x702>
    e3fc:	str	r4, [sp, #40]	; 0x28
    e3fe:	b.n	df0a <_dtoa_r+0x862>
    e400:	movs	r2, #57	; 0x39
    e402:	mov	fp, r6
    e404:	str	r4, [sp, #40]	; 0x28
    e406:	mov	r6, r8
    e408:	strb	r2, [r7, #0]
    e40a:	adds	r5, r7, #1
    e40c:	b.w	dbfa <_dtoa_r+0x552>
    e410:	ldrd	r2, r3, [sp, #80]	; 0x50
    e414:	movs	r0, #0
    e416:	ldr	r1, [pc, #72]	; (e460 <_dtoa_r+0xdb8>)
    e418:	bl	af28 <__aeabi_dsub>
    e41c:	mov	r2, r6
    e41e:	mov	r3, r7
    e420:	bl	b7b0 <__aeabi_dcmpgt>
    e424:	cbnz	r0, e42a <_dtoa_r+0xd82>
    e426:	b.n	e21e <_dtoa_r+0xb76>
    e428:	mov	r5, r2
    e42a:	ldrb.w	r3, [r5, #-1]
    e42e:	cmp	r3, #48	; 0x30
    e430:	add.w	r2, r5, #4294967295
    e434:	beq.n	e428 <_dtoa_r+0xd80>
    e436:	b.n	deac <_dtoa_r+0x804>
    e438:	ldr	r3, [sp, #88]	; 0x58
    e43a:	str	r3, [sp, #16]
    e43c:	b.w	da22 <_dtoa_r+0x37a>
    e440:	cmp.w	sl, #0
    e444:	bne.w	df40 <_dtoa_r+0x898>
    e448:	b.n	e110 <_dtoa_r+0xa68>
    e44a:	nop
    e44c:	.word	0x401c0000
    e450:	.word	0x40140000
    e454:	.word	0x00010420
    e458:	.word	0x000104e8
    e45c:	.word	0x40240000
    e460:	.word	0x3fe00000
    e464:	cmp	r3, #57	; 0x39
    e466:	mov	fp, sl
    e468:	mov	sl, r3
    e46a:	beq.n	e400 <_dtoa_r+0xd58>
    e46c:	cmp.w	fp, #0
    e470:	bgt.w	e1ee <_dtoa_r+0xb46>
    e474:	b.n	e1f2 <_dtoa_r+0xb4a>
    e476:	bne.w	e1f2 <_dtoa_r+0xb4a>
    e47a:	tst.w	sl, #1
    e47e:	beq.w	e1f2 <_dtoa_r+0xb4a>
    e482:	b.n	e1e6 <_dtoa_r+0xb3e>
    e484:	ldr	r3, [sp, #0]
    e486:	cmp	r3, #2
    e488:	bgt.n	e4d6 <_dtoa_r+0xe2e>
    e48a:	ldr	r3, [sp, #56]	; 0x38
    e48c:	b.n	e0aa <_dtoa_r+0xa02>
    e48e:	mov.w	sl, #2
    e492:	b.n	dd68 <_dtoa_r+0x6c0>
    e494:	ldr	r3, [sp, #0]
    e496:	cmp	r3, #2
    e498:	bgt.n	e4d6 <_dtoa_r+0xe2e>
    e49a:	ldr	r3, [sp, #56]	; 0x38
    e49c:	b.n	df7a <_dtoa_r+0x8d2>
    e49e:	movs	r4, #0
    e4a0:	str.w	r4, [r9, #68]	; 0x44
    e4a4:	mov	r1, r4
    e4a6:	mov	r0, r9
    e4a8:	bl	ce9c <_Balloc>
    e4ac:	mov.w	r3, #4294967295
    e4b0:	str	r3, [sp, #32]
    e4b2:	str	r3, [sp, #56]	; 0x38
    e4b4:	movs	r3, #1
    e4b6:	str	r0, [sp, #36]	; 0x24
    e4b8:	str	r4, [sp, #20]
    e4ba:	str.w	r0, [r9, #64]	; 0x40
    e4be:	str	r3, [sp, #44]	; 0x2c
    e4c0:	b.w	d8bc <_dtoa_r+0x214>
    e4c4:	beq.w	db58 <_dtoa_r+0x4b0>
    e4c8:	rsb	r0, r0, #60	; 0x3c
    e4cc:	b.w	db4e <_dtoa_r+0x4a6>
    e4d0:	movs	r6, #1
    e4d2:	b.w	d84e <_dtoa_r+0x1a6>
    e4d6:	ldr	r3, [sp, #56]	; 0x38
    e4d8:	str	r3, [sp, #32]
    e4da:	b.n	e0ba <_dtoa_r+0xa12>
    e4dc:			; <UNDEFINED> instruction: 0xffffffff

0000e4e0 <_svfprintf_r>:
    e4e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4e4:	sub	sp, #260	; 0x104
    e4e6:	mov	r4, r1
    e4e8:	str	r1, [sp, #20]
    e4ea:	mov	r5, r2
    e4ec:	str	r3, [sp, #40]	; 0x28
    e4ee:	str	r0, [sp, #24]
    e4f0:	bl	ce80 <_localeconv_r>
    e4f4:	ldr	r3, [r0, #0]
    e4f6:	str	r3, [sp, #76]	; 0x4c
    e4f8:	mov	r0, r3
    e4fa:	bl	c900 <strlen>
    e4fe:	ldrh	r3, [r4, #12]
    e500:	str	r0, [sp, #72]	; 0x48
    e502:	lsls	r6, r3, #24
    e504:	bpl.n	e50e <_svfprintf_r+0x2e>
    e506:	ldr	r3, [r4, #16]
    e508:	cmp	r3, #0
    e50a:	beq.w	f770 <_svfprintf_r+0x1290>
    e50e:	vldr	d7, [pc, #664]	; e7a8 <_svfprintf_r+0x2c8>
    e512:	movs	r3, #0
    e514:	vstr	d7, [sp, #64]	; 0x40
    e518:	str	r3, [sp, #56]	; 0x38
    e51a:	str	r3, [sp, #148]	; 0x94
    e51c:	str	r3, [sp, #144]	; 0x90
    e51e:	str	r3, [sp, #84]	; 0x54
    e520:	str	r3, [sp, #28]
    e522:	ldr.w	sl, [pc, #656]	; e7b4 <_svfprintf_r+0x2d4>
    e526:	add	r3, sp, #192	; 0xc0
    e528:	str	r3, [sp, #140]	; 0x8c
    e52a:	mov	r9, r3
    e52c:	mov	r8, r5
    e52e:	ldrb.w	r3, [r8]
    e532:	mov	r4, r8
    e534:	cbz	r3, e572 <_svfprintf_r+0x92>
    e536:	cmp	r3, #37	; 0x25
    e538:	bne.n	e540 <_svfprintf_r+0x60>
    e53a:	b.n	e572 <_svfprintf_r+0x92>
    e53c:	cmp	r3, #37	; 0x25
    e53e:	beq.n	e548 <_svfprintf_r+0x68>
    e540:	ldrb.w	r3, [r4, #1]!
    e544:	cmp	r3, #0
    e546:	bne.n	e53c <_svfprintf_r+0x5c>
    e548:	rsb	r5, r8, r4
    e54c:	cbz	r5, e572 <_svfprintf_r+0x92>
    e54e:	ldr	r3, [sp, #144]	; 0x90
    e550:	ldr	r2, [sp, #148]	; 0x94
    e552:	str.w	r8, [r9]
    e556:	adds	r3, #1
    e558:	add	r2, r5
    e55a:	cmp	r3, #7
    e55c:	str.w	r5, [r9, #4]
    e560:	str	r2, [sp, #148]	; 0x94
    e562:	str	r3, [sp, #144]	; 0x90
    e564:	bgt.w	e6b4 <_svfprintf_r+0x1d4>
    e568:	add.w	r9, r9, #8
    e56c:	ldr	r3, [sp, #28]
    e56e:	add	r3, r5
    e570:	str	r3, [sp, #28]
    e572:	ldrb	r3, [r4, #0]
    e574:	cmp	r3, #0
    e576:	beq.w	e6c6 <_svfprintf_r+0x1e6>
    e57a:	movs	r3, #0
    e57c:	mov	r2, r3
    e57e:	strb.w	r3, [sp, #111]	; 0x6f
    e582:	mov	r1, r3
    e584:	str	r3, [sp, #32]
    e586:	str	r3, [sp, #12]
    e588:	mov.w	fp, #4294967295
    e58c:	ldrb	r3, [r4, #1]
    e58e:	add.w	r8, r4, #1
    e592:	mov	r5, fp
    e594:	add.w	r8, r8, #1
    e598:	sub.w	r0, r3, #32
    e59c:	cmp	r0, #88	; 0x58
    e59e:	bhi.w	ee0a <_svfprintf_r+0x92a>
    e5a2:	tbh	[pc, r0, lsl #1]
    e5a6:	.short	0x03a0
    e5a8:	.word	0x04320432
    e5ac:	.word	0x043203a8
    e5b0:	.word	0x04320432
    e5b4:	.word	0x04320432
    e5b8:	.word	0x03af0432
    e5bc:	.word	0x043203bd
    e5c0:	.word	0x00e2005d
    e5c4:	.word	0x01090432
    e5c8:	.word	0x01100110
    e5cc:	.word	0x01100110
    e5d0:	.word	0x01100110
    e5d4:	.word	0x01100110
    e5d8:	.word	0x04320110
    e5dc:	.word	0x04320432
    e5e0:	.word	0x04320432
    e5e4:	.word	0x04320432
    e5e8:	.word	0x04320432
    e5ec:	.word	0x01200432
    e5f0:	.word	0x04320286
    e5f4:	.word	0x04320286
    e5f8:	.word	0x04320432
    e5fc:	.word	0x02d40432
    e600:	.word	0x04320432
    e604:	.word	0x043202e5
    e608:	.word	0x04320432
    e60c:	.word	0x04320432
    e610:	.word	0x0432030f
    e614:	.word	0x033d0432
    e618:	.word	0x04320432
    e61c:	.word	0x04320432
    e620:	.word	0x04320432
    e624:	.word	0x04320432
    e628:	.word	0x04320432
    e62c:	.word	0x0391037e
    e630:	.word	0x02860286
    e634:	.word	0x03990286
    e638:	.word	0x04320391
    e63c:	.word	0x04070432
    e640:	.word	0x04120432
    e644:	.word	0x006400a3
    e648:	.word	0x043203c2
    e64c:	.word	0x043203c9
    e650:	.word	0x043203ea
    e654:	.word	0x03f20432
    e658:	ldr	r0, [sp, #32]
    e65a:	str	r3, [sp, #40]	; 0x28
    e65c:	negs	r0, r0
    e65e:	str	r0, [sp, #32]
    e660:	ldr	r3, [sp, #12]
    e662:	orr.w	r3, r3, #4
    e666:	str	r3, [sp, #12]
    e668:	ldrb.w	r3, [r8]
    e66c:	b.n	e594 <_svfprintf_r+0xb4>
    e66e:	ldr	r0, [sp, #40]	; 0x28
    e670:	mov	fp, r5
    e672:	movs	r1, #0
    e674:	ldr	r4, [r0, #0]
    e676:	strb.w	r1, [sp, #111]	; 0x6f
    e67a:	adds	r7, r0, #4
    e67c:	ldr	r0, [sp, #12]
    e67e:	movs	r3, #48	; 0x30
    e680:	movs	r2, #120	; 0x78
    e682:	cmp	fp, r1
    e684:	strb.w	r3, [sp, #112]	; 0x70
    e688:	mov.w	r5, #0
    e68c:	strb.w	r2, [sp, #113]	; 0x71
    e690:	orr.w	r3, r0, #2
    e694:	blt.w	ee44 <_svfprintf_r+0x964>
    e698:	bic.w	r3, r0, #128	; 0x80
    e69c:	orr.w	r3, r3, #2
    e6a0:	str	r3, [sp, #12]
    e6a2:	orrs.w	r3, r4, r5
    e6a6:	str	r7, [sp, #40]	; 0x28
    e6a8:	beq.w	edf0 <_svfprintf_r+0x910>
    e6ac:	mov	r7, r1
    e6ae:	str	r2, [sp, #52]	; 0x34
    e6b0:	ldr	r0, [pc, #252]	; (e7b0 <_svfprintf_r+0x2d0>)
    e6b2:	b.n	ec82 <_svfprintf_r+0x7a2>
    e6b4:	add	r2, sp, #140	; 0x8c
    e6b6:	ldr	r1, [sp, #20]
    e6b8:	ldr	r0, [sp, #24]
    e6ba:	bl	fbc4 <__ssprint_r>
    e6be:	cbnz	r0, e6d4 <_svfprintf_r+0x1f4>
    e6c0:	add.w	r9, sp, #192	; 0xc0
    e6c4:	b.n	e56c <_svfprintf_r+0x8c>
    e6c6:	ldr	r3, [sp, #148]	; 0x94
    e6c8:	cbz	r3, e6d4 <_svfprintf_r+0x1f4>
    e6ca:	ldr	r0, [sp, #24]
    e6cc:	ldr	r1, [sp, #20]
    e6ce:	add	r2, sp, #140	; 0x8c
    e6d0:	bl	fbc4 <__ssprint_r>
    e6d4:	ldr	r3, [sp, #20]
    e6d6:	ldrh	r3, [r3, #12]
    e6d8:	tst.w	r3, #64	; 0x40
    e6dc:	ldr	r3, [sp, #28]
    e6de:	it	ne
    e6e0:	movne.w	r3, #4294967295
    e6e4:	mov	r0, r3
    e6e6:	add	sp, #260	; 0x104
    e6e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6ec:	str	r3, [sp, #52]	; 0x34
    e6ee:	mov	fp, r5
    e6f0:	cmp	r2, #0
    e6f2:	bne.w	fb5c <_svfprintf_r+0x167c>
    e6f6:	ldr	r2, [sp, #12]
    e6f8:	ands.w	r3, r2, #32
    e6fc:	beq.w	eb8c <_svfprintf_r+0x6ac>
    e700:	ldr	r7, [sp, #40]	; 0x28
    e702:	adds	r7, #7
    e704:	bic.w	r3, r7, #7
    e708:	movs	r7, #0
    e70a:	add.w	r1, r3, #8
    e70e:	cmp	fp, r7
    e710:	str	r1, [sp, #40]	; 0x28
    e712:	ldrd	r4, r5, [r3]
    e716:	strb.w	r7, [sp, #111]	; 0x6f
    e71a:	blt.w	f5e2 <_svfprintf_r+0x1102>
    e71e:	bic.w	r3, r2, #128	; 0x80
    e722:	str	r3, [sp, #12]
    e724:	orrs.w	r3, r4, r5
    e728:	beq.w	ee34 <_svfprintf_r+0x954>
    e72c:	add	r6, sp, #192	; 0xc0
    e72e:	lsrs	r2, r4, #3
    e730:	orr.w	r2, r2, r5, lsl #29
    e734:	lsrs	r1, r5, #3
    e736:	and.w	r3, r4, #7
    e73a:	mov	r5, r1
    e73c:	mov	r4, r2
    e73e:	adds	r3, #48	; 0x30
    e740:	orrs.w	r2, r4, r5
    e744:	strb.w	r3, [r6, #-1]!
    e748:	bne.n	e72e <_svfprintf_r+0x24e>
    e74a:	ldr	r2, [sp, #12]
    e74c:	lsls	r1, r2, #31
    e74e:	bpl.w	e870 <_svfprintf_r+0x390>
    e752:	cmp	r3, #48	; 0x30
    e754:	beq.w	e870 <_svfprintf_r+0x390>
    e758:	movs	r2, #48	; 0x30
    e75a:	subs	r3, r6, #1
    e75c:	strb.w	r2, [r6, #-1]
    e760:	add	r2, sp, #192	; 0xc0
    e762:	subs	r2, r2, r3
    e764:	str	r2, [sp, #36]	; 0x24
    e766:	mov	r6, r3
    e768:	b.n	e876 <_svfprintf_r+0x396>
    e76a:	ldrb.w	r3, [r8]
    e76e:	cmp	r3, #42	; 0x2a
    e770:	add.w	r4, r8, #1
    e774:	beq.w	fb40 <_svfprintf_r+0x1660>
    e778:	sub.w	r0, r3, #48	; 0x30
    e77c:	cmp	r0, #9
    e77e:	it	ls
    e780:	movls	r5, #0
    e782:	bhi.w	fa92 <_svfprintf_r+0x15b2>
    e786:	ldrb.w	r3, [r4], #1
    e78a:	add.w	r5, r5, r5, lsl #2
    e78e:	add.w	r5, r0, r5, lsl #1
    e792:	sub.w	r0, r3, #48	; 0x30
    e796:	cmp	r0, #9
    e798:	bls.n	e786 <_svfprintf_r+0x2a6>
    e79a:	orr.w	r5, r5, r5, asr #31
    e79e:	mov	r8, r4
    e7a0:	b.n	e598 <_svfprintf_r+0xb8>
    e7a2:	nop
    e7a4:	nop.w
	...
    e7b0:	.word	0x00010564
    e7b4:	.word	0x00010530
    e7b8:	ldr	r3, [sp, #12]
    e7ba:	orr.w	r3, r3, #128	; 0x80
    e7be:	str	r3, [sp, #12]
    e7c0:	ldrb.w	r3, [r8]
    e7c4:	b.n	e594 <_svfprintf_r+0xb4>
    e7c6:	sub.w	r0, r3, #48	; 0x30
    e7ca:	movs	r3, #0
    e7cc:	mov	r4, r3
    e7ce:	ldrb.w	r3, [r8], #1
    e7d2:	add.w	r4, r4, r4, lsl #2
    e7d6:	add.w	r4, r0, r4, lsl #1
    e7da:	sub.w	r0, r3, #48	; 0x30
    e7de:	cmp	r0, #9
    e7e0:	bls.n	e7ce <_svfprintf_r+0x2ee>
    e7e2:	str	r4, [sp, #32]
    e7e4:	b.n	e598 <_svfprintf_r+0xb8>
    e7e6:	str	r3, [sp, #52]	; 0x34
    e7e8:	mov	fp, r5
    e7ea:	cmp	r2, #0
    e7ec:	bne.w	fb78 <_svfprintf_r+0x1698>
    e7f0:	ldr	r3, [sp, #12]
    e7f2:	orr.w	r3, r3, #16
    e7f6:	str	r3, [sp, #12]
    e7f8:	ldr	r3, [sp, #12]
    e7fa:	lsls	r4, r3, #26
    e7fc:	bpl.w	f26e <_svfprintf_r+0xd8e>
    e800:	ldr	r7, [sp, #40]	; 0x28
    e802:	adds	r7, #7
    e804:	bic.w	r7, r7, #7
    e808:	ldrd	r2, r3, [r7]
    e80c:	add.w	r1, r7, #8
    e810:	str	r1, [sp, #40]	; 0x28
    e812:	mov	r4, r2
    e814:	mov	r5, r3
    e816:	cmp	r2, #0
    e818:	sbcs.w	r3, r3, #0
    e81c:	blt.w	f2e4 <_svfprintf_r+0xe04>
    e820:	cmp.w	fp, #0
    e824:	ldrb.w	r7, [sp, #111]	; 0x6f
    e828:	blt.w	f2aa <_svfprintf_r+0xdca>
    e82c:	ldr	r3, [sp, #12]
    e82e:	bic.w	r3, r3, #128	; 0x80
    e832:	str	r3, [sp, #12]
    e834:	orrs.w	r3, r4, r5
    e838:	beq.w	ec0c <_svfprintf_r+0x72c>
    e83c:	cmp	r5, #0
    e83e:	it	eq
    e840:	cmpeq	r4, #10
    e842:	bcc.w	ec16 <_svfprintf_r+0x736>
    e846:	add	r6, sp, #192	; 0xc0
    e848:	mov	r0, r4
    e84a:	mov	r1, r5
    e84c:	movs	r2, #10
    e84e:	movs	r3, #0
    e850:	bl	b840 <__aeabi_uldivmod>
    e854:	adds	r2, #48	; 0x30
    e856:	strb.w	r2, [r6, #-1]!
    e85a:	mov	r0, r4
    e85c:	mov	r1, r5
    e85e:	movs	r3, #0
    e860:	movs	r2, #10
    e862:	bl	b840 <__aeabi_uldivmod>
    e866:	mov	r4, r0
    e868:	mov	r5, r1
    e86a:	orrs.w	r3, r4, r5
    e86e:	bne.n	e848 <_svfprintf_r+0x368>
    e870:	add	r3, sp, #192	; 0xc0
    e872:	subs	r3, r3, r6
    e874:	str	r3, [sp, #36]	; 0x24
    e876:	ldr	r3, [sp, #36]	; 0x24
    e878:	cmp	r3, fp
    e87a:	it	lt
    e87c:	movlt	r3, fp
    e87e:	str	r3, [sp, #16]
    e880:	movs	r3, #0
    e882:	str	r3, [sp, #60]	; 0x3c
    e884:	cbz	r7, e88c <_svfprintf_r+0x3ac>
    e886:	ldr	r3, [sp, #16]
    e888:	adds	r3, #1
    e88a:	str	r3, [sp, #16]
    e88c:	ldr	r3, [sp, #12]
    e88e:	ands.w	r3, r3, #2
    e892:	str	r3, [sp, #44]	; 0x2c
    e894:	beq.n	e89c <_svfprintf_r+0x3bc>
    e896:	ldr	r3, [sp, #16]
    e898:	adds	r3, #2
    e89a:	str	r3, [sp, #16]
    e89c:	ldr	r3, [sp, #12]
    e89e:	ands.w	r3, r3, #132	; 0x84
    e8a2:	str	r3, [sp, #48]	; 0x30
    e8a4:	bne.w	ee5e <_svfprintf_r+0x97e>
    e8a8:	ldr	r3, [sp, #32]
    e8aa:	ldr	r2, [sp, #16]
    e8ac:	subs	r5, r3, r2
    e8ae:	cmp	r5, #0
    e8b0:	ble.w	ee5e <_svfprintf_r+0x97e>
    e8b4:	cmp	r5, #16
    e8b6:	ldr	r1, [sp, #148]	; 0x94
    e8b8:	ldr	r2, [sp, #144]	; 0x90
    e8ba:	ldr	r7, [pc, #672]	; (eb5c <_svfprintf_r+0x67c>)
    e8bc:	ble.n	e90e <_svfprintf_r+0x42e>
    e8be:	str	r6, [sp, #80]	; 0x50
    e8c0:	mov	r0, r9
    e8c2:	movs	r4, #16
    e8c4:	mov	r9, r7
    e8c6:	ldr	r6, [sp, #20]
    e8c8:	mov	r7, r5
    e8ca:	ldr	r5, [sp, #24]
    e8cc:	b.n	e8d8 <_svfprintf_r+0x3f8>
    e8ce:	subs	r7, #16
    e8d0:	cmp	r7, #16
    e8d2:	add.w	r0, r0, #8
    e8d6:	ble.n	e906 <_svfprintf_r+0x426>
    e8d8:	adds	r2, #1
    e8da:	ldr	r3, [pc, #640]	; (eb5c <_svfprintf_r+0x67c>)
    e8dc:	str	r2, [sp, #144]	; 0x90
    e8de:	adds	r1, #16
    e8e0:	cmp	r2, #7
    e8e2:	str	r1, [sp, #148]	; 0x94
    e8e4:	stmia.w	r0, {r3, r4}
    e8e8:	ble.n	e8ce <_svfprintf_r+0x3ee>
    e8ea:	add	r2, sp, #140	; 0x8c
    e8ec:	mov	r1, r6
    e8ee:	mov	r0, r5
    e8f0:	bl	fbc4 <__ssprint_r>
    e8f4:	cmp	r0, #0
    e8f6:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    e8fa:	subs	r7, #16
    e8fc:	cmp	r7, #16
    e8fe:	ldr	r1, [sp, #148]	; 0x94
    e900:	ldr	r2, [sp, #144]	; 0x90
    e902:	add	r0, sp, #192	; 0xc0
    e904:	bgt.n	e8d8 <_svfprintf_r+0x3f8>
    e906:	ldr	r6, [sp, #80]	; 0x50
    e908:	mov	r5, r7
    e90a:	mov	r7, r9
    e90c:	mov	r9, r0
    e90e:	adds	r2, #1
    e910:	adds	r4, r5, r1
    e912:	cmp	r2, #7
    e914:	str	r4, [sp, #148]	; 0x94
    e916:	str	r2, [sp, #144]	; 0x90
    e918:	str.w	r7, [r9]
    e91c:	str.w	r5, [r9, #4]
    e920:	bgt.w	f17e <_svfprintf_r+0xc9e>
    e924:	ldrb.w	r7, [sp, #111]	; 0x6f
    e928:	add.w	r9, r9, #8
    e92c:	cbz	r7, e94c <_svfprintf_r+0x46c>
    e92e:	ldr	r3, [sp, #144]	; 0x90
    e930:	adds	r3, #1
    e932:	adds	r4, #1
    e934:	add.w	r1, sp, #111	; 0x6f
    e938:	movs	r2, #1
    e93a:	cmp	r3, #7
    e93c:	str	r4, [sp, #148]	; 0x94
    e93e:	str	r3, [sp, #144]	; 0x90
    e940:	stmia.w	r9, {r1, r2}
    e944:	bgt.w	f092 <_svfprintf_r+0xbb2>
    e948:	add.w	r9, r9, #8
    e94c:	ldr	r3, [sp, #44]	; 0x2c
    e94e:	cbz	r3, e96c <_svfprintf_r+0x48c>
    e950:	ldr	r3, [sp, #144]	; 0x90
    e952:	adds	r3, #1
    e954:	adds	r4, #2
    e956:	add	r1, sp, #112	; 0x70
    e958:	movs	r2, #2
    e95a:	cmp	r3, #7
    e95c:	str	r4, [sp, #148]	; 0x94
    e95e:	str	r3, [sp, #144]	; 0x90
    e960:	stmia.w	r9, {r1, r2}
    e964:	bgt.w	f0aa <_svfprintf_r+0xbca>
    e968:	add.w	r9, r9, #8
    e96c:	ldr	r3, [sp, #48]	; 0x30
    e96e:	cmp	r3, #128	; 0x80
    e970:	beq.w	ef36 <_svfprintf_r+0xa56>
    e974:	ldr	r3, [sp, #36]	; 0x24
    e976:	rsb	r7, r3, fp
    e97a:	cmp	r7, #0
    e97c:	ble.n	e9e6 <_svfprintf_r+0x506>
    e97e:	ldr	r2, [pc, #480]	; (eb60 <_svfprintf_r+0x680>)
    e980:	ldr	r3, [sp, #144]	; 0x90
    e982:	str	r2, [sp, #44]	; 0x2c
    e984:	cmp	r7, #16
    e986:	ble.n	e9ce <_svfprintf_r+0x4ee>
    e988:	mov	r2, r4
    e98a:	mov.w	fp, #16
    e98e:	ldr	r5, [sp, #24]
    e990:	ldr	r4, [sp, #20]
    e992:	b.n	e99e <_svfprintf_r+0x4be>
    e994:	subs	r7, #16
    e996:	cmp	r7, #16
    e998:	add.w	r9, r9, #8
    e99c:	ble.n	e9cc <_svfprintf_r+0x4ec>
    e99e:	adds	r3, #1
    e9a0:	adds	r2, #16
    e9a2:	cmp	r3, #7
    e9a4:	str	r2, [sp, #148]	; 0x94
    e9a6:	str	r3, [sp, #144]	; 0x90
    e9a8:	stmia.w	r9, {sl, fp}
    e9ac:	ble.n	e994 <_svfprintf_r+0x4b4>
    e9ae:	add	r2, sp, #140	; 0x8c
    e9b0:	mov	r1, r4
    e9b2:	mov	r0, r5
    e9b4:	bl	fbc4 <__ssprint_r>
    e9b8:	cmp	r0, #0
    e9ba:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    e9be:	subs	r7, #16
    e9c0:	cmp	r7, #16
    e9c2:	ldr	r2, [sp, #148]	; 0x94
    e9c4:	ldr	r3, [sp, #144]	; 0x90
    e9c6:	add.w	r9, sp, #192	; 0xc0
    e9ca:	bgt.n	e99e <_svfprintf_r+0x4be>
    e9cc:	mov	r4, r2
    e9ce:	adds	r3, #1
    e9d0:	ldr	r2, [sp, #44]	; 0x2c
    e9d2:	str	r3, [sp, #144]	; 0x90
    e9d4:	add	r4, r7
    e9d6:	cmp	r3, #7
    e9d8:	str	r4, [sp, #148]	; 0x94
    e9da:	stmia.w	r9, {r2, r7}
    e9de:	bgt.w	f07a <_svfprintf_r+0xb9a>
    e9e2:	add.w	r9, r9, #8
    e9e6:	ldr	r3, [sp, #12]
    e9e8:	lsls	r2, r3, #23
    e9ea:	bmi.w	ee62 <_svfprintf_r+0x982>
    e9ee:	ldr	r3, [sp, #144]	; 0x90
    e9f0:	ldr	r1, [sp, #36]	; 0x24
    e9f2:	str.w	r6, [r9]
    e9f6:	adds	r3, #1
    e9f8:	add	r4, r1
    e9fa:	cmp	r3, #7
    e9fc:	str	r4, [sp, #148]	; 0x94
    e9fe:	str.w	r1, [r9, #4]
    ea02:	str	r3, [sp, #144]	; 0x90
    ea04:	bgt.w	f04e <_svfprintf_r+0xb6e>
    ea08:	add.w	r9, r9, #8
    ea0c:	ldr	r3, [sp, #12]
    ea0e:	lsls	r1, r3, #29
    ea10:	bpl.n	ea92 <_svfprintf_r+0x5b2>
    ea12:	ldr	r3, [sp, #32]
    ea14:	ldr	r2, [sp, #16]
    ea16:	subs	r5, r3, r2
    ea18:	cmp	r5, #0
    ea1a:	ble.n	ea92 <_svfprintf_r+0x5b2>
    ea1c:	cmp	r5, #16
    ea1e:	ldr	r3, [sp, #144]	; 0x90
    ea20:	ldr	r7, [pc, #312]	; (eb5c <_svfprintf_r+0x67c>)
    ea22:	ble.n	ea6c <_svfprintf_r+0x58c>
    ea24:	mov	r2, r4
    ea26:	movs	r6, #16
    ea28:	ldr.w	fp, [sp, #24]
    ea2c:	ldr	r4, [sp, #20]
    ea2e:	b.n	ea3a <_svfprintf_r+0x55a>
    ea30:	subs	r5, #16
    ea32:	cmp	r5, #16
    ea34:	add.w	r9, r9, #8
    ea38:	ble.n	ea6a <_svfprintf_r+0x58a>
    ea3a:	adds	r3, #1
    ea3c:	ldr	r1, [pc, #284]	; (eb5c <_svfprintf_r+0x67c>)
    ea3e:	str	r3, [sp, #144]	; 0x90
    ea40:	adds	r2, #16
    ea42:	cmp	r3, #7
    ea44:	str	r2, [sp, #148]	; 0x94
    ea46:	stmia.w	r9, {r1, r6}
    ea4a:	ble.n	ea30 <_svfprintf_r+0x550>
    ea4c:	add	r2, sp, #140	; 0x8c
    ea4e:	mov	r1, r4
    ea50:	mov	r0, fp
    ea52:	bl	fbc4 <__ssprint_r>
    ea56:	cmp	r0, #0
    ea58:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    ea5c:	subs	r5, #16
    ea5e:	cmp	r5, #16
    ea60:	ldr	r2, [sp, #148]	; 0x94
    ea62:	ldr	r3, [sp, #144]	; 0x90
    ea64:	add.w	r9, sp, #192	; 0xc0
    ea68:	bgt.n	ea3a <_svfprintf_r+0x55a>
    ea6a:	mov	r4, r2
    ea6c:	adds	r3, #1
    ea6e:	add	r4, r5
    ea70:	cmp	r3, #7
    ea72:	str	r4, [sp, #148]	; 0x94
    ea74:	str	r3, [sp, #144]	; 0x90
    ea76:	str.w	r7, [r9]
    ea7a:	str.w	r5, [r9, #4]
    ea7e:	ble.n	ea92 <_svfprintf_r+0x5b2>
    ea80:	add	r2, sp, #140	; 0x8c
    ea82:	ldr	r1, [sp, #20]
    ea84:	ldr	r0, [sp, #24]
    ea86:	bl	fbc4 <__ssprint_r>
    ea8a:	cmp	r0, #0
    ea8c:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    ea90:	ldr	r4, [sp, #148]	; 0x94
    ea92:	ldr	r3, [sp, #28]
    ea94:	ldr	r2, [sp, #32]
    ea96:	ldr	r1, [sp, #16]
    ea98:	cmp	r2, r1
    ea9a:	ite	ge
    ea9c:	addge	r3, r3, r2
    ea9e:	addlt	r3, r3, r1
    eaa0:	str	r3, [sp, #28]
    eaa2:	cmp	r4, #0
    eaa4:	bne.w	f066 <_svfprintf_r+0xb86>
    eaa8:	movs	r3, #0
    eaaa:	str	r3, [sp, #144]	; 0x90
    eaac:	add.w	r9, sp, #192	; 0xc0
    eab0:	b.n	e52e <_svfprintf_r+0x4e>
    eab2:	str	r3, [sp, #52]	; 0x34
    eab4:	mov	fp, r5
    eab6:	cmp	r2, #0
    eab8:	bne.w	fb80 <_svfprintf_r+0x16a0>
    eabc:	ldr	r3, [sp, #12]
    eabe:	ldr	r7, [sp, #40]	; 0x28
    eac0:	lsls	r2, r3, #28
    eac2:	add.w	r7, r7, #7
    eac6:	bpl.w	f5b2 <_svfprintf_r+0x10d2>
    eaca:	bic.w	r3, r7, #7
    eace:	vldr	d7, [r3]
    ead2:	vstr	d7, [sp, #64]	; 0x40
    ead6:	add.w	r2, r3, #8
    eada:	str	r2, [sp, #40]	; 0x28
    eadc:	ldrd	r1, r2, [sp, #64]	; 0x40
    eae0:	bic.w	r3, r2, #2147483648	; 0x80000000
    eae4:	str	r1, [sp, #88]	; 0x58
    eae6:	str	r3, [sp, #92]	; 0x5c
    eae8:	ldrd	r4, r5, [sp, #88]	; 0x58
    eaec:	mov.w	r2, #4294967295
    eaf0:	mov	r0, r4
    eaf2:	mov	r1, r5
    eaf4:	ldr	r3, [pc, #108]	; (eb64 <_svfprintf_r+0x684>)
    eaf6:	bl	b7c4 <__aeabi_dcmpun>
    eafa:	cmp	r0, #0
    eafc:	bne.w	f4b4 <_svfprintf_r+0xfd4>
    eb00:	mov.w	r2, #4294967295
    eb04:	ldr	r3, [pc, #92]	; (eb64 <_svfprintf_r+0x684>)
    eb06:	mov	r0, r4
    eb08:	mov	r1, r5
    eb0a:	bl	b788 <__aeabi_dcmple>
    eb0e:	cmp	r0, #0
    eb10:	bne.w	f4b4 <_svfprintf_r+0xfd4>
    eb14:	movs	r2, #0
    eb16:	movs	r3, #0
    eb18:	ldrd	r0, r1, [sp, #64]	; 0x40
    eb1c:	bl	b774 <__aeabi_dcmplt>
    eb20:	cmp	r0, #0
    eb22:	bne.w	f9ca <_svfprintf_r+0x14ea>
    eb26:	ldrb.w	r7, [sp, #111]	; 0x6f
    eb2a:	ldr	r6, [pc, #60]	; (eb68 <_svfprintf_r+0x688>)
    eb2c:	ldr	r3, [pc, #60]	; (eb6c <_svfprintf_r+0x68c>)
    eb2e:	ldr	r1, [sp, #12]
    eb30:	bic.w	r1, r1, #128	; 0x80
    eb34:	str	r1, [sp, #12]
    eb36:	ldr	r1, [sp, #52]	; 0x34
    eb38:	movs	r2, #3
    eb3a:	mov.w	fp, #0
    eb3e:	str	r2, [sp, #16]
    eb40:	cmp	r1, #71	; 0x47
    eb42:	it	le
    eb44:	movle	r6, r3
    eb46:	str	r2, [sp, #36]	; 0x24
    eb48:	str.w	fp, [sp, #60]	; 0x3c
    eb4c:	b.n	e884 <_svfprintf_r+0x3a4>
    eb4e:	ldr	r3, [sp, #12]
    eb50:	orr.w	r3, r3, #8
    eb54:	str	r3, [sp, #12]
    eb56:	ldrb.w	r3, [r8]
    eb5a:	b.n	e594 <_svfprintf_r+0xb4>
    eb5c:	.word	0x00010580
    eb60:	.word	0x00010530
    eb64:	.word	0x7fefffff
    eb68:	.word	0x00010544
    eb6c:	.word	0x00010540
    eb70:	str	r3, [sp, #52]	; 0x34
    eb72:	mov	fp, r5
    eb74:	cmp	r2, #0
    eb76:	bne.w	fb98 <_svfprintf_r+0x16b8>
    eb7a:	ldr	r3, [sp, #12]
    eb7c:	orr.w	r3, r3, #16
    eb80:	str	r3, [sp, #12]
    eb82:	ldr	r2, [sp, #12]
    eb84:	ands.w	r3, r2, #32
    eb88:	bne.w	e700 <_svfprintf_r+0x220>
    eb8c:	ldr	r1, [sp, #12]
    eb8e:	ands.w	r2, r1, #16
    eb92:	beq.w	f44c <_svfprintf_r+0xf6c>
    eb96:	ldr	r0, [sp, #40]	; 0x28
    eb98:	strb.w	r3, [sp, #111]	; 0x6f
    eb9c:	cmp.w	fp, #0
    eba0:	ldr	r4, [r0, #0]
    eba2:	add.w	r7, r0, #4
    eba6:	mov.w	r5, #0
    ebaa:	blt.w	f5e0 <_svfprintf_r+0x1100>
    ebae:	mov	r2, r1
    ebb0:	bic.w	r2, r2, #128	; 0x80
    ebb4:	str	r2, [sp, #12]
    ebb6:	orrs.w	r2, r4, r5
    ebba:	str	r7, [sp, #40]	; 0x28
    ebbc:	beq.w	ee34 <_svfprintf_r+0x954>
    ebc0:	mov	r7, r3
    ebc2:	b.n	e72c <_svfprintf_r+0x24c>
    ebc4:	str	r3, [sp, #52]	; 0x34
    ebc6:	mov	fp, r5
    ebc8:	cmp	r2, #0
    ebca:	bne.w	fb90 <_svfprintf_r+0x16b0>
    ebce:	ldr	r3, [sp, #12]
    ebd0:	orr.w	r3, r3, #16
    ebd4:	str	r3, [sp, #12]
    ebd6:	ldr	r2, [sp, #12]
    ebd8:	ands.w	r3, r2, #32
    ebdc:	beq.w	f238 <_svfprintf_r+0xd58>
    ebe0:	ldr	r7, [sp, #40]	; 0x28
    ebe2:	adds	r7, #7
    ebe4:	bic.w	r3, r7, #7
    ebe8:	movs	r7, #0
    ebea:	add.w	r1, r3, #8
    ebee:	cmp	fp, r7
    ebf0:	str	r1, [sp, #40]	; 0x28
    ebf2:	ldrd	r4, r5, [r3]
    ebf6:	strb.w	r7, [sp, #111]	; 0x6f
    ebfa:	blt.w	f2aa <_svfprintf_r+0xdca>
    ebfe:	bic.w	r3, r2, #128	; 0x80
    ec02:	str	r3, [sp, #12]
    ec04:	orrs.w	r3, r4, r5
    ec08:	bne.w	e83c <_svfprintf_r+0x35c>
    ec0c:	cmp.w	fp, #0
    ec10:	beq.w	edfe <_svfprintf_r+0x91e>
    ec14:	movs	r4, #0
    ec16:	add	r6, sp, #256	; 0x100
    ec18:	adds	r4, #48	; 0x30
    ec1a:	strb.w	r4, [r6, #-65]!
    ec1e:	b.n	e870 <_svfprintf_r+0x390>
    ec20:	str	r3, [sp, #52]	; 0x34
    ec22:	mov	fp, r5
    ec24:	cmp	r2, #0
    ec26:	bne.w	fb88 <_svfprintf_r+0x16a8>
    ec2a:	ldr	r3, [sp, #12]
    ec2c:	ldr	r0, [pc, #700]	; (eeec <_svfprintf_r+0xa0c>)
    ec2e:	lsls	r5, r3, #26
    ec30:	bpl.w	ed9e <_svfprintf_r+0x8be>
    ec34:	ldr	r7, [sp, #40]	; 0x28
    ec36:	adds	r7, #7
    ec38:	bic.w	r3, r7, #7
    ec3c:	ldrd	r4, r5, [r3]
    ec40:	add.w	r2, r3, #8
    ec44:	str	r2, [sp, #40]	; 0x28
    ec46:	ldr	r2, [sp, #12]
    ec48:	ands.w	r7, r2, #1
    ec4c:	beq.w	f0c2 <_svfprintf_r+0xbe2>
    ec50:	orrs.w	r3, r4, r5
    ec54:	beq.w	f65c <_svfprintf_r+0x117c>
    ec58:	ldrb.w	r2, [sp, #52]	; 0x34
    ec5c:	strb.w	r2, [sp, #113]	; 0x71
    ec60:	movs	r7, #0
    ec62:	ldr	r2, [sp, #12]
    ec64:	strb.w	r7, [sp, #111]	; 0x6f
    ec68:	movs	r3, #48	; 0x30
    ec6a:	cmp	fp, r7
    ec6c:	strb.w	r3, [sp, #112]	; 0x70
    ec70:	orr.w	r3, r2, #2
    ec74:	blt.w	f9d4 <_svfprintf_r+0x14f4>
    ec78:	bic.w	r3, r2, #128	; 0x80
    ec7c:	orr.w	r3, r3, #2
    ec80:	str	r3, [sp, #12]
    ec82:	add	r6, sp, #192	; 0xc0
    ec84:	lsrs	r3, r4, #4
    ec86:	and.w	r1, r4, #15
    ec8a:	orr.w	r3, r3, r5, lsl #28
    ec8e:	lsrs	r2, r5, #4
    ec90:	mov	r4, r3
    ec92:	mov	r5, r2
    ec94:	ldrb	r3, [r0, r1]
    ec96:	strb.w	r3, [r6, #-1]!
    ec9a:	orrs.w	r3, r4, r5
    ec9e:	bne.n	ec84 <_svfprintf_r+0x7a4>
    eca0:	b.n	e870 <_svfprintf_r+0x390>
    eca2:	ldr	r1, [sp, #40]	; 0x28
    eca4:	str	r3, [sp, #52]	; 0x34
    eca6:	ldr	r2, [r1, #0]
    eca8:	strb.w	r2, [sp, #152]	; 0x98
    ecac:	movs	r3, #0
    ecae:	mov	r2, r1
    ecb0:	mov	r7, r3
    ecb2:	strb.w	r3, [sp, #111]	; 0x6f
    ecb6:	adds	r2, #4
    ecb8:	movs	r3, #1
    ecba:	str	r3, [sp, #16]
    ecbc:	mov	fp, r7
    ecbe:	str	r7, [sp, #60]	; 0x3c
    ecc0:	str	r2, [sp, #40]	; 0x28
    ecc2:	str	r3, [sp, #36]	; 0x24
    ecc4:	add	r6, sp, #152	; 0x98
    ecc6:	b.n	e88c <_svfprintf_r+0x3ac>
    ecc8:	str	r3, [sp, #52]	; 0x34
    ecca:	mov	fp, r5
    eccc:	cmp	r2, #0
    ecce:	beq.w	e7f8 <_svfprintf_r+0x318>
    ecd2:	strb.w	r1, [sp, #111]	; 0x6f
    ecd6:	b.n	e7f8 <_svfprintf_r+0x318>
    ecd8:	ldr	r3, [sp, #12]
    ecda:	orr.w	r3, r3, #64	; 0x40
    ecde:	str	r3, [sp, #12]
    ece0:	ldrb.w	r3, [r8]
    ece4:	b.n	e594 <_svfprintf_r+0xb4>
    ece6:	ldrb.w	r3, [r8]
    ecea:	cmp	r1, #0
    ecec:	bne.w	e594 <_svfprintf_r+0xb4>
    ecf0:	movs	r2, #1
    ecf2:	movs	r1, #32
    ecf4:	b.n	e594 <_svfprintf_r+0xb4>
    ecf6:	ldr	r3, [sp, #12]
    ecf8:	orr.w	r3, r3, #1
    ecfc:	str	r3, [sp, #12]
    ecfe:	ldrb.w	r3, [r8]
    ed02:	b.n	e594 <_svfprintf_r+0xb4>
    ed04:	ldr	r4, [sp, #40]	; 0x28
    ed06:	ldr	r3, [r4, #0]
    ed08:	str	r3, [sp, #32]
    ed0a:	mov	r0, r3
    ed0c:	cmp	r0, #0
    ed0e:	mov	r3, r4
    ed10:	add.w	r3, r3, #4
    ed14:	blt.w	e658 <_svfprintf_r+0x178>
    ed18:	str	r3, [sp, #40]	; 0x28
    ed1a:	ldrb.w	r3, [r8]
    ed1e:	b.n	e594 <_svfprintf_r+0xb4>
    ed20:	ldrb.w	r3, [r8]
    ed24:	movs	r2, #1
    ed26:	movs	r1, #43	; 0x2b
    ed28:	b.n	e594 <_svfprintf_r+0xb4>
    ed2a:	ldr	r3, [sp, #12]
    ed2c:	orr.w	r3, r3, #32
    ed30:	str	r3, [sp, #12]
    ed32:	ldrb.w	r3, [r8]
    ed36:	b.n	e594 <_svfprintf_r+0xb4>
    ed38:	ldr	r2, [sp, #40]	; 0x28
    ed3a:	str	r3, [sp, #52]	; 0x34
    ed3c:	ldr	r6, [r2, #0]
    ed3e:	movs	r4, #0
    ed40:	strb.w	r4, [sp, #111]	; 0x6f
    ed44:	adds	r7, r2, #4
    ed46:	cmp	r6, #0
    ed48:	beq.w	f984 <_svfprintf_r+0x14a4>
    ed4c:	cmp	r5, #0
    ed4e:	blt.w	f814 <_svfprintf_r+0x1334>
    ed52:	mov	r2, r5
    ed54:	mov	r1, r4
    ed56:	mov	r0, r6
    ed58:	bl	c180 <memchr>
    ed5c:	cmp	r0, #0
    ed5e:	beq.w	fa28 <_svfprintf_r+0x1548>
    ed62:	subs	r3, r0, r6
    ed64:	str	r3, [sp, #36]	; 0x24
    ed66:	mov	fp, r4
    ed68:	bic.w	r3, r3, r3, asr #31
    ed6c:	str	r7, [sp, #40]	; 0x28
    ed6e:	str	r3, [sp, #16]
    ed70:	str.w	fp, [sp, #60]	; 0x3c
    ed74:	ldrb.w	r7, [sp, #111]	; 0x6f
    ed78:	b.n	e884 <_svfprintf_r+0x3a4>
    ed7a:	str	r3, [sp, #52]	; 0x34
    ed7c:	mov	fp, r5
    ed7e:	cmp	r2, #0
    ed80:	beq.w	ebd6 <_svfprintf_r+0x6f6>
    ed84:	strb.w	r1, [sp, #111]	; 0x6f
    ed88:	b.n	ebd6 <_svfprintf_r+0x6f6>
    ed8a:	str	r3, [sp, #52]	; 0x34
    ed8c:	mov	fp, r5
    ed8e:	cmp	r2, #0
    ed90:	bne.w	fbb0 <_svfprintf_r+0x16d0>
    ed94:	ldr	r3, [sp, #12]
    ed96:	ldr	r0, [pc, #344]	; (eef0 <_svfprintf_r+0xa10>)
    ed98:	lsls	r5, r3, #26
    ed9a:	bmi.w	ec34 <_svfprintf_r+0x754>
    ed9e:	ldr	r3, [sp, #12]
    eda0:	lsls	r4, r3, #27
    eda2:	bpl.w	f622 <_svfprintf_r+0x1142>
    eda6:	ldr	r2, [sp, #40]	; 0x28
    eda8:	mov	r3, r2
    edaa:	adds	r3, #4
    edac:	ldr	r4, [r2, #0]
    edae:	str	r3, [sp, #40]	; 0x28
    edb0:	movs	r5, #0
    edb2:	b.n	ec46 <_svfprintf_r+0x766>
    edb4:	ldrb.w	r3, [r8]
    edb8:	cmp	r3, #108	; 0x6c
    edba:	beq.w	f742 <_svfprintf_r+0x1262>
    edbe:	ldr	r0, [sp, #12]
    edc0:	orr.w	r0, r0, #16
    edc4:	str	r0, [sp, #12]
    edc6:	b.w	e594 <_svfprintf_r+0xb4>
    edca:	cmp	r2, #0
    edcc:	bne.w	fba8 <_svfprintf_r+0x16c8>
    edd0:	ldr	r3, [sp, #12]
    edd2:	lsls	r3, r3, #26
    edd4:	bpl.w	f486 <_svfprintf_r+0xfa6>
    edd8:	ldr	r2, [sp, #40]	; 0x28
    edda:	ldr	r1, [sp, #28]
    eddc:	ldr	r3, [r2, #0]
    edde:	asrs	r5, r1, #31
    ede0:	mov	r0, r1
    ede2:	adds	r2, #4
    ede4:	mov	r1, r5
    ede6:	str	r2, [sp, #40]	; 0x28
    ede8:	strd	r0, r1, [r3]
    edec:	b.w	e52e <_svfprintf_r+0x4e>
    edf0:	ldr	r0, [pc, #252]	; (eef0 <_svfprintf_r+0xa10>)
    edf2:	str	r2, [sp, #52]	; 0x34
    edf4:	cmp.w	fp, #0
    edf8:	bne.w	f0e4 <_svfprintf_r+0xc04>
    edfc:	mov	r7, fp
    edfe:	mov.w	fp, #0
    ee02:	str.w	fp, [sp, #36]	; 0x24
    ee06:	add	r6, sp, #192	; 0xc0
    ee08:	b.n	e876 <_svfprintf_r+0x396>
    ee0a:	str	r3, [sp, #52]	; 0x34
    ee0c:	cmp	r2, #0
    ee0e:	bne.w	fba0 <_svfprintf_r+0x16c0>
    ee12:	ldr	r2, [sp, #52]	; 0x34
    ee14:	cmp	r2, #0
    ee16:	beq.w	e6c6 <_svfprintf_r+0x1e6>
    ee1a:	movs	r3, #0
    ee1c:	movs	r1, #1
    ee1e:	mov	r7, r3
    ee20:	str	r1, [sp, #16]
    ee22:	strb.w	r2, [sp, #152]	; 0x98
    ee26:	strb.w	r3, [sp, #111]	; 0x6f
    ee2a:	mov	fp, r3
    ee2c:	str	r3, [sp, #60]	; 0x3c
    ee2e:	str	r1, [sp, #36]	; 0x24
    ee30:	add	r6, sp, #152	; 0x98
    ee32:	b.n	e88c <_svfprintf_r+0x3ac>
    ee34:	cmp.w	fp, #0
    ee38:	beq.w	fa58 <_svfprintf_r+0x1578>
    ee3c:	movs	r7, #0
    ee3e:	movs	r4, #0
    ee40:	movs	r5, #0
    ee42:	b.n	e72c <_svfprintf_r+0x24c>
    ee44:	ldr	r0, [pc, #168]	; (eef0 <_svfprintf_r+0xa10>)
    ee46:	str	r3, [sp, #12]
    ee48:	str	r2, [sp, #52]	; 0x34
    ee4a:	orrs.w	r3, r4, r5
    ee4e:	str	r7, [sp, #40]	; 0x28
    ee50:	mov.w	r7, #0
    ee54:	bne.w	ec82 <_svfprintf_r+0x7a2>
    ee58:	movs	r4, #0
    ee5a:	movs	r5, #0
    ee5c:	b.n	ec82 <_svfprintf_r+0x7a2>
    ee5e:	ldr	r4, [sp, #148]	; 0x94
    ee60:	b.n	e92c <_svfprintf_r+0x44c>
    ee62:	ldr	r3, [sp, #52]	; 0x34
    ee64:	cmp	r3, #101	; 0x65
    ee66:	ble.w	efbe <_svfprintf_r+0xade>
    ee6a:	movs	r2, #0
    ee6c:	movs	r3, #0
    ee6e:	ldrd	r0, r1, [sp, #64]	; 0x40
    ee72:	bl	b760 <__aeabi_dcmpeq>
    ee76:	cmp	r0, #0
    ee78:	beq.w	f0e8 <_svfprintf_r+0xc08>
    ee7c:	ldr	r3, [sp, #144]	; 0x90
    ee7e:	ldr	r2, [pc, #116]	; (eef4 <_svfprintf_r+0xa14>)
    ee80:	str.w	r2, [r9]
    ee84:	adds	r3, #1
    ee86:	adds	r4, #1
    ee88:	movs	r2, #1
    ee8a:	cmp	r3, #7
    ee8c:	str	r4, [sp, #148]	; 0x94
    ee8e:	str	r3, [sp, #144]	; 0x90
    ee90:	str.w	r2, [r9, #4]
    ee94:	bgt.w	f674 <_svfprintf_r+0x1194>
    ee98:	add.w	r9, r9, #8
    ee9c:	ldr	r3, [sp, #116]	; 0x74
    ee9e:	ldr	r2, [sp, #56]	; 0x38
    eea0:	cmp	r3, r2
    eea2:	blt.n	eeac <_svfprintf_r+0x9cc>
    eea4:	ldr	r3, [sp, #12]
    eea6:	lsls	r3, r3, #31
    eea8:	bpl.w	ea0c <_svfprintf_r+0x52c>
    eeac:	ldr	r3, [sp, #144]	; 0x90
    eeae:	ldr	r1, [sp, #72]	; 0x48
    eeb0:	ldr	r2, [sp, #76]	; 0x4c
    eeb2:	str.w	r2, [r9]
    eeb6:	adds	r3, #1
    eeb8:	add	r4, r1
    eeba:	cmp	r3, #7
    eebc:	str	r4, [sp, #148]	; 0x94
    eebe:	str.w	r1, [r9, #4]
    eec2:	str	r3, [sp, #144]	; 0x90
    eec4:	bgt.w	f756 <_svfprintf_r+0x1276>
    eec8:	add.w	r9, r9, #8
    eecc:	ldr	r3, [sp, #56]	; 0x38
    eece:	subs	r5, r3, #1
    eed0:	cmp	r5, #0
    eed2:	ble.w	ea0c <_svfprintf_r+0x52c>
    eed6:	ldr	r2, [pc, #32]	; (eef8 <_svfprintf_r+0xa18>)
    eed8:	ldr	r3, [sp, #144]	; 0x90
    eeda:	str	r2, [sp, #44]	; 0x2c
    eedc:	cmp	r5, #16
    eede:	ble.w	f2b4 <_svfprintf_r+0xdd4>
    eee2:	movs	r6, #16
    eee4:	ldr	r7, [sp, #24]
    eee6:	ldr.w	fp, [sp, #20]
    eeea:	b.n	ef08 <_svfprintf_r+0xa28>
    eeec:	.word	0x00010550
    eef0:	.word	0x00010564
    eef4:	.word	0x0001052c
    eef8:	.word	0x00010530
    eefc:	add.w	r9, r9, #8
    ef00:	subs	r5, #16
    ef02:	cmp	r5, #16
    ef04:	ble.w	f2b4 <_svfprintf_r+0xdd4>
    ef08:	adds	r3, #1
    ef0a:	adds	r4, #16
    ef0c:	cmp	r3, #7
    ef0e:	str	r4, [sp, #148]	; 0x94
    ef10:	str	r3, [sp, #144]	; 0x90
    ef12:	str.w	sl, [r9]
    ef16:	str.w	r6, [r9, #4]
    ef1a:	ble.n	eefc <_svfprintf_r+0xa1c>
    ef1c:	add	r2, sp, #140	; 0x8c
    ef1e:	mov	r1, fp
    ef20:	mov	r0, r7
    ef22:	bl	fbc4 <__ssprint_r>
    ef26:	cmp	r0, #0
    ef28:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    ef2c:	ldr	r4, [sp, #148]	; 0x94
    ef2e:	ldr	r3, [sp, #144]	; 0x90
    ef30:	add.w	r9, sp, #192	; 0xc0
    ef34:	b.n	ef00 <_svfprintf_r+0xa20>
    ef36:	ldr	r3, [sp, #32]
    ef38:	ldr	r2, [sp, #16]
    ef3a:	subs	r7, r3, r2
    ef3c:	cmp	r7, #0
    ef3e:	ble.w	e974 <_svfprintf_r+0x494>
    ef42:	ldr	r2, [pc, #752]	; (f234 <_svfprintf_r+0xd54>)
    ef44:	ldr	r3, [sp, #144]	; 0x90
    ef46:	str	r2, [sp, #44]	; 0x2c
    ef48:	cmp	r7, #16
    ef4a:	ble.n	efa4 <_svfprintf_r+0xac4>
    ef4c:	mov	r2, r9
    ef4e:	mov	r1, r4
    ef50:	mov	r9, r7
    ef52:	movs	r5, #16
    ef54:	mov	r7, r6
    ef56:	ldr	r4, [sp, #24]
    ef58:	ldr	r6, [sp, #20]
    ef5a:	b.n	ef6a <_svfprintf_r+0xa8a>
    ef5c:	sub.w	r9, r9, #16
    ef60:	cmp.w	r9, #16
    ef64:	add.w	r2, r2, #8
    ef68:	ble.n	ef9c <_svfprintf_r+0xabc>
    ef6a:	adds	r3, #1
    ef6c:	adds	r1, #16
    ef6e:	cmp	r3, #7
    ef70:	str	r1, [sp, #148]	; 0x94
    ef72:	str	r3, [sp, #144]	; 0x90
    ef74:	str.w	sl, [r2]
    ef78:	str	r5, [r2, #4]
    ef7a:	ble.n	ef5c <_svfprintf_r+0xa7c>
    ef7c:	add	r2, sp, #140	; 0x8c
    ef7e:	mov	r1, r6
    ef80:	mov	r0, r4
    ef82:	bl	fbc4 <__ssprint_r>
    ef86:	cmp	r0, #0
    ef88:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    ef8c:	sub.w	r9, r9, #16
    ef90:	cmp.w	r9, #16
    ef94:	ldr	r1, [sp, #148]	; 0x94
    ef96:	ldr	r3, [sp, #144]	; 0x90
    ef98:	add	r2, sp, #192	; 0xc0
    ef9a:	bgt.n	ef6a <_svfprintf_r+0xa8a>
    ef9c:	mov	r6, r7
    ef9e:	mov	r4, r1
    efa0:	mov	r7, r9
    efa2:	mov	r9, r2
    efa4:	adds	r3, #1
    efa6:	ldr	r2, [sp, #44]	; 0x2c
    efa8:	str	r3, [sp, #144]	; 0x90
    efaa:	add	r4, r7
    efac:	cmp	r3, #7
    efae:	str	r4, [sp, #148]	; 0x94
    efb0:	stmia.w	r9, {r2, r7}
    efb4:	bgt.w	f432 <_svfprintf_r+0xf52>
    efb8:	add.w	r9, r9, #8
    efbc:	b.n	e974 <_svfprintf_r+0x494>
    efbe:	ldr	r3, [sp, #56]	; 0x38
    efc0:	ldr	r5, [sp, #144]	; 0x90
    efc2:	cmp	r3, #1
    efc4:	ble.w	f3dc <_svfprintf_r+0xefc>
    efc8:	adds	r5, #1
    efca:	adds	r4, #1
    efcc:	movs	r3, #1
    efce:	cmp	r5, #7
    efd0:	str	r4, [sp, #148]	; 0x94
    efd2:	str	r5, [sp, #144]	; 0x90
    efd4:	str.w	r6, [r9]
    efd8:	str.w	r3, [r9, #4]
    efdc:	bgt.w	f3fe <_svfprintf_r+0xf1e>
    efe0:	add.w	r9, r9, #8
    efe4:	ldr	r2, [sp, #72]	; 0x48
    efe6:	ldr	r3, [sp, #76]	; 0x4c
    efe8:	str.w	r3, [r9]
    efec:	adds	r5, #1
    efee:	add	r4, r2
    eff0:	cmp	r5, #7
    eff2:	str	r4, [sp, #148]	; 0x94
    eff4:	str	r5, [sp, #144]	; 0x90
    eff6:	str.w	r2, [r9, #4]
    effa:	bgt.w	f418 <_svfprintf_r+0xf38>
    effe:	add.w	r9, r9, #8
    f002:	movs	r3, #0
    f004:	movs	r2, #0
    f006:	ldrd	r0, r1, [sp, #64]	; 0x40
    f00a:	bl	b760 <__aeabi_dcmpeq>
    f00e:	ldr	r3, [sp, #56]	; 0x38
    f010:	cmp	r0, #0
    f012:	bne.w	f19c <_svfprintf_r+0xcbc>
    f016:	subs	r3, #1
    f018:	adds	r5, #1
    f01a:	adds	r6, #1
    f01c:	add	r4, r3
    f01e:	cmp	r5, #7
    f020:	str	r5, [sp, #144]	; 0x90
    f022:	str	r4, [sp, #148]	; 0x94
    f024:	str.w	r6, [r9]
    f028:	str.w	r3, [r9, #4]
    f02c:	bgt.w	f21a <_svfprintf_r+0xd3a>
    f030:	add.w	r9, r9, #8
    f034:	ldr	r2, [sp, #84]	; 0x54
    f036:	str.w	r2, [r9, #4]
    f03a:	adds	r5, #1
    f03c:	add	r4, r2
    f03e:	add	r3, sp, #124	; 0x7c
    f040:	cmp	r5, #7
    f042:	str	r4, [sp, #148]	; 0x94
    f044:	str	r5, [sp, #144]	; 0x90
    f046:	str.w	r3, [r9]
    f04a:	ble.w	ea08 <_svfprintf_r+0x528>
    f04e:	add	r2, sp, #140	; 0x8c
    f050:	ldr	r1, [sp, #20]
    f052:	ldr	r0, [sp, #24]
    f054:	bl	fbc4 <__ssprint_r>
    f058:	cmp	r0, #0
    f05a:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f05e:	ldr	r4, [sp, #148]	; 0x94
    f060:	add.w	r9, sp, #192	; 0xc0
    f064:	b.n	ea0c <_svfprintf_r+0x52c>
    f066:	add	r2, sp, #140	; 0x8c
    f068:	ldr	r1, [sp, #20]
    f06a:	ldr	r0, [sp, #24]
    f06c:	bl	fbc4 <__ssprint_r>
    f070:	cmp	r0, #0
    f072:	beq.w	eaa8 <_svfprintf_r+0x5c8>
    f076:	b.w	e6d4 <_svfprintf_r+0x1f4>
    f07a:	add	r2, sp, #140	; 0x8c
    f07c:	ldr	r1, [sp, #20]
    f07e:	ldr	r0, [sp, #24]
    f080:	bl	fbc4 <__ssprint_r>
    f084:	cmp	r0, #0
    f086:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f08a:	ldr	r4, [sp, #148]	; 0x94
    f08c:	add.w	r9, sp, #192	; 0xc0
    f090:	b.n	e9e6 <_svfprintf_r+0x506>
    f092:	add	r2, sp, #140	; 0x8c
    f094:	ldr	r1, [sp, #20]
    f096:	ldr	r0, [sp, #24]
    f098:	bl	fbc4 <__ssprint_r>
    f09c:	cmp	r0, #0
    f09e:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f0a2:	ldr	r4, [sp, #148]	; 0x94
    f0a4:	add.w	r9, sp, #192	; 0xc0
    f0a8:	b.n	e94c <_svfprintf_r+0x46c>
    f0aa:	add	r2, sp, #140	; 0x8c
    f0ac:	ldr	r1, [sp, #20]
    f0ae:	ldr	r0, [sp, #24]
    f0b0:	bl	fbc4 <__ssprint_r>
    f0b4:	cmp	r0, #0
    f0b6:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f0ba:	ldr	r4, [sp, #148]	; 0x94
    f0bc:	add.w	r9, sp, #192	; 0xc0
    f0c0:	b.n	e96c <_svfprintf_r+0x48c>
    f0c2:	cmp.w	fp, #0
    f0c6:	strb.w	r7, [sp, #111]	; 0x6f
    f0ca:	blt.w	f68c <_svfprintf_r+0x11ac>
    f0ce:	bic.w	r3, r2, #128	; 0x80
    f0d2:	str	r3, [sp, #12]
    f0d4:	orrs.w	r3, r4, r5
    f0d8:	bne.w	ec82 <_svfprintf_r+0x7a2>
    f0dc:	cmp.w	fp, #0
    f0e0:	beq.w	edfc <_svfprintf_r+0x91c>
    f0e4:	movs	r7, #0
    f0e6:	b.n	ee58 <_svfprintf_r+0x978>
    f0e8:	ldr	r5, [sp, #116]	; 0x74
    f0ea:	cmp	r5, #0
    f0ec:	ble.w	f692 <_svfprintf_r+0x11b2>
    f0f0:	ldr	r3, [sp, #60]	; 0x3c
    f0f2:	ldr	r2, [sp, #56]	; 0x38
    f0f4:	cmp	r3, r2
    f0f6:	it	ge
    f0f8:	movge	r3, r2
    f0fa:	cmp	r3, #0
    f0fc:	mov	r5, r3
    f0fe:	ble.n	f11c <_svfprintf_r+0xc3c>
    f100:	ldr	r3, [sp, #144]	; 0x90
    f102:	str.w	r6, [r9]
    f106:	adds	r3, #1
    f108:	add	r4, r5
    f10a:	cmp	r3, #7
    f10c:	str	r4, [sp, #148]	; 0x94
    f10e:	str.w	r5, [r9, #4]
    f112:	str	r3, [sp, #144]	; 0x90
    f114:	bgt.w	f86a <_svfprintf_r+0x138a>
    f118:	add.w	r9, r9, #8
    f11c:	ldr	r3, [sp, #60]	; 0x3c
    f11e:	cmp	r5, #0
    f120:	it	ge
    f122:	subge	r3, r3, r5
    f124:	cmp	r3, #0
    f126:	mov	r5, r3
    f128:	ble.w	f31c <_svfprintf_r+0xe3c>
    f12c:	ldr	r2, [pc, #260]	; (f234 <_svfprintf_r+0xd54>)
    f12e:	ldr	r3, [sp, #144]	; 0x90
    f130:	str	r2, [sp, #44]	; 0x2c
    f132:	cmp	r5, #16
    f134:	ble.w	f63e <_svfprintf_r+0x115e>
    f138:	mov	r2, r4
    f13a:	movs	r7, #16
    f13c:	ldr.w	fp, [sp, #24]
    f140:	ldr	r4, [sp, #20]
    f142:	b.n	f150 <_svfprintf_r+0xc70>
    f144:	add.w	r9, r9, #8
    f148:	subs	r5, #16
    f14a:	cmp	r5, #16
    f14c:	ble.w	f63c <_svfprintf_r+0x115c>
    f150:	adds	r3, #1
    f152:	adds	r2, #16
    f154:	cmp	r3, #7
    f156:	str	r2, [sp, #148]	; 0x94
    f158:	str	r3, [sp, #144]	; 0x90
    f15a:	str.w	sl, [r9]
    f15e:	str.w	r7, [r9, #4]
    f162:	ble.n	f144 <_svfprintf_r+0xc64>
    f164:	add	r2, sp, #140	; 0x8c
    f166:	mov	r1, r4
    f168:	mov	r0, fp
    f16a:	bl	fbc4 <__ssprint_r>
    f16e:	cmp	r0, #0
    f170:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f174:	ldr	r2, [sp, #148]	; 0x94
    f176:	ldr	r3, [sp, #144]	; 0x90
    f178:	add.w	r9, sp, #192	; 0xc0
    f17c:	b.n	f148 <_svfprintf_r+0xc68>
    f17e:	add	r2, sp, #140	; 0x8c
    f180:	ldr	r1, [sp, #20]
    f182:	ldr	r0, [sp, #24]
    f184:	bl	fbc4 <__ssprint_r>
    f188:	cmp	r0, #0
    f18a:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f18e:	ldrb.w	r7, [sp, #111]	; 0x6f
    f192:	ldr	r4, [sp, #148]	; 0x94
    f194:	add.w	r9, sp, #192	; 0xc0
    f198:	b.w	e92c <_svfprintf_r+0x44c>
    f19c:	subs	r6, r3, #1
    f19e:	cmp	r6, #0
    f1a0:	ble.w	f034 <_svfprintf_r+0xb54>
    f1a4:	ldr	r3, [pc, #140]	; (f234 <_svfprintf_r+0xd54>)
    f1a6:	str	r3, [sp, #44]	; 0x2c
    f1a8:	cmp	r6, #16
    f1aa:	ble.n	f206 <_svfprintf_r+0xd26>
    f1ac:	str.w	r8, [sp, #36]	; 0x24
    f1b0:	movs	r7, #16
    f1b2:	mov	r8, r6
    f1b4:	ldr.w	fp, [sp, #24]
    f1b8:	ldr	r6, [sp, #20]
    f1ba:	b.n	f1ca <_svfprintf_r+0xcea>
    f1bc:	sub.w	r8, r8, #16
    f1c0:	cmp.w	r8, #16
    f1c4:	add.w	r9, r9, #8
    f1c8:	ble.n	f200 <_svfprintf_r+0xd20>
    f1ca:	adds	r5, #1
    f1cc:	adds	r4, #16
    f1ce:	cmp	r5, #7
    f1d0:	str	r4, [sp, #148]	; 0x94
    f1d2:	str	r5, [sp, #144]	; 0x90
    f1d4:	str.w	sl, [r9]
    f1d8:	str.w	r7, [r9, #4]
    f1dc:	ble.n	f1bc <_svfprintf_r+0xcdc>
    f1de:	add	r2, sp, #140	; 0x8c
    f1e0:	mov	r1, r6
    f1e2:	mov	r0, fp
    f1e4:	bl	fbc4 <__ssprint_r>
    f1e8:	cmp	r0, #0
    f1ea:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f1ee:	sub.w	r8, r8, #16
    f1f2:	cmp.w	r8, #16
    f1f6:	ldr	r4, [sp, #148]	; 0x94
    f1f8:	ldr	r5, [sp, #144]	; 0x90
    f1fa:	add.w	r9, sp, #192	; 0xc0
    f1fe:	bgt.n	f1ca <_svfprintf_r+0xcea>
    f200:	mov	r6, r8
    f202:	ldr.w	r8, [sp, #36]	; 0x24
    f206:	ldr	r3, [sp, #44]	; 0x2c
    f208:	adds	r5, #1
    f20a:	add	r4, r6
    f20c:	cmp	r5, #7
    f20e:	str	r4, [sp, #148]	; 0x94
    f210:	str	r5, [sp, #144]	; 0x90
    f212:	stmia.w	r9, {r3, r6}
    f216:	ble.w	f030 <_svfprintf_r+0xb50>
    f21a:	add	r2, sp, #140	; 0x8c
    f21c:	ldr	r1, [sp, #20]
    f21e:	ldr	r0, [sp, #24]
    f220:	bl	fbc4 <__ssprint_r>
    f224:	cmp	r0, #0
    f226:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f22a:	ldr	r4, [sp, #148]	; 0x94
    f22c:	ldr	r5, [sp, #144]	; 0x90
    f22e:	add.w	r9, sp, #192	; 0xc0
    f232:	b.n	f034 <_svfprintf_r+0xb54>
    f234:	.word	0x00010530
    f238:	ldr	r1, [sp, #12]
    f23a:	ands.w	r2, r1, #16
    f23e:	beq.w	f5e8 <_svfprintf_r+0x1108>
    f242:	ldr	r0, [sp, #40]	; 0x28
    f244:	strb.w	r3, [sp, #111]	; 0x6f
    f248:	cmp.w	fp, #0
    f24c:	ldr	r4, [r0, #0]
    f24e:	add.w	r7, r0, #4
    f252:	mov.w	r5, #0
    f256:	blt.n	f2a6 <_svfprintf_r+0xdc6>
    f258:	mov	r2, r1
    f25a:	bic.w	r2, r2, #128	; 0x80
    f25e:	str	r2, [sp, #12]
    f260:	orrs.w	r2, r4, r5
    f264:	str	r7, [sp, #40]	; 0x28
    f266:	mov	r7, r3
    f268:	bne.w	e83c <_svfprintf_r+0x35c>
    f26c:	b.n	ec0c <_svfprintf_r+0x72c>
    f26e:	ldr	r3, [sp, #12]
    f270:	lsls	r0, r3, #27
    f272:	bmi.n	f2ca <_svfprintf_r+0xdea>
    f274:	ldr	r3, [sp, #12]
    f276:	lsls	r1, r3, #25
    f278:	bpl.n	f2ca <_svfprintf_r+0xdea>
    f27a:	ldr	r1, [sp, #40]	; 0x28
    f27c:	ldrsh.w	r4, [r1]
    f280:	adds	r1, #4
    f282:	asrs	r5, r4, #31
    f284:	mov	r2, r4
    f286:	mov	r3, r5
    f288:	str	r1, [sp, #40]	; 0x28
    f28a:	b.w	e816 <_svfprintf_r+0x336>
    f28e:	ldr	r1, [sp, #40]	; 0x28
    f290:	strb.w	r3, [sp, #111]	; 0x6f
    f294:	cmp.w	fp, #0
    f298:	ldr	r4, [r1, #0]
    f29a:	add.w	r7, r1, #4
    f29e:	mov.w	r5, #0
    f2a2:	bge.w	f73e <_svfprintf_r+0x125e>
    f2a6:	str	r7, [sp, #40]	; 0x28
    f2a8:	mov	r7, r3
    f2aa:	orrs.w	r3, r4, r5
    f2ae:	bne.w	e83c <_svfprintf_r+0x35c>
    f2b2:	b.n	ec16 <_svfprintf_r+0x736>
    f2b4:	adds	r3, #1
    f2b6:	ldr	r2, [sp, #44]	; 0x2c
    f2b8:	str	r3, [sp, #144]	; 0x90
    f2ba:	add	r4, r5
    f2bc:	cmp	r3, #7
    f2be:	str	r4, [sp, #148]	; 0x94
    f2c0:	stmia.w	r9, {r2, r5}
    f2c4:	ble.w	ea08 <_svfprintf_r+0x528>
    f2c8:	b.n	f04e <_svfprintf_r+0xb6e>
    f2ca:	ldr	r2, [sp, #40]	; 0x28
    f2cc:	ldr	r4, [r2, #0]
    f2ce:	mov	r3, r2
    f2d0:	adds	r3, #4
    f2d2:	asrs	r5, r4, #31
    f2d4:	mov	r2, r4
    f2d6:	str	r3, [sp, #40]	; 0x28
    f2d8:	cmp	r2, #0
    f2da:	mov	r3, r5
    f2dc:	sbcs.w	r3, r3, #0
    f2e0:	bge.w	e820 <_svfprintf_r+0x340>
    f2e4:	negs	r4, r4
    f2e6:	mov.w	r7, #45	; 0x2d
    f2ea:	sbc.w	r5, r5, r5, lsl #1
    f2ee:	cmp.w	fp, #0
    f2f2:	strb.w	r7, [sp, #111]	; 0x6f
    f2f6:	blt.w	e83c <_svfprintf_r+0x35c>
    f2fa:	ldr	r3, [sp, #12]
    f2fc:	bic.w	r3, r3, #128	; 0x80
    f300:	str	r3, [sp, #12]
    f302:	b.w	e83c <_svfprintf_r+0x35c>
    f306:	add	r2, sp, #140	; 0x8c
    f308:	ldr	r1, [sp, #20]
    f30a:	ldr	r0, [sp, #24]
    f30c:	bl	fbc4 <__ssprint_r>
    f310:	cmp	r0, #0
    f312:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f316:	ldr	r4, [sp, #148]	; 0x94
    f318:	add.w	r9, sp, #192	; 0xc0
    f31c:	ldr	r2, [sp, #60]	; 0x3c
    f31e:	ldr	r3, [sp, #116]	; 0x74
    f320:	add	r2, r6
    f322:	mov	r7, r2
    f324:	ldr	r2, [sp, #56]	; 0x38
    f326:	cmp	r3, r2
    f328:	blt.n	f3ba <_svfprintf_r+0xeda>
    f32a:	ldr	r2, [sp, #12]
    f32c:	lsls	r5, r2, #31
    f32e:	bmi.n	f3ba <_svfprintf_r+0xeda>
    f330:	ldr	r1, [sp, #56]	; 0x38
    f332:	add	r6, r1
    f334:	subs	r5, r6, r7
    f336:	subs	r3, r1, r3
    f338:	cmp	r5, r3
    f33a:	it	ge
    f33c:	movge	r5, r3
    f33e:	cmp	r5, #0
    f340:	mov	r6, r5
    f342:	ble.n	f360 <_svfprintf_r+0xe80>
    f344:	ldr	r2, [sp, #144]	; 0x90
    f346:	str.w	r7, [r9]
    f34a:	adds	r2, #1
    f34c:	add	r4, r5
    f34e:	cmp	r2, #7
    f350:	str	r4, [sp, #148]	; 0x94
    f352:	str.w	r5, [r9, #4]
    f356:	str	r2, [sp, #144]	; 0x90
    f358:	bgt.w	f958 <_svfprintf_r+0x1478>
    f35c:	add.w	r9, r9, #8
    f360:	cmp	r6, #0
    f362:	ite	ge
    f364:	subge	r5, r3, r6
    f366:	movlt	r5, r3
    f368:	cmp	r5, #0
    f36a:	ble.w	ea0c <_svfprintf_r+0x52c>
    f36e:	ldr	r2, [pc, #744]	; (f658 <_svfprintf_r+0x1178>)
    f370:	ldr	r3, [sp, #144]	; 0x90
    f372:	str	r2, [sp, #44]	; 0x2c
    f374:	cmp	r5, #16
    f376:	ble.n	f2b4 <_svfprintf_r+0xdd4>
    f378:	movs	r6, #16
    f37a:	ldr	r7, [sp, #24]
    f37c:	ldr.w	fp, [sp, #20]
    f380:	b.n	f38c <_svfprintf_r+0xeac>
    f382:	add.w	r9, r9, #8
    f386:	subs	r5, #16
    f388:	cmp	r5, #16
    f38a:	ble.n	f2b4 <_svfprintf_r+0xdd4>
    f38c:	adds	r3, #1
    f38e:	adds	r4, #16
    f390:	cmp	r3, #7
    f392:	str	r4, [sp, #148]	; 0x94
    f394:	str	r3, [sp, #144]	; 0x90
    f396:	str.w	sl, [r9]
    f39a:	str.w	r6, [r9, #4]
    f39e:	ble.n	f382 <_svfprintf_r+0xea2>
    f3a0:	add	r2, sp, #140	; 0x8c
    f3a2:	mov	r1, fp
    f3a4:	mov	r0, r7
    f3a6:	bl	fbc4 <__ssprint_r>
    f3aa:	cmp	r0, #0
    f3ac:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f3b0:	ldr	r4, [sp, #148]	; 0x94
    f3b2:	ldr	r3, [sp, #144]	; 0x90
    f3b4:	add.w	r9, sp, #192	; 0xc0
    f3b8:	b.n	f386 <_svfprintf_r+0xea6>
    f3ba:	ldr	r2, [sp, #144]	; 0x90
    f3bc:	ldr	r0, [sp, #72]	; 0x48
    f3be:	ldr	r1, [sp, #76]	; 0x4c
    f3c0:	str.w	r1, [r9]
    f3c4:	adds	r2, #1
    f3c6:	add	r4, r0
    f3c8:	cmp	r2, #7
    f3ca:	str	r4, [sp, #148]	; 0x94
    f3cc:	str.w	r0, [r9, #4]
    f3d0:	str	r2, [sp, #144]	; 0x90
    f3d2:	bgt.w	f93e <_svfprintf_r+0x145e>
    f3d6:	add.w	r9, r9, #8
    f3da:	b.n	f330 <_svfprintf_r+0xe50>
    f3dc:	ldr	r3, [sp, #12]
    f3de:	lsls	r0, r3, #31
    f3e0:	bmi.w	efc8 <_svfprintf_r+0xae8>
    f3e4:	adds	r5, #1
    f3e6:	adds	r4, #1
    f3e8:	movs	r3, #1
    f3ea:	cmp	r5, #7
    f3ec:	str	r4, [sp, #148]	; 0x94
    f3ee:	str	r5, [sp, #144]	; 0x90
    f3f0:	str.w	r6, [r9]
    f3f4:	str.w	r3, [r9, #4]
    f3f8:	ble.w	f030 <_svfprintf_r+0xb50>
    f3fc:	b.n	f21a <_svfprintf_r+0xd3a>
    f3fe:	add	r2, sp, #140	; 0x8c
    f400:	ldr	r1, [sp, #20]
    f402:	ldr	r0, [sp, #24]
    f404:	bl	fbc4 <__ssprint_r>
    f408:	cmp	r0, #0
    f40a:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f40e:	ldr	r4, [sp, #148]	; 0x94
    f410:	ldr	r5, [sp, #144]	; 0x90
    f412:	add.w	r9, sp, #192	; 0xc0
    f416:	b.n	efe4 <_svfprintf_r+0xb04>
    f418:	add	r2, sp, #140	; 0x8c
    f41a:	ldr	r1, [sp, #20]
    f41c:	ldr	r0, [sp, #24]
    f41e:	bl	fbc4 <__ssprint_r>
    f422:	cmp	r0, #0
    f424:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f428:	ldr	r4, [sp, #148]	; 0x94
    f42a:	ldr	r5, [sp, #144]	; 0x90
    f42c:	add.w	r9, sp, #192	; 0xc0
    f430:	b.n	f002 <_svfprintf_r+0xb22>
    f432:	add	r2, sp, #140	; 0x8c
    f434:	ldr	r1, [sp, #20]
    f436:	ldr	r0, [sp, #24]
    f438:	bl	fbc4 <__ssprint_r>
    f43c:	cmp	r0, #0
    f43e:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f442:	ldr	r4, [sp, #148]	; 0x94
    f444:	add.w	r9, sp, #192	; 0xc0
    f448:	b.w	e974 <_svfprintf_r+0x494>
    f44c:	ldr	r1, [sp, #12]
    f44e:	ands.w	r3, r1, #64	; 0x40
    f452:	beq.w	f5c8 <_svfprintf_r+0x10e8>
    f456:	ldr	r0, [sp, #40]	; 0x28
    f458:	strb.w	r2, [sp, #111]	; 0x6f
    f45c:	mov	r3, r0
    f45e:	cmp.w	fp, #0
    f462:	add.w	r3, r3, #4
    f466:	ldrh	r4, [r0, #0]
    f468:	mov.w	r5, #0
    f46c:	blt.w	f7f0 <_svfprintf_r+0x1310>
    f470:	bic.w	r1, r1, #128	; 0x80
    f474:	str	r1, [sp, #12]
    f476:	orrs.w	r1, r4, r5
    f47a:	str	r3, [sp, #40]	; 0x28
    f47c:	beq.w	ee34 <_svfprintf_r+0x954>
    f480:	mov	r7, r2
    f482:	b.w	e72c <_svfprintf_r+0x24c>
    f486:	ldr	r3, [sp, #12]
    f488:	lsls	r7, r3, #27
    f48a:	bmi.n	f4a4 <_svfprintf_r+0xfc4>
    f48c:	ldr	r3, [sp, #12]
    f48e:	lsls	r6, r3, #25
    f490:	bpl.n	f4a4 <_svfprintf_r+0xfc4>
    f492:	ldr	r2, [sp, #40]	; 0x28
    f494:	ldr	r3, [r2, #0]
    f496:	adds	r2, #4
    f498:	str	r2, [sp, #40]	; 0x28
    f49a:	ldrh.w	r2, [sp, #28]
    f49e:	strh	r2, [r3, #0]
    f4a0:	b.w	e52e <_svfprintf_r+0x4e>
    f4a4:	ldr	r2, [sp, #40]	; 0x28
    f4a6:	ldr	r3, [r2, #0]
    f4a8:	adds	r2, #4
    f4aa:	str	r2, [sp, #40]	; 0x28
    f4ac:	ldr	r2, [sp, #28]
    f4ae:	str	r2, [r3, #0]
    f4b0:	b.w	e52e <_svfprintf_r+0x4e>
    f4b4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f4b8:	mov	r2, r0
    f4ba:	mov	r3, r1
    f4bc:	bl	b7c4 <__aeabi_dcmpun>
    f4c0:	cmp	r0, #0
    f4c2:	bne.w	fac0 <_svfprintf_r+0x15e0>
    f4c6:	ldr	r3, [sp, #52]	; 0x34
    f4c8:	cmp.w	fp, #4294967295
    f4cc:	bic.w	r7, r3, #32
    f4d0:	beq.w	f9a2 <_svfprintf_r+0x14c2>
    f4d4:	cmp	r7, #71	; 0x47
    f4d6:	beq.w	f7de <_svfprintf_r+0x12fe>
    f4da:	ldr	r3, [sp, #68]	; 0x44
    f4dc:	ldr	r2, [sp, #12]
    f4de:	cmp	r3, #0
    f4e0:	orr.w	r2, r2, #256	; 0x100
    f4e4:	str	r2, [sp, #44]	; 0x2c
    f4e6:	blt.w	f9da <_svfprintf_r+0x14fa>
    f4ea:	vldr	d7, [sp, #64]	; 0x40
    f4ee:	vstr	d7, [sp, #96]	; 0x60
    f4f2:	movs	r3, #0
    f4f4:	str	r3, [sp, #16]
    f4f6:	ldr	r3, [sp, #52]	; 0x34
    f4f8:	cmp	r3, #102	; 0x66
    f4fa:	beq.w	f9a8 <_svfprintf_r+0x14c8>
    f4fe:	cmp	r3, #70	; 0x46
    f500:	beq.w	f78e <_svfprintf_r+0x12ae>
    f504:	cmp	r7, #69	; 0x45
    f506:	ite	eq
    f508:	addeq.w	r5, fp, #1
    f50c:	movne	r5, fp
    f50e:	add	r2, sp, #132	; 0x84
    f510:	add	r3, sp, #120	; 0x78
    f512:	str	r2, [sp, #4]
    f514:	str	r3, [sp, #0]
    f516:	mov	r2, r5
    f518:	add	r3, sp, #116	; 0x74
    f51a:	movs	r1, #2
    f51c:	vldr	d0, [sp, #96]	; 0x60
    f520:	ldr	r0, [sp, #24]
    f522:	bl	d6a8 <_dtoa_r>
    f526:	ldr	r3, [sp, #52]	; 0x34
    f528:	cmp	r3, #103	; 0x67
    f52a:	mov	r6, r0
    f52c:	bne.w	fa06 <_svfprintf_r+0x1526>
    f530:	ldr	r3, [sp, #12]
    f532:	lsls	r2, r3, #31
    f534:	bpl.w	faaa <_svfprintf_r+0x15ca>
    f538:	adds	r4, r6, r5
    f53a:	movs	r2, #0
    f53c:	movs	r3, #0
    f53e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f542:	bl	b760 <__aeabi_dcmpeq>
    f546:	cmp	r0, #0
    f548:	bne.w	f866 <_svfprintf_r+0x1386>
    f54c:	ldr	r3, [sp, #132]	; 0x84
    f54e:	cmp	r4, r3
    f550:	bls.n	f560 <_svfprintf_r+0x1080>
    f552:	movs	r1, #48	; 0x30
    f554:	adds	r2, r3, #1
    f556:	str	r2, [sp, #132]	; 0x84
    f558:	strb	r1, [r3, #0]
    f55a:	ldr	r3, [sp, #132]	; 0x84
    f55c:	cmp	r4, r3
    f55e:	bhi.n	f554 <_svfprintf_r+0x1074>
    f560:	subs	r3, r3, r6
    f562:	cmp	r7, #71	; 0x47
    f564:	str	r3, [sp, #56]	; 0x38
    f566:	beq.w	f858 <_svfprintf_r+0x1378>
    f56a:	ldr	r3, [sp, #52]	; 0x34
    f56c:	cmp	r3, #101	; 0x65
    f56e:	ble.w	fa24 <_svfprintf_r+0x1544>
    f572:	ldr	r3, [sp, #52]	; 0x34
    f574:	cmp	r3, #102	; 0x66
    f576:	ldr	r3, [sp, #116]	; 0x74
    f578:	str	r3, [sp, #60]	; 0x3c
    f57a:	beq.w	fa3e <_svfprintf_r+0x155e>
    f57e:	ldr	r2, [sp, #60]	; 0x3c
    f580:	ldr	r1, [sp, #56]	; 0x38
    f582:	cmp	r2, r1
    f584:	blt.w	f9ec <_svfprintf_r+0x150c>
    f588:	ldr	r3, [sp, #12]
    f58a:	lsls	r1, r3, #31
    f58c:	bmi.w	faae <_svfprintf_r+0x15ce>
    f590:	bic.w	r3, r2, r2, asr #31
    f594:	str	r2, [sp, #36]	; 0x24
    f596:	movs	r2, #103	; 0x67
    f598:	str	r2, [sp, #52]	; 0x34
    f59a:	ldr	r2, [sp, #16]
    f59c:	cmp	r2, #0
    f59e:	bne.w	f800 <_svfprintf_r+0x1320>
    f5a2:	str	r3, [sp, #16]
    f5a4:	ldr	r3, [sp, #44]	; 0x2c
    f5a6:	str	r3, [sp, #12]
    f5a8:	mov	fp, r2
    f5aa:	ldrb.w	r7, [sp, #111]	; 0x6f
    f5ae:	b.w	e884 <_svfprintf_r+0x3a4>
    f5b2:	bic.w	r7, r7, #7
    f5b6:	vldr	d7, [r7]
    f5ba:	add.w	r3, r7, #8
    f5be:	vstr	d7, [sp, #64]	; 0x40
    f5c2:	str	r3, [sp, #40]	; 0x28
    f5c4:	b.w	eadc <_svfprintf_r+0x5fc>
    f5c8:	ldr	r1, [sp, #40]	; 0x28
    f5ca:	strb.w	r3, [sp, #111]	; 0x6f
    f5ce:	cmp.w	fp, #0
    f5d2:	ldr	r4, [r1, #0]
    f5d4:	add.w	r7, r1, #4
    f5d8:	mov.w	r5, #0
    f5dc:	bge.w	f738 <_svfprintf_r+0x1258>
    f5e0:	str	r7, [sp, #40]	; 0x28
    f5e2:	movs	r7, #0
    f5e4:	b.w	e72c <_svfprintf_r+0x24c>
    f5e8:	ldr	r1, [sp, #12]
    f5ea:	ands.w	r3, r1, #64	; 0x40
    f5ee:	beq.w	f28e <_svfprintf_r+0xdae>
    f5f2:	ldr	r0, [sp, #40]	; 0x28
    f5f4:	strb.w	r2, [sp, #111]	; 0x6f
    f5f8:	mov	r3, r0
    f5fa:	cmp.w	fp, #0
    f5fe:	add.w	r3, r3, #4
    f602:	ldrh	r4, [r0, #0]
    f604:	mov.w	r5, #0
    f608:	blt.w	f7ea <_svfprintf_r+0x130a>
    f60c:	bic.w	r1, r1, #128	; 0x80
    f610:	str	r1, [sp, #12]
    f612:	orrs.w	r1, r4, r5
    f616:	str	r3, [sp, #40]	; 0x28
    f618:	mov	r7, r2
    f61a:	bne.w	e83c <_svfprintf_r+0x35c>
    f61e:	b.w	ec0c <_svfprintf_r+0x72c>
    f622:	ldr	r3, [sp, #12]
    f624:	ldr	r2, [sp, #40]	; 0x28
    f626:	tst.w	r3, #64	; 0x40
    f62a:	mov	r3, r2
    f62c:	beq.w	f7f4 <_svfprintf_r+0x1314>
    f630:	adds	r3, #4
    f632:	ldrh	r4, [r2, #0]
    f634:	str	r3, [sp, #40]	; 0x28
    f636:	movs	r5, #0
    f638:	b.w	ec46 <_svfprintf_r+0x766>
    f63c:	mov	r4, r2
    f63e:	adds	r3, #1
    f640:	ldr	r2, [sp, #44]	; 0x2c
    f642:	str	r3, [sp, #144]	; 0x90
    f644:	add	r4, r5
    f646:	cmp	r3, #7
    f648:	str	r4, [sp, #148]	; 0x94
    f64a:	stmia.w	r9, {r2, r5}
    f64e:	bgt.w	f306 <_svfprintf_r+0xe26>
    f652:	add.w	r9, r9, #8
    f656:	b.n	f31c <_svfprintf_r+0xe3c>
    f658:	.word	0x00010530
    f65c:	movs	r7, #0
    f65e:	cmp	fp, r7
    f660:	strb.w	r7, [sp, #111]	; 0x6f
    f664:	blt.w	ee58 <_svfprintf_r+0x978>
    f668:	ldr	r3, [sp, #12]
    f66a:	bic.w	r3, r3, #128	; 0x80
    f66e:	str	r3, [sp, #12]
    f670:	b.w	edf4 <_svfprintf_r+0x914>
    f674:	add	r2, sp, #140	; 0x8c
    f676:	ldr	r1, [sp, #20]
    f678:	ldr	r0, [sp, #24]
    f67a:	bl	fbc4 <__ssprint_r>
    f67e:	cmp	r0, #0
    f680:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f684:	ldr	r4, [sp, #148]	; 0x94
    f686:	add.w	r9, sp, #192	; 0xc0
    f68a:	b.n	ee9c <_svfprintf_r+0x9bc>
    f68c:	ldr	r7, [sp, #40]	; 0x28
    f68e:	b.w	ee4a <_svfprintf_r+0x96a>
    f692:	ldr	r3, [sp, #144]	; 0x90
    f694:	ldr	r2, [pc, #736]	; (f978 <_svfprintf_r+0x1498>)
    f696:	str.w	r2, [r9]
    f69a:	adds	r3, #1
    f69c:	adds	r4, #1
    f69e:	movs	r2, #1
    f6a0:	cmp	r3, #7
    f6a2:	str	r4, [sp, #148]	; 0x94
    f6a4:	str	r3, [sp, #144]	; 0x90
    f6a6:	str.w	r2, [r9, #4]
    f6aa:	bgt.w	f7c4 <_svfprintf_r+0x12e4>
    f6ae:	add.w	r9, r9, #8
    f6b2:	cbnz	r5, f6c0 <_svfprintf_r+0x11e0>
    f6b4:	ldr	r3, [sp, #56]	; 0x38
    f6b6:	cbnz	r3, f6c0 <_svfprintf_r+0x11e0>
    f6b8:	ldr	r3, [sp, #12]
    f6ba:	lsls	r7, r3, #31
    f6bc:	bpl.w	ea0c <_svfprintf_r+0x52c>
    f6c0:	ldr	r3, [sp, #144]	; 0x90
    f6c2:	ldr	r1, [sp, #72]	; 0x48
    f6c4:	ldr	r2, [sp, #76]	; 0x4c
    f6c6:	str.w	r2, [r9]
    f6ca:	adds	r3, #1
    f6cc:	add	r4, r1
    f6ce:	cmp	r3, #7
    f6d0:	str	r4, [sp, #148]	; 0x94
    f6d2:	str.w	r1, [r9, #4]
    f6d6:	str	r3, [sp, #144]	; 0x90
    f6d8:	bgt.w	fa76 <_svfprintf_r+0x1596>
    f6dc:	add.w	r9, r9, #8
    f6e0:	negs	r5, r5
    f6e2:	cmp	r5, #0
    f6e4:	ble.w	f83c <_svfprintf_r+0x135c>
    f6e8:	ldr	r2, [pc, #656]	; (f97c <_svfprintf_r+0x149c>)
    f6ea:	str	r2, [sp, #44]	; 0x2c
    f6ec:	cmp	r5, #16
    f6ee:	ble.w	f884 <_svfprintf_r+0x13a4>
    f6f2:	mov	r2, r4
    f6f4:	movs	r7, #16
    f6f6:	ldr.w	fp, [sp, #24]
    f6fa:	ldr	r4, [sp, #20]
    f6fc:	b.n	f70a <_svfprintf_r+0x122a>
    f6fe:	add.w	r9, r9, #8
    f702:	subs	r5, #16
    f704:	cmp	r5, #16
    f706:	ble.w	f882 <_svfprintf_r+0x13a2>
    f70a:	adds	r3, #1
    f70c:	adds	r2, #16
    f70e:	cmp	r3, #7
    f710:	str	r2, [sp, #148]	; 0x94
    f712:	str	r3, [sp, #144]	; 0x90
    f714:	str.w	sl, [r9]
    f718:	str.w	r7, [r9, #4]
    f71c:	ble.n	f6fe <_svfprintf_r+0x121e>
    f71e:	add	r2, sp, #140	; 0x8c
    f720:	mov	r1, r4
    f722:	mov	r0, fp
    f724:	bl	fbc4 <__ssprint_r>
    f728:	cmp	r0, #0
    f72a:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f72e:	ldr	r2, [sp, #148]	; 0x94
    f730:	ldr	r3, [sp, #144]	; 0x90
    f732:	add.w	r9, sp, #192	; 0xc0
    f736:	b.n	f702 <_svfprintf_r+0x1222>
    f738:	ldr	r2, [sp, #12]
    f73a:	b.w	ebb0 <_svfprintf_r+0x6d0>
    f73e:	ldr	r2, [sp, #12]
    f740:	b.n	f25a <_svfprintf_r+0xd7a>
    f742:	ldr	r3, [sp, #12]
    f744:	orr.w	r3, r3, #32
    f748:	str	r3, [sp, #12]
    f74a:	add.w	r8, r8, #1
    f74e:	ldrb.w	r3, [r8]
    f752:	b.w	e594 <_svfprintf_r+0xb4>
    f756:	add	r2, sp, #140	; 0x8c
    f758:	ldr	r1, [sp, #20]
    f75a:	ldr	r0, [sp, #24]
    f75c:	bl	fbc4 <__ssprint_r>
    f760:	cmp	r0, #0
    f762:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f766:	ldr	r4, [sp, #148]	; 0x94
    f768:	add.w	r9, sp, #192	; 0xc0
    f76c:	b.w	eecc <_svfprintf_r+0x9ec>
    f770:	movs	r1, #64	; 0x40
    f772:	ldr	r0, [sp, #24]
    f774:	bl	bbe0 <_malloc_r>
    f778:	ldr	r2, [sp, #20]
    f77a:	str	r0, [r2, #0]
    f77c:	str	r0, [r2, #16]
    f77e:	cmp	r0, #0
    f780:	beq.w	fb6a <_svfprintf_r+0x168a>
    f784:	ldr	r2, [sp, #20]
    f786:	movs	r3, #64	; 0x40
    f788:	str	r3, [r2, #20]
    f78a:	b.w	e50e <_svfprintf_r+0x2e>
    f78e:	add	r2, sp, #132	; 0x84
    f790:	add	r3, sp, #120	; 0x78
    f792:	str	r2, [sp, #4]
    f794:	str	r3, [sp, #0]
    f796:	mov	r2, fp
    f798:	add	r3, sp, #116	; 0x74
    f79a:	movs	r1, #3
    f79c:	vldr	d0, [sp, #96]	; 0x60
    f7a0:	ldr	r0, [sp, #24]
    f7a2:	bl	d6a8 <_dtoa_r>
    f7a6:	mov	r5, fp
    f7a8:	mov	r6, r0
    f7aa:	ldr	r3, [sp, #52]	; 0x34
    f7ac:	cmp	r3, #70	; 0x46
    f7ae:	add.w	r4, r6, r5
    f7b2:	bne.w	f53a <_svfprintf_r+0x105a>
    f7b6:	ldrb	r3, [r6, #0]
    f7b8:	cmp	r3, #48	; 0x30
    f7ba:	beq.w	facc <_svfprintf_r+0x15ec>
    f7be:	ldr	r5, [sp, #116]	; 0x74
    f7c0:	add	r4, r5
    f7c2:	b.n	f53a <_svfprintf_r+0x105a>
    f7c4:	add	r2, sp, #140	; 0x8c
    f7c6:	ldr	r1, [sp, #20]
    f7c8:	ldr	r0, [sp, #24]
    f7ca:	bl	fbc4 <__ssprint_r>
    f7ce:	cmp	r0, #0
    f7d0:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f7d4:	ldr	r5, [sp, #116]	; 0x74
    f7d6:	ldr	r4, [sp, #148]	; 0x94
    f7d8:	add.w	r9, sp, #192	; 0xc0
    f7dc:	b.n	f6b2 <_svfprintf_r+0x11d2>
    f7de:	cmp.w	fp, #0
    f7e2:	it	eq
    f7e4:	moveq.w	fp, #1
    f7e8:	b.n	f4da <_svfprintf_r+0xffa>
    f7ea:	str	r3, [sp, #40]	; 0x28
    f7ec:	mov	r7, r2
    f7ee:	b.n	f2aa <_svfprintf_r+0xdca>
    f7f0:	str	r3, [sp, #40]	; 0x28
    f7f2:	b.n	f5e2 <_svfprintf_r+0x1102>
    f7f4:	adds	r3, #4
    f7f6:	ldr	r4, [r2, #0]
    f7f8:	str	r3, [sp, #40]	; 0x28
    f7fa:	movs	r5, #0
    f7fc:	b.w	ec46 <_svfprintf_r+0x766>
    f800:	movs	r7, #45	; 0x2d
    f802:	str	r3, [sp, #16]
    f804:	ldr	r3, [sp, #44]	; 0x2c
    f806:	str	r3, [sp, #12]
    f808:	strb.w	r7, [sp, #111]	; 0x6f
    f80c:	mov.w	fp, #0
    f810:	b.w	e886 <_svfprintf_r+0x3a6>
    f814:	mov	r0, r6
    f816:	bl	c900 <strlen>
    f81a:	mov	fp, r4
    f81c:	mov	r3, r0
    f81e:	str	r0, [sp, #36]	; 0x24
    f820:	b.w	ed68 <_svfprintf_r+0x888>
    f824:	add	r2, sp, #140	; 0x8c
    f826:	ldr	r1, [sp, #20]
    f828:	ldr	r0, [sp, #24]
    f82a:	bl	fbc4 <__ssprint_r>
    f82e:	cmp	r0, #0
    f830:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f834:	ldr	r4, [sp, #148]	; 0x94
    f836:	ldr	r3, [sp, #144]	; 0x90
    f838:	add.w	r9, sp, #192	; 0xc0
    f83c:	ldr	r1, [sp, #56]	; 0x38
    f83e:	str.w	r6, [r9]
    f842:	adds	r3, #1
    f844:	add	r4, r1
    f846:	cmp	r3, #7
    f848:	str	r4, [sp, #148]	; 0x94
    f84a:	str	r3, [sp, #144]	; 0x90
    f84c:	str.w	r1, [r9, #4]
    f850:	ble.w	ea08 <_svfprintf_r+0x528>
    f854:	b.w	f04e <_svfprintf_r+0xb6e>
    f858:	ldr	r3, [sp, #116]	; 0x74
    f85a:	adds	r5, r3, #3
    f85c:	blt.n	f89c <_svfprintf_r+0x13bc>
    f85e:	cmp	fp, r3
    f860:	blt.n	f89c <_svfprintf_r+0x13bc>
    f862:	str	r3, [sp, #60]	; 0x3c
    f864:	b.n	f57e <_svfprintf_r+0x109e>
    f866:	mov	r3, r4
    f868:	b.n	f560 <_svfprintf_r+0x1080>
    f86a:	add	r2, sp, #140	; 0x8c
    f86c:	ldr	r1, [sp, #20]
    f86e:	ldr	r0, [sp, #24]
    f870:	bl	fbc4 <__ssprint_r>
    f874:	cmp	r0, #0
    f876:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f87a:	ldr	r4, [sp, #148]	; 0x94
    f87c:	add.w	r9, sp, #192	; 0xc0
    f880:	b.n	f11c <_svfprintf_r+0xc3c>
    f882:	mov	r4, r2
    f884:	adds	r3, #1
    f886:	ldr	r2, [sp, #44]	; 0x2c
    f888:	str	r3, [sp, #144]	; 0x90
    f88a:	add	r4, r5
    f88c:	cmp	r3, #7
    f88e:	str	r4, [sp, #148]	; 0x94
    f890:	stmia.w	r9, {r2, r5}
    f894:	bgt.n	f824 <_svfprintf_r+0x1344>
    f896:	add.w	r9, r9, #8
    f89a:	b.n	f83c <_svfprintf_r+0x135c>
    f89c:	ldr	r2, [sp, #52]	; 0x34
    f89e:	subs	r2, #2
    f8a0:	str	r2, [sp, #52]	; 0x34
    f8a2:	subs	r3, #1
    f8a4:	cmp	r3, #0
    f8a6:	ldrb.w	r2, [sp, #52]	; 0x34
    f8aa:	str	r3, [sp, #116]	; 0x74
    f8ac:	it	lt
    f8ae:	neglt	r3, r3
    f8b0:	strb.w	r2, [sp, #124]	; 0x7c
    f8b4:	ite	lt
    f8b6:	movlt	r2, #45	; 0x2d
    f8b8:	movge	r2, #43	; 0x2b
    f8ba:	cmp	r3, #9
    f8bc:	strb.w	r2, [sp, #125]	; 0x7d
    f8c0:	ble.w	fa9a <_svfprintf_r+0x15ba>
    f8c4:	add.w	r0, sp, #139	; 0x8b
    f8c8:	mov	r4, r0
    f8ca:	ldr	r2, [pc, #180]	; (f980 <_svfprintf_r+0x14a0>)
    f8cc:	smull	r2, r1, r2, r3
    f8d0:	asrs	r2, r3, #31
    f8d2:	rsb	r2, r2, r1, asr #2
    f8d6:	add.w	r1, r2, r2, lsl #2
    f8da:	sub.w	r3, r3, r1, lsl #1
    f8de:	add.w	r1, r3, #48	; 0x30
    f8e2:	cmp	r2, #9
    f8e4:	mov	r3, r2
    f8e6:	strb.w	r1, [r4, #-1]!
    f8ea:	bgt.n	f8ca <_svfprintf_r+0x13ea>
    f8ec:	mov	r1, r4
    f8ee:	adds	r3, #48	; 0x30
    f8f0:	uxtb	r2, r3
    f8f2:	strb.w	r2, [r1, #-1]!
    f8f6:	cmp	r0, r1
    f8f8:	bls.w	fb64 <_svfprintf_r+0x1684>
    f8fc:	add.w	r1, sp, #126	; 0x7e
    f900:	mov	r3, r4
    f902:	b.n	f908 <_svfprintf_r+0x1428>
    f904:	ldrb.w	r2, [r3], #1
    f908:	strb.w	r2, [r1], #1
    f90c:	cmp	r0, r3
    f90e:	bne.n	f904 <_svfprintf_r+0x1424>
    f910:	adds	r3, r0, #1
    f912:	subs	r3, r3, r4
    f914:	add.w	r2, sp, #126	; 0x7e
    f918:	add	r3, r2
    f91a:	add	r2, sp, #124	; 0x7c
    f91c:	subs	r3, r3, r2
    f91e:	ldr	r2, [sp, #56]	; 0x38
    f920:	str	r3, [sp, #84]	; 0x54
    f922:	cmp	r2, #1
    f924:	add	r3, r2
    f926:	str	r3, [sp, #36]	; 0x24
    f928:	ble.w	fafa <_svfprintf_r+0x161a>
    f92c:	ldr	r3, [sp, #36]	; 0x24
    f92e:	ldr	r2, [sp, #72]	; 0x48
    f930:	add	r3, r2
    f932:	movs	r2, #0
    f934:	str	r3, [sp, #36]	; 0x24
    f936:	str	r2, [sp, #60]	; 0x3c
    f938:	bic.w	r3, r3, r3, asr #31
    f93c:	b.n	f59a <_svfprintf_r+0x10ba>
    f93e:	add	r2, sp, #140	; 0x8c
    f940:	ldr	r1, [sp, #20]
    f942:	ldr	r0, [sp, #24]
    f944:	bl	fbc4 <__ssprint_r>
    f948:	cmp	r0, #0
    f94a:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f94e:	ldr	r3, [sp, #116]	; 0x74
    f950:	ldr	r4, [sp, #148]	; 0x94
    f952:	add.w	r9, sp, #192	; 0xc0
    f956:	b.n	f330 <_svfprintf_r+0xe50>
    f958:	add	r2, sp, #140	; 0x8c
    f95a:	ldr	r1, [sp, #20]
    f95c:	ldr	r0, [sp, #24]
    f95e:	bl	fbc4 <__ssprint_r>
    f962:	cmp	r0, #0
    f964:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    f968:	ldr	r3, [sp, #116]	; 0x74
    f96a:	ldr	r2, [sp, #56]	; 0x38
    f96c:	ldr	r4, [sp, #148]	; 0x94
    f96e:	subs	r3, r2, r3
    f970:	add.w	r9, sp, #192	; 0xc0
    f974:	b.n	f360 <_svfprintf_r+0xe80>
    f976:	nop
    f978:	.word	0x0001052c
    f97c:	.word	0x00010530
    f980:	.word	0x66666667
    f984:	cmp	r5, #6
    f986:	mov	r3, r5
    f988:	it	cs
    f98a:	movcs	r3, #6
    f98c:	str	r3, [sp, #36]	; 0x24
    f98e:	bic.w	r3, r3, r3, asr #31
    f992:	mov	fp, r6
    f994:	str	r7, [sp, #40]	; 0x28
    f996:	str	r6, [sp, #60]	; 0x3c
    f998:	mov	r7, r6
    f99a:	str	r3, [sp, #16]
    f99c:	ldr	r6, [pc, #536]	; (fbb8 <_svfprintf_r+0x16d8>)
    f99e:	b.w	e884 <_svfprintf_r+0x3a4>
    f9a2:	mov.w	fp, #6
    f9a6:	b.n	f4da <_svfprintf_r+0xffa>
    f9a8:	add	r2, sp, #132	; 0x84
    f9aa:	add	r3, sp, #120	; 0x78
    f9ac:	str	r2, [sp, #4]
    f9ae:	str	r3, [sp, #0]
    f9b0:	mov	r2, fp
    f9b2:	add	r3, sp, #116	; 0x74
    f9b4:	movs	r1, #3
    f9b6:	vldr	d0, [sp, #96]	; 0x60
    f9ba:	ldr	r0, [sp, #24]
    f9bc:	bl	d6a8 <_dtoa_r>
    f9c0:	mov	r5, fp
    f9c2:	mov	r6, r0
    f9c4:	add.w	r4, r0, fp
    f9c8:	b.n	f7b6 <_svfprintf_r+0x12d6>
    f9ca:	movs	r7, #45	; 0x2d
    f9cc:	strb.w	r7, [sp, #111]	; 0x6f
    f9d0:	b.w	eb2a <_svfprintf_r+0x64a>
    f9d4:	str	r3, [sp, #12]
    f9d6:	b.w	ec82 <_svfprintf_r+0x7a2>
    f9da:	ldrd	r1, r2, [sp, #64]	; 0x40
    f9de:	add.w	r3, r2, #2147483648	; 0x80000000
    f9e2:	str	r3, [sp, #100]	; 0x64
    f9e4:	movs	r3, #45	; 0x2d
    f9e6:	str	r1, [sp, #96]	; 0x60
    f9e8:	str	r3, [sp, #16]
    f9ea:	b.n	f4f6 <_svfprintf_r+0x1016>
    f9ec:	ldr	r2, [sp, #72]	; 0x48
    f9ee:	ldr	r3, [sp, #56]	; 0x38
    f9f0:	add	r3, r2
    f9f2:	ldr	r2, [sp, #60]	; 0x3c
    f9f4:	str	r3, [sp, #36]	; 0x24
    f9f6:	cmp	r2, #0
    f9f8:	ble.w	fb0e <_svfprintf_r+0x162e>
    f9fc:	movs	r2, #103	; 0x67
    f9fe:	bic.w	r3, r3, r3, asr #31
    fa02:	str	r2, [sp, #52]	; 0x34
    fa04:	b.n	f59a <_svfprintf_r+0x10ba>
    fa06:	ldr	r3, [sp, #52]	; 0x34
    fa08:	cmp	r3, #71	; 0x47
    fa0a:	bne.w	f538 <_svfprintf_r+0x1058>
    fa0e:	ldr	r3, [sp, #12]
    fa10:	lsls	r3, r3, #31
    fa12:	bmi.w	f7aa <_svfprintf_r+0x12ca>
    fa16:	ldr	r3, [sp, #132]	; 0x84
    fa18:	cmp	r7, #71	; 0x47
    fa1a:	sub.w	r3, r3, r6
    fa1e:	str	r3, [sp, #56]	; 0x38
    fa20:	beq.w	f858 <_svfprintf_r+0x1378>
    fa24:	ldr	r3, [sp, #116]	; 0x74
    fa26:	b.n	f8a2 <_svfprintf_r+0x13c2>
    fa28:	bic.w	r3, r5, r5, asr #31
    fa2c:	str	r7, [sp, #40]	; 0x28
    fa2e:	str	r3, [sp, #16]
    fa30:	str	r5, [sp, #36]	; 0x24
    fa32:	mov	fp, r0
    fa34:	str	r0, [sp, #60]	; 0x3c
    fa36:	ldrb.w	r7, [sp, #111]	; 0x6f
    fa3a:	b.w	e884 <_svfprintf_r+0x3a4>
    fa3e:	cmp	r3, #0
    fa40:	ble.n	fb1e <_svfprintf_r+0x163e>
    fa42:	cmp.w	fp, #0
    fa46:	bne.n	fae8 <_svfprintf_r+0x1608>
    fa48:	ldr	r2, [sp, #12]
    fa4a:	lsls	r4, r2, #31
    fa4c:	bmi.n	fae8 <_svfprintf_r+0x1608>
    fa4e:	mov	r2, r3
    fa50:	str	r2, [sp, #36]	; 0x24
    fa52:	bic.w	r3, r3, r3, asr #31
    fa56:	b.n	f59a <_svfprintf_r+0x10ba>
    fa58:	ldr	r3, [sp, #12]
    fa5a:	lsls	r3, r3, #31
    fa5c:	mov	r7, fp
    fa5e:	bpl.n	fa6c <_svfprintf_r+0x158c>
    fa60:	add	r6, sp, #256	; 0x100
    fa62:	movs	r3, #48	; 0x30
    fa64:	strb.w	r3, [r6, #-65]!
    fa68:	b.w	e870 <_svfprintf_r+0x390>
    fa6c:	str.w	fp, [sp, #36]	; 0x24
    fa70:	add	r6, sp, #192	; 0xc0
    fa72:	b.w	e876 <_svfprintf_r+0x396>
    fa76:	add	r2, sp, #140	; 0x8c
    fa78:	ldr	r1, [sp, #20]
    fa7a:	ldr	r0, [sp, #24]
    fa7c:	bl	fbc4 <__ssprint_r>
    fa80:	cmp	r0, #0
    fa82:	bne.w	e6d4 <_svfprintf_r+0x1f4>
    fa86:	ldr	r5, [sp, #116]	; 0x74
    fa88:	ldr	r4, [sp, #148]	; 0x94
    fa8a:	ldr	r3, [sp, #144]	; 0x90
    fa8c:	add.w	r9, sp, #192	; 0xc0
    fa90:	b.n	f6e0 <_svfprintf_r+0x1200>
    fa92:	mov	r8, r4
    fa94:	movs	r5, #0
    fa96:	b.w	e598 <_svfprintf_r+0xb8>
    fa9a:	adds	r3, #48	; 0x30
    fa9c:	movs	r2, #48	; 0x30
    fa9e:	strb.w	r3, [sp, #127]	; 0x7f
    faa2:	strb.w	r2, [sp, #126]	; 0x7e
    faa6:	add	r3, sp, #128	; 0x80
    faa8:	b.n	f91a <_svfprintf_r+0x143a>
    faaa:	ldr	r3, [sp, #132]	; 0x84
    faac:	b.n	f560 <_svfprintf_r+0x1080>
    faae:	ldr	r2, [sp, #72]	; 0x48
    fab0:	ldr	r3, [sp, #60]	; 0x3c
    fab2:	add	r3, r2
    fab4:	movs	r2, #103	; 0x67
    fab6:	str	r3, [sp, #36]	; 0x24
    fab8:	str	r2, [sp, #52]	; 0x34
    faba:	bic.w	r3, r3, r3, asr #31
    fabe:	b.n	f59a <_svfprintf_r+0x10ba>
    fac0:	ldr	r6, [pc, #248]	; (fbbc <_svfprintf_r+0x16dc>)
    fac2:	ldr	r3, [pc, #252]	; (fbc0 <_svfprintf_r+0x16e0>)
    fac4:	ldrb.w	r7, [sp, #111]	; 0x6f
    fac8:	b.w	eb2e <_svfprintf_r+0x64e>
    facc:	movs	r2, #0
    face:	movs	r3, #0
    fad0:	ldrd	r0, r1, [sp, #96]	; 0x60
    fad4:	bl	b760 <__aeabi_dcmpeq>
    fad8:	cmp	r0, #0
    fada:	bne.w	f7be <_svfprintf_r+0x12de>
    fade:	rsb	r5, r5, #1
    fae2:	str	r5, [sp, #116]	; 0x74
    fae4:	add	r4, r5
    fae6:	b.n	f53a <_svfprintf_r+0x105a>
    fae8:	ldr	r3, [sp, #60]	; 0x3c
    faea:	ldr	r2, [sp, #72]	; 0x48
    faec:	adds	r5, r3, r2
    faee:	add.w	r3, r5, fp
    faf2:	str	r3, [sp, #36]	; 0x24
    faf4:	bic.w	r3, r3, r3, asr #31
    faf8:	b.n	f59a <_svfprintf_r+0x10ba>
    fafa:	ldr	r3, [sp, #12]
    fafc:	ands.w	r3, r3, #1
    fb00:	bne.w	f92c <_svfprintf_r+0x144c>
    fb04:	str	r3, [sp, #60]	; 0x3c
    fb06:	ldr	r3, [sp, #36]	; 0x24
    fb08:	bic.w	r3, r3, r3, asr #31
    fb0c:	b.n	f59a <_svfprintf_r+0x10ba>
    fb0e:	ldr	r3, [sp, #60]	; 0x3c
    fb10:	ldr	r2, [sp, #36]	; 0x24
    fb12:	rsb	r3, r3, #1
    fb16:	add	r2, r3
    fb18:	mov	r3, r2
    fb1a:	str	r2, [sp, #36]	; 0x24
    fb1c:	b.n	f9fc <_svfprintf_r+0x151c>
    fb1e:	cmp.w	fp, #0
    fb22:	bne.n	fb2a <_svfprintf_r+0x164a>
    fb24:	ldr	r3, [sp, #12]
    fb26:	lsls	r0, r3, #31
    fb28:	bpl.n	fb3a <_svfprintf_r+0x165a>
    fb2a:	ldr	r3, [sp, #72]	; 0x48
    fb2c:	adds	r5, r3, #1
    fb2e:	add.w	r3, r5, fp
    fb32:	str	r3, [sp, #36]	; 0x24
    fb34:	bic.w	r3, r3, r3, asr #31
    fb38:	b.n	f59a <_svfprintf_r+0x10ba>
    fb3a:	movs	r3, #1
    fb3c:	str	r3, [sp, #36]	; 0x24
    fb3e:	b.n	f59a <_svfprintf_r+0x10ba>
    fb40:	ldr	r0, [sp, #40]	; 0x28
    fb42:	ldrb.w	r3, [r8, #1]
    fb46:	ldr	r5, [r0, #0]
    fb48:	adds	r0, #4
    fb4a:	cmp	r5, #0
    fb4c:	str	r0, [sp, #40]	; 0x28
    fb4e:	mov	r8, r4
    fb50:	bge.w	e594 <_svfprintf_r+0xb4>
    fb54:	mov.w	r5, #4294967295
    fb58:	b.w	e594 <_svfprintf_r+0xb4>
    fb5c:	strb.w	r1, [sp, #111]	; 0x6f
    fb60:	b.w	e6f6 <_svfprintf_r+0x216>
    fb64:	add.w	r3, sp, #126	; 0x7e
    fb68:	b.n	f91a <_svfprintf_r+0x143a>
    fb6a:	ldr	r2, [sp, #24]
    fb6c:	movs	r3, #12
    fb6e:	str	r3, [r2, #0]
    fb70:	mov.w	r0, #4294967295
    fb74:	b.w	e6e6 <_svfprintf_r+0x206>
    fb78:	strb.w	r1, [sp, #111]	; 0x6f
    fb7c:	b.w	e7f0 <_svfprintf_r+0x310>
    fb80:	strb.w	r1, [sp, #111]	; 0x6f
    fb84:	b.w	eabc <_svfprintf_r+0x5dc>
    fb88:	strb.w	r1, [sp, #111]	; 0x6f
    fb8c:	b.w	ec2a <_svfprintf_r+0x74a>
    fb90:	strb.w	r1, [sp, #111]	; 0x6f
    fb94:	b.w	ebce <_svfprintf_r+0x6ee>
    fb98:	strb.w	r1, [sp, #111]	; 0x6f
    fb9c:	b.w	eb7a <_svfprintf_r+0x69a>
    fba0:	strb.w	r1, [sp, #111]	; 0x6f
    fba4:	b.w	ee12 <_svfprintf_r+0x932>
    fba8:	strb.w	r1, [sp, #111]	; 0x6f
    fbac:	b.w	edd0 <_svfprintf_r+0x8f0>
    fbb0:	strb.w	r1, [sp, #111]	; 0x6f
    fbb4:	b.w	ed94 <_svfprintf_r+0x8b4>
    fbb8:	.word	0x00010578
    fbbc:	.word	0x0001054c
    fbc0:	.word	0x00010548

0000fbc4 <__ssprint_r>:
    fbc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbc8:	ldr	r3, [r2, #8]
    fbca:	sub	sp, #12
    fbcc:	mov	r8, r2
    fbce:	cmp	r3, #0
    fbd0:	beq.n	fcb8 <__ssprint_r+0xf4>
    fbd2:	mov	fp, r0
    fbd4:	mov.w	r9, #0
    fbd8:	ldr	r6, [r2, #0]
    fbda:	ldr	r0, [r1, #0]
    fbdc:	ldr	r3, [r1, #8]
    fbde:	mov	r5, r1
    fbe0:	mov	r4, r9
    fbe2:	cmp	r4, #0
    fbe4:	beq.n	fc72 <__ssprint_r+0xae>
    fbe6:	cmp	r4, r3
    fbe8:	mov	r7, r3
    fbea:	mov	sl, r3
    fbec:	bcc.n	fc7c <__ssprint_r+0xb8>
    fbee:	ldrh	r3, [r5, #12]
    fbf0:	tst.w	r3, #1152	; 0x480
    fbf4:	beq.n	fc52 <__ssprint_r+0x8e>
    fbf6:	ldr	r7, [r5, #20]
    fbf8:	ldr	r1, [r5, #16]
    fbfa:	add.w	r7, r7, r7, lsl #1
    fbfe:	rsb	sl, r1, r0
    fc02:	add.w	r7, r7, r7, lsr #31
    fc06:	adds	r0, r4, #1
    fc08:	asrs	r7, r7, #1
    fc0a:	add	r0, sl
    fc0c:	cmp	r0, r7
    fc0e:	mov	r2, r7
    fc10:	itt	hi
    fc12:	movhi	r7, r0
    fc14:	movhi	r2, r7
    fc16:	lsls	r3, r3, #21
    fc18:	bpl.n	fc82 <__ssprint_r+0xbe>
    fc1a:	mov	r1, r2
    fc1c:	mov	r0, fp
    fc1e:	bl	bbe0 <_malloc_r>
    fc22:	cmp	r0, #0
    fc24:	beq.n	fc96 <__ssprint_r+0xd2>
    fc26:	mov	r2, sl
    fc28:	ldr	r1, [r5, #16]
    fc2a:	str	r0, [sp, #4]
    fc2c:	bl	8df4 <memcpy>
    fc30:	ldrh	r2, [r5, #12]
    fc32:	ldr	r3, [sp, #4]
    fc34:	bic.w	r2, r2, #1152	; 0x480
    fc38:	orr.w	r2, r2, #128	; 0x80
    fc3c:	strh	r2, [r5, #12]
    fc3e:	rsb	r2, sl, r7
    fc42:	add.w	r0, r3, sl
    fc46:	str	r7, [r5, #20]
    fc48:	str	r3, [r5, #16]
    fc4a:	str	r0, [r5, #0]
    fc4c:	str	r2, [r5, #8]
    fc4e:	mov	r7, r4
    fc50:	mov	sl, r4
    fc52:	mov	r2, sl
    fc54:	mov	r1, r9
    fc56:	bl	c284 <memmove>
    fc5a:	ldr.w	r2, [r8, #8]
    fc5e:	ldr	r3, [r5, #8]
    fc60:	ldr	r0, [r5, #0]
    fc62:	subs	r3, r3, r7
    fc64:	add	r0, sl
    fc66:	subs	r4, r2, r4
    fc68:	str	r3, [r5, #8]
    fc6a:	str	r0, [r5, #0]
    fc6c:	str.w	r4, [r8, #8]
    fc70:	cbz	r4, fcb8 <__ssprint_r+0xf4>
    fc72:	ldr.w	r9, [r6]
    fc76:	ldr	r4, [r6, #4]
    fc78:	adds	r6, #8
    fc7a:	b.n	fbe2 <__ssprint_r+0x1e>
    fc7c:	mov	r7, r4
    fc7e:	mov	sl, r4
    fc80:	b.n	fc52 <__ssprint_r+0x8e>
    fc82:	mov	r0, fp
    fc84:	bl	c3f0 <_realloc_r>
    fc88:	mov	r3, r0
    fc8a:	cmp	r0, #0
    fc8c:	bne.n	fc3e <__ssprint_r+0x7a>
    fc8e:	ldr	r1, [r5, #16]
    fc90:	mov	r0, fp
    fc92:	bl	ccb0 <_free_r>
    fc96:	movs	r3, #12
    fc98:	str.w	r3, [fp]
    fc9c:	ldrh	r3, [r5, #12]
    fc9e:	movs	r2, #0
    fca0:	orr.w	r3, r3, #64	; 0x40
    fca4:	mov.w	r0, #4294967295
    fca8:	strh	r3, [r5, #12]
    fcaa:	str.w	r2, [r8, #8]
    fcae:	str.w	r2, [r8, #4]
    fcb2:	add	sp, #12
    fcb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcb8:	movs	r0, #0
    fcba:	str.w	r0, [r8, #4]
    fcbe:	add	sp, #12
    fcc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fcc4 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
    fccc:	........m.......
    fcdc:	E...........

0000fce8 <vtable for FsFile>:
	...
    fcf0:	........m.......
    fd00:	E...........MTP 
    fd10:	test....DBG_FAIL
    fd20:	: ..ExFatFile.cp
    fd30:	p...ExFatPartiti
    fd40:	on.cpp..EXFAT...
    fd50:	ExFatFileWrite.c
    fd60:	pp..FatFile.cpp.
    fd70:	FatPartition.cpp
    fd80:	....FatFileLFN.c
    fd90:	pp..DBG_HALT ...
    fda0:	C:\Users\zimme\D
    fdb0:	ocuments\Arduino
    fdc0:	\libraries/SdFat
    fdd0:	-beta/src/FatLib
    fde0:	/FatFileLFN.cpp.
    fdf0:	FatFileSFN.cpp..

0000fe00 <vtable for SdSpiCard>:
	...
    fe08:	]H..aH..9H...M..
    fe18:	.L...O..MH..qH..
    fe28:	.N..1H..5H...I..
    fe38:	.L...L...L..)H..
    fe48:	IH..qP..]N..eO..

0000fe58 <vtable for SdioCard>:
	...
    fe60:	uR...R..._...X..
    fe70:	.U...Y..%Y...X..
    fe80:	.U...R..!R..)T..
    fe90:	-R..IR..eR..yS..
    fea0:	.R...V...W...V..

0000feb0 <vtable for MTPStorage_SD>:
	...
    feb8:	Y`..]`..1a..ya..
    fec8:	.k..Ud...d...d..
    fed8:	5i...j...a...e..
    fee8:	.e...`...a..Eg..
    fef8:	.h..mtpindex.dat
    ff08:	..../...SdError:
    ff18:	 0X.,0X.Check SD
    ff28:	 format.....erro
    ff38:	r: .sd.begin fai
    ff48:	led.

0000ff4c <supported_op>:
    ff4c:	................
    ff5c:	................
    ff6c:	....

0000ff70 <propertyList>:
    ff70:	................
    ff80:	A.D.Teensy..micr
    ff90:	osoft.com: 1.0;.
    ffa0:	PJRC....1.0.???.
    ffb0:	SD Card.%x %d %d
    ffc0:	 %d: %x %x %x...

0000ffd0 <SPIClass::spi0_hardware>:
    ffd0:	<..@............
    ffe0:	..........'.....
    fff0:	................
   10000:	................
   10010:	................
   10020:	..........-.....
   10030:	................
   10040:	................
   10050:	................
   10060:	.. .

00010064 <monthDays>:
   10064:	............

00010070 <digital_pin_to_info_PGM>:
   10070:	@..C@..@D..CD..@
   10080:	...C...@0..C0..@
   10090:	4..C4..@...C...@
   100a0:	...C...@...C...@
   100b0:	...C...@...C...@
   100c0:	...C...@...C...@
   100d0:	...C...@...C...@
   100e0:	...C...@...C...@
   100f0:	...C...@...C...@
   10100:	...C...@...C...@
   10110:	...C...@...C...@
   10120:	...C...@...C...@
   10130:	h .Ch..@...C...@
   10140:	8..C8..@<..C<..@
   10150:	@..C@..@H..CH..@
   10160:	L..CL..@(..C(..@
   10170:	,..C,..@` .C`..@
   10180:	d .Cd..@ ..C ..@
   10190:	$..C$..@(..C(..@
   101a0:	,..C,..@D..CD..@
   101b0:	p..Cp..@t..Ct..@
   101c0:	h..Ch..@P..CP..@
   101d0:	X..CX..@\..C\..@
   101e0:	T..CT..@ ..C ..@
   101f0:	$..C$..@...C...@
   10200:	...C...@8..C8..@
   10210:	4..C4..@0..C0..@
   10220:	<..C<..@,..C,..@
   10230:	( .C(..@, .C,..@
   10240:	. .C...@. .C...@
   10250:	. .C...@. .C...@
   10260:	. .C...@. .C...@

00010270 <vtable for usb_serial_class>:
	...
   10278:	................
   10288:	................
   10298:	....

0001029c <usb_endpoint_config_table>:
   1029c:	........

000102a4 <usb_descriptor_list>:
   102a4:	................
   102b4:	....i.......t...
   102c4:	................
   102d4:	................
   102e4:	|...............
	...

00010304 <_global_impure_ptr>:
   10304:	....C...POSIX...
   10314:	....

00010318 <_ctype_>:
   10318:	.         ((((( 
   10328:	                
   10338:	 ...............
   10348:	................
   10358:	..AAAAAA........
   10368:	................
   10378:	..BBBBBB........
   10388:	................
   10398:	 ...............
	...
   10418:	........

00010420 <__mprec_tens>:
   10420:	.......?......$@
   10430:	......Y@.....@.@
   10440:	.......@.....j.@
   10450:	.......A......cA
   10460:	.......A....e..A
   10470:	... _..B....vH7B
   10480:	......mB..@..0.B
   10490:	.......B..4&.k.C
   104a0:	...7y.AC....W4vC
   104b0:	..Ngm..C.=.`.X.C
   104c0:	@..x...DP.....KD
   104d0:	..M....D.J...-.D
   104e0:	...yCx.D

000104e8 <__mprec_bigtens>:
   104e8:	...7y.AC.n.....F
   104f8:	..?..O8M2.0.Hw.Z
   10508:	<.s..O.u

00010510 <p05.6087>:
   10510:	........}...Infi
   10520:	nity....NaN.0...

00010530 <zeroes.7258>:
   10530:	0000000000000000
   10540:	INF.inf.NAN.nan.
   10550:	0123456789ABCDEF
   10560:	....0123456789ab
   10570:	cdef....(null)..

00010580 <blanks.7257>:
   10580:	                

00010590 <_init>:
   10590:	push	{r3, r4, r5, r6, r7, lr}
   10592:	nop
   10594:	pop	{r3, r4, r5, r6, r7}
   10596:	pop	{r3}
   10598:	mov	lr, r3
   1059a:	bx	lr

0001059c <__init_array_start>:
   1059c:	.word	0x0000cbcd

000105a0 <__frame_dummy_init_array_entry>:
   105a0:	5...I...Em..

Disassembly of section .fini:

000105ac <_fini>:
   105ac:	push	{r3, r4, r5, r6, r7, lr}
   105ae:	nop
