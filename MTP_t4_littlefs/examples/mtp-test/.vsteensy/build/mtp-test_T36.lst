
.vsteensy/build/mtp-test_T36.elf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0001067c l    d  .fini	00000000 .fini
00010680 l    d  .ARM.exidx	00000000 .ARM.exidx
1fff0000 l    d  .usbdescriptortable	00000000 .usbdescriptortable
1fff0200 l    d  .dmabuffers	00000000 .dmabuffers
1fff03d0 l    d  .usbbuffers	00000000 .usbbuffers
1fff0970 l    d  .data	00000000 .data
1fff1438 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 mk20dx128.c
000099dc l     F .text	0000000c startup_default_early_hook
000099e8 l     F .text	00000002 startup_default_late_hook
00000000 l    df *ABS*	00000000 crtstuff.c
00000410 l     F .text	00000000 __do_global_dtors_aux
1fff1438 l       .bss	00000000 completed.8605
00000434 l     F .text	00000000 frame_dummy
1fff143c l       .bss	00000000 object.8610
00010670 l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000005f0 l     F .text	0000006c __tcf_0
0000071c l     F .text	000000ac _GLOBAL__sub_I_storage
00000000 l    df *ABS*	00000000 Storage.cpp
00001034 l     F .text	00000094 MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]
00001900 l     F .text	0000002e MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]
00000000 l    df *ABS*	00000000 MTP.cpp
000019f0 l     F .text	00000064 MTPD::write(char const*, int) [clone .part.2]
00001afc l     F .text	000000bc MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]
00002cf0 l     F .text	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]
0000fee0 l     O .text	00000024 supported_op
0000ff04 l     O .text	00000014 propertyList
00000000 l    df *ABS*	00000000 SPI.cpp
00003468 l     F .text	000001f8 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]
00000000 l    df *ABS*	00000000 Time.cpp
00003818 l     F .text	00000018 refreshCache(long) [clone .part.0]
1fff16d4 l     O .bss	00000004 cacheTime
1fff16d8 l     O .bss	00000007 tm
1fff16e0 l     O .bss	00000004 sysTime
1fff16e4 l     O .bss	00000001 Status
1fff16ec l     O .bss	00000004 prevMillis
1fff0978 l     O .data	00000004 syncInterval
0000ff68 l     O .text	0000000c monthDays
1fff16f0 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 SD.cpp
00003bbc l     F .text	0000005c _GLOBAL__sub_I_SD
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00003c18 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
000046e0 l     F .text	0000003c dbgPrint(unsigned short)
0000471c l     F .text	0000002c FsCache::sync() [clone .part.2]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00004d74 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFile.cpp
00005964 l     F .text	0000003c dbgPrint(unsigned short)
00005ae4 l     F .text	000000a4 FatFile::sync() [clone .part.38]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00006984 l     F .text	0000003c dbgPrint(unsigned short)
000069c0 l     F .text	00000058 FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00006f10 l     F .text	00000028 lfnGetChar(DirLfn_t*, unsigned char)
00006f38 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00007a64 l     F .text	0000003c dbgPrint(unsigned short)
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00007e4c l     F .text	00000018 SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]
00007e64 l     F .text	00000022 SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008448 l     F .text	00000030 sdIrs()
00008478 l     F .text	00000018 isBusyCommandComplete()
00008490 l     F .text	00000010 isBusyCommandInhibit()
000084a0 l     F .text	0000000c isBusyDMA()
000084ac l     F .text	00000014 isBusyFifoRead()
000084c0 l     F .text	00000014 isBusyFifoWrite()
000084d4 l     F .text	00000018 isBusyTransferComplete()
000084ec l     F .text	000000cc setSdclk(unsigned long)
0000861c l     F .text	00000028 waitTimeout(bool (*)())
00008644 l     F .text	0000004c yieldTimeout(bool (*)())
000086c0 l     F .text	0000005c cardCommand(unsigned long, unsigned long)
0000873c l     F .text	00000064 readReg16(unsigned long, void*)
000087a0 l     F .text	0000002c isBusyCMD13()
000087e8 l     F .text	00000020 waitDmaStatus() [clone .part.6]
00008808 l     F .text	000000b4 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000089fc l     F .text	00000078 transferStop()
00008dac l     F .text	000000ac cardCMD6(unsigned long, unsigned char*)
1fff1bac l     O .bss	00000001 m_version2
1fff1bb0 l     O .bss	00000010 m_cid
1fff1bc0 l     O .bss	00000004 m_busyFcn
1fff1bc4 l     O .bss	00000001 m_highCapacity
1fff1bc8 l     O .bss	00000004 m_ocr
1fff1bcc l     O .bss	00000004 m_rca
1fff1bd0 l     O .bss	00000004 m_irqstat
1fff097c l     O .data	00000001 m_errorCode
1fff1bd4 l     O .bss	00000001 m_initDone
1fff1bd8 l     O .bss	00000010 m_csd
1fff1be8 l     O .bss	00000001 m_dmaBusy
1fff1bec l     O .bss	00000004 m_sdClkKhz
1fff1bf0 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 usb1_mtp.c
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
1fff1bf5 l     O .bss	00000001 tx_noautoflush
1fff1bf8 l     O .bss	00000004 tx_packet
1fff1bfc l     O .bss	00000001 transmit_previous_timeout
1fff1c00 l     O .bss	00000004 rx_packet
00000000 l    df *ABS*	00000000 pins_teensy.c
00009a1c l     F .text	0000004c digitalWrite.part.1
00009a68 l     F .text	00000078 pinMode.part.2
00000000 l    df *ABS*	00000000 usb_mem.c
1fff0984 l     O .data	00000004 usb_buffer_available
00000000 l    df *ABS*	00000000 usb_dev.c
1fff1c0c l     O .bss	00000004 ep0_tx_ptr
1fff1c10 l     O .bss	00000018 rx_last
1fff1c28 l     O .bss	00000002 ep0_tx_len
1fff1c2c l     O .bss	00000040 ep0_rx0_buf
1fff1c6c l     O .bss	00000018 rx_first
1fff1c84 l     O .bss	00000001 ep0_tx_data_toggle
1fff1c88 l     O .bss	00000040 ep0_rx1_buf
1fff1cc8 l     O .bss	00000018 tx_first
1fff0000 l     O .usbdescriptortable	000000e0 table
1fff1ce0 l     O .bss	00000018 tx_last
1fff1cf8 l     O .bss	00000008 setup
1fff1d00 l     O .bss	00000001 ep0_tx_bdt_bank
1fff1d04 l     O .bss	00000008 reply_buffer
1fff1d10 l     O .bss	00000006 tx_state
00000000 l    df *ABS*	00000000 yield.cpp
1fff1d16 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 analog.c
1fff1d45 l     O .bss	00000001 calibrating
1fff099d l     O .data	00000001 analog_config_bits
1fff1d46 l     O .bss	00000001 analog_reference_internal
1fff099e l     O .data	00000001 analog_num_average
00000000 l    df *ABS*	00000000 usb_desc.c
1fff09a0 l     O .data	00000012 device_descriptor
1fff09cc l     O .data	00000069 config_descriptor
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000cc0c l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
000105e0 l     O .text	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d5c0 l     F .text	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
00010600 l     O .text	00000010 zeroes.7258
00010650 l     O .text	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
1fff0a90 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
1fff1438 l       .bss	00000000 __bss_start__
1fff1d98 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __stack
000099d4  w    F .text	00000006 adc0_isr
00001000 g     F .text	00000032 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000b7f0 g     F .text	0000002c .hidden __aeabi_dcmpun
00009730 g     F .text	0000001c usb_serial_available
0000b7b4 g     F .text	00000012 .hidden __aeabi_dcmple
0000c864 g     F .text	000000ba strcpy
0000b6f0 g     F .text	0000007a .hidden __cmpdf2
00008bb8 g     F .text	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000ab08  w    F .text	000000ec yield
00006738 g     F .text	0000024c FatFile::write(void const*, unsigned int)
0000b6f0 g     F .text	0000007a .hidden __eqdf2
00007dc0  w    F .text	00000002 SdSpiCard::~SdSpiCard()
0000414c g     F .text	00000430 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
1fff1454 g     O .bss	00000268 storage
1fff09b4 g     O .data	00000018 usb_string_manufacturer_name_default
0000b260 g     F .text	0000005a .hidden __floatdidf
0000998c  w    F .text	00000048 hard_fault_isr
000099d4  w    F .text	00000006 dma_ch6_isr
1fff1ba4 g     O .bss	00000004 FsDateTime::callback
0000aca0 g     F .text	00000020 Print::println()
000099d4  w    F .text	00000006 uart0_lon_isr
00004030 g     F .text	0000011c ExFatFile::seekSet(unsigned long long)
00009e6c g     F .text	00000108 usb_rx_memory
00007d94  w    F .text	00000004 SdSpiCard::errorCode() const
000004a8  w    F .text	0000000c File::flush()
000099d4  w    F .text	00000006 dma_ch8_isr
0000c41c g     F .text	00000002 __malloc_unlock
000008d0  w    F .text	000000c0 SDFile::openNextFile(unsigned char)
1fff1ba8 g     O .bss	00000004 FsVolume::m_cwv
00005bf4 g     F .text	00000104 FatFile::open(FatFile*, char const*, int)
0000ad98 g     F .text	000000e0 analog_init
00009f74 g     F .text	00000084 usb_tx
000099d4  w    F .text	00000006 portcd_isr
0000cabc g     F .text	0000004a _vdprintf_r
0000fe00  w    O .text	0000005c vtable for SDFile
0000c2b4 g     F .text	000000c6 memmove
0000cedc g     F .text	0000004c _Balloc
000099d4  w    F .text	00000006 can1_rx_warn_isr
00010688 g       .ARM.exidx	00000000 __exidx_end
000099d4  w    F .text	00000006 dma_error_isr
00006c90 g     F .text	00000060 FatPartition::freeChain(unsigned long)
1fff1d28 g     O .bss	00000001 EventResponder::runningFromYield
000094d4 g     F .text	0000001a SdSpiArduinoDriver::receive()
00007f84 g     F .text	0000007c SdSpiCard::cardCommand(unsigned char, unsigned long)
000099d4  w    F .text	00000006 i2c0_isr
000014ac g     F .text	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000ac74 g     F .text	0000002c Print::write(unsigned char const*, unsigned int)
0000b6e0 g     F .text	0000008a .hidden __gtdf2
00006f74 g     F .text	00000024 FatFile::lfnChecksum(unsigned char*)
0000bb90 g     F .text	0000000c __errno
00000bc0  w    F .text	00000026 SDFile::isDirectory()
000017ac g     F .text	00000154 MTPStorage_SD::ScanDir(unsigned long)
000099d4  w    F .text	00000006 portd_isr
000099d4  w    F .text	00000006 enet_error_isr
0000065c  w    F .text	00000028 File::~File()
1fff1d18 g     O .bss	00000004 EventResponder::firstInterrupt
00001eac g     F .text	0000008e MTPD::GetObjectHandles(unsigned long, unsigned long)
00007dc4  w    F .text	0000000e SdSpiCard::~SdSpiCard()
00007b24 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
000099d4  w    F .text	00000006 tpm1_isr
00004ca4 g     F .text	0000003c ExFatPartition::rootLength()
00007d98  w    F .text	00000004 SdSpiCard::errorData() const
0000ac64  w    F .text	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00010144 g     O .text	00000200 digital_pin_to_info_PGM
1fff1d94 g     O .bss	00000004 errno
00008000 g     F .text	00000054 SdSpiCard::readOCR(unsigned long*)
000094f0 g     F .text	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00007650 g     F .text	00000412 FatFile::open(FatFile*, fname_t*, int)
00004ab0 g     F .text	0000004a ExFatPartition::fatGet(unsigned long, unsigned long*)
00010688 g       .ARM.exidx	00000000 _etext
1fff1438 g       .bss	00000000 _sbss
0000b77c g     F .text	00000010 .hidden __aeabi_cdcmple
000085c4 g     F .text	0000000c SdioCard::errorData() const
00008cc8 g     F .text	000000b4 SdioCard::writeSector(unsigned long, unsigned char const*)
000099d4  w    F .text	00000006 porte_isr
00000710 g     F .text	0000000c loop
000099d4  w    F .text	00000006 portb_isr
000099d4  w    F .text	00000006 spi1_isr
00002390 g     F .text	0000012c MTPD::GetStorageInfo(unsigned long)
000099d4  w    F .text	00000006 uart3_status_isr
00003d58 g     F .text	000000c4 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
000099d4  w    F .text	00000006 mcm_isr
000091ec g     F .text	000000cc SdioCard::readData(unsigned char*)
00001930 g     F .text	00000062 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00007ec8 g     F .text	00000080 SdSpiCard::readData(unsigned char*, unsigned int)
1fff1d1c g     O .bss	00000004 EventResponder::lastInterrupt
000099d4  w    F .text	00000006 uart1_status_isr
00000c7c  w    F .text	00000092 SDFile::seek(unsigned long, int)
00007b9c g     F .text	00000028 FsBaseFile::close()
00009584 g     F .text	00000134 memcpy
000099d4  w    F .text	00000006 randnum_isr
0000b76c g     F .text	00000020 .hidden __aeabi_cdrcmple
0000048c  w    F .text	0000000c File::available()
00000b54 g     F .text	0000001c MTPStorage_SD::freeClusters()
00001994 g     F .text	00000044 Storage_init()
00004b94 g     F .text	0000009c ExFatPartition::freeChain(unsigned long)
00001580 g     F .text	00000110 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00005ee8 g     F .text	0000002a FatFile::peek()
0000e520 g     F .text	000016e4 _svfprintf_r
0000b1f0 g     F .text	00000022 .hidden __floatsidf
000008bc  w    F .text	00000014 SDFile::whoami()
1fff16d0  w    O .bss	00000001 SDFile::name()::zeroterm
1fff1c08 g     O .bss	00000004 systick_millis_count
0000b6e8 g     F .text	00000082 .hidden __ltdf2
00000990 g     F .text	00000020 MTPStorage_SD::clusterCount()
0000548c g     F .text	000000d8 ExFatFile::rename(ExFatFile*, char const*)
0000998c  w    F .text	00000048 bus_fault_isr
00002eb8 g     F .text	000005b0 MTPD::loop()
000099d4  w    F .text	00000006 watchdog_isr
0000b86c g     F .text	00000000 .hidden __aeabi_uldivmod
000099d4  w    F .text	00000006 i2c1_isr
1fff1d0c g     O .bss	00000001 usb_configuration
000099d4  w    F .text	00000006 dma_ch11_isr
00003994  w    F .text	00000006 SdCardInterface::status()
00008d7c g     F .text	00000030 SdioCard::syncDevice()
00008a78 g     F .text	000000cc SdioCard::writeData(unsigned char const*)
00000000  w      *UND*	00000000 __fini_array_end
000009d4  w    F .text	00000058 StreamFile<FsBaseFile, unsigned long long>::available()
00005f14 g     F .text	0000004e FatFile::readDirCache(bool)
000004b4  w    F .text	0000000c File::seek(unsigned long, int)
000099d4  w    F .text	00000006 i2c2_isr
1fff09b4  w    O .data	00000018 usb_string_manufacturer_name
1fff1d88 g     O .bss	0000000c usb_rx_byte_count_data
000099d4  w    F .text	00000006 pit1_isr
1fff0a38 g     O .data	00000008 usb_string_mtp
0000bbec g     F .text	00000010 malloc
000099d4  w    F .text	00000006 dma_ch4_isr
000099d4  w    F .text	00000006 software_isr
0000fddc  w    O .text	00000024 vtable for FsFile
000099d4  w    F .text	00000006 dma_ch7_isr
000104f0 g     O .text	000000c8 __mprec_tens
0000aa40 g     F .text	000000c8 usb_init
00007dac  w    F .text	00000004 SdSpiCard::type() const
000099d4  w    F .text	00000006 lptmr_isr
1fff1d50 g     O .bss	00000004 __malloc_top_pad
00009af0 g     F .text	00000024 rtc_set
00007dd4 g     F .text	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005564 g     F .text	00000120 ExFatFile::truncate()
1fff0970 g     O .data	00000000 .hidden __dso_handle
0000b1d0 g     F .text	0000001e .hidden __aeabi_ui2d
0000cec0 g     F .text	0000001c _localeconv_r
00009ae0 g     F .text	00000010 attachInterruptVector
0000948c g     F .text	00000048 SdSpiArduinoDriver::deactivate()
0000d058 g     F .text	00000012 __i2b
1fff0970 g       .data	00000000 _sdata
00009580 g     F .text	00000002 usb_mtp_configure
000004e4  w    F .text	0000000c File::operator bool()
00006a94 g     F .text	0000000e FatCache::sync()
0000b89c g     F .text	000002e2 .hidden __udivmoddi4
000021f4 g     F .text	0000019c MTPD::getObjectPropValue(unsigned long, unsigned long)
0000af4c g     F .text	00000000 .hidden __aeabi_drsub
000059a0 g     F .text	00000042 FatFile::addCluster()
0000c800 g     F .text	00000024 _sbrk_r
00008054 g     F .text	0000004a SdSpiCard::readRegister(unsigned char, void*)
000086a0 g     F .text	00000020 SdioCard::type() const
00000480  w    F .text	0000000c File::write(void const*, unsigned int)
000001d0 g     F .text	000001f0 ResetHandler
000096b8 g     F .text	00000048 usb_serial_getchar
000099d4  w    F .text	00000006 can1_bus_off_isr
000099d4  w    F .text	00000006 ftm2_isr
00000ac4  w    F .text	0000004c SDFile::name()
1fff1d7c g     O .bss	00000008 usb_cdc_line_coding
00009b14 g     F .text	0000000a digitalWrite
1fff1d20 g     O .bss	00000004 EventResponder::lastYield
000099d4  w    F .text	00000006 uart5_status_isr
000099d4  w    F .text	00000006 lpuart0_status_isr
00003d28 g     F .text	0000002e ExFatFile::openRoot(ExFatVolume*)
00010370 g     O .text	00000006 usb_endpoint_config_table
000099d4  w    F .text	00000006 dma_ch9_isr
00000a44  w    F .text	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
000099d4  w    F .text	00000006 pit2_isr
0000b7a0 g     F .text	00000012 .hidden __aeabi_dcmplt
1fff1d4c g     O .bss	00000004 __malloc_max_sbrked_mem
00000b80  w    F .text	00000010 SDFile::position()
00009b20 g     F .text	0000000a pinMode
00008350 g     F .text	00000042 SdSpiCard::writeStop()
00001690 g     F .text	00000036 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00009db8 g     F .text	0000004c usb_free
000099d4  w    F .text	00000006 i2c3_isr
0000b214 g     F .text	0000003a .hidden __extendsfdf2
0000b510 g     F .text	000001d0 .hidden __aeabi_ddiv
0000af58 g     F .text	00000276 .hidden __adddf3
00002188 g     F .text	0000006c MTPD::getObjectPropsSupported(unsigned long)
00001a54 g     F .text	000000a8 MTPD::writestring(char const*)
00008414 g     F .text	00000032 SdSpiCard::writeData(unsigned char const*)
00000498  w    F .text	00000010 File::peek()
00006cf0 g     F .text	000000d6 FatPartition::freeClusterCount()
00003b04  w    F .text	000000b8 SDClass::open(char const*, unsigned char)
00010680 g       .ARM.exidx	00000000 __exidx_start
0000b2bc g     F .text	00000254 .hidden __aeabi_dmul
00008248 g     F .text	00000050 SdSpiCard::writeStart(unsigned long)
000099d4  w    F .text	00000006 pit0_isr
1fff1d24 g     O .bss	00000004 EventResponder::firstYield
000103d8 g     O .text	00000004 _global_impure_ptr
000007fc g     F .text	0000000c MTPStorage_SD::write(char const*, unsigned long)
000099d4  w    F .text	00000006 can1_error_isr
00000a90  w    F .text	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c420 g     F .text	000003de _realloc_r
00000b90  w    F .text	00000018 SDFile::read(void*, unsigned int)
0000bb9c g     F .text	00000050 __libc_init_array
1fff1d98 g       .bss	00000000 __bss_end
00000b10  w    F .text	00000044 SDFile::rewindDirectory()
000099d4  w    F .text	00000006 can0_wakeup_isr
00004694 g     F .text	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000085d0 g     F .text	0000001c SdioCard::readCID(CID*)
000051fc g     F .text	00000114 ExFatFile::addDirCluster()
000099d4  w    F .text	00000006 flash_cmd_isr
000083c0 g     F .text	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
00001168 g     F .text	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
000105b8 g     O .text	00000028 __mprec_bigtens
0000ac4c  w    F .text	00000004 usb_serial_class::clear()
0000b1d0 g     F .text	0000001e .hidden __floatunsidf
000099d4  w    F .text	00000006 uart2_status_isr
000099ec g     F .text	0000002c _sbrk
0000d2ec g     F .text	00000042 __mcmp
0000ff74  w    O .text	0000001c vtable for SDClass
000007c8  w    F .text	00000012 SDFile::operator bool()
1fff0980 g     O .data	00000004 __brkval
1fff1c04 g     O .bss	00000001 usb_cdc_line_rtsdtr
00009944 g     F .text	00000048 usb_serial_flush_callback
00010660 g     F .text	00000000 _init
00005ab8 g     F .text	0000002a FatFile::cacheDirEntry(unsigned char)
000099d4  w    F .text	00000006 svcall_isr
000039a0  w    F .text	00000062 SDClass::remove(char const*)
000008a0  w    F .text	0000001c SDFile::close()
000099d4  w    F .text	00000006 dma_ch15_isr
00000d74  w    F .text	0000005c SDFile::~SDFile()
00003930 g     F .text	00000020 day()
000099d4  w    F .text	00000006 uart1_error_isr
0000cc2c g     F .text	00000028 __libc_fini_array
000099d4  w    F .text	00000006 usbhs_phy_isr
1fff1d98 g       .bss	00000000 _ebss
00008c40 g     F .text	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00001bb8 g     F .text	00000214 MTPD::WriteDescriptor()
1fff0974 g     O .data	00000004 propertyListNum
00000a7c  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00006a18 g     F .text	0000007a FatCache::read(unsigned long, unsigned char)
0000cfbc g     F .text	00000040 __hi0bits
0000b81c g     F .text	0000004e .hidden __fixdfsi
00005310 g     F .text	00000072 ExFatFile::mkdir(ExFatFile*, ExName_t*)
000099d4 g     F .text	00000006 unused_isr
00001dcc g     F .text	000000de MTPD::WriteStorageIDs()
000099d4  w    F .text	00000006 spi0_isr
000099d4  w    F .text	00000006 dma_ch3_isr
0000399c  w    F .text	00000002 SDClass::~SDClass()
0000065c  w    F .text	00000028 File::~File()
00003970 g     F .text	00000024 year()
0000ad94 g     F .text	00000004 operator delete(void*, unsigned int)
000099d4  w    F .text	00000006 flash_error_isr
0000af58 g     F .text	00000276 .hidden __aeabi_dadd
0000b6e8 g     F .text	00000082 .hidden __ledf2
0000c824 g     F .text	0000003e strcat
000099d4  w    F .text	00000006 uart5_error_isr
000099d4  w    F .text	00000006 rtc_seconds_isr
000099d4  w    F .text	00000006 pdb_isr
0000d19c g     F .text	000000a0 __pow5mult
00006020 g     F .text	00000068 FatFile::rmdir()
0000b250 g     F .text	0000006a .hidden __aeabi_ul2d
0000998c  w    F .text	00000048 usage_fault_isr
000099d4  w    F .text	00000006 dac1_isr
00000000 g     O .text	000001d0 _VectorsFlash
00006bd0 g     F .text	000000c0 FatPartition::allocateCluster(unsigned long, unsigned long*)
000099d4  w    F .text	00000006 dma_ch14_isr
00003ab8  w    F .text	0000004c SDClass::exists(char const*)
00000000  w      *UND*	00000000 __deregister_frame_info
1fff1d84 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000ac3c g     F .text	00000010 systick_isr
000099d4  w    F .text	00000006 rtc_alarm_isr
00000504  w    F .text	0000000c File::isDirectory()
00007aa0 g     F .text	00000084 FatFile::getSFN(char*)
00008198 g     F .text	00000076 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
000099d4  w    F .text	00000006 dma_ch2_isr
1fff098c g     O .data	00000010 Serial
000099d4  w    F .text	00000006 ftm1_isr
0000ac6c  w    F .text	00000006 usb_serial_class::write(unsigned char)
00007c44 g     F .text	0000005e FsBaseFile::openNext(FsBaseFile*, int)
000099dc  w    F .text	0000000c startup_early_hook
000099d4  w    F .text	00000006 dma_ch13_isr
00004db0 g     F .text	000000c6 ExFatFile::addCluster()
0000fd04  w    O .text	0000005c vtable for File
000099d4  w    F .text	00000006 uart2_error_isr
00009700 g     F .text	00000030 usb_serial_peekchar
0000b7dc g     F .text	00000012 .hidden __aeabi_dcmpgt
00000f2c g     F .text	00000002 mtp_yield()
0000c1b0 g     F .text	00000000 memchr
00006b44 g     F .text	0000008a FatPartition::fatPut(unsigned long, unsigned long)
1fff0a74 g     O .data	00000016 usb_string_serial_number_default
0000998c g     F .text	00000048 fault_isr
0000ccf0 g     F .text	000001d0 _free_r
00008a74 g     F .text	00000004 SdioCard::readStop()
00004754 g     F .text	0000008c FsCache::get(unsigned long, unsigned char)
0000b7c8 g     F .text	00000012 .hidden __aeabi_dcmpge
000099d4  w    F .text	00000006 usb_charge_isr
0000ac5c  w    F .text	00000004 usb_serial_class::flush()
000099d4  w    F .text	00000006 cmt_isr
0000af54 g     F .text	0000027a .hidden __aeabi_dsub
00006dc8 g     F .text	00000146 FatPartition::init(BlockDeviceInterface*, unsigned char)
000099d4  w    F .text	00000006 usbhs_isr
00006270 g     F .text	00000188 FatFile::mkdir(FatFile*, fname_t*)
1fff1434 g     O .data	00000004 __malloc_sbrk_base
0000ac54  w    F .text	00000004 usb_serial_class::read()
000099d4  w    F .text	00000006 ftm3_isr
00000548  w    F .text	0000000c File::rewindDirectory()
000099d4  w    F .text	00000006 tsi0_isr
00007368 g     F .text	000001b2 FatFile::remove()
0000b250 g     F .text	0000006a .hidden __floatundidf
00009a18  w    F .text	00000002 __cxa_pure_virtual
0000d23c g     F .text	000000ae __lshift
000063f8 g     F .text	000000fc FatFile::mkdir(FatFile*, char const*, bool)
000099d4  w    F .text	00000006 spi2_isr
00004d1c g     F .text	00000058 exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00001118 g     F .text	00000050 MTPStorage_SD::GetNextObjectHandle()
0000fc04 g     F .text	00000100 __ssprint_r
0000d500 g     F .text	0000005e _vasnprintf_r
0000ad8c  w    F .text	00000002 serialEvent()
1fff1c85 g     O .bss	00000001 usb_reboot_timer
0000cb68 g     F .text	000000a4 __register_exitproc
0000457c g     F .text	00000116 ExFatFile::open(ExFatFile*, char const*, int)
0000ca1c g     F .text	000000a0 strncmp
00005384 g     F .text	00000108 ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000974c g     F .text	00000038 usb_serial_flush_input
00004c30 g     F .text	00000072 ExFatPartition::freeClusterCount()
000011fc g     F .text	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000d06c g     F .text	00000130 __multiply
0000988c g     F .text	00000018 usb_serial_putchar
00000022 g       *ABS*	00000000 _teensy_model_identifier
1fff1d54 g     O .bss	00000028 __malloc_current_mallinfo
0000d444 g     F .text	000000ba __d2b
1fff1d2c g     O .bss	00000018 HardwareSerial::s_serials_with_serial_events
000099d4  w    F .text	00000006 can0_bus_off_isr
00008690  w    F .text	0000000e SdioCard::~SdioCard()
00003c68 g     F .text	000000be ExFatFile::getName(char*, unsigned int)
000007dc g     F .text	00000004 MTPStorage_SD::readonly()
1fff1d01 g     O .bss	00000001 usb_rx_memory_needed
00008b44 g     F .text	00000074 SdioCard::writeStart(unsigned long)
00009ff8 g     F .text	00000a48 usb_isr
0000bb84 g     F .text	0000000c __cxa_atexit
00003e1c g     F .text	000001e4 ExFatFile::read(void*, unsigned int)
0000b1f0 g     F .text	00000022 .hidden __aeabi_i2d
00000a2c  w    F .text	00000018 SDFile::peek()
000047e0 g     F .text	0000000e FsCache::sync()
0000c250 g     F .text	00000062 memcmp
00010344  w    O .text	00000028 vtable for usb_serial_class
00009510 g     F .text	00000016 SdSpiArduinoDriver::send(unsigned char)
000099d4  w    F .text	00000006 uart3_error_isr
00002bc0 g     F .text	0000007c MTPD::GetObject(unsigned long)
0000957c g     F .text	00000004 sdCsWrite(unsigned char, bool)
0000bb80  w    F .text	00000002 .hidden __aeabi_ldiv0
00004fa0 g     F .text	00000072 ExFatFile::rmdir()
000099d4  w    F .text	00000006 porta_isr
000024bc g     F .text	000006e6 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000b510 g     F .text	000001d0 .hidden __divdf3
1fff03d0 g     O .usbbuffers	000005a0 usb_buffer_memory
000080b0 g     F .text	00000098 SdSpiCard::sectorCount()
000099d4  w    F .text	00000006 low_voltage_isr
1fff1028 g     O .data	00000408 __malloc_av_
000099d4  w    F .text	00000006 can0_error_isr
00009c0c g     F .text	0000016c _init_Teensyduino_internal_
00000be8  w    F .text	00000014 SDFile::flush()
0000b2bc g     F .text	00000254 .hidden __muldf3
000098ec g     F .text	00000058 usb_serial_flush_output
000099d4  w    F .text	00000006 dma_ch12_isr
0000c418 g     F .text	00000002 __malloc_lock
00000000  w      *UND*	00000000 __fini_array_start
000070fc g     F .text	0000026c FatFile::parsePathName(char const*, fname_t*, char const**)
000099d4  w    F .text	00000006 can1_wakeup_isr
1fff0200 g     O .dmabuffers	000001d0 _VectorsRam
00009528 g     F .text	00000052 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000d560 g     F .text	0000005e _calloc_r
000099d4  w    F .text	00000006 pit3_isr
00002c3c g     F .text	0000006e MTPD::read(char*, unsigned long)
1fff16e8 g     O .bss	00000004 getTimePtr
1fff0988 g     O .data	00000001 yield_active_check_flags
000099d4  w    F .text	00000006 enet_rx_isr
00005194 g     F .text	00000066 ExFatFile::sync()
000064f4 g     F .text	00000238 FatFile::rename(FatFile*, char const*)
000087cc g     F .text	0000001c SdioCard::isBusy()
000099d4  w    F .text	00000006 portc_isr
00008210 g     F .text	00000038 SdSpiCard::readStop()
0000c37c g     F .text	0000009a memset
0000ad7c g     F .text	00000010 main
1fff1d48 g     O .bss	00000004 __malloc_max_total_mem
000047f0 g     F .text	000000b4 ExFatPartition::bitmapFind(unsigned long, unsigned long)
00003830 g     F .text	000000a0 now()
00005684 g     F .text	000002e0 ExFatFile::write(void const*, unsigned int)
0000fe5c g     O .text	00000050 vtable for MTPStorage_SD
00002d1c g     F .text	00000126 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000998c  w    F .text	00000048 memmanage_fault_isr
00000c24  w    F .text	00000058 SDFile::available()
000004d8  w    F .text	0000000c File::close()
0000ae78 g     F .text	0000007c usb_init_serialnumber
0001067c g       .text	00000000 __init_array_end
0000d6e8 g     F .text	00000e34 _dtoa_r
0000bc0c g     F .text	00000570 _malloc_r
1fff1d44 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
000099d4  w    F .text	00000006 debugmonitor_isr
0000cb20 g     F .text	0000001a __ascii_wctomb
00007b24 g     F .text	00000078 FsBaseFile::FsBaseFile(FsBaseFile const&)
0000b260 g     F .text	0000005a .hidden __aeabi_l2d
00003660 g     F .text	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
00009b2c g     F .text	00000044 micros
00000000  w      *UND*	00000000 __libc_fini
00000510  w    F .text	00000038 File::openNextFile(unsigned char)
000099d4  w    F .text	00000006 cmp1_isr
000099d4  w    F .text	00000006 ftm0_isr
00005014 g     F .text	00000180 ExFatFile::syncDir()
0000cc54 g     F .text	0000009c _malloc_trim_r
1fff0a70 g     O .data	00000004 string0
00009784 g     F .text	00000108 usb_serial_write
000099e8  w    F .text	00000002 startup_late_hook
0000ac58  w    F .text	00000004 usb_serial_class::available()
1fff099c g     O .data	00000001 _serialEvent_default
00002cac g     F .text	00000044 MTPD::readstring(char*)
0000672c g     F .text	0000000c FatFile::sync()
00003a68  w    F .text	00000050 SDClass::mkdir(char const*)
1fff0a40  w    O .data	0000002e usb_string_product_name
00009b70 g     F .text	0000009c delay
0000b6f0 g     F .text	0000007a .hidden __nedf2
000099d4  w    F .text	00000006 tpm0_isr
000007e4 g     F .text	00000018 MTPStorage_SD::CloseIndex()
0001067c g     F .fini	00000000 _fini
000019d8 g     F .text	00000018 MTPD::get_buffer()
000004f0  w    F .text	00000014 File::name()
00003950 g     F .text	00000020 month()
00008148 g     F .text	00000050 SdSpiCard::readStart(unsigned long)
000046a4 g     F .text	0000003a ExFatFile::openNext(ExFatFile*, int)
0000acd0 g     F .text	0000001c Print::printf(char const*, ...)
000099d4  w    F .text	00000006 i2s0_rx_isr
000099d4  w    F .text	00000006 uart4_error_isr
0000ad6c g     F .text	00000010 Print::print(long)
00005b88 g     F .text	0000001e FatFile::close()
000004c0  w    F .text	0000000c File::position()
00000d10  w    F .text	00000064 SDFile::~SDFile()
00006aa4 g     F .text	0000000c FatPartition::clusterStartSector(unsigned long) const
0000cc20 g     F .text	0000000c atexit
00008618  w    F .text	00000002 SdioCard::~SdioCard()
00000ba8  w    F .text	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
00000580  w    F .text	00000018 File::write(unsigned char)
0000cb3c g     F .text	0000002c _write_r
1fff16f4 g     O .bss	000004b0 SD
00008928 g     F .text	000000d4 SdioCard::erase(unsigned long, unsigned long)
000099d4  w    F .text	00000006 can0_message_isr
1fff0eb8 g     O .data	00000004 _impure_ptr
0000fd94  w    O .text	00000024 vtable for Stream
000099d4  w    F .text	00000006 can1_message_isr
00004000 g     F .text	0000002e ExFatFile::peek()
0000fdb8  w    O .text	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000099d4  w    F .text	00000006 nmi_isr
0000751c g     F .text	00000134 FatFile::lfnUniqueSfn(fname_t*)
00000c10  w    F .text	00000014 SDFile::write(void const*, unsigned int)
00007d68 g     F .text	00000028 FsVolume::open(char const*, int)
000085b8 g     F .text	0000000c SdioCard::errorCode() const
00005cf8 g     F .text	0000000e FatFile::open(FatVolume*, char const*, int)
00000bfc  w    F .text	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
0001066c g       .text	00000000 __preinit_array_end
00000808 g     F .text	00000098 dateTime(unsigned short*, unsigned short*, unsigned char*)
00007dc0  w    F .text	00000002 SdSpiCard::~SdSpiCard()
000099d4  w    F .text	00000006 sdhc_isr
000038f0 g     F .text	00000020 minute()
000048a4 g     F .text	00000110 ExFatPartition::init(BlockDeviceInterface*, unsigned char)
00004a7c g     F .text	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008298 g     F .text	000000b8 SdSpiCard::erase(unsigned long, unsigned long)
00001268 g     F .text	00000188 MTPStorage_SD::DeleteObject(unsigned long)
0000c17c g     F .text	0000002a __ascii_mbtowc
00007e88 g     F .text	0000003e SdSpiCard::isBusy()
00010094 g     O .text	00000058 vtable for SdSpiCard
000080a8  w    F .text	00000008 SdSpiCard::readCID(CID*)
00000684 g     F .text	0000008c setup
00010378 g     O .text	00000060 usb_descriptor_list
00009e04 g     F .text	0000003c usb_rx
0000871c g     F .text	00000020 SdioCard::status()
00000dd0 g     F .text	0000015c MTPStorage_SD::ResetIndex()
000099d4  w    F .text	00000006 dma_ch10_isr
00000470  w    F .text	00000002 Print::flush()
000099d4  w    F .text	00000006 uart0_error_isr
000004cc  w    F .text	0000000c File::size()
00003a04  w    F .text	00000062 SDClass::rmdir(char const*)
00009d78 g     F .text	00000040 usb_malloc
00005d08 g     F .text	000001de FatFile::read(void*, unsigned int)
000099d4  w    F .text	00000006 i2s0_isr
00005ba8 g     F .text	0000004a FatFile::openRoot(FatVolume*)
20030000 g       .bss	00000000 _estack
00007d90 g     F .text	00000004 operator new(unsigned int, unsigned long*)
000080a0  w    F .text	00000008 SdSpiCard::readCSD(csd_t*)
00000554  w    F .text	0000002c File::read()
000098a4 g     F .text	00000048 usb_serial_write_buffer_free
00007f48 g     F .text	0000003c SdSpiCard::waitNotBusy(unsigned short)
000099d4  w    F .text	00000006 enet_timer_isr
0000b78c g     F .text	00000012 .hidden __aeabi_dcmpeq
000005c0  w    F .text	00000030 File::~File()
0000acc0  w    F .text	0000000e _write
1fff1438 g       .data	00000000 _edata
00004b44 g     F .text	0000004e ExFatPartition::fatPut(unsigned long, unsigned long)
00001f3c g     F .text	0000024c MTPD::GetObjectInfo(unsigned long)
00008618  w    F .text	00000002 SdioCard::~SdioCard()
000099d4  w    F .text	00000006 i2s0_tx_isr
000099d4  w    F .text	00000006 adc1_isr
00008394 g     F .text	0000002c SdSpiCard::syncDevice()
000059e4 g     F .text	000000d4 FatFile::addDirCluster()
00000474  w    F .text	0000000c File::read(void*, unsigned int)
0000ac60  w    F .text	00000004 usb_serial_class::availableForWrite()
000099d4  w    F .text	00000006 cmp0_isr
0000aef4 g     F .text	0000004c ultoa
0000399c  w    F .text	00000002 SDClass::~SDClass()
00003910 g     F .text	00000020 second()
00007bc4 g     F .text	00000080 FsBaseFile::open(FsVolume*, char const*, int)
000010c8 g     F .text	0000004e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000ad90 g     F .text	00000004 operator new(unsigned int)
0000abf4 g     F .text	00000044 EventResponder::runFromInterrupt()
1fff1430 g     O .data	00000004 __malloc_trim_threshold
0000ac50  w    F .text	00000004 usb_serial_class::peek()
1fff16bc g     O .bss	00000014 mtpd
0000d330 g     F .text	00000114 __mdiff
00008608 g     F .text	00000010 SdioCard::readOCR(unsigned long*)
0000b81c g     F .text	0000004e .hidden __aeabi_d2iz
00004afc g     F .text	00000048 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
1fff1bf4 g     O .bss	00000001 usb_cdc_transmit_flush_timer
000099d4  w    F .text	00000006 pit_isr
000038d0 g     F .text	00000020 hour()
00008a74 g     F .text	00000004 SdioCard::writeStop()
00007db0  w    F .text	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00003c54 g     F .text	00000014 ExFatFile::close()
000103ec g     O .text	00000101 _ctype_
000099d4  w    F .text	00000006 dac0_isr
00007d9c  w    F .text	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
0001066c g       .text	00000000 __init_array_start
0000bb80  w    F .text	00000002 .hidden __aeabi_idiv0
000099d4  w    F .text	00000006 can1_tx_warn_isr
00000f30 g     F .text	000000d0 MTPStorage_SD::OpenIndex()
0000b7f0 g     F .text	0000002c .hidden __unorddf2
000099d4  w    F .text	00000006 uart0_status_isr
000099d4  w    F .text	00000006 mcg_isr
00000400 g     O .text	00000010 flashconfigbytes
0000c940 g     F .text	000000dc strlen
00006f98 g     F .text	0000002e FatFile::openCluster(FatFile*)
0000b77c g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000b6e0 g     F .text	0000008a .hidden __gedf2
00005f64 g     F .text	000000ba FatFile::seekSet(unsigned long)
000016c8 g     F .text	000000e4 MTPStorage_SD::Create(unsigned long, bool, char const*)
1fff0a40 g     O .data	0000002e usb_string_product_name_default
0000cb08 g     F .text	00000018 vdprintf
000099d4  w    F .text	00000006 dma_ch1_isr
000088bc g     F .text	0000006c SdioCard::sectorCount()
00007ca4 g     F .text	000000c4 FsVolume::begin(BlockDeviceInterface*)
00009e40 g     F .text	0000002c usb_tx_packet_count
000061b8 g     F .text	000000b8 FatFile::openNext(FatFile*, int)
000100ec g     O .text	00000058 vtable for SdioCard
0000b214 g     F .text	0000003a .hidden __aeabi_f2d
000099d4  w    F .text	00000006 dma_ch5_isr
000011bc g     F .text	00000040 MTPStorage_SD::close()
00006fc8 g     F .text	00000134 FatFile::getName(char*, unsigned int)
000099d4  w    F .text	00000006 can0_rx_warn_isr
000013f0 g     F .text	000000bc MTPStorage_SD::rename(unsigned long, char const*)
000099d4  w    F .text	00000006 can0_tx_warn_isr
000099d4  w    F .text	00000006 uart4_status_isr
000092b8 g     F .text	00000074 SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
000093fc g     F .text	00000090 SdSpiArduinoDriver::activate()
0000af54 g     F .text	0000027a .hidden __subdf3
0001066c g       .text	00000000 __preinit_array_start
000049b4 g     F .text	000000c8 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000011a4 g     F .text	00000016 MTPStorage_SD::GetSize(unsigned long)
00000598  w    F .text	00000028 File::whoami()
0000cffc g     F .text	0000005a __lo0bits
000007e0 g     F .text	00000004 MTPStorage_SD::has_directories()
00006088 g     F .text	00000130 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
0000af40 g     F .text	0000000a __aeabi_atexit
00002ba4 g     F .text	0000001a MTPD::receive_buffer()
00000000  w      *UND*	00000000 __register_frame_info
000009b0 g     F .text	00000024 MTPStorage_SD::clusterSize()
00004e78 g     F .text	00000126 ExFatFile::remove()
000099d4  w    F .text	00000006 cmp2_isr
0000ac38 g     F .text	00000004 pendablesrvreq_isr
00002e44 g     F .text	00000072 MTPD::SendObject()
0000046c  w    F .text	00000004 Print::availableForWrite()
1fff0ebc g     O .data	0000016c __global_locale
000099d4  w    F .text	00000006 wakeup_isr
00008e58 g     F .text	00000394 SdioCard::begin(SdioConfig)
00004748 g     F .text	0000000c FsCache::invalidate()
000099d4  w    F .text	00000006 cmp3_isr
00003668 g     F .text	000001b0 breakTime(long, tmElements_t&)
0000acec g     F .text	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00006ab0 g     F .text	00000092 FatPartition::fatGet(unsigned long, unsigned long*)
0000bbfc g     F .text	00000010 free
000099d4  w    F .text	00000006 tpm2_isr
0000cf3c g     F .text	00000080 __multadd
0000cf28 g     F .text	00000012 _Bfree
00000b70  w    F .text	00000010 SDFile::size()
000099d4  w    F .text	00000006 dma_ch0_isr
00000d74  w    F .text	0000005c SDFile::~SDFile()
1fff0a74  w    O .data	00000016 usb_string_serial_number
000099d4  w    F .text	00000006 enet_tx_isr
00004ce0 g     F .text	0000003a exFatHashName(char const*, unsigned int, unsigned short)
0000932c g     F .text	000000d0 SdioCard::readSector(unsigned long, unsigned char*)
000085ec g     F .text	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text:

00000000 <_VectorsFlash>:
  str = fsFmtField(str, 2*(time & 31) + sec100/100, '.');
  *--str = ':';
  return fsFmtTime(str, time);
}
//------------------------------------------------------------------------------
char* fsFmtTimeZone(char* str, int8_t tz) {
       0:	... ............
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      10:	................
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
      20:	................
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      30:	........9...=...
  }
}  // namespace FsDateTime
//------------------------------------------------------------------------------
static char* fsFmtField(char* str, uint16_t n, char sep) {
  if (sep) {
    *--str = sep;
      40:	................
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      50:	................
      tz = -tz;
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      60:	................
      str = fsFmtField(str, 15*(tz%4), 0);
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
      70:	................
    } else {
      sign = '+';
      tz &= 0X7F;
    }
    if (tz) {
      str = fsFmtField(str, 15*(tz%4), 0);
      80:	................
      90:	................
      a0:	................
      b0:	................
      c0:	................
      d0:	................
      e0:	................
      f0:	................
     100:	................
     110:	................
     120:	................
     130:	................
     140:	................
     150:	................
     160:	................
     170:	................
     180:	................
     190:	................
     1a0:	................
     1b0:	................
     1c0:	................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	ldr	r3, [pc, #356]	; (338 <ResetHandler+0x168>)
     1d2:	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	movw	r2, #55592	; 0xd928
     1de:	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	nop
	__asm__ volatile ("nop");
     1e2:	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	bl	99dc <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	ldr	r3, [pc, #336]	; (33c <ResetHandler+0x16c>)
     1ea:	mov.w	r2, #184549376	; 0xb000000
     1ee:	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	ldr	r2, [pc, #332]	; (340 <ResetHandler+0x170>)
     1f2:	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	ldr	r2, [pc, #332]	; (344 <ResetHandler+0x174>)
     1f6:	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	ldr	r3, [pc, #332]	; (348 <ResetHandler+0x178>)
     1fa:	mov.w	r2, #15728640	; 0xf00000
     1fe:	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	ldr	r3, [pc, #328]	; (34c <ResetHandler+0x17c>)
     202:	ldr	r2, [pc, #332]	; (350 <ResetHandler+0x180>)
     204:	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     206:	ldr	r3, [pc, #332]	; (354 <ResetHandler+0x184>)
     208:	ldrb	r2, [r3, #0]
     20a:	lsls	r1, r2, #28
     20c:	bpl.n	216 <ResetHandler+0x46>
     20e:	ldrb	r2, [r3, #0]
     210:	orr.w	r2, r2, #8
     214:	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     216:	ldr	r3, [pc, #320]	; (358 <ResetHandler+0x188>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     218:	ldr	r1, [pc, #320]	; (35c <ResetHandler+0x18c>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21a:	movs	r2, #170	; 0xaa
     21c:	strb	r2, [r3, #0]
     21e:	ldr	r2, [pc, #320]	; (360 <ResetHandler+0x190>)
     220:	ldr	r3, [pc, #320]	; (364 <ResetHandler+0x194>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     222:	cmp	r3, r1
     224:	bcs.n	230 <ResetHandler+0x60>
     226:	ldr.w	r0, [r2, #4]!
     22a:	str.w	r0, [r3], #4
     22e:	b.n	222 <ResetHandler+0x52>
     230:	ldr	r3, [pc, #308]	; (368 <ResetHandler+0x198>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     232:	ldr	r1, [pc, #312]	; (36c <ResetHandler+0x19c>)
     234:	movs	r2, #0
     236:	cmp	r3, r1
     238:	bcs.n	240 <ResetHandler+0x70>
     23a:	str.w	r2, [r3], #4
     23e:	b.n	236 <ResetHandler+0x66>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     240:	ldr	r1, [pc, #300]	; (370 <ResetHandler+0x1a0>)
     242:	ldr	r2, [pc, #304]	; (374 <ResetHandler+0x1a4>)
     244:	movs	r3, #0
     246:	ldr.w	r0, [r2, r3, lsl #2]
     24a:	str.w	r0, [r1, r3, lsl #2]
     24e:	adds	r3, #1
     250:	cmp	r3, #116	; 0x74
     252:	bne.n	246 <ResetHandler+0x76>
     254:	ldr	r3, [pc, #288]	; (378 <ResetHandler+0x1a8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     256:	ldr	r2, [pc, #292]	; (37c <ResetHandler+0x1ac>)
     258:	movs	r1, #128	; 0x80
     25a:	strb.w	r1, [r3], #1
     25e:	cmp	r3, r2
     260:	bne.n	25a <ResetHandler+0x8a>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     262:	ldr	r3, [pc, #284]	; (380 <ResetHandler+0x1b0>)
     264:	ldr	r2, [pc, #264]	; (370 <ResetHandler+0x1a0>)
     266:	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     268:	ldr	r3, [pc, #280]	; (384 <ResetHandler+0x1b4>)
     26a:	movs	r2, #138	; 0x8a
     26c:	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     26e:	sub.w	r3, r3, #4096	; 0x1000
     272:	movs	r2, #36	; 0x24
     274:	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     276:	movs	r2, #160	; 0xa0
     278:	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     27a:	ldrb	r2, [r3, #6]
     27c:	lsls	r2, r2, #30
     27e:	bpl.n	27a <ResetHandler+0xaa>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     280:	ldrb	r2, [r3, #6]
     282:	lsls	r4, r2, #27
     284:	bmi.n	280 <ResetHandler+0xb0>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     286:	ldr	r2, [pc, #256]	; (388 <ResetHandler+0x1b8>)
     288:	ldrb	r3, [r2, #6]
     28a:	and.w	r3, r3, #12
     28e:	cmp	r3, #8
     290:	ldr	r3, [pc, #244]	; (388 <ResetHandler+0x1b8>)
     292:	bne.n	288 <ResetHandler+0xb8>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(2);
    #elif F_CPU == 120000000
	MCG_C5 = MCG_C5_PRDIV0(1);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(14);
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     294:	movs	r2, #1
     296:	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
     298:	movs	r2, #72	; 0x48
     29a:	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     29c:	ldrb	r2, [r3, #6]
     29e:	lsls	r0, r2, #26
     2a0:	bpl.n	29c <ResetHandler+0xcc>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2a2:	ldr	r2, [pc, #228]	; (388 <ResetHandler+0x1b8>)
     2a4:	ldrb	r1, [r2, #6]
     2a6:	ldr	r3, [pc, #224]	; (388 <ResetHandler+0x1b8>)
     2a8:	lsls	r1, r1, #25
     2aa:	bpl.n	2a4 <ResetHandler+0xd4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     2ac:	ldr	r2, [pc, #220]	; (38c <ResetHandler+0x1bc>)
     2ae:	ldr	r1, [pc, #224]	; (390 <ResetHandler+0x1c0>)
     2b0:	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2b2:	movs	r1, #2
     2b4:	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2b6:	movs	r2, #32
     2b8:	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ba:	ldrb	r2, [r3, #6]
     2bc:	and.w	r2, r2, #12
     2c0:	cmp	r2, #12
     2c2:	bne.n	2ba <ResetHandler+0xea>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2c4:	ldr	r3, [pc, #204]	; (394 <ResetHandler+0x1c4>)
     2c6:	ldr	r2, [pc, #208]	; (398 <ResetHandler+0x1c8>)
     2c8:	str	r2, [r3, #0]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2ca:	ldr	r2, [pc, #208]	; (39c <ResetHandler+0x1cc>)
     2cc:	ldr	r4, [pc, #208]	; (3a0 <ResetHandler+0x1d0>)
     2ce:	ldr	r3, [r2, #0]
     2d0:	ands.w	r3, r3, #256	; 0x100
     2d4:	bne.n	2de <ResetHandler+0x10e>
		RTC_SR = 0;
     2d6:	str	r3, [r4, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2d8:	mov.w	r3, #5376	; 0x1500
     2dc:	str	r3, [r2, #0]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2de:	ldr	r3, [pc, #196]	; (3a4 <ResetHandler+0x1d4>)
     2e0:	ldr	r2, [pc, #196]	; (3a8 <ResetHandler+0x1d8>)
     2e2:	str	r2, [r3, #0]
	SYST_CVR = 0;
     2e4:	movs	r2, #0
     2e6:	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2e8:	movs	r2, #7
     2ea:	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ee:	ldr	r2, [pc, #188]	; (3ac <ResetHandler+0x1dc>)
     2f0:	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2f4:	cpsie	i

	_init_Teensyduino_internal_();
     2f6:	bl	9c0c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2fa:	ldr	r3, [r4, #0]
     2fc:	lsls	r2, r3, #31
     2fe:	bpl.n	30c <ResetHandler+0x13c>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	ldr	r0, [pc, #172]	; (3b0 <ResetHandler+0x1e0>)
     302:	bl	9af0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     306:	ldr	r3, [pc, #172]	; (3b4 <ResetHandler+0x1e4>)
     308:	ldr	r2, [pc, #172]	; (3b8 <ResetHandler+0x1e8>)
     30a:	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     30c:	ldr	r3, [pc, #172]	; (3bc <ResetHandler+0x1ec>)
     30e:	ldrb	r3, [r3, #0]
     310:	lsls	r3, r3, #25
     312:	bpl.n	328 <ResetHandler+0x158>
     314:	ldr	r4, [pc, #156]	; (3b4 <ResetHandler+0x1e4>)
     316:	ldr	r3, [pc, #160]	; (3b8 <ResetHandler+0x1e8>)
     318:	ldr	r2, [r4, #0]
     31a:	cmp	r2, r3
     31c:	bne.n	328 <ResetHandler+0x158>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31e:	ldr	r0, [pc, #144]	; (3b0 <ResetHandler+0x1e0>)
     320:	bl	9af0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     324:	movs	r3, #0
     326:	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     328:	bl	bb9c <__libc_init_array>

	startup_late_hook();
     32c:	bl	99e8 <startup_late_hook>
	main();
     330:	bl	ad7c <main>
     334:	b.n	334 <ResetHandler+0x164>
     336:	nop
     338:	.word	0x4005200e
     33c:	.word	0x40048030
     340:	.word	0x00043f82
     344:	.word	0x2b000001
     348:	.word	0xe000ed88
     34c:	.word	0xe0082000
     350:	.word	0x85000003
     354:	.word	0x4007d002
     358:	.word	0x4007e000
     35c:	.word	0x1fff1438
     360:	.word	0x00010684
     364:	.word	0x1fff0970
     368:	.word	0x1fff1438
     36c:	.word	0x1fff1d98
     370:	.word	0x1fff0200
     374:	.word	0x00000000
     378:	.word	0xe000e400
     37c:	.word	0xe000e464
     380:	.word	0xe000ed08
     384:	.word	0x40065000
     388:	.word	0x40064000
     38c:	.word	0x40048044
     390:	.word	0x01030000
     394:	.word	0x40048004
     398:	.word	0x000510c0
     39c:	.word	0x4003d010
     3a0:	.word	0x4003d014
     3a4:	.word	0xe000e014
     3a8:	.word	0x000176ff
     3ac:	.word	0x20200000
     3b0:	.word	0x00000031
     3b4:	.word	0x4003e01c
     3b8:	.word	0x5a94c3a5
     3bc:	.word	0x4007f000
     3c0:	.word	0xffffffff
     3c4:	.word	0xffffffff
     3c8:	.word	0xffffffff
     3cc:	.word	0xffffffff
     3d0:	.word	0xffffffff
     3d4:	.word	0xffffffff
     3d8:	.word	0xffffffff
     3dc:	.word	0xffffffff
     3e0:	.word	0xffffffff
     3e4:	.word	0xffffffff
     3e8:	.word	0xffffffff
     3ec:	.word	0xffffffff
     3f0:	.word	0xffffffff
     3f4:	.word	0xffffffff
     3f8:	.word	0xffffffff
     3fc:	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	................

00000410 <__do_global_dtors_aux>:
     410:	push	{r4, lr}
     412:	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	ldrb	r3, [r4, #0]
     416:	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	nop.w
     422:	movs	r3, #1
     424:	strb	r3, [r4, #0]
     426:	pop	{r4, pc}
     428:	.word	0x1fff1438
     42c:	.word	0x00000000
     430:	.word	0x00010680

00000434 <frame_dummy>:
     434:	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	push	{r4, lr}
     438:	cbz	r3, 442 <frame_dummy+0xe>
     43a:	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	nop.w
     442:	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	ldr	r3, [r0, #0]
     446:	cbnz	r3, 44a <frame_dummy+0x16>
     448:	pop	{r4, pc}
     44a:	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	cmp	r3, #0
     44e:	beq.n	448 <frame_dummy+0x14>
     450:	ldmia.w	sp!, {r4, lr}
     454:	bx	r3
     456:	nop
     458:	.word	0x00000000
     45c:	.word	0x1fff143c
     460:	.word	0x00010680
     464:	.word	0x1fff1438
     468:	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	movs	r0, #0
     46e:	bx	lr

00000470 <Print::flush()>:
	virtual void flush()				{ }
     470:	bx	lr
     472:	nop

00000474 <File::read(void*, unsigned int)>:
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
     474:	ldr	r0, [r0, #16]
     476:	cbz	r0, 47e <File::read(void*, unsigned int)+0xa>
     478:	ldr	r3, [r0, #0]
     47a:	ldr	r3, [r3, #40]	; 0x28
     47c:	bx	r3
	}
     47e:	bx	lr

00000480 <File::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     480:	ldr	r0, [r0, #16]
     482:	cbz	r0, 48a <File::write(void const*, unsigned int)+0xa>
     484:	ldr	r3, [r0, #0]
     486:	ldr	r3, [r3, #44]	; 0x2c
     488:	bx	r3
	}
     48a:	bx	lr

0000048c <File::available()>:
	virtual int available() {
		return (f) ? f->available() : 0;
     48c:	ldr	r0, [r0, #16]
     48e:	cbz	r0, 496 <File::available()+0xa>
     490:	ldr	r3, [r0, #0]
     492:	ldr	r3, [r3, #16]
     494:	bx	r3
	}
     496:	bx	lr

00000498 <File::peek()>:
	virtual int peek() {
		return (f) ? f->peek() : -1;
     498:	ldr	r0, [r0, #16]
     49a:	cbz	r0, 4a2 <File::peek()+0xa>
     49c:	ldr	r3, [r0, #0]
     49e:	ldr	r3, [r3, #24]
     4a0:	bx	r3
	}
     4a2:	mov.w	r0, #4294967295
     4a6:	bx	lr

000004a8 <File::flush()>:
	virtual void flush() {
		if (f) f->flush();
     4a8:	ldr	r0, [r0, #16]
     4aa:	cbz	r0, 4b2 <File::flush()+0xa>
     4ac:	ldr	r3, [r0, #0]
     4ae:	ldr	r3, [r3, #12]
     4b0:	bx	r3
     4b2:	bx	lr

000004b4 <File::seek(unsigned long, int)>:
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
     4b4:	ldr	r0, [r0, #16]
     4b6:	cbz	r0, 4be <File::seek(unsigned long, int)+0xa>
     4b8:	ldr	r3, [r0, #0]
     4ba:	ldr	r3, [r3, #48]	; 0x30
     4bc:	bx	r3
	}
     4be:	bx	lr

000004c0 <File::position()>:
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
     4c0:	ldr	r0, [r0, #16]
     4c2:	cbz	r0, 4ca <File::position()+0xa>
     4c4:	ldr	r3, [r0, #0]
     4c6:	ldr	r3, [r3, #52]	; 0x34
     4c8:	bx	r3
	}
     4ca:	bx	lr

000004cc <File::size()>:
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
     4cc:	ldr	r0, [r0, #16]
     4ce:	cbz	r0, 4d6 <File::size()+0xa>
     4d0:	ldr	r3, [r0, #0]
     4d2:	ldr	r3, [r3, #56]	; 0x38
     4d4:	bx	r3
	}
     4d6:	bx	lr

000004d8 <File::close()>:
	virtual void close() {
		if (f) f->close();
     4d8:	ldr	r0, [r0, #16]
     4da:	cbz	r0, 4e2 <File::close()+0xa>
     4dc:	ldr	r3, [r0, #0]
     4de:	ldr	r3, [r3, #60]	; 0x3c
     4e0:	bx	r3
     4e2:	bx	lr

000004e4 <File::operator bool()>:
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     4e4:	ldr	r0, [r0, #16]
     4e6:	cbz	r0, 4ee <File::operator bool()+0xa>
     4e8:	ldr	r3, [r0, #0]
     4ea:	ldr	r3, [r3, #64]	; 0x40
     4ec:	bx	r3
	}
     4ee:	bx	lr

000004f0 <File::name()>:
	virtual const char* name() {
		return (f) ? f->name() : "";
     4f0:	ldr	r0, [r0, #16]
     4f2:	cbz	r0, 4fa <File::name()+0xa>
     4f4:	ldr	r3, [r0, #0]
     4f6:	ldr	r3, [r3, #68]	; 0x44
     4f8:	bx	r3
	}
     4fa:	ldr	r0, [pc, #4]	; (500 <File::name()+0x10>)
     4fc:	bx	lr
     4fe:	nop
     500:	.word	0x0000fd78

00000504 <File::isDirectory()>:
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
     504:	ldr	r0, [r0, #16]
     506:	cbz	r0, 50e <File::isDirectory()+0xa>
     508:	ldr	r3, [r0, #0]
     50a:	ldr	r3, [r3, #72]	; 0x48
     50c:	bx	r3
	}
     50e:	bx	lr

00000510 <File::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     510:	push	{r3, r4, r5, lr}
		return (f) ? f->openNextFile(mode) : *this;
     512:	ldr	r3, [r1, #16]
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
     514:	mov	r4, r0
		return (f) ? f->openNextFile(mode) : *this;
     516:	cbz	r3, 524 <File::openNextFile(unsigned char)+0x14>
     518:	ldr	r5, [r3, #0]
     51a:	mov	r1, r3
     51c:	ldr	r3, [r5, #76]	; 0x4c
     51e:	blx	r3
	}
     520:	mov	r0, r4
     522:	pop	{r3, r4, r5, pc}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     524:	mov.w	r0, #1000	; 0x3e8
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
     528:	ldr	r2, [pc, #24]	; (544 <File::openNextFile(unsigned char)+0x34>)
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     52a:	strb	r3, [r4, #4]
     52c:	strb	r3, [r4, #12]
     52e:	str	r0, [r4, #8]
     530:	str	r2, [r4, #0]
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
     532:	ldr	r3, [r1, #16]
     534:	str	r3, [r4, #16]
		if (f) f->refcount++;
     536:	cmp	r3, #0
     538:	beq.n	520 <File::openNextFile(unsigned char)+0x10>
     53a:	ldr	r2, [r3, #16]
     53c:	adds	r2, #1
     53e:	str	r2, [r3, #16]
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
	}
     540:	mov	r0, r4
     542:	pop	{r3, r4, r5, pc}
     544:	.word	0x0000fd0c

00000548 <File::rewindDirectory()>:
	virtual void rewindDirectory(void) {
		if (f) f->rewindDirectory();
     548:	ldr	r0, [r0, #16]
     54a:	cbz	r0, 552 <File::rewindDirectory()+0xa>
     54c:	ldr	r3, [r0, #0]
     54e:	ldr	r3, [r3, #80]	; 0x50
     550:	bx	r3
     552:	bx	lr

00000554 <File::read()>:
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     554:	ldr	r0, [r0, #16]
     556:	cbz	r0, 57a <File::read()+0x26>
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     558:	push	{lr}
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55a:	ldr	r3, [r0, #0]
		if (f) f->rewindDirectory();
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
     55c:	sub	sp, #12
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     55e:	ldr	r3, [r3, #40]	; 0x28
     560:	movs	r2, #1
     562:	add.w	r1, sp, #7
     566:	blx	r3
     568:	cbz	r0, 574 <File::read()+0x20>
		return b;
     56a:	ldrb.w	r0, [sp, #7]
	}
     56e:	add	sp, #12
     570:	ldr.w	pc, [sp], #4
	}
	bool seek(uint32_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     574:	mov.w	r0, #4294967295
     578:	b.n	56e <File::read()+0x1a>
     57a:	mov.w	r0, #4294967295
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
     57e:	bx	lr

00000580 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     580:	push	{r4, lr}
     582:	sub	sp, #8
     584:	add	r3, sp, #8
		return write(&b, 1);
     586:	ldr	r2, [r0, #0]
		if (!f) return -1;
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
		return b;
	}
	size_t write(uint8_t b) {
     588:	strb.w	r1, [r3, #-1]!
		return write(&b, 1);
     58c:	ldr	r4, [r2, #44]	; 0x2c
     58e:	mov	r1, r3
     590:	movs	r2, #1
     592:	blx	r4
	}
     594:	add	sp, #8
     596:	pop	{r4, pc}

00000598 <File::whoami()>:
	}
	virtual ~File() {
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
     598:	push	{r4, lr}
     59a:	mov	r4, r0
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
     59c:	mov	r2, r0
     59e:	ldr	r3, [r0, #16]
     5a0:	ldr	r1, [pc, #20]	; (5b8 <File::whoami()+0x20>)
     5a2:	ldr	r0, [pc, #24]	; (5bc <File::whoami()+0x24>)
     5a4:	bl	acd0 <Print::printf(char const*, ...)>
		if (f) f->whoami();
     5a8:	ldr	r0, [r4, #16]
     5aa:	cbz	r0, 5b6 <File::whoami()+0x1e>
     5ac:	ldr	r3, [r0, #0]
	}
     5ae:	ldmia.w	sp!, {r4, lr}
		invalidate();
	}
#ifdef FILE_WHOAMI
	virtual void whoami() { // testing only
		Serial.printf("  File    this=%x, f=%x\n", (int)this, (int)f);
		if (f) f->whoami();
     5b2:	ldr	r3, [r3, #36]	; 0x24
     5b4:	bx	r3
     5b6:	pop	{r4, pc}
     5b8:	.word	0x0000fd60
     5bc:	.word	0x1fff098c

000005c0 <File::~File()>:
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5c0:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     5c2:	ldr	r3, [pc, #40]	; (5ec <File::~File()+0x2c>)
     5c4:	push	{r4, lr}
     5c6:	mov	r4, r0
     5c8:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     5ca:	cbz	r2, 5de <File::~File()+0x1e>
     5cc:	ldr	r3, [r2, #16]
     5ce:	subs	r3, #1
     5d0:	str	r3, [r2, #16]
     5d2:	cbnz	r3, 5de <File::~File()+0x1e>
     5d4:	ldr	r0, [r0, #16]
     5d6:	cbz	r0, 5de <File::~File()+0x1e>
     5d8:	ldr	r3, [r0, #0]
     5da:	ldr	r3, [r3, #32]
     5dc:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     5de:	mov	r0, r4
     5e0:	movs	r1, #20
     5e2:	bl	ad94 <operator delete(void*, unsigned int)>
     5e6:	mov	r0, r4
     5e8:	pop	{r4, pc}
     5ea:	nop
     5ec:	.word	0x0000fd0c

000005f0 <__tcf_0>:
#endif

  #include "MTP.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage[7];
     5f0:	push	{r3, r4, r5, r6, r7, lr}
     5f2:	ldr	r4, [pc, #92]	; (650 <__tcf_0+0x60>)
     5f4:	ldr	r6, [pc, #92]	; (654 <__tcf_0+0x64>)
     5f6:	ldr	r7, [pc, #96]	; (658 <__tcf_0+0x68>)
     5f8:	sub.w	r5, r4, #616	; 0x268

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
     5fc:	str.w	r6, [r4, #-88]!
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     600:	ldr	r2, [r4, #60]	; 0x3c
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     602:	str	r7, [r4, #44]	; 0x2c
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     604:	cbz	r2, 618 <__tcf_0+0x28>
     606:	ldr	r3, [r2, #16]
     608:	subs	r3, #1
     60a:	str	r3, [r2, #16]
     60c:	cbnz	r3, 618 <__tcf_0+0x28>
     60e:	ldr	r0, [r4, #60]	; 0x3c
     610:	cbz	r0, 618 <__tcf_0+0x28>
     612:	ldr	r3, [r0, #0]
     614:	ldr	r3, [r3, #32]
     616:	blx	r3
     618:	ldr	r2, [r4, #40]	; 0x28
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     61a:	str	r7, [r4, #24]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     61c:	cbz	r2, 630 <__tcf_0+0x40>
     61e:	ldr	r3, [r2, #16]
     620:	subs	r3, #1
     622:	str	r3, [r2, #16]
     624:	cbnz	r3, 630 <__tcf_0+0x40>
     626:	ldr	r0, [r4, #40]	; 0x28
     628:	cbz	r0, 630 <__tcf_0+0x40>
     62a:	ldr	r3, [r0, #0]
     62c:	ldr	r3, [r3, #32]
     62e:	blx	r3
     630:	ldr	r2, [r4, #20]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     632:	str	r7, [r4, #4]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     634:	cbz	r2, 648 <__tcf_0+0x58>
     636:	ldr	r3, [r2, #16]
     638:	subs	r3, #1
     63a:	str	r3, [r2, #16]
     63c:	cbnz	r3, 648 <__tcf_0+0x58>
     63e:	ldr	r0, [r4, #20]
     640:	cbz	r0, 648 <__tcf_0+0x58>
     642:	ldr	r3, [r0, #0]
     644:	ldr	r3, [r3, #32]
     646:	blx	r3
     648:	cmp	r4, r5
     64a:	bne.n	5fc <__tcf_0+0xc>
     64c:	pop	{r3, r4, r5, r6, r7, pc}
     64e:	nop
     650:	.word	0x1fff16bc
     654:	.word	0x0000fe64
     658:	.word	0x0000fd0c

0000065c <File::~File()>:
     65c:	ldr	r2, [r0, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     65e:	ldr	r3, [pc, #32]	; (680 <File::~File()+0x24>)
     660:	push	{r4, lr}
     662:	mov	r4, r0
     664:	str	r3, [r0, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     666:	cbz	r2, 67a <File::~File()+0x1e>
     668:	ldr	r3, [r2, #16]
     66a:	subs	r3, #1
     66c:	str	r3, [r2, #16]
     66e:	cbnz	r3, 67a <File::~File()+0x1e>
     670:	ldr	r0, [r0, #16]
     672:	cbz	r0, 67a <File::~File()+0x1e>
     674:	ldr	r3, [r0, #0]
     676:	ldr	r3, [r3, #32]
     678:	blx	r3
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
		invalidate();
	}
     67a:	mov	r0, r4
     67c:	pop	{r4, pc}
     67e:	nop
     680:	.word	0x0000fd0c

00000684 <setup>:
    to=millis();
  }
}

void setup()
{ 
     684:	push	{r4, r5, r6, lr}
     686:	ldr	r2, [pc, #108]	; (6f4 <setup+0x70>)
     688:	ldr	r5, [pc, #108]	; (6f8 <setup+0x74>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     68a:	ldr	r4, [pc, #112]	; (6fc <setup+0x78>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     68c:	ldr	r0, [pc, #112]	; (700 <setup+0x7c>)
     68e:	sub	sp, #8
  while(!Serial && millis()<3000); 
     690:	movw	r1, #2999	; 0xbb7
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     694:	ldrb	r3, [r5, #0]
     696:	cbz	r3, 6c2 <setup+0x3e>
     698:	ldrb	r3, [r4, #0]
     69a:	lsls	r3, r3, #31
     69c:	bpl.n	6c2 <setup+0x3e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     69e:	ldr	r3, [r2, #0]
     6a0:	ldr	r6, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     6a2:	subs	r3, r3, r6
     6a4:	cmp	r3, #14
     6a6:	bls.n	6c2 <setup+0x3e>
  usb_mtp_configure();
     6a8:	bl	9580 <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6ac:	bl	1994 <Storage_init()>
     6b0:	cbnz	r0, 6d8 <setup+0x54>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     6b2:	movs	r1, #10
     6b4:	ldr	r0, [pc, #76]	; (704 <setup+0x80>)
     6b6:	bl	9784 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     6ba:	ldr	r0, [pc, #76]	; (708 <setup+0x84>)
     6bc:	bl	aca0 <Print::println()>
     6c0:	b.n	6c0 <setup+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     6c2:	ldr	r3, [r2, #0]
     6c4:	str	r3, [sp, #4]
	return ret;
     6c6:	ldr	r3, [sp, #4]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     6c8:	cmp	r3, r1
     6ca:	bls.n	694 <setup+0x10>
  usb_mtp_configure();
     6cc:	bl	9580 <usb_mtp_configure>
  if(!Storage_init()) {Serial.println("No storage"); while(1);};
     6d0:	bl	1994 <Storage_init()>
     6d4:	cmp	r0, #0
     6d6:	beq.n	6b2 <setup+0x2e>
     6d8:	movs	r1, #8
     6da:	ldr	r0, [pc, #48]	; (70c <setup+0x88>)
     6dc:	bl	9784 <usb_serial_write>
     6e0:	ldr	r0, [pc, #36]	; (708 <setup+0x84>)
     6e2:	bl	aca0 <Print::println()>

  Serial.println("MTP test");

#if USE_SDIO==1
  pinMode(13,OUTPUT);
     6e6:	movs	r1, #1
     6e8:	movs	r0, #13
     6ea:	bl	9b20 <pinMode>
#endif

}
     6ee:	add	sp, #8
     6f0:	pop	{r4, r5, r6, pc}
     6f2:	nop
     6f4:	.word	0x1fff1c08
     6f8:	.word	0x1fff1d0c
     6fc:	.word	0x1fff1c04
     700:	.word	0x1fff1d84
     704:	.word	0x0000fd7c
     708:	.word	0x1fff098c
     70c:	.word	0x0000fd88

00000710 <loop>:

void loop()
{ 
  mtpd.loop();
     710:	ldr	r0, [pc, #4]	; (718 <loop+0x8>)
     712:	b.w	2eb8 <MTPD::loop()>
     716:	nop
     718:	.word	0x1fff16bc

0000071c <_GLOBAL__sub_I_storage>:

  //logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     71c:	push	{r3, r4, r5, r6, r7, lr}
     71e:	ldr	r3, [pc, #140]	; (7ac <_GLOBAL__sub_I_storage+0x90>)
     720:	ldr	r7, [pc, #140]	; (7b0 <_GLOBAL__sub_I_storage+0x94>)
     722:	ldr	r0, [pc, #144]	; (7b4 <_GLOBAL__sub_I_storage+0x98>)
     724:	add.w	r6, r3, #616	; 0x268
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     728:	movs	r2, #0
     72a:	mov.w	r1, #1000	; 0x3e8
     72e:	mvn.w	r5, #1
     732:	str.w	r7, [r3, #-88]
     736:	strb.w	r2, [r3, #-80]
     73a:	str.w	r1, [r3, #-76]
     73e:	strb.w	r2, [r3, #-72]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     742:	str.w	r0, [r3, #-84]
     746:	str.w	r2, [r3, #-68]
     74a:	strb.w	r2, [r3, #-60]
     74e:	str.w	r1, [r3, #-56]
     752:	strb.w	r2, [r3, #-52]
     756:	str.w	r0, [r3, #-64]
     75a:	str.w	r2, [r3, #-48]
     75e:	strb.w	r2, [r3, #-40]
     762:	str.w	r1, [r3, #-36]
     766:	strb.w	r2, [r3, #-32]
     76a:	str.w	r0, [r3, #-44]
     76e:	str.w	r2, [r3, #-28]
     772:	str.w	r2, [r3, #-24]
     776:	str.w	r5, [r3, #-20]
     77a:	str.w	r2, [r3, #-16]
     77e:	strb.w	r2, [r3, #-12]
     782:	strb.w	r2, [r3, #-11]
     786:	adds	r3, #88	; 0x58
#endif

  #include "MTP.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage[7];
     788:	cmp	r3, r6
     78a:	mov.w	r4, #0
     78e:	bne.n	732 <_GLOBAL__sub_I_storage+0x16>
     790:	ldr	r2, [pc, #36]	; (7b8 <_GLOBAL__sub_I_storage+0x9c>)
     792:	ldr	r1, [pc, #40]	; (7bc <_GLOBAL__sub_I_storage+0xa0>)
     794:	mov	r0, r4
     796:	bl	af40 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
  explicit MTPD(MTPStorageInterface* storage, int num) : storage_(storage), num_storage(num) {}
     79a:	ldr	r3, [pc, #36]	; (7c0 <_GLOBAL__sub_I_storage+0xa4>)
     79c:	ldr	r1, [pc, #36]	; (7c4 <_GLOBAL__sub_I_storage+0xa8>)
     79e:	str	r4, [r3, #8]
     7a0:	movs	r2, #7
     7a2:	strb	r4, [r3, #12]
     7a4:	str	r4, [r3, #16]
     7a6:	stmia.w	r3, {r1, r2}
     7aa:	pop	{r3, r4, r5, r6, r7, pc}
     7ac:	.word	0x1fff14ac
     7b0:	.word	0x0000fe64
     7b4:	.word	0x0000fd0c
     7b8:	.word	0x1fff0970
     7bc:	.word	0x000005f1
     7c0:	.word	0x1fff16bc
     7c4:	.word	0x1fff1454

000007c8 <SDFile::operator bool()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     7c8:	ldr	r3, [r0, #92]	; 0x5c
     7ca:	cbz	r3, 7d0 <SDFile::operator bool()+0x8>
     7cc:	movs	r0, #1
		}
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
     7ce:	bx	lr
     7d0:	ldr	r0, [r0, #96]	; 0x60
     7d2:	adds	r0, #0
     7d4:	it	ne
     7d6:	movne	r0, #1
     7d8:	bx	lr
     7da:	nop

000007dc <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
     7dc:	movs	r0, #0
     7de:	bx	lr

000007e0 <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
     7e0:	movs	r0, #1
     7e2:	bx	lr

000007e4 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
     7e4:	push	{r4, lr}
     7e6:	mov	r4, r0
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     7e8:	ldr	r0, [r0, #20]
     7ea:	cbz	r0, 7f2 <MTPStorage_SD::CloseIndex()+0xe>
     7ec:	ldr	r3, [r0, #0]
     7ee:	ldr	r3, [r3, #60]	; 0x3c
     7f0:	blx	r3
    mtp_lock_storage(true);
    index_.close();
    mtp_lock_storage(false);
    index_generated = false;
     7f2:	movs	r3, #0
     7f4:	strb.w	r3, [r4, #76]	; 0x4c
    index_entries_ = 0;
     7f8:	str	r3, [r4, #72]	; 0x48
     7fa:	pop	{r4, pc}

000007fc <MTPStorage_SD::write(char const*, unsigned long)>:
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
     7fc:	ldr	r0, [r0, #40]	; 0x28
     7fe:	cbz	r0, 806 <MTPStorage_SD::write(char const*, unsigned long)+0xa>
     800:	ldr	r3, [r0, #0]
     802:	ldr	r3, [r3, #44]	; 0x2c
     804:	bx	r3
     806:	bx	lr

00000808 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
  #define indexFile "/mtpindex.dat"

   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
     808:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     80c:	mov	r7, r1
     80e:	mov	r6, r2
     810:	mov	r8, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     812:	bl	3970 <year()>
     816:	mov	r4, r0
     818:	bl	3950 <month()>
     81c:	mov	r5, r0
     81e:	bl	3930 <day()>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
     822:	subw	r3, r4, #1980	; 0x7bc
     826:	uxth	r3, r3
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
     828:	cmp	r3, #127	; 0x7f
     82a:	bhi.n	832 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     82c:	uxtb	r2, r5
     82e:	cmp	r2, #12
     830:	bls.n	88a <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x82>
         year << 9 | month << 5 | day;
     832:	movs	r3, #0
     834:	strh.w	r3, [r8]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
     838:	bl	38d0 <hour()>
     83c:	mov	r4, r0
     83e:	bl	38f0 <minute()>
     842:	mov	r5, r0
     844:	bl	3910 <second()>
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
     848:	uxtb	r3, r4
     84a:	cmp	r3, #23
     84c:	bhi.n	854 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     84e:	uxtb	r3, r5
     850:	cmp	r3, #59	; 0x3b
     852:	bls.n	86c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x64>
         hour << 11 | minute << 5 | second >> 1;
     854:	movs	r3, #0
     856:	strh	r3, [r7, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
     858:	bl	3910 <second()>
     85c:	tst.w	r0, #1
     860:	ite	ne
     862:	movne	r3, #100	; 0x64
     864:	moveq	r3, #0
     866:	strb	r3, [r6, #0]
     868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
     86c:	uxtb	r3, r0
     86e:	cmp	r3, #59	; 0x3b
     870:	bhi.n	854 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4c>
         hour << 11 | minute << 5 | second >> 1;
     872:	lsls	r4, r4, #11
     874:	lsls	r3, r5, #5
     876:	and.w	r4, r4, #522240	; 0x7f800
     87a:	and.w	r3, r3, #8160	; 0x1fe0
     87e:	orrs	r3, r4
     880:	ubfx	r0, r0, #1, #7
     884:	orrs	r3, r0
     886:	uxth	r3, r3
     888:	b.n	856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x4e>
   #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
     88a:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
     88c:	cmp	r0, #31
     88e:	bhi.n	832 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2a>
         year << 9 | month << 5 | day;
     890:	lsls	r5, r5, #5
     892:	and.w	r5, r5, #8160	; 0x1fe0
     896:	orrs	r0, r5
     898:	orr.w	r3, r0, r3, lsl #9
     89c:	uxth	r3, r3
     89e:	b.n	834 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x2c>

000008a0 <SDFile::close()>:
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
		return sdfatfile.size();
	}
	virtual void close() {
     8a0:	push	{r4, lr}
     8a2:	mov	r4, r0
		if (filename) {
     8a4:	ldr	r0, [r0, #100]	; 0x64
     8a6:	cbz	r0, 8b0 <SDFile::close()+0x10>
			free(filename);
     8a8:	bl	bbfc <free>
			filename = nullptr;
     8ac:	movs	r3, #0
     8ae:	str	r3, [r4, #100]	; 0x64
		}
		sdfatfile.close();
     8b0:	add.w	r0, r4, #36	; 0x24
	}
     8b4:	ldmia.w	sp!, {r4, lr}
	virtual void close() {
		if (filename) {
			free(filename);
			filename = nullptr;
		}
		sdfatfile.close();
     8b8:	b.w	7b9c <FsBaseFile::close()>

000008bc <SDFile::whoami()>:
		if (filename) free(filename);
	}
#ifdef FILE_WHOAMI
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
     8bc:	mov	r2, r0
     8be:	ldr	r3, [r0, #16]
     8c0:	ldr	r1, [pc, #4]	; (8c8 <SDFile::whoami()+0xc>)
     8c2:	ldr	r0, [pc, #8]	; (8cc <SDFile::whoami()+0x10>)
     8c4:	b.w	acd0 <Print::printf(char const*, ...)>
     8c8:	.word	0x0000feac
     8cc:	.word	0x1fff098c

000008d0 <SDFile::openNextFile(unsigned char)>:
		return filename;
	}
	virtual boolean isDirectory(void) {
		return sdfatfile.isDirectory();
	}
	virtual File openNextFile(uint8_t mode=0) {
     8d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     8d4:	movs	r3, #0
     8d6:	sub	sp, #80	; 0x50
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     8d8:	mov	r2, r3
     8da:	mov	r5, r0
     8dc:	adds	r1, #36	; 0x24
     8de:	add	r0, sp, #16
     8e0:	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8e4:	ldr	r7, [pc, #148]	; (97c <SDFile::openNextFile(unsigned char)+0xac>)
     8e6:	strb.w	r3, [sp, #4]
     8ea:	strb.w	r3, [sp, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     8ee:	str	r3, [sp, #72]	; 0x48
     8f0:	str	r3, [sp, #76]	; 0x4c
     8f2:	str	r4, [sp, #8]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8f4:	str	r7, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     8f6:	bl	7c44 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     8fa:	ldr	r3, [sp, #72]	; 0x48
     8fc:	cmp	r3, #0
     8fe:	beq.n	966 <SDFile::openNextFile(unsigned char)+0x96>
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
     900:	movs	r0, #104	; 0x68
     902:	bl	ad90 <operator new(unsigned int)>
     906:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     908:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     90c:	ldr	r2, [sp, #8]
     90e:	ldrb.w	r3, [sp, #12]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     912:	ldr	r0, [pc, #108]	; (980 <SDFile::openNextFile(unsigned char)+0xb0>)
     914:	ldr	r1, [pc, #108]	; (984 <SDFile::openNextFile(unsigned char)+0xb4>)
     916:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     918:	mov.w	r8, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     91c:	movs	r6, #0
     91e:	str	r0, [r4, #0]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     920:	str	r1, [r4, #20]
     922:	str	r2, [r4, #28]
     924:	strb.w	r3, [r4, #32]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     928:	add.w	r0, r4, #36	; 0x24
     92c:	add	r1, sp, #16
     92e:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     930:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     932:	str	r6, [r4, #16]
     934:	str.w	r8, [r4, #8]
     938:	bl	7b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     93c:	ldr	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     93e:	ldr	r2, [pc, #72]	; (988 <SDFile::openNextFile(unsigned char)+0xb8>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     940:	str	r7, [r4, #20]
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     942:	adds	r3, #1
     944:	str	r6, [r4, #100]	; 0x64
     946:	strb	r6, [r5, #4]
     948:	str.w	r8, [r5, #8]
     94c:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
     94e:	str	r4, [r5, #16]
		if (f) f->refcount++;
     950:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
     952:	str	r2, [r5, #0]
     954:	ldr	r3, [pc, #52]	; (98c <SDFile::openNextFile(unsigned char)+0xbc>)
     956:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     958:	add	r0, sp, #16
     95a:	bl	7b9c <FsBaseFile::close()>
	}
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
     95e:	mov	r0, r5
     960:	add	sp, #80	; 0x50
     962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     966:	ldr	r3, [sp, #76]	; 0x4c
     968:	cmp	r3, #0
     96a:	bne.n	900 <SDFile::openNextFile(unsigned char)+0x30>

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     96c:	ldr	r2, [pc, #24]	; (988 <SDFile::openNextFile(unsigned char)+0xb8>)
     96e:	strb	r3, [r5, #4]
     970:	str	r4, [r5, #8]
     972:	strb	r3, [r5, #12]
     974:	str	r3, [r5, #16]
     976:	str	r2, [r5, #0]
     978:	b.n	954 <SDFile::openNextFile(unsigned char)+0x84>
     97a:	nop
     97c:	.word	0x0000fde4
     980:	.word	0x0000fe08
     984:	.word	0x0000fd9c
     988:	.word	0x0000fd0c
     98c:	.word	0x0000fdc0

00000990 <MTPStorage_SD::clusterCount()>:
#if USE_SDFS==1
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
     990:	ldr	r2, [pc, #24]	; (9ac <MTPStorage_SD::clusterCount()+0x1c>)
     992:	ldr.w	r3, [r2, #1148]	; 0x47c
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
     996:	cbz	r3, 99e <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     998:	ldr	r0, [r3, #28]
     99a:	subs	r0, #1
     99c:	bx	lr
     99e:	ldr.w	r0, [r2, #1152]	; 0x480
     9a2:	cbz	r0, 9a8 <MTPStorage_SD::clusterCount()+0x18>
     9a4:	ldr.w	r0, [r0, #1064]	; 0x428
     9a8:	bx	lr
     9aa:	nop
     9ac:	.word	0x1fff16f4

000009b0 <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
     9b0:	ldr	r2, [pc, #28]	; (9d0 <MTPStorage_SD::clusterSize()+0x20>)
     9b2:	ldr.w	r3, [r2, #1148]	; 0x47c
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
     9b6:	cbz	r3, 9bc <MTPStorage_SD::clusterSize()+0xc>
     9b8:	ldrb	r0, [r3, #4]
     9ba:	bx	lr
     9bc:	ldr.w	r0, [r2, #1152]	; 0x480
     9c0:	cbz	r0, 9cc <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
     9c2:	ldrb.w	r0, [r0, #1085]	; 0x43d
     9c6:	movs	r3, #1
     9c8:	lsl.w	r0, r3, r0
     9cc:	bx	lr
     9ce:	nop
     9d0:	.word	0x1fff16f4

000009d4 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     9d4:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     9d6:	cbz	r2, 9f2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     9d8:	ldrb	r3, [r2, #0]
     9da:	and.w	r3, r3, #8
     9de:	and.w	r0, r3, #255	; 0xff
     9e2:	cbz	r3, a26 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     9e4:	ldr	r3, [r2, #28]
     9e6:	ldr	r0, [r2, #20]
     9e8:	subs	r0, r3, r0
     9ea:	it	mi
     9ec:	mvnmi.w	r0, #2147483648	; 0x80000000
     9f0:	bx	lr
     9f2:	ldr	r1, [r0, #76]	; 0x4c
     9f4:	cbz	r1, a28 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     9f6:	ldrb.w	r3, [r1, #49]	; 0x31
     9fa:	and.w	r3, r3, #8
     9fe:	and.w	r0, r3, #255	; 0xff
     a02:	cbz	r3, a26 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     a04:	ldrd	r2, r3, [r1, #16]
     a08:	ldrd	r0, r1, [r1]
     a0c:	subs	r0, r2, r0
     a0e:	push	{r4, r5}
     a10:	sbc.w	r1, r3, r1
     a14:	movs	r5, #0
     a16:	mvn.w	r4, #2147483648	; 0x80000000
     a1a:	cmp	r5, r1
     a1c:	it	eq
     a1e:	cmpeq	r4, r0
     a20:	bcs.n	a24 <StreamFile<FsBaseFile, unsigned long long>::available()+0x50>
     a22:	mov	r0, r4
    return BaseFile::available();
  }
     a24:	pop	{r4, r5}
     a26:	bx	lr
     a28:	mov	r0, r1
     a2a:	bx	lr

00000a2c <SDFile::peek()>:
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
     a2c:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     a2e:	cbz	r3, a36 <SDFile::peek()+0xa>
     a30:	mov	r0, r3
     a32:	b.w	5ee8 <FatFile::peek()>
     a36:	ldr	r0, [r0, #96]	; 0x60
     a38:	cbz	r0, a3e <SDFile::peek()+0x12>
     a3a:	b.w	4000 <ExFatFile::peek()>
		return sdfatfile.peek();
	}
     a3e:	mov.w	r0, #4294967295
     a42:	bx	lr

00000a44 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     a44:	push	{lr}
     a46:	ldr	r3, [r0, #72]	; 0x48
     a48:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a4a:	cbz	r3, a66 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     a4c:	mov	r0, r3
     a4e:	movs	r2, #1
     a50:	add.w	r1, sp, #7
     a54:	bl	5d08 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a58:	cmp	r0, #1
     a5a:	bne.n	a76 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a5c:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     a60:	add	sp, #12
     a62:	ldr.w	pc, [sp], #4
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     a66:	ldr	r0, [r0, #76]	; 0x4c
     a68:	cbz	r0, a76 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     a6a:	movs	r2, #1
     a6c:	add.w	r1, sp, #7
     a70:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
     a74:	b.n	a58 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     a76:	mov.w	r0, #4294967295
     a7a:	b.n	a60 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000a7c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     a7c:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     a7e:	cbz	r3, a86 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     a80:	mov	r0, r3
     a82:	b.w	672c <FatFile::sync()>
     a86:	ldr	r0, [r0, #76]	; 0x4c
     a88:	cbz	r0, a8e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     a8a:	b.w	5194 <ExFatFile::sync()>
     a8e:	bx	lr

00000a90 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     a90:	push	{lr}
     a92:	ldr	r3, [r0, #72]	; 0x48
     a94:	sub	sp, #12
     a96:	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     a9a:	cbz	r3, aae <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     a9c:	mov	r0, r3
     a9e:	movs	r2, #1
     aa0:	add.w	r1, sp, #7
     aa4:	bl	6738 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     aa8:	add	sp, #12
     aaa:	ldr.w	pc, [sp], #4
     aae:	ldr	r0, [r0, #76]	; 0x4c
     ab0:	cmp	r0, #0
     ab2:	beq.n	aa8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     ab4:	movs	r2, #1
     ab6:	add.w	r1, sp, #7
     aba:	bl	5684 <ExFatFile::write(void const*, unsigned int)>
     abe:	add	sp, #12
     ac0:	ldr.w	pc, [sp], #4

00000ac4 <SDFile::name()>:
		sdfatfile.close();
	}
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
     ac4:	push	{r3, r4, r5, lr}
		if (!filename) {
     ac6:	ldr	r4, [r0, #100]	; 0x64
     ac8:	cbz	r4, ace <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     aca:	mov	r0, r4
     acc:	pop	{r3, r4, r5, pc}
     ace:	mov	r5, r0
	virtual operator bool() {
		return sdfatfile.isOpen();
	}
	virtual const char * name() {
		if (!filename) {
			filename = (char *)malloc(MAX_FILENAME_LEN);
     ad0:	mov.w	r0, #256	; 0x100
     ad4:	bl	bbec <malloc>
     ad8:	mov	r1, r0
     ada:	str	r0, [r5, #100]	; 0x64
			if (filename) {
     adc:	cbz	r0, b00 <SDFile::name()+0x3c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     ade:	ldr	r0, [r5, #92]	; 0x5c
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
     ae0:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
     ae2:	cbz	r0, af0 <SDFile::name()+0x2c>
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    return m_fFile ? m_fFile->getName(name, len) :
     ae4:	mov.w	r2, #256	; 0x100
     ae8:	bl	6fc8 <FatFile::getName(char*, unsigned int)>
     aec:	ldr	r4, [r5, #100]	; 0x64
     aee:	b.n	aca <SDFile::name()+0x6>
           m_xFile ? m_xFile->getName(name, len) : 0;
     af0:	ldr	r0, [r5, #96]	; 0x60
     af2:	cbz	r0, b06 <SDFile::name()+0x42>
     af4:	mov.w	r2, #256	; 0x100
     af8:	bl	3c68 <ExFatFile::getName(char*, unsigned int)>
     afc:	ldr	r4, [r5, #100]	; 0x64
     afe:	b.n	aca <SDFile::name()+0x6>
				sdfatfile.getName(filename, MAX_FILENAME_LEN);
			} else {
				static char zeroterm = 0;
				filename = &zeroterm;
     b00:	ldr	r4, [pc, #8]	; (b0c <SDFile::name()+0x48>)
     b02:	str	r4, [r5, #100]	; 0x64
     b04:	b.n	aca <SDFile::name()+0x6>
     b06:	mov	r4, r1
     b08:	b.n	aca <SDFile::name()+0x6>
     b0a:	nop
     b0c:	.word	0x1fff16d0

00000b10 <SDFile::rewindDirectory()>:
	virtual File openNextFile(uint8_t mode=0) {
		SDFAT_FILE file = sdfatfile.openNextFile();
		if (file) return File(new SDFile(file));
		return File();
	}
	virtual void rewindDirectory(void) {
     b10:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b12:	cbz	r3, b3c <SDFile::rewindDirectory()+0x2c>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     b14:	ldrb	r2, [r3, #0]
     b16:	tst.w	r2, #112	; 0x70
     b1a:	bne.n	b1e <SDFile::rewindDirectory()+0xe>
     b1c:	bx	lr
     b1e:	push	{r4, lr}
     b20:	mov	r4, r0
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     b22:	movs	r1, #0
     b24:	mov	r0, r3
     b26:	bl	5f64 <FatFile::seekSet(unsigned long)>
     b2a:	ldr	r0, [r4, #96]	; 0x60
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
    if (m_xFile) m_xFile->rewind();
     b2c:	cbz	r0, b3a <SDFile::rewindDirectory()+0x2a>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     b2e:	movs	r2, #0
     b30:	movs	r3, #0
		sdfatfile.rewindDirectory();
	}
     b32:	ldmia.w	sp!, {r4, lr}
     b36:	b.w	4030 <ExFatFile::seekSet(unsigned long long)>
     b3a:	pop	{r4, pc}
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     b3c:	ldr	r0, [r0, #96]	; 0x60
     b3e:	cmp	r0, #0
     b40:	beq.n	b1c <SDFile::rewindDirectory()+0xc>
     b42:	ldrb.w	r3, [r0, #49]	; 0x31
     b46:	tst.w	r3, #80	; 0x50
     b4a:	beq.n	b1c <SDFile::rewindDirectory()+0xc>
     b4c:	movs	r2, #0
     b4e:	movs	r3, #0
     b50:	b.w	4030 <ExFatFile::seekSet(unsigned long long)>

00000b54 <MTPStorage_SD::freeClusters()>:
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
#else
  uint32_t MTPStorage_SD::clusterCount() { return SD.sdfs.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return SD.sdfs.freeClusterCount(); }
     b54:	ldr	r3, [pc, #20]	; (b6c <MTPStorage_SD::freeClusters()+0x18>)
     b56:	ldr.w	r0, [r3, #1148]	; 0x47c
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b5a:	cbz	r0, b60 <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
     b5c:	b.w	6cf0 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     b60:	ldr.w	r0, [r3, #1152]	; 0x480
     b64:	cbz	r0, b6a <MTPStorage_SD::freeClusters()+0x16>
     b66:	b.w	4c30 <ExFatPartition::freeClusterCount()>
     b6a:	bx	lr
     b6c:	.word	0x1fff16f4

00000b70 <SDFile::size()>:
		return false;
	}
	virtual uint32_t position() {
		return sdfatfile.curPosition();
	}
	virtual uint32_t size() {
     b70:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     b72:	cbz	r3, b78 <SDFile::size()+0x8>
     b74:	ldr	r0, [r3, #28]
     b76:	bx	lr
     b78:	ldr	r0, [r0, #96]	; 0x60
     b7a:	cbz	r0, b7e <SDFile::size()+0xe>
     b7c:	ldr	r0, [r0, #16]
		return sdfatfile.size();
	}
     b7e:	bx	lr

00000b80 <SDFile::position()>:
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint32_t position() {
     b80:	ldr	r3, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     b82:	cbz	r3, b88 <SDFile::position()+0x8>
     b84:	ldr	r0, [r3, #20]
     b86:	bx	lr
     b88:	ldr	r0, [r0, #96]	; 0x60
     b8a:	cbz	r0, b8e <SDFile::position()+0xe>
     b8c:	ldr	r0, [r0, #0]
		return sdfatfile.curPosition();
	}
     b8e:	bx	lr

00000b90 <SDFile::read(void*, unsigned int)>:
		return sdfatfile.available();
	}
	virtual void flush() {
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
     b90:	ldr	r3, [r0, #92]	; 0x5c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     b92:	cbz	r3, b9a <SDFile::read(void*, unsigned int)+0xa>
     b94:	mov	r0, r3
     b96:	b.w	5d08 <FatFile::read(void*, unsigned int)>
     b9a:	ldr	r0, [r0, #96]	; 0x60
     b9c:	cbz	r0, ba2 <SDFile::read(void*, unsigned int)+0x12>
     b9e:	b.w	3e1c <ExFatFile::read(void*, unsigned int)>
		return sdfatfile.read(buf, nbyte);
	}
     ba2:	mov.w	r0, #4294967295
     ba6:	bx	lr

00000ba8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     ba8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     baa:	cbz	r3, bb2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     bac:	mov	r0, r3
     bae:	b.w	5ee8 <FatFile::peek()>
     bb2:	ldr	r0, [r0, #76]	; 0x4c
     bb4:	cbz	r0, bba <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     bb6:	b.w	4000 <ExFatFile::peek()>
    return BaseFile::peek();
  }
     bba:	mov.w	r0, #4294967295
     bbe:	bx	lr

00000bc0 <SDFile::isDirectory()>:
				filename = &zeroterm;
			}
		}
		return filename;
	}
	virtual boolean isDirectory(void) {
     bc0:	ldr	r3, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->getWriteError() : true;
  }
  /** \return True if this is a directory else false. */
  bool isDir() {
    return m_fFile ? m_fFile->isDir() :
           m_xFile ? m_xFile->isDir() : false;
     bc2:	cbz	r3, bd2 <SDFile::isDirectory()+0x12>
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {
    return m_attributes & FILE_ATTR_DIR;
     bc4:	ldrb	r3, [r3, #0]
     bc6:	tst.w	r3, #112	; 0x70
     bca:	ite	ne
     bcc:	movne	r0, #1
     bce:	moveq	r0, #0
     bd0:	bx	lr
     bd2:	ldr	r0, [r0, #96]	; 0x60
     bd4:	cbz	r0, be4 <SDFile::isDirectory()+0x24>
    return isOpen() ? m_error & WRITE_ERROR : true;
  }
  /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
  /** \return True if this is a directory. */
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
     bd6:	ldrb.w	r3, [r0, #49]	; 0x31
     bda:	tst.w	r3, #80	; 0x50
     bde:	ite	ne
     be0:	movne	r0, #1
     be2:	moveq	r0, #0
		return sdfatfile.isDirectory();
	}
     be4:	bx	lr
     be6:	nop

00000be8 <SDFile::flush()>:
		return sdfatfile.peek();
	}
	virtual int available() {
		return sdfatfile.available();
	}
	virtual void flush() {
     be8:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     bea:	cbz	r3, bf2 <SDFile::flush()+0xa>
     bec:	mov	r0, r3
     bee:	b.w	672c <FatFile::sync()>
     bf2:	ldr	r0, [r0, #96]	; 0x60
     bf4:	cbz	r0, bfa <SDFile::flush()+0x12>
     bf6:	b.w	5194 <ExFatFile::sync()>
     bfa:	bx	lr

00000bfc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     bfc:	ldr	r3, [r0, #72]	; 0x48
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     bfe:	cbz	r3, c06 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     c00:	mov	r0, r3
     c02:	b.w	6738 <FatFile::write(void const*, unsigned int)>
     c06:	ldr	r0, [r0, #76]	; 0x4c
     c08:	cbz	r0, c0e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     c0a:	b.w	5684 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     c0e:	bx	lr

00000c10 <SDFile::write(void const*, unsigned int)>:
	virtual void whoami() {
		Serial.printf("   SDFile this=%x, refcount=%u\n",
			(int)this, getRefcount());
	}
#endif
	virtual size_t write(const void *buf, size_t size) {
     c10:	ldr	r3, [r0, #92]	; 0x5c
     c12:	cbz	r3, c1a <SDFile::write(void const*, unsigned int)+0xa>
     c14:	mov	r0, r3
     c16:	b.w	6738 <FatFile::write(void const*, unsigned int)>
     c1a:	ldr	r0, [r0, #96]	; 0x60
     c1c:	cbz	r0, c22 <SDFile::write(void const*, unsigned int)+0x12>
     c1e:	b.w	5684 <ExFatFile::write(void const*, unsigned int)>
		return sdfatfile.write(buf, size);
	}
     c22:	bx	lr

00000c24 <SDFile::available()>:
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     c24:	ldr	r2, [r0, #92]	; 0x5c
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     c26:	cbz	r2, c42 <SDFile::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     c28:	ldrb	r3, [r2, #0]
     c2a:	and.w	r3, r3, #8
     c2e:	and.w	r0, r3, #255	; 0xff
     c32:	cbz	r3, c76 <SDFile::available()+0x52>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     c34:	ldr	r3, [r2, #28]
     c36:	ldr	r0, [r2, #20]
     c38:	subs	r0, r3, r0
     c3a:	it	mi
     c3c:	mvnmi.w	r0, #2147483648	; 0x80000000
     c40:	bx	lr
     c42:	ldr	r1, [r0, #96]	; 0x60
     c44:	cbz	r1, c78 <SDFile::available()+0x54>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     c46:	ldrb.w	r3, [r1, #49]	; 0x31
     c4a:	and.w	r3, r3, #8
     c4e:	and.w	r0, r3, #255	; 0xff
     c52:	cbz	r3, c76 <SDFile::available()+0x52>
     c54:	ldrd	r2, r3, [r1, #16]
     c58:	ldrd	r0, r1, [r1]
     c5c:	subs	r0, r2, r0
     c5e:	push	{r4, r5}
     c60:	sbc.w	r1, r3, r1
     c64:	movs	r5, #0
     c66:	mvn.w	r4, #2147483648	; 0x80000000
     c6a:	cmp	r5, r1
     c6c:	it	eq
     c6e:	cmpeq	r4, r0
     c70:	bcs.n	c74 <SDFile::available()+0x50>
     c72:	mov	r0, r4
		return sdfatfile.available();
	}
     c74:	pop	{r4, r5}
     c76:	bx	lr
     c78:	mov	r0, r1
     c7a:	bx	lr

00000c7c <SDFile::seek(unsigned long, int)>:
		sdfatfile.flush();
	}
	virtual size_t read(void *buf, size_t nbyte) {
		return sdfatfile.read(buf, nbyte);
	}
	virtual bool seek(uint32_t pos, int mode = SeekSet) {
     c7c:	push	{r4, r5}
     c7e:	mov	r4, r1
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     c80:	cbz	r2, c90 <SDFile::seek(unsigned long, int)+0x14>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     c82:	cmp	r2, #1
     c84:	beq.n	cbc <SDFile::seek(unsigned long, int)+0x40>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     c86:	cmp	r2, #2
     c88:	beq.n	c9c <SDFile::seek(unsigned long, int)+0x20>
		return false;
	}
     c8a:	movs	r0, #0
     c8c:	pop	{r4, r5}
     c8e:	bx	lr
     c90:	ldr	r3, [r0, #92]	; 0x5c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     c92:	cbz	r3, cd4 <SDFile::seek(unsigned long, int)+0x58>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     c94:	mov	r0, r3
     c96:	pop	{r4, r5}
     c98:	b.w	5f64 <FatFile::seekSet(unsigned long)>
     c9c:	ldr	r5, [r0, #92]	; 0x5c
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     c9e:	cbz	r5, ce2 <SDFile::seek(unsigned long, int)+0x66>
     ca0:	ldr	r1, [r5, #28]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ca2:	movs	r3, #0
     ca4:	adds	r2, r4, r1
     ca6:	adc.w	r3, r3, #0
     caa:	cmp	r3, #1
     cac:	it	eq
     cae:	cmpeq	r2, #0
     cb0:	bcs.n	c8a <SDFile::seek(unsigned long, int)+0xe>
     cb2:	add	r1, r4
     cb4:	mov	r0, r5
     cb6:	pop	{r4, r5}
     cb8:	b.w	5f64 <FatFile::seekSet(unsigned long)>
     cbc:	ldr	r5, [r0, #92]	; 0x5c
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     cbe:	cbz	r5, cf8 <SDFile::seek(unsigned long, int)+0x7c>
     cc0:	ldr	r1, [r5, #20]
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     cc2:	movs	r3, #0
     cc4:	adds	r2, r1, r4
     cc6:	adc.w	r3, r3, #0
     cca:	cmp	r3, #1
     ccc:	it	eq
     cce:	cmpeq	r2, #0
     cd0:	bcs.n	c8a <SDFile::seek(unsigned long, int)+0xe>
     cd2:	b.n	cb2 <SDFile::seek(unsigned long, int)+0x36>
           m_xFile ? m_xFile->seekSet(pos) : false;
     cd4:	ldr	r0, [r0, #96]	; 0x60
     cd6:	cmp	r0, #0
     cd8:	beq.n	c8a <SDFile::seek(unsigned long, int)+0xe>
     cda:	mov	r2, r1
     cdc:	pop	{r4, r5}
     cde:	b.w	4030 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ce2:	ldr	r0, [r0, #96]	; 0x60
     ce4:	cmp	r0, #0
     ce6:	beq.n	c8a <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     ce8:	ldrd	r2, r3, [r0, #16]
     cec:	adds	r2, r2, r1
     cee:	adc.w	r3, r3, #0
     cf2:	pop	{r4, r5}
     cf4:	b.w	4030 <ExFatFile::seekSet(unsigned long long)>
   */
  bool close();
  /** \return The current position for a file or directory. */
  uint64_t curPosition() {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     cf8:	ldr	r0, [r0, #96]	; 0x60
     cfa:	cmp	r0, #0
     cfc:	beq.n	c8a <SDFile::seek(unsigned long, int)+0xe>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
     cfe:	ldrd	r2, r3, [r0]
     d02:	adds	r2, r2, r1
     d04:	adc.w	r3, r3, #0
     d08:	pop	{r4, r5}
     d0a:	b.w	4030 <ExFatFile::seekSet(unsigned long long)>
     d0e:	nop

00000d10 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     d10:	push	{r3, r4, r5, lr}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d12:	ldr	r3, [r0, #92]	; 0x5c
     d14:	ldr	r2, [pc, #80]	; (d68 <SDFile::~SDFile()+0x58>)
     d16:	str	r2, [r0, #0]
     d18:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     d1a:	add.w	r5, r0, #36	; 0x24
     d1e:	cbz	r3, d5e <SDFile::~SDFile()+0x4e>
     d20:	mov	r0, r5
     d22:	bl	7b9c <FsBaseFile::close()>
		if (filename) free(filename);
     d26:	ldr	r0, [r4, #100]	; 0x64
     d28:	cbz	r0, d2e <SDFile::~SDFile()+0x1e>
     d2a:	bl	bbfc <free>
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     d2e:	ldr	r3, [pc, #60]	; (d6c <SDFile::~SDFile()+0x5c>)
     d30:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d32:	mov	r0, r5
     d34:	bl	7b9c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d38:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d3a:	ldr	r3, [pc, #52]	; (d70 <SDFile::~SDFile()+0x60>)
     d3c:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     d3e:	cbz	r2, d52 <SDFile::~SDFile()+0x42>
     d40:	ldr	r3, [r2, #16]
     d42:	subs	r3, #1
     d44:	str	r3, [r2, #16]
     d46:	cbnz	r3, d52 <SDFile::~SDFile()+0x42>
     d48:	ldr	r0, [r4, #16]
     d4a:	cbz	r0, d52 <SDFile::~SDFile()+0x42>
     d4c:	ldr	r3, [r0, #0]
     d4e:	ldr	r3, [r3, #32]
     d50:	blx	r3
	}
     d52:	mov	r0, r4
     d54:	movs	r1, #104	; 0x68
     d56:	bl	ad94 <operator delete(void*, unsigned int)>
     d5a:	mov	r0, r4
     d5c:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     d5e:	ldr	r3, [r0, #96]	; 0x60
     d60:	cmp	r3, #0
     d62:	bne.n	d20 <SDFile::~SDFile()+0x10>
     d64:	b.n	d26 <SDFile::~SDFile()+0x16>
     d66:	nop
     d68:	.word	0x0000fe08
     d6c:	.word	0x0000fdc0
     d70:	.word	0x0000fd0c

00000d74 <SDFile::~SDFile()>:

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
	virtual ~SDFile(void) {
     d74:	push	{r3, r4, r5, lr}
     d76:	ldr	r3, [r0, #92]	; 0x5c
     d78:	ldr	r2, [pc, #72]	; (dc4 <SDFile::~SDFile()+0x50>)
     d7a:	str	r2, [r0, #0]
     d7c:	mov	r4, r0
		if (sdfatfile) sdfatfile.close();
     d7e:	add.w	r5, r0, #36	; 0x24
     d82:	cbz	r3, dba <SDFile::~SDFile()+0x46>
     d84:	mov	r0, r5
     d86:	bl	7b9c <FsBaseFile::close()>
		if (filename) free(filename);
     d8a:	ldr	r0, [r4, #100]	; 0x64
     d8c:	cbz	r0, d92 <SDFile::~SDFile()+0x1e>
     d8e:	bl	bbfc <free>
     d92:	ldr	r3, [pc, #52]	; (dc8 <SDFile::~SDFile()+0x54>)
     d94:	str	r3, [r4, #20]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     d96:	mov	r0, r5
     d98:	bl	7b9c <FsBaseFile::close()>
     d9c:	ldr	r2, [r4, #16]
		invalidate();
		f = file.f;
		if (f) f->refcount++;
		return *this;
	}
	virtual ~File() {
     d9e:	ldr	r3, [pc, #44]	; (dcc <SDFile::~SDFile()+0x58>)
     da0:	str	r3, [r4, #0]
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     da2:	cbz	r2, db6 <SDFile::~SDFile()+0x42>
     da4:	ldr	r3, [r2, #16]
     da6:	subs	r3, #1
     da8:	str	r3, [r2, #16]
     daa:	cbnz	r3, db6 <SDFile::~SDFile()+0x42>
     dac:	ldr	r0, [r4, #16]
     dae:	cbz	r0, db6 <SDFile::~SDFile()+0x42>
     db0:	ldr	r3, [r0, #0]
     db2:	ldr	r3, [r3, #32]
     db4:	blx	r3
	}
     db6:	mov	r0, r4
     db8:	pop	{r3, r4, r5, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     dba:	ldr	r3, [r0, #96]	; 0x60
     dbc:	cmp	r3, #0
     dbe:	bne.n	d84 <SDFile::~SDFile()+0x10>
     dc0:	b.n	d8a <SDFile::~SDFile()+0x16>
     dc2:	nop
     dc4:	.word	0x0000fe08
     dc8:	.word	0x0000fdc0
     dcc:	.word	0x0000fd0c

00000dd0 <MTPStorage_SD::ResetIndex()>:
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     dd0:	ldr	r3, [r0, #20]
     dd2:	cmp	r3, #0
     dd4:	beq.n	ece <MTPStorage_SD::ResetIndex()+0xfe>
  uint32_t MTPStorage_SD::clusterSize() { return SD.sdfs.sectorsPerCluster(); }
#endif

  void MTPStorage_SD::ResetIndex() {
     dd6:	push	{r4, r5, r6, r7, lr}
     dd8:	ldr	r2, [r3, #0]
     dda:	sub	sp, #84	; 0x54
     ddc:	mov	r5, r0
     dde:	mov	r0, r3
     de0:	ldr	r3, [r2, #64]	; 0x40
     de2:	blx	r3
    if(!sd_isOpen(index_)) return;
     de4:	cbnz	r0, dea <MTPStorage_SD::ResetIndex()+0x1a>
    mtp_lock_storage(false);

    all_scanned_ = false;
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }
     de6:	add	sp, #84	; 0x54
     de8:	pop	{r4, r5, r6, r7, pc}
     dea:	ldr	r0, [r5, #20]
     dec:	cbz	r0, e00 <MTPStorage_SD::ResetIndex()+0x30>
     dee:	ldr	r3, [r0, #0]
     df0:	ldr	r3, [r3, #64]	; 0x40
     df2:	blx	r3

  void MTPStorage_SD::ResetIndex() {
    if(!sd_isOpen(index_)) return;
    
    mtp_lock_storage(true);
    if(sd_isOpen(index_)) index_.close();
     df4:	cbz	r0, e00 <MTPStorage_SD::ResetIndex()+0x30>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
     df6:	ldr	r0, [r5, #20]
     df8:	cbz	r0, e00 <MTPStorage_SD::ResetIndex()+0x30>
     dfa:	ldr	r3, [r0, #0]
     dfc:	ldr	r3, [r3, #60]	; 0x3c
     dfe:	blx	r3
     e00:	ldr	r3, [pc, #268]	; (f10 <MTPStorage_SD::ResetIndex()+0x140>)
     e02:	ldr.w	r4, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
     e06:	cmp	r4, #0
     e08:	beq.n	ed8 <MTPStorage_SD::ResetIndex()+0x108>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     e0a:	mov	r1, r4
     e0c:	mov	r0, sp
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     e0e:	movs	r4, #0
     e10:	movs	r3, #1
     e12:	ldr	r2, [pc, #256]	; (f14 <MTPStorage_SD::ResetIndex()+0x144>)
     e14:	strb.w	r4, [sp]
     e18:	mov	r6, sp
     e1a:	strb.w	r4, [sp, #1]
     e1e:	strb.w	r4, [sp, #2]
     e22:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
     e26:	cmp	r0, #0
     e28:	bne.n	ed0 <MTPStorage_SD::ResetIndex()+0x100>
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     e2a:	movw	r3, #16898	; 0x4202
     e2e:	mov	r0, r6
     e30:	ldr	r2, [pc, #224]	; (f14 <MTPStorage_SD::ResetIndex()+0x144>)
     e32:	ldr	r1, [pc, #228]	; (f18 <MTPStorage_SD::ResetIndex()+0x148>)
     e34:	bl	7d68 <FsVolume::open(char const*, int)>
     e38:	ldr	r3, [sp, #72]	; 0x48
     e3a:	cmp	r3, #0
     e3c:	beq.n	f04 <MTPStorage_SD::ResetIndex()+0x134>
		if (file) return File(new SDFile(file));
     e3e:	movs	r0, #104	; 0x68
     e40:	bl	ad90 <operator new(unsigned int)>
     e44:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     e46:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e4a:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     e4c:	ldr	r0, [pc, #204]	; (f1c <MTPStorage_SD::ResetIndex()+0x14c>)
     e4e:	ldr	r1, [pc, #208]	; (f20 <MTPStorage_SD::ResetIndex()+0x150>)
     e50:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e52:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     e56:	movs	r6, #0
     e58:	str	r3, [r4, #8]
     e5a:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     e5c:	ldrb.w	r3, [sp, #12]
     e60:	str	r0, [r4, #0]
     e62:	str	r1, [r4, #20]
     e64:	str	r2, [r4, #28]
     e66:	strb.w	r3, [r4, #32]
     e6a:	add.w	r0, r4, #36	; 0x24
     e6e:	mov	r1, r7
     e70:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     e72:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     e74:	str	r6, [r4, #16]
     e76:	bl	7b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     e7a:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     e7c:	ldr	r2, [pc, #164]	; (f24 <MTPStorage_SD::ResetIndex()+0x154>)
     e7e:	str	r6, [r4, #100]	; 0x64
     e80:	adds	r3, #1
     e82:	str	r2, [r4, #20]
     e84:	str	r3, [r4, #16]
     e86:	ldr	r3, [pc, #160]	; (f28 <MTPStorage_SD::ResetIndex()+0x158>)
     e88:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     e8a:	mov	r0, r7
     e8c:	bl	7b9c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     e90:	ldr	r2, [r5, #20]
     e92:	cbz	r2, e9c <MTPStorage_SD::ResetIndex()+0xcc>
     e94:	ldr	r3, [r2, #16]
     e96:	subs	r3, #1
     e98:	str	r3, [r2, #16]
     e9a:	cbz	r3, ec0 <MTPStorage_SD::ResetIndex()+0xf0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     e9c:	str	r4, [r5, #20]
		if (f) f->refcount++;
     e9e:	cbz	r4, eac <MTPStorage_SD::ResetIndex()+0xdc>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     ea0:	ldr	r3, [r4, #16]
     ea2:	cbnz	r3, eac <MTPStorage_SD::ResetIndex()+0xdc>
     ea4:	ldr	r3, [r4, #0]
     ea6:	mov	r0, r4
     ea8:	ldr	r3, [r3, #32]
     eaa:	blx	r3
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     eac:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
     eae:	mvn.w	r2, #1
    if(sd_isOpen(index_)) index_.close();
    sd_remove(indexFile);
    index_ = sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
     eb2:	strb.w	r3, [r5, #77]	; 0x4d
    index_generated=false;
     eb6:	strb.w	r3, [r5, #76]	; 0x4c
    open_file_ = 0xFFFFFFFEUL;
     eba:	str	r2, [r5, #68]	; 0x44
  }
     ebc:	add	sp, #84	; 0x54
     ebe:	pop	{r4, r5, r6, r7, pc}
     ec0:	ldr	r0, [r5, #20]
     ec2:	cmp	r0, #0
     ec4:	beq.n	e9c <MTPStorage_SD::ResetIndex()+0xcc>
     ec6:	ldr	r3, [r0, #0]
     ec8:	ldr	r3, [r3, #32]
     eca:	blx	r3
     ecc:	b.n	e9c <MTPStorage_SD::ResetIndex()+0xcc>
     ece:	bx	lr
     ed0:	mov	r0, sp
     ed2:	bl	7368 <FatFile::remove()>
     ed6:	b.n	e2a <MTPStorage_SD::ResetIndex()+0x5a>
     ed8:	ldr.w	r1, [r3, #1152]	; 0x480
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     edc:	mov	r6, sp
     ede:	cmp	r1, #0
     ee0:	beq.n	e2a <MTPStorage_SD::ResetIndex()+0x5a>
     ee2:	mov	r0, sp
     ee4:	movs	r3, #1
     ee6:	ldr	r2, [pc, #44]	; (f14 <MTPStorage_SD::ResetIndex()+0x144>)
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     ee8:	strb.w	r4, [sp, #49]	; 0x31
     eec:	strb.w	r4, [sp, #50]	; 0x32
     ef0:	strb.w	r4, [sp, #51]	; 0x33
     ef4:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
     ef8:	cmp	r0, #0
     efa:	beq.n	e2a <MTPStorage_SD::ResetIndex()+0x5a>
     efc:	mov	r0, sp
     efe:	bl	4e78 <ExFatFile::remove()>
     f02:	b.n	e2a <MTPStorage_SD::ResetIndex()+0x5a>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     f04:	ldr	r4, [sp, #76]	; 0x4c
     f06:	cmp	r4, #0
     f08:	bne.n	e3e <MTPStorage_SD::ResetIndex()+0x6e>
     f0a:	add	r7, sp, #16
     f0c:	b.n	e86 <MTPStorage_SD::ResetIndex()+0xb6>
     f0e:	nop
     f10:	.word	0x1fff16f4
     f14:	.word	0x0000fecc
     f18:	.word	0x1fff16f8
     f1c:	.word	0x0000fe08
     f20:	.word	0x0000fd9c
     f24:	.word	0x0000fde4
     f28:	.word	0x0000fdc0

00000f2c <mtp_yield()>:
//   support serialflash
//   partial object fetch/receive
//   events (notify usb host when local storage changes) (But, this seems too difficult)

// These should probably be weak.
void mtp_yield() {}
     f2c:	bx	lr
     f2e:	nop

00000f30 <MTPStorage_SD::OpenIndex()>:
    index_generated = false;
    index_entries_ = 0;
  }

  void MTPStorage_SD::OpenIndex() 
  { if(sd_isOpen(index_)) return; // only once
     f30:	push	{r4, r5, r6, r7, lr}
     f32:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
     f34:	ldr	r0, [r0, #20]
     f36:	sub	sp, #84	; 0x54
     f38:	cbz	r0, f46 <MTPStorage_SD::OpenIndex()+0x16>
     f3a:	ldr	r3, [r0, #0]
     f3c:	ldr	r3, [r3, #64]	; 0x40
     f3e:	blx	r3
     f40:	cbz	r0, f46 <MTPStorage_SD::OpenIndex()+0x16>
    mtp_lock_storage(true);
    index_=sd_open(indexFile, FILE_WRITE);
    mtp_lock_storage(false);
  }
     f42:	add	sp, #84	; 0x54
     f44:	pop	{r4, r5, r6, r7, pc}
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
     f46:	movw	r3, #16898	; 0x4202
     f4a:	ldr	r2, [pc, #156]	; (fe8 <MTPStorage_SD::OpenIndex()+0xb8>)
     f4c:	ldr	r1, [pc, #156]	; (fec <MTPStorage_SD::OpenIndex()+0xbc>)
     f4e:	mov	r0, sp
     f50:	bl	7d68 <FsVolume::open(char const*, int)>
     f54:	ldr	r3, [sp, #72]	; 0x48
     f56:	cmp	r3, #0
     f58:	beq.n	fde <MTPStorage_SD::OpenIndex()+0xae>
		if (file) return File(new SDFile(file));
     f5a:	movs	r0, #104	; 0x68
     f5c:	bl	ad90 <operator new(unsigned int)>
     f60:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
     f62:	ldrb.w	r6, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f66:	ldr	r2, [sp, #8]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     f68:	ldr	r0, [pc, #132]	; (ff0 <MTPStorage_SD::OpenIndex()+0xc0>)
     f6a:	ldr	r1, [pc, #136]	; (ff4 <MTPStorage_SD::OpenIndex()+0xc4>)
     f6c:	strb	r6, [r4, #24]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f6e:	mov.w	r3, #1000	; 0x3e8
{
  public:
	constexpr Print() : write_error(0) {}
     f72:	movs	r6, #0
     f74:	str	r3, [r4, #8]
     f76:	add	r7, sp, #16
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     f78:	ldrb.w	r3, [sp, #12]
     f7c:	str	r0, [r4, #0]
     f7e:	str	r1, [r4, #20]
     f80:	str	r2, [r4, #28]
     f82:	strb.w	r3, [r4, #32]
     f86:	add.w	r0, r4, #36	; 0x24
     f8a:	mov	r1, r7
     f8c:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     f8e:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
     f90:	str	r6, [r4, #16]
     f92:	bl	7b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
     f96:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f98:	ldr	r2, [pc, #92]	; (ff8 <MTPStorage_SD::OpenIndex()+0xc8>)
     f9a:	str	r6, [r4, #100]	; 0x64
     f9c:	adds	r3, #1
     f9e:	str	r2, [r4, #20]
     fa0:	str	r3, [r4, #16]
     fa2:	ldr	r3, [pc, #88]	; (ffc <MTPStorage_SD::OpenIndex()+0xcc>)
     fa4:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
     fa6:	mov	r0, r7
     fa8:	bl	7b9c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     fac:	ldr	r2, [r5, #20]
     fae:	cbz	r2, fb8 <MTPStorage_SD::OpenIndex()+0x88>
     fb0:	ldr	r3, [r2, #16]
     fb2:	subs	r3, #1
     fb4:	str	r3, [r2, #16]
     fb6:	cbz	r3, fd0 <MTPStorage_SD::OpenIndex()+0xa0>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
     fb8:	str	r4, [r5, #20]
		if (f) f->refcount++;
     fba:	cmp	r4, #0
     fbc:	beq.n	f42 <MTPStorage_SD::OpenIndex()+0x12>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
     fbe:	ldr	r3, [r4, #16]
     fc0:	cmp	r3, #0
     fc2:	bne.n	f42 <MTPStorage_SD::OpenIndex()+0x12>
     fc4:	ldr	r3, [r4, #0]
     fc6:	mov	r0, r4
     fc8:	ldr	r3, [r3, #32]
     fca:	blx	r3
     fcc:	add	sp, #84	; 0x54
     fce:	pop	{r4, r5, r6, r7, pc}
     fd0:	ldr	r0, [r5, #20]
     fd2:	cmp	r0, #0
     fd4:	beq.n	fb8 <MTPStorage_SD::OpenIndex()+0x88>
     fd6:	ldr	r3, [r0, #0]
     fd8:	ldr	r3, [r3, #32]
     fda:	blx	r3
     fdc:	b.n	fb8 <MTPStorage_SD::OpenIndex()+0x88>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
     fde:	ldr	r4, [sp, #76]	; 0x4c
     fe0:	cmp	r4, #0
     fe2:	bne.n	f5a <MTPStorage_SD::OpenIndex()+0x2a>
     fe4:	add	r7, sp, #16
     fe6:	b.n	fa2 <MTPStorage_SD::OpenIndex()+0x72>
     fe8:	.word	0x0000fecc
     fec:	.word	0x1fff16f8
     ff0:	.word	0x0000fe08
     ff4:	.word	0x0000fd9c
     ff8:	.word	0x0000fde4
     ffc:	.word	0x0000fdc0

00001000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    1000:	push	{r4, r5, r6, lr}
    1002:	mov	r5, r0
    1004:	mov	r4, r1
    1006:	mov	r6, r2
    OpenIndex();
    1008:	bl	f30 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    100c:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    100e:	add.w	r4, r4, r4, lsl #2
    1012:	cbz	r0, 1030 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    1014:	ldr	r3, [r0, #0]
    1016:	lsls	r1, r4, #4
    1018:	ldr	r3, [r3, #48]	; 0x30
    101a:	movs	r2, #0
    101c:	blx	r3
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
	}
	virtual size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
    101e:	ldr	r0, [r5, #20]
    1020:	cbz	r0, 1030 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    1022:	ldr	r3, [r0, #0]
    1024:	mov	r1, r6
    1026:	ldr	r3, [r3, #44]	; 0x2c
    1028:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    102a:	ldmia.w	sp!, {r4, r5, r6, lr}
    102e:	bx	r3
    1030:	pop	{r4, r5, r6, pc}
    1032:	nop

00001034 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    1034:	push	{r4, r5, r6, lr}
    1036:	ldr	r2, [pc, #136]	; (10c0 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x8c>)
    1038:	ldr.w	r5, [r2, #1148]	; 0x47c
  { if (index_generated) return; 
    index_generated = true;
    103c:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    103e:	sub	sp, #80	; 0x50
    1040:	mov	r4, r0
  { if (index_generated) return; 
    index_generated = true;
    1042:	strb.w	r3, [r0, #76]	; 0x4c
    1046:	cbz	r5, 1094 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x60>
    1048:	mov	r1, r5
    104a:	mov	r0, sp
    104c:	movs	r5, #0
    104e:	ldr	r2, [pc, #116]	; (10c4 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x90>)
    1050:	strb.w	r5, [sp]
    1054:	mov	r6, sp
    1056:	strb.w	r5, [sp, #1]
    105a:	strb.w	r5, [sp, #2]
    105e:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    1062:	cbnz	r0, 108c <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x58>
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1064:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    1066:	movs	r5, #1
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1068:	str	r5, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    106a:	mov	r0, r4
    106c:	mov	r2, r6
    106e:	mov	r1, r3
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    1070:	movs	r4, #47	; 0x2f
    sd_remove(indexFile);
    mtp_lock_storage(false);

    index_entries_ = 0;
    Record r;
    r.parent = 0;
    1072:	str	r3, [sp, #0]
    r.sibling = 0;
    1074:	str	r3, [sp, #8]
    r.child = 0;
    1076:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    1078:	strb.w	r3, [sp, #13]
    index_entries_ = 0;
    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    107c:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    1080:	strh.w	r4, [sp, #14]
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    1084:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    1088:	add	sp, #80	; 0x50
    108a:	pop	{r4, r5, r6, pc}
    108c:	mov	r0, sp
    108e:	bl	7368 <FatFile::remove()>
    1092:	b.n	1064 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    1094:	ldr.w	r1, [r2, #1152]	; 0x480
    1098:	mov	r6, sp
    109a:	cmp	r1, #0
    109c:	beq.n	1064 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    109e:	mov	r0, sp
    10a0:	ldr	r2, [pc, #32]	; (10c4 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x90>)
    10a2:	strb.w	r5, [sp, #49]	; 0x31
    10a6:	strb.w	r5, [sp, #50]	; 0x32
    10aa:	strb.w	r5, [sp, #51]	; 0x33
    10ae:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    10b2:	cmp	r0, #0
    10b4:	beq.n	1064 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    10b6:	mov	r0, sp
    10b8:	bl	4e78 <ExFatFile::remove()>
    10bc:	b.n	1064 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]+0x30>
    10be:	nop
    10c0:	.word	0x1fff16f4
    10c4:	.word	0x0000fecc

000010c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    10c8:	push	{r4, r5, r6, lr}
    10ca:	mov	r5, r1
    10cc:	mov	r4, r2
    Record ret;
    memset(&ret, 0, sizeof(ret));
    10ce:	movs	r1, #0
    10d0:	movs	r2, #80	; 0x50
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    10d2:	mov	r6, r0
    Record ret;
    memset(&ret, 0, sizeof(ret));
    10d4:	bl	c37c <memset>
    if (i > index_entries_) 
    10d8:	ldr	r3, [r5, #72]	; 0x48
    10da:	cmp	r3, r4
    10dc:	bcc.n	1108 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    10de:	mov	r0, r5
    10e0:	bl	f30 <MTPStorage_SD::OpenIndex()>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    10e4:	ldr	r0, [r5, #20]
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    10e6:	add.w	r4, r4, r4, lsl #2
    10ea:	lsls	r1, r4, #4
    10ec:	cbz	r0, 1104 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10ee:	ldr	r3, [r0, #0]
    10f0:	movs	r2, #0
    10f2:	ldr	r3, [r3, #48]	; 0x30
    10f4:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    10f6:	ldr	r0, [r5, #20]
    10f8:	cbz	r0, 1104 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    10fa:	ldr	r3, [r0, #0]
    10fc:	movs	r2, #80	; 0x50
    10fe:	ldr	r3, [r3, #40]	; 0x28
    1100:	mov	r1, r6
    1102:	blx	r3
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    1104:	mov	r0, r6
    1106:	pop	{r4, r5, r6, pc}
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    memset(&ret, 0, sizeof(ret));
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    1108:	movs	r2, #80	; 0x50
    110a:	movs	r1, #0
    110c:	mov	r0, r6
    110e:	bl	c37c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    1112:	mov	r0, r6
    1114:	pop	{r4, r5, r6, pc}
    1116:	nop

00001118 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    1118:	push	{r4, r5, lr}
    while (true) 
    { if (next_ == 0) return 0;
    111a:	ldr	r5, [r0, #80]	; 0x50
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    111c:	sub	sp, #84	; 0x54
    111e:	mov	r4, r0
    while (true) 
    { if (next_ == 0) return 0;
    1120:	cbnz	r5, 1132 <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    1122:	b.n	1160 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    1124:	ldr	r3, [sp, #8]
    1126:	str	r3, [r4, #80]	; 0x50
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    1128:	ldrb.w	r3, [sp, #14]
    112c:	cbnz	r3, 115a <MTPStorage_SD::GetNextObjectHandle()+0x42>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    112e:	ldr	r5, [r4, #80]	; 0x50
    1130:	cbz	r5, 1160 <MTPStorage_SD::GetNextObjectHandle()+0x48>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    1132:	mov	r2, r5
    1134:	mov	r1, r4
    1136:	mov	r0, sp
    1138:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    113c:	ldrb.w	r2, [r4, #84]	; 0x54
    1140:	cmp	r2, #0
    1142:	bne.n	1124 <MTPStorage_SD::GetNextObjectHandle()+0xc>
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1144:	ldr	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    1146:	ldr	r1, [r4, #72]	; 0x48
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
    1148:	adds	r3, #1
    114a:	str	r3, [r4, #80]	; 0x50
        if (next_ >= index_entries_) next_ = 0;
    114c:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    114e:	ldrb.w	r3, [sp, #14]
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    1152:	it	cs
    1154:	strcs	r2, [r4, #80]	; 0x50
      }
      if (r.name[0]) return ret;
    1156:	cmp	r3, #0
    1158:	beq.n	112e <MTPStorage_SD::GetNextObjectHandle()+0x16>
    }
  }
    115a:	mov	r0, r5
    115c:	add	sp, #84	; 0x54
    115e:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) 
    { if (next_ == 0) return 0;
    1160:	movs	r5, #0
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    1162:	mov	r0, r5
    1164:	add	sp, #84	; 0x54
    1166:	pop	{r4, r5, pc}

00001168 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1168:	push	{r4, r5, r6, lr}
    116a:	sub	sp, #80	; 0x50
    116c:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    116e:	mov	r2, r1
    1170:	mov	r1, r0
    1172:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    1174:	mov	r4, r3
    1176:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    1178:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    117c:	mov	r0, r6
    117e:	add.w	r1, sp, #14
    1182:	bl	c864 <strcpy>
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1186:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    118a:	ldr	r2, [sp, #0]
    118c:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    118e:	cbnz	r3, 1198 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    1190:	ldr	r3, [sp, #4]
    1192:	str	r3, [r4, #0]
  }
    1194:	add	sp, #80	; 0x50
    1196:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1198:	mov.w	r3, #4294967295
    119c:	str	r3, [r4, #0]
  }
    119e:	add	sp, #80	; 0x50
    11a0:	pop	{r4, r5, r6, pc}
    11a2:	nop

000011a4 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    11a4:	push	{lr}
    11a6:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    11a8:	mov	r2, r1
    11aa:	mov	r1, r0
    11ac:	mov	r0, sp
    11ae:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    11b2:	ldr	r0, [sp, #4]
    11b4:	add	sp, #84	; 0x54
    11b6:	ldr.w	pc, [sp], #4
    11ba:	nop

000011bc <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    11bc:	push	{r4, r5, lr}
    11be:	mov	r4, r0
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    11c0:	ldr	r0, [r0, #40]	; 0x28
    11c2:	sub	sp, #84	; 0x54
    11c4:	cbz	r0, 11f8 <MTPStorage_SD::close()+0x3c>
    11c6:	ldr	r3, [r0, #0]
    11c8:	ldr	r3, [r3, #56]	; 0x38
    11ca:	blx	r3
    11cc:	mov	r5, r0
	}
	virtual void close() {
		if (f) f->close();
    11ce:	ldr	r0, [r4, #40]	; 0x28
    11d0:	cbz	r0, 11d8 <MTPStorage_SD::close()+0x1c>
    11d2:	ldr	r3, [r0, #0]
    11d4:	ldr	r3, [r3, #60]	; 0x3c
    11d6:	blx	r3
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    11d8:	mov	r0, sp
    11da:	ldr	r2, [r4, #68]	; 0x44
    11dc:	mov	r1, r4
    11de:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    11e2:	mov	r2, sp
    11e4:	ldr	r1, [r4, #68]	; 0x44
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    11e6:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    11e8:	mov	r0, r4
    11ea:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    11ee:	mvn.w	r3, #1
    11f2:	str	r3, [r4, #68]	; 0x44
  }
    11f4:	add	sp, #84	; 0x54
    11f6:	pop	{r4, r5, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    11f8:	mov	r5, r0
    11fa:	b.n	11d8 <MTPStorage_SD::close()+0x1c>

000011fc <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    11fc:	cbz	r1, 124c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    11fe:	push	{r4, r5, r6, lr}
    1200:	sub	sp, #80	; 0x50
    1202:	mov	r5, r2
    1204:	mov	r4, r0
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    1206:	mov	r2, r1
    1208:	mov	r6, r3
    120a:	mov	r1, r0
    120c:	mov	r0, sp
    120e:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    1212:	mov	r3, r6
    1214:	mov	r0, r4
    1216:	mov	r2, r5
    1218:	ldr	r1, [sp, #0]
    121a:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    121e:	mov	r0, r5
    1220:	bl	c940 <strlen>
    1224:	adds	r3, r5, r0
    1226:	mov	r4, r0
    1228:	ldrb.w	r3, [r3, #-1]
    122c:	cmp	r3, #47	; 0x2f
    122e:	beq.n	1238 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    1230:	ldr	r3, [pc, #48]	; (1264 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    1232:	ldrh	r3, [r3, #0]
    1234:	strh	r3, [r5, r0]
    1236:	adds	r4, #1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1238:	add.w	r0, sp, #14
    123c:	bl	c940 <strlen>
    1240:	add	r0, r4
    1242:	adds	r0, #1
    1244:	cmp	r0, r6
    1246:	bcc.n	1254 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    1248:	add	sp, #80	; 0x50
    124a:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    124c:	ldr	r3, [pc, #20]	; (1264 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    124e:	ldrh	r3, [r3, #0]
    1250:	strh	r3, [r2, #0]
    1252:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    1254:	add.w	r1, sp, #14
    1258:	mov	r0, r5
    125a:	bl	c824 <strcat>
    }
  }
    125e:	add	sp, #80	; 0x50
    1260:	pop	{r4, r5, r6, pc}
    1262:	nop
    1264:	.word	0x0000fedc

00001268 <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    1268:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    126c:	adds	r2, r1, #1
    126e:	sub	sp, #496	; 0x1f0
    1270:	mov	r6, r1
    1272:	mov	r4, r0
    1274:	ite	ne
    1276:	movne	r5, r1
    1278:	moveq	r5, #0
    127a:	b.n	128c <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    127c:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    127e:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    1280:	cbz	r3, 12ac <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    1282:	ldr	r3, [r4, #0]
    1284:	ldr	r3, [r3, #52]	; 0x34
    1286:	blx	r3
    1288:	cmp	r0, #0
    128a:	beq.n	135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    128c:	mov	r2, r5
    128e:	mov	r1, r4
    1290:	mov	r0, sp
    1292:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1296:	movs	r2, #80	; 0x50
    1298:	mov	r1, sp
    129a:	add.w	r0, sp, r2
    129e:	bl	9584 <memcpy>
      if (!r.isdir) break;
    12a2:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    12a6:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    12a8:	cmp	r3, #0
    12aa:	bne.n	127c <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    12ac:	adds	r3, r6, #1
    12ae:	beq.n	1372 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    12b0:	mov.w	r3, #256	; 0x100
    12b4:	add	r2, sp, #240	; 0xf0
    12b6:	mov	r1, r6
    12b8:	mov	r0, r4
    12ba:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    12be:	ldrb.w	r7, [sp, #92]	; 0x5c
    12c2:	ldr	r3, [pc, #296]	; (13ec <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    12c4:	cmp	r7, #0
    12c6:	beq.n	137a <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    12c8:	ldr.w	r7, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    12cc:	cbz	r7, 133a <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    12ce:	add	r5, sp, #160	; 0xa0
    12d0:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    12d4:	add	r2, sp, #240	; 0xf0
    12d6:	mov	r1, r7
    12d8:	mov	r0, r5
    12da:	mov	r3, lr
    12dc:	strb.w	lr, [r5]
    12e0:	strb.w	lr, [r5, #1]
    12e4:	strb.w	lr, [r5, #2]
    12e8:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    12ec:	cbz	r0, 135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    12ee:	mov	r0, r5
    12f0:	bl	6020 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    12f4:	cbz	r0, 135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    int p = r.parent;
    12f6:	ldr.w	r8, [sp, #80]	; 0x50
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    12fa:	movs	r3, #0
    int p = r.parent;
    WriteIndexRecord(object, r);
    12fc:	add	r2, sp, #80	; 0x50
    12fe:	mov	r1, r6
    1300:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd_rmdir(filename); else  success = sd_remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    1302:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    1306:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    130a:	mov	r2, r8
    130c:	mov	r1, r4
    130e:	mov	r0, r5
    1310:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    1314:	ldr	r7, [r5, #4]
    1316:	cmp	r6, r7
    1318:	beq.n	1364 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    131a:	cbz	r7, 1372 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    131c:	mov	r2, r7
    131e:	mov	r1, r4
    1320:	mov	r0, sp
    1322:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1326:	movs	r2, #80	; 0x50
    1328:	mov	r1, sp
    132a:	mov	r0, r5
    132c:	bl	9584 <memcpy>
        if (tmp.sibling == object) 
    1330:	ldr	r3, [r5, #8]
    1332:	cmp	r6, r3
    1334:	beq.n	13d0 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    1336:	mov	r7, r3
    1338:	b.n	131a <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    133a:	ldr.w	r1, [r3, #1152]	; 0x480
    133e:	cbz	r1, 135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    1340:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1342:	add	r2, sp, #240	; 0xf0
    1344:	mov	r3, r7
    1346:	mov	r0, r5
    1348:	strb.w	r7, [r5, #49]	; 0x31
    134c:	strb.w	r7, [r5, #50]	; 0x32
    1350:	strb.w	r7, [r5, #51]	; 0x33
    1354:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1358:	cmp	r0, #0
    135a:	bne.n	13e2 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    135c:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    135e:	add	sp, #496	; 0x1f0
    1360:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    1364:	ldr	r3, [sp, #88]	; 0x58
    1366:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    1368:	mov	r2, r5
    136a:	mov	r1, r8
    136c:	mov	r0, r4
    136e:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    1372:	movs	r0, #1
  }
    1374:	add	sp, #496	; 0x1f0
    1376:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    137a:	ldr.w	lr, [r3, #1148]	; 0x47c
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    137e:	cmp.w	lr, #0
    1382:	beq.n	13a4 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    1384:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1386:	add	r2, sp, #240	; 0xf0
    1388:	mov	r1, lr
    138a:	mov	r0, r5
    138c:	movs	r3, #1
    138e:	strb	r7, [r5, #0]
    1390:	strb	r7, [r5, #1]
    1392:	strb	r7, [r5, #2]
    1394:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    1398:	cmp	r0, #0
    139a:	beq.n	135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    139c:	mov	r0, r5
    139e:	bl	7368 <FatFile::remove()>
    13a2:	b.n	12f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    13a4:	ldr.w	r1, [r3, #1152]	; 0x480
    13a8:	cmp	r1, #0
    13aa:	beq.n	135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    13ac:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    13ae:	add	r2, sp, #240	; 0xf0
    13b0:	mov	r0, r5
    13b2:	movs	r3, #1
    13b4:	strb.w	lr, [r5, #49]	; 0x31
    13b8:	strb.w	lr, [r5, #50]	; 0x32
    13bc:	strb.w	lr, [r5, #51]	; 0x33
    13c0:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    13c4:	cmp	r0, #0
    13c6:	beq.n	135c <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    13c8:	mov	r0, r5
    13ca:	bl	4e78 <ExFatFile::remove()>
    13ce:	b.n	12f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    13d0:	ldr	r3, [sp, #88]	; 0x58
    13d2:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    13d4:	mov	r0, r4
    13d6:	mov	r2, r5
    13d8:	mov	r1, r7
    13da:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    13de:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    13e0:	b.n	135e <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    13e2:	mov	r0, r5
    13e4:	bl	4fa0 <ExFatFile::rmdir()>
    13e8:	b.n	12f4 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    13ea:	nop
    13ec:	.word	0x1fff16f4

000013f0 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13f0:	push	{r4, r5, r6, lr}
    13f2:	sub.w	sp, sp, #648	; 0x288
    13f6:	mov	r4, r0
    13f8:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    13fa:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    13fe:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    1400:	add	r2, sp, #136	; 0x88
    1402:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    1406:	mov	r2, r5
    1408:	mov	r1, r4
    140a:	add	r0, sp, #56	; 0x38
    140c:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    1410:	mov	r1, r6
    1412:	add.w	r0, sp, #70	; 0x46
    1416:	bl	c864 <strcpy>
    WriteIndexRecord(handle, p1);
    141a:	mov	r0, r4
    141c:	add	r2, sp, #56	; 0x38
    141e:	mov	r1, r5
    1420:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    1424:	mov	r0, r4
    1426:	mov.w	r3, #256	; 0x100
    142a:	mov	r1, r5
    142c:	add	r2, sp, #392	; 0x188
    142e:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1432:	ldr	r3, [pc, #116]	; (14a8 <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    1434:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    1438:	cbz	r4, 1470 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    143a:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    143c:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1440:	add	r2, sp, #136	; 0x88
    1442:	mov	r1, r4
    1444:	mov	r0, sp
    1446:	mov	r3, r5
    1448:	strb.w	r5, [sp]
    144c:	strb.w	r5, [sp, #1]
    1450:	strb.w	r5, [sp, #2]
    1454:	bl	5bf4 <FatFile::open(FatFile*, char const*, int)>
    1458:	cbnz	r0, 1460 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd_rename(oldName,newName);
  }
    145a:	add.w	sp, sp, #648	; 0x288
    145e:	pop	{r4, r5, r6, pc}
    1460:	add	r2, sp, #392	; 0x188
    1462:	mov	r1, r4
    1464:	mov	r0, sp
    1466:	bl	64f4 <FatFile::rename(FatFile*, char const*)>
    146a:	add.w	sp, sp, #648	; 0x288
    146e:	pop	{r4, r5, r6, pc}
    1470:	ldr.w	r1, [r3, #1152]	; 0x480
    1474:	cmp	r1, #0
    1476:	beq.n	145a <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    1478:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    147c:	add	r2, sp, #136	; 0x88
    147e:	mov	r1, r5
    1480:	mov	r3, r4
    1482:	mov	r0, sp
    1484:	strb.w	r4, [sp, #49]	; 0x31
    1488:	strb.w	r4, [sp, #50]	; 0x32
    148c:	strb.w	r4, [sp, #51]	; 0x33
    1490:	bl	457c <ExFatFile::open(ExFatFile*, char const*, int)>
    1494:	cmp	r0, #0
    1496:	beq.n	145a <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    1498:	add	r2, sp, #392	; 0x188
    149a:	mov	r1, r5
    149c:	mov	r0, sp
    149e:	bl	548c <ExFatFile::rename(ExFatFile*, char const*)>
    14a2:	add.w	sp, sp, #648	; 0x288
    14a6:	pop	{r4, r5, r6, pc}
    14a8:	.word	0x1fff16f4

000014ac <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    14ac:	push	{r4, r5, r6, lr}
    14ae:	sub.w	sp, sp, #728	; 0x2d8
    14b2:	mov	r4, r2
    14b4:	mov	r5, r0
    14b6:	mov	r6, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    14b8:	mov.w	r3, #256	; 0x100
    14bc:	add	r2, sp, #216	; 0xd8
    14be:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    14c2:	mov	r2, r6
    14c4:	mov	r1, r5
    14c6:	add	r0, sp, #56	; 0x38
    14c8:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    14cc:	adds	r3, r4, #1
    14ce:	it	eq
    14d0:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    14d2:	mov	r2, r4
    14d4:	mov	r1, r5
    14d6:	add	r0, sp, #136	; 0x88
    14d8:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    14dc:	ldr	r3, [sp, #140]	; 0x8c
    14de:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    14e0:	add	r2, sp, #56	; 0x38
    14e2:	mov	r1, r6
    14e4:	mov	r0, r5

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    p1.parent = newParent;
    14e6:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    14e8:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    14ea:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    14ee:	mov	r1, r4
    14f0:	add	r2, sp, #136	; 0x88
    14f2:	mov	r0, r5
    14f4:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    14f8:	mov.w	r3, #256	; 0x100
    14fc:	mov	r1, r6
    14fe:	mov	r0, r5
    1500:	add	r2, sp, #472	; 0x1d8
    1502:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1506:	ldr	r3, [pc, #116]	; (157c <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    1508:	ldr.w	r4, [r3, #1148]	; 0x47c
    150c:	cbz	r4, 1544 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    150e:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    1510:	add.w	r4, r4, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1514:	add	r2, sp, #216	; 0xd8
    1516:	mov	r1, r4
    1518:	mov	r0, sp
    151a:	mov	r3, r5
    151c:	strb.w	r5, [sp]
    1520:	strb.w	r5, [sp, #1]
    1524:	strb.w	r5, [sp, #2]
    1528:	bl	5bf4 <FatFile::open(FatFile*, char const*, int)>
    152c:	cbnz	r0, 1534 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd_rename(oldName,newName);
  }
    152e:	add.w	sp, sp, #728	; 0x2d8
    1532:	pop	{r4, r5, r6, pc}
    1534:	add	r2, sp, #472	; 0x1d8
    1536:	mov	r1, r4
    1538:	mov	r0, sp
    153a:	bl	64f4 <FatFile::rename(FatFile*, char const*)>
    153e:	add.w	sp, sp, #728	; 0x2d8
    1542:	pop	{r4, r5, r6, pc}
    1544:	ldr.w	r1, [r3, #1152]	; 0x480
    1548:	cmp	r1, #0
    154a:	beq.n	152e <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    154c:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    1550:	add	r2, sp, #216	; 0xd8
    1552:	mov	r1, r5
    1554:	mov	r3, r4
    1556:	mov	r0, sp
    1558:	strb.w	r4, [sp, #49]	; 0x31
    155c:	strb.w	r4, [sp, #50]	; 0x32
    1560:	strb.w	r4, [sp, #51]	; 0x33
    1564:	bl	457c <ExFatFile::open(ExFatFile*, char const*, int)>
    1568:	cmp	r0, #0
    156a:	beq.n	152e <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    156c:	add	r2, sp, #472	; 0x1d8
    156e:	mov	r1, r5
    1570:	mov	r0, sp
    1572:	bl	548c <ExFatFile::rename(ExFatFile*, char const*)>
    1576:	add.w	sp, sp, #728	; 0x2d8
    157a:	pop	{r4, r5, r6, pc}
    157c:	.word	0x1fff16f4

00001580 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1580:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (open_file_ == i && mode_ == mode) return;
    1584:	ldr	r3, [r0, #68]	; 0x44
    1586:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    1588:	sub	sp, #340	; 0x154
    if (open_file_ == i && mode_ == mode) return;
    158a:	beq.n	1662 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xe2>
    158c:	mov	r5, r0
    158e:	mov	r7, r2
    char filename[256];
    ConstructFilename(i, filename, 256);
    1590:	mov.w	r3, #256	; 0x100
    1594:	add	r2, sp, #80	; 0x50
    1596:	mov	r6, r1
    1598:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    159c:	ldr	r0, [r5, #40]	; 0x28
    159e:	cbz	r0, 15b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    15a0:	ldr	r3, [r0, #0]
    15a2:	ldr	r3, [r3, #64]	; 0x40
    15a4:	blx	r3
    mtp_lock_storage(true);
    if(sd_isOpen(file_)) file_.close();
    15a6:	cbz	r0, 15b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    15a8:	ldr	r0, [r5, #40]	; 0x28
    15aa:	cbz	r0, 15b2 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x32>
    15ac:	ldr	r3, [r0, #0]
    15ae:	ldr	r3, [r3, #60]	; 0x3c
    15b0:	blx	r3
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    15b2:	uxtb	r3, r7
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    15b4:	cmp	r3, #1
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    15b6:	add	r2, sp, #80	; 0x50
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
    15b8:	movw	r3, #16898	; 0x4202
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    15bc:	mov	r0, sp
    15be:	it	ne
    15c0:	movne	r3, #0
    15c2:	ldr	r1, [pc, #184]	; (167c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xfc>)
    15c4:	bl	7d68 <FsVolume::open(char const*, int)>
    15c8:	ldr	r3, [sp, #72]	; 0x48
    15ca:	cmp	r3, #0
    15cc:	beq.n	166e <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xee>
		if (file) return File(new SDFile(file));
    15ce:	movs	r0, #104	; 0x68
    15d0:	bl	ad90 <operator new(unsigned int)>
    15d4:	mov	r4, r0
    15d6:	mov.w	r3, #1000	; 0x3e8
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    15da:	ldr	r2, [pc, #164]	; (1680 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x100>)
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15dc:	ldrb.w	r0, [sp, #4]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15e0:	ldr	r1, [pc, #160]	; (1684 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x104>)
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    15e2:	str	r3, [r4, #8]
{
  public:
	constexpr Print() : write_error(0) {}
    15e4:	mov.w	r8, #0
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    15e8:	ldr	r3, [sp, #8]
    15ea:	str	r2, [r4, #0]
    15ec:	add.w	r9, sp, #16
    15f0:	ldrb.w	r2, [sp, #12]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    15f4:	strb	r0, [r4, #24]
    15f6:	str	r1, [r4, #20]
    15f8:	str	r3, [r4, #28]
    15fa:	strb.w	r2, [r4, #32]
    15fe:	add.w	r0, r4, #36	; 0x24
    1602:	mov	r1, r9
{
  public:
	constexpr Print() : write_error(0) {}
    1604:	strb.w	r8, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1608:	strb.w	r8, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    160c:	str.w	r8, [r4, #16]
    1610:	bl	7b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    1614:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1616:	ldr	r2, [pc, #112]	; (1688 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x108>)
    1618:	str.w	r8, [r4, #100]	; 0x64
    161c:	adds	r3, #1
    161e:	str	r2, [r4, #20]
    1620:	str	r3, [r4, #16]
    1622:	ldr	r3, [pc, #104]	; (168c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x10c>)
    1624:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    1626:	mov	r0, r9
    1628:	bl	7b9c <FsBaseFile::close()>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    162c:	ldr	r2, [r5, #40]	; 0x28
    162e:	cbz	r2, 1638 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1630:	ldr	r3, [r2, #16]
    1632:	subs	r3, #1
    1634:	str	r3, [r2, #16]
    1636:	cbz	r3, 164a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xca>
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1638:	str	r4, [r5, #40]	; 0x28
		if (f) f->refcount++;
    163a:	cbz	r4, 1640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    163c:	ldr	r3, [r4, #16]
    163e:	cbz	r3, 1658 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xd8>
    file_=sd_open(filename,mode);
    open_file_ = i;
    1640:	str	r6, [r5, #68]	; 0x44
    mode_ = mode;
    1642:	str	r7, [r5, #64]	; 0x40
    mtp_lock_storage(false);
  }
    1644:	add	sp, #340	; 0x154
    1646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    164a:	ldr	r0, [r5, #40]	; 0x28
    164c:	cmp	r0, #0
    164e:	beq.n	1638 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1650:	ldr	r3, [r0, #0]
    1652:	ldr	r3, [r3, #32]
    1654:	blx	r3
    1656:	b.n	1638 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xb8>
    1658:	ldr	r3, [r4, #0]
    165a:	mov	r0, r4
    165c:	ldr	r3, [r3, #32]
    165e:	blx	r3
    1660:	b.n	1640 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc0>
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    1662:	ldr	r3, [r0, #64]	; 0x40
    1664:	cmp	r3, r2
    1666:	bne.n	158c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    if(sd_isOpen(file_)) file_.close();
    file_=sd_open(filename,mode);
    open_file_ = i;
    mode_ = mode;
    mtp_lock_storage(false);
  }
    1668:	add	sp, #340	; 0x154
    166a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    166e:	ldr	r4, [sp, #76]	; 0x4c
    1670:	cmp	r4, #0
    1672:	bne.n	15ce <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x4e>
    1674:	add.w	r9, sp, #16
    1678:	b.n	1622 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xa2>
    167a:	nop
    167c:	.word	0x1fff16f8
    1680:	.word	0x0000fe08
    1684:	.word	0x0000fd9c
    1688:	.word	0x0000fde4
    168c:	.word	0x0000fdc0

00001690 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    1690:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1694:	mov	r4, r0
    1696:	mov	r7, r2
    OpenFileByIndex(handle);
    1698:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    169a:	mov	r5, r3
    169c:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    169e:	bl	1580 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void flush() {
		if (f) f->flush();
	}
	virtual bool seek(uint32_t pos, int mode) {
		return (f) ? f->seek(pos, mode) : false;
    16a2:	ldr	r0, [r4, #40]	; 0x28
    16a4:	cbz	r0, 16c2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    16a6:	ldr	r3, [r0, #0]
    16a8:	mov	r1, r7
    16aa:	ldr	r3, [r3, #48]	; 0x30
    16ac:	movs	r2, #0
    16ae:	blx	r3
	unsigned int getRefcount() { // testing only
		return refcount;
	}
#endif
	virtual size_t read(void *buf, size_t nbyte) {
		return (f) ? f->read(buf, nbyte) : 0;
    16b0:	ldr	r0, [r4, #40]	; 0x28
    16b2:	cbz	r0, 16c2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x32>
    16b4:	ldr	r3, [r0, #0]
    16b6:	mov	r2, r6
    16b8:	mov	r1, r5
    16ba:	ldr	r3, [r3, #40]	; 0x28
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    16bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    16c0:	bx	r3
    16c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16c6:	nop

000016c8 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    16c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    16cc:	cmp.w	r1, #4294967295
    16d0:	ite	ne
    16d2:	movne	r6, r1
    16d4:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    16d6:	sub	sp, #476	; 0x1dc
    16d8:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    16da:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    16dc:	mov	r4, r0
    16de:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    16e0:	add	r0, sp, #56	; 0x38
    16e2:	mov	r2, r6
    16e4:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    16e8:	mov	r0, r5
    16ea:	bl	c940 <strlen>
    16ee:	cmp	r0, #62	; 0x3e
    16f0:	bls.n	16fc <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    16f2:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    16f4:	mov	r0, r5
    16f6:	add	sp, #476	; 0x1dc
    16f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    16fc:	adds	r2, r0, #1
    16fe:	mov	r1, r5
    1700:	add.w	r0, sp, #150	; 0x96
    1704:	bl	9584 <memcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1708:	ldr	r5, [r4, #72]	; 0x48
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    170a:	ldr	r3, [sp, #60]	; 0x3c
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    170c:	str	r6, [sp, #136]	; 0x88
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    170e:	adds	r2, r5, #1
    1710:	str	r2, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    1712:	mov	r1, r5
    1714:	add	r2, sp, #136	; 0x88
    1716:	mov	r0, r4
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    1718:	mov.w	r9, #0
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    171c:	mov.w	r8, #1
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    1720:	strb.w	r7, [sp, #148]	; 0x94
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    1724:	str	r3, [sp, #144]	; 0x90
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    1726:	str.w	r9, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    172a:	strb.w	r8, [sp, #149]	; 0x95
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    172e:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    1732:	add	r2, sp, #56	; 0x38
    1734:	mov	r1, r6
    1736:	mov	r0, r4
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    1738:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    173a:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    173e:	cbnz	r7, 1752 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x8a>
      sd_mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    1740:	mov	r0, r4
    1742:	mov	r2, r8
    1744:	mov	r1, r5
    1746:	bl	1580 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    174a:	mov	r0, r5
    174c:	add	sp, #476	; 0x1dc
    174e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    1752:	mov	r0, r4
    1754:	mov.w	r3, #256	; 0x100
    1758:	add	r2, sp, #216	; 0xd8
    175a:	mov	r1, r5
    175c:	bl	11fc <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1760:	ldr	r3, [pc, #68]	; (17a8 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe0>)
    1762:	ldr.w	r4, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1766:	cbz	r4, 1784 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xbc>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1768:	mov	r3, r8
    176a:	add	r2, sp, #216	; 0xd8
    176c:	add.w	r1, r4, #1088	; 0x440
    1770:	mov	r0, sp
    1772:	strb.w	r9, [sp]
    1776:	strb.w	r9, [sp, #1]
    177a:	strb.w	r9, [sp, #2]
    177e:	bl	63f8 <FatFile::mkdir(FatFile*, char const*, bool)>
    1782:	b.n	16f4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    1784:	ldr.w	r1, [r3, #1152]	; 0x480
    1788:	cmp	r1, #0
    178a:	beq.n	16f4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    178c:	mov	r3, r8
    178e:	add	r2, sp, #216	; 0xd8
    1790:	add.w	r1, r1, #1088	; 0x440
    1794:	mov	r0, sp
    1796:	strb.w	r4, [sp, #49]	; 0x31
    179a:	strb.w	r4, [sp, #50]	; 0x32
    179e:	strb.w	r4, [sp, #51]	; 0x33
    17a2:	bl	5384 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    17a6:	b.n	16f4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    17a8:	.word	0x1fff16f4

000017ac <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    17ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17b0:	sub	sp, #160	; 0xa0
    17b2:	mov	r2, r1
    17b4:	mov	r4, r0
    17b6:	mov	r6, r1
    17b8:	mov	r1, r0
    17ba:	mov	r0, sp
    17bc:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    17c0:	ldrb.w	r3, [sp, #12]
    17c4:	cbz	r3, 17cc <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    17c6:	ldrb.w	r5, [sp, #13]
    17ca:	cbz	r5, 17d2 <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    17cc:	add	sp, #160	; 0xa0
    17ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  { Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    17d2:	mov	r0, r4
    17d4:	mov	r2, r5
    17d6:	mov	r1, r6
    17d8:	bl	1580 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    17dc:	ldr	r0, [r4, #40]	; 0x28
    17de:	cmp	r0, #0
    17e0:	beq.n	17cc <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    17e2:	ldr	r3, [r0, #0]
    17e4:	ldr	r3, [r3, #64]	; 0x40
    17e6:	blx	r3
      if (!sd_isOpen(file_)) return;
    17e8:	cmp	r0, #0
    17ea:	beq.n	17cc <MTPStorage_SD::ScanDir(unsigned long)+0x20>
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    17ec:	ldr	r7, [pc, #264]	; (18f8 <MTPStorage_SD::ScanDir(unsigned long)+0x14c>)
    17ee:	mov.w	r8, #1000	; 0x3e8
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    17f2:	ldr	r1, [r4, #40]	; 0x28
    17f4:	cmp	r1, #0
    17f6:	beq.n	18a6 <MTPStorage_SD::ScanDir(unsigned long)+0xfa>
    17f8:	ldr	r3, [r1, #0]
    17fa:	movs	r2, #0
    17fc:	ldr	r3, [r3, #76]	; 0x4c
    17fe:	add	r0, sp, #80	; 0x50
    1800:	blx	r3
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1802:	ldr	r2, [r4, #60]	; 0x3c
    1804:	cbz	r2, 1818 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    1806:	ldr	r3, [r2, #16]
    1808:	subs	r3, #1
    180a:	str	r3, [r2, #16]
    180c:	cbnz	r3, 1818 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    180e:	ldr	r0, [r4, #60]	; 0x3c
    1810:	cbz	r0, 1818 <MTPStorage_SD::ScanDir(unsigned long)+0x6c>
    1812:	ldr	r3, [r0, #0]
    1814:	ldr	r3, [r3, #32]
    1816:	blx	r3
	File& operator = (const File &file) {
		//Serial.println("File assignment");
		//static int assigncount=0;
		//if (++assigncount > 20) while (1) ;
		invalidate();
		f = file.f;
    1818:	ldr	r3, [sp, #96]	; 0x60
    181a:	str	r3, [r4, #60]	; 0x3c
		if (f) f->refcount++;
    181c:	cbz	r3, 183c <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    181e:	ldr	r2, [r3, #16]
    1820:	adds	r2, #1
    1822:	str	r2, [r3, #16]
    1824:	ldr	r2, [sp, #96]	; 0x60
		return *this;
	}
	virtual ~File() {
    1826:	str	r7, [sp, #80]	; 0x50
	size_t readBytes(char *buffer, size_t length) {
		return read(buffer, length);
	}
private:
	void invalidate() {
		if (f && --(f->refcount) == 0) delete f;
    1828:	cbz	r2, 183c <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    182a:	ldr	r3, [r2, #16]
    182c:	subs	r3, #1
    182e:	str	r3, [r2, #16]
    1830:	cbnz	r3, 183c <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    1832:	ldr	r0, [sp, #96]	; 0x60
    1834:	cbz	r0, 183c <MTPStorage_SD::ScanDir(unsigned long)+0x90>
    1836:	ldr	r3, [r0, #0]
    1838:	ldr	r3, [r3, #32]
    183a:	blx	r3
	}
	virtual void close() {
		if (f) f->close();
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
    183c:	ldr	r0, [r4, #60]	; 0x3c
    183e:	cmp	r0, #0
    1840:	beq.n	18c8 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
    1842:	ldr	r3, [r0, #0]
    1844:	ldr	r3, [r3, #64]	; 0x40
    1846:	blx	r3
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
        mtp_lock_storage(false);
        if(!sd_isOpen(child_)) break;
    1848:	cmp	r0, #0
    184a:	beq.n	18c8 <MTPStorage_SD::ScanDir(unsigned long)+0x11c>
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
    184c:	ldr	r0, [r4, #60]	; 0x3c

        Record r;
        r.parent = i;
    184e:	str	r6, [sp, #80]	; 0x50
        r.sibling = sibling;
    1850:	str	r5, [sp, #88]	; 0x58
    1852:	cmp	r0, #0
    1854:	beq.n	18b8 <MTPStorage_SD::ScanDir(unsigned long)+0x10c>
    1856:	ldr	r3, [r0, #0]
    1858:	ldr	r3, [r3, #72]	; 0x48
    185a:	blx	r3
        r.isdir = child_.isDirectory();
    185c:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    1860:	cmp	r0, #0
    1862:	beq.n	18e0 <MTPStorage_SD::ScanDir(unsigned long)+0x134>
    1864:	ldr	r0, [r4, #60]	; 0x3c
    1866:	movs	r3, #0
    1868:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    186a:	movs	r3, #0
    186c:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    1870:	cmp	r0, #0
    1872:	beq.n	18f2 <MTPStorage_SD::ScanDir(unsigned long)+0x146>
    1874:	ldr	r3, [r0, #0]
    1876:	ldr	r3, [r3, #68]	; 0x44
    1878:	blx	r3
    187a:	mov	r1, r0
        sd_getName(child_,r.name,64);
    187c:	add.w	r0, sp, #94	; 0x5e
    1880:	bl	c864 <strcpy>
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    1884:	ldr	r5, [r4, #72]	; 0x48
    1886:	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    1888:	mov	r0, r4
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    188a:	str	r3, [r4, #72]	; 0x48
    WriteIndexRecord(new_record, r);
    188c:	mov	r1, r5
    188e:	add	r2, sp, #80	; 0x50
    1890:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
	}
	virtual void close() {
		if (f) f->close();
    1894:	ldr	r0, [r4, #60]	; 0x3c
    1896:	cmp	r0, #0
    1898:	beq.n	17f2 <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    189a:	ldr	r3, [r0, #0]
    189c:	ldr	r3, [r3, #60]	; 0x3c
    189e:	blx	r3
	}
	virtual bool isDirectory() {
		return (f) ? f->isDirectory() : false;
	}
	virtual File openNextFile(uint8_t mode=0) {
		return (f) ? f->openNextFile(mode) : *this;
    18a0:	ldr	r1, [r4, #40]	; 0x28
    18a2:	cmp	r1, #0
    18a4:	bne.n	17f8 <MTPStorage_SD::ScanDir(unsigned long)+0x4c>
    18a6:	strb.w	r1, [sp, #84]	; 0x54
    18aa:	str.w	r8, [sp, #88]	; 0x58
    18ae:	strb.w	r1, [sp, #92]	; 0x5c
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
	}
	File(const File &file) {
    18b2:	str	r7, [sp, #80]	; 0x50
		//Serial.println("File copy constructor");
		//static int copycount=0;
		//if (++copycount > 20) while (1) ;
		f = file.f;
    18b4:	str	r1, [sp, #96]	; 0x60
    18b6:	b.n	1802 <MTPStorage_SD::ScanDir(unsigned long)+0x56>
        if(!sd_isOpen(child_)) break;

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
    18b8:	strb.w	r0, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    18bc:	movs	r3, #0
    18be:	str	r3, [sp, #84]	; 0x54
        r.scanned = false;
    18c0:	strb.w	r3, [sp, #93]	; 0x5d
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    18c4:	ldr	r1, [pc, #52]	; (18fc <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    18c6:	b.n	187c <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    18c8:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    18ca:	mov	r2, sp
    18cc:	mov	r1, r6
    18ce:	mov	r0, r4
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    18d0:	str	r5, [sp, #4]
        r.scanned = false;
        sd_getName(child_,r.name,64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    18d2:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    18d6:	bl	1000 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    18da:	add	sp, #160	; 0xa0
    18dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	virtual uint32_t position() {
		return (f) ? f->position() : 0;
	}
	virtual uint32_t size() {
		return (f) ? f->size() : 0;
    18e0:	ldr	r0, [r4, #60]	; 0x3c
    18e2:	cmp	r0, #0
    18e4:	beq.n	18bc <MTPStorage_SD::ScanDir(unsigned long)+0x110>
    18e6:	ldr	r3, [r0, #0]
    18e8:	ldr	r3, [r3, #56]	; 0x38
    18ea:	blx	r3
    18ec:	mov	r3, r0
    18ee:	ldr	r0, [r4, #60]	; 0x3c
    18f0:	b.n	1868 <MTPStorage_SD::ScanDir(unsigned long)+0xbc>
	}
	virtual operator bool() {
		return (f) ? (bool)*f : false;
	}
	virtual const char* name() {
		return (f) ? f->name() : "";
    18f2:	ldr	r1, [pc, #8]	; (18fc <MTPStorage_SD::ScanDir(unsigned long)+0x150>)
    18f4:	b.n	187c <MTPStorage_SD::ScanDir(unsigned long)+0xd0>
    18f6:	nop
    18f8:	.word	0x0000fd0c
    18fc:	.word	0x0000fd78

00001900 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]>:

  void MTPStorage_SD::ScanAll() 
    1900:	push	{r3, r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    1902:	ldrb.w	r3, [r0, #76]	; 0x4c
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;
    1906:	movs	r2, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    1908:	mov	r5, r0
  { if (all_scanned_) return;
    all_scanned_ = true;
    190a:	strb.w	r2, [r0, #77]	; 0x4d

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    190e:	cbz	r3, 1928 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x28>
  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    1910:	ldr	r3, [r5, #72]	; 0x48
    1912:	cbz	r3, 1926 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x26>
    1914:	movs	r4, #0
    1916:	mov	r1, r4
    1918:	mov	r0, r5
    191a:	bl	17ac <MTPStorage_SD::ScanDir(unsigned long)>
    191e:	ldr	r3, [r5, #72]	; 0x48
    1920:	adds	r4, #1
    1922:	cmp	r3, r4
    1924:	bhi.n	1916 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x16>
    1926:	pop	{r3, r4, r5, pc}
    1928:	bl	1034 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>
    192c:	b.n	1910 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]+0x10>
    192e:	nop

00001930 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    1930:	push	{r4, r5, lr}

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    1932:	ldrb.w	r3, [r0, #76]	; 0x4c
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    1936:	sub	sp, #84	; 0x54
    1938:	mov	r4, r0
    193a:	mov	r5, r1

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  { if (index_generated) return; 
    193c:	cbz	r3, 197a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    193e:	cbz	r5, 1966 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x36>
    { if (parent == 0xFFFFFFFF) parent = 0;
    1940:	adds	r3, r5, #1
    1942:	it	eq
    1944:	moveq	r5, #0

      ScanDir(parent);
    1946:	mov	r1, r5
    1948:	mov	r0, r4
    194a:	bl	17ac <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    194e:	movs	r3, #1
    1950:	strb.w	r3, [r4, #84]	; 0x54
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    1954:	mov	r2, r5
    1956:	mov	r1, r4
    1958:	mov	r0, sp
    195a:	bl	10c8 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    195e:	ldr	r3, [sp, #4]
    1960:	str	r3, [r4, #80]	; 0x50
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    1962:	add	sp, #84	; 0x54
    1964:	pop	{r4, r5, pc}
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
  { if (all_scanned_) return;
    1966:	ldrb.w	r3, [r4, #77]	; 0x4d
    196a:	cbz	r3, 1980 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x50>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    196c:	movs	r2, #0
      next_ = 1;
    196e:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1970:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    1974:	str	r3, [r4, #80]	; 0x50
    }
  }
    1976:	add	sp, #84	; 0x54
    1978:	pop	{r4, r5, pc}
    197a:	bl	1034 <MTPStorage_SD::GenerateIndex() [clone .part.47] [clone .constprop.51]>
    197e:	b.n	193e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    1980:	mov	r0, r4
    1982:	bl	1900 <MTPStorage_SD::ScanAll() [clone .part.48] [clone .constprop.50]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    1986:	movs	r2, #0
      next_ = 1;
    1988:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    198a:	strb.w	r2, [r4, #84]	; 0x54
      next_ = 1;
    198e:	str	r3, [r4, #80]	; 0x50
    1990:	b.n	1976 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x46>
    1992:	nop

00001994 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }


 bool Storage_init()
  { 
    1994:	push	{r3, r4, r5, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1996:	ldr	r4, [pc, #52]	; (19cc <Storage_init()+0x38>)
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1998:	subw	r5, r4, #1164	; 0x48c
    199c:	mov.w	r1, #0
    19a0:	mov	r0, r4
    19a2:	bl	8e58 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    19a6:	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    19a8:	str.w	r4, [r5, #1160]	; 0x488
    return m_card && !m_card->errorCode();
    19ac:	bl	85b8 <SdioCard::errorCode() const>
    19b0:	cbz	r0, 19b6 <Storage_init()+0x22>
      SPI.setMOSI(SD_MOSI);
      SPI.setMISO(SD_MISO);
      SPI.setSCK(SD_SCK);
    #endif

    if (!sd_begin(SD_CONFIG)) return false;
    19b2:	movs	r0, #0
    19b4:	pop	{r3, r4, r5, pc}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    19b6:	ldr.w	r1, [r5, #1160]	; 0x488
    19ba:	adds	r0, r5, #4
    19bc:	bl	7ca4 <FsVolume::begin(BlockDeviceInterface*)>
    19c0:	cmp	r0, #0
    19c2:	beq.n	19b2 <Storage_init()+0x1e>

    // Set Time callback
    FsDateTime::callback = dateTime;
    19c4:	ldr	r3, [pc, #8]	; (19d0 <Storage_init()+0x3c>)
    19c6:	ldr	r2, [pc, #12]	; (19d4 <Storage_init()+0x40>)
    19c8:	str	r2, [r3, #0]

    return true;
	}
    19ca:	pop	{r3, r4, r5, pc}
    19cc:	.word	0x1fff1b80
    19d0:	.word	0x1fff1ba4
    19d4:	.word	0x00000809

000019d8 <MTPD::get_buffer()>:
    }

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

//  usb_packet_t *data_buffer_ = NULL;
  void MTPD::get_buffer() {
    19d8:	push	{r4, lr}
    19da:	mov	r4, r0
    19dc:	ldr	r0, [r4, #8]
    while (!data_buffer_) {
    19de:	cbnz	r0, 19e8 <MTPD::get_buffer()+0x10>
      data_buffer_ = usb_malloc();
    19e0:	bl	9d78 <usb_malloc>
    19e4:	str	r0, [r4, #8]
      if (!data_buffer_) mtp_yield();
    19e6:	cbz	r0, 19ea <MTPD::get_buffer()+0x12>
    19e8:	pop	{r4, pc}
    19ea:	bl	f2c <mtp_yield()>
    19ee:	b.n	19dc <MTPD::get_buffer()+0x4>

000019f0 <MTPD::write(char const*, int) [clone .part.2]>:
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19f0:	cmp	r2, #0
    19f2:	ble.n	1a52 <MTPD::write(char const*, int) [clone .part.2]+0x62>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    19f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    19f8:	mov.w	r9, #0
    19fc:	mov	r6, r2
    19fe:	mov	r7, r1
    1a00:	mov	r5, r0
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1a02:	mov	r8, r9
    1a04:	b.n	1a0a <MTPD::write(char const*, int) [clone .part.2]+0x1a>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a06:	cmp	r6, r9
    1a08:	ble.n	1a4e <MTPD::write(char const*, int) [clone .part.2]+0x5e>
        get_buffer();
    1a0a:	mov	r0, r5
    1a0c:	bl	19d8 <MTPD::get_buffer()>
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    1a10:	ldr	r3, [r5, #8]
    1a12:	ldrh.w	r0, [r3], #8
    1a16:	rsb	r2, r9, r6
    1a1a:	rsb	r4, r0, #64	; 0x40
    1a1e:	cmp	r4, r2
    1a20:	it	ge
    1a22:	movge	r4, r2
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
    1a24:	add.w	r1, r7, r9
    1a28:	add	r0, r3
    1a2a:	mov	r2, r4
    1a2c:	bl	9584 <memcpy>
        data_buffer_->len += to_copy;
    1a30:	ldr	r1, [r5, #8]
    1a32:	ldrh	r3, [r1, #0]
    1a34:	add	r3, r4
    1a36:	uxth	r3, r3
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    1a38:	cmp	r3, #64	; 0x40
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
    1a3a:	add	r9, r4
        int avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        int to_copy = min(len - pos, avail);
        memcpy(data_buffer_->buf + data_buffer_->len,
               data + pos,
               to_copy);
        data_buffer_->len += to_copy;
    1a3c:	strh	r3, [r1, #0]
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    1a3e:	bne.n	1a06 <MTPD::write(char const*, int) [clone .part.2]+0x16>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    1a40:	movs	r0, #4
    1a42:	bl	9f74 <usb_tx>
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a46:	cmp	r6, r9
               to_copy);
        data_buffer_->len += to_copy;
        pos += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    1a48:	str.w	r8, [r5, #8]
  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    } else {
      int pos = 0;
      while (pos < len) {
    1a4c:	bgt.n	1a0a <MTPD::write(char const*, int) [clone .part.2]+0x1a>
    1a4e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a52:	bx	lr

00001a54 <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a54:	push	{r4, r5, lr}
    if (*str) 
    1a56:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    1a58:	sub	sp, #12
    1a5a:	mov	r4, r0
    if (*str) 
    1a5c:	cbz	r3, 1ab8 <MTPD::writestring(char const*)+0x64>
    { write8(strlen(str) + 1);
    1a5e:	mov	r0, r1
    1a60:	mov	r5, r1
    1a62:	bl	c940 <strlen>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a66:	ldrb	r1, [r4, #12]
    1a68:	adds	r0, #1
    1a6a:	strb.w	r0, [sp, #3]
    1a6e:	cbz	r1, 1aca <MTPD::writestring(char const*)+0x76>
      write_length_ += len;
    1a70:	ldr	r3, [r4, #16]
    1a72:	adds	r3, #1
    1a74:	str	r3, [r4, #16]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a76:	ldrb	r2, [r5, #0]
    1a78:	cbnz	r2, 1a88 <MTPD::writestring(char const*)+0x34>
    1a7a:	b.n	1ab0 <MTPD::writestring(char const*)+0x5c>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1a7c:	ldr	r3, [r4, #16]
    1a7e:	adds	r3, #2
    1a80:	str	r3, [r4, #16]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a82:	ldrb.w	r2, [r5, #1]!
    1a86:	cbz	r2, 1aa6 <MTPD::writestring(char const*)+0x52>
    1a88:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1a8c:	cmp	r1, #0
    1a8e:	bne.n	1a7c <MTPD::writestring(char const*)+0x28>
    1a90:	movs	r2, #2
    1a92:	add.w	r1, sp, #6
    1a96:	mov	r0, r4
    1a98:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1a9c:	ldrb.w	r2, [r5, #1]!
    1aa0:	ldrb	r1, [r4, #12]
    1aa2:	cmp	r2, #0
    1aa4:	bne.n	1a88 <MTPD::writestring(char const*)+0x34>
    1aa6:	movs	r3, #0
    1aa8:	strh.w	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1aac:	cbz	r1, 1aee <MTPD::writestring(char const*)+0x9a>
    1aae:	ldr	r3, [r4, #16]
      write_length_ += len;
    1ab0:	adds	r3, #2
    1ab2:	str	r3, [r4, #16]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1ab4:	add	sp, #12
    1ab6:	pop	{r4, r5, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1ab8:	ldrb	r2, [r0, #12]
    1aba:	strb.w	r3, [sp, #2]
    1abe:	cbz	r2, 1ae0 <MTPD::writestring(char const*)+0x8c>
      write_length_ += len;
    1ac0:	ldr	r3, [r0, #16]
    1ac2:	adds	r3, #1
    1ac4:	str	r3, [r0, #16]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    1ac6:	add	sp, #12
    1ac8:	pop	{r4, r5, pc}
    1aca:	movs	r2, #1
    1acc:	add.w	r1, sp, #3
    1ad0:	mov	r0, r4
    1ad2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1ad6:	ldrb	r2, [r5, #0]
    1ad8:	ldrb	r1, [r4, #12]
    1ada:	cmp	r2, #0
    1adc:	bne.n	1a88 <MTPD::writestring(char const*)+0x34>
    1ade:	b.n	1aa6 <MTPD::writestring(char const*)+0x52>
    1ae0:	movs	r2, #1
    1ae2:	add.w	r1, sp, #2
    1ae6:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    } else 
    { write8(0);
    }
  }
    1aea:	add	sp, #12
    1aec:	pop	{r4, r5, pc}
    1aee:	mov	r0, r4
    1af0:	movs	r2, #2
    1af2:	add	r1, sp, #4
    1af4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1af8:	add	sp, #12
    1afa:	pop	{r4, r5, pc}

00001afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>:
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1afc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1afe:	ldrb	r3, [r0, #12]
        writestring(MTP_NAME);
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1b00:	sub	sp, #8
    1b02:	mov	r4, r0
    1b04:	mov	r5, r1
    1b06:	strh.w	r1, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b0a:	cbz	r3, 1b44 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x48>
      write_length_ += len;
    1b0c:	ldr	r3, [r0, #16]
    1b0e:	movw	r2, #65535	; 0xffff
    1b12:	adds	r3, #2
    1b14:	str	r3, [r0, #16]
    1b16:	strh.w	r2, [sp, #6]
    1b1a:	adds	r3, #2
    1b1c:	movs	r2, #0
    1b1e:	str	r3, [r4, #16]
    1b20:	strb.w	r2, [sp, #2]
    1b24:	adds	r3, #1
    1b26:	str	r3, [r4, #16]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1b28:	movw	r3, #54274	; 0xd402
    1b2c:	cmp	r5, r3
    1b2e:	beq.n	1b80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x84>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b30:	ldrb	r3, [r4, #12]
    1b32:	movs	r2, #0
    1b34:	strb.w	r2, [sp, #3]
    1b38:	cbz	r3, 1b9c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xa0>
      write_length_ += len;
    1b3a:	ldr	r3, [r4, #16]
    1b3c:	adds	r3, #1
    1b3e:	str	r3, [r4, #16]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1b40:	add	sp, #8
    1b42:	pop	{r4, r5, r6, pc}
    1b44:	movs	r2, #2
    1b46:	add	r1, sp, #4
    1b48:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1b4c:	ldrb	r6, [r4, #12]
    1b4e:	movw	r3, #65535	; 0xffff
    1b52:	strh.w	r3, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b56:	cbnz	r6, 1bac <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb0>
    1b58:	movs	r2, #2
    1b5a:	add.w	r1, sp, #6
    1b5e:	mov	r0, r4
    1b60:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1b64:	ldrb	r3, [r4, #12]
    1b66:	strb.w	r6, [sp, #2]
    1b6a:	cbnz	r3, 1bb0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb4>
    1b6c:	movs	r2, #1
    1b6e:	add.w	r1, sp, #2
    1b72:	mov	r0, r4
    1b74:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    1b78:	movw	r3, #54274	; 0xd402
    1b7c:	cmp	r5, r3
    1b7e:	bne.n	1b30 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x34>
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    1b80:	ldr	r1, [pc, #48]	; (1bb4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b82:	mov	r0, r4
    1b84:	bl	1a54 <MTPD::writestring(char const*)>
    1b88:	ldr	r1, [pc, #40]	; (1bb4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0xb8>)
    1b8a:	mov	r0, r4
    1b8c:	bl	1a54 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1b90:	ldrb	r3, [r4, #12]
    1b92:	movs	r2, #0
    1b94:	strb.w	r2, [sp, #3]
    1b98:	cmp	r3, #0
    1b9a:	bne.n	1b3a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x3e>
    1b9c:	mov	r0, r4
    1b9e:	movs	r2, #1
    1ba0:	add.w	r1, sp, #3
    1ba4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    1ba8:	add	sp, #8
    1baa:	pop	{r4, r5, r6, pc}
    1bac:	ldr	r3, [r4, #16]
    1bae:	b.n	1b1a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x1e>
    1bb0:	ldr	r3, [r4, #16]
    1bb2:	b.n	1b24 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]+0x28>
    1bb4:	.word	0x0000ff18

00001bb8 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1bb8:	push	{r4, r5, r6, r7, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1bba:	ldrb	r3, [r0, #12]
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    1bbc:	sub	sp, #44	; 0x2c
    1bbe:	movs	r5, #100	; 0x64
    1bc0:	mov	r4, r0
    1bc2:	strh.w	r5, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1bc6:	cmp	r3, #0
    1bc8:	beq.n	1caa <MTPD::WriteDescriptor()+0xf2>
      write_length_ += len;
    1bca:	ldr	r3, [r0, #16]
    1bcc:	movs	r2, #6
    1bce:	adds	r3, #2
    1bd0:	str	r3, [r0, #16]
    1bd2:	str	r2, [sp, #20]
    1bd4:	adds	r3, #4
    1bd6:	movs	r2, #100	; 0x64
    1bd8:	str	r3, [r4, #16]
    1bda:	strh.w	r2, [sp, #4]
    1bde:	adds	r3, #2
    1be0:	str	r3, [r4, #16]
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    1be2:	ldr	r1, [pc, #464]	; (1db4 <MTPD::WriteDescriptor()+0x1fc>)
    1be4:	mov	r0, r4
    1be6:	bl	1a54 <MTPD::writestring(char const*)>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1bea:	ldrb	r3, [r4, #12]
    1bec:	movs	r2, #0
    1bee:	strh.w	r2, [sp, #2]
    1bf2:	cmp	r3, #0
    1bf4:	beq.w	1d6c <MTPD::WriteDescriptor()+0x1b4>
      write_length_ += len;
    1bf8:	ldr	r3, [r4, #16]
    1bfa:	movs	r2, #18
    1bfc:	adds	r3, #2
    1bfe:	str	r3, [r4, #16]
    1c00:	str	r2, [sp, #16]
    1c02:	adds	r3, #4
    1c04:	str	r3, [r4, #16]
    1c06:	movs	r6, #1
    1c08:	ldr	r5, [pc, #428]	; (1db8 <MTPD::WriteDescriptor()+0x200>)
    1c0a:	movw	r3, #4097	; 0x1001
    1c0e:	add.w	r7, r5, #34	; 0x22
    1c12:	b.n	1c24 <MTPD::WriteDescriptor()+0x6c>
    1c14:	ldr	r3, [r4, #16]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1c16:	cmp	r7, r5
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1c18:	add.w	r3, r3, #2
    1c1c:	str	r3, [r4, #16]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1c1e:	beq.n	1c3c <MTPD::WriteDescriptor()+0x84>
    1c20:	ldrh.w	r3, [r5, #2]!
    1c24:	strh.w	r3, [sp, #8]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c28:	cmp	r6, #0
    1c2a:	bne.n	1c14 <MTPD::WriteDescriptor()+0x5c>
    1c2c:	movs	r2, #2
    1c2e:	add	r1, sp, #8
    1c30:	mov	r0, r4
    1c32:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1c36:	cmp	r7, r5
    1c38:	ldrb	r6, [r4, #12]
    1c3a:	bne.n	1c20 <MTPD::WriteDescriptor()+0x68>
    1c3c:	movs	r3, #0
    1c3e:	str	r3, [sp, #36]	; 0x24
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1c40:	cmp	r6, #0
    1c42:	beq.n	1cde <MTPD::WriteDescriptor()+0x126>
      write_length_ += len;
    1c44:	ldr	r3, [r4, #16]
    1c46:	movs	r2, #1
    1c48:	adds	r3, #4
    1c4a:	str	r3, [r4, #16]
    1c4c:	str	r2, [sp, #32]
    1c4e:	adds	r3, #4
    1c50:	movw	r2, #54274	; 0xd402
    1c54:	str	r3, [r4, #16]
    1c56:	strh.w	r2, [sp, #14]
    1c5a:	adds	r3, #2
    1c5c:	movs	r2, #0
    1c5e:	str	r3, [r4, #16]
    1c60:	str	r2, [sp, #28]
    1c62:	adds	r3, #4
    1c64:	movs	r2, #2
    1c66:	str	r3, [r4, #16]
    1c68:	str	r2, [sp, #24]
    1c6a:	adds	r3, #4
    1c6c:	mov.w	r2, #12288	; 0x3000
    1c70:	str	r3, [r4, #16]
    1c72:	strh.w	r2, [sp, #12]
    1c76:	adds	r3, #2
    1c78:	movw	r2, #12289	; 0x3001
    1c7c:	str	r3, [r4, #16]
    1c7e:	strh.w	r2, [sp, #10]
    1c82:	adds	r3, #2
    1c84:	str	r3, [r4, #16]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring(MTP_MANUF);     // Manufacturer
    1c86:	mov	r0, r4
    1c88:	ldr	r1, [pc, #304]	; (1dbc <MTPD::WriteDescriptor()+0x204>)
    1c8a:	bl	1a54 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    1c8e:	mov	r0, r4
    1c90:	ldr	r1, [pc, #300]	; (1dc0 <MTPD::WriteDescriptor()+0x208>)
    1c92:	bl	1a54 <MTPD::writestring(char const*)>
    writestring(MTP_VERS);      // version
    1c96:	mov	r0, r4
    1c98:	ldr	r1, [pc, #296]	; (1dc4 <MTPD::WriteDescriptor()+0x20c>)
    1c9a:	bl	1a54 <MTPD::writestring(char const*)>
    writestring(MTP_SERNR);     // serial
    1c9e:	mov	r0, r4
    1ca0:	ldr	r1, [pc, #292]	; (1dc8 <MTPD::WriteDescriptor()+0x210>)
    1ca2:	bl	1a54 <MTPD::writestring(char const*)>
  }
    1ca6:	add	sp, #44	; 0x2c
    1ca8:	pop	{r4, r5, r6, r7, pc}
    1caa:	movs	r2, #2
    1cac:	add.w	r1, sp, #6
    1cb0:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1cb4:	ldrb	r3, [r4, #12]
    1cb6:	movs	r2, #6
    1cb8:	str	r2, [sp, #20]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1cba:	cmp	r3, #0
    1cbc:	bne.n	1d9a <MTPD::WriteDescriptor()+0x1e2>
    1cbe:	movs	r2, #4
    1cc0:	add	r1, sp, #20
    1cc2:	mov	r0, r4
    1cc4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1cc8:	ldrb	r3, [r4, #12]
    1cca:	strh.w	r5, [sp, #4]
    1cce:	cmp	r3, #0
    1cd0:	bne.n	1d9e <MTPD::WriteDescriptor()+0x1e6>
    1cd2:	movs	r2, #2
    1cd4:	add	r1, sp, #4
    1cd6:	mov	r0, r4
    1cd8:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1cdc:	b.n	1be2 <MTPD::WriteDescriptor()+0x2a>
    1cde:	movs	r2, #4
    1ce0:	add	r1, sp, #36	; 0x24
    1ce2:	mov	r0, r4
    1ce4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1ce8:	ldrb	r3, [r4, #12]
    1cea:	movs	r2, #1
    1cec:	str	r2, [sp, #32]
    1cee:	cmp	r3, #0
    1cf0:	bne.n	1da2 <MTPD::WriteDescriptor()+0x1ea>
    1cf2:	movs	r2, #4
    1cf4:	add	r1, sp, #32
    1cf6:	mov	r0, r4
    1cf8:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1cfc:	ldrb	r3, [r4, #12]
    1cfe:	movw	r2, #54274	; 0xd402
    1d02:	strh.w	r2, [sp, #14]
    1d06:	cmp	r3, #0
    1d08:	bne.n	1da6 <MTPD::WriteDescriptor()+0x1ee>
    1d0a:	movs	r2, #2
    1d0c:	add.w	r1, sp, #14
    1d10:	mov	r0, r4
    1d12:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d16:	ldrb	r3, [r4, #12]
    1d18:	str	r6, [sp, #28]
    1d1a:	cmp	r3, #0
    1d1c:	bne.n	1daa <MTPD::WriteDescriptor()+0x1f2>
    1d1e:	movs	r2, #4
    1d20:	add	r1, sp, #28
    1d22:	mov	r0, r4
    1d24:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d28:	ldrb	r3, [r4, #12]
    1d2a:	movs	r5, #2
    1d2c:	str	r5, [sp, #24]
    1d2e:	cmp	r3, #0
    1d30:	bne.n	1dae <MTPD::WriteDescriptor()+0x1f6>
    1d32:	movs	r2, #4
    1d34:	add	r1, sp, #24
    1d36:	mov	r0, r4
    1d38:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d3c:	ldrb	r3, [r4, #12]
    1d3e:	mov.w	r2, #12288	; 0x3000
    1d42:	strh.w	r2, [sp, #12]
    1d46:	cbnz	r3, 1d92 <MTPD::WriteDescriptor()+0x1da>
    1d48:	mov	r2, r5
    1d4a:	add	r1, sp, #12
    1d4c:	mov	r0, r4
    1d4e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d52:	ldrb	r3, [r4, #12]
    1d54:	movw	r2, #12289	; 0x3001
    1d58:	strh.w	r2, [sp, #10]
    1d5c:	cbnz	r3, 1d8e <MTPD::WriteDescriptor()+0x1d6>
    1d5e:	mov	r2, r5
    1d60:	add.w	r1, sp, #10
    1d64:	mov	r0, r4
    1d66:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d6a:	b.n	1c86 <MTPD::WriteDescriptor()+0xce>
    1d6c:	movs	r2, #2
    1d6e:	add.w	r1, sp, r2
    1d72:	mov	r0, r4
    1d74:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d78:	ldrb	r3, [r4, #12]
    1d7a:	movs	r2, #18
    1d7c:	str	r2, [sp, #16]
    1d7e:	cbnz	r3, 1d96 <MTPD::WriteDescriptor()+0x1de>
    1d80:	movs	r2, #4
    1d82:	add	r1, sp, #16
    1d84:	mov	r0, r4
    1d86:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1d8a:	ldrb	r6, [r4, #12]
    1d8c:	b.n	1c08 <MTPD::WriteDescriptor()+0x50>
    1d8e:	ldr	r3, [r4, #16]
    1d90:	b.n	1c82 <MTPD::WriteDescriptor()+0xca>
    1d92:	ldr	r3, [r4, #16]
    1d94:	b.n	1c76 <MTPD::WriteDescriptor()+0xbe>
    1d96:	ldr	r3, [r4, #16]
    1d98:	b.n	1c02 <MTPD::WriteDescriptor()+0x4a>
    1d9a:	ldr	r3, [r4, #16]
    1d9c:	b.n	1bd4 <MTPD::WriteDescriptor()+0x1c>
    1d9e:	ldr	r3, [r4, #16]
    1da0:	b.n	1bde <MTPD::WriteDescriptor()+0x26>
    1da2:	ldr	r3, [r4, #16]
    1da4:	b.n	1c4e <MTPD::WriteDescriptor()+0x96>
    1da6:	ldr	r3, [r4, #16]
    1da8:	b.n	1c5a <MTPD::WriteDescriptor()+0xa2>
    1daa:	ldr	r3, [r4, #16]
    1dac:	b.n	1c62 <MTPD::WriteDescriptor()+0xaa>
    1dae:	ldr	r3, [r4, #16]
    1db0:	b.n	1c6a <MTPD::WriteDescriptor()+0xb2>
    1db2:	nop
    1db4:	.word	0x0000ff20
    1db8:	.word	0x0000fee0
    1dbc:	.word	0x0000ff34
    1dc0:	.word	0x0000ff18
    1dc4:	.word	0x0000ff3c
    1dc8:	.word	0x0000ff40

00001dcc <MTPD::WriteStorageIDs()>:
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1dcc:	push	{r4, r5, r6, lr}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1dce:	ldrb	r3, [r0, #12]
    writestring(MTP_MODEL);     // Model
    writestring(MTP_VERS);      // version
    writestring(MTP_SERNR);     // serial
  }

  void MTPD::WriteStorageIDs() {
    1dd0:	sub	sp, #32
    1dd2:	movs	r5, #7
    1dd4:	mov	r4, r0
    1dd6:	str	r5, [sp, #28]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1dd8:	cbz	r3, 1e00 <MTPD::WriteStorageIDs()+0x34>
      write_length_ += len;
    1dda:	ldr	r3, [r0, #16]
    1ddc:	adds	r3, #4
    1dde:	str	r3, [r0, #16]
    1de0:	adds	r3, #4
    1de2:	str	r3, [r4, #16]
    1de4:	adds	r3, #4
    1de6:	str	r3, [r4, #16]
    1de8:	adds	r3, #4
    1dea:	str	r3, [r4, #16]
    1dec:	adds	r3, #4
    1dee:	str	r3, [r4, #16]
    1df0:	adds	r3, #4
    1df2:	str	r3, [r4, #16]
    1df4:	adds	r3, #4
    1df6:	str	r3, [r4, #16]
    1df8:	adds	r3, #4
    1dfa:	str	r3, [r4, #16]
    write32(3); // 1 storage
    write32(4); // 1 storage
    write32(5); // 1 storage
    write32(6); // 1 storage
    write32(7); // 1 storage
  }
    1dfc:	add	sp, #32
    1dfe:	pop	{r4, r5, r6, pc}
    1e00:	movs	r2, #4
    1e02:	add	r1, sp, #28
    1e04:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e08:	ldrb	r3, [r4, #12]
    1e0a:	movs	r2, #1
    1e0c:	str	r2, [sp, #24]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1e0e:	cmp	r3, #0
    1e10:	bne.n	1e96 <MTPD::WriteStorageIDs()+0xca>
    1e12:	movs	r2, #4
    1e14:	add	r1, sp, #24
    1e16:	mov	r0, r4
    1e18:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e1c:	ldrb	r3, [r4, #12]
    1e1e:	movs	r2, #2
    1e20:	str	r2, [sp, #20]
    1e22:	cmp	r3, #0
    1e24:	bne.n	1e9a <MTPD::WriteStorageIDs()+0xce>
    1e26:	movs	r2, #4
    1e28:	add	r1, sp, #20
    1e2a:	mov	r0, r4
    1e2c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e30:	ldrb	r3, [r4, #12]
    1e32:	movs	r2, #3
    1e34:	str	r2, [sp, #16]
    1e36:	cmp	r3, #0
    1e38:	bne.n	1e9e <MTPD::WriteStorageIDs()+0xd2>
    1e3a:	movs	r2, #4
    1e3c:	add	r1, sp, #16
    1e3e:	mov	r0, r4
    1e40:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e44:	ldrb	r3, [r4, #12]
    1e46:	movs	r6, #4
    1e48:	str	r6, [sp, #12]
    1e4a:	cbnz	r3, 1ea2 <MTPD::WriteStorageIDs()+0xd6>
    1e4c:	mov	r2, r6
    1e4e:	add	r1, sp, #12
    1e50:	mov	r0, r4
    1e52:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e56:	ldrb	r3, [r4, #12]
    1e58:	movs	r2, #5
    1e5a:	str	r2, [sp, #8]
    1e5c:	cbnz	r3, 1ea6 <MTPD::WriteStorageIDs()+0xda>
    1e5e:	mov	r2, r6
    1e60:	add	r1, sp, #8
    1e62:	mov	r0, r4
    1e64:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e68:	ldrb	r3, [r4, #12]
    1e6a:	movs	r2, #6
    1e6c:	str	r2, [sp, #4]
    1e6e:	cbnz	r3, 1e92 <MTPD::WriteStorageIDs()+0xc6>
    1e70:	mov	r2, r6
    1e72:	add	r1, sp, #4
    1e74:	mov	r0, r4
    1e76:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1e7a:	ldrb	r3, [r4, #12]
    1e7c:	str	r5, [sp, #0]
    1e7e:	cbnz	r3, 1e8e <MTPD::WriteStorageIDs()+0xc2>
    1e80:	mov	r2, r6
    1e82:	mov	r0, r4
    1e84:	mov	r1, sp
    1e86:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    write32(3); // 1 storage
    write32(4); // 1 storage
    write32(5); // 1 storage
    write32(6); // 1 storage
    write32(7); // 1 storage
  }
    1e8a:	add	sp, #32
    1e8c:	pop	{r4, r5, r6, pc}
    1e8e:	ldr	r3, [r4, #16]
    1e90:	b.n	1df8 <MTPD::WriteStorageIDs()+0x2c>
    1e92:	ldr	r3, [r4, #16]
    1e94:	b.n	1df4 <MTPD::WriteStorageIDs()+0x28>
    1e96:	ldr	r3, [r4, #16]
    1e98:	b.n	1de0 <MTPD::WriteStorageIDs()+0x14>
    1e9a:	ldr	r3, [r4, #16]
    1e9c:	b.n	1de4 <MTPD::WriteStorageIDs()+0x18>
    1e9e:	ldr	r3, [r4, #16]
    1ea0:	b.n	1de8 <MTPD::WriteStorageIDs()+0x1c>
    1ea2:	ldr	r3, [r4, #16]
    1ea4:	b.n	1dec <MTPD::WriteStorageIDs()+0x20>
    1ea6:	ldr	r3, [r4, #16]
    1ea8:	b.n	1df0 <MTPD::WriteStorageIDs()+0x24>
    1eaa:	nop

00001eac <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1eac:	push	{r4, r5, r6, lr}
    1eae:	mov	r4, r0
    if (write_get_length_) {
    1eb0:	ldrb	r5, [r0, #12]
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1eb2:	ldr	r0, [r0, #0]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    1eb4:	sub	sp, #8
    1eb6:	mov	r6, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1eb8:	ldr	r3, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    1eba:	cbz	r5, 1eda <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2e>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1ebc:	mov	r1, r2
    1ebe:	ldr	r3, [r3, #20]
    1ec0:	blx	r3
    int num = 0;
    1ec2:	movs	r5, #0
    while (storage_->GetNextObjectHandle()) num++;
    1ec4:	ldr	r0, [r4, #0]
    1ec6:	ldr	r3, [r0, #0]
    1ec8:	ldr	r3, [r3, #24]
    1eca:	blx	r3
    1ecc:	adds	r5, #1
    1ece:	cmp	r0, #0
    1ed0:	bne.n	1ec4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x18>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    1ed2:	lsls	r5, r5, #2
    1ed4:	str	r5, [r4, #16]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    1ed6:	add	sp, #8
    1ed8:	pop	{r4, r5, r6, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    1eda:	ldr	r3, [r3, #20]
    1edc:	mov	r1, r2
    1ede:	blx	r3
    1ee0:	b.n	1ee4 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    1ee2:	adds	r5, #1
    1ee4:	ldr	r0, [r4, #0]
    1ee6:	ldr	r3, [r0, #0]
    1ee8:	ldr	r3, [r3, #24]
    1eea:	blx	r3
    1eec:	cmp	r0, #0
    1eee:	bne.n	1ee2 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1ef0:	ldrb	r3, [r4, #12]
    1ef2:	str	r5, [sp, #4]
    1ef4:	cbz	r3, 1f2c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x80>
      write_length_ += len;
    1ef6:	ldr	r3, [r4, #16]
    1ef8:	adds	r3, #4
    1efa:	str	r3, [r4, #16]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    1efc:	ldr	r0, [r4, #0]
    1efe:	ldr	r3, [r0, #0]
    1f00:	mov	r1, r6
    1f02:	ldr	r3, [r3, #20]
    1f04:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    1f06:	ldr	r0, [r4, #0]
    1f08:	ldr	r3, [r0, #0]
    1f0a:	ldr	r3, [r3, #24]
    1f0c:	blx	r3
    1f0e:	cmp	r0, #0
    1f10:	beq.n	1ed6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x2a>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f12:	ldrb	r3, [r4, #12]
    1f14:	str	r0, [sp, #0]
    1f16:	cbz	r3, 1f20 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x74>
      write_length_ += len;
    1f18:	ldr	r3, [r4, #16]
    1f1a:	adds	r3, #4
    1f1c:	str	r3, [r4, #16]
    1f1e:	b.n	1f06 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1f20:	movs	r2, #4
    1f22:	mov	r1, sp
    1f24:	mov	r0, r4
    1f26:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1f2a:	b.n	1f06 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x5a>
    1f2c:	movs	r2, #4
    1f2e:	add.w	r1, sp, r2
    1f32:	mov	r0, r4
    1f34:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    1f38:	b.n	1efc <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x50>
    1f3a:	nop

00001f3c <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1f3c:	push	{r4, r5, r6, lr}
    1f3e:	mov	r4, r0
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1f40:	ldr	r0, [r0, #0]
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    1f42:	sub	sp, #328	; 0x148
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    1f44:	ldr	r3, [r0, #0]
    1f46:	add	r5, sp, #24
    1f48:	str	r5, [sp, #0]
    1f4a:	ldr	r6, [r3, #28]
    1f4c:	add	r2, sp, #72	; 0x48
    1f4e:	add	r3, sp, #20
    1f50:	blx	r6
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    1f52:	ldrb	r3, [r4, #12]
    1f54:	movs	r2, #1
    1f56:	str	r2, [sp, #28]
    1f58:	cmp	r3, #0
    1f5a:	beq.n	2010 <MTPD::GetObjectInfo(unsigned long)+0xd4>
      write_length_ += len;
    1f5c:	ldr	r3, [r4, #16]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1f5e:	ldr	r2, [sp, #20]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1f60:	adds	r3, #4
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1f62:	adds	r2, #1
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1f64:	str	r3, [r4, #16]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1f66:	beq.w	2140 <MTPD::GetObjectInfo(unsigned long)+0x204>
    1f6a:	movs	r2, #0
    1f6c:	strh.w	r2, [sp, #16]
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    1f70:	adds	r3, #2
    1f72:	movs	r2, #0
    1f74:	str	r3, [r4, #16]
    1f76:	strh.w	r2, [sp, #14]
    1f7a:	adds	r3, #2
    1f7c:	ldr	r2, [sp, #20]
    1f7e:	str	r3, [r4, #16]
    1f80:	str	r2, [sp, #60]	; 0x3c
    1f82:	adds	r3, #4
    1f84:	movs	r2, #0
    1f86:	str	r3, [r4, #16]
    1f88:	strh.w	r2, [sp, #12]
    1f8c:	adds	r3, #2
    1f8e:	movs	r2, #0
    1f90:	str	r3, [r4, #16]
    1f92:	str	r2, [sp, #56]	; 0x38
    1f94:	adds	r3, #4
    1f96:	movs	r2, #0
    1f98:	str	r3, [r4, #16]
    1f9a:	str	r2, [sp, #52]	; 0x34
    1f9c:	adds	r3, #4
    1f9e:	movs	r2, #0
    1fa0:	str	r3, [r4, #16]
    1fa2:	str	r2, [sp, #48]	; 0x30
    1fa4:	adds	r3, #4
    1fa6:	movs	r2, #0
    1fa8:	str	r3, [r4, #16]
    1faa:	str	r2, [sp, #44]	; 0x2c
    1fac:	adds	r3, #4
    1fae:	movs	r2, #0
    1fb0:	str	r3, [r4, #16]
    1fb2:	str	r2, [sp, #40]	; 0x28
    1fb4:	adds	r3, #4
    1fb6:	movs	r2, #0
    1fb8:	str	r3, [r4, #16]
    1fba:	str	r2, [sp, #36]	; 0x24
    1fbc:	adds	r3, #4
    1fbe:	ldr	r2, [r5, #0]
    1fc0:	str	r3, [r4, #16]
    1fc2:	str	r2, [sp, #32]
    1fc4:	ldr	r2, [sp, #20]
    1fc6:	sub.w	r2, r2, #4294967295
    1fca:	clz	r2, r2
    1fce:	lsrs	r2, r2, #5
    1fd0:	adds	r3, #4
    1fd2:	str	r3, [r4, #16]
    1fd4:	strh.w	r2, [sp, #18]
    1fd8:	adds	r3, #2
    1fda:	movs	r2, #0
    1fdc:	str	r3, [r4, #16]
    1fde:	str	r2, [sp, #68]	; 0x44
    1fe0:	adds	r3, #4
    1fe2:	movs	r2, #0
    1fe4:	str	r3, [r4, #16]
    1fe6:	str	r2, [sp, #64]	; 0x40
    1fe8:	adds	r3, #4
    1fea:	str	r3, [r4, #16]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    1fec:	add	r1, sp, #72	; 0x48
    1fee:	mov	r0, r4
    1ff0:	bl	1a54 <MTPD::writestring(char const*)>
    writestring("");  // date created
    1ff4:	mov	r0, r4
    1ff6:	ldr	r1, [pc, #396]	; (2184 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    1ff8:	bl	1a54 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    1ffc:	mov	r0, r4
    1ffe:	ldr	r1, [pc, #388]	; (2184 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    2000:	bl	1a54 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    2004:	mov	r0, r4
    2006:	ldr	r1, [pc, #380]	; (2184 <MTPD::GetObjectInfo(unsigned long)+0x248>)
    2008:	bl	1a54 <MTPD::writestring(char const*)>
  }
    200c:	add	sp, #328	; 0x148
    200e:	pop	{r4, r5, r6, pc}
    2010:	add	r1, sp, #28
    2012:	movs	r2, #4
    2014:	mov	r0, r4
    2016:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    201a:	ldr	r3, [sp, #20]
    201c:	ldrb	r6, [r4, #12]
    201e:	adds	r3, #1
    2020:	movw	r3, #12289	; 0x3001
    2024:	it	ne
    2026:	movne	r3, #0
    2028:	strh.w	r3, [sp, #16]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    202c:	cmp	r6, #0
    202e:	bne.w	2152 <MTPD::GetObjectInfo(unsigned long)+0x216>
    2032:	add	r1, sp, #16
    2034:	movs	r2, #2
    2036:	mov	r0, r4
    2038:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    203c:	ldrb	r3, [r4, #12]
    203e:	strh.w	r6, [sp, #14]
    2042:	cmp	r3, #0
    2044:	bne.w	2156 <MTPD::GetObjectInfo(unsigned long)+0x21a>
    2048:	movs	r2, #2
    204a:	add.w	r1, sp, #14
    204e:	mov	r0, r4
    2050:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2054:	ldrb	r3, [r4, #12]
    2056:	ldr	r2, [sp, #20]
    2058:	str	r2, [sp, #60]	; 0x3c
    205a:	cmp	r3, #0
    205c:	bne.n	215a <MTPD::GetObjectInfo(unsigned long)+0x21e>
    205e:	add	r1, sp, #60	; 0x3c
    2060:	movs	r2, #4
    2062:	mov	r0, r4
    2064:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2068:	ldrb	r3, [r4, #12]
    206a:	strh.w	r6, [sp, #12]
    206e:	cmp	r3, #0
    2070:	bne.n	215e <MTPD::GetObjectInfo(unsigned long)+0x222>
    2072:	add	r1, sp, #12
    2074:	movs	r2, #2
    2076:	mov	r0, r4
    2078:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    207c:	ldrb	r3, [r4, #12]
    207e:	str	r6, [sp, #56]	; 0x38
    2080:	cmp	r3, #0
    2082:	bne.n	2162 <MTPD::GetObjectInfo(unsigned long)+0x226>
    2084:	add	r1, sp, #56	; 0x38
    2086:	movs	r2, #4
    2088:	mov	r0, r4
    208a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    208e:	ldrb	r3, [r4, #12]
    2090:	str	r6, [sp, #52]	; 0x34
    2092:	cmp	r3, #0
    2094:	bne.n	2166 <MTPD::GetObjectInfo(unsigned long)+0x22a>
    2096:	add	r1, sp, #52	; 0x34
    2098:	movs	r2, #4
    209a:	mov	r0, r4
    209c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20a0:	ldrb	r3, [r4, #12]
    20a2:	str	r6, [sp, #48]	; 0x30
    20a4:	cmp	r3, #0
    20a6:	bne.n	216a <MTPD::GetObjectInfo(unsigned long)+0x22e>
    20a8:	add	r1, sp, #48	; 0x30
    20aa:	movs	r2, #4
    20ac:	mov	r0, r4
    20ae:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20b2:	ldrb	r3, [r4, #12]
    20b4:	str	r6, [sp, #44]	; 0x2c
    20b6:	cmp	r3, #0
    20b8:	bne.n	216e <MTPD::GetObjectInfo(unsigned long)+0x232>
    20ba:	add	r1, sp, #44	; 0x2c
    20bc:	movs	r2, #4
    20be:	mov	r0, r4
    20c0:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20c4:	ldrb	r3, [r4, #12]
    20c6:	str	r6, [sp, #40]	; 0x28
    20c8:	cmp	r3, #0
    20ca:	bne.n	2172 <MTPD::GetObjectInfo(unsigned long)+0x236>
    20cc:	add	r1, sp, #40	; 0x28
    20ce:	movs	r2, #4
    20d0:	mov	r0, r4
    20d2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20d6:	ldrb	r3, [r4, #12]
    20d8:	str	r6, [sp, #36]	; 0x24
    20da:	cmp	r3, #0
    20dc:	bne.n	2176 <MTPD::GetObjectInfo(unsigned long)+0x23a>
    20de:	movs	r2, #4
    20e0:	add	r1, sp, #36	; 0x24
    20e2:	mov	r0, r4
    20e4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20e8:	ldrb	r3, [r4, #12]
    20ea:	ldr	r2, [r5, #0]
    20ec:	str	r2, [sp, #32]
    20ee:	cmp	r3, #0
    20f0:	bne.n	217a <MTPD::GetObjectInfo(unsigned long)+0x23e>
    20f2:	add	r1, sp, #32
    20f4:	movs	r2, #4
    20f6:	mov	r0, r4
    20f8:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    20fc:	ldr	r3, [sp, #20]
    20fe:	ldrb	r6, [r4, #12]
    2100:	sub.w	r3, r3, #4294967295
    2104:	clz	r3, r3
    2108:	lsrs	r3, r3, #5
    210a:	strh.w	r3, [sp, #18]
    210e:	cmp	r6, #0
    2110:	bne.n	217e <MTPD::GetObjectInfo(unsigned long)+0x242>
    2112:	add.w	r1, sp, #18
    2116:	movs	r2, #2
    2118:	mov	r0, r4
    211a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    211e:	ldrb	r5, [r4, #12]
    2120:	str	r6, [sp, #68]	; 0x44
    2122:	cbnz	r5, 214e <MTPD::GetObjectInfo(unsigned long)+0x212>
    2124:	add	r1, sp, #68	; 0x44
    2126:	movs	r2, #4
    2128:	mov	r0, r4
    212a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    212e:	ldrb	r3, [r4, #12]
    2130:	str	r5, [sp, #64]	; 0x40
    2132:	cbnz	r3, 214a <MTPD::GetObjectInfo(unsigned long)+0x20e>
    2134:	add	r1, sp, #64	; 0x40
    2136:	movs	r2, #4
    2138:	mov	r0, r4
    213a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    213e:	b.n	1fec <MTPD::GetObjectInfo(unsigned long)+0xb0>
    2140:	movw	r2, #12289	; 0x3001
    2144:	strh.w	r2, [sp, #16]
    2148:	b.n	1f70 <MTPD::GetObjectInfo(unsigned long)+0x34>
    214a:	ldr	r3, [r4, #16]
    214c:	b.n	1fe8 <MTPD::GetObjectInfo(unsigned long)+0xac>
    214e:	ldr	r3, [r4, #16]
    2150:	b.n	1fe0 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2152:	ldr	r3, [r4, #16]
    2154:	b.n	1f70 <MTPD::GetObjectInfo(unsigned long)+0x34>
    2156:	ldr	r3, [r4, #16]
    2158:	b.n	1f7a <MTPD::GetObjectInfo(unsigned long)+0x3e>
    215a:	ldr	r3, [r4, #16]
    215c:	b.n	1f82 <MTPD::GetObjectInfo(unsigned long)+0x46>
    215e:	ldr	r3, [r4, #16]
    2160:	b.n	1f8c <MTPD::GetObjectInfo(unsigned long)+0x50>
    2162:	ldr	r3, [r4, #16]
    2164:	b.n	1f94 <MTPD::GetObjectInfo(unsigned long)+0x58>
    2166:	ldr	r3, [r4, #16]
    2168:	b.n	1f9c <MTPD::GetObjectInfo(unsigned long)+0x60>
    216a:	ldr	r3, [r4, #16]
    216c:	b.n	1fa4 <MTPD::GetObjectInfo(unsigned long)+0x68>
    216e:	ldr	r3, [r4, #16]
    2170:	b.n	1fac <MTPD::GetObjectInfo(unsigned long)+0x70>
    2172:	ldr	r3, [r4, #16]
    2174:	b.n	1fb4 <MTPD::GetObjectInfo(unsigned long)+0x78>
    2176:	ldr	r3, [r4, #16]
    2178:	b.n	1fbc <MTPD::GetObjectInfo(unsigned long)+0x80>
    217a:	ldr	r3, [r4, #16]
    217c:	b.n	1fc4 <MTPD::GetObjectInfo(unsigned long)+0x88>
    217e:	ldr	r3, [r4, #16]
    2180:	b.n	1fd8 <MTPD::GetObjectInfo(unsigned long)+0x9c>
    2182:	nop
    2184:	.word	0x0000fd78

00002188 <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    2188:	push	{r4, r5, r6, r7, lr}
      write32(propertyListNum);
    218a:	ldr	r7, [pc, #96]	; (21ec <MTPD::getObjectPropsSupported(unsigned long)+0x64>)
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    218c:	ldrb	r2, [r0, #12]
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    218e:	ldr	r3, [r7, #0]
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    2190:	sub	sp, #12
    2192:	mov	r5, r0
    2194:	str	r3, [sp, #4]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2196:	cbz	r2, 21de <MTPD::getObjectPropsSupported(unsigned long)+0x56>
      write_length_ += len;
    2198:	ldr	r2, [r0, #16]
    219a:	adds	r2, #4
    219c:	str	r2, [r0, #16]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    219e:	cbz	r3, 21da <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    21a0:	ldr	r6, [pc, #76]	; (21f0 <MTPD::getObjectPropsSupported(unsigned long)+0x68>)
    21a2:	movw	r2, #56321	; 0xdc01
    21a6:	movs	r4, #0
    21a8:	b.n	21bc <MTPD::getObjectPropsSupported(unsigned long)+0x34>
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
      write_length_ += len;
    21aa:	ldr	r3, [r5, #16]
    21ac:	adds	r3, #2
    21ae:	str	r3, [r5, #16]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    21b0:	ldr	r3, [r7, #0]
    21b2:	adds	r4, #1
    21b4:	cmp	r3, r4
    21b6:	bls.n	21da <MTPD::getObjectPropsSupported(unsigned long)+0x52>
    21b8:	ldrh.w	r2, [r6, #2]!
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    21bc:	ldrb	r3, [r5, #12]
    21be:	strh.w	r2, [sp, #2]
    21c2:	cmp	r3, #0
    21c4:	bne.n	21aa <MTPD::getObjectPropsSupported(unsigned long)+0x22>
    21c6:	movs	r2, #2
    21c8:	add.w	r1, sp, r2
    21cc:	mov	r0, r5
    21ce:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    21d2:	ldr	r3, [r7, #0]
    21d4:	adds	r4, #1
    21d6:	cmp	r3, r4
    21d8:	bhi.n	21b8 <MTPD::getObjectPropsSupported(unsigned long)+0x30>
    }
    21da:	add	sp, #12
    21dc:	pop	{r4, r5, r6, r7, pc}
    21de:	movs	r2, #4
    21e0:	add.w	r1, sp, r2
    21e4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    21e8:	ldr	r3, [r7, #0]
    21ea:	b.n	219e <MTPD::getObjectPropsSupported(unsigned long)+0x16>
    21ec:	.word	0x1fff0974
    21f0:	.word	0x0000ff04

000021f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    21f4:	push	{r4, r5, r6, r7, lr}
    21f6:	mov	r5, r0
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    21f8:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    21fa:	sub	sp, #188	; 0xbc
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    21fc:	ldr	r3, [r0, #0]
    21fe:	add	r4, sp, #20
    2200:	str	r4, [sp, #0]
    2202:	ldr	r6, [r3, #28]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    2204:	mov	r4, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    2206:	add	r3, sp, #16
    2208:	add	r2, sp, #56	; 0x38
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    220a:	mov	r7, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    220c:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    220e:	sub.w	r2, r4, #56320	; 0xdc00
    2212:	subs	r2, #1
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    2214:	ldr	r3, [sp, #16]
      switch(p2)
    2216:	cmp	r2, #67	; 0x43
    2218:	bhi.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    221a:	tbb	[pc, r2]
    221e:	.short	0x463d
    2220:	.word	0x2f2f6e61
    2224:	.word	0x2f313137
    2228:	.word	0x2f2f2f56
    222c:	.word	0x2f2f2f2f
    2230:	.word	0x2f2f2f2f
    2234:	.word	0x2f2f2f2f
    2238:	.word	0x2f2f2f2f
    223c:	.word	0x2f2f2f2f
    2240:	.word	0x2f2f2f2f
    2244:	.word	0x2f2f2f2f
    2248:	.word	0x2f2f2f2f
    224c:	.word	0x2f2f2f2f
    2250:	.word	0x2f2f2f2f
    2254:	.word	0x2f2f2f2f
    2258:	.word	0x2f2f2f2f
    225c:	.word	0x2f222f2f
    2260:	.short	0x372f
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2262:	ldrb	r3, [r5, #12]
    2264:	str	r7, [sp, #52]	; 0x34
    2266:	cmp	r3, #0
    2268:	beq.n	230a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x116>
      write_length_ += len;
    226a:	ldr	r3, [r5, #16]
    226c:	adds	r3, #4
    226e:	str	r3, [r5, #16]
    2270:	adds	r3, #4
    2272:	str	r3, [r5, #16]
    2274:	adds	r3, #4
    2276:	str	r3, [r5, #16]
    2278:	adds	r3, #4
    227a:	str	r3, [r5, #16]
          writestring(name);
          break;
        default:
          break;
      }
    }
    227c:	add	sp, #188	; 0xbc
    227e:	pop	{r4, r5, r6, r7, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    2280:	mov	r0, r5
    2282:	ldr	r1, [pc, #264]	; (238c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x198>)
    2284:	bl	1a54 <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    2288:	add	sp, #188	; 0xbc
    228a:	pop	{r4, r5, r6, r7, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    228c:	add	r1, sp, #56	; 0x38
    228e:	mov	r0, r5
    2290:	bl	1a54 <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    2294:	add	sp, #188	; 0xbc
    2296:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2298:	ldrb	r3, [r5, #12]
    229a:	str	r7, [sp, #24]
    229c:	cmp	r3, #0
    229e:	beq.n	2358 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
      write_length_ += len;
    22a0:	ldr	r3, [r5, #16]
    22a2:	adds	r3, #4
    22a4:	str	r3, [r5, #16]
          writestring(name);
          break;
        default:
          break;
      }
    }
    22a6:	add	sp, #188	; 0xbc
    22a8:	pop	{r4, r5, r6, r7, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    22aa:	adds	r3, #1
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22ac:	ldrb	r2, [r5, #12]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    22ae:	movw	r3, #12289	; 0x3001
    22b2:	it	ne
    22b4:	movne.w	r3, #12288	; 0x3000
    22b8:	strh.w	r3, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22bc:	cmp	r2, #0
    22be:	beq.n	234c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
      write_length_ += len;
    22c0:	ldr	r3, [r5, #16]
    22c2:	adds	r3, #2
    22c4:	str	r3, [r5, #16]
          writestring(name);
          break;
        default:
          break;
      }
    }
    22c6:	add	sp, #188	; 0xbc
    22c8:	pop	{r4, r5, r6, r7, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    22ca:	ldrb	r3, [r5, #12]
    22cc:	ldr	r2, [sp, #20]
    22ce:	str	r2, [sp, #36]	; 0x24
    22d0:	cmp	r3, #0
    22d2:	bne.n	22a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac>
    22d4:	mov	r0, r5
    22d6:	movs	r2, #4
    22d8:	add	r1, sp, #36	; 0x24
    22da:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    22de:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    22e0:	ldrb	r3, [r5, #12]
    22e2:	movs	r2, #0
    22e4:	strh.w	r2, [sp, #14]
    22e8:	cmp	r3, #0
    22ea:	bne.n	22c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    22ec:	mov	r0, r5
    22ee:	movs	r2, #2
    22f0:	add.w	r1, sp, #14
    22f4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    22f8:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    22fa:	ldrb	r4, [r5, #12]
    22fc:	str	r3, [sp, #32]
    22fe:	cmp	r4, #0
    2300:	beq.n	2364 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x170>
      write_length_ += len;
    2302:	ldr	r3, [r5, #16]
    2304:	adds	r3, #4
    2306:	str	r3, [r5, #16]
    2308:	b.n	2278 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    230a:	movs	r2, #4
    230c:	add	r1, sp, #52	; 0x34
    230e:	mov	r0, r5
    2310:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2314:	ldrb	r3, [r5, #12]
    2316:	ldr	r2, [sp, #20]
    2318:	str	r2, [sp, #48]	; 0x30
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    231a:	cmp	r3, #0
    231c:	bne.n	2388 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x194>
    231e:	movs	r2, #4
    2320:	add	r1, sp, #48	; 0x30
    2322:	mov	r0, r5
    2324:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2328:	ldrb	r4, [r5, #12]
    232a:	movs	r3, #1
    232c:	str	r3, [sp, #44]	; 0x2c
    232e:	cbnz	r4, 2384 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x190>
    2330:	movs	r2, #4
    2332:	add	r1, sp, #44	; 0x2c
    2334:	mov	r0, r5
    2336:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    233a:	ldrb	r3, [r5, #12]
    233c:	str	r4, [sp, #40]	; 0x28
    233e:	cbnz	r3, 2380 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2340:	mov	r0, r5
    2342:	movs	r2, #4
    2344:	add	r1, sp, #40	; 0x28
    2346:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    234a:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    234c:	mov	r0, r5
    234e:	movs	r2, #2
    2350:	add	r1, sp, #12
    2352:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2356:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2358:	mov	r0, r5
    235a:	movs	r2, #4
    235c:	add	r1, sp, #24
    235e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2362:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2364:	movs	r2, #4
    2366:	add	r1, sp, #32
    2368:	mov	r0, r5
    236a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    236e:	ldrb	r3, [r5, #12]
    2370:	str	r4, [sp, #28]
    2372:	cbnz	r3, 2380 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x18c>
    2374:	mov	r0, r5
    2376:	movs	r2, #4
    2378:	add	r1, sp, #28
    237a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    237e:	b.n	227c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x88>
    2380:	ldr	r3, [r5, #16]
    2382:	b.n	2278 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
    2384:	ldr	r3, [r5, #16]
    2386:	b.n	2274 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
    2388:	ldr	r3, [r5, #16]
    238a:	b.n	2270 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c>
    238c:	.word	0x0000fd78

00002390 <MTPD::GetStorageInfo(unsigned long)>:
    write32(5); // 1 storage
    write32(6); // 1 storage
    write32(7); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    2390:	push	{r4, r5, r6, lr}
    2392:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2394:	ldr	r0, [r0, #0]
    2396:	ldr	r3, [r0, #0]
    write32(5); // 1 storage
    write32(6); // 1 storage
    write32(7); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    2398:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    239a:	ldr	r3, [r3, #0]
    239c:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    239e:	ldrb	r3, [r4, #12]
    write32(6); // 1 storage
    write32(7); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    23a0:	cmp	r0, #0
    23a2:	ite	eq
    23a4:	moveq	r2, #4
    23a6:	movne	r2, #1
    23a8:	strh.w	r2, [sp, #6]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23ac:	cmp	r3, #0
    23ae:	beq.n	2450 <MTPD::GetStorageInfo(unsigned long)+0xc0>
      write_length_ += len;
    23b0:	ldr	r3, [r4, #16]
    23b2:	adds	r3, #2
    23b4:	str	r3, [r4, #16]
    write32(7); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    23b6:	ldr	r0, [r4, #0]
    23b8:	ldr	r3, [r0, #0]
    23ba:	ldr	r3, [r3, #4]
    23bc:	blx	r3
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23be:	ldrb	r5, [r4, #12]
    write32(7); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    23c0:	cmp	r0, #0
    23c2:	ite	eq
    23c4:	moveq	r3, #1
    23c6:	movne	r3, #2
    23c8:	strh.w	r3, [sp, #10]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23cc:	cmp	r5, #0
    23ce:	beq.n	248a <MTPD::GetStorageInfo(unsigned long)+0xfa>
      write_length_ += len;
    23d0:	ldr	r3, [r4, #16]
    23d2:	movs	r2, #0
    23d4:	adds	r3, #2
    23d6:	str	r3, [r4, #16]
    23d8:	strh.w	r2, [sp, #8]
    23dc:	adds	r3, #2
    23de:	str	r3, [r4, #16]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    23e0:	ldr	r0, [r4, #0]
    23e2:	ldr	r3, [r0, #0]
    23e4:	ldr	r3, [r3, #8]
    23e6:	blx	r3
    23e8:	mov	r5, r0
  uint64_t nsect = storage_->clusterSize() ;
    23ea:	ldr	r0, [r4, #0]
    23ec:	ldr	r3, [r0, #0]
    23ee:	ldr	r3, [r3, #16]
    23f0:	blx	r3
    23f2:	mov	r6, r0
    23f4:	umull	r0, r1, r5, r0
    23f8:	lsls	r3, r1, #9
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    23fa:	ldrb	r2, [r4, #12]
    23fc:	orr.w	r3, r3, r0, lsr #23
    2400:	lsls	r0, r0, #9
    2402:	str	r3, [sp, #28]
    2404:	str	r0, [sp, #24]
    2406:	cmp	r2, #0
    2408:	beq.n	247e <MTPD::GetStorageInfo(unsigned long)+0xee>
      write_length_ += len;
    240a:	ldr	r3, [r4, #16]
    240c:	adds	r3, #8
    240e:	str	r3, [r4, #16]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    2410:	ldr	r0, [r4, #0]
    2412:	ldr	r3, [r0, #0]
    2414:	ldr	r3, [r3, #12]
    2416:	blx	r3
    2418:	lsls	r2, r6, #9
    241a:	umull	r2, r3, r2, r0
    241e:	lsrs	r6, r6, #23
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2420:	ldrb	r1, [r4, #12]
    2422:	mla	r3, r0, r6, r3
    2426:	strd	r2, r3, [sp, #16]
    242a:	cbz	r1, 245e <MTPD::GetStorageInfo(unsigned long)+0xce>
      write_length_ += len;
    242c:	ldr	r3, [r4, #16]
    242e:	mov.w	r2, #4294967295
    2432:	adds	r3, #8
    2434:	str	r3, [r4, #16]
    2436:	str	r2, [sp, #12]
    2438:	adds	r3, #4
    243a:	str	r3, [r4, #16]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring(MTP_STORE);  // storage descriptor
    243c:	mov	r0, r4
    243e:	ldr	r1, [pc, #116]	; (24b4 <MTPD::GetStorageInfo(unsigned long)+0x124>)
    2440:	bl	1a54 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    2444:	mov	r0, r4
    2446:	ldr	r1, [pc, #112]	; (24b8 <MTPD::GetStorageInfo(unsigned long)+0x128>)
    2448:	bl	1a54 <MTPD::writestring(char const*)>
  }
    244c:	add	sp, #32
    244e:	pop	{r4, r5, r6, pc}
    2450:	movs	r2, #2
    2452:	add.w	r1, sp, #6
    2456:	mov	r0, r4
    2458:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    245c:	b.n	23b6 <MTPD::GetStorageInfo(unsigned long)+0x26>
    245e:	movs	r2, #8
    2460:	add	r1, sp, #16
    2462:	mov	r0, r4
    2464:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2468:	ldrb	r3, [r4, #12]
    246a:	mov.w	r2, #4294967295
    246e:	str	r2, [sp, #12]
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2470:	cbnz	r3, 24aa <MTPD::GetStorageInfo(unsigned long)+0x11a>
    2472:	movs	r2, #4
    2474:	add	r1, sp, #12
    2476:	mov	r0, r4
    2478:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    247c:	b.n	243c <MTPD::GetStorageInfo(unsigned long)+0xac>
    247e:	movs	r2, #8
    2480:	add	r1, sp, #24
    2482:	mov	r0, r4
    2484:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2488:	b.n	2410 <MTPD::GetStorageInfo(unsigned long)+0x80>
    248a:	movs	r2, #2
    248c:	add.w	r1, sp, #10
    2490:	mov	r0, r4
    2492:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2496:	ldrb	r3, [r4, #12]
    2498:	strh.w	r5, [sp, #8]
    249c:	cbnz	r3, 24ae <MTPD::GetStorageInfo(unsigned long)+0x11e>
    249e:	movs	r2, #2
    24a0:	add	r1, sp, #8
    24a2:	mov	r0, r4
    24a4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    24a8:	b.n	23e0 <MTPD::GetStorageInfo(unsigned long)+0x50>
    24aa:	ldr	r3, [r4, #16]
    24ac:	b.n	2438 <MTPD::GetStorageInfo(unsigned long)+0xa8>
    24ae:	ldr	r3, [r4, #16]
    24b0:	b.n	23dc <MTPD::GetStorageInfo(unsigned long)+0x4c>
    24b2:	nop
    24b4:	.word	0x0000ff48
    24b8:	.word	0x0000fd78

000024bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    24bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      switch(p1)
    24c0:	sub.w	r1, r1, #56320	; 0xdc00
    24c4:	subs	r1, #1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    24c6:	sub	sp, #148	; 0x94
    24c8:	mov	r4, r0
      switch(p1)
    24ca:	cmp	r1, #67	; 0x43
    24cc:	bhi.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    24ce:	tbh	[pc, r1, lsl #1]
    24d2:	.short	0x005c
    24d4:	.word	0x0080006e
    24d8:	.word	0x005900c6
    24dc:	.word	0x00d80059
    24e0:	.word	0x01690121
    24e4:	.word	0x01b10059
    24e8:	.word	0x00590059
    24ec:	.word	0x00590059
    24f0:	.word	0x00590059
    24f4:	.word	0x00590059
    24f8:	.word	0x00590059
    24fc:	.word	0x00590059
    2500:	.word	0x00590059
    2504:	.word	0x00590059
    2508:	.word	0x00590059
    250c:	.word	0x00590059
    2510:	.word	0x00590059
    2514:	.word	0x00590059
    2518:	.word	0x00590059
    251c:	.word	0x00590059
    2520:	.word	0x00590059
    2524:	.word	0x00590059
    2528:	.word	0x00590059
    252c:	.word	0x00590059
    2530:	.word	0x00590059
    2534:	.word	0x00590059
    2538:	.word	0x00590059
    253c:	.word	0x00590059
    2540:	.word	0x00590059
    2544:	.word	0x00590059
    2548:	.word	0x00590059
    254c:	.word	0x00590059
    2550:	.word	0x01f70059
    2554:	.word	0x00590059
    2558:	.short	0x0044
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    255a:	ldrb	r3, [r0, #12]
    255c:	movw	r2, #56388	; 0xdc44
    2560:	strh.w	r2, [sp, #70]	; 0x46
    2564:	cmp	r3, #0
    2566:	beq.w	29e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
      write_length_ += len;
    256a:	ldr	r3, [r4, #16]
    256c:	adds	r3, #2
    256e:	str	r3, [r4, #16]
    2570:	adds	r3, #2
    2572:	str	r3, [r4, #16]
    2574:	adds	r3, #1
    2576:	str	r3, [r4, #16]
    2578:	adds	r3, #1
    257a:	str	r3, [r4, #16]
    257c:	adds	r3, #4
    257e:	str	r3, [r4, #16]
    2580:	adds	r3, #1
    2582:	str	r3, [r4, #16]
          write8(0);
          break;
        default:
          break;
      }
    }
    2584:	add	sp, #148	; 0x94
    2586:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    258a:	ldrb	r3, [r0, #12]
    258c:	movw	r2, #56321	; 0xdc01
    2590:	strh.w	r2, [sp, #30]
    2594:	cmp	r3, #0
    2596:	beq.w	2af8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x63c>
      write_length_ += len;
    259a:	ldr	r3, [r4, #16]
    259c:	adds	r3, #2
    259e:	str	r3, [r4, #16]
    25a0:	adds	r3, #2
    25a2:	str	r3, [r4, #16]
    25a4:	adds	r3, #1
    25a6:	str	r3, [r4, #16]
    25a8:	adds	r3, #4
    25aa:	str	r3, [r4, #16]
    25ac:	b.n	257c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25ae:	ldrb	r3, [r0, #12]
    25b0:	movw	r2, #56322	; 0xdc02
    25b4:	strh.w	r2, [sp, #36]	; 0x24
    25b8:	cmp	r3, #0
    25ba:	beq.w	2966 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4aa>
      write_length_ += len;
    25be:	ldr	r3, [r4, #16]
    25c0:	adds	r3, #2
    25c2:	str	r3, [r4, #16]
    25c4:	adds	r3, #2
    25c6:	str	r3, [r4, #16]
    25c8:	adds	r3, #1
    25ca:	str	r3, [r4, #16]
    25cc:	adds	r3, #2
    25ce:	str	r3, [r4, #16]
    25d0:	b.n	257c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    25d2:	ldrb	r3, [r0, #12]
    25d4:	movw	r2, #56323	; 0xdc03
    25d8:	strh.w	r2, [sp, #42]	; 0x2a
    25dc:	cmp	r3, #0
    25de:	bne.n	25be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x102>
    25e0:	movs	r2, #2
    25e2:	add.w	r1, sp, #42	; 0x2a
    25e6:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    25ea:	ldrb	r7, [r4, #12]
    25ec:	movs	r6, #4
    25ee:	strh.w	r6, [sp, #40]	; 0x28
    25f2:	cmp	r7, #0
    25f4:	bne.w	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    25f8:	movs	r2, #2
    25fa:	add	r1, sp, #40	; 0x28
    25fc:	mov	r0, r4
    25fe:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2602:	ldrb	r5, [r4, #12]
    2604:	strb.w	r7, [sp, #9]
    2608:	cmp	r5, #0
    260a:	bne.w	2b8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    260e:	movs	r2, #1
    2610:	add.w	r1, sp, #9
    2614:	mov	r0, r4
    2616:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    261a:	ldrb	r7, [r4, #12]
    261c:	strh.w	r5, [sp, #38]	; 0x26
    2620:	cmp	r7, #0
    2622:	bne.w	2b86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    2626:	movs	r2, #2
    2628:	add.w	r1, sp, #38	; 0x26
    262c:	mov	r0, r4
    262e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2632:	ldrb	r5, [r4, #12]
    2634:	str	r7, [sp, #84]	; 0x54
    2636:	cmp	r5, #0
    2638:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    263c:	mov	r2, r6
    263e:	add	r1, sp, #84	; 0x54
    2640:	mov	r0, r4
    2642:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2646:	ldrb	r3, [r4, #12]
    2648:	strb.w	r5, [sp, #8]
    264c:	cmp	r3, #0
    264e:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2652:	mov	r0, r4
    2654:	movs	r2, #1
    2656:	add	r1, sp, #8
    2658:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    265c:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    265e:	ldrb	r3, [r0, #12]
    2660:	movw	r2, #56324	; 0xdc04
    2664:	strh.w	r2, [sp, #46]	; 0x2e
    2668:	cmp	r3, #0
    266a:	beq.w	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x428>
      write_length_ += len;
    266e:	ldr	r3, [r0, #16]
    2670:	adds	r3, #2
    2672:	str	r3, [r0, #16]
    2674:	adds	r3, #2
    2676:	str	r3, [r4, #16]
    2678:	adds	r3, #1
    267a:	str	r3, [r4, #16]
    267c:	adds	r3, #8
    267e:	str	r3, [r4, #16]
    2680:	b.n	257c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    2682:	ldrb	r3, [r0, #12]
    2684:	movw	r2, #56327	; 0xdc07
    2688:	strh.w	r2, [sp, #50]	; 0x32
    268c:	cmp	r3, #0
    268e:	bne.w	256a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2692:	movs	r2, #2
    2694:	add.w	r1, sp, #50	; 0x32
    2698:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    269c:	ldrb	r3, [r4, #12]
    269e:	movw	r2, #65535	; 0xffff
    26a2:	strh.w	r2, [sp, #48]	; 0x30
    26a6:	cmp	r3, #0
    26a8:	bne.w	2b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    26ac:	movs	r2, #2
    26ae:	add	r1, sp, #48	; 0x30
    26b0:	mov	r0, r4
    26b2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    26b6:	ldrb	r6, [r4, #12]
    26b8:	movs	r5, #1
    26ba:	strb.w	r5, [sp, #14]
    26be:	cmp	r6, #0
    26c0:	bne.w	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    26c4:	mov	r2, r5
    26c6:	add.w	r1, sp, #14
    26ca:	mov	r0, r4
    26cc:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    26d0:	ldrb	r7, [r4, #12]
    26d2:	strb.w	r6, [sp, #13]
    26d6:	cmp	r7, #0
    26d8:	bne.w	2b82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    26dc:	mov	r2, r5
    26de:	add.w	r1, sp, #13
    26e2:	mov	r0, r4
    26e4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    26e8:	ldrb	r6, [r4, #12]
    26ea:	str	r7, [sp, #92]	; 0x5c
    26ec:	cmp	r6, #0
    26ee:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    26f2:	movs	r2, #4
    26f4:	add	r1, sp, #92	; 0x5c
    26f6:	mov	r0, r4
    26f8:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    26fc:	ldrb	r3, [r4, #12]
    26fe:	strb.w	r6, [sp, #12]
    2702:	cmp	r3, #0
    2704:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2708:	mov	r2, r5
    270a:	mov	r0, r4
    270c:	add	r1, sp, #12
    270e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2712:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2714:	ldrb	r3, [r0, #12]
    2716:	movw	r2, #56328	; 0xdc08
    271a:	strh.w	r2, [sp, #54]	; 0x36
    271e:	cmp	r3, #0
    2720:	bne.w	256a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    2724:	movs	r2, #2
    2726:	add.w	r1, sp, #54	; 0x36
    272a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    272e:	ldrb	r6, [r4, #12]
    2730:	movw	r3, #65535	; 0xffff
    2734:	strh.w	r3, [sp, #52]	; 0x34
    2738:	cmp	r6, #0
    273a:	bne.w	2b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    273e:	movs	r2, #2
    2740:	add	r1, sp, #52	; 0x34
    2742:	mov	r0, r4
    2744:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2748:	ldrb	r5, [r4, #12]
    274a:	strb.w	r6, [sp, #17]
    274e:	cmp	r5, #0
    2750:	bne.w	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2754:	movs	r2, #1
    2756:	add.w	r1, sp, #17
    275a:	mov	r0, r4
    275c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2760:	ldrb	r6, [r4, #12]
    2762:	strb.w	r5, [sp, #16]
    2766:	cmp	r6, #0
    2768:	bne.w	2b82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    276c:	movs	r2, #1
    276e:	add	r1, sp, #16
    2770:	mov	r0, r4
    2772:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2776:	ldrb	r5, [r4, #12]
    2778:	str	r6, [sp, #96]	; 0x60
    277a:	cmp	r5, #0
    277c:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2780:	movs	r2, #4
    2782:	add	r1, sp, #96	; 0x60
    2784:	mov	r0, r4
    2786:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    278a:	ldrb	r3, [r4, #12]
    278c:	strb.w	r5, [sp, #15]
    2790:	cmp	r3, #0
    2792:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2796:	mov	r0, r4
    2798:	movs	r2, #1
    279a:	add.w	r1, sp, #15
    279e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    27a2:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    27a4:	ldrb	r3, [r0, #12]
    27a6:	movw	r2, #56329	; 0xdc09
    27aa:	strh.w	r2, [sp, #58]	; 0x3a
    27ae:	cmp	r3, #0
    27b0:	bne.w	256a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
    27b4:	movs	r2, #2
    27b6:	add.w	r1, sp, #58	; 0x3a
    27ba:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    27be:	ldrb	r6, [r4, #12]
    27c0:	movw	r3, #65535	; 0xffff
    27c4:	strh.w	r3, [sp, #56]	; 0x38
    27c8:	cmp	r6, #0
    27ca:	bne.w	2b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    27ce:	movs	r2, #2
    27d0:	add	r1, sp, #56	; 0x38
    27d2:	mov	r0, r4
    27d4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    27d8:	ldrb	r5, [r4, #12]
    27da:	strb.w	r6, [sp, #20]
    27de:	cmp	r5, #0
    27e0:	bne.w	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    27e4:	movs	r2, #1
    27e6:	add	r1, sp, #20
    27e8:	mov	r0, r4
    27ea:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    27ee:	ldrb	r6, [r4, #12]
    27f0:	strb.w	r5, [sp, #19]
    27f4:	cmp	r6, #0
    27f6:	bne.w	2b82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    27fa:	movs	r2, #1
    27fc:	add.w	r1, sp, #19
    2800:	mov	r0, r4
    2802:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2806:	ldrb	r5, [r4, #12]
    2808:	str	r6, [sp, #100]	; 0x64
    280a:	cmp	r5, #0
    280c:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2810:	movs	r2, #4
    2812:	add	r1, sp, #100	; 0x64
    2814:	mov	r0, r4
    2816:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    281a:	ldrb	r3, [r4, #12]
    281c:	strb.w	r5, [sp, #18]
    2820:	cmp	r3, #0
    2822:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2826:	mov	r0, r4
    2828:	movs	r2, #1
    282a:	add.w	r1, sp, #18
    282e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2832:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2834:	ldrb	r3, [r0, #12]
    2836:	movw	r2, #56331	; 0xdc0b
    283a:	strh.w	r2, [sp, #62]	; 0x3e
    283e:	cmp	r3, #0
    2840:	bne.w	259a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde>
    2844:	movs	r2, #2
    2846:	add.w	r1, sp, #62	; 0x3e
    284a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    284e:	ldrb	r6, [r4, #12]
    2850:	movs	r3, #6
    2852:	strh.w	r3, [sp, #60]	; 0x3c
    2856:	cmp	r6, #0
    2858:	bne.w	2b6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    285c:	movs	r2, #2
    285e:	add	r1, sp, #60	; 0x3c
    2860:	mov	r0, r4
    2862:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2866:	ldrb	r5, [r4, #12]
    2868:	strb.w	r6, [sp, #22]
    286c:	cmp	r5, #0
    286e:	bne.w	2b6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2872:	movs	r2, #1
    2874:	add.w	r1, sp, #22
    2878:	mov	r0, r4
    287a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    287e:	ldrb	r6, [r4, #12]
    2880:	str	r5, [sp, #108]	; 0x6c
    2882:	cmp	r6, #0
    2884:	bne.w	2b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2888:	movs	r2, #4
    288a:	add	r1, sp, #108	; 0x6c
    288c:	mov	r0, r4
    288e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2892:	ldrb	r5, [r4, #12]
    2894:	str	r6, [sp, #104]	; 0x68
    2896:	cmp	r5, #0
    2898:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    289c:	movs	r2, #4
    289e:	add	r1, sp, #104	; 0x68
    28a0:	mov	r0, r4
    28a2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    28a6:	ldrb	r3, [r4, #12]
    28a8:	strb.w	r5, [sp, #21]
    28ac:	cmp	r3, #0
    28ae:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    28b2:	mov	r0, r4
    28b4:	movs	r2, #1
    28b6:	add.w	r1, sp, #21
    28ba:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    28be:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    28c0:	ldrb	r3, [r0, #12]
    28c2:	movw	r2, #56385	; 0xdc41
    28c6:	strh.w	r2, [sp, #66]	; 0x42
    28ca:	cmp	r3, #0
    28cc:	beq.w	2a66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5aa>
      write_length_ += len;
    28d0:	ldr	r3, [r0, #16]
    28d2:	adds	r3, #2
    28d4:	str	r3, [r0, #16]
    28d6:	adds	r3, #2
    28d8:	str	r3, [r4, #16]
    28da:	adds	r3, #1
    28dc:	str	r3, [r4, #16]
    28de:	adds	r3, #8
    28e0:	str	r3, [r4, #16]
    28e2:	b.n	267c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    28e4:	movs	r2, #2
    28e6:	add.w	r1, sp, #46	; 0x2e
    28ea:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    28ee:	ldrb	r6, [r4, #12]
    28f0:	movs	r5, #8
    28f2:	strh.w	r5, [sp, #44]	; 0x2c
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::write(const char *data, int len) {
    if (write_get_length_) {
    28f6:	cmp	r6, #0
    28f8:	bne.w	2b7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c2>
    28fc:	movs	r2, #2
    28fe:	add	r1, sp, #44	; 0x2c
    2900:	mov	r0, r4
    2902:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2906:	ldrb	r3, [r4, #12]
    2908:	strb.w	r6, [sp, #11]
    290c:	cmp	r3, #0
    290e:	bne.w	2b7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6be>
    2912:	movs	r2, #1
    2914:	add.w	r1, sp, #11
    2918:	mov	r0, r4
    291a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    291e:	ldrb	r6, [r4, #12]
    2920:	movs	r2, #0
    2922:	movs	r3, #0
    2924:	strd	r2, r3, [sp, #120]	; 0x78
    2928:	cmp	r6, #0
    292a:	bne.w	2b92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    292e:	mov	r2, r5
    2930:	add	r1, sp, #120	; 0x78
    2932:	mov	r0, r4
    2934:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2938:	ldrb	r5, [r4, #12]
    293a:	str	r6, [sp, #88]	; 0x58
    293c:	cmp	r5, #0
    293e:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2942:	movs	r2, #4
    2944:	add	r1, sp, #88	; 0x58
    2946:	mov	r0, r4
    2948:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    294c:	ldrb	r3, [r4, #12]
    294e:	strb.w	r5, [sp, #10]
    2952:	cmp	r3, #0
    2954:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2958:	mov	r0, r4
    295a:	movs	r2, #1
    295c:	add.w	r1, sp, #10
    2960:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2964:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2966:	movs	r2, #2
    2968:	add	r1, sp, #36	; 0x24
    296a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    296e:	ldrb	r7, [r4, #12]
    2970:	movs	r6, #4
    2972:	strh.w	r6, [sp, #34]	; 0x22
    2976:	cmp	r7, #0
    2978:	bne.w	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d2>
    297c:	movs	r2, #2
    297e:	add.w	r1, sp, #34	; 0x22
    2982:	mov	r0, r4
    2984:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2988:	ldrb	r5, [r4, #12]
    298a:	strb.w	r7, [sp, #7]
    298e:	cmp	r5, #0
    2990:	bne.w	2b8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ce>
    2994:	movs	r2, #1
    2996:	add.w	r1, sp, #7
    299a:	mov	r0, r4
    299c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    29a0:	ldrb	r7, [r4, #12]
    29a2:	strh.w	r5, [sp, #32]
    29a6:	cmp	r7, #0
    29a8:	bne.w	2b86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ca>
    29ac:	movs	r2, #2
    29ae:	add	r1, sp, #32
    29b0:	mov	r0, r4
    29b2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    29b6:	ldrb	r5, [r4, #12]
    29b8:	str	r7, [sp, #80]	; 0x50
    29ba:	cmp	r5, #0
    29bc:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    29c0:	mov	r2, r6
    29c2:	add	r1, sp, #80	; 0x50
    29c4:	mov	r0, r4
    29c6:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    29ca:	ldrb	r3, [r4, #12]
    29cc:	strb.w	r5, [sp, #6]
    29d0:	cmp	r3, #0
    29d2:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    29d6:	mov	r0, r4
    29d8:	movs	r2, #1
    29da:	add.w	r1, sp, #6
    29de:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    29e2:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    29e4:	movs	r2, #2
    29e6:	add.w	r1, sp, #70	; 0x46
    29ea:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    29ee:	ldrb	r6, [r4, #12]
    29f0:	movw	r3, #65535	; 0xffff
    29f4:	strh.w	r3, [sp, #68]	; 0x44
    29f8:	cmp	r6, #0
    29fa:	bne.w	2b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ba>
    29fe:	movs	r2, #2
    2a00:	add	r1, sp, #68	; 0x44
    2a02:	mov	r0, r4
    2a04:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a08:	ldrb	r5, [r4, #12]
    2a0a:	strb.w	r6, [sp, #27]
    2a0e:	cmp	r5, #0
    2a10:	bne.w	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
    2a14:	movs	r2, #1
    2a16:	add.w	r1, sp, #27
    2a1a:	mov	r0, r4
    2a1c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a20:	ldrb	r6, [r4, #12]
    2a22:	strb.w	r5, [sp, #26]
    2a26:	cmp	r6, #0
    2a28:	bne.w	2b82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6c6>
    2a2c:	movs	r2, #1
    2a2e:	add.w	r1, sp, #26
    2a32:	mov	r0, r4
    2a34:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a38:	ldrb	r5, [r4, #12]
    2a3a:	str	r6, [sp, #116]	; 0x74
    2a3c:	cmp	r5, #0
    2a3e:	bne.w	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2a42:	movs	r2, #4
    2a44:	add	r1, sp, #116	; 0x74
    2a46:	mov	r0, r4
    2a48:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a4c:	ldrb	r3, [r4, #12]
    2a4e:	strb.w	r5, [sp, #25]
    2a52:	cmp	r3, #0
    2a54:	bne.w	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2a58:	mov	r0, r4
    2a5a:	movs	r2, #1
    2a5c:	add.w	r1, sp, #25
    2a60:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a64:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2a66:	movs	r2, #2
    2a68:	add.w	r1, sp, #66	; 0x42
    2a6c:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a70:	ldrb	r5, [r4, #12]
    2a72:	movs	r3, #10
    2a74:	strh.w	r3, [sp, #64]	; 0x40
    2a78:	cmp	r5, #0
    2a7a:	bne.w	2b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e2>
    2a7e:	movs	r2, #2
    2a80:	add	r1, sp, #64	; 0x40
    2a82:	mov	r0, r4
    2a84:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a88:	ldrb	r3, [r4, #12]
    2a8a:	strb.w	r5, [sp, #24]
    2a8e:	cmp	r3, #0
    2a90:	bne.w	2b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6de>
    2a94:	movs	r2, #1
    2a96:	add	r1, sp, #24
    2a98:	mov	r0, r4
    2a9a:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2a9e:	ldrb	r3, [r4, #12]
    2aa0:	mov.w	r8, #0
    2aa4:	mov.w	r9, #0
    2aa8:	strd	r8, r9, [sp, #136]	; 0x88
    2aac:	cmp	r3, #0
    2aae:	bne.n	2b96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6da>
    2ab0:	movs	r2, #8
    2ab2:	add	r1, sp, #136	; 0x88
    2ab4:	mov	r0, r4
    2ab6:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2aba:	ldrb	r6, [r4, #12]
    2abc:	strd	r8, r9, [sp, #128]	; 0x80
    2ac0:	cmp	r6, #0
    2ac2:	bne.n	2b92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6d6>
    2ac4:	movs	r2, #8
    2ac6:	add	r1, sp, #128	; 0x80
    2ac8:	mov	r0, r4
    2aca:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2ace:	ldrb	r5, [r4, #12]
    2ad0:	str	r6, [sp, #112]	; 0x70
    2ad2:	cmp	r5, #0
    2ad4:	bne.n	2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2ad6:	movs	r2, #4
    2ad8:	add	r1, sp, #112	; 0x70
    2ada:	mov	r0, r4
    2adc:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2ae0:	ldrb	r3, [r4, #12]
    2ae2:	strb.w	r5, [sp, #23]
    2ae6:	cmp	r3, #0
    2ae8:	bne.n	2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2aea:	mov	r0, r4
    2aec:	movs	r2, #1
    2aee:	add.w	r1, sp, #23
    2af2:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2af6:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2af8:	movs	r2, #2
    2afa:	add.w	r1, sp, #30
    2afe:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b02:	ldrb	r6, [r4, #12]
    2b04:	movs	r3, #6
    2b06:	strh.w	r3, [sp, #28]
    2b0a:	cbnz	r6, 2b6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b2>
    2b0c:	movs	r2, #2
    2b0e:	add	r1, sp, #28
    2b10:	mov	r0, r4
    2b12:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b16:	ldrb	r5, [r4, #12]
    2b18:	strb.w	r6, [sp, #5]
    2b1c:	cbnz	r5, 2b6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6ae>
    2b1e:	movs	r2, #1
    2b20:	add.w	r1, sp, #5
    2b24:	mov	r0, r4
    2b26:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b2a:	ldrb	r6, [r4, #12]
    2b2c:	str	r5, [sp, #76]	; 0x4c
    2b2e:	cbnz	r6, 2b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6aa>
    2b30:	movs	r2, #4
    2b32:	add	r1, sp, #76	; 0x4c
    2b34:	mov	r0, r4
    2b36:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b3a:	ldrb	r5, [r4, #12]
    2b3c:	str	r6, [sp, #72]	; 0x48
    2b3e:	cbnz	r5, 2b62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a6>
    2b40:	movs	r2, #4
    2b42:	add	r1, sp, #72	; 0x48
    2b44:	mov	r0, r4
    2b46:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b4a:	ldrb	r3, [r4, #12]
    2b4c:	strb.w	r5, [sp, #4]
    2b50:	cbnz	r3, 2b5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6a2>
    2b52:	mov	r0, r4
    2b54:	movs	r2, #1
    2b56:	add	r1, sp, #4
    2b58:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2b5c:	b.n	2584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc8>
    2b5e:	ldr	r3, [r4, #16]
    2b60:	b.n	2580 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc4>
    2b62:	ldr	r3, [r4, #16]
    2b64:	b.n	257c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc0>
    2b66:	ldr	r3, [r4, #16]
    2b68:	b.n	25a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xec>
    2b6a:	ldr	r3, [r4, #16]
    2b6c:	b.n	25a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8>
    2b6e:	ldr	r3, [r4, #16]
    2b70:	b.n	25a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4>
    2b72:	ldr	r3, [r4, #16]
    2b74:	b.n	2574 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2b76:	ldr	r3, [r4, #16]
    2b78:	b.n	2570 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
    2b7a:	ldr	r3, [r4, #16]
    2b7c:	b.n	2678 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc>
    2b7e:	ldr	r3, [r4, #16]
    2b80:	b.n	2674 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8>
    2b82:	ldr	r3, [r4, #16]
    2b84:	b.n	2578 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc>
    2b86:	ldr	r3, [r4, #16]
    2b88:	b.n	25cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110>
    2b8a:	ldr	r3, [r4, #16]
    2b8c:	b.n	25c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10c>
    2b8e:	ldr	r3, [r4, #16]
    2b90:	b.n	25c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108>
    2b92:	ldr	r3, [r4, #16]
    2b94:	b.n	267c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c0>
    2b96:	ldr	r3, [r4, #16]
    2b98:	b.n	28de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x422>
    2b9a:	ldr	r3, [r4, #16]
    2b9c:	b.n	28da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41e>
    2b9e:	ldr	r3, [r4, #16]
    2ba0:	b.n	28d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2ba2:	nop

00002ba4 <MTPD::receive_buffer()>:
      data_buffer_ = usb_malloc();
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    2ba4:	push	{r4, lr}
    2ba6:	mov	r4, r0
    2ba8:	ldr	r3, [r4, #8]
    while (!data_buffer_) {
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2baa:	movs	r0, #5
      if (!data_buffer_) mtp_yield();
    }
  }

  void MTPD::receive_buffer() {
    while (!data_buffer_) {
    2bac:	cbnz	r3, 2bb6 <MTPD::receive_buffer()+0x12>
      data_buffer_ = usb_rx(MTP_RX_ENDPOINT);
    2bae:	bl	9e04 <usb_rx>
    2bb2:	str	r0, [r4, #8]
      if (!data_buffer_) mtp_yield();
    2bb4:	cbz	r0, 2bb8 <MTPD::receive_buffer()+0x14>
    2bb6:	pop	{r4, pc}
    2bb8:	bl	f2c <mtp_yield()>
    2bbc:	b.n	2ba8 <MTPD::receive_buffer()+0x4>
    2bbe:	nop

00002bc0 <MTPD::GetObject(unsigned long)>:
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2bc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2bc4:	mov	r6, r0
    uint32_t size = storage_->GetSize(object_id);
    2bc6:	ldr	r0, [r0, #0]
    2bc8:	ldr	r3, [r0, #0]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2bca:	sub	sp, #8
    uint32_t size = storage_->GetSize(object_id);
    2bcc:	ldr	r3, [r3, #32]
        }
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    2bce:	mov	r8, r1
    uint32_t size = storage_->GetSize(object_id);
    2bd0:	blx	r3
    if (write_get_length_) {
    2bd2:	ldrb	r5, [r6, #12]
      }
    }
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    2bd4:	mov	r7, r0
    if (write_get_length_) {
    2bd6:	cbnz	r5, 2c30 <MTPD::GetObject(unsigned long)+0x70>
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2bd8:	cbz	r0, 2c2a <MTPD::GetObject(unsigned long)+0x6a>
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2bda:	mov	r9, r5
    2bdc:	b.n	2be2 <MTPD::GetObject(unsigned long)+0x22>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2bde:	cmp	r7, r5
    2be0:	bls.n	2c2a <MTPD::GetObject(unsigned long)+0x6a>
        get_buffer();
    2be2:	mov	r0, r6
    2be4:	bl	19d8 <MTPD::get_buffer()>
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    2be8:	ldr	r3, [r6, #8]
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
    2bea:	ldr	r0, [r6, #0]
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
        get_buffer();
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
    2bec:	ldrh.w	r2, [r3], #8
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
    2bf0:	ldr	r1, [r0, #0]
    2bf2:	subs	r4, r7, r5
    2bf4:	rsb	lr, r2, #64	; 0x40
    2bf8:	cmp	r4, lr
    2bfa:	it	cs
    2bfc:	movcs	r4, lr
    2bfe:	str	r4, [sp, #0]
    2c00:	add	r3, r2
    2c02:	ldr.w	sl, [r1, #40]	; 0x28
    2c06:	mov	r2, r5
    2c08:	mov	r1, r8
    2c0a:	blx	sl
        pos += to_copy;
        data_buffer_->len += to_copy;
    2c0c:	ldr	r1, [r6, #8]
    2c0e:	ldrh	r3, [r1, #0]
    2c10:	add	r3, r4
    2c12:	uxth	r3, r3
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2c14:	cmp	r3, #64	; 0x40
        uint32_t avail = sizeof(data_buffer_->buf) - data_buffer_->len;
        uint32_t to_copy = min(size - pos, avail);
        // Read directly from storage into usb buffer.
        storage_->read(object_id, pos,
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
    2c16:	add	r5, r4
        data_buffer_->len += to_copy;
    2c18:	strh	r3, [r1, #0]
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
    2c1a:	bne.n	2bde <MTPD::GetObject(unsigned long)+0x1e>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
    2c1c:	movs	r0, #4
    2c1e:	bl	9f74 <usb_tx>
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2c22:	cmp	r7, r5
                    (char*)(data_buffer_->buf + data_buffer_->len), to_copy);
        pos += to_copy;
        data_buffer_->len += to_copy;
        if (data_buffer_->len == sizeof(data_buffer_->buf)) {
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
    2c24:	str.w	r9, [r6, #8]
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    } else {
      uint32_t pos = 0;
      while (pos < size) {
    2c28:	bhi.n	2be2 <MTPD::GetObject(unsigned long)+0x22>
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2c2a:	add	sp, #8
    2c2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  void MTPD::GetObject(uint32_t object_id) 
  {
    uint32_t size = storage_->GetSize(object_id);
    if (write_get_length_) {
      write_length_ += size;
    2c30:	ldr	r3, [r6, #16]
    2c32:	add	r7, r3
    2c34:	str	r7, [r6, #16]
          usb_tx(MTP_TX_ENDPOINT, data_buffer_);
          data_buffer_ = NULL;
        }
      }
    }
  }
    2c36:	add	sp, #8
    2c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00002c3c <MTPD::read(char*, unsigned long)>:
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2c3c:	cbz	r2, 2ca8 <MTPD::read(char*, unsigned long)+0x6c>
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    2c3e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c42:	mov	r6, r0
    2c44:	mov	r5, r1
    while (size) {
    2c46:	mov	r8, r2
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2c48:	movs	r7, #0


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
      receive_buffer();
    2c4a:	mov	r0, r6
    2c4c:	bl	2ba4 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2c50:	ldr	r3, [r6, #8]
    2c52:	ldrh.w	lr, [r3, #2]
    2c56:	ldrh.w	ip, [r3]
    2c5a:	rsb	r4, lr, ip
    2c5e:	cmp	r4, r8
    2c60:	it	cs
    2c62:	movcs	r4, r8
      to_copy = min(to_copy, size);
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2c64:	add.w	r1, r3, #8
    2c68:	add	r1, lr
    2c6a:	mov	r0, r5
    2c6c:	mov	r2, r4
        data += to_copy;
      }
      size -= to_copy;
    2c6e:	rsb	r8, r4, r8
  {
    while (size) {
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, size);
      if (data) {
    2c72:	cbz	r5, 2c84 <MTPD::read(char*, unsigned long)+0x48>
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
    2c74:	bl	9584 <memcpy>
    2c78:	ldr	r3, [r6, #8]
    2c7a:	ldrh.w	lr, [r3, #2]
    2c7e:	ldrh.w	ip, [r3]
        data += to_copy;
    2c82:	add	r5, r4
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2c84:	add	r4, lr
    2c86:	uxth	r4, r4
      if (data_buffer_->index == data_buffer_->len) {
    2c88:	cmp	ip, r4
      if (data) {
        memcpy(data, data_buffer_->buf + data_buffer_->index, to_copy);
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
    2c8a:	strh	r4, [r3, #2]
      if (data_buffer_->index == data_buffer_->len) {
    2c8c:	beq.n	2c98 <MTPD::read(char*, unsigned long)+0x5c>
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2c8e:	cmp.w	r8, #0
    2c92:	bne.n	2c4a <MTPD::read(char*, unsigned long)+0xe>
    2c94:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        data += to_copy;
      }
      size -= to_copy;
      data_buffer_->index += to_copy;
      if (data_buffer_->index == data_buffer_->len) {
        usb_free(data_buffer_);
    2c98:	mov	r0, r3
    2c9a:	bl	9db8 <usb_free>
        data_buffer_ = NULL;
    2c9e:	str	r7, [r6, #8]
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


  void MTPD::read(char* data, uint32_t size) 
  {
    while (size) {
    2ca0:	cmp.w	r8, #0
    2ca4:	bne.n	2c4a <MTPD::read(char*, unsigned long)+0xe>
    2ca6:	b.n	2c94 <MTPD::read(char*, unsigned long)+0x58>
    2ca8:	bx	lr
    2caa:	nop

00002cac <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2cac:	push	{r4, r5, r6, lr}
    2cae:	sub	sp, #8
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2cb0:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2cb2:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2cb4:	add.w	r1, sp, #6
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    2cb8:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2cba:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2cbe:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    2cc2:	cbz	r4, 2ce4 <MTPD::readstring(char*)+0x38>
    2cc4:	adds	r5, r4, r2
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2cc6:	cbz	r2, 2ce0 <MTPD::readstring(char*)+0x34>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2cc8:	movs	r2, #2
    2cca:	add.w	r1, sp, #6
    2cce:	mov	r0, r6
    2cd0:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2cd4:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    2cd8:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    2cdc:	cmp	r5, r4
    2cde:	bne.n	2cc8 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    2ce0:	add	sp, #8
    2ce2:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    2ce4:	lsls	r2, r2, #1
    2ce6:	mov	r1, r4
    2ce8:	mov	r0, r6
    2cea:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2cee:	b.n	2ce0 <MTPD::readstring(char*)+0x34>

00002cf0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>:
      }
    }
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    2cf0:	push	{r4, r5, lr}
    2cf2:	sub	sp, #132	; 0x84
    2cf4:	mov	r4, r0
    2cf6:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2cf8:	movs	r2, #12
    2cfa:	mov	r1, sp
    2cfc:	bl	2c3c <MTPD::read(char*, unsigned long)>
      receive_buffer();
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    2d00:	mov	r1, sp
    2d02:	mov	r0, r4
    2d04:	bl	2cac <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    2d08:	ldr	r0, [r4, #0]
    2d0a:	ldr	r3, [r0, #0]
    2d0c:	mov	r2, sp
    2d0e:	mov	r1, r5
    2d10:	ldr	r3, [r3, #64]	; 0x40
    2d12:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    2d14:	movw	r0, #8193	; 0x2001
    2d18:	add	sp, #132	; 0x84
    2d1a:	pop	{r4, r5, pc}

00002d1c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d20:	sub	sp, #268	; 0x10c


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d22:	add	r1, sp, #8
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2d24:	mov	r9, r2


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d26:	movs	r2, #12
        data_buffer_ = NULL;
      }
    }
  }

  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    2d28:	mov	r5, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2d2a:	bl	2c3c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2d2e:	ldrh.w	r3, [sp, #12]
    2d32:	cmp	r3, #2
    2d34:	it	eq
    2d36:	ldreq	r4, [sp, #8]
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d38:	mov.w	r2, #4
    2d3c:	add	r1, sp, #8
    2d3e:	mov	r0, r5
    2d40:	ite	eq
    2d42:	subeq	r4, #65	; 0x41
  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
    2d44:	mvnne.w	r4, #52	; 0x34
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d48:	bl	2c3c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d4c:	movs	r2, #2
    2d4e:	add	r1, sp, #8
    2d50:	mov	r0, r5
    2d52:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2d56:	ldrh.w	r8, [sp, #8]
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d5a:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d5e:	movs	r2, #2
    2d60:	add	r1, sp, #8
    2d62:	mov	r0, r5
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2d64:	rsb	r8, r3, r8
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d68:	bl	2c3c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d6c:	movs	r2, #4
    2d6e:	add	r1, sp, #8
    2d70:	mov	r0, r5
    2d72:	bl	2c3c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d76:	movs	r2, #2
    2d78:	add	r1, sp, #8
    2d7a:	mov	r0, r5
    2d7c:	bl	2c3c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2d80:	movs	r2, #4
    2d82:	add	r1, sp, #8
    2d84:	mov	r0, r5
    2d86:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2d8a:	movs	r2, #4
    2d8c:	add	r1, sp, #8
    2d8e:	mov	r0, r5
    2d90:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2d94:	movs	r2, #4
    2d96:	add	r1, sp, #8
    2d98:	mov	r0, r5
    2d9a:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2d9e:	movs	r2, #4
    2da0:	add	r1, sp, #8
    2da2:	mov	r0, r5
    2da4:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2da8:	movs	r2, #4
    2daa:	add	r1, sp, #8
    2dac:	mov	r0, r5
    2dae:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2db2:	movs	r2, #4
    2db4:	add	r1, sp, #8
    2db6:	mov	r0, r5
    2db8:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2dbc:	movs	r2, #4
    2dbe:	add	r1, sp, #8
    2dc0:	mov	r0, r5
    2dc2:	bl	2c3c <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2dc6:	movs	r2, #2
    2dc8:	add	r1, sp, #8
    2dca:	mov	r0, r5
    2dcc:	bl	2c3c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2dd0:	movs	r2, #4
    2dd2:	add	r1, sp, #8
    2dd4:	mov	r0, r5
    2dd6:	bl	2c3c <MTPD::read(char*, unsigned long)>
    2dda:	movs	r2, #4
    2ddc:	add	r1, sp, #8
    2dde:	mov	r0, r5
    2de0:	bl	2c3c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // parent
    read16(); len-=2; // association type
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    2de4:	add	r1, sp, #8
    2de6:	mov	r0, r5
    2de8:	bl	2cac <MTPD::readstring(char*)>
    2dec:	add	r0, sp, #8
    2dee:	bl	c940 <strlen>
    2df2:	adds	r0, #1
    2df4:	sub.w	r4, r4, r0, lsl #1
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2df8:	clz	r8, r8
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2dfc:	cmp	r4, #3
  uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    uint32_t len = ReadMTPHeader();
    char filename[256];

    read32(); len-=4; // storage
    bool dir = read16() == 0x3001; len-=2; // format
    2dfe:	mov.w	r8, r8, lsr #5
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2e02:	bls.n	2e1c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x100>
    2e04:	mov	r6, r4
    2e06:	add	r7, sp, #4
    2e08:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    2e0a:	movs	r2, #4
    2e0c:	mov	r1, r7
    2e0e:	mov	r0, r5
    2e10:	bl	2c3c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // association description
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    2e14:	cmp	r6, #3
    2e16:	bhi.n	2e08 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xec>
    2e18:	and.w	r4, r4, #3
    2e1c:	add	r7, sp, #4
    while(len) {read8(); len--;}
    2e1e:	cbz	r4, 2e2e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x112>
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    2e20:	movs	r2, #1
    2e22:	mov	r1, r7
    2e24:	mov	r0, r5
    2e26:	bl	2c3c <MTPD::read(char*, unsigned long)>
    read32(); len-=4; // sequence number

    readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    // ignore rest of ObjectInfo
    while(len>=4) { read32(); len-=4;}
    while(len) {read8(); len--;}
    2e2a:	subs	r4, #1
    2e2c:	bne.n	2e20 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x104>
    
    return storage_->Create(parent, dir, filename);
    2e2e:	ldr	r0, [r5, #0]
    2e30:	ldr	r4, [r0, #0]
    2e32:	add	r3, sp, #8
    2e34:	mov	r2, r8
    2e36:	mov	r1, r9
    2e38:	ldr	r4, [r4, #36]	; 0x24
    2e3a:	blx	r4
  }
    2e3c:	add	sp, #268	; 0x10c
    2e3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e42:	nop

00002e44 <MTPD::SendObject()>:

  void MTPD::SendObject() {
    2e44:	push	{r4, r5, r6, r7, lr}
    2e46:	sub	sp, #20


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2e48:	movs	r2, #12
    2e4a:	add	r1, sp, #4
    while(len) {read8(); len--;}
    
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    2e4c:	mov	r7, r0


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    2e4e:	bl	2c3c <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    2e52:	ldrh.w	r3, [sp, #8]
    2e56:	cmp	r3, #2
    2e58:	beq.n	2e66 <MTPD::SendObject()+0x22>
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
      }
    }
    storage_->close();
    2e5a:	ldr	r0, [r7, #0]
    2e5c:	ldr	r3, [r0, #0]
    2e5e:	ldr	r3, [r3, #48]	; 0x30
    2e60:	blx	r3
  }
    2e62:	add	sp, #20
    2e64:	pop	{r4, r5, r6, r7, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    2e66:	ldr	r5, [sp, #4]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2e68:	subs	r5, #12
    2e6a:	beq.n	2e5a <MTPD::SendObject()+0x16>
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
        data_buffer_ = NULL;
    2e6c:	movs	r6, #0

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
    2e6e:	mov	r0, r7
    2e70:	bl	2ba4 <MTPD::receive_buffer()>
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2e74:	ldr	r1, [r7, #8]
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2e76:	ldr	r0, [r7, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2e78:	ldrh	r2, [r1, #2]
    2e7a:	ldrh.w	r4, [r1], #8
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2e7e:	ldr	r3, [r0, #0]
  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
    2e80:	subs	r4, r4, r2
    2e82:	cmp	r4, r5
    2e84:	it	cs
    2e86:	movcs	r4, r5
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
    2e88:	ldr	r3, [r3, #44]	; 0x2c
    2e8a:	add	r1, r2
    2e8c:	mov	r2, r4
    2e8e:	blx	r3
      data_buffer_->index += to_copy;
    2e90:	ldr	r0, [r7, #8]
    2e92:	ldrh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2e94:	ldrh	r2, [r0, #0]
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2e96:	add	r3, r4
    2e98:	uxth	r3, r3
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2e9a:	cmp	r2, r3
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
    2e9c:	sub.w	r5, r5, r4
    { 
      receive_buffer();
      uint32_t to_copy = data_buffer_->len - data_buffer_->index;
      to_copy = min(to_copy, len);
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
    2ea0:	strh	r3, [r0, #2]
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
    2ea2:	beq.n	2eaa <MTPD::SendObject()+0x66>
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2ea4:	cmp	r5, #0
    2ea6:	bne.n	2e6e <MTPD::SendObject()+0x2a>
    2ea8:	b.n	2e5a <MTPD::SendObject()+0x16>
      storage_->write((char*)(data_buffer_->buf + data_buffer_->index), to_copy);
      data_buffer_->index += to_copy;
      len -= to_copy;
      if (data_buffer_->index == data_buffer_->len) 
      {
        usb_free(data_buffer_);
    2eaa:	bl	9db8 <usb_free>
        data_buffer_ = NULL;
    2eae:	str	r6, [r7, #8]
    return storage_->Create(parent, dir, filename);
  }

  void MTPD::SendObject() {
    uint32_t len = ReadMTPHeader();
    while (len) 
    2eb0:	cmp	r5, #0
    2eb2:	bne.n	2e6e <MTPD::SendObject()+0x2a>
    2eb4:	b.n	2e5a <MTPD::SendObject()+0x16>
    2eb6:	nop

00002eb8 <MTPD::loop()>:
      else
        return 0x2005;
    }

  void MTPD::loop(void) 
  {
    2eb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ebc:	mov	r6, r0
    2ebe:	sub	sp, #44	; 0x2c
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
    2ec0:	movs	r0, #5
    2ec2:	bl	9e04 <usb_rx>
    2ec6:	cmp	r0, #0
    2ec8:	beq.n	2f2e <MTPD::loop()+0x76>
      printContainer();
    2eca:	ldr	r1, [r0, #28]
    2ecc:	ldr	r3, [r0, #8]
    2ece:	ldrh	r2, [r0, #14]
    2ed0:	str	r1, [sp, #16]
    2ed2:	ldr	r1, [r0, #24]
    2ed4:	str	r1, [sp, #12]
    2ed6:	ldr	r1, [r0, #20]
    2ed8:	str	r1, [sp, #8]
    2eda:	ldr	r1, [r0, #16]
    2edc:	str	r1, [sp, #4]
    2ede:	ldrh	r1, [r0, #12]
    2ee0:	str	r1, [sp, #0]
    2ee2:	mov	r4, r0
    2ee4:	ldr	r1, [pc, #716]	; (31b4 <MTPD::loop()+0x2fc>)
    2ee6:	ldr	r0, [pc, #720]	; (31b8 <MTPD::loop()+0x300>)
    2ee8:	bl	acd0 <Print::printf(char const*, ...)>
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
    2eec:	ldrh	r3, [r4, #0]
    2eee:	cmp	r3, #11
    2ef0:	bls.n	2f40 <MTPD::loop()+0x88>
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
    2ef2:	ldrh	r2, [r4, #12]
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2ef4:	movs	r5, #12
        
        if (CONTAINER->type == 1) { // command
    2ef6:	cmp	r2, #1
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
    2ef8:	strh	r5, [r4, #0]
        
        if (CONTAINER->type == 1) { // command
    2efa:	beq.n	2f48 <MTPD::loop()+0x90>
    2efc:	mov.w	r2, #8192	; 0x2000
    2f00:	ldr	r3, [r4, #8]
    2f02:	ldr	r5, [r4, #24]
    2f04:	ldr	r0, [r4, #28]
    2f06:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    2f08:	movs	r7, #0
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
        CONTAINER->type = 3;
    2f0a:	movs	r1, #3
    2f0c:	strh	r1, [r4, #12]
        CONTAINER->op = return_code;
    2f0e:	strh	r6, [r4, #14]
        CONTAINER->params[0] = p1;
    2f10:	str	r7, [r4, #20]
        printContainer();
    2f12:	str	r0, [sp, #16]
    2f14:	str	r5, [sp, #12]
    2f16:	str	r7, [sp, #8]
    2f18:	ldr	r0, [r4, #16]
    2f1a:	str	r0, [sp, #4]
    2f1c:	str	r1, [sp, #0]
    2f1e:	ldr	r0, [pc, #664]	; (31b8 <MTPD::loop()+0x300>)
    2f20:	ldr	r1, [pc, #656]	; (31b4 <MTPD::loop()+0x2fc>)
    2f22:	bl	acd0 <Print::printf(char const*, ...)>

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
    2f26:	mov	r1, r4
    2f28:	movs	r0, #4
    2f2a:	bl	9f74 <usb_tx>
      } else {
          usb_free(receive_buffer);
      }
    }
    // Maybe put event handling inside mtp_yield()?
    if ((receive_buffer = usb_rx(MTP_EVENT_ENDPOINT))) {
    2f2e:	movs	r0, #6
    2f30:	bl	9e04 <usb_rx>
    2f34:	cbz	r0, 2f3a <MTPD::loop()+0x82>
      usb_free(receive_buffer);
    2f36:	bl	9db8 <usb_free>
    }
  }
    2f3a:	add	sp, #44	; 0x2c
    2f3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        printContainer();

        usb_tx(MTP_TX_ENDPOINT, receive_buffer);
        receive_buffer = 0;
      } else {
          usb_free(receive_buffer);
    2f40:	mov	r0, r4
    2f42:	bl	9db8 <usb_free>
    2f46:	b.n	2f2e <MTPD::loop()+0x76>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2f48:	ldrh	r1, [r4, #14]
    2f4a:	movw	r3, #4108	; 0x100c
    2f4e:	cmp	r1, r3
    2f50:	beq.w	3206 <MTPD::loop()+0x34e>
    2f54:	bls.n	2fde <MTPD::loop()+0x126>
    2f56:	movw	r3, #4121	; 0x1019
    2f5a:	cmp	r1, r3
    2f5c:	beq.w	322a <MTPD::loop()+0x372>
    2f60:	bls.n	3020 <MTPD::loop()+0x168>
    2f62:	movw	r3, #38914	; 0x9802
    2f66:	cmp	r1, r3
    2f68:	beq.w	32ec <MTPD::loop()+0x434>
    2f6c:	bhi.w	3146 <MTPD::loop()+0x28e>
    2f70:	movw	r3, #4122	; 0x101a
    2f74:	cmp	r1, r3
    2f76:	beq.w	30f4 <MTPD::loop()+0x23c>
    2f7a:	movw	r3, #38913	; 0x9801
    2f7e:	cmp	r1, r3
    2f80:	bne.w	30f4 <MTPD::loop()+0x23c>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
            p1=CONTAINER->params[0];
    2f84:	ldr	r7, [r4, #20]

              TRANSMIT(getObjectPropsSupported(p1));
    2f86:	movs	r3, #1
    2f88:	movs	r5, #0
    2f8a:	mov	r1, r7
    2f8c:	strb	r3, [r6, #12]
    2f8e:	mov	r0, r6
    2f90:	str	r5, [r6, #16]
    2f92:	bl	2188 <MTPD::getObjectPropsSupported(unsigned long)>
    2f96:	ldr	r3, [r6, #16]
    2f98:	strb	r5, [r6, #12]
    2f9a:	adds	r3, #12
    2f9c:	movs	r2, #2
    2f9e:	strh.w	r2, [sp, #32]
    2fa2:	str	r3, [sp, #28]
    2fa4:	ldrh	r3, [r4, #14]
    2fa6:	strh.w	r3, [sp, #34]	; 0x22
    2faa:	ldr	r3, [r4, #16]
    2fac:	str	r3, [sp, #36]	; 0x24
    2fae:	add	r1, sp, #28
    2fb0:	mov	r0, r6
    2fb2:	movs	r2, #12
    2fb4:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    2fb8:	mov	r1, r7
    2fba:	mov	r0, r6
    2fbc:	bl	2188 <MTPD::getObjectPropsSupported(unsigned long)>

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];

            TRANSMIT(getObjectPropValue(p1,p2));
    2fc0:	mov	r0, r6
    2fc2:	bl	19d8 <MTPD::get_buffer()>
    2fc6:	ldr	r1, [r6, #8]
    2fc8:	movs	r0, #4
    2fca:	bl	9f74 <usb_tx>
    2fce:	str	r5, [r6, #8]
              break;
    2fd0:	movw	r2, #8193	; 0x2001
    2fd4:	ldr	r3, [r4, #8]
    2fd6:	ldr	r5, [r4, #24]
    2fd8:	ldr	r0, [r4, #28]
    2fda:	mov	r6, r2
    2fdc:	b.n	2f0a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    2fde:	movw	r3, #4101	; 0x1005
    2fe2:	cmp	r1, r3
    2fe4:	beq.w	324a <MTPD::loop()+0x392>
    2fe8:	bls.n	3092 <MTPD::loop()+0x1da>
    2fea:	movw	r3, #4104	; 0x1008
    2fee:	cmp	r1, r3
    2ff0:	beq.w	317a <MTPD::loop()+0x2c2>
    2ff4:	bhi.w	310e <MTPD::loop()+0x256>
    2ff8:	movw	r3, #4102	; 0x1006
    2ffc:	cmp	r1, r3
    2ffe:	beq.w	32ba <MTPD::loop()+0x402>
    3002:	movw	r3, #4103	; 0x1007
    3006:	cmp	r1, r3
    3008:	bne.n	30f4 <MTPD::loop()+0x23c>
              } else {
                p1 = GetNumObjects(CONTAINER->params[0], CONTAINER->params[2]);
              }
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
    300a:	ldr	r5, [r4, #24]
    300c:	cmp	r5, #0
    300e:	beq.w	33d6 <MTPD::loop()+0x51e>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3012:	movw	r2, #8212	; 0x2014
    3016:	mov	r6, r2
    3018:	ldr	r3, [r4, #8]
    301a:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    301c:	movs	r7, #0
    301e:	b.n	2f0a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3020:	movw	r3, #4112	; 0x1010
    3024:	cmp	r1, r3
    3026:	beq.n	30f4 <MTPD::loop()+0x23c>
    3028:	bls.n	30fa <MTPD::loop()+0x242>
    302a:	movw	r3, #4116	; 0x1014
    302e:	cmp	r1, r3
    3030:	beq.w	31bc <MTPD::loop()+0x304>
    3034:	movw	r3, #4117	; 0x1015
    3038:	cmp	r1, r3
    303a:	bne.n	30f4 <MTPD::loop()+0x23c>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    303c:	movs	r2, #0
    303e:	movs	r3, #1
    3040:	strb	r3, [r6, #12]
    3042:	str	r2, [r6, #16]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3044:	ldr	r2, [r4, #20]
    3046:	movw	r3, #54274	; 0xd402
    304a:	cmp	r2, r3
    304c:	beq.w	343c <MTPD::loop()+0x584>
    3050:	movs	r3, #12
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    3052:	movs	r1, #0
    3054:	movs	r2, #2
    3056:	strb	r1, [r6, #12]
    3058:	strh.w	r2, [sp, #32]
    305c:	str	r3, [sp, #28]
    305e:	ldrh	r3, [r4, #14]
    3060:	strh.w	r3, [sp, #34]	; 0x22
    3064:	ldr	r3, [r4, #16]
    3066:	str	r3, [sp, #36]	; 0x24
    3068:	movs	r2, #12
    306a:	add	r1, sp, #28
    306c:	mov	r0, r6
    306e:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    3072:	ldr	r2, [r4, #20]
    3074:	movw	r3, #54274	; 0xd402
    3078:	cmp	r2, r3
    307a:	beq.w	3432 <MTPD::loop()+0x57a>
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
              break;
            case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(CONTAINER->params[0]));
    307e:	mov	r0, r6
    3080:	bl	19d8 <MTPD::get_buffer()>
    3084:	movs	r7, #0
    3086:	ldr	r1, [r6, #8]
    3088:	movs	r0, #4
    308a:	bl	9f74 <usb_tx>
    308e:	str	r7, [r6, #8]
    3090:	b.n	2fd0 <MTPD::loop()+0x118>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3092:	movw	r3, #4099	; 0x1003
    3096:	cmp	r1, r3
    3098:	bhi.w	3284 <MTPD::loop()+0x3cc>
    309c:	movw	r3, #4098	; 0x1002
    30a0:	cmp	r1, r3
    30a2:	bcs.n	3108 <MTPD::loop()+0x250>
    30a4:	movw	r3, #4097	; 0x1001
    30a8:	cmp	r1, r3
    30aa:	bne.n	30f4 <MTPD::loop()+0x23c>
            case 0x1001: // GetDescription
              TRANSMIT(WriteDescriptor());
    30ac:	movs	r3, #1
    30ae:	movs	r7, #0
    30b0:	strb	r3, [r6, #12]
    30b2:	mov	r0, r6
    30b4:	str	r7, [r6, #16]
    30b6:	bl	1bb8 <MTPD::WriteDescriptor()>
    30ba:	ldr	r3, [r6, #16]
    30bc:	strb	r7, [r6, #12]
    30be:	adds	r3, #12
    30c0:	movs	r2, #2
    30c2:	strh.w	r2, [sp, #32]
    30c6:	str	r3, [sp, #28]
    30c8:	ldrh	r3, [r4, #14]
    30ca:	strh.w	r3, [sp, #34]	; 0x22
    30ce:	ldr	r3, [r4, #16]
    30d0:	str	r3, [sp, #36]	; 0x24
    30d2:	mov	r0, r6
    30d4:	movs	r2, #12
    30d6:	add	r1, sp, #28
    30d8:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    30dc:	mov	r0, r6
    30de:	bl	1bb8 <MTPD::WriteDescriptor()>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    30e2:	mov	r0, r6
    30e4:	bl	19d8 <MTPD::get_buffer()>
    30e8:	ldr	r1, [r6, #8]
    30ea:	movs	r0, #4
    30ec:	bl	9f74 <usb_tx>
    30f0:	str	r7, [r6, #8]
    30f2:	b.n	2fd0 <MTPD::loop()+0x118>
              return_code = setObjectPropValue(p1,p2);
              break;
              
            default:
              return_code = 0x2005;  // operation not supported
              break;
    30f4:	movw	r2, #8197	; 0x2005
    30f8:	b.n	2f00 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    30fa:	movw	r3, #4109	; 0x100d
    30fe:	cmp	r1, r3
    3100:	bne.n	30f4 <MTPD::loop()+0x23c>
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
            case 0x100D:  // SendObject
              SendObject();
    3102:	mov	r0, r6
    3104:	bl	2e44 <MTPD::SendObject()>
              break;
    3108:	movw	r2, #8193	; 0x2001
    310c:	b.n	2f00 <MTPD::loop()+0x48>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    310e:	movw	r3, #4105	; 0x1009
    3112:	cmp	r1, r3
    3114:	beq.w	3348 <MTPD::loop()+0x490>
    3118:	movw	r3, #4107	; 0x100b
    311c:	cmp	r1, r3
    311e:	bne.n	30f4 <MTPD::loop()+0x23c>
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
              break;
            case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    3120:	ldr	r5, [r4, #24]
    3122:	cmp	r5, #0
    3124:	bne.w	3012 <MTPD::loop()+0x15a>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    3128:	ldr	r0, [r6, #0]
    312a:	ldr	r1, [r4, #20]
    312c:	ldr	r3, [r0, #0]
    312e:	ldr	r3, [r3, #52]	; 0x34
    3130:	blx	r3
    3132:	cmp	r0, #0
    3134:	bne.n	3108 <MTPD::loop()+0x250>
    3136:	movw	r2, #8210	; 0x2012
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    313a:	mov	r7, r0
    313c:	mov	r6, r2
    313e:	ldr	r3, [r4, #8]
    3140:	ldr	r5, [r4, #24]
    3142:	ldr	r0, [r4, #28]
    3144:	b.n	2f0a <MTPD::loop()+0x52>
      if (receive_buffer->len >= 12) {
        return_code = 0x2001;  // Ok
        receive_buffer->len = 12;
        
        if (CONTAINER->type == 1) { // command
          switch (CONTAINER->op) {
    3146:	movw	r3, #38915	; 0x9803
    314a:	cmp	r1, r3
    314c:	beq.w	3384 <MTPD::loop()+0x4cc>
    3150:	movw	r3, #38916	; 0x9804
    3154:	cmp	r1, r3
    3156:	bne.n	30f4 <MTPD::loop()+0x23c>
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
            p2=CONTAINER->params[1];
    3158:	ldr	r5, [r4, #24]
            TRANSMIT(getObjectPropValue(p1,p2));
              break;

          case 0x9804:  // setObjectPropertyValue

            p1=CONTAINER->params[0];
    315a:	ldr	r7, [r4, #20]
    storage_->close();
  }
  
    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    {
      receive_buffer();
    315c:	mov	r0, r6
    315e:	bl	2ba4 <MTPD::receive_buffer()>
      if(p2==0xDC07)
    3162:	movw	r3, #56327	; 0xdc07
    3166:	cmp	r5, r3
    3168:	beq.w	344a <MTPD::loop()+0x592>
    316c:	movw	r2, #8197	; 0x2005
    3170:	mov	r6, r2
    3172:	ldr	r3, [r4, #8]
    3174:	ldr	r5, [r4, #24]
    3176:	ldr	r0, [r4, #28]
    3178:	b.n	2f0a <MTPD::loop()+0x52>
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
              }
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
    317a:	movs	r7, #0
    317c:	strb	r2, [r6, #12]
    317e:	str	r7, [r6, #16]
    3180:	ldr	r1, [r4, #20]
    3182:	mov	r0, r6
    3184:	bl	1f3c <MTPD::GetObjectInfo(unsigned long)>
    3188:	ldr	r3, [r6, #16]
    318a:	strb	r7, [r6, #12]
    318c:	adds	r3, #12
    318e:	movs	r2, #2
    3190:	strh.w	r2, [sp, #32]
    3194:	str	r3, [sp, #28]
    3196:	ldrh	r3, [r4, #14]
    3198:	strh.w	r3, [sp, #34]	; 0x22
    319c:	ldr	r3, [r4, #16]
    319e:	str	r3, [sp, #36]	; 0x24
    31a0:	add	r1, sp, #28
    31a2:	mov	r0, r6
    31a4:	mov	r2, r5
    31a6:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    31aa:	ldr	r1, [r4, #20]
    31ac:	mov	r0, r6
    31ae:	bl	1f3c <MTPD::GetObjectInfo(unsigned long)>
    31b2:	b.n	30e2 <MTPD::loop()+0x22a>
    31b4:	.word	0x0000ff50
    31b8:	.word	0x1fff098c
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    31bc:	movs	r3, #1
    31be:	movs	r2, #0
    31c0:	strb	r3, [r6, #12]
    31c2:	str	r2, [r6, #16]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    31c4:	ldr	r1, [r4, #20]
    31c6:	movw	r3, #54274	; 0xd402
    31ca:	cmp	r1, r3
    31cc:	beq.w	33ca <MTPD::loop()+0x512>
    31d0:	movs	r3, #12
              break;
            case 0x100D:  // SendObject
              SendObject();
              break;
            case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(CONTAINER->params[0]));
    31d2:	movs	r1, #0
    31d4:	movs	r2, #2
    31d6:	strb	r1, [r6, #12]
    31d8:	strh.w	r2, [sp, #32]
    31dc:	str	r3, [sp, #28]
    31de:	ldrh	r3, [r4, #14]
    31e0:	strh.w	r3, [sp, #34]	; 0x22
    31e4:	ldr	r3, [r4, #16]
    31e6:	str	r3, [sp, #36]	; 0x24
    31e8:	add	r1, sp, #28
    31ea:	movs	r2, #12
    31ec:	mov	r0, r6
    31ee:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    31f2:	ldr	r1, [r4, #20]
    31f4:	movw	r3, #54274	; 0xd402
    31f8:	cmp	r1, r3
    31fa:	bne.w	307e <MTPD::loop()+0x1c6>
    31fe:	mov	r0, r6
    3200:	bl	1afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    3204:	b.n	307e <MTPD::loop()+0x1c6>
                }
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
    3206:	mov	r0, r6
    3208:	ldr	r2, [r4, #24]
    320a:	ldr	r1, [r4, #20]
    320c:	bl	2d1c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
    3210:	ldr	r7, [r4, #20]
              }
              break;
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
    3212:	str	r0, [r4, #28]
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3214:	movs	r3, #24
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    3216:	cmp	r7, #0
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
              break;
    3218:	movw	r2, #8193	; 0x2001
            case 0x100C:  // SendObjectInfo
              CONTAINER->params[2] =
                  SendObjectInfo(CONTAINER->params[0], // storage
                                 CONTAINER->params[1]); // parent
                  p1 = CONTAINER->params[0];
              if (!p1) p1 = 1;
    321c:	it	eq
    321e:	moveq	r7, #1
              CONTAINER->len = receive_buffer->len = 12 + 3 * 4;
    3220:	strh	r3, [r4, #0]
    3222:	str	r3, [r4, #8]
              break;
    3224:	mov	r6, r2
    3226:	ldr	r5, [r4, #24]
    3228:	b.n	2f0a <MTPD::loop()+0x52>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    322a:	ldr	r0, [r6, #0]
    322c:	ldr	r2, [r4, #28]
    322e:	ldr	r3, [r0, #0]
    3230:	ldr	r1, [r4, #20]
    3232:	ldr	r3, [r3, #68]	; 0x44
    3234:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    3236:	movw	r2, #8193	; 0x2001
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
    323a:	strh	r5, [r4, #0]
    323c:	str	r5, [r4, #8]
              break;
    323e:	mov	r3, r5
    3240:	mov	r6, r2
    3242:	ldr	r5, [r4, #24]
    3244:	ldr	r0, [r4, #28]
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    3246:	movs	r7, #0
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(CONTAINER->params[0],CONTAINER->params[2]);
              CONTAINER->len  = receive_buffer->len = 12;
              break;
    3248:	b.n	2f0a <MTPD::loop()+0x52>
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
    324a:	movs	r7, #0
    324c:	strb	r2, [r6, #12]
    324e:	str	r7, [r6, #16]
    3250:	ldr	r1, [r4, #20]
    3252:	mov	r0, r6
    3254:	bl	2390 <MTPD::GetStorageInfo(unsigned long)>
    3258:	ldr	r3, [r6, #16]
    325a:	strb	r7, [r6, #12]
    325c:	adds	r3, #12
    325e:	movs	r2, #2
    3260:	strh.w	r2, [sp, #32]
    3264:	str	r3, [sp, #28]
    3266:	ldrh	r3, [r4, #14]
    3268:	strh.w	r3, [sp, #34]	; 0x22
    326c:	ldr	r3, [r4, #16]
    326e:	str	r3, [sp, #36]	; 0x24
    3270:	add	r1, sp, #28
    3272:	mov	r0, r6
    3274:	mov	r2, r5
    3276:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    327a:	ldr	r1, [r4, #20]
    327c:	mov	r0, r6
    327e:	bl	2390 <MTPD::GetStorageInfo(unsigned long)>
    3282:	b.n	30e2 <MTPD::loop()+0x22a>
              openSession();
              break;
            case 0x1003:  // CloseSession
              break;
            case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    3284:	movs	r7, #0
    3286:	strb	r2, [r6, #12]
    3288:	mov	r0, r6
    328a:	str	r7, [r6, #16]
    328c:	bl	1dcc <MTPD::WriteStorageIDs()>
    3290:	ldr	r3, [r6, #16]
    3292:	strb	r7, [r6, #12]
    3294:	adds	r3, #12
    3296:	movs	r2, #2
    3298:	strh.w	r2, [sp, #32]
    329c:	str	r3, [sp, #28]
    329e:	ldrh	r3, [r4, #14]
    32a0:	strh.w	r3, [sp, #34]	; 0x22
    32a4:	ldr	r3, [r4, #16]
    32a6:	str	r3, [sp, #36]	; 0x24
    32a8:	mov	r0, r6
    32aa:	mov	r2, r5
    32ac:	add	r1, sp, #28
    32ae:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    32b2:	mov	r0, r6
    32b4:	bl	1dcc <MTPD::WriteStorageIDs()>
    32b8:	b.n	30e2 <MTPD::loop()+0x22a>
              break;
            case 0x1005:  // GetStorageInfo
              TRANSMIT(GetStorageInfo(CONTAINER->params[0]));
              break;
            case 0x1006:  // GetNumObjects
              if (CONTAINER->params[1]) {
    32ba:	ldr	r5, [r4, #24]
    32bc:	cmp	r5, #0
    32be:	bne.w	3012 <MTPD::loop()+0x15a>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    32c2:	ldr	r0, [r6, #0]
    32c4:	ldr	r1, [r4, #28]
    32c6:	ldr	r3, [r0, #0]
    32c8:	ldr	r3, [r3, #20]
    32ca:	blx	r3
    32cc:	b.n	32d0 <MTPD::loop()+0x418>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    32ce:	adds	r5, #1
    32d0:	ldr	r0, [r6, #0]
    32d2:	ldr	r3, [r0, #0]
    32d4:	ldr	r3, [r3, #24]
    32d6:	blx	r3
    32d8:	cmp	r0, #0
    32da:	bne.n	32ce <MTPD::loop()+0x416>
    return num;
    32dc:	movw	r2, #8193	; 0x2001
    32e0:	mov	r7, r5
    32e2:	mov	r6, r2
    32e4:	ldr	r3, [r4, #8]
    32e6:	ldr	r5, [r4, #24]
    32e8:	ldr	r0, [r4, #28]
    32ea:	b.n	2f0a <MTPD::loop()+0x52>

              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
            p1=CONTAINER->params[0];
    32ec:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    32ee:	ldr.w	r9, [r4, #24]

            TRANSMIT(getObjectPropDesc(p1,p2));
    32f2:	strb	r2, [r6, #12]
    32f4:	mov.w	r8, #0
    32f8:	mov	r1, r7
    32fa:	mov	r2, r9
    32fc:	mov	r0, r6
    32fe:	str.w	r8, [r6, #16]
    3302:	bl	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3306:	ldr	r3, [r6, #16]
    3308:	strb.w	r8, [r6, #12]
    330c:	adds	r3, #12
    330e:	movs	r2, #2
    3310:	strh.w	r2, [sp, #32]
    3314:	str	r3, [sp, #28]
    3316:	ldrh	r3, [r4, #14]
    3318:	strh.w	r3, [sp, #34]	; 0x22
    331c:	ldr	r3, [r4, #16]
    331e:	str	r3, [sp, #36]	; 0x24
    3320:	mov	r2, r5
    3322:	add	r1, sp, #28
    3324:	mov	r0, r6
    3326:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    332a:	mov	r2, r9
    332c:	mov	r1, r7
    332e:	mov	r0, r6
    3330:	bl	24bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3334:	mov	r0, r6
    3336:	bl	19d8 <MTPD::get_buffer()>
    333a:	ldr	r1, [r6, #8]
    333c:	movs	r0, #4
    333e:	bl	9f74 <usb_tx>
    3342:	str.w	r8, [r6, #8]
    3346:	b.n	2fd0 <MTPD::loop()+0x118>
              break;
            case 0x1008:  // GetObjectInfo
              TRANSMIT(GetObjectInfo(CONTAINER->params[0]));
              break;
            case 0x1009:  // GetObject
              TRANSMIT(GetObject(CONTAINER->params[0]));
    3348:	movs	r7, #0
    334a:	movs	r3, #1
    334c:	strb	r3, [r6, #12]
    334e:	str	r7, [r6, #16]
    3350:	ldr	r1, [r4, #20]
    3352:	mov	r0, r6
    3354:	bl	2bc0 <MTPD::GetObject(unsigned long)>
    3358:	ldr	r3, [r6, #16]
    335a:	strb	r7, [r6, #12]
    335c:	adds	r3, #12
    335e:	movs	r2, #2
    3360:	strh.w	r2, [sp, #32]
    3364:	str	r3, [sp, #28]
    3366:	ldrh	r3, [r4, #14]
    3368:	strh.w	r3, [sp, #34]	; 0x22
    336c:	ldr	r3, [r4, #16]
    336e:	str	r3, [sp, #36]	; 0x24
    3370:	add	r1, sp, #28
    3372:	mov	r0, r6
    3374:	movs	r2, #12
    3376:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    337a:	ldr	r1, [r4, #20]
    337c:	mov	r0, r6
    337e:	bl	2bc0 <MTPD::GetObject(unsigned long)>
    3382:	b.n	30e2 <MTPD::loop()+0x22a>

            TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
            p1=CONTAINER->params[0];
    3384:	ldr	r7, [r4, #20]
            p2=CONTAINER->params[1];
    3386:	ldr.w	r8, [r4, #24]

            TRANSMIT(getObjectPropValue(p1,p2));
    338a:	movs	r5, #0
    338c:	movs	r3, #1
    338e:	mov	r1, r7
    3390:	mov	r2, r8
    3392:	strb	r3, [r6, #12]
    3394:	mov	r0, r6
    3396:	str	r5, [r6, #16]
    3398:	bl	21f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    339c:	ldr	r3, [r6, #16]
    339e:	strb	r5, [r6, #12]
    33a0:	adds	r3, #12
    33a2:	movs	r2, #2
    33a4:	strh.w	r2, [sp, #32]
    33a8:	str	r3, [sp, #28]
    33aa:	ldrh	r3, [r4, #14]
    33ac:	strh.w	r3, [sp, #34]	; 0x22
    33b0:	ldr	r3, [r4, #16]
    33b2:	str	r3, [sp, #36]	; 0x24
    33b4:	add	r1, sp, #28
    33b6:	mov	r0, r6
    33b8:	movs	r2, #12
    33ba:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    33be:	mov	r2, r8
    33c0:	mov	r1, r7
    33c2:	mov	r0, r6
    33c4:	bl	21f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    33c8:	b.n	2fc0 <MTPD::loop()+0x108>
    33ca:	mov	r0, r6
    33cc:	bl	1afc <MTPD::GetDevicePropDesc(unsigned long) [clone .part.4]>
    33d0:	ldr	r3, [r6, #16]
    33d2:	adds	r3, #12
    33d4:	b.n	31d2 <MTPD::loop()+0x31a>
              break;
            case 0x1007:  // GetObjectHandles
              if (CONTAINER->params[1]) {
                return_code = 0x2014; // spec by format unsupported
              } else {
                TRANSMIT(GetObjectHandles(CONTAINER->params[0], CONTAINER->params[2]));
    33d6:	movs	r3, #1
    33d8:	str	r5, [r6, #16]
    33da:	strb	r3, [r6, #12]
    33dc:	mov	r0, r6
    33de:	ldr	r2, [r4, #28]
    33e0:	ldr	r1, [r4, #20]
    33e2:	bl	1eac <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    33e6:	ldr	r3, [r6, #16]
    33e8:	strb	r5, [r6, #12]
    33ea:	adds	r3, #12
    33ec:	movs	r2, #2
    33ee:	strh.w	r2, [sp, #32]
    33f2:	str	r3, [sp, #28]
    33f4:	ldrh	r3, [r4, #14]
    33f6:	strh.w	r3, [sp, #34]	; 0x22
    33fa:	ldr	r3, [r4, #16]
    33fc:	str	r3, [sp, #36]	; 0x24
    33fe:	mov	r0, r6
    3400:	movs	r2, #12
    3402:	add	r1, sp, #28
    3404:	bl	19f0 <MTPD::write(char const*, int) [clone .part.2]>
    3408:	ldr	r2, [r4, #28]
    340a:	ldr	r1, [r4, #20]
    340c:	mov	r0, r6
    340e:	bl	1eac <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3412:	mov	r0, r6
    3414:	bl	19d8 <MTPD::get_buffer()>
    3418:	ldr	r1, [r6, #8]
    341a:	movs	r0, #4
    341c:	bl	9f74 <usb_tx>
    3420:	str	r5, [r6, #8]
    3422:	movw	r2, #8193	; 0x2001
    3426:	ldr	r3, [r4, #8]
    3428:	ldr	r5, [r4, #24]
    342a:	ldr	r0, [r4, #28]
    342c:	mov	r6, r2
    usb_packet_t *receive_buffer;
    if ((receive_buffer = usb_rx(MTP_RX_ENDPOINT))) {
      printContainer();
      
      uint32_t return_code = 0;
      uint32_t p1 = 0, p2 = 0;
    342e:	movs	r7, #0
    3430:	b.n	2f0a <MTPD::loop()+0x52>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    3432:	ldr	r1, [pc, #48]	; (3464 <MTPD::loop()+0x5ac>)
    3434:	mov	r0, r6
    3436:	bl	1a54 <MTPD::writestring(char const*)>
    343a:	b.n	307e <MTPD::loop()+0x1c6>
    343c:	ldr	r1, [pc, #36]	; (3464 <MTPD::loop()+0x5ac>)
    343e:	mov	r0, r6
    3440:	bl	1a54 <MTPD::writestring(char const*)>
    3444:	ldr	r3, [r6, #16]
    3446:	adds	r3, #12
    3448:	b.n	3052 <MTPD::loop()+0x19a>
    344a:	mov	r0, r6
    344c:	mov	r1, r7
    344e:	bl	2cf0 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.7]>
          }
        } else {
          return_code = 0x2000;  // undefined
        }
      }
      if (return_code) {
    3452:	cmp	r0, #0
    3454:	beq.w	2f40 <MTPD::loop()+0x88>
    3458:	uxth	r6, r0
    345a:	ldr	r3, [r4, #8]
    345c:	ldr	r5, [r4, #24]
    345e:	ldr	r0, [r4, #28]
    3460:	mov	r2, r6
    3462:	b.n	2f0a <MTPD::loop()+0x52>
    3464:	.word	0x0000ff18

00003468 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>:
			}
		}
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    3468:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    346c:	ldr	r4, [r0, #0]
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    346e:	ldr	r5, [r4, #12]
    3470:	tst.w	r5, #16777216	; 0x1000000
		const uint8_t *p_write = (const uint8_t *)buf;
		uint8_t *p_read = (uint8_t *)retbuf;
		size_t count_read = count;

		// Lets clear the reader queue
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);
    3474:	ldr	r5, [pc, #484]	; (365c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1f4>)
    3476:	str	r5, [r4, #0]

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
	if (!(port().CTAR0 & SPI_CTAR_LSBFE)) {
    3478:	bne.n	3520 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xb8>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    347a:	lsls	r7, r3, #31
    347c:	bpl.w	35e6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17e>
		    if (p_write) {
    3480:	cmp	r1, #0
    3482:	beq.w	364c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1e4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3486:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    3488:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    348a:	it	ne
    348c:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3490:	str	r5, [r4, #52]	; 0x34
    3492:	adds	r1, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    3494:	ldrb.w	r8, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3498:	add.w	ip, r3, #4294967295
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    349c:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    34a0:	cmp.w	ip, #0
    34a4:	beq.w	35f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
			// Push out the next byte; 
		    if (p_write) {
    34a8:	cbz	r1, 34b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x4c>
		    	w = (*p_write++) << 8;
				w |= *p_write++;
    34aa:	ldrb	r5, [r1, #1]
	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
    34ac:	ldrb.w	r8, [r1], #2
				w |= *p_write++;
    34b0:	orr.w	r8, r5, r8, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    34b4:	ldr	r5, [r0, #4]
    34b6:	ldrb	r6, [r5, #8]
			if (count == 2)
    34b8:	cmp.w	ip, #2
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    34bc:	add.w	r6, r6, #4294967295
    34c0:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    34c4:	ite	eq
    34c6:	orreq.w	r5, r8, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    34ca:	orrne.w	r5, r8, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
		    	w = (*p_write++) << 8;
				w |= *p_write++;
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    34ce:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    34d0:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    34d2:	sub.w	ip, ip, #2
    34d6:	b.n	34ea <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x82>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    34d8:	cbz	r2, 34de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x76>
							*p_read++ = w;  // Read any pending RX bytes in
    34da:	strb	r4, [r2, #0]
    34dc:	adds	r2, #1
						} 
						count_read--;
    34de:	subs	r3, #1
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    34e0:	and.w	r5, r5, #61440	; 0xf000
    34e4:	cmp	r5, r6
    34e6:	bls.n	3516 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xae>
    34e8:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    34ea:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    34ec:	tst.w	r5, #240	; 0xf0
    34f0:	beq.n	34e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x78>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    34f2:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    34f4:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
    34f8:	mov	r7, r2
    34fa:	mov.w	lr, r4, asr #8
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    34fe:	bne.n	34d8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x70>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    3500:	cbz	r2, 350a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xa2>
							*p_read++ = w >> 8;
    3502:	strb.w	lr, [r7], #2
							*p_read++ = (w & 0xff);
    3506:	strb	r4, [r2, #1]
    3508:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    350a:	and.w	r5, r5, #61440	; 0xf000
    350e:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = w >> 8;
							*p_read++ = (w & 0xff);
						}
						count_read -= 2;
    3510:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3514:	bhi.n	34e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x80>
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;

		while (count > 0) {
    3516:	cmp.w	ip, #0
    351a:	beq.n	35f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    351c:	ldr	r4, [r0, #0]
    351e:	b.n	34a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    3520:	lsls	r5, r3, #31
    3522:	bpl.n	35be <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x156>
		    if (p_write) {
    3524:	cmp	r1, #0
    3526:	beq.w	363c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d4>
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    352a:	ldrb	r5, [r1, #0]
		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
		    if (p_write) {
				if (count > 1)
    352c:	cmp	r3, #1
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    352e:	it	ne
    3530:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
    3534:	str	r5, [r4, #52]	; 0x34
    3536:	adds	r1, #1
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
    3538:	add.w	lr, r3, #4294967295
		}

	    uint16_t w = _transferWriteFill;
    353c:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    3540:	cmp.w	lr, #0
    3544:	beq.n	35ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
			// Push out the next byte; 
		    if (p_write) {
    3546:	cbz	r1, 3554 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xec>
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
    3548:	ldrb.w	ip, [r1, #1]
    354c:	ldrb	r5, [r1, #0]
    354e:	adds	r1, #2
    3550:	orr.w	ip, r5, ip, lsl #8
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    3554:	ldr	r5, [r0, #4]
    3556:	ldrb	r6, [r5, #8]
			if (count == 2)
    3558:	cmp.w	lr, #2
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    355c:	add.w	r6, r6, #4294967295
    3560:	mov.w	r6, r6, lsl #12
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
    3564:	ite	eq
    3566:	orreq.w	r5, ip, #268435456	; 0x10000000
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    356a:	orrne.w	r5, ip, #2415919104	; 0x90000000
			// Push out the next byte; 
		    if (p_write) {
				w = *p_write++;
		    	w |= ((*p_write++) << 8);
		    }
		    uint16_t queue_full_status_mask = (hardware().queue_size-1) << 12;
    356e:	uxth	r6, r6
			if (count == 2)
				port().PUSHR = w | SPI_PUSHR_CTAS(1);
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
    3570:	str	r5, [r4, #52]	; 0x34
			count -= 2; // how many bytes to output.
    3572:	sub.w	lr, lr, #2
    3576:	b.n	358a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x122>
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
						if (p_read) {
    3578:	cbz	r2, 357e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x116>
							*p_read++ = w;  // Read any pending RX bytes in
    357a:	strb	r4, [r2, #0]
    357c:	adds	r2, #1
						} 
						count_read--;
    357e:	subs	r3, #1
							*p_read++ = w >> 8;
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    3580:	and.w	r5, r5, #61440	; 0xf000
    3584:	cmp	r5, r6
    3586:	bls.n	35b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x14c>
    3588:	ldr	r4, [r0, #0]
			else	
				port().PUSHR = w | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(1);
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
    358a:	ldr	r5, [r4, #44]	; 0x2c
				if (sr & 0xF0)  {
    358c:	tst.w	r5, #240	; 0xf0
    3590:	beq.n	3580 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x118>
					uint16_t w = port().POPR;  // Read any pending RX bytes in
					if (count_read & 1) {
    3592:	tst.w	r3, #1
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
    3596:	mov	r7, r2
			count -= 2; // how many bytes to output.
			// Make sure queue is not full before pushing next byte out
			do {
				sr = port().SR;
				if (sr & 0xF0)  {
					uint16_t w = port().POPR;  // Read any pending RX bytes in
    3598:	ldr	r4, [r4, #56]	; 0x38
					if (count_read & 1) {
    359a:	bne.n	3578 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x110>
						if (p_read) {
							*p_read++ = w;  // Read any pending RX bytes in
						} 
						count_read--;
					} else {
						if (p_read) {
    359c:	cbz	r2, 35a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x140>
							*p_read++ = (w & 0xff);
    359e:	strb.w	r4, [r7], #2
							*p_read++ = w >> 8;
    35a2:	asrs	r4, r4, #8
    35a4:	strb	r4, [r2, #1]
    35a6:	mov	r2, r7
						}
						count_read -= 2;
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    35a8:	and.w	r5, r5, #61440	; 0xf000
    35ac:	cmp	r5, r6
					} else {
						if (p_read) {
							*p_read++ = (w & 0xff);
							*p_read++ = w >> 8;
						}
						count_read -= 2;
    35ae:	sub.w	r3, r3, #2
					}
				}
			} while ((sr & (15 << 12)) > queue_full_status_mask);
    35b2:	bhi.n	3588 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x120>
			count--;
		}

	    uint16_t w = _transferWriteFill;

		while (count > 0) {
    35b4:	cmp.w	lr, #0
    35b8:	beq.n	35ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
    35ba:	ldr	r4, [r0, #0]
    35bc:	b.n	3546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    35be:	mov	lr, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w = _transferWriteFill;
    35c0:	ldrb.w	ip, [r0, #44]	; 0x2c

		while (count > 0) {
    35c4:	cmp.w	lr, #0
    35c8:	bne.n	3546 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xde>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    35ca:	cbz	r3, 3614 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    35cc:	ldr	r4, [r0, #0]
			sr = port().SR;
    35ce:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    35d0:	tst.w	r1, #240	; 0xf0
    35d4:	beq.n	35ce <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x166>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    35d6:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    35d8:	lsls	r4, r3, #31
    35da:	bpl.n	3618 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1b0>
					if (p_read)
    35dc:	cbz	r2, 35e2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x17a>
						*p_read++ = w;  // Read any pending RX bytes in
    35de:	strb	r1, [r2, #0]
    35e0:	adds	r2, #1
					count_read--;
    35e2:	subs	r3, #1
    35e4:	b.n	35ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    35e6:	ldrb.w	r8, [r0, #44]	; 0x2c
		port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);

		uint32_t sr;

		// Now lets loop while we still have data to output
		if (count & 1) {
    35ea:	mov	ip, r3
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
			}
			count--;
		}

	    uint16_t w =  (uint16_t)(_transferWriteFill << 8) | _transferWriteFill;
    35ec:	orr.w	r8, r8, r8, lsl #8

		while (count > 0) {
    35f0:	cmp.w	ip, #0
    35f4:	bne.w	34a8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x40>
			} while ((sr & (15 << 12)) > queue_full_status_mask);

		}

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
    35f8:	cbz	r3, 3614 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1ac>
    35fa:	ldr	r4, [r0, #0]
			sr = port().SR;
    35fc:	ldr	r1, [r4, #44]	; 0x2c
			if (sr & 0xF0)  {
    35fe:	tst.w	r1, #240	; 0xf0
    3602:	beq.n	35fc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x194>
				uint16_t w = port().POPR;  // Read any pending RX bytes in
				if (count_read & 1) {
    3604:	lsls	r6, r3, #31

		// now lets wait for all of the read bytes to be returned...
		while (count_read) {
			sr = port().SR;
			if (sr & 0xF0)  {
				uint16_t w = port().POPR;  // Read any pending RX bytes in
    3606:	ldr	r1, [r4, #56]	; 0x38
				if (count_read & 1) {
    3608:	bpl.n	362a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1c2>
					if (p_read)
    360a:	cbz	r2, 3610 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1a8>
						*p_read++ = w;  // Read any pending RX bytes in
    360c:	strb	r1, [r2, #0]
    360e:	adds	r2, #1
					count_read--;
    3610:	subs	r3, #1
    3612:	b.n	35f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
    3614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    3618:	cbz	r2, 3626 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1be>
						*p_read++ = (w & 0xff);
    361a:	mov	r4, r2
						*p_read++ = w >> 8;
    361c:	asrs	r5, r1, #8
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
						*p_read++ = (w & 0xff);
    361e:	strb.w	r1, [r4], #2
						*p_read++ = w >> 8;
    3622:	strb	r5, [r2, #1]
    3624:	mov	r2, r4
					}
					count_read -= 2;
    3626:	subs	r3, #2
    3628:	b.n	35ca <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x162>
				if (count_read & 1) {
					if (p_read)
						*p_read++ = w;  // Read any pending RX bytes in
					count_read--;
				} else {
					if (p_read) {
    362a:	cbz	r2, 3638 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x1d0>
						*p_read++ = w >> 8;
    362c:	mov	r4, r2
    362e:	asrs	r5, r1, #8
    3630:	strb.w	r5, [r4], #2
						*p_read++ = (w & 0xff);
    3634:	strb	r1, [r2, #1]
    3636:	mov	r2, r4
					}
					count_read -= 2;
    3638:	subs	r3, #2
    363a:	b.n	35f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x190>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    363c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3640:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3642:	it	ne
    3644:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3648:	str	r5, [r4, #52]	; 0x34
    364a:	b.n	3538 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0xd0>
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    364c:	ldrb.w	r5, [r0, #44]	; 0x2c
				if (count > 1)
					port().PUSHR = *p_write++ | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
				else
					port().PUSHR = *p_write++ | SPI_PUSHR_CTAS(0);
			} else {
				if (count > 1)
    3650:	cmp	r3, #1
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CONT | SPI_PUSHR_CTAS(0);
    3652:	it	ne
    3654:	orrne.w	r5, r5, #2147483648	; 0x80000000
				else
					port().PUSHR = _transferWriteFill | SPI_PUSHR_CTAS(0);
    3658:	str	r5, [r4, #52]	; 0x34
    365a:	b.n	3494 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]+0x2c>
    365c:	.word	0x801f0400

00003660 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    3660:	cbz	r3, 3666 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    3662:	b.w	3468 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.10]>
    3666:	bx	lr

00003668 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    3668:	ldr	r2, [pc, #400]	; (37fc <breakTime(long, tmElements_t&)+0x194>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    366a:	ldr	r3, [pc, #404]	; (3800 <breakTime(long, tmElements_t&)+0x198>)
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    366c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3670:	ldr	r6, [pc, #400]	; (3804 <breakTime(long, tmElements_t&)+0x19c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3672:	ldr.w	sl, [pc, #416]	; 3814 <breakTime(long, tmElements_t&)+0x1ac>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3676:	ldr	r4, [pc, #400]	; (3808 <breakTime(long, tmElements_t&)+0x1a0>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3678:	ldr.w	r9, [pc, #400]	; 380c <breakTime(long, tmElements_t&)+0x1a4>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    367c:	umull	r5, r2, r2, r0
    3680:	mov.w	ip, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3684:	add.w	r7, ip, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3688:	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    368c:	umull	r6, r2, r6, r0
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    3690:	umull	sl, fp, r7, sl
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    3694:	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    3696:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    3698:	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    369c:	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36a0:	rsb	r6, fp, r7
    36a4:	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    36a8:	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36aa:	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    36ac:	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36ae:	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    36b2:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    36b6:	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    36ba:	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36be:	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    36c0:	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    36c4:	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    36c8:	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36cc:	adds	r6, #1
    36ce:	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    36d0:	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    36d2:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    36d4:	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    36d6:	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    36d8:	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    36da:	movw	fp, #365	; 0x16d
    36de:	mov.w	r8, #100	; 0x64
    36e2:	mov.w	sl, #400	; 0x190
    36e6:	b.n	3706 <breakTime(long, tmElements_t&)+0x9e>
    36e8:	rsb	r5, r6, r5, asr #7
    36ec:	mls	r5, sl, r5, r3
    36f0:	cbnz	r0, 3750 <breakTime(long, tmElements_t&)+0xe8>
    36f2:	cmp	r5, #0
    36f4:	ite	ne
    36f6:	movne	r0, fp
    36f8:	moveq.w	r0, #366	; 0x16e
    36fc:	add	r2, r0
    36fe:	cmp	ip, r2
    3700:	add.w	r4, r4, #1
    3704:	bcc.n	372e <breakTime(long, tmElements_t&)+0xc6>
    3706:	uxtb	r7, r4
    3708:	addw	r3, r7, #1970	; 0x7b2
    370c:	smull	r0, r5, r9, r3
    3710:	asrs	r6, r3, #31
    3712:	rsb	r0, r6, r5, asr #5
    3716:	ands.w	lr, r3, #3
    371a:	mls	r0, r8, r0, r3
    371e:	beq.n	36e8 <breakTime(long, tmElements_t&)+0x80>
    3720:	movw	r0, #365	; 0x16d
    3724:	add	r2, r0
    3726:	cmp	ip, r2
    3728:	add.w	r4, r4, #1
    372c:	bcs.n	3706 <breakTime(long, tmElements_t&)+0x9e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    372e:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3730:	cmp.w	lr, #0
    3734:	bne.n	3756 <breakTime(long, tmElements_t&)+0xee>
    3736:	ldr	r0, [pc, #212]	; (380c <breakTime(long, tmElements_t&)+0x1a4>)
    3738:	asrs	r6, r3, #31
    373a:	smull	r4, r0, r0, r3
    373e:	rsb	r4, r6, r0, asr #5
    3742:	movs	r5, #100	; 0x64
    3744:	mls	r4, r5, r4, r3
    3748:	cbz	r4, 37ba <breakTime(long, tmElements_t&)+0x152>
    374a:	mov.w	r4, #366	; 0x16e
    374e:	b.n	375c <breakTime(long, tmElements_t&)+0xf4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3750:	mov.w	r0, #366	; 0x16e
    3754:	b.n	36fc <breakTime(long, tmElements_t&)+0x94>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    3756:	movw	r4, #365	; 0x16d
    375a:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    375c:	ldr	r0, [pc, #172]	; (380c <breakTime(long, tmElements_t&)+0x1a4>)
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    375e:	ldr	r5, [pc, #176]	; (3810 <breakTime(long, tmElements_t&)+0x1a8>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3760:	smull	r7, r0, r0, r3
    3764:	rsb	r8, r6, r0, asr #5
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    3768:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    376a:	rsb	r6, r6, r0, asr #7
    376e:	movs	r4, #100	; 0x64
    3770:	mov.w	r0, #400	; 0x190
    3774:	mls	r6, r0, r6, r3
    3778:	mls	r8, r4, r8, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    377c:	rsb	r2, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    3780:	movs	r0, #1
    3782:	movs	r3, #0
    3784:	b.n	378c <breakTime(long, tmElements_t&)+0x124>
    3786:	adds	r0, #1
    3788:	uxtb	r0, r0
    378a:	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    378c:	cmp	r3, #1
    378e:	uxtb	r7, r3
    3790:	beq.n	37d4 <breakTime(long, tmElements_t&)+0x16c>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    3792:	ldrb	r4, [r3, r5]
    3794:	cmp	r4, r2
    3796:	bhi.n	37ac <breakTime(long, tmElements_t&)+0x144>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    3798:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    379a:	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    379e:	bne.n	3786 <breakTime(long, tmElements_t&)+0x11e>
    37a0:	movs	r7, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    37a2:	adds	r2, #1
    37a4:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    37a6:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    37a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37ac:	adds	r7, #1
    37ae:	uxtb	r7, r7
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    37b0:	adds	r2, #1
    37b2:	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    37b4:	strb	r7, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    37b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    37ba:	mov.w	r4, #400	; 0x190
    37be:	rsb	r0, r6, r0, asr #7
    37c2:	mls	r0, r4, r0, r3
    37c6:	cmp	r0, #0
    37c8:	movw	r4, #365	; 0x16d
    37cc:	it	eq
    37ce:	moveq.w	r4, #366	; 0x16e
    37d2:	b.n	375c <breakTime(long, tmElements_t&)+0xf4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    37d4:	cmp.w	lr, #0
    37d8:	bne.n	37f0 <breakTime(long, tmElements_t&)+0x188>
    37da:	cmp.w	r8, #0
    37de:	bne.n	37f8 <breakTime(long, tmElements_t&)+0x190>
    37e0:	cmp	r6, #0
    37e2:	ite	ne
    37e4:	movne	r4, #28
    37e6:	moveq	r4, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    37e8:	cmp	r2, r4
    37ea:	bcc.n	37f4 <breakTime(long, tmElements_t&)+0x18c>
      time -= monthLength;
    37ec:	subs	r2, r2, r4
    37ee:	b.n	3786 <breakTime(long, tmElements_t&)+0x11e>
    37f0:	movs	r4, #28
    37f2:	b.n	37e8 <breakTime(long, tmElements_t&)+0x180>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    37f4:	movs	r7, #2
    37f6:	b.n	37a2 <breakTime(long, tmElements_t&)+0x13a>
    37f8:	movs	r4, #29
    37fa:	b.n	37e8 <breakTime(long, tmElements_t&)+0x180>
    37fc:	.word	0xc22e4507
    3800:	.word	0x88888889
    3804:	.word	0x91a2b3c5
    3808:	.word	0xaaaaaaab
    380c:	.word	0x51eb851f
    3810:	.word	0x0000ff68
    3814:	.word	0x24924925

00003818 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    3818:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    381a:	ldr	r1, [pc, #12]	; (3828 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    381c:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    381e:	bl	3668 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    3822:	ldr	r3, [pc, #8]	; (382c <refreshCache(long) [clone .part.0]+0x14>)
    3824:	str	r4, [r3, #0]
    3826:	pop	{r4, pc}
    3828:	.word	0x1fff16d8
    382c:	.word	0x1fff16d4

00003830 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    3830:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3832:	ldr	r4, [pc, #128]	; (38b4 <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3834:	ldr	r6, [pc, #128]	; (38b8 <now()+0x88>)
    3836:	ldr	r3, [r4, #0]
    3838:	ldr	r2, [r6, #0]
    383a:	ldr	r5, [pc, #128]	; (38bc <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    383c:	sub	sp, #12
    383e:	ldr	r0, [r5, #0]
    3840:	str	r3, [sp, #0]
	return ret;
    3842:	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    3844:	subs	r3, r3, r2
    3846:	cmp.w	r3, #1000	; 0x3e8
    384a:	bcc.n	386c <now()+0x3c>
    384c:	adds	r0, #1
    384e:	b.n	3852 <now()+0x22>
    3850:	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3852:	ldr	r3, [r4, #0]
    3854:	str	r3, [sp, #0]
	return ret;
    3856:	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    3858:	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    385c:	subs	r3, r3, r2
    385e:	cmp.w	r3, #1000	; 0x3e8
    3862:	add.w	r1, r0, #1
    3866:	bcs.n	3850 <now()+0x20>
    3868:	str	r0, [r5, #0]
    386a:	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    386c:	ldr	r7, [pc, #80]	; (38c0 <now()+0x90>)
    386e:	ldr	r3, [r7, #0]
    3870:	cmp	r0, r3
    3872:	bcc.n	3894 <now()+0x64>
    if (getTimePtr != 0) {
    3874:	ldr	r3, [pc, #76]	; (38c4 <now()+0x94>)
    3876:	ldr	r3, [r3, #0]
    3878:	cbz	r3, 3894 <now()+0x64>
      time_t t = getTimePtr();
    387a:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    387c:	ldr	r3, [pc, #72]	; (38c8 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    387e:	cbnz	r0, 3898 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3880:	ldr	r1, [pc, #72]	; (38cc <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3882:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3884:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3886:	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3888:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    388a:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    388c:	it	ne
    388e:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    3890:	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    3892:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    3894:	add	sp, #12
    3896:	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3898:	ldr	r2, [r4, #0]
    389a:	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    389c:	ldr	r3, [r3, #0]
  Status = timeSet;
    389e:	ldr	r2, [pc, #44]	; (38cc <now()+0x9c>)
	return ret;
    38a0:	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    38a2:	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    38a4:	add	r3, r0
  Status = timeSet;
    38a6:	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    38a8:	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    38aa:	str	r3, [r7, #0]
  Status = timeSet;
    38ac:	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    38ae:	add	sp, #12
    38b0:	pop	{r4, r5, r6, r7, pc}
    38b2:	nop
    38b4:	.word	0x1fff1c08
    38b8:	.word	0x1fff16ec
    38bc:	.word	0x1fff16e0
    38c0:	.word	0x1fff16f0
    38c4:	.word	0x1fff16e8
    38c8:	.word	0x1fff0978
    38cc:	.word	0x1fff16e4

000038d0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    38d0:	push	{r3, lr}
  return hour(now()); 
    38d2:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    38d6:	ldr	r3, [pc, #16]	; (38e8 <hour()+0x18>)
    38d8:	ldr	r3, [r3, #0]
    38da:	cmp	r0, r3
    38dc:	beq.n	38e2 <hour()+0x12>
    38de:	bl	3818 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    38e2:	ldr	r3, [pc, #8]	; (38ec <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    38e4:	ldrb	r0, [r3, #2]
    38e6:	pop	{r3, pc}
    38e8:	.word	0x1fff16d4
    38ec:	.word	0x1fff16d8

000038f0 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    38f0:	push	{r3, lr}
  return minute(now()); 
    38f2:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    38f6:	ldr	r3, [pc, #16]	; (3908 <minute()+0x18>)
    38f8:	ldr	r3, [r3, #0]
    38fa:	cmp	r0, r3
    38fc:	beq.n	3902 <minute()+0x12>
    38fe:	bl	3818 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    3902:	ldr	r3, [pc, #8]	; (390c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    3904:	ldrb	r0, [r3, #1]
    3906:	pop	{r3, pc}
    3908:	.word	0x1fff16d4
    390c:	.word	0x1fff16d8

00003910 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    3910:	push	{r3, lr}
  return second(now()); 
    3912:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3916:	ldr	r3, [pc, #16]	; (3928 <second()+0x18>)
    3918:	ldr	r3, [r3, #0]
    391a:	cmp	r0, r3
    391c:	beq.n	3922 <second()+0x12>
    391e:	bl	3818 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    3922:	ldr	r3, [pc, #8]	; (392c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    3924:	ldrb	r0, [r3, #0]
    3926:	pop	{r3, pc}
    3928:	.word	0x1fff16d4
    392c:	.word	0x1fff16d8

00003930 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    3930:	push	{r3, lr}
  return(day(now())); 
    3932:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3936:	ldr	r3, [pc, #16]	; (3948 <day()+0x18>)
    3938:	ldr	r3, [r3, #0]
    393a:	cmp	r0, r3
    393c:	beq.n	3942 <day()+0x12>
    393e:	bl	3818 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    3942:	ldr	r3, [pc, #8]	; (394c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    3944:	ldrb	r0, [r3, #4]
    3946:	pop	{r3, pc}
    3948:	.word	0x1fff16d4
    394c:	.word	0x1fff16d8

00003950 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    3950:	push	{r3, lr}
  return month(now()); 
    3952:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3956:	ldr	r3, [pc, #16]	; (3968 <month()+0x18>)
    3958:	ldr	r3, [r3, #0]
    395a:	cmp	r0, r3
    395c:	beq.n	3962 <month()+0x12>
    395e:	bl	3818 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    3962:	ldr	r3, [pc, #8]	; (396c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    3964:	ldrb	r0, [r3, #5]
    3966:	pop	{r3, pc}
    3968:	.word	0x1fff16d4
    396c:	.word	0x1fff16d8

00003970 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    3970:	push	{r3, lr}
  return year(now()); 
    3972:	bl	3830 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    3976:	ldr	r3, [pc, #20]	; (398c <year()+0x1c>)
    3978:	ldr	r3, [r3, #0]
    397a:	cmp	r0, r3
    397c:	beq.n	3982 <year()+0x12>
    397e:	bl	3818 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    3982:	ldr	r3, [pc, #12]	; (3990 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    3984:	ldrb	r0, [r3, #6]
}
    3986:	addw	r0, r0, #1970	; 0x7b2
    398a:	pop	{r3, pc}
    398c:	.word	0x1fff16d4
    3990:	.word	0x1fff16d8

00003994 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    3994:	mov.w	r0, #4294967295
    3998:	bx	lr
    399a:	nop

0000399c <SDClass::~SDClass()>:
	char *filename;
};



class SDClass : public FS
    399c:	bx	lr
    399e:	nop

000039a0 <SDClass::remove(char const*)>:
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
		return sdfs.mkdir(filepath);
	}
	bool remove(const char *filepath) {
    39a0:	push	{r4, lr}
    39a2:	ldr.w	r4, [r0, #1148]	; 0x47c
    39a6:	sub	sp, #56	; 0x38
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    39a8:	cbz	r4, 39d4 <SDClass::remove(char const*)+0x34>
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    39aa:	mov	r2, r1
    39ac:	mov	r0, sp
    39ae:	mov	r1, r4
    39b0:	movs	r3, #1
    39b2:	movs	r4, #0
    39b4:	strb.w	r4, [sp]
    39b8:	strb.w	r4, [sp, #1]
    39bc:	strb.w	r4, [sp, #2]
    39c0:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    39c4:	cbnz	r0, 39ca <SDClass::remove(char const*)+0x2a>
		return sdfs.remove(filepath);
	}
    39c6:	add	sp, #56	; 0x38
    39c8:	pop	{r4, pc}
    39ca:	mov	r0, sp
    39cc:	bl	7368 <FatFile::remove()>
    39d0:	add	sp, #56	; 0x38
    39d2:	pop	{r4, pc}
    39d4:	ldr.w	r0, [r0, #1152]	; 0x480
    39d8:	cmp	r0, #0
    39da:	beq.n	39c6 <SDClass::remove(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    39dc:	mov	r2, r1
    39de:	movs	r3, #1
    39e0:	mov	r1, r0
    39e2:	mov	r0, sp
    39e4:	strb.w	r4, [sp, #49]	; 0x31
    39e8:	strb.w	r4, [sp, #50]	; 0x32
    39ec:	strb.w	r4, [sp, #51]	; 0x33
    39f0:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    39f4:	cmp	r0, #0
    39f6:	beq.n	39c6 <SDClass::remove(char const*)+0x26>
    39f8:	mov	r0, sp
    39fa:	bl	4e78 <ExFatFile::remove()>
    39fe:	add	sp, #56	; 0x38
    3a00:	pop	{r4, pc}
    3a02:	nop

00003a04 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    3a04:	push	{r4, r5, lr}
    3a06:	ldr.w	r4, [r0, #1148]	; 0x47c
    3a0a:	sub	sp, #60	; 0x3c
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    3a0c:	cbz	r4, 3a38 <SDClass::rmdir(char const*)+0x34>
    3a0e:	movs	r5, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    3a10:	mov	r2, r1
    3a12:	mov	r3, r5
    3a14:	mov	r1, r4
    3a16:	mov	r0, sp
    3a18:	strb.w	r5, [sp]
    3a1c:	strb.w	r5, [sp, #1]
    3a20:	strb.w	r5, [sp, #2]
    3a24:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    3a28:	cbnz	r0, 3a2e <SDClass::rmdir(char const*)+0x2a>
		return sdfs.rmdir(filepath);
	}
    3a2a:	add	sp, #60	; 0x3c
    3a2c:	pop	{r4, r5, pc}
    3a2e:	mov	r0, sp
    3a30:	bl	6020 <FatFile::rmdir()>
    3a34:	add	sp, #60	; 0x3c
    3a36:	pop	{r4, r5, pc}
    3a38:	ldr.w	r0, [r0, #1152]	; 0x480
    3a3c:	cmp	r0, #0
    3a3e:	beq.n	3a2a <SDClass::rmdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    3a40:	mov	r2, r1
    3a42:	mov	r3, r4
    3a44:	mov	r1, r0
    3a46:	mov	r0, sp
    3a48:	strb.w	r4, [sp, #49]	; 0x31
    3a4c:	strb.w	r4, [sp, #50]	; 0x32
    3a50:	strb.w	r4, [sp, #51]	; 0x33
    3a54:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3a58:	cmp	r0, #0
    3a5a:	beq.n	3a2a <SDClass::rmdir(char const*)+0x26>
    3a5c:	mov	r0, sp
    3a5e:	bl	4fa0 <ExFatFile::rmdir()>
    3a62:	add	sp, #60	; 0x3c
    3a64:	pop	{r4, r5, pc}
    3a66:	nop

00003a68 <SDClass::mkdir(char const*)>:
		return File();
	}
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
	}
	bool mkdir(const char *filepath) {
    3a68:	push	{r4, lr}
    3a6a:	ldr.w	r4, [r0, #1148]	; 0x47c
    3a6e:	sub	sp, #56	; 0x38
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    3a70:	cbz	r4, 3a92 <SDClass::mkdir(char const*)+0x2a>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    3a72:	mov	r2, r1
    3a74:	movs	r3, #1
    3a76:	add.w	r1, r4, #1088	; 0x440
    3a7a:	mov	r0, sp
    3a7c:	movs	r4, #0
    3a7e:	strb.w	r4, [sp]
    3a82:	strb.w	r4, [sp, #1]
    3a86:	strb.w	r4, [sp, #2]
    3a8a:	bl	63f8 <FatFile::mkdir(FatFile*, char const*, bool)>
		return sdfs.mkdir(filepath);
	}
    3a8e:	add	sp, #56	; 0x38
    3a90:	pop	{r4, pc}
    3a92:	ldr.w	r0, [r0, #1152]	; 0x480
    3a96:	cmp	r0, #0
    3a98:	beq.n	3a8e <SDClass::mkdir(char const*)+0x26>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    3a9a:	mov	r2, r1
    3a9c:	movs	r3, #1
    3a9e:	add.w	r1, r0, #1088	; 0x440
    3aa2:	mov	r0, sp
    3aa4:	strb.w	r4, [sp, #49]	; 0x31
    3aa8:	strb.w	r4, [sp, #50]	; 0x32
    3aac:	strb.w	r4, [sp, #51]	; 0x33
    3ab0:	bl	5384 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    3ab4:	add	sp, #56	; 0x38
    3ab6:	pop	{r4, pc}

00003ab8 <SDClass::exists(char const*)>:
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
	bool exists(const char *filepath) {
    3ab8:	push	{r4, r5, lr}
    3aba:	ldr.w	r4, [r0, #1148]	; 0x47c
    3abe:	sub	sp, #60	; 0x3c
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
           m_xVol ? m_xVol->exists(path) : false;
    3ac0:	cbz	r4, 3ae0 <SDClass::exists(char const*)+0x28>
    3ac2:	movs	r5, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3ac4:	mov	r2, r1
    3ac6:	mov	r3, r5
    3ac8:	mov	r1, r4
    3aca:	mov	r0, sp
    3acc:	strb.w	r5, [sp]
    3ad0:	strb.w	r5, [sp, #1]
    3ad4:	strb.w	r5, [sp, #2]
    3ad8:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
		return sdfs.exists(filepath);
	}
    3adc:	add	sp, #60	; 0x3c
    3ade:	pop	{r4, r5, pc}
    3ae0:	ldr.w	r0, [r0, #1152]	; 0x480
    3ae4:	cmp	r0, #0
    3ae6:	beq.n	3adc <SDClass::exists(char const*)+0x24>
   *
   * \return true if the file exists else false.
   */
  bool exists(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    3ae8:	mov	r2, r1
    3aea:	mov	r3, r4
    3aec:	mov	r1, r0
    3aee:	mov	r0, sp
    3af0:	strb.w	r4, [sp, #49]	; 0x31
    3af4:	strb.w	r4, [sp, #50]	; 0x32
    3af8:	strb.w	r4, [sp, #51]	; 0x33
    3afc:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    3b00:	add	sp, #60	; 0x3c
    3b02:	pop	{r4, r5, pc}

00003b04 <SDClass::open(char const*, unsigned char)>:
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3b04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3b08:	cmp	r3, #1
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3b0a:	sub	sp, #80	; 0x50
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    3b0c:	movw	r3, #16898	; 0x4202
		}
#endif
		return sdfs.begin(SdSpiConfig(csPin, SHARED_SPI, SD_SCK_MHZ(24)));
		//return sdfs.begin(csPin, SD_SCK_MHZ(24));
	}
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    3b10:	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3b12:	it	ne
    3b14:	movne	r3, #0
    3b16:	adds	r1, #4
    3b18:	mov	r0, sp
    3b1a:	bl	7d68 <FsVolume::open(char const*, int)>
    3b1e:	ldr	r3, [sp, #72]	; 0x48
    3b20:	cmp	r3, #0
    3b22:	beq.n	3b8e <SDClass::open(char const*, unsigned char)+0x8a>
		if (file) return File(new SDFile(file));
    3b24:	movs	r0, #104	; 0x68
    3b26:	bl	ad90 <operator new(unsigned int)>
    3b2a:	mov	r4, r0
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    3b2c:	ldrb.w	r6, [sp, #4]
#endif

class SDFile : public File
{
public:
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3b30:	ldr	r0, [pc, #116]	; (3ba8 <SDClass::open(char const*, unsigned char)+0xa4>)
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3b32:	ldr	r1, [pc, #120]	; (3bac <SDClass::open(char const*, unsigned char)+0xa8>)
    3b34:	ldr	r2, [sp, #8]
    3b36:	ldrb.w	r3, [sp, #12]
    3b3a:	str	r0, [r4, #0]
    3b3c:	add	r7, sp, #16
    3b3e:	strb	r6, [r4, #24]
    3b40:	str	r1, [r4, #20]
{
  public:
	constexpr Print() : write_error(0) {}
    3b42:	movs	r6, #0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3b44:	mov.w	r8, #1000	; 0x3e8
    3b48:	mov	r1, r7
    3b4a:	add.w	r0, r4, #36	; 0x24
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3b4e:	str	r2, [r4, #28]
    3b50:	strb.w	r3, [r4, #32]
    3b54:	strb	r6, [r4, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3b56:	strb	r6, [r4, #12]

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3b58:	str	r6, [r4, #16]
    3b5a:	str.w	r8, [r4, #8]
    3b5e:	bl	7b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3b62:	ldr	r3, [r4, #16]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3b64:	ldr	r1, [pc, #72]	; (3bb0 <SDClass::open(char const*, unsigned char)+0xac>)
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3b66:	ldr	r2, [pc, #76]	; (3bb4 <SDClass::open(char const*, unsigned char)+0xb0>)
    3b68:	str	r6, [r4, #100]	; 0x64
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
		if (f) f->refcount++;
    3b6a:	adds	r3, #1
    3b6c:	strb	r6, [r5, #4]
    3b6e:	str.w	r8, [r5, #8]
    3b72:	strb	r6, [r5, #12]
		// can we use is_same or is_polymorphic with static_assert?
		// or is_base_of
		//static_assert(std::is_same<decltype(*file),File>::value,
			//"File(File *file) constructor only accepts pointers "
			//"to derived classes, not File itself");
		f = file;
    3b74:	str	r4, [r5, #16]
    3b76:	str	r1, [r4, #20]
		if (f) f->refcount++;
    3b78:	str	r3, [r4, #16]
#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
	File(File *file) {
    3b7a:	str	r2, [r5, #0]
    3b7c:	ldr	r3, [pc, #56]	; (3bb8 <SDClass::open(char const*, unsigned char)+0xb4>)
    3b7e:	str	r3, [sp, #0]
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    3b80:	mov	r0, r7
    3b82:	bl	7b9c <FsBaseFile::close()>
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		SDFAT_FILE file = sdfs.open(filepath, flags);
		if (file) return File(new SDFile(file));
		return File();
	}
    3b86:	mov	r0, r5
    3b88:	add	sp, #80	; 0x50
    3b8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    3b8e:	ldr	r3, [sp, #76]	; 0x4c
    3b90:	cmp	r3, #0
    3b92:	bne.n	3b24 <SDClass::open(char const*, unsigned char)+0x20>
    3b94:	mov.w	r1, #1000	; 0x3e8

#define FILE_WHOAMI

class File : public Stream {
public:
	constexpr File() : f(nullptr) { }
    3b98:	ldr	r2, [pc, #24]	; (3bb4 <SDClass::open(char const*, unsigned char)+0xb0>)
    3b9a:	strb	r3, [r5, #4]
    3b9c:	strb	r3, [r5, #12]
    3b9e:	str	r3, [r5, #16]
    3ba0:	str	r1, [r5, #8]
    3ba2:	str	r2, [r5, #0]
    3ba4:	add	r7, sp, #16
    3ba6:	b.n	3b7c <SDClass::open(char const*, unsigned char)+0x78>
    3ba8:	.word	0x0000fe08
    3bac:	.word	0x0000fd9c
    3bb0:	.word	0x0000fde4
    3bb4:	.word	0x0000fd0c
    3bb8:	.word	0x0000fdc0

00003bbc <_GLOBAL__sub_I_SD>:
#include <Arduino.h>
#include <SD.h>

SDClass SD;
    3bbc:	push	{r4, r5, r6, r7}


class SDClass : public FS
{
public:
	SDClass() { }
    3bbe:	ldr	r3, [pc, #60]	; (3bfc <_GLOBAL__sub_I_SD+0x40>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    3bc0:	ldr	r4, [pc, #60]	; (3c00 <_GLOBAL__sub_I_SD+0x44>)
    3bc2:	str.w	r4, [r3, #1164]	; 0x48c
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    3bc6:	movs	r5, #40	; 0x28
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    3bc8:	movs	r4, #0
    3bca:	ldr	r0, [pc, #56]	; (3c04 <_GLOBAL__sub_I_SD+0x48>)
    3bcc:	ldr	r7, [pc, #56]	; (3c08 <_GLOBAL__sub_I_SD+0x4c>)
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3bce:	ldr	r6, [pc, #60]	; (3c0c <_GLOBAL__sub_I_SD+0x50>)
    3bd0:	strb.w	r5, [r3, #1195]	; 0x4ab
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    3bd4:	strb.w	r4, [r3, #1172]	; 0x494
    3bd8:	strb.w	r4, [r3, #1198]	; 0x4ae
    3bdc:	str	r0, [r3, #0]
    3bde:	str.w	r7, [r3, #1176]	; 0x498
    3be2:	str.w	r6, [r3, #1184]	; 0x4a0
    3be6:	str.w	r4, [r3, #1148]	; 0x47c
    3bea:	str.w	r4, [r3, #1152]	; 0x480
    3bee:	ldr	r2, [pc, #32]	; (3c10 <_GLOBAL__sub_I_SD+0x54>)
    3bf0:	ldr	r1, [pc, #32]	; (3c14 <_GLOBAL__sub_I_SD+0x58>)
    3bf2:	mov	r0, r3
    3bf4:	pop	{r4, r5, r6, r7}
    3bf6:	b.w	af40 <__aeabi_atexit>
    3bfa:	nop
    3bfc:	.word	0x1fff16f4
    3c00:	.word	0x000100f4
    3c04:	.word	0x0000ff7c
    3c08:	.word	0x0001009c
    3c0c:	.word	0x38011001
    3c10:	.word	0x1fff0970
    3c14:	.word	0x0000399d

00003c18 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    3c18:	push	{r3, r4, r5, lr}
    3c1a:	movs	r1, #10
    3c1c:	mov	r5, r0
    3c1e:	ldr	r0, [pc, #40]	; (3c48 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    3c20:	ldr	r4, [pc, #40]	; (3c4c <dbgPrint(unsigned short)+0x34>)
    3c22:	bl	9784 <usb_serial_write>
    3c26:	movs	r1, #13
    3c28:	ldr	r0, [pc, #36]	; (3c50 <dbgPrint(unsigned short)+0x38>)
    3c2a:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3c2e:	movs	r0, #46	; 0x2e
    3c30:	bl	988c <usb_serial_putchar>
    3c34:	mov	r1, r5
    3c36:	mov	r0, r4
    3c38:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    3c3c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    3c3e:	ldmia.w	sp!, {r3, r4, r5, lr}
    3c42:	b.w	aca0 <Print::println()>
    3c46:	nop
    3c48:	.word	0x0000ff90
    3c4c:	.word	0x1fff098c
    3c50:	.word	0x0000ff9c

00003c54 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
    3c54:	push	{r4, lr}
    3c56:	mov	r4, r0
  bool rtn = sync();
    3c58:	bl	5194 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    3c5c:	movs	r3, #0
    3c5e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    3c62:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    3c66:	pop	{r4, pc}

00003c68 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3c68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3c6c:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3c70:	mov	r9, r0
    3c72:	mov	r8, r1
    3c74:	mov	r5, r2
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3c76:	ldmia.w	r3, {r0, r1, r2}
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
    3c7a:	sub	sp, #20
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
    3c7c:	ldrb.w	r3, [r9, #49]	; 0x31
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
    3c80:	add	r6, sp, #4
    3c82:	stmia.w	r6, {r0, r1, r2}
  size_t n = 0;
  if (!isOpen()) {
    3c86:	cmp	r3, #0
    3c88:	beq.n	3d00 <ExFatFile::getName(char*, unsigned int)+0x98>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3c8a:	ldrb.w	r3, [r9, #48]	; 0x30
    3c8e:	cmp	r3, #1
    3c90:	bls.n	3d22 <ExFatFile::getName(char*, unsigned int)+0xba>
    3c92:	movs	r7, #1
    3c94:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
    3c96:	cmp	r7, #1
    3c98:	ite	eq
    3c9a:	moveq	r2, #64	; 0x40
    3c9c:	movne	r2, #32
    3c9e:	mov	r1, r6
    3ca0:	ldr.w	r0, [r9, #32]
    3ca4:	bl	4afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    3ca8:	cmp	r0, #1
    3caa:	bne.n	3d1a <ExFatFile::getName(char*, unsigned int)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    3cac:	movs	r2, #0
    3cae:	mov	r1, r6
    3cb0:	ldr.w	r0, [r9, #32]
    3cb4:	bl	4a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    3cb8:	cbz	r0, 3d12 <ExFatFile::getName(char*, unsigned int)+0xaa>
    3cba:	ldrb	r3, [r0, #0]
    3cbc:	cmp	r3, #193	; 0xc1
    3cbe:	bne.n	3d12 <ExFatFile::getName(char*, unsigned int)+0xaa>
    3cc0:	add.w	r1, r0, #30
    3cc4:	add.w	r2, r8, r4
    3cc8:	mov	r3, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
    3cca:	adds	r4, #1
    3ccc:	cmp	r4, r5
    3cce:	bcs.n	3cf2 <ExFatFile::getName(char*, unsigned int)+0x8a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    3cd0:	ldrh.w	r3, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3cd4:	cmp	r3, #126	; 0x7e
    3cd6:	ite	ls
    3cd8:	uxtbls	r3, r3
    3cda:	movhi	r3, #63	; 0x3f
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3cdc:	cmp	r0, r1
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    3cde:	strb.w	r3, [r2], #1
    3ce2:	mov	r3, r4
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
    3ce4:	bne.n	3cca <ExFatFile::getName(char*, unsigned int)+0x62>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3ce6:	adds	r7, #1
    3ce8:	ldrb.w	r2, [r9, #48]	; 0x30
    3cec:	uxtb	r7, r7
    3cee:	cmp	r2, r7
    3cf0:	bhi.n	3c96 <ExFatFile::getName(char*, unsigned int)+0x2e>
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3cf2:	movs	r2, #0
  return n;
    3cf4:	mov	r0, r3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
    3cf6:	strb.w	r2, [r8, r3]
  return n;

 fail:
  *name = 0;
  return 0;
}
    3cfa:	add	sp, #20
    3cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
    3d00:	movs	r0, #81	; 0x51
    3d02:	bl	3c18 <dbgPrint(unsigned short)>
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
    3d06:	movs	r0, #0
    3d08:	strb.w	r0, [r8]
  return 0;
}
    3d0c:	add	sp, #20
    3d0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
    3d12:	movs	r0, #92	; 0x5c
    3d14:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    3d18:	b.n	3d06 <ExFatFile::getName(char*, unsigned int)+0x9e>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
      DBG_FAIL_MACRO;
    3d1a:	movs	r0, #86	; 0x56
    3d1c:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    3d20:	b.n	3d06 <ExFatFile::getName(char*, unsigned int)+0x9e>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
    3d22:	movs	r3, #0
    3d24:	b.n	3cf2 <ExFatFile::getName(char*, unsigned int)+0x8a>
    3d26:	nop

00003d28 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    3d28:	push	{r3, r4, r5, lr}
    3d2a:	mov	r5, r1
  if (isOpen()) {
    3d2c:	ldrb.w	r1, [r0, #49]	; 0x31
    3d30:	cbnz	r1, 3d4a <ExFatFile::openRoot(ExFatVolume*)+0x22>
    3d32:	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    3d34:	movs	r2, #56	; 0x38
    3d36:	bl	c37c <memset>
  m_attributes = FILE_ATTR_ROOT;
    3d3a:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3d3c:	movs	r0, #1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    3d3e:	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    3d42:	strb.w	r0, [r4, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    3d46:	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    3d48:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    3d4a:	mov.w	r0, #444	; 0x1bc
    3d4e:	bl	3c18 <dbgPrint(unsigned short)>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    3d52:	movs	r0, #0
    3d54:	pop	{r3, r4, r5, pc}
    3d56:	nop

00003d58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    3d58:	push	{r4, r5, r6, r7, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    3d5a:	ldrb	r0, [r1, #0]
    3d5c:	cmp	r0, #32
    3d5e:	bne.n	3d68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x10>
    3d60:	ldrb.w	r0, [r1, #1]!
    3d64:	cmp	r0, #32
    3d66:	beq.n	3d60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8>
    path++;
  }
  fname->lfn = path;
    3d68:	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    3d6a:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    3d6c:	cmp	r0, #0
    3d6e:	beq.n	3e14 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbc>
    3d70:	cmp	r0, #47	; 0x2f
    3d72:	beq.n	3dcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3d74:	cmp	r0, #92	; 0x5c
    3d76:	beq.n	3dba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3d78:	sub.w	r4, r0, #34	; 0x22
    3d7c:	uxtb	r4, r4
    3d7e:	cmp	r4, #29
    3d80:	bls.n	3dbe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x66>
    3d82:	ldr.w	lr, [pc, #148]	; 3e18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>
    3d86:	adds	r6, r1, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3d88:	movs	r4, #0
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    3d8a:	cmp	r0, #124	; 0x7c
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3d8c:	sub.w	r5, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3d90:	mov	r7, r6
    3d92:	beq.n	3dba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    3d94:	cmp	r5, #94	; 0x5e
    3d96:	bhi.n	3dba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    3d98:	ldrb.w	r0, [r6], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    3d9c:	sub.w	r5, r0, #34	; 0x22
    3da0:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3da2:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    3da4:	cbz	r0, 3e06 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xae>
    3da6:	cmp	r0, #47	; 0x2f
    3da8:	beq.n	3dce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
    3daa:	cmp	r0, #92	; 0x5c
    3dac:	lsr.w	r7, lr, r5
    3db0:	beq.n	3dba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x62>
    3db2:	cmp	r5, #29
    3db4:	bhi.n	3d8a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
    3db6:	lsls	r5, r7, #31
    3db8:	bpl.n	3d8a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x32>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3dba:	movs	r0, #0
    3dbc:	pop	{r4, r5, r6, r7, pc}
    3dbe:	ldr	r5, [pc, #88]	; (3e18 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc0>)
    3dc0:	lsr.w	r4, r5, r4
    3dc4:	lsls	r6, r4, #31
    3dc6:	bpl.n	3d82 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2a>
    3dc8:	movs	r0, #0
    3dca:	pop	{r4, r5, r6, r7, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    3dcc:	movs	r4, #0
    3dce:	adds	r7, r1, r4
    3dd0:	mov	r6, r7
    3dd2:	mov	r5, r4
    3dd4:	movs	r0, #47	; 0x2f
    3dd6:	b.n	3dde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x86>
    3dd8:	ldrb.w	r0, [r6, #1]!
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    3ddc:	adds	r5, #1
    3dde:	cmp	r0, #32
    3de0:	beq.n	3dd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
    3de2:	cmp	r0, #47	; 0x2f
    3de4:	beq.n	3dd8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x80>
  *ptr = &path[end];
    3de6:	add	r1, r5
    3de8:	str	r1, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    3dea:	cbz	r4, 3dfe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    3dec:	mov	r1, r7
    c = path[len - 1];
    3dee:	ldrb.w	r3, [r1, #-1]!
    if (c != '.' && c != ' ') {
    3df2:	cmp	r3, #46	; 0x2e
    3df4:	beq.n	3dfa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa2>
    3df6:	cmp	r3, #32
    3df8:	bne.n	3e0c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xb4>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    3dfa:	subs	r4, #1
    3dfc:	bne.n	3dee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    3dfe:	mov	r0, r4
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    3e00:	str	r0, [r2, #0]
  return true;
    3e02:	movs	r0, #1
    3e04:	pop	{r4, r5, r6, r7, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3e06:	str	r7, [r3, #0]
    3e08:	adds	r7, r1, r4
    3e0a:	b.n	3dec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    3e0c:	cmp	r4, #255	; 0xff
    3e0e:	ble.n	3dfe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa6>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    3e10:	movs	r0, #0
    3e12:	pop	{r4, r5, r6, r7, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    3e14:	str	r1, [r3, #0]
    3e16:	b.n	3e00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa8>
    3e18:	.word	0x35000101

00003e1c <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3e1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e20:	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3e24:	lsls	r5, r3, #31

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    3e26:	sub	sp, #12
    3e28:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    3e2a:	bpl.w	3ff6 <ExFatFile::read(void*, unsigned int)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3e2e:	lsls	r0, r3, #25
    3e30:	mov	r5, r1
    3e32:	mov	r6, r2
    3e34:	bpl.w	3f7e <ExFatFile::read(void*, unsigned int)+0x162>
    if ((m_curPosition + count) > m_validLength) {
    3e38:	ldrd	r0, r1, [r4]
    3e3c:	ldrd	r2, r3, [r4, #16]
    3e40:	adds.w	r8, r0, r6
    3e44:	adc.w	r9, r1, #0
    3e48:	cmp	r3, r9
    3e4a:	it	eq
    3e4c:	cmpeq	r2, r8
    3e4e:	bcc.w	3f8a <ExFatFile::read(void*, unsigned int)+0x16e>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3e52:	cmp	r6, #0
    3e54:	beq.w	3f8e <ExFatFile::read(void*, unsigned int)+0x172>
    3e58:	mov	r9, r4
    3e5a:	ldrd	r2, r3, [r9], #24
    3e5e:	mov	r8, r6
    3e60:	b.n	3f02 <ExFatFile::read(void*, unsigned int)+0xe6>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
    3e62:	orrs	r3, r2
    3e64:	bne.n	3f40 <ExFatFile::read(void*, unsigned int)+0x124>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    3e66:	ldrb.w	r3, [r4, #49]	; 0x31
    3e6a:	lsls	r2, r3, #25
    3e6c:	ite	mi
    3e6e:	ldrmi.w	r1, [r0, #1068]	; 0x42c
    3e72:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    3e74:	str	r1, [r4, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    3e76:	ldrb.w	ip, [r0, #1085]	; 0x43d
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    3e7a:	ldr.w	r2, [r0, #1060]	; 0x424
    3e7e:	subs	r1, #2
    3e80:	lsrs	r7, r7, #9
    3e82:	lsl.w	lr, r1, ip
    3e86:	adds	r1, r7, r2
    3e88:	add	r1, lr
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
    3e8a:	cmp.w	sl, #0
    3e8e:	bne.n	3f16 <ExFatFile::read(void*, unsigned int)+0xfa>
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    3e90:	cmp.w	r8, #512	; 0x200
    3e94:	bcc.n	3f16 <ExFatFile::read(void*, unsigned int)+0xfa>
    3e96:	ldr.w	r2, [r0, #532]	; 0x214
                          || sector == m_vol->dataCacheSector()) {
    3e9a:	cmp	r1, r2
    3e9c:	beq.n	3f16 <ExFatFile::read(void*, unsigned int)+0xfa>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    3e9e:	cmp.w	r8, #1024	; 0x400
    3ea2:	bcc.n	3f4e <ExFatFile::read(void*, unsigned int)+0x132>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    3ea4:	movs	r3, #1
    3ea6:	lsl.w	ip, r3, ip
    3eaa:	rsb	r7, r7, ip
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    3eae:	mov.w	r3, r8, lsr #9
    3eb2:	cmp	r7, r3
    3eb4:	it	cs
    3eb6:	movcs	r7, r3
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3eb8:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    3eba:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    3ebe:	bhi.n	3ed8 <ExFatFile::read(void*, unsigned int)+0xbc>
    3ec0:	adds	r3, r7, r1
    3ec2:	cmp	r3, r2
    3ec4:	bls.n	3ed8 <ExFatFile::read(void*, unsigned int)+0xbc>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    3ec6:	add.w	r0, r0, #524	; 0x20c
    3eca:	str	r1, [sp, #4]
    3ecc:	bl	47e0 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
    3ed0:	cmp	r0, #0
    3ed2:	beq.n	3fc4 <ExFatFile::read(void*, unsigned int)+0x1a8>
    3ed4:	ldr	r0, [r4, #32]
    3ed6:	ldr	r1, [sp, #4]
    3ed8:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
    3edc:	ldr	r2, [r0, #0]
    3ede:	mov	r3, r7
    3ee0:	ldr	r7, [r2, #12]
    3ee2:	mov	r2, r5
    3ee4:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    3ee6:	cmp	r0, #0
    3ee8:	beq.n	3fba <ExFatFile::read(void*, unsigned int)+0x19e>
    3eea:	mov	r0, fp
    3eec:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    3eee:	ldrd	r2, r3, [r4]
    3ef2:	adds	r2, r2, r0
    3ef4:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3ef6:	subs.w	r8, r8, fp
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    3efa:	add	r5, fp
    m_curPosition += n;
    3efc:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    3f00:	beq.n	3f8e <ExFatFile::read(void*, unsigned int)+0x172>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    3f02:	ldr	r0, [r4, #32]
    3f04:	ldr.w	r7, [r0, #1072]	; 0x430
    3f08:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
    3f0a:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    3f0e:	cmp	r7, #0
    3f10:	beq.n	3e62 <ExFatFile::read(void*, unsigned int)+0x46>
    3f12:	ldr	r1, [r4, #24]
    3f14:	b.n	3e76 <ExFatFile::read(void*, unsigned int)+0x5a>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    3f16:	add.w	r0, r0, #524	; 0x20c
    3f1a:	movs	r2, #0
    3f1c:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    3f20:	cmp	r0, #0
    3f22:	beq.n	3f9c <ExFatFile::read(void*, unsigned int)+0x180>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    3f24:	rsb	fp, sl, #512	; 0x200
    3f28:	cmp	fp, r8
    3f2a:	it	cs
    3f2c:	movcs	fp, r8
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    3f2e:	add.w	r1, r0, sl
    3f32:	mov	r2, fp
    3f34:	mov	r0, r5
    3f36:	bl	9584 <memcpy>
    3f3a:	mov	r0, fp
    3f3c:	movs	r1, #0
    3f3e:	b.n	3eee <ExFatFile::read(void*, unsigned int)+0xd2>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    3f40:	ldrb.w	r3, [r4, #51]	; 0x33
    3f44:	lsls	r3, r3, #25
    3f46:	bpl.n	3f68 <ExFatFile::read(void*, unsigned int)+0x14c>
        m_curCluster++;
    3f48:	ldr	r1, [r4, #24]
    3f4a:	adds	r1, #1
    3f4c:	b.n	3e74 <ExFatFile::read(void*, unsigned int)+0x58>
    3f4e:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    3f52:	ldr	r3, [r0, #0]
    3f54:	mov	r2, r5
    3f56:	ldr	r3, [r3, #8]
    3f58:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    3f5a:	cbz	r0, 3fce <ExFatFile::read(void*, unsigned int)+0x1b2>
    3f5c:	mov.w	r0, #512	; 0x200
    3f60:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3f62:	mov.w	fp, #512	; 0x200
    3f66:	b.n	3eee <ExFatFile::read(void*, unsigned int)+0xd2>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    3f68:	mov	r2, r9
    3f6a:	ldr	r1, [r4, #24]
    3f6c:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    3f70:	sxtb	r0, r0
        if (fg < 0) {
    3f72:	cmp	r0, #0
    3f74:	blt.n	3fd8 <ExFatFile::read(void*, unsigned int)+0x1bc>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    3f76:	beq.n	3fe2 <ExFatFile::read(void*, unsigned int)+0x1c6>
    3f78:	ldr	r0, [r4, #32]
    3f7a:	ldr	r1, [r4, #24]
    3f7c:	b.n	3e76 <ExFatFile::read(void*, unsigned int)+0x5a>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    3f7e:	ldrb.w	r3, [r4, #49]	; 0x31
    3f82:	lsls	r1, r3, #28
    3f84:	bmi.w	3e38 <ExFatFile::read(void*, unsigned int)+0x1c>
    3f88:	b.n	3e52 <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    3f8a:	subs	r6, r2, r0
    3f8c:	b.n	3e52 <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    3f8e:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    3f92:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
    3f96:	add	sp, #12
    3f98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
        DBG_FAIL_MACRO;
    3f9c:	movw	r0, #599	; 0x257
    3fa0:	bl	3c18 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3fa4:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    3fa8:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
    3fac:	orr.w	r3, r3, #2
    3fb0:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    3fb4:	add	sp, #12
    3fb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    3fba:	mov.w	r0, #624	; 0x270
    3fbe:	bl	3c18 <dbgPrint(unsigned short)>
        goto fail;
    3fc2:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
          DBG_FAIL_MACRO;
    3fc4:	movw	r0, #619	; 0x26b
    3fc8:	bl	3c18 <dbgPrint(unsigned short)>
          goto fail;
    3fcc:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    3fce:	mov.w	r0, #632	; 0x278
    3fd2:	bl	3c18 <dbgPrint(unsigned short)>
        goto fail;
    3fd6:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
        if (fg < 0) {
          DBG_FAIL_MACRO;
    3fd8:	movw	r0, #575	; 0x23f
    3fdc:	bl	3c18 <dbgPrint(unsigned short)>
          goto fail;
    3fe0:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    3fe2:	ldrb.w	r3, [r4, #49]	; 0x31
    3fe6:	tst.w	r3, #80	; 0x50
    3fea:	bne.n	3f92 <ExFatFile::read(void*, unsigned int)+0x176>
            break;
          }
          DBG_FAIL_MACRO;
    3fec:	movw	r0, #583	; 0x247
    3ff0:	bl	3c18 <dbgPrint(unsigned short)>
          goto fail;
    3ff4:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    3ff6:	movw	r0, #555	; 0x22b
    3ffa:	bl	3c18 <dbgPrint(unsigned short)>
    goto fail;
    3ffe:	b.n	3fa4 <ExFatFile::read(void*, unsigned int)+0x188>

00004000 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
    4000:	push	{r4, r5, r6, r7, lr}
    4002:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4004:	movs	r2, #1
    4006:	add.w	r1, sp, #7
    400a:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    400c:	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    4010:	ldr	r5, [r0, #24]
    4012:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
    4016:	cmp	r0, #1
    4018:	it	eq
    401a:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    401e:	str	r5, [r4, #24]
    4020:	it	ne
    4022:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    4026:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    402a:	add	sp, #12
    402c:	pop	{r4, r5, r6, r7, pc}
    402e:	nop

00004030 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4034:	ldrb.w	ip, [r0, #49]	; 0x31
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4038:	ldr	r5, [r0, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    403a:	sub	sp, #12
    403c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    403e:	cmp.w	ip, #0
    4042:	beq.n	411a <ExFatFile::seekSet(unsigned long long)+0xea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4044:	ldrd	r0, r1, [r0]
    4048:	cmp	r1, r3
    404a:	it	eq
    404c:	cmpeq	r0, r2
    404e:	mov	r6, r2
    4050:	mov	r7, r3
    4052:	beq.n	4134 <ExFatFile::seekSet(unsigned long long)+0x104>
    return true;
  }
  if (pos == 0) {
    4054:	orrs.w	r3, r6, r7
    4058:	bne.n	406a <ExFatFile::seekSet(unsigned long long)+0x3a>
    // set position to start of file
    m_curCluster = 0;
    405a:	movs	r3, #0
    405c:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
    405e:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    4060:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4064:	add	sp, #12
    4066:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    406a:	tst.w	ip, #8
    406e:	beq.n	407c <ExFatFile::seekSet(unsigned long long)+0x4c>
    if (pos > m_validLength) {
    4070:	ldrd	r2, r3, [r4, #16]
    4074:	cmp	r3, r7
    4076:	it	eq
    4078:	cmpeq	r2, r6
    407a:	bcc.n	413c <ExFatFile::seekSet(unsigned long long)+0x10c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    407c:	ldr	r3, [r4, #32]
    407e:	str	r3, [sp, #4]
    4080:	ldrb.w	lr, [r3, #1085]	; 0x43d
  if (isContiguous()) {
    4084:	ldrb.w	sl, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4088:	add.w	lr, lr, #9
    408c:	uxtb.w	lr, lr
    4090:	adds.w	r2, r6, #4294967295
    4094:	adc.w	r3, r7, #4294967295
    4098:	rsb	r8, lr, #32
    409c:	lsl.w	fp, r3, r8
    40a0:	lsr.w	r2, r2, lr
    40a4:	orr.w	r2, r2, fp
    40a8:	sub.w	fp, lr, #32
    40ac:	lsr.w	r3, r3, fp
  if (isContiguous()) {
    40b0:	tst.w	sl, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    40b4:	orr.w	r2, r2, r3
  if (isContiguous()) {
    40b8:	bne.n	412c <ExFatFile::seekSet(unsigned long long)+0xfc>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    40ba:	adds.w	r9, r0, #4294967295
    40be:	adc.w	sl, r1, #4294967295
    40c2:	lsr.w	lr, r9, lr
    40c6:	lsl.w	r8, sl, r8
    40ca:	orr.w	lr, lr, r8
    40ce:	lsr.w	fp, sl, fp
    40d2:	orr.w	lr, lr, fp
  if (nNew < nCur || m_curPosition == 0) {
    40d6:	cmp	r2, lr
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    40d8:	mov	r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    40da:	bcc.n	40e2 <ExFatFile::seekSet(unsigned long long)+0xb2>
    40dc:	orrs.w	r3, r0, r1
    40e0:	bne.n	4146 <ExFatFile::seekSet(unsigned long long)+0x116>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    40e2:	tst.w	ip, #64	; 0x40
    40e6:	itet	ne
    40e8:	ldrne	r3, [sp, #4]
    40ea:	ldreq	r3, [r4, #28]
    40ec:	ldrne.w	r3, [r3, #1068]	; 0x42c
    40f0:	str	r3, [r4, #24]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    40f2:	mov	r8, r2
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    40f4:	add.w	r9, r4, #24
    40f8:	mov	r2, r9
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    40fa:	cmp.w	r8, #0
    40fe:	beq.n	405e <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4100:	ldr	r1, [r4, #24]
    4102:	ldr	r0, [r4, #32]
    4104:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4108:	add.w	r8, r8, #4294967295
    410c:	cmp	r0, #0
    410e:	bne.n	40f8 <ExFatFile::seekSet(unsigned long long)+0xc8>
      DBG_FAIL_MACRO;
    4110:	mov.w	r0, #700	; 0x2bc
    4114:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    4118:	b.n	4122 <ExFatFile::seekSet(unsigned long long)+0xf2>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    411a:	movw	r0, #665	; 0x299
    411e:	bl	3c18 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
    4122:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
    4124:	str	r5, [r4, #24]
  return false;
}
    4126:	add	sp, #12
    4128:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    412c:	ldr	r3, [r4, #28]
    412e:	add	r2, r3
    4130:	str	r2, [r4, #24]
    goto done;
    4132:	b.n	405e <ExFatFile::seekSet(unsigned long long)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4134:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    4136:	add	sp, #12
    4138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
      DBG_FAIL_MACRO;
    413c:	movw	r0, #679	; 0x2a7
    4140:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    4144:	b.n	4122 <ExFatFile::seekSet(unsigned long long)+0xf2>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    4146:	rsb	r2, lr, r2
    414a:	b.n	40f2 <ExFatFile::seekSet(unsigned long long)+0xc2>

0000414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    414c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4150:	mov	r5, r1
    4152:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4154:	ldrb.w	r1, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4158:	str	r2, [sp, #0]
    415a:	mov	r6, r0
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    415c:	cbnz	r1, 416a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    415e:	mov	fp, r3
    4160:	ldrb.w	r3, [r5, #49]	; 0x31
    4164:	tst.w	r3, #80	; 0x50
    4168:	bne.n	4180 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x34>
    DBG_FAIL_MACRO;
    416a:	movs	r0, #206	; 0xce
    416c:	bl	3c18 <dbgPrint(unsigned short)>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4170:	movs	r0, #0
    4172:	strb.w	r0, [r6, #49]	; 0x31
  m_flags = 0;
    4176:	strb.w	r0, [r6, #51]	; 0x33
  return false;
}
    417a:	add	sp, #76	; 0x4c
    417c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4180:	ldr	r3, [sp, #112]	; 0x70
    4182:	and.w	r3, r3, #3
    4186:	cmp	r3, #1
    4188:	beq.w	43a8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    418c:	cmp	r3, #2
    418e:	beq.n	419e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x52>
    4190:	cmp	r3, #0
    4192:	beq.w	43a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x258>
      break;
    case O_RDWR:
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;
    default:
      DBG_FAIL_MACRO;
    4196:	movs	r0, #220	; 0xdc
    4198:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    419c:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    419e:	movs	r3, #3
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    41a0:	ldr	r2, [sp, #112]	; 0x70
    41a2:	and.w	r2, r2, #8
    41a6:	orrs	r3, r2
    41a8:	str	r3, [sp, #4]
  if (name) {
    41aa:	ldr	r3, [sp, #0]
    41ac:	cmp	r3, #0
    41ae:	beq.w	43b4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x268>
    nameHash = exFatHashName(name, nameLength, 0);
    41b2:	movs	r2, #0
    41b4:	mov	r0, r3
    41b6:	mov	r1, fp
    41b8:	bl	4ce0 <exFatHashName(char const*, unsigned int, unsigned short)>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    41bc:	movs	r2, #0
    41be:	str	r0, [sp, #8]
    41c0:	movs	r3, #0
    41c2:	mov	r0, r5
    41c4:	bl	4030 <ExFatFile::seekSet(unsigned long long)>
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    41c8:	ldr	r2, [pc, #708]	; (4490 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x344>)
    41ca:	add.w	r3, fp, #14
    41ce:	smull	r1, r2, r2, r3
    41d2:	add	r2, r3
    41d4:	asrs	r3, r3, #31
    41d6:	rsb	r3, r3, r2, asr #3
    41da:	uxtb	r3, r3
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    41dc:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    41e0:	add.w	sl, r3, #2
    41e4:	str	r3, [sp, #12]
    41e6:	uxtb.w	sl, sl

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    41ea:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    41ec:	mov	r7, r9
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    41ee:	movs	r2, #32
    41f0:	add	r1, sp, #40	; 0x28
    41f2:	mov	r0, r5
    41f4:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    41f8:	cmp	r0, #0
    41fa:	beq.n	427a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      goto create;
    }
    if (n != 32) {
    41fc:	cmp	r0, #32
    41fe:	bne.w	43ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x260>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4202:	ldrb.w	r3, [sp, #40]	; 0x28
    4206:	lsls	r2, r3, #24
    4208:	bmi.n	42da <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    420a:	cmp	r4, #0
    420c:	bne.n	42d4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    420e:	ldr	r2, [r5, #0]
        freePos.cluster = dir->curCluster();
    4210:	ldr	r1, [r5, #24]
    4212:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4214:	subs	r2, #32
    4216:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    4218:	adds	r4, #1
    421a:	uxtb	r4, r4
      }
      if (!buf[0]) {
    421c:	cbz	r3, 427a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x12e>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    421e:	cmp	r3, #192	; 0xc0
    4220:	beq.w	4348 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    4224:	cmp	r3, #193	; 0xc1
    4226:	beq.n	42f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    4228:	cmp	r3, #133	; 0x85
    422a:	bne.n	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    422c:	movs	r2, #56	; 0x38
    422e:	movs	r1, #0
    4230:	mov	r0, r6
    4232:	bl	c37c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4236:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    423a:	ldrb.w	r2, [sp, #41]	; 0x29
    423e:	strb.w	r2, [r6, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4242:	lsls	r0, r3, #27
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4244:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    4248:	it	pl
    424a:	orrpl.w	r2, r2, #8
    424e:	strb.w	r2, [r6, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4252:	ldr	r3, [r5, #0]
    4254:	ldr	r1, [r5, #32]
    4256:	ldr	r2, [r5, #24]
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4258:	str	r2, [r6, #36]	; 0x24
        m_dirPos.position = dir->curPosition() - 32;
    425a:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    425c:	str	r1, [r6, #32]

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    425e:	str	r3, [r6, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4260:	ldrb.w	r3, [r5, #51]	; 0x33
    4264:	ubfx	r3, r3, #6, #1
    4268:	strb.w	r3, [r6, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    426c:	movs	r2, #32
    426e:	add	r1, sp, #40	; 0x28
    4270:	mov	r0, r5
    4272:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4276:	cmp	r0, #0
    4278:	bne.n	41fc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb0>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    427a:	ldr	r3, [sp, #112]	; 0x70
    427c:	lsls	r1, r3, #22
    427e:	bpl.w	439a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    4282:	ldr	r3, [sp, #4]
    4284:	lsls	r2, r3, #30
    4286:	bpl.w	439a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    428a:	ldr	r3, [sp, #0]
    428c:	cmp	r3, #0
    428e:	beq.w	439a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4292:	cmp	r4, sl
    4294:	bcc.n	42b2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    4296:	b.n	43c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    4298:	cmp	r0, #32
    429a:	bne.w	4486 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x33a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    429e:	cbnz	r4, 42aa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x15e>
      freePos.position = dir->curPosition() - 32;
    42a0:	ldr	r2, [r5, #0]
      freePos.cluster = dir->curCluster();
    42a2:	ldr	r1, [r5, #24]
    42a4:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    42a6:	subs	r2, #32
    42a8:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    42aa:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    42ac:	cmp	sl, r4
    42ae:	bls.w	43c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x278>
    n = dir->read(buf, 32);
    42b2:	movs	r2, #32
    42b4:	add	r1, sp, #40	; 0x28
    42b6:	mov	r0, r5
    42b8:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    42bc:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    42be:	cmp	r0, #0
    42c0:	bne.n	4298 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14c>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    42c2:	mov	r0, r5
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    42c4:	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    42c6:	bl	51fc <ExFatFile::addDirCluster()>
    42ca:	cmp	r0, #0
    42cc:	beq.w	44e2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x396>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    42d0:	str	r7, [r5, #24]
      continue;
    42d2:	b.n	42ac <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    42d4:	cmp	r4, sl
    42d6:	bcs.n	421c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd0>
    42d8:	b.n	4218 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xcc>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    42da:	cmp.w	r9, #0
    42de:	bne.n	421e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
      if (freeCount < freeNeed) {
        freeCount = 0;
    42e0:	cmp	r4, sl
    42e2:	it	cc
    42e4:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    42e6:	cmp	r3, #133	; 0x85
    42e8:	bne.n	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        continue;
      }
      inSet = true;
    42ea:	mov.w	r9, #1
    42ee:	b.n	422c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe0>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    42f0:	rsb	r8, r7, fp
    42f4:	uxtb.w	r8, r8
    42f8:	cmp.w	r8, #15
    42fc:	it	cs
    42fe:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4302:	mov	r3, r8
    4304:	mov	r2, r7
    4306:	ldr	r1, [sp, #0]
    4308:	add	r0, sp, #40	; 0x28
    430a:	bl	4d1c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    430e:	cmp	r0, #0
    4310:	beq.n	4388 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x23c>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4312:	add	r7, r8
    4314:	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4316:	cmp	fp, r7
    4318:	bne.w	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    431c:	ldr	r3, [sp, #112]	; 0x70
    431e:	lsls	r3, r3, #20
    4320:	bmi.n	43ba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x26e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4322:	ldr	r3, [sp, #112]	; 0x70
    4324:	tst.w	r3, #17408	; 0x4400
    4328:	bne.w	4494 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
    432c:	ldrb.w	r3, [r6, #51]	; 0x33
    4330:	lsls	r7, r3, #30
    4332:	bmi.w	4494 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x348>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4336:	ldr	r3, [sp, #112]	; 0x70
    4338:	lsls	r3, r3, #21
    433a:	bpl.w	44d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
      DBG_FAIL_MACRO;
    433e:	mov.w	r0, #334	; 0x14e
    4342:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    4346:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4348:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    434c:	ldr	r2, [sp, #4]
    434e:	strb.w	r2, [r6, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4352:	lsls	r1, r3, #30
    4354:	bpl.n	435e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x212>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4356:	orr.w	r3, r2, #64	; 0x40
    435a:	strb.w	r3, [r6, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    435e:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4362:	ldrd	r0, r1, [sp, #64]	; 0x40
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4366:	strd	r2, r3, [r6, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
    436a:	ldr	r3, [sp, #60]	; 0x3c
    436c:	str	r3, [r6, #28]
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
    436e:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4370:	strd	r0, r1, [r6, #8]
        if (!name) {
    4374:	cmp	r3, #0
    4376:	beq.n	431c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4378:	ldrb.w	r3, [sp, #43]	; 0x2b
    437c:	cmp	r3, fp
    437e:	beq.n	438c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    4380:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4384:	mov	r7, r9
    4386:	b.n	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4388:	mov	r9, r0
    438a:	b.n	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    438c:	ldrh.w	r3, [sp, #44]	; 0x2c
    4390:	ldr	r2, [sp, #8]
    4392:	cmp	r3, r2
    4394:	bne.n	4380 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x234>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4396:	movs	r7, #0
    4398:	b.n	41ee <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa2>
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    439a:	movw	r0, #355	; 0x163
    439e:	bl	3c18 <dbgPrint(unsigned short)>
    goto fail;
    43a2:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    43a4:	movs	r3, #1
    43a6:	b.n	41a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    43a8:	movs	r3, #2
    43aa:	b.n	41a0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x54>
    n = dir->read(buf, 32);
    if (n == 0) {
      goto create;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    43ac:	movs	r0, #236	; 0xec
    43ae:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    43b2:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    43b4:	ldr	r3, [sp, #0]
    43b6:	str	r3, [sp, #8]
    43b8:	b.n	41c8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x7c>
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    43ba:	mov.w	r0, #320	; 0x140
    43be:	bl	3c18 <dbgPrint(unsigned short)>
    goto fail;
    43c2:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    43c4:	ldrb.w	r3, [r5, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    43c8:	movs	r2, #56	; 0x38
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    43ca:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    43ce:	movs	r1, #0
    43d0:	mov	r0, r6
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    43d2:	add.w	r8, sp, #28
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    43d6:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    43da:	bl	c37c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    43de:	ldr	r4, [sp, #12]
    43e0:	ldr	r3, [r5, #32]
    43e2:	str.w	fp, [sp, #12]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    43e6:	ldmia.w	r8, {r0, r1, r2}
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    43ea:	add.w	r9, r4, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    43ee:	movs	r4, #8
    43f0:	strb.w	r4, [r6, #49]	; 0x31
    43f4:	add.w	r7, fp, #30
  m_dirPos = freePos;
    43f8:	add.w	r4, r6, #36	; 0x24
    43fc:	ldr.w	fp, [sp]
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4400:	str	r3, [r6, #32]
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4402:	uxtb.w	r9, r9

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4406:	stmia.w	r4, {r0, r1, r2}
    440a:	uxtb	r7, r7
  for (uint8_t i = 0; i < freeNeed; i++) {
    440c:	movs	r5, #0
    440e:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4410:	movs	r2, #1
    4412:	mov	r1, r8
    4414:	bl	4a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4418:	mov	r4, r0
    441a:	cmp	r0, #0
    441c:	beq.n	44ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
    441e:	ldrsb.w	r3, [r0]
    4422:	cmp	r3, #0
    4424:	blt.n	44ce <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x382>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4426:	movs	r2, #32
    4428:	movs	r1, #0
    442a:	bl	c37c <memset>
    if (i == 0) {
    442e:	cmp	r5, #0
    4430:	beq.w	4542 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3f6>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
    4434:	cmp	r5, #1
    4436:	beq.n	4522 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d6>
    4438:	rsb	r3, r5, r5, lsl #4
    443c:	cmp	r7, #15
    443e:	sub.w	r3, r3, #30

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4442:	mov.w	r2, #193	; 0xc1
    4446:	mov	r1, r7
    4448:	it	cs
    444a:	movcs	r1, #15
    444c:	uxtb	r3, r3
    444e:	strb	r2, [r4, #0]
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4450:	cbz	r1, 4468 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4452:	adds	r4, #2
    4454:	sxth	r1, r1
    4456:	add.w	r1, r4, r1, lsl #1
    445a:	add	r3, fp
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    445c:	ldrb.w	r2, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4460:	strh.w	r2, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4464:	cmp	r1, r4
    4466:	bne.n	445c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x310>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4468:	adds	r5, #1
    446a:	uxtb	r5, r5
    446c:	cmp	sl, r5
    446e:	bls.n	44f6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3aa>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4470:	movs	r2, #32
    4472:	mov	r1, r8
    4474:	ldr	r0, [r6, #32]
    4476:	bl	4afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    447a:	cmp	r0, #1
    447c:	bne.n	44ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3a0>
    447e:	subs	r7, #15
    4480:	ldr	r0, [r6, #32]
    4482:	uxtb	r7, r7
    4484:	b.n	4410 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2c4>
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
      DBG_FAIL_MACRO;
    4486:	mov.w	r0, #370	; 0x172
    448a:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    448e:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    4490:	.word	0x88888889
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4494:	ldrb.w	r3, [r6, #49]	; 0x31
    4498:	tst.w	r3, #17
    449c:	bne.n	44c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x378>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    449e:	ldr	r3, [sp, #112]	; 0x70
    44a0:	lsls	r5, r3, #21
    44a2:	bpl.n	44d8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x38c>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    44a4:	ldrb.w	r3, [r6, #51]	; 0x33
    44a8:	lsls	r4, r3, #30
    44aa:	bpl.w	433e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f2>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    44ae:	movs	r2, #0
    44b0:	movs	r3, #0
    44b2:	mov	r0, r6
    44b4:	bl	4030 <ExFatFile::seekSet(unsigned long long)>
    44b8:	cbnz	r0, 4516 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3ca>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
    44ba:	mov.w	r0, #338	; 0x152
    44be:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    44c2:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
      DBG_FAIL_MACRO;
    44c4:	mov.w	r0, #326	; 0x146
    44c8:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    44cc:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    if (!cache || (cache[0] & 0x80)) {
      DBG_FAIL_MACRO;
    44ce:	mov.w	r0, #394	; 0x18a
    44d2:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    44d6:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    44d8:	ldr	r3, [sp, #112]	; 0x70
    44da:	lsls	r0, r3, #17
    44dc:	bmi.n	44fe <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3b2>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    44de:	movs	r0, #1
    44e0:	b.n	417a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
        DBG_FAIL_MACRO;
    44e2:	movw	r0, #363	; 0x16b
    44e6:	bl	3c18 <dbgPrint(unsigned short)>
        goto fail;
    44ea:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
    44ec:	mov.w	r0, #388	; 0x184
    44f0:	bl	3c18 <dbgPrint(unsigned short)>
        goto fail;
    44f4:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    44f6:	mov	r0, r6
    44f8:	bl	5194 <ExFatFile::sync()>
    44fc:	b.n	417a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    44fe:	ldrd	r2, r3, [r6, #16]
    4502:	mov	r0, r6
    4504:	bl	4030 <ExFatFile::seekSet(unsigned long long)>
    4508:	cmp	r0, #0
    450a:	bne.n	44de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
    DBG_FAIL_MACRO;
    450c:	mov.w	r0, #342	; 0x156
    4510:	bl	3c18 <dbgPrint(unsigned short)>
    goto fail;
    4514:	b.n	4170 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x24>
    4516:	mov	r0, r6
    4518:	bl	5564 <ExFatFile::truncate()>
    451c:	cmp	r0, #0
    451e:	beq.n	44ba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36e>
    4520:	b.n	44de <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x392>
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4522:	movs	r3, #192	; 0xc0
    4524:	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4526:	ldr	r3, [sp, #4]
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4528:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    452a:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    452e:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4530:	strb.w	r3, [r6, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4534:	ldrb.w	r3, [sp, #12]
    4538:	strb	r3, [r4, #3]
    453a:	ldrh.w	r3, [sp, #8]
    453e:	strh	r3, [r4, #4]
    4540:	b.n	4468 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4542:	movs	r3, #133	; 0x85
    4544:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
    4546:	ldr	r3, [pc, #48]	; (4578 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x42c>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4548:	strb.w	r9, [r6, #48]	; 0x30
      dirFile->setCount = m_setCount;
    454c:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    4550:	ldr	r3, [r3, #0]
    4552:	cmp	r3, #0
    4554:	beq.n	4468 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4556:	add.w	r2, sp, #23
    455a:	add.w	r1, sp, #26
    455e:	add	r0, sp, #24
    4560:	blx	r3
        dirFile->createTimeMs = ms10;
    4562:	ldrb.w	r1, [sp, #23]
    4566:	ldrh.w	r2, [sp, #26]
    456a:	ldrh.w	r3, [sp, #24]
    456e:	strb	r1, [r4, #20]
    4570:	strh	r2, [r4, #8]
    4572:	strh	r3, [r4, #10]
    4574:	b.n	4468 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x31c>
    4576:	nop
    4578:	.word	0x1fff1ba4

0000457c <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    457c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4580:	mov	r6, r0
    4582:	sub	sp, #84	; 0x54
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4584:	ldrb.w	r4, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4588:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    458a:	movs	r0, #0
    458c:	strb.w	r0, [sp, #73]	; 0x49
    4590:	strb.w	r0, [sp, #74]	; 0x4a
    4594:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4598:	cmp	r4, #0
    459a:	bne.n	4638 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    459c:	mov	r9, r3
    459e:	ldrb.w	r3, [r1, #49]	; 0x31
    45a2:	tst.w	r3, #80	; 0x50
    45a6:	mov	r5, r1
    45a8:	beq.n	4638 <ExFatFile::open(ExFatFile*, char const*, int)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    45aa:	ldrb	r3, [r2, #0]
    45ac:	cmp	r3, #47	; 0x2f
    45ae:	mov	r1, r2
    45b0:	beq.n	461a <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    45b2:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    45b6:	add	r3, sp, #12
    45b8:	add	r2, sp, #16
    45ba:	mov	r0, r6
    45bc:	bl	3d58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    45c0:	mov	r4, r0
    45c2:	cmp	r0, #0
    45c4:	beq.n	4648 <ExFatFile::open(ExFatFile*, char const*, int)+0xcc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    45c6:	ldr	r3, [sp, #12]
    45c8:	ldrb	r3, [r3, #0]
    45ca:	cmp	r3, #0
    45cc:	beq.n	4656 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    45ce:	ldrb.w	r3, [sp, #16]
    45d2:	ldr	r2, [sp, #20]
    45d4:	str.w	r8, [sp]
    45d8:	mov	r1, r5
    45da:	mov	r0, r6
    45dc:	bl	414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    45e0:	mov	r4, r0
    45e2:	cmp	r0, #0
    45e4:	beq.n	4672 <ExFatFile::open(ExFatFile*, char const*, int)+0xf6>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    45e6:	mov	r4, r6
    45e8:	add	r7, sp, #24
    45ea:	add.w	lr, r6, #48	; 0x30
    45ee:	ldr	r0, [r4, #0]
    45f0:	ldr	r1, [r4, #4]
    45f2:	ldr	r2, [r4, #8]
    45f4:	ldr	r3, [r4, #12]
    45f6:	mov	r5, r7
    45f8:	stmia	r5!, {r0, r1, r2, r3}
    45fa:	adds	r4, #16
    45fc:	cmp	r4, lr
    45fe:	mov	r7, r5
    4600:	bne.n	45ee <ExFatFile::open(ExFatFile*, char const*, int)+0x72>
    4602:	ldr	r0, [r4, #0]
    4604:	str	r0, [r5, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4606:	mov	r0, r6
    4608:	bl	5194 <ExFatFile::sync()>
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    460c:	add	r5, sp, #24
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    460e:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    4612:	strb.w	r8, [r6, #51]	; 0x33
    4616:	ldr	r1, [sp, #12]
    4618:	b.n	45b6 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    461a:	adds	r1, #1
    461c:	str	r1, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    461e:	ldrb	r3, [r1, #0]
    4620:	cmp	r3, #47	; 0x2f
    4622:	beq.n	461a <ExFatFile::open(ExFatFile*, char const*, int)+0x9e>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4624:	ldr	r1, [r5, #32]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    4626:	cbz	r3, 4680 <ExFatFile::open(ExFatFile*, char const*, int)+0x104>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4628:	add	r0, sp, #24
    462a:	bl	3d28 <ExFatFile::openRoot(ExFatVolume*)>
    462e:	mov	r4, r0
    4630:	cbz	r0, 468a <ExFatFile::open(ExFatFile*, char const*, int)+0x10e>
    4632:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4634:	add	r5, sp, #24
    4636:	b.n	45b2 <ExFatFile::open(ExFatFile*, char const*, int)+0x36>
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    4638:	movs	r0, #125	; 0x7d
    463a:	bl	3c18 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    463e:	movs	r4, #0
}
    4640:	mov	r0, r4
    4642:	add	sp, #84	; 0x54
    4644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    4648:	movs	r0, #143	; 0x8f
    464a:	bl	3c18 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    464e:	mov	r0, r4
    4650:	add	sp, #84	; 0x54
    4652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4656:	ldrb.w	r3, [sp, #16]
    465a:	ldr	r2, [sp, #20]
    465c:	str.w	r9, [sp]
    4660:	mov	r1, r5
    4662:	mov	r0, r6
    4664:	bl	414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    4668:	mov	r4, r0
    466a:	mov	r0, r4
    466c:	add	sp, #84	; 0x54
    466e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    4672:	movs	r0, #150	; 0x96
    4674:	bl	3c18 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    4678:	mov	r0, r4
    467a:	add	sp, #84	; 0x54
    467c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4680:	mov	r0, r6
    4682:	bl	3d28 <ExFatFile::openRoot(ExFatVolume*)>
    4686:	mov	r4, r0
    4688:	b.n	4640 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    468a:	movs	r0, #136	; 0x88
    468c:	bl	3c18 <dbgPrint(unsigned short)>
      goto fail;
    4690:	b.n	4640 <ExFatFile::open(ExFatFile*, char const*, int)+0xc4>
    4692:	nop

00004694 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4694:	cbz	r1, 469e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4696:	add.w	r1, r1, #1088	; 0x440
    469a:	b.w	457c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    469e:	mov	r0, r1
    46a0:	bx	lr
    46a2:	nop

000046a4 <ExFatFile::openNext(ExFatFile*, int)>:
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    46a4:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    46a6:	ldrb.w	r3, [r0, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    46aa:	sub	sp, #12
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    46ac:	cbnz	r3, 46b8 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    46ae:	ldrb.w	r5, [r1, #49]	; 0x31
    46b2:	tst.w	r5, #80	; 0x50
    46b6:	bne.n	46c4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    DBG_FAIL_MACRO;
    46b8:	movs	r0, #176	; 0xb0
    46ba:	bl	3c18 <dbgPrint(unsigned short)>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
    46be:	movs	r0, #0
}
    46c0:	add	sp, #12
    46c2:	pop	{r4, r5, pc}
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    46c4:	ldrd	r4, r5, [r1]
    46c8:	movs	r5, #0
    46ca:	and.w	r4, r4, #31
    46ce:	orrs	r4, r5
    46d0:	bne.n	46b8 <ExFatFile::openNext(ExFatFile*, int)+0x14>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
    46d2:	str	r2, [sp, #0]
    46d4:	mov	r2, r3
    46d6:	bl	414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
    46da:	add	sp, #12
    46dc:	pop	{r4, r5, pc}
    46de:	nop

000046e0 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    46e0:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    46e2:	movs	r1, #10
    46e4:	mov	r5, r0
    46e6:	ldr	r0, [pc, #40]	; (4710 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    46e8:	ldr	r4, [pc, #40]	; (4714 <dbgPrint(unsigned short)+0x34>)
    46ea:	bl	9784 <usb_serial_write>
    46ee:	movs	r1, #18
    46f0:	ldr	r0, [pc, #36]	; (4718 <dbgPrint(unsigned short)+0x38>)
    46f2:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    46f6:	movs	r0, #46	; 0x2e
    46f8:	bl	988c <usb_serial_putchar>
    46fc:	mov	r1, r5
    46fe:	mov	r0, r4
    4700:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4704:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4706:	ldmia.w	sp!, {r3, r4, r5, lr}
    470a:	b.w	aca0 <Print::println()>
    470e:	nop
    4710:	.word	0x0000ff90
    4714:	.word	0x1fff098c
    4718:	.word	0x0000ffac

0000471c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    471c:	push	{r3, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    471e:	add.w	r2, r0, #12

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4722:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
    4724:	ldr	r0, [r0, #4]
    4726:	ldr	r1, [r4, #8]
    4728:	ldr	r3, [r0, #0]
    472a:	ldr	r3, [r3, #24]
    472c:	blx	r3
    472e:	mov	r5, r0
    4730:	cbz	r0, 473e <FsCache::sync() [clone .part.2]+0x22>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4732:	ldrb	r3, [r4, #0]
    4734:	bic.w	r3, r3, #1
    4738:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    473a:	mov	r0, r5
    473c:	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
      DBG_FAIL_MACRO;
    473e:	movs	r0, #64	; 0x40
    4740:	bl	46e0 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    4744:	mov	r0, r5
    4746:	pop	{r3, r4, r5, pc}

00004748 <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    4748:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
    474a:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    474e:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
    4750:	str	r3, [r0, #8]
    4752:	bx	lr

00004754 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    4754:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_blockDev) {
    4758:	ldr	r4, [r0, #4]
    475a:	cmp	r4, #0
    475c:	beq.n	47d4 <FsCache::get(unsigned long, unsigned char)+0x80>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    475e:	ldr	r3, [r0, #8]
    4760:	cmp	r3, r1
    4762:	mov	r6, r0
    4764:	mov	r8, r1
    4766:	mov	r7, r2
    4768:	beq.n	478c <FsCache::get(unsigned long, unsigned char)+0x38>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    476a:	ldrb	r3, [r0, #0]
    476c:	lsls	r2, r3, #31
    476e:	bmi.n	479c <FsCache::get(unsigned long, unsigned char)+0x48>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    4770:	lsls	r3, r7, #30
    4772:	bpl.n	47b2 <FsCache::get(unsigned long, unsigned char)+0x5e>
    4774:	add.w	r5, r6, #12
    4778:	movs	r3, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    477a:	and.w	r7, r7, #1
    477e:	orrs	r7, r3
    4780:	strb	r7, [r6, #0]
    4782:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    4784:	str.w	r8, [r6, #8]
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    478c:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    4790:	and.w	r7, r7, #1
    4794:	orrs	r7, r3
    4796:	strb	r7, [r6, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
    4798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    479c:	bl	471c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    47a0:	mov	r4, r0
    47a2:	cmp	r0, #0
    47a4:	bne.n	4770 <FsCache::get(unsigned long, unsigned char)+0x1c>
      DBG_FAIL_MACRO;
    47a6:	movs	r0, #42	; 0x2a
    47a8:	bl	46e0 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    47ac:	mov	r0, r4
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    47ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
    47b2:	ldr	r0, [r6, #4]
    47b4:	ldr	r3, [r0, #0]
    47b6:	add.w	r5, r6, #12
    47ba:	ldr	r3, [r3, #8]
    47bc:	mov	r2, r5
    47be:	mov	r1, r8
    47c0:	blx	r3
    47c2:	mov	r4, r0
    47c4:	cmp	r0, #0
    47c6:	bne.n	4778 <FsCache::get(unsigned long, unsigned char)+0x24>
        DBG_FAIL_MACRO;
    47c8:	movs	r0, #47	; 0x2f
    47ca:	bl	46e0 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    47ce:	mov	r0, r4
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
        DBG_FAIL_MACRO;
        goto fail;
    47d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_sector = 0XFFFFFFFF;
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    47d4:	movs	r0, #37	; 0x25
    47d6:	bl	46e0 <dbgPrint(unsigned short)>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
    47da:	mov	r0, r4
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
    47dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000047e0 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    47e0:	ldrb	r3, [r0, #0]
    47e2:	lsls	r3, r3, #31
    47e4:	bmi.n	47ea <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    47e6:	movs	r0, #1
    47e8:	bx	lr
    47ea:	b.w	471c <FsCache::sync() [clone .part.2]>
    47ee:	nop

000047f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    47f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47f4:	mov	r8, r0
    47f6:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    47f8:	mov	fp, r1
    47fa:	cmp	r1, #0
    47fc:	beq.n	4888 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
    47fe:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    4800:	ldr.w	r3, [r8, #1064]	; 0x428
    4804:	cmp	r7, r3
    4806:	bcs.n	4880 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x90>
    4808:	and.w	r5, r7, #7
    480c:	movs	r3, #1
    480e:	lsl.w	r5, r3, r5
    4812:	uxtb	r5, r5
    4814:	ubfx	sl, r7, #3, #9
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    4818:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    481a:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    481c:	ldr.w	r1, [r8, #1060]	; 0x424
    4820:	movs	r2, #0
    4822:	add.w	r1, r1, r4, lsr #12
    4826:	mov	r0, r8
    4828:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    482c:	cbz	r0, 4860 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    482e:	ldrb.w	r1, [r0, sl]
    4832:	b.n	484a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4834:	cmp	r2, r9
    4836:	beq.n	488e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9e>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4838:	cmp	r7, r4
    483a:	beq.n	485e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    483c:	ldr.w	r2, [r8, #1064]	; 0x428
    4840:	cmp	r4, r2
    4842:	bcs.n	4874 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x84>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    4844:	ands.w	r5, r3, #255	; 0xff
    4848:	beq.n	4864 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    484a:	adds	r4, #1
        if (!(mask & cache[i])) {
    484c:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    484e:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    4852:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    4856:	beq.n	4834 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    4858:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    485a:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    485c:	bne.n	483c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    485e:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    4860:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4864:	add.w	sl, sl, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4868:	cmp.w	sl, #512	; 0x200
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    486c:	mov.w	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    4870:	bne.n	482e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    4872:	b.n	4878 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    4874:	movs	r6, #0
    4876:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    4878:	mov.w	sl, #0
    487c:	movs	r5, #1
    487e:	b.n	481c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    4880:	movs	r7, #0
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    4882:	mov	sl, r7
    4884:	movs	r5, #1
    4886:	b.n	4818 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    4888:	ldr.w	r7, [r0, #1048]	; 0x418
    488c:	b.n	4800 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    488e:	cmp.w	fp, #0
    4892:	bne.n	489e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xae>
    4894:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    4898:	it	eq
    489a:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
    489e:	adds	r0, r6, #2
    48a0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000048a4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    48a4:	push	{r3, r4, r5, r6, r7, lr}
    48a6:	mov	r4, r0
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    48a8:	movs	r3, #0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
    48aa:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    48ae:	add.w	r7, r0, #524	; 0x20c
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    48b2:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    48b6:	str	r1, [r0, #4]
    48b8:	str.w	r1, [r0, #528]	; 0x210

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    48bc:	mov	r5, r2
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    48be:	mov	r0, r7
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    48c0:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
    48c4:	strb	r3, [r4, #0]
    48c6:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
    48ca:	str	r6, [r4, #8]
    48cc:	str.w	r6, [r4, #532]	; 0x214
    48d0:	mov	r2, r3
    48d2:	mov	r1, r3
    48d4:	bl	4754 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    48d8:	cmp	r5, #4
    48da:	bhi.n	4946 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    48dc:	mov	r6, r0
    48de:	cbz	r0, 4946 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    48e0:	cbnz	r5, 4904 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    48e2:	movs	r2, #5
    48e4:	ldr	r1, [pc, #200]	; (49b0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x10c>)
    48e6:	adds	r0, r6, #3
    48e8:	bl	ca1c <strncmp>
    48ec:	mov	r7, r0
    48ee:	cmp	r0, #0
    48f0:	bne.n	49a4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x100>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    48f2:	ldrb.w	r3, [r6, #108]	; 0x6c
    48f6:	cmp	r3, #9
    48f8:	beq.n	4950 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xac>
    DBG_FAIL_MACRO;
    48fa:	movs	r0, #112	; 0x70
    48fc:	bl	46e0 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4900:	mov	r0, r7
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
    4902:	pop	{r3, r4, r5, r6, r7, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    4904:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    4906:	add.w	r3, r0, r3, lsl #4
    490a:	ldrb.w	r2, [r3, #446]	; 0x1be
    490e:	ands.w	r2, r2, #127	; 0x7f
    4912:	beq.n	491e <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x7a>
      DBG_FAIL_MACRO;
    4914:	movs	r0, #95	; 0x5f
    4916:	bl	46e0 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    491a:	movs	r0, #0
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    491c:	pop	{r3, r4, r5, r6, r7, pc}
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    491e:	ldrb.w	r3, [r3, #450]	; 0x1c2
    4922:	cmp	r3, #0
    4924:	beq.n	4914 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x70>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    4926:	add.w	r5, r0, r5, lsl #4
    492a:	mov	r0, r7
    492c:	ldr.w	r5, [r5, #438]	; 0x1b6
    4930:	mov	r1, r5
    4932:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    4936:	mov	r6, r0
    4938:	cmp	r0, #0
    493a:	bne.n	48e2 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x3e>
      DBG_FAIL_MACRO;
    493c:	movs	r0, #101	; 0x65
    493e:	bl	46e0 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    4942:	mov	r0, r6
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4944:	pop	{r3, r4, r5, r6, r7, pc}
  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    4946:	movs	r0, #88	; 0x58
    4948:	bl	46e0 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    494c:	movs	r0, #0
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    DBG_FAIL_MACRO;
    goto fail;
    494e:	pop	{r3, r4, r5, r6, r7, pc}
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    4950:	ldr	r3, [r6, #80]	; 0x50
    4952:	add	r3, r5
    4954:	str.w	r3, [r4, #1052]	; 0x41c
    4958:	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    495a:	str.w	r3, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    495e:	ldr	r3, [r6, #88]	; 0x58
    4960:	add	r5, r3
    4962:	str.w	r5, [r4, #1060]	; 0x424
    4966:	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    4968:	str.w	r3, [r4, #1064]	; 0x428
    496c:	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    496e:	str.w	r3, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    4972:	ldrb.w	r3, [r6, #109]	; 0x6d
    4976:	strb.w	r3, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    497a:	movs	r6, #1
    497c:	adds	r3, #9
    497e:	lsl.w	r3, r6, r3
  m_clusterMask = m_bytesPerCluster - 1;
    4982:	subs	r2, r3, #1
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    4984:	str.w	r0, [r4, #1048]	; 0x418
  bitmapFind(0, 1);
    4988:	mov	r1, r0
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    498a:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
    498e:	str.w	r2, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    4992:	mov	r0, r4
    4994:	mov	r2, r6
    4996:	bl	47f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    499a:	movs	r3, #64	; 0x40
    499c:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
    49a0:	mov	r0, r6

 fail:
  return false;
}
    49a2:	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    49a4:	movs	r0, #107	; 0x6b
    49a6:	bl	46e0 <dbgPrint(unsigned short)>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    49aa:	movs	r0, #0
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    DBG_FAIL_MACRO;
    goto fail;
    49ac:	pop	{r3, r4, r5, r6, r7, pc}
    49ae:	nop
    49b0:	.word	0x0000ffc0

000049b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    49b4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    49b8:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    49ba:	mov	r9, r0
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    49bc:	ldr.w	r0, [r0, #1064]	; 0x428
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    49c0:	mov	r5, r2
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    49c2:	adds	r2, r1, r2
    49c4:	cmp	r2, r0
    49c6:	bhi.n	4a64 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xb0>
    49c8:	mov	sl, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    49ca:	ldr.w	r3, [r9, #1048]	; 0x418
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    49ce:	cmp.w	sl, #0
    49d2:	bne.n	4a3e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8a>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    49d4:	cmp	r1, r3
      m_bitmapStart = start;
    49d6:	it	cc
    49d8:	strcc.w	r1, [r9, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
    49dc:	and.w	r4, r1, #7
    49e0:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    49e2:	ldr.w	r3, [r9, #1060]	; 0x424
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    49e6:	lsl.w	r4, r2, r4
    49ea:	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    49ec:	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
    49f0:	ubfx	fp, r1, #3, #9
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    49f4:	movs	r2, #1
    49f6:	mov	r1, r8
    49f8:	mov	r0, r9
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    49fa:	add	r8, r2
    49fc:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4a00:	mov	r6, r0
    4a02:	cbz	r0, 4a70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbc>
    4a04:	add.w	r7, r0, fp
    4a08:	add.w	r3, r0, #512	; 0x200
    4a0c:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    4a10:	tst	r2, r4
    4a12:	ite	ne
    4a14:	movne	r6, #1
    4a16:	moveq	r6, #0
    4a18:	cmp	r6, sl
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4a1a:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4a1e:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    4a22:	beq.n	4a52 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9e>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    4a24:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    4a26:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    4a2a:	beq.n	4a5e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    4a2c:	ands.w	r4, r4, #255	; 0xff
    4a30:	bne.n	4a10 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5c>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4a32:	cmp	r3, r7
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    4a34:	mov	fp, r4
    4a36:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    4a3a:	bne.n	4a0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    4a3c:	b.n	49f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    4a3e:	cmp	r1, r3
    4a40:	bhi.n	49dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    4a42:	cmp	r2, r3
    4a44:	bls.n	49dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    4a46:	cmp	r2, r0
    4a48:	it	cs
    4a4a:	movcs	r2, #0
    4a4c:	str.w	r2, [r9, #1048]	; 0x418
    4a50:	b.n	49dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
    4a52:	movs	r0, #216	; 0xd8
    4a54:	bl	46e0 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4a58:	movs	r0, #0
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
    4a5a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    4a5e:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    4a60:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    4a64:	movs	r0, #191	; 0xbf
    4a66:	bl	46e0 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4a6a:	movs	r0, #0
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
    4a6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4a70:	movs	r0, #210	; 0xd2
    4a72:	bl	46e0 <dbgPrint(unsigned short)>
    }
    i = 0;
  }

 fail:
  return false;
    4a76:	mov	r0, r6
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    4a78:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    4a7c:	push	{r3, r4, r5, r6, r7, lr}
    4a7e:	mov	r6, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4a80:	ldmia.w	r6, {r3, r5}
    4a84:	ldr.w	r1, [r0, #1072]	; 0x430
    4a88:	ldr.w	r4, [r0, #1060]	; 0x424
    4a8c:	ldrb.w	r7, [r0, #1085]	; 0x43d
    4a90:	ands	r1, r5
    4a92:	subs	r3, #2
    4a94:	add.w	r1, r4, r1, lsr #9
    4a98:	lsls	r3, r7
    4a9a:	add	r1, r3
    4a9c:	add.w	r0, r0, #524	; 0x20c
    4aa0:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    4aa4:	cbz	r0, 4aae <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    4aa6:	ldr	r3, [r6, #4]
    4aa8:	ubfx	r3, r3, #0, #9
    4aac:	add	r0, r3
}
    4aae:	pop	{r3, r4, r5, r6, r7, pc}

00004ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    4ab0:	push	{r3, r4, r5, lr}
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    4ab2:	ldr.w	r3, [r0, #1064]	; 0x428
    4ab6:	adds	r3, #1
    4ab8:	cmp	r3, r1
    4aba:	bcs.n	4ac8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x18>
    DBG_FAIL_MACRO;
    4abc:	mov.w	r0, #276	; 0x114
    4ac0:	bl	46e0 <dbgPrint(unsigned short)>
    return -1;
    4ac4:	movs	r0, #255	; 0xff
    4ac6:	pop	{r3, r4, r5, pc}
    4ac8:	mov	r4, r1
    4aca:	ldr.w	r1, [r0, #1052]	; 0x41c
    4ace:	mov	r5, r2
    4ad0:	add.w	r0, r0, #524	; 0x20c
    4ad4:	add.w	r1, r1, r4, lsr #7
    4ad8:	movs	r2, #0
    4ada:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    4ade:	cbz	r0, 4af2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    4ae0:	lsls	r4, r4, #2
    4ae2:	ubfx	r4, r4, #0, #9
    4ae6:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    4ae8:	adds	r2, r3, #1
    4aea:	beq.n	4af6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x46>
    return 0;
  }
  *value = next;
    4aec:	str	r3, [r5, #0]
  return 1;
    4aee:	movs	r0, #1
    4af0:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    4af2:	movs	r0, #255	; 0xff
    4af4:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    4af6:	movs	r0, #0
  }
  *value = next;
  return 1;
}
    4af8:	pop	{r3, r4, r5, pc}
    4afa:	nop

00004afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4afc:	push	{r4, r5, r6, lr}
    4afe:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4b00:	ldr	r1, [r1, #4]
    4b02:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    4b06:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    4b08:	adds	r0, r1, r2
    4b0a:	str	r0, [r5, #4]
  tmp >>= bytesPerClusterShift();
    4b0c:	ldrb.w	r4, [r6, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4b10:	ands	r3, r1
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4b12:	adds	r4, #9
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    4b14:	add	r2, r3
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    4b16:	uxtb	r4, r4
    4b18:	lsr.w	r4, r2, r4
  while (tmp--) {
    4b1c:	cbz	r4, 4b2e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    4b1e:	ldrb	r3, [r5, #8]
    4b20:	cbz	r3, 4b32 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    4b22:	ldr	r3, [r5, #0]
    4b24:	adds	r3, #1
    4b26:	str	r3, [r5, #0]
    4b28:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    4b2a:	cmp	r4, #0
    4b2c:	bne.n	4b1e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    4b2e:	movs	r0, #1
}
    4b30:	pop	{r4, r5, r6, pc}
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    4b32:	mov	r2, r5
    4b34:	ldr	r1, [r5, #0]
    4b36:	mov	r0, r6
    4b38:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4b3c:	sxtb	r0, r0
      if (status != 1) {
    4b3e:	cmp	r0, #1
    4b40:	beq.n	4b28 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    4b42:	pop	{r4, r5, r6, pc}

00004b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4b44:	cmp	r1, #1
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    4b46:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    4b48:	bls.n	4b56 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
    4b4a:	ldr.w	r3, [r0, #1064]	; 0x428
    4b4e:	adds	r3, #1
    4b50:	cmp	r1, r3
    4b52:	mov	r4, r1
    4b54:	bls.n	4b62 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    4b56:	mov.w	r0, #298	; 0x12a
    4b5a:	bl	46e0 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4b5e:	movs	r0, #0
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    DBG_FAIL_MACRO;
    goto fail;
    4b60:	pop	{r4, r5, r6, pc}
    4b62:	ldr.w	r1, [r0, #1052]	; 0x41c
    4b66:	mov	r5, r2
    4b68:	add.w	r0, r0, #524	; 0x20c
    4b6c:	add.w	r1, r1, r4, lsr #7
    4b70:	movs	r2, #1
    4b72:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    4b76:	mov	r6, r0
    4b78:	cbz	r0, 4b86 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x42>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    4b7a:	lsls	r4, r4, #2
    4b7c:	ubfx	r4, r4, #0, #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    4b80:	movs	r0, #1
    4b82:	str	r5, [r6, r4]

 fail:
  return false;
}
    4b84:	pop	{r4, r5, r6, pc}
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    DBG_FAIL_MACRO;
    4b86:	mov.w	r0, #304	; 0x130
    4b8a:	bl	46e0 <dbgPrint(unsigned short)>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    4b8e:	mov	r0, r6
    4b90:	pop	{r4, r5, r6, pc}
    4b92:	nop

00004b94 <ExFatPartition::freeChain(unsigned long)>:
}
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    4b94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4b98:	mov	r4, r1
    4b9a:	sub	sp, #12
    4b9c:	mov	r6, r0
  uint32_t next;
  uint32_t start = cluster;
    4b9e:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4ba0:	mov	r1, r4
    4ba2:	add	r2, sp, #4
    4ba4:	mov	r0, r6
    4ba6:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4baa:	movs	r2, #0
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    4bac:	sxtb	r5, r0
    if (status < 0) {
    4bae:	cmp	r5, r2
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4bb0:	mov	r1, r4
    4bb2:	mov	r0, r6
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4bb4:	add.w	r4, r4, #1
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
    4bb8:	blt.n	4c0c <ExFatPartition::freeChain(unsigned long)+0x78>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4bba:	bl	4b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4bbe:	rsb	r2, r8, r4
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4bc2:	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4bc4:	mov	r1, r8
    4bc6:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    4bc8:	cbz	r0, 4c20 <ExFatPartition::freeChain(unsigned long)+0x8c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4bca:	ldr	r7, [sp, #4]
    4bcc:	cmp	r4, r7
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4bce:	mov	r0, r6
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    4bd0:	bne.n	4bfa <ExFatPartition::freeChain(unsigned long)+0x66>
    4bd2:	cmp	r5, #0
    4bd4:	bne.n	4ba0 <ExFatPartition::freeChain(unsigned long)+0xc>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4bd6:	mov	r3, r5
    4bd8:	rsb	r2, r8, r4
    4bdc:	mov	r1, r8
    4bde:	mov	r0, r6
    4be0:	bl	49b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4be4:	cbnz	r0, 4bf2 <ExFatPartition::freeChain(unsigned long)+0x5e>
        DBG_FAIL_MACRO;
    4be6:	mov.w	r0, #330	; 0x14a
    4bea:	bl	46e0 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    4bee:	mov.w	r9, #0
}
    4bf2:	mov	r0, r9
    4bf4:	add	sp, #12
    4bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    4bfa:	bl	49b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4bfe:	cmp	r0, #0
    4c00:	beq.n	4be6 <ExFatPartition::freeChain(unsigned long)+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4c02:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    4c04:	cmp	r5, #0
    4c06:	beq.n	4bf2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    4c08:	mov	r8, r4
    4c0a:	b.n	4ba0 <ExFatPartition::freeChain(unsigned long)+0xc>
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
    4c0c:	movw	r0, #321	; 0x141
    4c10:	bl	46e0 <dbgPrint(unsigned short)>
  } while (status);

  return true;

 fail:
  return false;
    4c14:	mov.w	r9, #0
}
    4c18:	mov	r0, r9
    4c1a:	add	sp, #12
    4c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    4c20:	movw	r0, #325	; 0x145
    4c24:	bl	46e0 <dbgPrint(unsigned short)>

  return true;

 fail:
  return false;
}
    4c28:	mov	r0, r9
    4c2a:	add	sp, #12
    4c2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004c30 <ExFatPartition::freeClusterCount()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4c30:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    4c34:	movs	r4, #0
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    4c36:	ldr.w	r6, [r0, #1060]	; 0x424

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    4c3a:	mov	r8, r0
    4c3c:	add.w	r7, r0, #524	; 0x20c
  uint32_t nc = 0;
    4c40:	mov	r5, r4
    4c42:	mov	r1, r6
    4c44:	movs	r2, #0
    4c46:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    4c48:	adds	r6, #1
    4c4a:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    4c4e:	cbz	r0, 4c9e <ExFatPartition::freeClusterCount()+0x6e>
    4c50:	add.w	lr, r0, #4294967295
    4c54:	ldr.w	ip, [r8, #1064]	; 0x428
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    4c58:	ldrb.w	r0, [lr, #1]!
    4c5c:	cmp	r0, #255	; 0xff
    4c5e:	add.w	r9, r5, #4096	; 0x1000
    4c62:	beq.n	4c8c <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    4c64:	cbz	r0, 4c7a <ExFatPartition::freeClusterCount()+0x4a>
    4c66:	movs	r2, #8
    4c68:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    4c6a:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4c6c:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    4c70:	it	ne
    4c72:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    4c74:	subs	r2, #1
    4c76:	uxtb	r3, r1
    4c78:	bne.n	4c6a <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4c7a:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4c7c:	cmp	ip, r5
    4c7e:	bls.n	4c96 <ExFatPartition::freeClusterCount()+0x66>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    4c80:	cmp	r5, r9
    4c82:	beq.n	4c42 <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    4c84:	ldrb.w	r0, [lr, #1]!
    4c88:	cmp	r0, #255	; 0xff
    4c8a:	bne.n	4c64 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    4c8c:	adds	r5, #8
      if (nc >= m_clusterCount) {
    4c8e:	cmp	ip, r5
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    4c90:	add.w	r4, r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    4c94:	bhi.n	4c80 <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    4c96:	rsb	r0, r4, ip
    4c9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    4c9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ca2:	nop

00004ca4 <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4ca4:	push	{r4, r5, r6, lr}
    4ca6:	sub	sp, #8
    4ca8:	add	r6, sp, #8
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    4caa:	ldr.w	r1, [r0, #1068]	; 0x42c
    4cae:	str.w	r1, [r6, #-4]!
      }
    }
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    4cb2:	mov	r5, r0
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
    4cb4:	movs	r4, #0
    4cb6:	b.n	4cc0 <ExFatPartition::rootLength()+0x1c>
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    4cb8:	add.w	r4, r4, #1
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    4cbc:	beq.n	4cd0 <ExFatPartition::rootLength()+0x2c>
    4cbe:	ldr	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    4cc0:	mov	r2, r6
    4cc2:	mov	r0, r5
    4cc4:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4cc8:	sxtb	r0, r0
    if (status < 0) return 0;
    4cca:	cmp	r0, #0
    4ccc:	bge.n	4cb8 <ExFatPartition::rootLength()+0x14>
    4cce:	movs	r4, #0
  }
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
  uint32_t nc = chainSize(m_rootDirectoryCluster);
  return nc << bytesPerClusterShift();
    4cd0:	ldrb.w	r0, [r5, #1085]	; 0x43d
    4cd4:	adds	r0, #9
    4cd6:	uxtb	r0, r0
}
    4cd8:	lsl.w	r0, r4, r0
    4cdc:	add	sp, #8
    4cde:	pop	{r4, r5, r6, pc}

00004ce0 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4ce0:	cbz	r1, 4d16 <exFatHashName(char const*, unsigned int, unsigned short)+0x36>
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    4ce2:	push	{r4}
    4ce4:	add	r1, r0
    4ce6:	lsls	r3, r2, #15
    4ce8:	orr.w	r3, r3, r2, lsr #1
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    4cec:	ldrb.w	r2, [r0], #1
    if ('a' <= c && c <= 'z') {
    4cf0:	sub.w	r4, r2, #97	; 0x61
    4cf4:	cmp	r4, #25
      c -= 'a' - 'A';
    4cf6:	itt	ls
    4cf8:	subls	r2, #32
    4cfa:	uxtbls	r2, r2
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    4cfc:	uxtah	r2, r2, r3
    4d00:	uxth	r2, r2
    4d02:	lsls	r3, r2, #15
    4d04:	orr.w	r2, r3, r2, lsr #1
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    4d08:	cmp	r1, r0
    4d0a:	uxth	r2, r2
    4d0c:	bne.n	4ce6 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    4d0e:	mov	r0, r2
    4d10:	ldr.w	r4, [sp], #4
    4d14:	bx	lr
    4d16:	mov	r0, r2
    4d18:	bx	lr
    4d1a:	nop

00004d1c <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4d1c:	cbz	r3, 4d70 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x54>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    4d1e:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4d20:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d22:	cmp	r4, #126	; 0x7e
    4d24:	bhi.n	4d64 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
    4d26:	add	r3, r2
    4d28:	adds	r5, r1, r3
    4d2a:	add	r2, r1
    4d2c:	adds	r0, #2
    4d2e:	ldrb.w	r3, [r2], #1
    4d32:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4d34:	sub.w	r1, r3, #97	; 0x61
    4d38:	cmp	r1, #25
    4d3a:	sub.w	r1, r4, #97	; 0x61
    4d3e:	ite	ls
    4d40:	movls	r6, #32
    4d42:	movhi	r6, #0
    4d44:	cmp	r1, #25
    4d46:	ite	ls
    4d48:	movls	r1, #32
    4d4a:	movhi	r1, #0
    4d4c:	subs	r3, r3, r6
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d4e:	subs	r4, r4, r1
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    4d50:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d52:	uxtb	r4, r4
    4d54:	cmp	r4, r3
    4d56:	bne.n	4d64 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x48>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    4d58:	cmp	r2, r5
    4d5a:	beq.n	4d6a <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4e>
    4d5c:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    4d60:	cmp	r4, #126	; 0x7e
    4d62:	bls.n	4d2e <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    4d64:	movs	r0, #0
    }
  }
  return true;
}
    4d66:	pop	{r4, r5, r6}
    4d68:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4d6a:	movs	r0, #1
}
    4d6c:	pop	{r4, r5, r6}
    4d6e:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    4d70:	movs	r0, #1
}
    4d72:	bx	lr

00004d74 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    4d74:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4d76:	movs	r1, #10
    4d78:	mov	r5, r0
    4d7a:	ldr	r0, [pc, #40]	; (4da4 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    4d7c:	ldr	r4, [pc, #40]	; (4da8 <dbgPrint(unsigned short)+0x34>)
    4d7e:	bl	9784 <usb_serial_write>
    4d82:	movs	r1, #18
    4d84:	ldr	r0, [pc, #36]	; (4dac <dbgPrint(unsigned short)+0x38>)
    4d86:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4d8a:	movs	r0, #46	; 0x2e
    4d8c:	bl	988c <usb_serial_putchar>
    4d90:	mov	r1, r5
    4d92:	mov	r0, r4
    4d94:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    4d98:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    4d9a:	ldmia.w	sp!, {r3, r4, r5, lr}
    4d9e:	b.w	aca0 <Print::println()>
    4da2:	nop
    4da4:	.word	0x0000ff90
    4da8:	.word	0x1fff098c
    4dac:	.word	0x0000ffc8

00004db0 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4db0:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4db2:	push	{r3, r4, r5, r6, r7, lr}
    4db4:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4db6:	ldr	r0, [r0, #32]
    4db8:	cbz	r1, 4dbc <ExFatFile::addCluster()+0xc>
    4dba:	adds	r1, #1
    4dbc:	movs	r2, #1
    4dbe:	bl	47f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4dc2:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4dc4:	mov	r6, r0
  if (find < 2) {
    4dc6:	bls.n	4e4c <ExFatFile::addCluster()+0x9c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4dc8:	movs	r3, #1
    4dca:	mov	r1, r0
    4dcc:	mov	r2, r3
    4dce:	ldr	r0, [r4, #32]
    4dd0:	bl	49b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4dd4:	mov	r7, r0
    4dd6:	cmp	r0, #0
    4dd8:	beq.n	4e58 <ExFatFile::addCluster()+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4dda:	ldr	r0, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4ddc:	ldrb.w	r3, [r4, #51]	; 0x33
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4de0:	cbnz	r0, 4df0 <ExFatFile::addCluster()+0x40>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4de2:	orr.w	r3, r3, #64	; 0x40
    4de6:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4dea:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4dec:	mov	r0, r7
    4dee:	pop	{r3, r4, r5, r6, r7, pc}
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4df0:	lsls	r2, r3, #25
    4df2:	bpl.n	4e1e <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    4df4:	adds	r2, r0, #1
    4df6:	cmp	r6, r2
    4df8:	beq.n	4dea <ExFatFile::addCluster()+0x3a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4dfa:	bic.w	r2, r3, #64	; 0x40
    4dfe:	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e02:	ldr	r3, [r4, #28]
    4e04:	b.n	4e14 <ExFatFile::addCluster()+0x64>
      if (!m_vol->fatPut(c, c + 1)) {
    4e06:	ldr	r0, [r4, #32]
    4e08:	bl	4b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e0c:	mov	r3, r0
    4e0e:	cbz	r0, 4e62 <ExFatFile::addCluster()+0xb2>
    4e10:	ldr	r0, [r4, #24]
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e12:	mov	r3, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4e14:	adds	r5, r3, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e16:	cmp	r3, r0
      if (!m_vol->fatPut(c, c + 1)) {
    4e18:	mov	r1, r3
    4e1a:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4e1c:	bcc.n	4e06 <ExFatFile::addCluster()+0x56>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4e1e:	mov.w	r2, #4294967295
    4e22:	mov	r1, r6
    4e24:	ldr	r0, [r4, #32]
    4e26:	bl	4b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e2a:	mov	r3, r0
    4e2c:	cbz	r0, 4e6c <ExFatFile::addCluster()+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4e2e:	ldr	r1, [r4, #24]
    4e30:	cmp	r1, #0
    4e32:	beq.n	4dea <ExFatFile::addCluster()+0x3a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4e34:	mov	r2, r6
    4e36:	ldr	r0, [r4, #32]
    4e38:	bl	4b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4e3c:	mov	r3, r0
    4e3e:	cmp	r0, #0
    4e40:	bne.n	4dea <ExFatFile::addCluster()+0x3a>
      DBG_FAIL_MACRO;
    4e42:	movs	r0, #110	; 0x6e
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e44:	mov	r7, r3
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    if (!m_vol->fatPut(m_curCluster, find)) {
      DBG_FAIL_MACRO;
    4e46:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    4e4a:	b.n	4dec <ExFatFile::addCluster()+0x3c>
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4e4c:	movs	r0, #77	; 0x4d
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e4e:	movs	r7, #0
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
  if (find < 2) {
    DBG_FAIL_MACRO;
    4e50:	bl	4d74 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4e54:	mov	r0, r7
    4e56:	pop	{r3, r4, r5, r6, r7, pc}
  if (find < 2) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    4e58:	movs	r0, #81	; 0x51
    4e5a:	bl	4d74 <dbgPrint(unsigned short)>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    4e5e:	mov	r0, r7
    4e60:	pop	{r3, r4, r5, r6, r7, pc}
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4e62:	movs	r0, #97	; 0x61
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e64:	mov	r7, r3
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
        DBG_FAIL_MACRO;
    4e66:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    4e6a:	b.n	4dec <ExFatFile::addCluster()+0x3c>
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4e6c:	movs	r0, #104	; 0x68
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4e6e:	mov	r7, r3
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    DBG_FAIL_MACRO;
    4e70:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
    4e74:	b.n	4dec <ExFatFile::addCluster()+0x3c>
    4e76:	nop

00004e78 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4e78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    4e7c:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4e80:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    4e82:	ldmia.w	r3, {r0, r1, r2}
    4e86:	ldrb.w	r7, [r5, #51]	; 0x33

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    4e8a:	sub	sp, #20
  DirPos_t pos = m_dirPos;
    4e8c:	add	r6, sp, #4
  uint8_t* cache;
  if (!isWritable()) {
    4e8e:	and.w	r4, r7, #2
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
    4e92:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    4e96:	cmp	r4, #0
    4e98:	beq.n	4f74 <ExFatFile::remove()+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    4e9a:	ldr	r1, [r5, #28]
    4e9c:	cbnz	r1, 4ee8 <ExFatFile::remove()+0x70>
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    4e9e:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    4ea0:	movs	r2, #1
    4ea2:	mov	r1, r6
    4ea4:	ldr	r0, [r5, #32]
    4ea6:	bl	4a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4eaa:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4eac:	mov	r3, r0
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4eae:	uxtb	r4, r4
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    4eb0:	cmp	r0, #0
    4eb2:	beq.n	4f62 <ExFatFile::remove()+0xea>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    4eb4:	ldrb	r2, [r3, #0]
    4eb6:	and.w	r2, r2, #127	; 0x7f
    4eba:	strb	r2, [r3, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    4ebc:	ldrb.w	r3, [r5, #48]	; 0x30
    4ec0:	cmp	r3, r4
    4ec2:	bcc.n	4f32 <ExFatFile::remove()+0xba>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    4ec4:	cmp	r4, #0
    4ec6:	beq.n	4ea0 <ExFatFile::remove()+0x28>
    4ec8:	movs	r2, #32
    4eca:	mov	r1, r6
    4ecc:	ldr	r0, [r5, #32]
    4ece:	bl	4afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4ed2:	cmp	r0, #1
    4ed4:	beq.n	4ea0 <ExFatFile::remove()+0x28>
      DBG_FAIL_MACRO;
    4ed6:	movw	r0, #287	; 0x11f
    4eda:	bl	4d74 <dbgPrint(unsigned short)>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4ede:	movs	r4, #0
}
    4ee0:	mov	r0, r4
    4ee2:	add	sp, #20
    4ee4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4ee8:	lsls	r3, r7, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    4eea:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    4eec:	bpl.n	4f8a <ExFatFile::remove()+0x112>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    4eee:	ldrd	r2, r3, [r5, #8]
    4ef2:	ldrb.w	r4, [r0, #1085]	; 0x43d
    4ef6:	adds	r4, #9
    4ef8:	uxtb	r4, r4
    4efa:	adds.w	r8, r2, #4294967295
    4efe:	adc.w	r9, r3, #4294967295
    4f02:	rsb	r7, r4, #32
    4f06:	lsr.w	r2, r8, r4
    4f0a:	sub.w	r3, r4, #32
    4f0e:	lsl.w	r7, r9, r7
    4f12:	lsr.w	r3, r9, r3
    4f16:	orrs	r2, r7
    4f18:	orrs	r2, r3
    4f1a:	adds	r2, #1
    4f1c:	movs	r3, #0
    4f1e:	bl	49b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4f22:	mov	r4, r0
    4f24:	cmp	r0, #0
    4f26:	bne.n	4e9e <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4f28:	mov.w	r0, #274	; 0x112
    4f2c:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    4f30:	b.n	4ee0 <ExFatFile::remove()+0x68>
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    4f32:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    4f34:	movs	r3, #0
    4f36:	mov	r0, r4
    4f38:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4f3c:	strb.w	r3, [r5, #51]	; 0x33
    4f40:	bl	47e0 <FsCache::sync()>
    4f44:	cmp	r0, #0
    4f46:	beq.n	4ede <ExFatFile::remove()+0x66>
    4f48:	add.w	r0, r4, #524	; 0x20c
    4f4c:	bl	47e0 <FsCache::sync()>
    4f50:	cmp	r0, #0
    4f52:	beq.n	4ede <ExFatFile::remove()+0x66>
    4f54:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    4f58:	ldr	r3, [r0, #0]
    4f5a:	ldr	r3, [r3, #20]
    4f5c:	blx	r3
    4f5e:	mov	r4, r0
    4f60:	b.n	4ee0 <ExFatFile::remove()+0x68>
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4f62:	mov.w	r0, #292	; 0x124

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4f66:	mov	r4, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
    4f68:	bl	4d74 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4f6c:	mov	r0, r4
    4f6e:	add	sp, #20
    4f70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4f74:	and.w	r3, r4, #255	; 0xff
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4f78:	mov.w	r0, #266	; 0x10a

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    4f7c:	mov	r4, r3
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  DirPos_t pos = m_dirPos;
  uint8_t* cache;
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    4f7e:	bl	4d74 <dbgPrint(unsigned short)>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    4f82:	mov	r0, r4
    4f84:	add	sp, #20
    4f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    4f8a:	bl	4b94 <ExFatPartition::freeChain(unsigned long)>
    4f8e:	mov	r4, r0
    4f90:	cmp	r0, #0
    4f92:	bne.n	4e9e <ExFatFile::remove()+0x26>
        DBG_FAIL_MACRO;
    4f94:	movw	r0, #279	; 0x117
    4f98:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    4f9c:	b.n	4ee0 <ExFatFile::remove()+0x68>
    4f9e:	nop

00004fa0 <ExFatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4fa0:	push	{r4, r5, lr}
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4fa2:	ldrb.w	r3, [r0, #49]	; 0x31
    4fa6:	and.w	r3, r3, #16

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    4faa:	sub	sp, #36	; 0x24
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    4fac:	cbz	r3, 4ff2 <ExFatFile::rmdir()+0x52>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4fae:	movs	r2, #0
    4fb0:	movs	r3, #0
    4fb2:	mov	r4, r0
    4fb4:	bl	4030 <ExFatFile::seekSet(unsigned long long)>
    4fb8:	b.n	4fc8 <ExFatFile::rmdir()+0x28>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    4fba:	cmp	r0, #32
    4fbc:	bne.n	5004 <ExFatFile::rmdir()+0x64>
    4fbe:	ldrb.w	r3, [sp]
    4fc2:	lsls	r2, r3, #24
    4fc4:	bmi.n	5004 <ExFatFile::rmdir()+0x64>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    4fc6:	cbz	r3, 4fd6 <ExFatFile::rmdir()+0x36>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    4fc8:	movs	r2, #32
    4fca:	mov	r1, sp
    4fcc:	mov	r0, r4
    4fce:	bl	3e1c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4fd2:	cmp	r0, #0
    4fd4:	bne.n	4fba <ExFatFile::rmdir()+0x1a>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    4fd6:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4fda:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    4fdc:	orr.w	r3, r3, #2
    4fe0:	strb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    4fe4:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    4fe8:	mov	r0, r4
    4fea:	bl	4e78 <ExFatFile::remove()>

fail:
  return false;
}
    4fee:	add	sp, #36	; 0x24
    4ff0:	pop	{r4, r5, pc}
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    DBG_FAIL_MACRO;
    4ff2:	mov.w	r0, #354	; 0x162
    4ff6:	and.w	r5, r3, #255	; 0xff
    4ffa:	bl	4d74 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    4ffe:	mov	r0, r5
}
    5000:	add	sp, #36	; 0x24
    5002:	pop	{r4, r5, pc}
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
      DBG_FAIL_MACRO;
    5004:	mov.w	r0, #366	; 0x16e
    5008:	bl	4d74 <dbgPrint(unsigned short)>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    500c:	movs	r0, #0
}
    500e:	add	sp, #36	; 0x24
    5010:	pop	{r4, r5, pc}
    5012:	nop

00005014 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5014:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5018:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    501c:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    501e:	ldmia.w	fp, {r0, r1, r2}
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5022:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    5024:	add.w	r8, sp, #12
    5028:	stmia.w	r8, {r0, r1, r2}
    502c:	movs	r7, #0
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    502e:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5030:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    5032:	movs	r2, #0
    5034:	mov	r1, r8
    5036:	ldr	r0, [r6, #32]
    5038:	bl	4a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    503c:	uxtb.w	r9, r7
    if (!cache) {
    5040:	mov	r5, r0
    5042:	cmp	r0, #0
    5044:	beq.n	513e <ExFatFile::syncDir()+0x12a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    5046:	ldrb	r2, [r0, #0]
    5048:	cmp	r2, #192	; 0xc0
    504a:	beq.n	50b8 <ExFatFile::syncDir()+0xa4>
    504c:	cmp	r2, #193	; 0xc1
    504e:	beq.n	5070 <ExFatFile::syncDir()+0x5c>
    5050:	cmp	r2, #133	; 0x85
    5052:	beq.n	50f4 <ExFatFile::syncDir()+0xe0>

      case EXFAT_TYPE_NAME:
        break;

      default:
        DBG_FAIL_MACRO;
    5054:	mov.w	r0, #452	; 0x1c4
    5058:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    505c:	ldrb.w	r3, [r6, #50]	; 0x32
    5060:	orr.w	r3, r3, #1
    5064:	strb.w	r3, [r6, #50]	; 0x32
  return false;
    5068:	movs	r0, #0
}
    506a:	add	sp, #28
    506c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5070:	mov	r0, r2
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5072:	movs	r1, #0
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5074:	ldrb	r2, [r5, r1]
    5076:	lsls	r3, r4, #15
    5078:	orr.w	r4, r3, r4, lsr #1
    507c:	uxtah	r4, r2, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5080:	cmp	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5082:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5084:	add.w	r1, r1, #1
    5088:	beq.n	50ae <ExFatFile::syncDir()+0x9a>
    508a:	cmp	r1, #31
    508c:	bls.n	5074 <ExFatFile::syncDir()+0x60>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    508e:	cmp	sl, r9
    5090:	beq.n	5148 <ExFatFile::syncDir()+0x134>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    5092:	movs	r2, #32
    5094:	mov	r1, r8
    5096:	ldr	r0, [r6, #32]
    5098:	bl	4afc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    509c:	cmp	r0, #1
    509e:	add.w	r7, r7, #1
    50a2:	beq.n	5032 <ExFatFile::syncDir()+0x1e>
      DBG_FAIL_MACRO;
    50a4:	movw	r0, #459	; 0x1cb
    50a8:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    50ac:	b.n	505c <ExFatFile::syncDir()+0x48>
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    50ae:	cmp	r0, #133	; 0x85
    50b0:	ite	eq
    50b2:	moveq	r1, #4
    50b4:	movne	r1, #2
    50b6:	b.n	5074 <ExFatFile::syncDir()+0x60>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    50b8:	ldrb.w	r3, [r6, #51]	; 0x33
    50bc:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    50c0:	ldrb	r3, [r0, #1]
    50c2:	ite	ne
    50c4:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    50c8:	biceq.w	r3, r3, #2
    50cc:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
    50ce:	ldrd	r2, r3, [r6, #16]

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    50d2:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    50d6:	ldrd	r2, r3, [r6, #8]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    50da:	ldr	r1, [r6, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    50dc:	str	r1, [r0, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    50de:	strd	r2, r3, [r0, #24]
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    50e2:	ldr	r2, [r6, #32]
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    50e4:	ldrb.w	r3, [r2, #524]	; 0x20c
    50e8:	orr.w	r3, r3, #1
    50ec:	strb.w	r3, [r2, #524]	; 0x20c
    50f0:	ldrb	r0, [r0, #0]
    50f2:	b.n	5072 <ExFatFile::syncDir()+0x5e>
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    50f4:	ldr	r3, [pc, #152]	; (5190 <ExFatFile::syncDir()+0x17c>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    50f6:	ldrb.w	r1, [r6, #49]	; 0x31
    50fa:	ldr	r3, [r3, #0]
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    50fc:	ldrb.w	sl, [r0, #1]
    5100:	and.w	r1, r1, #55	; 0x37
    5104:	strh	r1, [r0, #4]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5106:	cmp	r3, #0
    5108:	beq.n	5070 <ExFatFile::syncDir()+0x5c>
          m_vol->dataCacheDirty();
    510a:	ldr	r1, [r6, #32]
    510c:	ldrb.w	r2, [r1, #524]	; 0x20c
    5110:	orr.w	r2, r2, #1
    5114:	strb.w	r2, [r1, #524]	; 0x20c
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5118:	add	r0, sp, #8
    511a:	add.w	r2, sp, #7
    511e:	add.w	r1, sp, #10
    5122:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    5124:	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    5128:	ldrh.w	r3, [sp, #8]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    512c:	ldrb.w	r1, [sp, #7]
    5130:	strb	r1, [r5, #21]
    5132:	strh	r2, [r5, #12]
    5134:	strh	r2, [r5, #16]
    5136:	strh	r3, [r5, #14]
    5138:	strh	r3, [r5, #18]
    513a:	ldrb	r0, [r5, #0]
    513c:	b.n	5072 <ExFatFile::syncDir()+0x5e>
  DirPos_t pos = m_dirPos;

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    if (!cache) {
      DBG_FAIL_MACRO;
    513e:	mov.w	r0, #414	; 0x19e
    5142:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    5146:	b.n	505c <ExFatFile::syncDir()+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5148:	mov	r1, fp
    514a:	movs	r2, #1
    514c:	ldr	r0, [r6, #32]
    514e:	bl	4a7c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5152:	cbz	r0, 516a <ExFatFile::syncDir()+0x156>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5154:	ldr	r5, [r6, #32]
    5156:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5158:	mov	r0, r5
    515a:	bl	47e0 <FsCache::sync()>
    515e:	cbnz	r0, 5174 <ExFatFile::syncDir()+0x160>
    DBG_FAIL_MACRO;
    5160:	movw	r0, #471	; 0x1d7
    5164:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
    5168:	b.n	505c <ExFatFile::syncDir()+0x48>
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
  if (!df) {
    DBG_FAIL_MACRO;
    516a:	mov.w	r0, #466	; 0x1d2
    516e:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
    5172:	b.n	505c <ExFatFile::syncDir()+0x48>
    5174:	add.w	r0, r5, #524	; 0x20c
    5178:	bl	47e0 <FsCache::sync()>
    517c:	cmp	r0, #0
    517e:	beq.n	5160 <ExFatFile::syncDir()+0x14c>
    5180:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5184:	ldr	r3, [r0, #0]
    5186:	ldr	r3, [r3, #20]
    5188:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    518a:	cmp	r0, #0
    518c:	beq.n	5160 <ExFatFile::syncDir()+0x14c>
    518e:	b.n	506a <ExFatFile::syncDir()+0x56>
    5190:	.word	0x1fff1ba4

00005194 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    5194:	ldrb.w	r2, [r0, #49]	; 0x31
    5198:	cbz	r2, 51c8 <ExFatFile::sync()+0x34>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    519a:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    519c:	ldrb.w	r2, [r0, #51]	; 0x33
    51a0:	lsls	r1, r2, #24
    51a2:	bmi.n	51cc <ExFatFile::sync()+0x38>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    51a4:	ldr	r5, [r0, #32]
    51a6:	mov	r4, r0
    51a8:	mov	r0, r5
    51aa:	bl	47e0 <FsCache::sync()>
    51ae:	cbnz	r0, 51dc <ExFatFile::sync()+0x48>
    DBG_FAIL_MACRO;
    51b0:	mov.w	r0, #392	; 0x188
    51b4:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    51b8:	ldrb.w	r3, [r4, #50]	; 0x32
    51bc:	orr.w	r3, r3, #1
    51c0:	strb.w	r3, [r4, #50]	; 0x32
    51c4:	movs	r0, #0
  return false;
}
    51c6:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    51c8:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    51ca:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    51cc:	and.w	r2, r2, #127	; 0x7f
    51d0:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    51d4:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    51d8:	b.w	5014 <ExFatFile::syncDir()>
    51dc:	add.w	r0, r5, #524	; 0x20c
    51e0:	bl	47e0 <FsCache::sync()>
    51e4:	cmp	r0, #0
    51e6:	beq.n	51b0 <ExFatFile::sync()+0x1c>
    51e8:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    51ec:	ldr	r3, [r0, #0]
    51ee:	ldr	r3, [r3, #20]
    51f0:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    51f2:	cmp	r0, #0
    51f4:	beq.n	51b0 <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    51f6:	movs	r0, #1
    51f8:	pop	{r3, r4, r5, pc}
    51fa:	nop

000051fc <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    51fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5200:	ldrb.w	r3, [r0, #49]	; 0x31
    5204:	lsls	r1, r3, #25

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    5206:	mov	r8, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5208:	bmi.n	52b8 <ExFatFile::addDirCluster()+0xbc>
    520a:	ldr	r0, [r0, #8]
    520c:	ldr.w	r3, [r8, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    5210:	ldr.w	r3, [r3, #1076]	; 0x434
    5214:	add	r0, r3
    5216:	cmp.w	r0, #67108864	; 0x4000000
    521a:	bcs.n	52ac <ExFatFile::addDirCluster()+0xb0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    521c:	mov	r0, r8
    521e:	bl	4db0 <ExFatFile::addCluster()>
    5222:	cmp	r0, #0
    5224:	beq.n	52a0 <ExFatFile::addDirCluster()+0xa4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    5226:	ldr.w	r5, [r8, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    522a:	ldrb.w	r3, [r5, #524]	; 0x20c
    522e:	lsls	r2, r3, #31

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    5230:	add.w	r4, r5, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5234:	bmi.n	52fe <ExFatFile::addDirCluster()+0x102>
      return nullptr;
    }
    invalidate();
    5236:	mov	r0, r4
    return m_cacheBuffer;
    5238:	add.w	r5, r5, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    523c:	bl	4748 <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    5240:	mov.w	r2, #512	; 0x200
    5244:	movs	r1, #0
    5246:	mov	r0, r5
    5248:	bl	c37c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    524c:	ldr.w	r2, [r8, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5250:	ldr.w	r3, [r8, #24]
    5254:	ldrb.w	r1, [r2, #1085]	; 0x43d
    5258:	ldr.w	r7, [r2, #1060]	; 0x424
    525c:	subs	r3, #2
    525e:	lsls	r3, r1
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5260:	movs	r6, #1
    5262:	add	r7, r3
    5264:	lsls.w	r3, r6, r1
    5268:	it	ne
    526a:	movne	r4, #0
    526c:	bne.n	5280 <ExFatFile::addDirCluster()+0x84>
    526e:	b.n	52c0 <ExFatFile::addDirCluster()+0xc4>
    5270:	ldr.w	r2, [r8, #32]
    5274:	ldrb.w	r3, [r2, #1085]	; 0x43d
    5278:	lsl.w	r3, r6, r3
    527c:	cmp	r3, r4
    527e:	bls.n	52c0 <ExFatFile::addDirCluster()+0xc4>
    5280:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5284:	ldr	r3, [r0, #0]
    5286:	adds	r1, r7, r4
    5288:	ldr	r3, [r3, #24]
    528a:	mov	r2, r5
    528c:	blx	r3
    528e:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, cache)) {
    5290:	cmp	r0, #0
    5292:	bne.n	5270 <ExFatFile::addDirCluster()+0x74>
      DBG_FAIL_MACRO;
    5294:	movs	r0, #145	; 0x91
    5296:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    529a:	movs	r0, #0
    529c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    52a0:	movs	r0, #133	; 0x85
    52a2:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    52a6:	movs	r0, #0
    52a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    52ac:	movs	r0, #129	; 0x81
    52ae:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return sync();

 fail:
  return false;
}
    52b2:	movs	r0, #0
    52b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    52b8:	ldr	r0, [r0, #32]
    52ba:	bl	4ca4 <ExFatPartition::rootLength()>
    52be:	b.n	520c <ExFatFile::addDirCluster()+0x10>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    52c0:	ldrb.w	r3, [r8, #49]	; 0x31
    52c4:	lsls	r3, r3, #25
    52c6:	bmi.n	52f4 <ExFatFile::addDirCluster()+0xf8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    52c8:	ldrb.w	r3, [r8, #51]	; 0x33
    52cc:	orn	r3, r3, #127	; 0x7f
    52d0:	strb.w	r3, [r8, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    52d4:	ldr.w	r4, [r2, #1076]	; 0x434
    52d8:	ldrd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    52dc:	ldrd	r0, r1, [r8, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    52e0:	adds	r2, r2, r4
    52e2:	mov.w	r5, #0
    52e6:	adcs	r3, r5
    m_validLength += m_vol->bytesPerCluster();
    52e8:	adds	r0, r0, r4
    52ea:	adcs	r1, r5
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    52ec:	strd	r2, r3, [r8, #8]
    m_validLength += m_vol->bytesPerCluster();
    52f0:	strd	r0, r1, [r8, #16]
  }
  return sync();
    52f4:	mov	r0, r8

 fail:
  return false;
}
    52f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    52fa:	b.w	5194 <ExFatFile::sync()>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    52fe:	mov	r0, r4
    5300:	bl	47e0 <FsCache::sync()>
    5304:	cmp	r0, #0
    5306:	bne.n	5236 <ExFatFile::addDirCluster()+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
  if (!cache) {
    DBG_FAIL_MACRO;
    5308:	movs	r0, #138	; 0x8a
    530a:	bl	4d74 <dbgPrint(unsigned short)>
    530e:	b.n	52a6 <ExFatFile::addDirCluster()+0xaa>

00005310 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5310:	push	{r4, r5, lr}
  if (!parent->isDir()) {
    5312:	ldrb.w	r3, [r1, #49]	; 0x31
    5316:	tst.w	r3, #80	; 0x50

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    531a:	sub	sp, #12
  if (!parent->isDir()) {
    531c:	beq.n	536a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x5a>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    531e:	movw	r5, #2562	; 0xa02
    5322:	ldrb	r3, [r2, #0]
    5324:	ldr	r2, [r2, #4]
    5326:	str	r5, [sp, #0]
    5328:	mov	r4, r0
    532a:	bl	414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    532e:	cbz	r0, 535e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x4e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    5330:	movs	r3, #16
    5332:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    5336:	mov	r0, r4
    5338:	bl	51fc <ExFatFile::addDirCluster()>
    533c:	cbz	r0, 5376 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x66>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    533e:	ldr	r3, [r4, #24]
    5340:	str	r3, [r4, #28]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5342:	movs	r2, #0
    5344:	movs	r3, #0
    5346:	mov	r0, r4
    5348:	bl	4030 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    534c:	movs	r3, #193	; 0xc1
  return sync();
    534e:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5350:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    5354:	add	sp, #12
    5356:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    535a:	b.w	5194 <ExFatFile::sync()>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    535e:	movs	r0, #209	; 0xd1
    5360:	bl	4d74 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5364:	movs	r0, #0
    5366:	add	sp, #12
    5368:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    536a:	movs	r0, #204	; 0xcc
    536c:	bl	4d74 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    5370:	movs	r0, #0
    5372:	add	sp, #12
    5374:	pop	{r4, r5, pc}

  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    5376:	movs	r0, #218	; 0xda
    5378:	bl	4d74 <dbgPrint(unsigned short)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    537c:	movs	r0, #0
    537e:	add	sp, #12
    5380:	pop	{r4, r5, pc}
    5382:	nop

00005384 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5384:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5388:	mov	r6, r0
    538a:	sub	sp, #84	; 0x54
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    538c:	ldrb.w	r4, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    5390:	str	r2, [sp, #12]
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5392:	movs	r0, #0
    5394:	strb.w	r0, [sp, #73]	; 0x49
    5398:	strb.w	r0, [sp, #74]	; 0x4a
    539c:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    53a0:	cmp	r4, #0
    53a2:	bne.n	541e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    53a4:	mov	r9, r3
    53a6:	ldrb.w	r3, [r1, #49]	; 0x31
    53aa:	tst.w	r3, #80	; 0x50
    53ae:	mov	r5, r1
    53b0:	beq.n	541e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    53b2:	ldrb	r3, [r2, #0]
    53b4:	cmp	r3, #47	; 0x2f
    53b6:	mov	r1, r2
    53b8:	beq.n	5400 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    53ba:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    53be:	add	r3, sp, #12
    53c0:	add	r2, sp, #16
    53c2:	mov	r0, r6
    53c4:	bl	3d58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    53c8:	mov	r4, r0
    53ca:	cmp	r0, #0
    53cc:	beq.n	5468 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    53ce:	ldr	r3, [sp, #12]
    53d0:	ldrb	r3, [r3, #0]
    53d2:	cmp	r3, #0
    53d4:	beq.n	5476 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xf2>
    53d6:	ldrb.w	r3, [sp, #16]
    53da:	ldr	r2, [sp, #20]
    53dc:	str.w	r8, [sp]
    53e0:	mov	r1, r5
    53e2:	mov	r0, r6
    53e4:	bl	414c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    53e8:	mov	r4, r0
    53ea:	cbnz	r0, 543c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb8>
      if (!pFlag || !mkdir(parent, &fname)) {
    53ec:	cmp.w	r9, #0
    53f0:	bne.n	542e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xaa>
        DBG_FAIL_MACRO;
    53f2:	movs	r0, #188	; 0xbc
    53f4:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    53f8:	mov	r0, r4
    53fa:	add	sp, #84	; 0x54
    53fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5400:	adds	r1, #1
    5402:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5404:	ldrb	r3, [r1, #0]
    5406:	cmp	r3, #47	; 0x2f
    5408:	beq.n	5400 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7c>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    540a:	ldr	r1, [r5, #32]
    540c:	add	r0, sp, #24
    540e:	bl	3d28 <ExFatFile::openRoot(ExFatVolume*)>
    5412:	mov	r4, r0
    5414:	cmp	r0, #0
    5416:	beq.n	5484 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x100>
    5418:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    541a:	add	r5, sp, #24
    541c:	b.n	53ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x36>
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    541e:	movs	r0, #165	; 0xa5
    5420:	bl	4d74 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    5424:	movs	r4, #0
}
    5426:	mov	r0, r4
    5428:	add	sp, #84	; 0x54
    542a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    542e:	mov	r1, r5
    5430:	add	r2, sp, #16
    5432:	mov	r0, r6
    5434:	bl	5310 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5438:	cmp	r0, #0
    543a:	beq.n	53f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    543c:	mov	r4, r6
    543e:	add	r7, sp, #24
    5440:	add.w	lr, r6, #48	; 0x30
    5444:	ldr	r0, [r4, #0]
    5446:	ldr	r1, [r4, #4]
    5448:	ldr	r2, [r4, #8]
    544a:	ldr	r3, [r4, #12]
    544c:	mov	r5, r7
    544e:	stmia	r5!, {r0, r1, r2, r3}
    5450:	adds	r4, #16
    5452:	cmp	r4, lr
    5454:	mov	r7, r5
    5456:	bne.n	5444 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc0>
    5458:	ldr	r0, [r4, #0]
    545a:	str	r0, [r5, #0]
    parent = &tmpDir;
    close();
    545c:	mov	r0, r6
    545e:	bl	3c54 <ExFatFile::close()>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    5462:	add	r5, sp, #24
    5464:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    5466:	b.n	53be <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5468:	movs	r0, #180	; 0xb4
    546a:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    546e:	mov	r0, r4
    5470:	add	sp, #84	; 0x54
    5472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    5476:	add	r2, sp, #16
    5478:	mov	r1, r5
    547a:	mov	r0, r6
    547c:	bl	5310 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5480:	mov	r4, r0
    5482:	b.n	53f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    5484:	movs	r0, #173	; 0xad
    5486:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    548a:	b.n	53f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x74>

0000548c <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    548c:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    548e:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    5492:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    5494:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    5496:	ands.w	r4, r4, #24
    549a:	strb.w	r3, [sp, #49]	; 0x31
    549e:	strb.w	r3, [sp, #50]	; 0x32
    54a2:	strb.w	r3, [sp, #51]	; 0x33
    54a6:	strb.w	r3, [sp, #105]	; 0x69
    54aa:	strb.w	r3, [sp, #106]	; 0x6a
    54ae:	strb.w	r3, [sp, #107]	; 0x6b
    54b2:	bne.n	54c2 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
    DBG_FAIL_MACRO;
    54b4:	movw	r0, #319	; 0x13f
    54b8:	bl	4d74 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    54bc:	mov	r0, r4
    54be:	add	sp, #116	; 0x74
    54c0:	pop	{r4, r5, r6, r7, pc}
    54c2:	mov	r5, r0
  if (!(isFile() || isSubDir())) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    54c4:	ldr	r0, [r1, #32]
    54c6:	ldr	r4, [r5, #32]
    54c8:	cmp	r4, r0
    54ca:	beq.n	54dc <ExFatFile::rename(ExFatFile*, char const*)+0x50>
    DBG_FAIL_MACRO;
    54cc:	mov.w	r0, #324	; 0x144
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    54d0:	mov	r4, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    54d2:	bl	4d74 <dbgPrint(unsigned short)>
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
}
    54d6:	mov	r0, r4
    54d8:	add	sp, #116	; 0x74
    54da:	pop	{r4, r5, r6, r7, pc}
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    54dc:	movw	r3, #2561	; 0xa01
    54e0:	mov	r0, sp
    54e2:	bl	457c <ExFatFile::open(ExFatFile*, char const*, int)>
    54e6:	mov	r4, r0
    54e8:	cbz	r0, 5550 <ExFatFile::rename(ExFatFile*, char const*)+0xc4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    54ea:	add	r7, sp, #56	; 0x38
    54ec:	mov	r4, r5
    54ee:	add.w	lr, r5, #48	; 0x30
    54f2:	ldr	r0, [r4, #0]
    54f4:	ldr	r1, [r4, #4]
    54f6:	ldr	r2, [r4, #8]
    54f8:	ldr	r3, [r4, #12]
    54fa:	mov	r6, r7
    54fc:	stmia	r6!, {r0, r1, r2, r3}
    54fe:	adds	r4, #16
    5500:	cmp	r4, lr
    5502:	mov	r7, r6
    5504:	bne.n	54f2 <ExFatFile::rename(ExFatFile*, char const*)+0x66>
    5506:	ldr	r0, [r4, #0]
    5508:	str	r0, [r6, #0]
  m_dirPos = file.m_dirPos;
    550a:	add	r3, sp, #36	; 0x24
    550c:	ldmia.w	r3, {r0, r1, r2}
    5510:	add.w	r3, r5, #36	; 0x24
    5514:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5518:	ldrb.w	r3, [r5, #51]	; 0x33
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    551c:	ldrb.w	r2, [sp, #48]	; 0x30
    5520:	strb.w	r2, [r5, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5524:	orn	r3, r3, #127	; 0x7f
    5528:	strb.w	r3, [r5, #51]	; 0x33
  if (!sync()) {
    552c:	mov	r0, r5
    552e:	bl	5194 <ExFatFile::sync()>
    5532:	mov	r4, r0
    5534:	cbz	r0, 555a <ExFatFile::rename(ExFatFile*, char const*)+0xce>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    5536:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    5538:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    553a:	movs	r3, #8
  return oldFile.remove();
    553c:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    553e:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5540:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5544:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5548:	bl	4e78 <ExFatFile::remove()>
    554c:	mov	r4, r0
    554e:	b.n	54bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    5550:	mov.w	r0, #328	; 0x148
    5554:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
    5558:	b.n	54bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  if (!sync()) {
    DBG_FAIL_MACRO;
    555a:	mov.w	r0, #336	; 0x150
    555e:	bl	4d74 <dbgPrint(unsigned short)>
    goto fail;
    5562:	b.n	54bc <ExFatFile::rename(ExFatFile*, char const*)+0x30>

00005564 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5564:	push	{r4, r5, r6, r7, lr}
    5566:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    556a:	and.w	r2, r3, #2

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    556e:	sub	sp, #12
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5570:	cmp	r2, #0
    5572:	beq.n	561e <ExFatFile::truncate()+0xba>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5574:	ldr	r1, [r0, #28]
    5576:	mov	r4, r0
    5578:	cbz	r1, 55dc <ExFatFile::truncate()+0x78>
      return true;
  }
  if (isContiguous()) {
    557a:	and.w	r3, r3, #64	; 0x40
    557e:	and.w	r5, r3, #255	; 0xff
    5582:	cbz	r3, 55e4 <ExFatFile::truncate()+0x80>
    5584:	ldr	r0, [r0, #32]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5586:	ldr	r5, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5588:	ldrb.w	r3, [r0, #1085]	; 0x43d
    558c:	ldrd	r6, r7, [r4, #8]
    5590:	adds	r3, #9
    5592:	uxtb	r3, r3
    5594:	adds.w	r6, r6, #4294967295
    5598:	rsb	lr, r3, #32
    559c:	adc.w	r7, r7, #4294967295
    55a0:	lsr.w	r2, r6, r3
    55a4:	lsl.w	lr, r7, lr
    55a8:	subs	r3, #32
    55aa:	orr.w	r2, r2, lr
    55ae:	lsr.w	r3, r7, r3
    55b2:	orrs	r2, r3
    55b4:	adds	r2, #1
    if (m_curCluster) {
    55b6:	cmp	r5, #0
    55b8:	beq.n	5630 <ExFatFile::truncate()+0xcc>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    55ba:	subs	r1, #1
    55bc:	subs	r1, r1, r5
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    55be:	adds	r5, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    55c0:	add	r2, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    55c2:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    55c4:	cbz	r2, 55f8 <ExFatFile::truncate()+0x94>
    55c6:	movs	r3, #0
    55c8:	ldr	r1, [sp, #4]
    55ca:	bl	49b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    55ce:	mov	r5, r0
    55d0:	cbnz	r0, 55f8 <ExFatFile::truncate()+0x94>
      DBG_FAIL_MACRO;
    55d2:	movw	r0, #599	; 0x257
    55d6:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    55da:	b.n	55de <ExFatFile::truncate()+0x7a>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    55dc:	movs	r5, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    55de:	mov	r0, r5
    55e0:	add	sp, #12
    55e2:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    55e4:	ldr	r3, [r0, #24]
    55e6:	cbnz	r3, 5636 <ExFatFile::truncate()+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    55e8:	str	r1, [sp, #4]
      m_firstCluster = 0;
    55ea:	str	r3, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    55ec:	ldr	r0, [r4, #32]
    55ee:	bl	4b94 <ExFatPartition::freeChain(unsigned long)>
    55f2:	mov	r5, r0
    55f4:	cmp	r0, #0
    55f6:	beq.n	5670 <ExFatFile::truncate()+0x10c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    55f8:	ldrd	r0, r1, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    55fc:	ldrb.w	r3, [r4, #51]	; 0x33
    5600:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    5604:	strd	r0, r1, [r4, #8]
  m_validLength = m_curPosition;
    5608:	strd	r0, r1, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    560c:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5610:	mov	r0, r4
    5612:	bl	5194 <ExFatFile::sync()>
    5616:	mov	r5, r0

 fail:
  return false;
}
    5618:	mov	r0, r5
    561a:	add	sp, #12
    561c:	pop	{r4, r5, r6, r7, pc}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    561e:	movw	r0, #583	; 0x247
    5622:	and.w	r5, r2, #255	; 0xff
    5626:	bl	4d74 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    562a:	mov	r0, r5
    562c:	add	sp, #12
    562e:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    5630:	str	r1, [sp, #4]
      m_firstCluster = 0;
    5632:	str	r5, [r4, #28]
    5634:	b.n	55c4 <ExFatFile::truncate()+0x60>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    5636:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5638:	mov	r1, r3
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    563a:	str.w	r5, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    563e:	ldr	r0, [r0, #32]
    5640:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5644:	sxtb	r0, r0
      if (fg < 0) {
    5646:	cmp	r0, #0
    5648:	blt.n	567a <ExFatFile::truncate()+0x116>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    564a:	bne.n	5654 <ExFatFile::truncate()+0xf0>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    564c:	ldr	r1, [sp, #4]
    564e:	cmp	r1, #0
    5650:	beq.n	55f8 <ExFatFile::truncate()+0x94>
    5652:	b.n	55ec <ExFatFile::truncate()+0x88>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5654:	mov.w	r2, #4294967295
    5658:	ldr	r1, [r4, #24]
    565a:	ldr	r0, [r4, #32]
    565c:	bl	4b44 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5660:	mov	r5, r0
    5662:	cmp	r0, #0
    5664:	bne.n	564c <ExFatFile::truncate()+0xe8>
          DBG_FAIL_MACRO;
    5666:	movw	r0, #614	; 0x266
    566a:	bl	4d74 <dbgPrint(unsigned short)>
          goto fail;
    566e:	b.n	55de <ExFatFile::truncate()+0x7a>
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
        DBG_FAIL_MACRO;
    5670:	mov.w	r0, #624	; 0x270
    5674:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    5678:	b.n	55de <ExFatFile::truncate()+0x7a>
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
      if (fg < 0) {
        DBG_FAIL_MACRO;
    567a:	mov.w	r0, #608	; 0x260
    567e:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    5682:	b.n	55de <ExFatFile::truncate()+0x7a>

00005684 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5684:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5688:	ldrb.w	r3, [r0, #51]	; 0x33
    568c:	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    568e:	lsls	r4, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5690:	mov	r6, r0
    5692:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5694:	bpl.w	58de <ExFatFile::write(void const*, unsigned int)+0x25a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5698:	lsls	r2, r3, #28
    569a:	mov	sl, r1
    569c:	bmi.w	590c <ExFatFile::write(void const*, unsigned int)+0x288>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    56a0:	ldr	r3, [sp, #4]
    56a2:	cmp	r3, #0
    56a4:	beq.w	595a <ExFatFile::write(void const*, unsigned int)+0x2d6>
    56a8:	mov	r1, r6
    56aa:	ldrd	r2, r3, [r1], #24
    56ae:	ldr.w	r8, [sp, #4]
    56b2:	str	r1, [sp, #12]
    56b4:	mov	fp, r2
    clusterOffset = m_curPosition & m_vol->clusterMask();
    56b6:	ldr	r0, [r6, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    56b8:	ldr	r5, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    56ba:	ldr.w	r4, [r0, #1072]	; 0x430
    56be:	mov	r3, fp
    56c0:	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    56c2:	ubfx	r9, r4, #0, #9
    if (clusterOffset == 0) {
    56c6:	cbnz	r4, 571e <ExFatFile::write(void const*, unsigned int)+0x9a>
      // start of new cluster
      if (m_curCluster != 0) {
    56c8:	cmp	r5, #0
    56ca:	beq.w	5870 <ExFatFile::write(void const*, unsigned int)+0x1ec>
        int fg;

        if (isContiguous()) {
    56ce:	ldrb.w	r3, [r6, #51]	; 0x33
    56d2:	lsls	r3, r3, #25
    56d4:	bpl.w	58a2 <ExFatFile::write(void const*, unsigned int)+0x21e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    56d8:	ldrd	r2, r3, [r6, #8]
    56dc:	ldrb.w	r7, [r0, #1085]	; 0x43d
    56e0:	adds	r7, #9
    56e2:	uxtb	r7, r7
    56e4:	adds.w	r2, r2, #4294967295
    56e8:	adc.w	r3, r3, #4294967295
    56ec:	rsb	lr, r7, #32
    56f0:	lsl.w	lr, r3, lr
    56f4:	lsr.w	r1, r2, r7
    56f8:	subs	r7, #32
    56fa:	lsr.w	r7, r3, r7
    56fe:	orr.w	r1, r1, lr
    5702:	ldr	r3, [r6, #28]
    5704:	orrs	r1, r7
    5706:	add	r3, r1
    5708:	cmp	r5, r3
    570a:	bcc.w	589c <ExFatFile::write(void const*, unsigned int)+0x218>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    570e:	mov	r0, r6
    5710:	bl	4db0 <ExFatFile::addCluster()>
    5714:	cmp	r0, #0
    5716:	beq.w	5946 <ExFatFile::write(void const*, unsigned int)+0x2c2>
    571a:	ldr	r0, [r6, #32]
    571c:	ldr	r5, [r6, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    571e:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5722:	ldrb.w	lr, [r0, #1085]	; 0x43d
    5726:	lsrs	r4, r4, #9
    5728:	subs	r5, #2
    572a:	adds	r1, r4, r7
    572c:	lsl.w	r5, r5, lr
    5730:	add	r1, r5

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5732:	cmp.w	r9, #0
    5736:	bne.w	584c <ExFatFile::write(void const*, unsigned int)+0x1c8>
    573a:	cmp.w	r8, #512	; 0x200
    573e:	bcs.n	57f6 <ExFatFile::write(void const*, unsigned int)+0x172>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5740:	ldrd	r2, r3, [r6, #16]
    5744:	ldrd	r4, r5, [r6]
    5748:	cmp.w	r8, #512	; 0x200
    574c:	mov	r7, r8
    574e:	it	cs
    5750:	movcs.w	r7, #512	; 0x200
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5754:	cmp	r5, r3
    5756:	it	eq
    5758:	cmpeq	r4, r2
    575a:	ite	cc
    575c:	movcc	r2, #1
    575e:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5760:	add.w	r0, r0, #524	; 0x20c
    5764:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5768:	cmp	r0, #0
    576a:	beq.n	5866 <ExFatFile::write(void const*, unsigned int)+0x1e2>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    576c:	add	r0, r9
    576e:	mov	r2, r7
    5770:	mov	r1, sl
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5772:	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    5774:	bl	9584 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5778:	cmp.w	r9, #512	; 0x200
    577c:	beq.w	58c4 <ExFatFile::write(void const*, unsigned int)+0x240>
    5780:	mov	r0, r7
    5782:	movs	r1, #0
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5784:	ldrd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5788:	ldrd	r4, r5, [r6, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    578c:	adds.w	fp, r2, r0
    5790:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5794:	cmp	r5, ip
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5796:	mov	r2, fp
    5798:	mov	r3, ip
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    579a:	it	eq
    579c:	cmpeq	r4, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    579e:	add	sl, r7
    toWrite -= n;
    57a0:	rsb	r8, r7, r8
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    57a4:	strd	r2, r3, [r6]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    57a8:	bcs.n	57be <ExFatFile::write(void const*, unsigned int)+0x13a>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    57aa:	ldrb.w	r1, [r6, #51]	; 0x33
      m_validLength = m_curPosition;
    57ae:	mov	r4, ip
    57b0:	mov	r3, fp
    57b2:	strd	r3, r4, [r6, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    57b6:	orn	r1, r1, #127	; 0x7f
    57ba:	strb.w	r1, [r6, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    57be:	cmp.w	r8, #0
    57c2:	bne.w	56b6 <ExFatFile::write(void const*, unsigned int)+0x32>
    57c6:	mov	r2, fp
    57c8:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    57ca:	ldrd	r0, r1, [r6, #8]
    57ce:	cmp	r1, r3
    57d0:	it	eq
    57d2:	cmpeq	r0, r2
    57d4:	bcc.w	5924 <ExFatFile::write(void const*, unsigned int)+0x2a0>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    57d8:	ldr	r3, [pc, #388]	; (5960 <ExFatFile::write(void const*, unsigned int)+0x2dc>)
    57da:	ldr	r3, [r3, #0]
    57dc:	cmp	r3, #0
    57de:	beq.w	5942 <ExFatFile::write(void const*, unsigned int)+0x2be>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    57e2:	ldrb.w	r3, [r6, #51]	; 0x33
    57e6:	ldr	r0, [sp, #4]
    57e8:	orn	r3, r3, #127	; 0x7f
    57ec:	strb.w	r3, [r6, #51]	; 0x33

fail:
  // return for write error
  m_error |= WRITE_ERROR;
  return -1;
}
    57f0:	add	sp, #20
    57f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    57f6:	cmp.w	r8, #1024	; 0x400
    57fa:	bcc.n	5878 <ExFatFile::write(void const*, unsigned int)+0x1f4>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    57fc:	movs	r3, #1
    57fe:	lsl.w	lr, r3, lr
    5802:	rsb	lr, r4, lr
    5806:	ldr.w	r3, [r0, #532]	; 0x214
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    580a:	mov.w	r4, r8, lsr #9
    580e:	cmp	r4, lr
    5810:	it	cs
    5812:	movcs	r4, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    5814:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    5816:	mov.w	r7, r4, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    581a:	bhi.n	5830 <ExFatFile::write(void const*, unsigned int)+0x1ac>
    581c:	adds	r2, r4, r1
    581e:	cmp	r2, r3
    5820:	bls.n	5830 <ExFatFile::write(void const*, unsigned int)+0x1ac>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    5822:	add.w	r0, r0, #524	; 0x20c
    5826:	str	r1, [sp, #8]
    5828:	bl	4748 <FsCache::invalidate()>
    582c:	ldr	r0, [r6, #32]
    582e:	ldr	r1, [sp, #8]
    5830:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    5834:	ldr	r5, [r0, #0]
    5836:	mov	r3, r4
    5838:	mov	r2, sl
    583a:	ldr	r4, [r5, #28]
    583c:	blx	r4
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    583e:	cmp	r0, #0
    5840:	bne.n	5780 <ExFatFile::write(void const*, unsigned int)+0xfc>
        DBG_FAIL_MACRO;
    5842:	movw	r0, #758	; 0x2f6
    5846:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    584a:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    584c:	rsb	r7, r9, #512	; 0x200
    5850:	cmp	r7, r8
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5852:	mov.w	r2, #1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5856:	add.w	r0, r0, #524	; 0x20c
    585a:	it	cs
    585c:	movcs	r7, r8
    585e:	bl	4754 <FsCache::get(unsigned long, unsigned char)>
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    5862:	cmp	r0, #0
    5864:	bne.n	576c <ExFatFile::write(void const*, unsigned int)+0xe8>
        DBG_FAIL_MACRO;
    5866:	mov.w	r0, #728	; 0x2d8
    586a:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    586e:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    5870:	ldr	r5, [r6, #28]
    5872:	cbz	r5, 58b2 <ExFatFile::write(void const*, unsigned int)+0x22e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    5874:	str	r5, [r6, #24]
    5876:	b.n	571e <ExFatFile::write(void const*, unsigned int)+0x9a>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    5878:	ldr.w	r3, [r0, #532]	; 0x214
    587c:	cmp	r1, r3
    587e:	beq.n	58fc <ExFatFile::write(void const*, unsigned int)+0x278>
    5880:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5884:	ldr	r3, [r0, #0]
    5886:	mov	r2, sl
    5888:	ldr	r3, [r3, #24]
    588a:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    588c:	cmp	r0, #0
    588e:	beq.n	5938 <ExFatFile::write(void const*, unsigned int)+0x2b4>
    5890:	mov.w	r0, #512	; 0x200
    5894:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    5896:	mov.w	r7, #512	; 0x200
    589a:	b.n	5784 <ExFatFile::write(void const*, unsigned int)+0x100>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    589c:	adds	r5, #1
    589e:	str	r5, [r6, #24]
    58a0:	b.n	571e <ExFatFile::write(void const*, unsigned int)+0x9a>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    58a2:	mov	r1, r5
    58a4:	ldr	r2, [sp, #12]
    58a6:	bl	4ab0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    58aa:	cmp	r0, #0
    58ac:	bne.w	571a <ExFatFile::write(void const*, unsigned int)+0x96>
    58b0:	b.n	570e <ExFatFile::write(void const*, unsigned int)+0x8a>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    58b2:	mov	r0, r6
    58b4:	bl	4db0 <ExFatFile::addCluster()>
    58b8:	cmp	r0, #0
    58ba:	beq.n	5950 <ExFatFile::write(void const*, unsigned int)+0x2cc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    58bc:	ldr	r5, [r6, #24]
    58be:	str	r5, [r6, #28]
    58c0:	ldr	r0, [r6, #32]
    58c2:	b.n	571e <ExFatFile::write(void const*, unsigned int)+0x9a>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    58c4:	ldr	r0, [r6, #32]
    58c6:	add.w	r0, r0, #524	; 0x20c
    58ca:	bl	47e0 <FsCache::sync()>
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    58ce:	cmp	r0, #0
    58d0:	bne.w	5780 <ExFatFile::write(void const*, unsigned int)+0xfc>
          DBG_FAIL_MACRO;
    58d4:	mov.w	r0, #736	; 0x2e0
    58d8:	bl	4d74 <dbgPrint(unsigned short)>
          goto fail;
    58dc:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    58de:	mov.w	r0, #652	; 0x28c
    58e2:	bl	4d74 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    58e6:	ldrb.w	r3, [r6, #50]	; 0x32
    58ea:	orr.w	r3, r3, #1
    58ee:	strb.w	r3, [r6, #50]	; 0x32
  return -1;
    58f2:	mov.w	r0, #4294967295
}
    58f6:	add	sp, #20
    58f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    58fc:	add.w	r0, r0, #524	; 0x20c
    5900:	str	r1, [sp, #8]
    5902:	bl	4748 <FsCache::invalidate()>
    5906:	ldr	r0, [r6, #32]
    5908:	ldr	r1, [sp, #8]
    590a:	b.n	5880 <ExFatFile::write(void const*, unsigned int)+0x1fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    590c:	ldrd	r2, r3, [r0, #16]
    5910:	bl	4030 <ExFatFile::seekSet(unsigned long long)>
    5914:	cmp	r0, #0
    5916:	bne.w	56a0 <ExFatFile::write(void const*, unsigned int)+0x1c>
      DBG_FAIL_MACRO;
    591a:	movw	r0, #658	; 0x292
    591e:	bl	4d74 <dbgPrint(unsigned short)>
      goto fail;
    5922:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5924:	ldrb.w	r1, [r6, #51]	; 0x33
    5928:	ldr	r0, [sp, #4]
    592a:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    592e:	strd	r2, r3, [r6, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5932:	strb.w	r1, [r6, #51]	; 0x33
    5936:	b.n	58f6 <ExFatFile::write(void const*, unsigned int)+0x272>
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    5938:	movw	r0, #769	; 0x301
    593c:	bl	4d74 <dbgPrint(unsigned short)>
        goto fail;
    5940:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
    5942:	ldr	r0, [sp, #4]
    5944:	b.n	58f6 <ExFatFile::write(void const*, unsigned int)+0x272>
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5946:	movw	r0, #689	; 0x2b1
    594a:	bl	4d74 <dbgPrint(unsigned short)>
            goto fail;
    594e:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    5950:	movw	r0, #697	; 0x2b9
    5954:	bl	4d74 <dbgPrint(unsigned short)>
            goto fail;
    5958:	b.n	58e6 <ExFatFile::write(void const*, unsigned int)+0x262>
    595a:	ldrd	r2, r3, [r6]
    595e:	b.n	57ca <ExFatFile::write(void const*, unsigned int)+0x146>
    5960:	.word	0x1fff1ba4

00005964 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    5964:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5966:	movs	r1, #10
    5968:	mov	r5, r0
    596a:	ldr	r0, [pc, #40]	; (5994 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    596c:	ldr	r4, [pc, #40]	; (5998 <dbgPrint(unsigned short)+0x34>)
    596e:	bl	9784 <usb_serial_write>
    5972:	movs	r1, #11
    5974:	ldr	r0, [pc, #36]	; (599c <dbgPrint(unsigned short)+0x38>)
    5976:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    597a:	movs	r0, #46	; 0x2e
    597c:	bl	988c <usb_serial_putchar>
    5980:	mov	r1, r5
    5982:	mov	r0, r4
    5984:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5988:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    598a:	ldmia.w	sp!, {r3, r4, r5, lr}
    598e:	b.w	aca0 <Print::println()>
    5992:	nop
    5994:	.word	0x0000ff90
    5998:	.word	0x1fff098c
    599c:	.word	0x0000ffdc

000059a0 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    59a0:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    59a2:	push	{r4, r5, r6, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    59a4:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    59a8:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    59aa:	mov	r1, r5
    59ac:	ldr	r0, [r0, #8]
    59ae:	bl	6bd0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    59b2:	mov	r6, r0
    59b4:	cbz	r0, 59d8 <FatFile::addCluster()+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    59b6:	cbz	r5, 59d0 <FatFile::addCluster()+0x30>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    59b8:	ldr	r3, [r4, #16]
    59ba:	adds	r5, #1
    59bc:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    59be:	ldrb	r3, [r4, #2]
    59c0:	it	ne
    59c2:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    59c6:	orn	r3, r3, #127	; 0x7f
    59ca:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    59cc:	mov	r0, r6
    59ce:	pop	{r4, r5, r6, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    59d0:	ldrb	r3, [r4, #2]
    59d2:	orr.w	r3, r3, #64	; 0x40
    59d6:	b.n	59c6 <FatFile::addCluster()+0x26>
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    59d8:	movs	r0, #35	; 0x23
    59da:	bl	5964 <dbgPrint(unsigned short)>
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    59de:	mov	r0, r6
    59e0:	pop	{r4, r5, r6, pc}
    59e2:	nop

000059e4 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    59e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    59e8:	ldrb	r3, [r0, #0]
    59ea:	and.w	r3, r3, #32
    59ee:	cmp	r3, #0
    59f0:	bne.n	5a76 <FatFile::addDirCluster()+0x92>
    59f2:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    59f6:	ldr	r2, [r0, #20]
    59f8:	ldr	r3, [pc, #184]	; (5ab4 <FatFile::addDirCluster()+0xd0>)
    59fa:	cmp	r2, r3
    59fc:	mov	r5, r0
    59fe:	bhi.n	5a68 <FatFile::addDirCluster()+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5a00:	bl	59a0 <FatFile::addCluster()>
    5a04:	mov	r8, r0
    5a06:	cmp	r0, #0
    5a08:	beq.n	5a86 <FatFile::addDirCluster()+0xa2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5a0a:	ldr	r1, [r5, #16]
    5a0c:	ldr	r0, [r5, #8]
    5a0e:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
    5a12:	mov	r6, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5a14:	ldr	r0, [r5, #8]
    5a16:	mov	r1, r6
    5a18:	adds	r0, #40	; 0x28
    5a1a:	movs	r2, #5
    5a1c:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5a20:	mov	r7, r0
    5a22:	cmp	r0, #0
    5a24:	beq.n	5aaa <FatFile::addDirCluster()+0xc6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5a26:	mov.w	r2, #512	; 0x200
    5a2a:	mov	r1, r4
    5a2c:	bl	c37c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5a30:	ldr	r3, [r5, #8]
    5a32:	ldrb	r2, [r3, #4]
    5a34:	cmp	r2, #1
    5a36:	bls.n	5a92 <FatFile::addDirCluster()+0xae>
    5a38:	movs	r4, #1
    5a3a:	b.n	5a44 <FatFile::addDirCluster()+0x60>
    5a3c:	ldr	r3, [r5, #8]
    5a3e:	ldrb	r2, [r3, #4]
    5a40:	cmp	r2, r4
    5a42:	bls.n	5a92 <FatFile::addDirCluster()+0xae>
    5a44:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5a46:	ldr	r3, [r0, #0]
    5a48:	adds	r1, r4, r6
    5a4a:	ldr	r3, [r3, #24]
    5a4c:	mov	r2, r7
    5a4e:	blx	r3
    5a50:	adds	r4, #1
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5a52:	mov	r3, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5a54:	uxtb	r4, r4
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5a56:	cmp	r0, #0
    5a58:	bne.n	5a3c <FatFile::addDirCluster()+0x58>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5a5a:	mov	r8, r3
  }
  memset(pc, 0, m_vol->bytesPerSector());
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    if (!m_vol->writeSector(sector + i, pc->data)) {
      DBG_FAIL_MACRO;
    5a5c:	movs	r0, #83	; 0x53
    5a5e:	bl	5964 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5a62:	mov	r0, r8
    5a64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5a68:	movs	r0, #66	; 0x42
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5a6a:	mov	r8, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    5a6c:	bl	5964 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5a70:	mov	r0, r8
    5a72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5a76:	movs	r0, #61	; 0x3d
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5a78:	mov.w	r8, #0
bool FatFile::addDirCluster() {
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    5a7c:	bl	5964 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5a80:	mov	r0, r8
    5a82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    DBG_FAIL_MACRO;
    5a86:	movs	r0, #70	; 0x46
    5a88:	bl	5964 <dbgPrint(unsigned short)>
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
}
    5a8c:	mov	r0, r8
    5a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5a92:	ldrb	r3, [r3, #6]
    5a94:	ldr	r1, [r5, #20]
    5a96:	mov.w	r2, #512	; 0x200
    5a9a:	lsl.w	r3, r2, r3
    5a9e:	uxtah	r3, r1, r3
    5aa2:	str	r3, [r5, #20]
  return true;

fail:
  return false;
}
    5aa4:	mov	r0, r8
    5aa6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5aaa:	movs	r0, #76	; 0x4c
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    5aac:	mov	r8, r7
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    5aae:	bl	5964 <dbgPrint(unsigned short)>
    5ab2:	b.n	5a70 <FatFile::addDirCluster()+0x8c>
    5ab4:	.word	0x001ffdff

00005ab8 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5ab8:	push	{r3, r4, r5, lr}
    5aba:	mov	r5, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5abc:	ldr	r0, [r0, #8]
    5abe:	mov	r2, r1
    5ac0:	adds	r0, #40	; 0x28
    5ac2:	ldr	r1, [r5, #24]
    5ac4:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5ac8:	mov	r4, r0
    5aca:	cbz	r0, 5ad8 <FatFile::cacheDirEntry(unsigned char)+0x20>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5acc:	ldrh	r0, [r5, #4]
    5ace:	and.w	r0, r0, #15
    5ad2:	add.w	r0, r4, r0, lsl #5

fail:
  return nullptr;
}
    5ad6:	pop	{r3, r4, r5, pc}
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    DBG_FAIL_MACRO;
    5ad8:	movs	r0, #101	; 0x65
    5ada:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);

fail:
  return nullptr;
    5ade:	mov	r0, r4
    5ae0:	pop	{r3, r4, r5, pc}
    5ae2:	nop

00005ae4 <FatFile::sync() [clone .part.38]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5ae4:	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5ae6:	ldrsb.w	r3, [r0, #2]
    5aea:	cmp	r3, #0
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5aec:	sub	sp, #8
    5aee:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5af0:	blt.n	5b2e <FatFile::sync() [clone .part.38]+0x4a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5af2:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5af4:	add.w	r0, r5, #40	; 0x28
    5af8:	bl	6a94 <FatCache::sync()>
    5afc:	cbnz	r0, 5b14 <FatFile::sync() [clone .part.38]+0x30>
    return true;
  }
  DBG_FAIL_MACRO;
    5afe:	movw	r0, #1183	; 0x49f
    5b02:	bl	5964 <dbgPrint(unsigned short)>

fail:
  m_error |= WRITE_ERROR;
    5b06:	ldrb	r3, [r4, #1]
    5b08:	orr.w	r3, r3, #1
    5b0c:	strb	r3, [r4, #1]
  return false;
    5b0e:	movs	r0, #0
}
    5b10:	add	sp, #8
    5b12:	pop	{r4, r5, r6, pc}
    5b14:	add.w	r0, r5, #564	; 0x234
    5b18:	bl	6a94 <FatCache::sync()>
    5b1c:	cmp	r0, #0
    5b1e:	beq.n	5afe <FatFile::sync() [clone .part.38]+0x1a>
    5b20:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5b22:	ldr	r3, [r0, #0]
    5b24:	ldr	r3, [r3, #20]
    5b26:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5b28:	cmp	r0, #0
    5b2a:	beq.n	5afe <FatFile::sync() [clone .part.38]+0x1a>
    5b2c:	b.n	5b10 <FatFile::sync() [clone .part.38]+0x2c>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    5b2e:	movs	r1, #1
    5b30:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5b34:	mov	r5, r0
    5b36:	cbz	r0, 5b7a <FatFile::sync() [clone .part.38]+0x96>
    5b38:	ldrb	r3, [r0, #0]
    5b3a:	cmp	r3, #229	; 0xe5
    5b3c:	beq.n	5b7a <FatFile::sync() [clone .part.38]+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5b3e:	ldrb	r3, [r4, #0]
    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5b40:	ldr	r2, [pc, #64]	; (5b84 <FatFile::sync() [clone .part.38]+0xa0>)
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5b42:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    5b44:	itt	mi
    5b46:	ldrmi	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5b48:	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5b4a:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5b4c:	ldr	r6, [r2, #0]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b4e:	strh	r3, [r0, #26]
    5b50:	lsrs	r3, r3, #16
    5b52:	strh	r3, [r0, #20]
    5b54:	cbz	r6, 5b70 <FatFile::sync() [clone .part.38]+0x8c>
      FsDateTime::callback(&date, &time, &ms10);
    5b56:	add.w	r2, sp, #3
    5b5a:	add.w	r1, sp, #6
    5b5e:	add	r0, sp, #4
    5b60:	blx	r6
      setLe16(dir->modifyDate, date);
    5b62:	ldrh.w	r3, [sp, #4]
    5b66:	ldrh.w	r2, [sp, #6]
    5b6a:	strh	r3, [r5, #24]
    5b6c:	strh	r3, [r5, #18]
    5b6e:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b70:	ldrb	r3, [r4, #2]
    5b72:	and.w	r3, r3, #127	; 0x7f
    5b76:	strb	r3, [r4, #2]
    5b78:	b.n	5af2 <FatFile::sync() [clone .part.38]+0xe>
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
      DBG_FAIL_MACRO;
    5b7a:	movw	r0, #1158	; 0x486
    5b7e:	bl	5964 <dbgPrint(unsigned short)>
    5b82:	b.n	5b06 <FatFile::sync() [clone .part.38]+0x22>
    5b84:	.word	0x1fff1ba4

00005b88 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5b88:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b8a:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5b8c:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5b8e:	cbnz	r3, 5b9a <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5b90:	movs	r3, #0
    5b92:	strb	r3, [r4, #0]
  m_flags = 0;
    5b94:	strb	r3, [r4, #2]
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5b96:	movs	r0, #1
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return rtn;
}
    5b98:	pop	{r4, pc}
    5b9a:	bl	5ae4 <FatFile::sync() [clone .part.38]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5b9e:	movs	r3, #0
    5ba0:	strb	r3, [r4, #0]
  m_flags = 0;
    5ba2:	strb	r3, [r4, #2]
  return rtn;
}
    5ba4:	pop	{r4, pc}
    5ba6:	nop

00005ba8 <FatFile::openRoot(FatVolume*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5ba8:	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
    5baa:	ldrb	r4, [r0, #0]
    5bac:	cbnz	r4, 5bda <FatFile::openRoot(FatVolume*)+0x32>
    5bae:	mov	r5, r0
    5bb0:	mov	r6, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5bb2:	movs	r2, #36	; 0x24
    5bb4:	mov	r1, r4
    5bb6:	bl	c37c <memset>

  m_vol = vol;
    5bba:	str	r6, [r5, #8]
  switch (vol->fatType()) {
    5bbc:	ldrb	r3, [r6, #7]
    5bbe:	cmp	r3, #16
    5bc0:	beq.n	5bd0 <FatFile::openRoot(FatVolume*)+0x28>
    5bc2:	cmp	r3, #32
    5bc4:	bne.n	5be6 <FatFile::openRoot(FatVolume*)+0x3e>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5bc6:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5bc8:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5bca:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5bcc:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    5bce:	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5bd0:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5bd2:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5bd4:	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5bd6:	strb	r0, [r5, #2]
  return true;

fail:
  return false;
}
    5bd8:	pop	{r4, r5, r6, pc}
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    5bda:	movw	r0, #639	; 0x27f
    5bde:	bl	5964 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5be2:	movs	r0, #0
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    5be4:	pop	{r4, r5, r6, pc}
  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    break;

  default:
    DBG_FAIL_MACRO;
    5be6:	movw	r0, #658	; 0x292
    5bea:	bl	5964 <dbgPrint(unsigned short)>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
    5bee:	mov	r0, r4
    5bf0:	pop	{r4, r5, r6, pc}
    5bf2:	nop

00005bf4 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5bf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bf8:	mov	r6, r0
    5bfa:	sub	sp, #76	; 0x4c
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5bfc:	ldrb	r4, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5bfe:	str	r2, [sp, #4]
    5c00:	movs	r0, #0
    5c02:	strb.w	r0, [sp, #36]	; 0x24
    5c06:	strb.w	r0, [sp, #37]	; 0x25
    5c0a:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5c0e:	cmp	r4, #0
    5c10:	bne.n	5c9c <FatFile::open(FatFile*, char const*, int)+0xa8>
    5c12:	mov	r9, r3
    5c14:	ldrb	r3, [r1, #0]
    5c16:	tst.w	r3, #112	; 0x70
    5c1a:	mov	r5, r1
    5c1c:	beq.n	5c9c <FatFile::open(FatFile*, char const*, int)+0xa8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5c1e:	ldrb	r3, [r2, #0]
    5c20:	cmp	r3, #47	; 0x2f
    5c22:	mov	r0, r2
    5c24:	beq.n	5c7e <FatFile::open(FatFile*, char const*, int)+0x8a>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c26:	mov.w	r8, #0
    5c2a:	b.n	5c38 <FatFile::open(FatFile*, char const*, int)+0x44>
    5c2c:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5c2e:	strb.w	r8, [r6]
  m_flags = 0;
    5c32:	strb.w	r8, [r6, #2]
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    5c36:	add	r5, sp, #36	; 0x24
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5c38:	add	r2, sp, #4
    5c3a:	add	r1, sp, #12
    5c3c:	bl	70fc <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c40:	add	r2, sp, #12
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5c42:	mov	r7, r0
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c44:	mov	r1, r5
    5c46:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5c48:	cmp	r0, #0
    5c4a:	beq.n	5cae <FatFile::open(FatFile*, char const*, int)+0xba>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5c4c:	ldr	r4, [sp, #4]
    5c4e:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c50:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5c52:	cmp	r4, #0
    5c54:	beq.n	5cbe <FatFile::open(FatFile*, char const*, int)+0xca>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c56:	bl	7650 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c5a:	mov	r5, r6
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c5c:	mov	r7, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c5e:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5c60:	cmp	r0, #0
    5c62:	beq.n	5cd4 <FatFile::open(FatFile*, char const*, int)+0xe0>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c64:	ldmia	r5!, {r0, r1, r2, r3}
    5c66:	stmia	r4!, {r0, r1, r2, r3}
    5c68:	ldmia	r5!, {r0, r1, r2, r3}
    5c6a:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c6c:	ldrb	r3, [r6, #0]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5c6e:	ldr	r2, [r5, #0]
    5c70:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5c72:	cmp	r3, #0
    5c74:	beq.n	5c2c <FatFile::open(FatFile*, char const*, int)+0x38>
    5c76:	mov	r0, r6
    5c78:	bl	5ae4 <FatFile::sync() [clone .part.38]>
    5c7c:	b.n	5c2c <FatFile::open(FatFile*, char const*, int)+0x38>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5c7e:	adds	r0, #1
    5c80:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5c82:	ldrb	r3, [r0, #0]
    5c84:	cmp	r3, #47	; 0x2f
    5c86:	beq.n	5c7e <FatFile::open(FatFile*, char const*, int)+0x8a>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5c88:	ldr	r1, [r5, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
    5c8a:	cbz	r3, 5ce4 <FatFile::open(FatFile*, char const*, int)+0xf0>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5c8c:	add	r0, sp, #36	; 0x24
    5c8e:	bl	5ba8 <FatFile::openRoot(FatVolume*)>
    5c92:	mov	r7, r0
    5c94:	cbz	r0, 5cee <FatFile::open(FatFile*, char const*, int)+0xfa>
    5c96:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5c98:	add	r5, sp, #36	; 0x24
    5c9a:	b.n	5c26 <FatFile::open(FatFile*, char const*, int)+0x32>
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    5c9c:	mov.w	r0, #418	; 0x1a2
    5ca0:	bl	5964 <dbgPrint(unsigned short)>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    5ca4:	movs	r7, #0
}
    5ca6:	mov	r0, r7
    5ca8:	add	sp, #76	; 0x4c
    5caa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    5cae:	mov.w	r0, #436	; 0x1b4
    5cb2:	bl	5964 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5cb6:	mov	r0, r7
    5cb8:	add	sp, #76	; 0x4c
    5cba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5cbe:	mov	r3, r9
    5cc0:	add	r2, sp, #12
    5cc2:	mov	r1, r5
    5cc4:	mov	r0, r6
    5cc6:	bl	7650 <FatFile::open(FatFile*, fname_t*, int)>
    5cca:	mov	r7, r0

fail:
  return false;
}
    5ccc:	mov	r0, r7
    5cce:	add	sp, #76	; 0x4c
    5cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
    5cd4:	movw	r0, #443	; 0x1bb
    5cd8:	bl	5964 <dbgPrint(unsigned short)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
    5cdc:	mov	r0, r7
    5cde:	add	sp, #76	; 0x4c
    5ce0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    5ce4:	mov	r0, r6
    5ce6:	bl	5ba8 <FatFile::openRoot(FatVolume*)>
    5cea:	mov	r7, r0
    5cec:	b.n	5ca6 <FatFile::open(FatFile*, char const*, int)+0xb2>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
      DBG_FAIL_MACRO;
    5cee:	movw	r0, #429	; 0x1ad
    5cf2:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    5cf6:	b.n	5ca6 <FatFile::open(FatFile*, char const*, int)+0xb2>

00005cf8 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5cf8:	cbz	r1, 5d02 <FatFile::open(FatVolume*, char const*, int)+0xa>
    5cfa:	add.w	r1, r1, #1088	; 0x440
    5cfe:	b.w	5bf4 <FatFile::open(FatFile*, char const*, int)>
}
    5d02:	mov	r0, r1
    5d04:	bx	lr
    5d06:	nop

00005d08 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5d08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5d0c:	ldrb	r3, [r0, #2]
    5d0e:	lsls	r7, r3, #31
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5d10:	sub	sp, #12
    5d12:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5d14:	bpl.w	5ec0 <FatFile::read(void*, unsigned int)+0x1b8>
    5d18:	mov	r7, r1
    5d1a:	ldrb	r1, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5d1c:	lsls	r6, r1, #28
    5d1e:	mov	r9, r2
    5d20:	bmi.w	5e32 <FatFile::read(void*, unsigned int)+0x12a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5d24:	lsls	r4, r1, #26
    5d26:	bpl.n	5d3a <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5d28:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5d2a:	ldr	r3, [r0, #20]
    5d2c:	ldrh	r2, [r2, #8]
    5d2e:	rsb	r3, r3, r2, lsl #5
    5d32:	uxth	r3, r3
    5d34:	cmp	r9, r3
    5d36:	it	cs
    5d38:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5d3a:	cmp.w	r9, #0
    5d3e:	beq.w	5e7c <FatFile::read(void*, unsigned int)+0x174>
    5d42:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5d44:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5d46:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5d48:	mov	r6, r9
    5d4a:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5d4e:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5d52:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5d56:	bpl.n	5dd8 <FatFile::read(void*, unsigned int)+0xd0>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5d58:	ldr	r1, [r2, #32]
    5d5a:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5d5e:	cmp.w	fp, #0
    5d62:	bne.n	5e0c <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5d64:	cmp.w	r6, #512	; 0x200
    5d68:	bcc.n	5e0c <FatFile::read(void*, unsigned int)+0x104>
    5d6a:	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5d6c:	cmp	r1, r3
    5d6e:	beq.n	5e0c <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5d70:	cmp.w	r6, #1024	; 0x400
    5d74:	bcc.n	5e44 <FatFile::read(void*, unsigned int)+0x13c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5d76:	ldrb	r0, [r5, #0]
    5d78:	lsls	r0, r0, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5d7a:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5d7e:	bmi.n	5d8c <FatFile::read(void*, unsigned int)+0x84>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5d80:	ldrb	r0, [r2, #4]
    5d82:	rsb	r0, r8, r0
    5d86:	cmp	fp, r0
    5d88:	it	cs
    5d8a:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5d8c:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5d8e:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    5d92:	bhi.n	5dae <FatFile::read(void*, unsigned int)+0xa6>
    5d94:	add	r3, fp
    5d96:	cmp	r1, r3
    5d98:	bcs.n	5dae <FatFile::read(void*, unsigned int)+0xa6>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    5d9a:	add.w	r0, r2, #40	; 0x28
    5d9e:	str	r1, [sp, #4]
    5da0:	bl	6a94 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    5da4:	cmp	r0, #0
    5da6:	beq.w	5eac <FatFile::read(void*, unsigned int)+0x1a4>
    5daa:	ldr	r2, [r5, #8]
    5dac:	ldr	r1, [sp, #4]
    5dae:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    5db0:	ldr	r2, [r0, #0]
    5db2:	mov	r3, fp
    5db4:	ldr.w	fp, [r2, #12]
    5db8:	mov	r2, r7
    5dba:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    5dbc:	cmp	r0, #0
    5dbe:	beq.n	5ea2 <FatFile::read(void*, unsigned int)+0x19a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5dc0:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5dc2:	subs	r6, r6, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5dc4:	add	r3, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5dc6:	add	r7, r4
    m_curPosition += n;
    5dc8:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5dca:	beq.n	5e7c <FatFile::read(void*, unsigned int)+0x174>
    5dcc:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5dce:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5dd0:	lsls	r0, r1, #26
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5dd2:	ubfx	fp, r3, #0, #9
    if (isRootFixed()) {
    5dd6:	bmi.n	5d58 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5dd8:	ldrb.w	r8, [r2, #5]
    5ddc:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5de0:	cmp.w	fp, #0
    5de4:	bne.n	5e40 <FatFile::read(void*, unsigned int)+0x138>
    5de6:	cmp.w	r8, #0
    5dea:	bne.n	5e40 <FatFile::read(void*, unsigned int)+0x138>
        // start of new cluster
        if (m_curPosition == 0) {
    5dec:	cmp	r3, #0
    5dee:	bne.n	5e56 <FatFile::read(void*, unsigned int)+0x14e>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5df0:	lsls	r1, r1, #25
    5df2:	ite	mi
    5df4:	ldrmi	r1, [r2, #32]
    5df6:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5df8:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5dfa:	mov	r0, r2
    5dfc:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
    5e00:	ldr	r2, [r5, #8]
    5e02:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5e06:	cmp.w	fp, #0
    5e0a:	beq.n	5d64 <FatFile::read(void*, unsigned int)+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    5e0c:	add.w	r0, r2, #40	; 0x28
    5e10:	movs	r2, #0
    5e12:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    5e16:	cmp	r0, #0
    5e18:	beq.n	5e88 <FatFile::read(void*, unsigned int)+0x180>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5e1a:	rsb	r4, fp, #512	; 0x200
    5e1e:	cmp	r4, r6
    5e20:	it	cs
    5e22:	movcs	r4, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5e24:	add.w	r1, r0, fp
    5e28:	mov	r2, r4
    5e2a:	mov	r0, r7
    5e2c:	bl	9584 <memcpy>
    5e30:	b.n	5dc0 <FatFile::read(void*, unsigned int)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5e32:	ldr	r3, [r0, #28]
    5e34:	ldr	r2, [r0, #20]
    5e36:	subs	r3, r3, r2
    5e38:	cmp	r9, r3
    5e3a:	it	cs
    5e3c:	movcs	r9, r3
    5e3e:	b.n	5d3a <FatFile::read(void*, unsigned int)+0x32>
    5e40:	ldr	r1, [r5, #16]
    5e42:	b.n	5dfa <FatFile::read(void*, unsigned int)+0xf2>
    5e44:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    5e46:	ldr	r3, [r0, #0]
    5e48:	mov	r2, r7
    5e4a:	ldr	r3, [r3, #8]
    5e4c:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    5e4e:	cbz	r0, 5eb6 <FatFile::read(void*, unsigned int)+0x1ae>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5e50:	mov.w	r4, #512	; 0x200
    5e54:	b.n	5dc0 <FatFile::read(void*, unsigned int)+0xb8>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5e56:	lsls	r3, r1, #28
    5e58:	bpl.n	5e66 <FatFile::read(void*, unsigned int)+0x15e>
    5e5a:	ldrb	r3, [r5, #2]
    5e5c:	lsls	r4, r3, #25
    5e5e:	bpl.n	5e66 <FatFile::read(void*, unsigned int)+0x15e>
          m_curCluster++;
    5e60:	ldr	r1, [r5, #16]
    5e62:	adds	r1, #1
    5e64:	b.n	5df8 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e66:	mov	r0, r2
    5e68:	ldr	r1, [r5, #16]
    5e6a:	mov	r2, sl
    5e6c:	bl	6ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5e70:	cmp	r0, #0
    5e72:	blt.n	5edc <FatFile::read(void*, unsigned int)+0x1d4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5e74:	beq.n	5eca <FatFile::read(void*, unsigned int)+0x1c2>
    5e76:	ldr	r2, [r5, #8]
    5e78:	ldr	r1, [r5, #16]
    5e7a:	b.n	5dfa <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5e7c:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5e7e:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    5e82:	add	sp, #12
    5e84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    5e88:	movw	r0, #750	; 0x2ee
    5e8c:	bl	5964 <dbgPrint(unsigned short)>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5e90:	ldrb	r3, [r5, #1]
  return -1;
    5e92:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    5e96:	orr.w	r3, r3, #2
    5e9a:	strb	r3, [r5, #1]
  return -1;
}
    5e9c:	add	sp, #12
    5e9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
        DBG_FAIL_MACRO;
    5ea2:	movw	r0, #775	; 0x307
    5ea6:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    5eaa:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
    5eac:	movw	r0, #770	; 0x302
    5eb0:	bl	5964 <dbgPrint(unsigned short)>
          goto fail;
    5eb4:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
    5eb6:	movw	r0, #783	; 0x30f
    5eba:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    5ebe:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    DBG_FAIL_MACRO;
    5ec0:	movw	r0, #689	; 0x2b1
    5ec4:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    5ec8:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5eca:	ldrb	r3, [r5, #0]
    5ecc:	tst.w	r3, #112	; 0x70
    5ed0:	bne.n	5e7e <FatFile::read(void*, unsigned int)+0x176>
              break;
            }
            DBG_FAIL_MACRO;
    5ed2:	movw	r0, #733	; 0x2dd
    5ed6:	bl	5964 <dbgPrint(unsigned short)>
            goto fail;
    5eda:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    5edc:	movw	r0, #726	; 0x2d6
    5ee0:	bl	5964 <dbgPrint(unsigned short)>
            goto fail;
    5ee4:	b.n	5e90 <FatFile::read(void*, unsigned int)+0x188>
    5ee6:	nop

00005ee8 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5ee8:	push	{r4, r5, r6, lr}
    5eea:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5eec:	movs	r2, #1
    5eee:	add.w	r1, sp, #7
    5ef2:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5ef4:	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    5ef6:	ldr	r5, [r0, #16]
    5ef8:	bl	5d08 <FatFile::read(void*, unsigned int)>
    5efc:	cmp	r0, #1
    5efe:	it	eq
    5f00:	ldrbeq.w	r0, [sp, #7]
  int c = read();
  m_curPosition = curPosition;
    5f04:	str	r6, [r4, #20]
    5f06:	it	ne
    5f08:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5f0c:	str	r5, [r4, #16]
  return c;
}
    5f0e:	add	sp, #8
    5f10:	pop	{r4, r5, r6, pc}
    5f12:	nop

00005f14 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5f14:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    5f16:	ldr	r3, [r0, #20]
    5f18:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    5f1c:	sub	sp, #12
    5f1e:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    5f20:	cbz	r5, 5f24 <FatFile::readDirCache(bool)+0x10>
    5f22:	cbnz	r1, 5f4c <FatFile::readDirCache(bool)+0x38>
    int8_t n = read(&n, 1);
    5f24:	movs	r2, #1
    5f26:	add.w	r1, sp, #7
    5f2a:	mov	r0, r4
    5f2c:	bl	5d08 <FatFile::read(void*, unsigned int)>
    5f30:	sxtb	r0, r0
    if  (n != 1) {
    5f32:	cmp	r0, #1
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    5f34:	strb.w	r0, [sp, #7]
    if  (n != 1) {
    5f38:	bne.n	5f52 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    5f3a:	ldr	r3, [r4, #20]
    5f3c:	adds	r3, #31
    5f3e:	str	r3, [r4, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    5f40:	ldr	r0, [r4, #8]
    5f42:	adds	r0, #52	; 0x34
  } else {
    m_curPosition += 32;
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    5f44:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    5f48:	add	sp, #12
    5f4a:	pop	{r4, r5, pc}
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    5f4c:	adds	r3, #32
    5f4e:	str	r3, [r0, #20]
    5f50:	b.n	5f40 <FatFile::readDirCache(bool)+0x2c>
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    if  (n != 1) {
      if (n != 0) {
    5f52:	cbz	r0, 5f5c <FatFile::readDirCache(bool)+0x48>
        DBG_FAIL_MACRO;
    5f54:	movw	r0, #834	; 0x342
    5f58:	bl	5964 <dbgPrint(unsigned short)>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    5f5c:	movs	r0, #0
}
    5f5e:	add	sp, #12
    5f60:	pop	{r4, r5, pc}
    5f62:	nop

00005f64 <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5f64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f68:	ldrb	r3, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5f6a:	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    5f6c:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    5f6e:	cmp	r3, #0
    5f70:	beq.n	5fe2 <FatFile::seekSet(unsigned long)+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5f72:	ldr	r2, [r0, #20]
    5f74:	cmp	r2, r1
    5f76:	mov	r6, r1
    5f78:	beq.n	600a <FatFile::seekSet(unsigned long)+0xa6>
    return true;
  }
  if (pos == 0) {
    5f7a:	cbnz	r1, 5f8e <FatFile::seekSet(unsigned long)+0x2a>
    // set position to start of file
    m_curCluster = 0;
    5f7c:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5f7e:	ldrb	r3, [r4, #2]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    5f80:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    5f82:	bic.w	r3, r3, #32
    5f86:	strb	r3, [r4, #2]
  return true;
    5f88:	movs	r0, #1
    5f8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5f8e:	lsls	r0, r3, #28
    5f90:	bpl.n	5ff2 <FatFile::seekSet(unsigned long)+0x8e>
    if (pos > m_fileSize) {
    5f92:	ldr	r1, [r4, #28]
    5f94:	cmp	r6, r1
    5f96:	bhi.n	6014 <FatFile::seekSet(unsigned long)+0xb0>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5f98:	ldr.w	lr, [r4, #8]
    5f9c:	ldrb.w	r5, [lr, #6]
    5fa0:	adds	r5, #9
    5fa2:	uxtb	r1, r5
    5fa4:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5fa6:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    5fa8:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    5faa:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    5fac:	cmp	r0, r5
    5fae:	bhi.n	5fb2 <FatFile::seekSet(unsigned long)+0x4e>
    5fb0:	cbnz	r2, 6010 <FatFile::seekSet(unsigned long)+0xac>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5fb2:	lsls	r3, r3, #25
    5fb4:	ite	mi
    5fb6:	ldrmi.w	r3, [lr, #32]
    5fba:	ldrpl	r3, [r4, #32]
    5fbc:	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5fbe:	add.w	r8, r4, #16
    5fc2:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    5fc4:	cmp	r5, #0
    5fc6:	beq.n	5f7e <FatFile::seekSet(unsigned long)+0x1a>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5fc8:	ldr	r1, [r4, #16]
    5fca:	ldr	r0, [r4, #8]
    5fcc:	bl	6ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>
    5fd0:	cmp	r0, #0
    5fd2:	add.w	r5, r5, #4294967295
    5fd6:	bgt.n	5fc2 <FatFile::seekSet(unsigned long)+0x5e>
      DBG_FAIL_MACRO;
    5fd8:	movw	r0, #1133	; 0x46d
    5fdc:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    5fe0:	b.n	5fea <FatFile::seekSet(unsigned long)+0x86>
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    5fe2:	mov.w	r0, #1096	; 0x448
    5fe6:	bl	5964 <dbgPrint(unsigned short)>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    5fea:	str	r7, [r4, #16]
  return false;
    5fec:	movs	r0, #0
    5fee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    5ff2:	lsls	r1, r3, #26
    5ff4:	bpl.n	5f98 <FatFile::seekSet(unsigned long)+0x34>
    5ff6:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    5ff8:	ldrh	r3, [r3, #8]
    5ffa:	cmp.w	r6, r3, lsl #5
    5ffe:	bls.n	5f7e <FatFile::seekSet(unsigned long)+0x1a>
      goto done;
    }
    DBG_FAIL_MACRO;
    6000:	movw	r0, #1117	; 0x45d
    6004:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    6008:	b.n	5fea <FatFile::seekSet(unsigned long)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    600a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    600c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    6010:	subs	r5, r5, r0
    6012:	b.n	5fbe <FatFile::seekSet(unsigned long)+0x5a>
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
    6014:	movw	r0, #1110	; 0x456
    6018:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    601c:	b.n	5fea <FatFile::seekSet(unsigned long)+0x86>
    601e:	nop

00006020 <FatFile::rmdir()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    6020:	push	{r4, lr}
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6022:	ldrb	r3, [r0, #0]
    6024:	lsls	r2, r3, #27
    6026:	bmi.n	6034 <FatFile::rmdir()+0x14>
    DBG_FAIL_MACRO;
    6028:	mov.w	r0, #976	; 0x3d0
    602c:	bl	5964 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    6030:	movs	r0, #0
    6032:	pop	{r4, pc}
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6034:	movs	r1, #0
    6036:	mov	r4, r0
    6038:	bl	5f64 <FatFile::seekSet(unsigned long)>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    603c:	movs	r1, #1
    603e:	mov	r0, r4
    6040:	bl	5f14 <FatFile::readDirCache(bool)>
    if (!dir) {
    6044:	cbz	r0, 6064 <FatFile::rmdir()+0x44>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    6046:	ldrb	r3, [r0, #0]
    6048:	cbz	r3, 6068 <FatFile::rmdir()+0x48>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    604a:	cmp	r3, #229	; 0xe5
    604c:	beq.n	603c <FatFile::rmdir()+0x1c>
    604e:	cmp	r3, #46	; 0x2e
    6050:	beq.n	603c <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    6052:	ldrb	r3, [r0, #11]
    6054:	lsls	r3, r3, #28
    6056:	bmi.n	603c <FatFile::rmdir()+0x1c>
      DBG_FAIL_MACRO;
    6058:	movw	r0, #1002	; 0x3ea
    605c:	bl	5964 <dbgPrint(unsigned short)>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    6060:	movs	r0, #0
    6062:	pop	{r4, pc}
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    6064:	ldrb	r3, [r4, #1]
    6066:	cbnz	r3, 607e <FatFile::rmdir()+0x5e>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    6068:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    606a:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
    606c:	orr.w	r3, r3, #2
    6070:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    6072:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    6074:	mov	r0, r4

fail:
  return false;
}
    6076:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    607a:	b.w	7368 <FatFile::remove()>
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
        break;
      }
      DBG_FAIL_MACRO;
    607e:	movw	r0, #989	; 0x3dd
    6082:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    6086:	b.n	6030 <FatFile::rmdir()+0x10>

00006088 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6088:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    608c:	mov	r8, r1
    608e:	mov	r7, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6090:	movs	r1, #0
    6092:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6094:	mov	r4, r0
    6096:	mov	r6, r3
    6098:	ldrb.w	r5, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    609c:	bl	c37c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    60a0:	ldr.w	r0, [r8, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    60a4:	ldr.w	r3, [r8, #32]
    60a8:	str	r3, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    60aa:	and.w	r2, r7, #15
    60ae:	add.w	r3, r0, #52	; 0x34
    60b2:	add.w	r2, r3, r2, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    60b6:	strh	r7, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    60b8:	str	r0, [r4, #8]
    60ba:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    60bc:	lsls	r7, r1, #28
    60be:	bmi.n	60f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x70>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    60c0:	and.w	r1, r1, #23
    60c4:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    60c6:	ldrb	r3, [r2, #11]
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    60c8:	strb	r5, [r4, #3]
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    60ca:	tst.w	r3, #24
    m_attributes |= FILE_ATTR_FILE;
    60ce:	it	eq
    60d0:	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    60d4:	and.w	r3, r6, #3
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
    60d8:	it	eq
    60da:	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    60dc:	cmp	r3, #1
    60de:	beq.n	6186 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xfe>
    60e0:	cmp	r3, #2
    60e2:	beq.n	610a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>
    60e4:	cbz	r3, 6128 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa0>
    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
      break;

    default:
      DBG_FAIL_MACRO;
    60e6:	movw	r0, #541	; 0x21d
    60ea:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    60ee:	movs	r0, #0
    60f0:	strb	r0, [r4, #0]
  m_flags = 0;
    60f2:	strb	r0, [r4, #2]
  return false;
    60f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    DBG_FAIL_MACRO;
    60f8:	movw	r0, #514	; 0x202
    60fc:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    6100:	movs	r0, #0
    6102:	strb	r0, [r4, #0]
  m_flags = 0;
    6104:	strb	r0, [r4, #2]
  return false;
    6106:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    610a:	ldrb	r3, [r4, #0]
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    610c:	movs	r5, #3
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    610e:	tst.w	r3, #17
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    6112:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6114:	beq.n	6192 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x10a>
      DBG_FAIL_MACRO;
    6116:	movw	r0, #547	; 0x223
    611a:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    611e:	movs	r0, #0
    6120:	strb	r0, [r4, #0]
  m_flags = 0;
    6122:	strb	r0, [r4, #2]
  return false;
    6124:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    6128:	ands.w	lr, r6, #1024	; 0x400
    612c:	bne.n	61aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x122>
    612e:	movs	r5, #1
    if (isSubDir() || isReadOnly()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6130:	and.w	r3, r6, #8
    6134:	orrs	r5, r3
    6136:	uxtb	r5, r5
    6138:	strb	r5, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    613a:	ldrh	r1, [r2, #20]
    613c:	ldrh	r3, [r2, #26]
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    613e:	ldr	r7, [r0, #48]	; 0x30
    6140:	str	r7, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    6142:	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
    6146:	cmp.w	lr, #0
    614a:	beq.n	615e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    614c:	cbnz	r1, 619a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x112>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    614e:	orn	r5, r5, #127	; 0x7f
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6152:	lsls	r3, r6, #17
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6154:	strb	r5, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6156:	bmi.n	6168 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    6158:	movs	r0, #1
    615a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    615e:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6160:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    6162:	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6164:	lsls	r3, r6, #17
    6166:	bpl.n	6158 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    6168:	ldr	r1, [r4, #28]
    616a:	mov	r0, r4
    616c:	bl	5f64 <FatFile::seekSet(unsigned long)>
    6170:	cmp	r0, #0
    6172:	bne.n	6158 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    DBG_FAIL_MACRO;
    6174:	mov.w	r0, #572	; 0x23c
    6178:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    617c:	movs	r0, #0
    617e:	strb	r0, [r4, #0]
  m_flags = 0;
    6180:	strb	r0, [r4, #2]
  return false;
    6182:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6186:	ldrb	r3, [r4, #0]
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    6188:	movs	r5, #2
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    618a:	tst.w	r3, #17
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    618e:	strb	r5, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6190:	bne.n	6116 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    6192:	sxtb	r5, r5
    6194:	and.w	lr, r6, #1024	; 0x400
    6198:	b.n	6130 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    619a:	bl	6c90 <FatPartition::freeChain(unsigned long)>
    619e:	cbnz	r0, 61b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x12c>
      DBG_FAIL_MACRO;
    61a0:	movw	r0, #561	; 0x231
    61a4:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    61a8:	b.n	60ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
        DBG_FAIL_MACRO;
    61aa:	movw	r0, #526	; 0x20e
    61ae:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    61b2:	b.n	60ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    61b4:	ldrb	r5, [r4, #2]
    61b6:	b.n	614e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc6>

000061b8 <FatFile::openNext(FatFile*, int)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    61b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    61bc:	ldrb	r3, [r0, #0]
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    61be:	sub	sp, #12
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    61c0:	cbnz	r3, 61cc <FatFile::openNext(FatFile*, int)+0x14>
    61c2:	ldrb	r3, [r1, #0]
    61c4:	tst.w	r3, #112	; 0x70
    61c8:	mov	r5, r1
    61ca:	bne.n	61de <FatFile::openNext(FatFile*, int)+0x26>
    DBG_FAIL_MACRO;
    61cc:	movw	r0, #591	; 0x24f
    61d0:	bl	5964 <dbgPrint(unsigned short)>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    61d4:	movs	r4, #0
}
    61d6:	mov	r0, r4
    61d8:	add	sp, #12
    61da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61de:	ldr	r6, [r1, #20]
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    61e0:	ands.w	r7, r6, #31
    61e4:	bne.n	61cc <FatFile::openNext(FatFile*, int)+0x14>
    61e6:	mov	r8, r0
    61e8:	mov	r9, r2
    61ea:	mov	sl, r7
    61ec:	b.n	61f2 <FatFile::openNext(FatFile*, int)+0x3a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    61ee:	movs	r7, #0
    61f0:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    61f2:	movs	r1, #0
    61f4:	mov	r0, r5
    61f6:	bl	5f14 <FatFile::readDirCache(bool)>
    if (!dir) {
    61fa:	mov	r4, r0
    61fc:	cbz	r0, 622a <FatFile::openNext(FatFile*, int)+0x72>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    61fe:	ldrb	r3, [r0, #0]
    6200:	cmp	r3, #0
    6202:	beq.n	61d4 <FatFile::openNext(FatFile*, int)+0x1c>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6204:	cmp	r3, #46	; 0x2e
    6206:	beq.n	61ee <FatFile::openNext(FatFile*, int)+0x36>
    6208:	cmp	r3, #229	; 0xe5
    620a:	beq.n	61ee <FatFile::openNext(FatFile*, int)+0x36>
    620c:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    620e:	and.w	r2, r1, #8
    6212:	and.w	fp, r2, #255	; 0xff
    6216:	cbz	r2, 623a <FatFile::openNext(FatFile*, int)+0x82>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    6218:	cmp	r1, #15
    621a:	bne.n	61ee <FatFile::openNext(FatFile*, int)+0x36>
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    621c:	lsls	r2, r3, #25
    621e:	bpl.n	61f0 <FatFile::openNext(FatFile*, int)+0x38>
        lfnOrd = ldir->order & 0X1F;
    6220:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    6224:	ldrb.w	sl, [r0, #13]
    6228:	b.n	61f0 <FatFile::openNext(FatFile*, int)+0x38>
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
    622a:	ldrb	r3, [r5, #1]
    622c:	cmp	r3, #0
    622e:	beq.n	61d4 <FatFile::openNext(FatFile*, int)+0x1c>
        DBG_FAIL_MACRO;
    6230:	mov.w	r0, #600	; 0x258
    6234:	bl	5964 <dbgPrint(unsigned short)>
    6238:	b.n	61d6 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    623a:	cbnz	r7, 625c <FatFile::openNext(FatFile*, int)+0xa4>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    623c:	str	r7, [sp, #0]
    623e:	mov	r3, r9
    6240:	ubfx	r2, r6, #5, #16
    6244:	mov	r1, r5
    6246:	mov	r0, r8
    6248:	bl	6088 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    624c:	mov	r4, r0
    624e:	cmp	r0, #0
    6250:	bne.n	61d6 <FatFile::openNext(FatFile*, int)+0x1e>
        DBG_FAIL_MACRO;
    6252:	movw	r0, #617	; 0x269
    6256:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    625a:	b.n	61d6 <FatFile::openNext(FatFile*, int)+0x1e>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    625c:	bl	6f74 <FatFile::lfnChecksum(unsigned char*)>
    6260:	cmp	sl, r0
    6262:	beq.n	623c <FatFile::openNext(FatFile*, int)+0x84>
        DBG_FAIL_MACRO;
    6264:	movw	r0, #613	; 0x265
      lfnOrd = 0;
    }
  }

fail:
  return false;
    6268:	mov	r4, fp
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
    626a:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    626e:	b.n	61d6 <FatFile::openNext(FatFile*, int)+0x1e>

00006270 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    6270:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    6274:	ldrb	r3, [r1, #0]
    6276:	tst.w	r3, #112	; 0x70

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    627a:	sub	sp, #36	; 0x24
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    627c:	beq.w	63ae <FatFile::mkdir(FatFile*, fname_t*)+0x13e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6280:	movw	r3, #2562	; 0xa02
    6284:	mov	r6, r1
    6286:	mov	r4, r0
    6288:	bl	7650 <FatFile::open(FatFile*, fname_t*, int)>
    628c:	cmp	r0, #0
    628e:	beq.w	639e <FatFile::mkdir(FatFile*, fname_t*)+0x12e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6292:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6294:	movs	r3, #16
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    6296:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    6298:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    629a:	mov	r0, r4
    629c:	bl	59e4 <FatFile::addDirCluster()>
    62a0:	cmp	r0, #0
    62a2:	beq.w	63d4 <FatFile::mkdir(FatFile*, fname_t*)+0x164>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    62a6:	ldr	r3, [r4, #16]
    62a8:	str	r3, [r4, #32]
    62aa:	movs	r1, #0
    62ac:	mov	r0, r4
    62ae:	bl	5f64 <FatFile::seekSet(unsigned long)>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    62b2:	ldrb	r3, [r4, #0]
    62b4:	cmp	r3, #0
    62b6:	bne.w	63be <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    62ba:	movs	r1, #1
    62bc:	mov	r0, r4
    62be:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    62c2:	mov	r5, r0
    62c4:	cmp	r0, #0
    62c6:	beq.w	63ee <FatFile::mkdir(FatFile*, fname_t*)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    62ca:	movs	r3, #16
    62cc:	strb	r3, [r0, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    62ce:	ldr	r2, [r0, #8]
    62d0:	ldr	r1, [r5, #4]
    62d2:	ldr	r3, [r5, #12]
    62d4:	ldr	r0, [r0, #0]
    62d6:	ldrh.w	r8, [r5, #20]
    62da:	ldrh.w	r9, [r5, #26]
    62de:	mov	r7, sp
    62e0:	stmia	r7!, {r0, r1, r2, r3}
    62e2:	ldr	r1, [r5, #20]
    62e4:	ldr	r2, [r5, #24]
    62e6:	ldr	r3, [r5, #28]
    62e8:	ldr	r0, [r5, #16]
  dot.name[0] = '.';
    62ea:	add	r5, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    62ec:	stmia	r7!, {r0, r1, r2, r3}
  dot.name[0] = '.';
    62ee:	movs	r3, #46	; 0x2e
    62f0:	strb.w	r3, [r5, #-32]!
    62f4:	add.w	r1, sp, #10
    62f8:	mov	r3, r5
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    62fa:	movs	r2, #32
    62fc:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    6300:	cmp	r1, r3
    6302:	bne.n	62fc <FatFile::mkdir(FatFile*, fname_t*)+0x8c>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    6304:	ldr	r1, [r4, #32]
    6306:	ldr	r0, [r4, #8]
    6308:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    630c:	ldr	r3, [r4, #8]
    630e:	mov	r1, r0
    6310:	movs	r2, #1
    6312:	add.w	r0, r3, #40	; 0x28
    6316:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    631a:	mov	lr, r0
    631c:	cmp	r0, #0
    631e:	beq.n	63e4 <FatFile::mkdir(FatFile*, fname_t*)+0x174>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    6320:	strh.w	r8, [sp, #20]
    6324:	strh.w	r9, [sp, #26]
    6328:	mov	r7, r5
    632a:	ldmia	r7!, {r0, r1, r2, r3}
    632c:	str.w	r0, [lr]
    6330:	str.w	r1, [lr, #4]
    6334:	str.w	r2, [lr, #8]
    6338:	str.w	r3, [lr, #12]
    633c:	ldmia	r7!, {r0, r1, r2, r3}
    633e:	str.w	r0, [lr, #16]
    6342:	str.w	r1, [lr, #20]
    6346:	str.w	r2, [lr, #24]
    634a:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    634e:	ldr	r3, [r6, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6350:	strh.w	r3, [sp, #26]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    6354:	movs	r2, #46	; 0x2e
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6356:	lsrs	r3, r3, #16
    6358:	strh.w	r3, [sp, #20]
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
  // make entry for '..'
  dot.name[1] = '.';
    635c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    6360:	ldmia	r5!, {r0, r1, r2, r3}
    6362:	add.w	r6, lr, #32
    6366:	str.w	r0, [lr, #32]
    636a:	str	r1, [r6, #4]
    636c:	str	r2, [r6, #8]
    636e:	str	r3, [r6, #12]
    6370:	ldmia	r5!, {r0, r1, r2, r3}
    6372:	str	r0, [r6, #16]
    6374:	str	r1, [r6, #20]
    6376:	str	r2, [r6, #24]
    6378:	str	r3, [r6, #28]
  // write first sector
  return m_vol->cacheSync();
    637a:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    637c:	add.w	r0, r4, #40	; 0x28
    6380:	bl	6a94 <FatCache::sync()>
    6384:	cbz	r0, 63a6 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    6386:	add.w	r0, r4, #564	; 0x234
    638a:	bl	6a94 <FatCache::sync()>
    638e:	cbz	r0, 63a6 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    6390:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6392:	ldr	r3, [r0, #0]
    6394:	ldr	r3, [r3, #20]

fail:
  return false;
}
    6396:	add	sp, #36	; 0x24
    6398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    639c:	bx	r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    639e:	mov.w	r0, #346	; 0x15a
    63a2:	bl	5964 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    63a6:	movs	r0, #0
    63a8:	add	sp, #36	; 0x24
    63aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    63ae:	movw	r0, #341	; 0x155
    63b2:	bl	5964 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    63b6:	movs	r0, #0
    63b8:	add	sp, #36	; 0x24
    63ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    63be:	mov	r0, r4
    63c0:	bl	5ae4 <FatFile::sync() [clone .part.38]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    63c4:	cmp	r0, #0
    63c6:	bne.w	62ba <FatFile::mkdir(FatFile*, fname_t*)+0x4a>
    DBG_FAIL_MACRO;
    63ca:	movw	r0, #363	; 0x16b
    63ce:	bl	5964 <dbgPrint(unsigned short)>
    63d2:	b.n	63a6 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
  m_flags = FILE_FLAG_READ;
  m_attributes = FILE_ATTR_SUBDIR;

  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    63d4:	movw	r0, #355	; 0x163
    63d8:	bl	5964 <dbgPrint(unsigned short)>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    63dc:	movs	r0, #0
    63de:	add	sp, #36	; 0x24
    63e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    DBG_FAIL_MACRO;
    63e4:	mov.w	r0, #386	; 0x182
    63e8:	bl	5964 <dbgPrint(unsigned short)>
    63ec:	b.n	63a6 <FatFile::mkdir(FatFile*, fname_t*)+0x136>
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    63ee:	movw	r0, #369	; 0x171
    63f2:	bl	5964 <dbgPrint(unsigned short)>
    63f6:	b.n	63a6 <FatFile::mkdir(FatFile*, fname_t*)+0x136>

000063f8 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    63f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63fc:	mov	r6, r0
    63fe:	sub	sp, #72	; 0x48
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    6400:	ldrb	r4, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    6402:	str	r2, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    6404:	movs	r0, #0
    6406:	strb.w	r0, [sp, #36]	; 0x24
    640a:	strb.w	r0, [sp, #37]	; 0x25
    640e:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    6412:	cmp	r4, #0
    6414:	bne.n	6486 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    6416:	mov	r8, r3
    6418:	ldrb	r3, [r1, #0]
    641a:	tst.w	r3, #112	; 0x70
    641e:	mov	r5, r1
    6420:	beq.n	6486 <FatFile::mkdir(FatFile*, char const*, bool)+0x8e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    6422:	ldrb	r3, [r2, #0]
    6424:	cmp	r3, #47	; 0x2f
    6426:	mov	r0, r2
    6428:	beq.n	6468 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    642a:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    642c:	add	r2, sp, #4
    642e:	add	r1, sp, #12
    6430:	bl	70fc <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6434:	add	r2, sp, #12
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    6436:	mov	r4, r0
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6438:	mov	r1, r5
    643a:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    643c:	cmp	r0, #0
    643e:	beq.n	64cc <FatFile::mkdir(FatFile*, char const*, bool)+0xd4>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6440:	ldr	r4, [sp, #4]
    6442:	ldrb	r4, [r4, #0]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    6444:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    6446:	cmp	r4, #0
    6448:	beq.n	64dc <FatFile::mkdir(FatFile*, char const*, bool)+0xe4>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    644a:	bl	7650 <FatFile::open(FatFile*, fname_t*, int)>
    644e:	mov	r4, r0
    6450:	cbnz	r0, 64a6 <FatFile::mkdir(FatFile*, char const*, bool)+0xae>
      if (!pFlag || !mkdir(parent, &fname)) {
    6452:	cmp.w	r8, #0
    6456:	bne.n	6498 <FatFile::mkdir(FatFile*, char const*, bool)+0xa0>
        DBG_FAIL_MACRO;
    6458:	mov.w	r0, #320	; 0x140
    645c:	bl	5964 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    6460:	mov	r0, r4
    6462:	add	sp, #72	; 0x48
    6464:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    6468:	adds	r0, #1
    646a:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    646c:	ldrb	r3, [r0, #0]
    646e:	cmp	r3, #47	; 0x2f
    6470:	beq.n	6468 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    6472:	ldr	r1, [r5, #8]
    6474:	add	r0, sp, #36	; 0x24
    6476:	bl	5ba8 <FatFile::openRoot(FatVolume*)>
    647a:	mov	r4, r0
    647c:	cmp	r0, #0
    647e:	beq.n	64ea <FatFile::mkdir(FatFile*, char const*, bool)+0xf2>
    6480:	ldr	r0, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    6482:	add	r5, sp, #36	; 0x24
    6484:	b.n	642a <FatFile::mkdir(FatFile*, char const*, bool)+0x32>
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    6486:	movw	r0, #297	; 0x129
    648a:	bl	5964 <dbgPrint(unsigned short)>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    648e:	movs	r4, #0
}
    6490:	mov	r0, r4
    6492:	add	sp, #72	; 0x48
    6494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
      if (!pFlag || !mkdir(parent, &fname)) {
    6498:	mov	r1, r5
    649a:	add	r2, sp, #12
    649c:	mov	r0, r6
    649e:	bl	6270 <FatFile::mkdir(FatFile*, fname_t*)>
    64a2:	cmp	r0, #0
    64a4:	beq.n	6458 <FatFile::mkdir(FatFile*, char const*, bool)+0x60>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    64a6:	mov	r5, r6
    64a8:	ldmia	r5!, {r0, r1, r2, r3}
    64aa:	add	r4, sp, #36	; 0x24
    64ac:	stmia	r4!, {r0, r1, r2, r3}
    64ae:	ldmia	r5!, {r0, r1, r2, r3}
    64b0:	stmia	r4!, {r0, r1, r2, r3}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    64b2:	ldrb	r3, [r6, #0]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    64b4:	ldr	r2, [r5, #0]
    64b6:	str	r2, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    64b8:	cbnz	r3, 64c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    64ba:	strb	r7, [r6, #0]
  m_flags = 0;
    64bc:	strb	r7, [r6, #2]
    64be:	ldr	r0, [sp, #4]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    64c0:	add	r5, sp, #36	; 0x24
    64c2:	b.n	642c <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    64c4:	mov	r0, r6
    64c6:	bl	5ae4 <FatFile::sync() [clone .part.38]>
    64ca:	b.n	64ba <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
    64cc:	mov.w	r0, #312	; 0x138
    64d0:	bl	5964 <dbgPrint(unsigned short)>
  }
  return mkdir(parent, &fname);

fail:
  return false;
}
    64d4:	mov	r0, r4
    64d6:	add	sp, #72	; 0x48
    64d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    64dc:	add	r2, sp, #12
    64de:	mov	r1, r5
    64e0:	mov	r0, r6
    64e2:	bl	6270 <FatFile::mkdir(FatFile*, fname_t*)>
    64e6:	mov	r4, r0
    64e8:	b.n	6460 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
      DBG_FAIL_MACRO;
    64ea:	movw	r0, #305	; 0x131
    64ee:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    64f2:	b.n	6460 <FatFile::mkdir(FatFile*, char const*, bool)+0x68>

000064f4 <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    64f4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    64f8:	ldrb	r4, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    64fa:	sub	sp, #104	; 0x68
    64fc:	movs	r6, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    64fe:	ands.w	r4, r4, #24
    6502:	strb.w	r6, [sp, #32]
    6506:	strb.w	r6, [sp, #33]	; 0x21
    650a:	strb.w	r6, [sp, #34]	; 0x22
    650e:	strb.w	r6, [sp, #68]	; 0x44
    6512:	strb.w	r6, [sp, #69]	; 0x45
    6516:	strb.w	r6, [sp, #70]	; 0x46
    651a:	bne.n	652c <FatFile::rename(FatFile*, char const*)+0x38>
    DBG_FAIL_MACRO;
    651c:	movw	r0, #875	; 0x36b
    6520:	bl	5964 <dbgPrint(unsigned short)>
  }
  return m_vol->cacheSync();

fail:
  return false;
}
    6524:	mov	r0, r4
    6526:	add	sp, #104	; 0x68
    6528:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652c:	mov	r8, r2
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    652e:	ldr	r3, [r1, #8]
    6530:	ldr	r2, [r0, #8]
    6532:	cmp	r2, r3
    6534:	mov	r5, r0
    6536:	mov	r7, r1
    6538:	beq.n	654c <FatFile::rename(FatFile*, char const*)+0x58>
    DBG_FAIL_MACRO;
    653a:	movw	r0, #885	; 0x375
    653e:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    6542:	mov	r4, r6
}
    6544:	mov	r0, r4
    6546:	add	sp, #104	; 0x68
    6548:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    654c:	bl	5ae4 <FatFile::sync() [clone .part.38]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    6550:	mov	lr, r5
    6552:	ldmia.w	lr!, {r0, r1, r2, r3}
    6556:	add	r4, sp, #68	; 0x44
    6558:	stmia	r4!, {r0, r1, r2, r3}
    655a:	ldmia.w	lr!, {r0, r1, r2, r3}
    655e:	stmia	r4!, {r0, r1, r2, r3}
    6560:	ldr.w	r3, [lr]
    6564:	str	r3, [r4, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    6566:	mov	r1, r6
    6568:	mov	r0, r5
    656a:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    656e:	mov	r4, r0
    6570:	cmp	r0, #0
    6572:	beq.w	670e <FatFile::rename(FatFile*, char const*)+0x21a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6576:	ldr	r1, [r4, #4]
    6578:	ldr	r2, [r4, #8]
    657a:	ldr	r3, [r4, #12]
    657c:	ldr	r0, [r0, #0]
  // make directory entry for new path
  if (isFile()) {
    657e:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6582:	mov	lr, sp
    6584:	stmia.w	lr!, {r0, r1, r2, r3}
    6588:	ldr	r1, [r4, #20]
    658a:	ldr	r2, [r4, #24]
    658c:	ldr	r3, [r4, #28]
    658e:	ldr	r0, [r4, #16]
  // make directory entry for new path
  if (isFile()) {
    6590:	and.w	r4, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    6594:	stmia.w	lr!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    6598:	and.w	r3, r4, #255	; 0xff
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    659c:	mov	r2, r8
    659e:	mov	r1, r7
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    65a0:	cmp	r4, #0
    65a2:	bne.w	66b2 <FatFile::rename(FatFile*, char const*)+0x1be>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    65a6:	add	r0, sp, #32
    65a8:	bl	63f8 <FatFile::mkdir(FatFile*, char const*, bool)>
    65ac:	mov	r4, r0
    65ae:	cmp	r0, #0
    65b0:	beq.w	66fa <FatFile::rename(FatFile*, char const*)+0x206>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    65b4:	ldr	r6, [sp, #64]	; 0x40
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    65b6:	ldr	r0, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
    65b8:	ldrh.w	r1, [sp, #36]	; 0x24
  m_lfnOrd = file.m_lfnOrd;
    65bc:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    65c0:	ldr	r3, [sp, #44]	; 0x2c
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    65c2:	str	r0, [r5, #24]
  m_dirIndex = file.m_dirIndex;
    65c4:	strh	r1, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    65c6:	movs	r7, #0
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    65c8:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    65ca:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    65cc:	movs	r1, #1
    65ce:	mov	r0, r5
  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    65d0:	strb.w	r7, [sp, #32]
  file.m_flags = 0;
    65d4:	strb.w	r7, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    65d8:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    65dc:	mov	r4, r0
    65de:	cmp	r0, #0
    65e0:	beq.w	6704 <FatFile::rename(FatFile*, char const*)+0x210>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    65e4:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    65e6:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    65ea:	ldr.w	r0, [r3, #-91]!
    65ee:	str.w	r0, [r4, #13]
    65f2:	ldr	r0, [r3, #4]
    65f4:	str.w	r0, [r4, #17]
    65f8:	ldr	r0, [r3, #8]
    65fa:	str.w	r0, [r4, #21]
    65fe:	ldr	r0, [r3, #12]
    6600:	str.w	r0, [r4, #25]
    6604:	ldrh	r0, [r3, #16]
    6606:	ldrb	r3, [r3, #18]
    6608:	strh.w	r0, [r4, #29]
    660c:	strb	r3, [r4, #31]
  dir->attributes = entry.attributes;
    660e:	strb	r2, [r4, #11]

  // update dot dot if directory
  if (dirCluster) {
    6610:	cmp	r6, #0
    6612:	beq.n	6688 <FatFile::rename(FatFile*, char const*)+0x194>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6614:	mov	r1, r6
    6616:	ldr	r0, [r5, #8]
    6618:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    661c:	ldr	r3, [r5, #8]
    661e:	mov	r1, r0
    6620:	mov	r2, r7
    6622:	add.w	r0, r3, #40	; 0x28
    6626:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    662a:	mov	r4, r0
    662c:	cmp	r0, #0
    662e:	beq.n	6718 <FatFile::rename(FatFile*, char const*)+0x224>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    6630:	ldr.w	r0, [r4, #32]!
    6634:	ldr	r1, [r4, #4]
    6636:	ldr	r2, [r4, #8]
    6638:	ldr	r3, [r4, #12]
    663a:	mov	r7, sp
    663c:	stmia	r7!, {r0, r1, r2, r3}
    663e:	ldr	r0, [r4, #16]
    6640:	ldr	r1, [r4, #20]
    6642:	ldr	r2, [r4, #24]
    6644:	ldr	r3, [r4, #28]
    6646:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    6648:	mov	r1, r6
    664a:	ldr	r0, [r5, #8]
    664c:	bl	6c90 <FatPartition::freeChain(unsigned long)>
    6650:	mov	r4, r0
    6652:	cmp	r0, #0
    6654:	beq.n	66f0 <FatFile::rename(FatFile*, char const*)+0x1fc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    6656:	ldr	r1, [r5, #32]
    6658:	ldr	r0, [r5, #8]
    665a:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
    665e:	ldr	r3, [r5, #8]
    6660:	mov	r1, r0
    6662:	movs	r2, #1
    6664:	add.w	r0, r3, #40	; 0x28
    6668:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    666c:	mov	r4, r0
    666e:	cmp	r0, #0
    6670:	beq.n	6722 <FatFile::rename(FatFile*, char const*)+0x22e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    6672:	mov	r6, sp
    6674:	ldmia	r6!, {r0, r1, r2, r3}
    6676:	str	r0, [r4, #32]
    6678:	str	r1, [r4, #36]	; 0x24
    667a:	str	r2, [r4, #40]	; 0x28
    667c:	str	r3, [r4, #44]	; 0x2c
    667e:	ldmia	r6!, {r0, r1, r2, r3}
    6680:	str	r0, [r4, #48]	; 0x30
    6682:	str	r1, [r4, #52]	; 0x34
    6684:	str	r2, [r4, #56]	; 0x38
    6686:	str	r3, [r4, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6688:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    668a:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    668c:	movs	r3, #8
  if (!oldFile.remove()) {
    668e:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    6690:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6692:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6696:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    669a:	bl	7368 <FatFile::remove()>
    669e:	mov	r4, r0
    66a0:	cbz	r0, 66ce <FatFile::rename(FatFile*, char const*)+0x1da>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    66a2:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    66a4:	add.w	r0, r4, #40	; 0x28
    66a8:	bl	6a94 <FatCache::sync()>
    66ac:	cbnz	r0, 66d8 <FatFile::rename(FatFile*, char const*)+0x1e4>
    66ae:	movs	r4, #0
    66b0:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
  // make directory entry for new path
  if (isFile()) {
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    66b2:	movw	r3, #2561	; 0xa01
    66b6:	add	r0, sp, #32
    66b8:	bl	5bf4 <FatFile::open(FatFile*, char const*, int)>
    66bc:	mov	r4, r0
    66be:	cmp	r0, #0
    66c0:	bne.w	65b6 <FatFile::rename(FatFile*, char const*)+0xc2>
      DBG_FAIL_MACRO;
    66c4:	movw	r0, #901	; 0x385
    66c8:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    66cc:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  if (!oldFile.remove()) {
    DBG_FAIL_MACRO;
    66ce:	mov.w	r0, #964	; 0x3c4
    66d2:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    66d6:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
    66d8:	add.w	r0, r4, #564	; 0x234
    66dc:	bl	6a94 <FatCache::sync()>
    66e0:	cmp	r0, #0
    66e2:	beq.n	66ae <FatFile::rename(FatFile*, char const*)+0x1ba>
    66e4:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    66e6:	ldr	r3, [r0, #0]
    66e8:	ldr	r3, [r3, #20]
    66ea:	blx	r3
    66ec:	mov	r4, r0
    66ee:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
      DBG_FAIL_MACRO;
    66f0:	movw	r0, #947	; 0x3b3
    66f4:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    66f8:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
      DBG_FAIL_MACRO;
    66fa:	movw	r0, #907	; 0x38b
    66fe:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    6702:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    6704:	movw	r0, #926	; 0x39e
    6708:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    670c:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
  // sync() and cache directory entry
  sync();
  oldFile = *this;
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
  if (!dir) {
    DBG_FAIL_MACRO;
    670e:	movw	r0, #893	; 0x37d
    6712:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    6716:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
  if (dirCluster) {
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6718:	mov.w	r0, #940	; 0x3ac
    671c:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    6720:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6722:	movw	r0, #954	; 0x3ba
    6726:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    672a:	b.n	6524 <FatFile::rename(FatFile*, char const*)+0x30>

0000672c <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    672c:	ldrb	r3, [r0, #0]
    672e:	cbz	r3, 6734 <FatFile::sync()+0x8>
    6730:	b.w	5ae4 <FatFile::sync() [clone .part.38]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    6734:	movs	r0, #1
    6736:	bx	lr

00006738 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6738:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    673c:	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    673e:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6740:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6742:	bpl.w	68ae <FatFile::write(void const*, unsigned int)+0x176>
    6746:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6748:	lsls	r2, r3, #28
    674a:	mov	r8, r1
    674c:	bmi.w	6908 <FatFile::write(void const*, unsigned int)+0x1d0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6750:	ldr	r2, [r4, #20]
    6752:	mvns	r3, r2
    6754:	cmp	r9, r3
    6756:	bhi.w	68fe <FatFile::write(void const*, unsigned int)+0x1c6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    675a:	cmp.w	r9, #0
    675e:	beq.w	691e <FatFile::write(void const*, unsigned int)+0x1e6>
    6762:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6764:	mov.w	sl, #0
    6768:	b.n	67d6 <FatFile::write(void const*, unsigned int)+0x9e>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    676a:	cmp	r1, #0
    676c:	beq.w	6872 <FatFile::write(void const*, unsigned int)+0x13a>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    6770:	ldrb	r3, [r4, #2]
    6772:	lsls	r3, r3, #25
    6774:	bpl.w	6882 <FatFile::write(void const*, unsigned int)+0x14a>
    6778:	ldr	r3, [r4, #28]
    677a:	cmp	r3, r2
    677c:	bls.w	6882 <FatFile::write(void const*, unsigned int)+0x14a>
          m_curCluster++;
    6780:	adds	r1, #1
    6782:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6784:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6788:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    678c:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    678e:	bcs.n	6810 <FatFile::write(void const*, unsigned int)+0xd8>
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    6790:	ldr	r2, [r4, #20]
    6792:	ldr	r3, [r4, #28]
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6794:	ldr	r0, [r4, #8]
    6796:	cmp.w	r6, #512	; 0x200
    679a:	mov	r5, r6
    679c:	it	cs
    679e:	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    67a2:	cmp	r2, r3
    67a4:	bcc.n	68a0 <FatFile::write(void const*, unsigned int)+0x168>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    67a6:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    67a8:	adds	r0, #40	; 0x28
    67aa:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    67ae:	cmp	r0, #0
    67b0:	beq.w	6938 <FatFile::write(void const*, unsigned int)+0x200>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    67b4:	add	r0, r7
    67b6:	mov	r2, r5
    67b8:	mov	r1, r8
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    67ba:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    67bc:	bl	9584 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    67c0:	cmp.w	r7, #512	; 0x200
    67c4:	beq.w	68d4 <FatFile::write(void const*, unsigned int)+0x19c>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    67c8:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    67ca:	subs	r6, r6, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    67cc:	add	r2, r5
    src += n;
    67ce:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    67d0:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    67d2:	beq.w	691e <FatFile::write(void const*, unsigned int)+0x1e6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    67d6:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    67d8:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    67da:	ldrb	r3, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    67dc:	ands.w	r5, r3, r2, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    67e0:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    67e4:	bne.n	6800 <FatFile::write(void const*, unsigned int)+0xc8>
    67e6:	cmp	r7, #0
    67e8:	beq.n	676a <FatFile::write(void const*, unsigned int)+0x32>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    67ea:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
    67ee:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    67f0:	rsb	r5, r7, #512	; 0x200
    67f4:	cmp	r5, r6
    67f6:	it	cs
    67f8:	movcs	r5, r6
    67fa:	ldr	r0, [r4, #8]
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    67fc:	movs	r2, #1
    67fe:	b.n	67a8 <FatFile::write(void const*, unsigned int)+0x70>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6800:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    6804:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6806:	cmp	r7, #0
    6808:	bne.n	67f0 <FatFile::write(void const*, unsigned int)+0xb8>
    680a:	cmp.w	r6, #512	; 0x200
    680e:	bcc.n	6790 <FatFile::write(void const*, unsigned int)+0x58>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6810:	cmp.w	r6, #1024	; 0x400
    6814:	ldr	r2, [r4, #8]
    6816:	bcc.n	6858 <FatFile::write(void const*, unsigned int)+0x120>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6818:	ldrb	r3, [r2, #4]
    681a:	ldr	r7, [r2, #48]	; 0x30
    681c:	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    681e:	lsrs	r0, r6, #9
    6820:	cmp	r3, r0
    6822:	it	cs
    6824:	movcs	r3, r0
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    6826:	cmp	r7, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6828:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    682c:	bcc.n	6840 <FatFile::write(void const*, unsigned int)+0x108>
    682e:	add	r7, r3
    6830:	cmp	r7, r1
    6832:	bls.n	6840 <FatFile::write(void const*, unsigned int)+0x108>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6834:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    6838:	mov.w	r0, #4294967295
    683c:	str	r0, [r2, #48]	; 0x30
    683e:	ldr	r2, [r4, #8]
    6840:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    6842:	ldr	r2, [r0, #0]
    6844:	ldr	r7, [r2, #28]
    6846:	mov	r2, r8
    6848:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    684a:	cmp	r0, #0
    684c:	bne.n	67c8 <FatFile::write(void const*, unsigned int)+0x90>
        DBG_FAIL_MACRO;
    684e:	movw	r0, #1410	; 0x582
    6852:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    6856:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    6858:	ldr	r3, [r2, #48]	; 0x30
    685a:	cmp	r3, r1
    685c:	beq.n	68c6 <FatFile::write(void const*, unsigned int)+0x18e>
    685e:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    6860:	ldr	r3, [r0, #0]
    6862:	mov	r2, r8
    6864:	ldr	r3, [r3, #24]
    6866:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    6868:	cmp	r0, #0
    686a:	beq.n	6952 <FatFile::write(void const*, unsigned int)+0x21a>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    686c:	mov.w	r5, #512	; 0x200
    6870:	b.n	67c8 <FatFile::write(void const*, unsigned int)+0x90>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    6872:	ldr	r1, [r4, #32]
    6874:	cmp	r1, #0
    6876:	beq.n	68ec <FatFile::write(void const*, unsigned int)+0x1b4>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    6878:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    687a:	bl	6aa4 <FatPartition::clusterStartSector(unsigned long) const>
    687e:	mov	r1, r0
    6880:	b.n	680a <FatFile::write(void const*, unsigned int)+0xd2>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6882:	add.w	r2, r4, #16
    6886:	bl	6ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    688a:	cmp	r0, #0
    688c:	blt.n	6962 <FatFile::write(void const*, unsigned int)+0x22a>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    688e:	bne.n	689a <FatFile::write(void const*, unsigned int)+0x162>
          // add cluster if at end of chain
          if (!addCluster()) {
    6890:	mov	r0, r4
    6892:	bl	59a0 <FatFile::addCluster()>
    6896:	cmp	r0, #0
    6898:	beq.n	696c <FatFile::write(void const*, unsigned int)+0x234>
    689a:	ldr	r0, [r4, #8]
    689c:	ldr	r1, [r4, #16]
    689e:	b.n	687a <FatFile::write(void const*, unsigned int)+0x142>
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    68a0:	ldrb	r3, [r4, #2]
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    68a2:	tst.w	r3, #32
    68a6:	ite	eq
    68a8:	moveq	r2, #1
    68aa:	movne	r2, #5
    68ac:	b.n	67a8 <FatFile::write(void const*, unsigned int)+0x70>
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    68ae:	movw	r0, #1299	; 0x513
    68b2:	bl	5964 <dbgPrint(unsigned short)>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    68b6:	ldrb	r3, [r4, #1]
    68b8:	orr.w	r3, r3, #1
    68bc:	strb	r3, [r4, #1]
  return -1;
    68be:	mov.w	r0, #4294967295
    68c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    68c6:	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
    68ca:	mov.w	r3, #4294967295
    68ce:	str	r3, [r2, #48]	; 0x30
    68d0:	ldr	r2, [r4, #8]
    68d2:	b.n	685e <FatFile::write(void const*, unsigned int)+0x126>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    68d4:	ldr	r0, [r4, #8]
    68d6:	adds	r0, #40	; 0x28
    68d8:	bl	6a94 <FatCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    68dc:	cmp	r0, #0
    68de:	bne.w	67c8 <FatFile::write(void const*, unsigned int)+0x90>
          DBG_FAIL_MACRO;
    68e2:	movw	r0, #1390	; 0x56e
    68e6:	bl	5964 <dbgPrint(unsigned short)>
          goto fail;
    68ea:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    68ec:	mov	r0, r4
    68ee:	bl	59a0 <FatFile::addCluster()>
    68f2:	cmp	r0, #0
    68f4:	beq.n	6976 <FatFile::write(void const*, unsigned int)+0x23e>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    68f6:	ldr	r1, [r4, #16]
    68f8:	str	r1, [r4, #32]
    68fa:	ldr	r0, [r4, #8]
    68fc:	b.n	687a <FatFile::write(void const*, unsigned int)+0x142>
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    68fe:	movw	r0, #1311	; 0x51f
    6902:	bl	5964 <dbgPrint(unsigned short)>
    goto fail;
    6906:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    6908:	ldr	r1, [r0, #28]
    690a:	bl	5f64 <FatFile::seekSet(unsigned long)>
    690e:	cmp	r0, #0
    6910:	bne.w	6750 <FatFile::write(void const*, unsigned int)+0x18>
      DBG_FAIL_MACRO;
    6914:	movw	r0, #1305	; 0x519
    6918:	bl	5964 <dbgPrint(unsigned short)>
      goto fail;
    691c:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    691e:	ldr	r3, [r4, #28]
    6920:	cmp	r3, r2
    6922:	bcc.n	6942 <FatFile::write(void const*, unsigned int)+0x20a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6924:	ldr	r3, [pc, #88]	; (6980 <FatFile::write(void const*, unsigned int)+0x248>)
    6926:	ldr	r3, [r3, #0]
    6928:	cbz	r3, 695c <FatFile::write(void const*, unsigned int)+0x224>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    692a:	ldrb	r3, [r4, #2]
    692c:	orn	r3, r3, #127	; 0x7f
    6930:	strb	r3, [r4, #2]
    6932:	mov	r0, r9
    6934:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
        DBG_FAIL_MACRO;
    6938:	movw	r0, #1382	; 0x566
    693c:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    6940:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6942:	ldrb	r3, [r4, #2]
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6944:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6946:	orn	r3, r3, #127	; 0x7f
    694a:	strb	r3, [r4, #2]
    694c:	mov	r0, r9
    694e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
    6952:	movw	r0, #1421	; 0x58d
    6956:	bl	5964 <dbgPrint(unsigned short)>
        goto fail;
    695a:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
    695c:	mov	r0, r9
    695e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
    6962:	mov.w	r0, #1328	; 0x530
    6966:	bl	5964 <dbgPrint(unsigned short)>
            goto fail;
    696a:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    696c:	movw	r0, #1342	; 0x53e
    6970:	bl	5964 <dbgPrint(unsigned short)>
            goto fail;
    6974:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
            DBG_FAIL_MACRO;
    6976:	movw	r0, #1350	; 0x546
    697a:	bl	5964 <dbgPrint(unsigned short)>
            goto fail;
    697e:	b.n	68b6 <FatFile::write(void const*, unsigned int)+0x17e>
    6980:	.word	0x1fff1ba4

00006984 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6984:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6986:	movs	r1, #10
    6988:	mov	r5, r0
    698a:	ldr	r0, [pc, #40]	; (69b4 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    698c:	ldr	r4, [pc, #40]	; (69b8 <dbgPrint(unsigned short)+0x34>)
    698e:	bl	9784 <usb_serial_write>
    6992:	movs	r1, #16
    6994:	ldr	r0, [pc, #36]	; (69bc <dbgPrint(unsigned short)+0x38>)
    6996:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    699a:	movs	r0, #46	; 0x2e
    699c:	bl	988c <usb_serial_putchar>
    69a0:	mov	r1, r5
    69a2:	mov	r0, r4
    69a4:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    69a8:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    69aa:	ldmia.w	sp!, {r3, r4, r5, lr}
    69ae:	b.w	aca0 <Print::println()>
    69b2:	nop
    69b4:	.word	0x0000ff90
    69b8:	.word	0x1fff098c
    69bc:	.word	0x0000ffe8

000069c0 <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    69c0:	push	{r3, r4, r5, r6, r7, lr}
    69c2:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    69c4:	ldr	r1, [r0, #8]
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    69c6:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    69ca:	mov	r4, r0
    69cc:	ldr	r0, [r3, #0]
    69ce:	ldr	r3, [r0, #0]
    69d0:	mov	r2, r6
    69d2:	ldr	r3, [r3, #24]
    69d4:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    69d6:	mov	r5, r0
    69d8:	cbz	r0, 6a04 <FatCache::sync() [clone .part.8]+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    69da:	ldrb	r3, [r4, #0]
    69dc:	lsls	r2, r3, #30
    69de:	bmi.n	69ea <FatCache::sync() [clone .part.8]+0x2a>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    69e0:	bic.w	r3, r3, #1
    69e4:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    69e6:	mov	r0, r5
    69e8:	pop	{r3, r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    69ea:	ldr	r3, [r4, #4]
    69ec:	ldr	r1, [r4, #8]
    69ee:	ldr	r0, [r3, #0]
    69f0:	ldr	r7, [r3, #16]
    69f2:	ldr	r3, [r0, #0]
    69f4:	mov	r2, r6
    69f6:	ldr	r3, [r3, #24]
    69f8:	add	r1, r7
    69fa:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    69fc:	mov	r3, r0
    69fe:	cbz	r0, 6a0e <FatCache::sync() [clone .part.8]+0x4e>
    6a00:	ldrb	r3, [r4, #0]
    6a02:	b.n	69e0 <FatCache::sync() [clone .part.8]+0x20>
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
      DBG_FAIL_MACRO;
    6a04:	movs	r0, #57	; 0x39
    6a06:	bl	6984 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    6a0a:	mov	r0, r5
    6a0c:	pop	{r3, r4, r5, r6, r7, pc}
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6a0e:	movs	r0, #64	; 0x40
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    6a10:	mov	r5, r3
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
    6a12:	bl	6984 <dbgPrint(unsigned short)>
    6a16:	b.n	69e6 <FatCache::sync() [clone .part.8]+0x26>

00006a18 <FatCache::read(unsigned long, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    6a18:	ldr	r3, [r0, #8]
    6a1a:	cmp	r3, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    6a1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a20:	mov	r6, r0
    6a22:	mov	r5, r2
  if (m_lbn != sector) {
    6a24:	beq.n	6a48 <FatCache::read(unsigned long, unsigned char)+0x30>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6a26:	ldrb	r3, [r0, #0]
    6a28:	lsls	r2, r3, #31
    6a2a:	mov	r7, r1
    6a2c:	bmi.n	6a58 <FatCache::read(unsigned long, unsigned char)+0x40>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    6a2e:	lsls	r3, r5, #29
    6a30:	bpl.n	6a6e <FatCache::read(unsigned long, unsigned char)+0x56>
    6a32:	add.w	r4, r6, #12
    6a36:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6a38:	and.w	r5, r5, #3
    6a3c:	orrs	r5, r3
    6a3e:	strb	r5, [r6, #0]
    6a40:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    6a42:	str	r7, [r6, #8]
  return &m_buffer;

fail:

  return nullptr;
}
    6a44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a48:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    6a4c:	and.w	r5, r5, #3
    6a50:	orrs	r5, r3
    6a52:	strb	r5, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    6a54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a58:	bl	69c0 <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    6a5c:	mov	r4, r0
    6a5e:	cmp	r0, #0
    6a60:	bne.n	6a2e <FatCache::read(unsigned long, unsigned char)+0x16>
      DBG_FAIL_MACRO;
    6a62:	movs	r0, #34	; 0x22
    6a64:	bl	6984 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6a68:	mov	r0, r4
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    6a6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a6e:	ldr	r3, [r6, #4]
    6a70:	ldr	r0, [r3, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    6a72:	ldr	r3, [r0, #0]
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    6a74:	add.w	r4, r6, #12
    6a78:	ldr	r3, [r3, #8]
    6a7a:	mov	r2, r4
    6a7c:	mov	r1, r7
    6a7e:	blx	r3
    6a80:	mov	r8, r0
    6a82:	cmp	r0, #0
    6a84:	bne.n	6a36 <FatCache::read(unsigned long, unsigned char)+0x1e>
        DBG_FAIL_MACRO;
    6a86:	movs	r0, #39	; 0x27
    6a88:	bl	6984 <dbgPrint(unsigned short)>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    6a8c:	mov	r0, r8
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
    6a8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a92:	nop

00006a94 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    6a94:	ldrb	r3, [r0, #0]
    6a96:	lsls	r3, r3, #31
    6a98:	bmi.n	6a9e <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    6a9a:	movs	r0, #1
    6a9c:	bx	lr
    6a9e:	b.w	69c0 <FatCache::sync() [clone .part.8]>
    6aa2:	nop

00006aa4 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6aa4:	ldrb	r3, [r0, #6]
    6aa6:	ldr	r0, [r0, #20]
    6aa8:	subs	r1, #2
    6aaa:	lsls	r1, r3
}
    6aac:	add	r0, r1
    6aae:	bx	lr

00006ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6ab0:	cmp	r1, #1
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6ab2:	push	{r4, r5, r6, lr}
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6ab4:	bls.n	6b1e <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    6ab6:	ldr	r3, [r0, #28]
    6ab8:	cmp	r1, r3
    6aba:	mov	r4, r1
    6abc:	mov	r5, r0
    6abe:	bhi.n	6b1e <FatPartition::fatGet(unsigned long, unsigned long*)+0x6e>
    6ac0:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6ac2:	cmp	r3, #32
    6ac4:	mov	r6, r2
    6ac6:	beq.n	6af4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x44>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6ac8:	cmp	r3, #16
    6aca:	bne.n	6b10 <FatPartition::fatGet(unsigned long, unsigned long*)+0x60>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6acc:	ldr	r3, [r0, #24]
    6ace:	ubfx	r1, r1, #8, #8
    6ad2:	add	r1, r3
    6ad4:	movs	r2, #2
    6ad6:	add.w	r0, r0, #564	; 0x234
    6ada:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6ade:	cbz	r0, 6b2a <FatPartition::fatGet(unsigned long, unsigned long*)+0x7a>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6ae0:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6ae2:	ldrh.w	r3, [r0, r4, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6ae6:	ldr	r2, [r5, #28]
    6ae8:	cmp	r3, r2
    return 0;
  }
  *value = next;
  return 1;
    6aea:	itte	ls
    6aec:	movls	r0, #1
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
  }
  *value = next;
    6aee:	strls	r3, [r6, #0]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6af0:	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    6af2:	pop	{r4, r5, r6, pc}
    6af4:	ldr	r1, [r0, #24]
    6af6:	movs	r2, #2
    6af8:	add.w	r1, r1, r4, lsr #7
    6afc:	add.w	r0, r0, #564	; 0x234
    6b00:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    6b04:	cbz	r0, 6b36 <FatPartition::fatGet(unsigned long, unsigned long*)+0x86>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6b06:	and.w	r4, r4, #127	; 0x7f
    6b0a:	ldr.w	r3, [r0, r4, lsl #2]
    6b0e:	b.n	6ae6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
      index = 0;
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    6b10:	mov.w	r0, #260	; 0x104
    6b14:	bl	6984 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6b18:	mov.w	r0, #4294967295
    }
    tmp |= pc->data[index] << 8;
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
    6b1c:	pop	{r4, r5, r6, pc}
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6b1e:	movs	r0, #214	; 0xd6
    6b20:	bl	6984 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6b24:	mov.w	r0, #4294967295
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6b28:	pop	{r4, r5, r6, pc}
  } else if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6b2a:	movs	r0, #232	; 0xe8
    6b2c:	bl	6984 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6b30:	mov.w	r0, #4294967295
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6b34:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
    6b36:	movs	r0, #222	; 0xde
    6b38:	bl	6984 <dbgPrint(unsigned short)>
  }
  *value = next;
  return 1;

fail:
  return -1;
    6b3c:	mov.w	r0, #4294967295
  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6b40:	pop	{r4, r5, r6, pc}
    6b42:	nop

00006b44 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6b44:	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6b46:	push	{r4, r5, r6, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6b48:	bls.n	6b6a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6b4a:	ldr	r3, [r0, #28]
    6b4c:	cmp	r1, r3
    6b4e:	mov	r4, r1
    6b50:	bhi.n	6b6a <FatPartition::fatPut(unsigned long, unsigned long)+0x26>
    6b52:	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b54:	cmp	r3, #32
    6b56:	mov	r5, r2
    6b58:	beq.n	6b76 <FatPartition::fatPut(unsigned long, unsigned long)+0x32>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6b5a:	cmp	r3, #16
    6b5c:	beq.n	6b96 <FatPartition::fatPut(unsigned long, unsigned long)+0x52>
      tmp = ((pc->data[index] & 0XF0)) | tmp >> 4;
    }
    pc->data[index] = tmp;
    return true;
  } else {
    DBG_FAIL_MACRO;
    6b5e:	mov.w	r0, #342	; 0x156
    6b62:	bl	6984 <dbgPrint(unsigned short)>
    goto fail;
  }

fail:
  return false;
    6b66:	movs	r0, #0
}
    6b68:	pop	{r4, r5, r6, pc}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    6b6a:	mov.w	r0, #280	; 0x118
    6b6e:	bl	6984 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6b72:	movs	r0, #0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
    6b74:	pop	{r4, r5, r6, pc}
    6b76:	ldr	r1, [r0, #24]
    6b78:	movs	r2, #3
    6b7a:	add.w	r0, r0, #564	; 0x234
    6b7e:	add.w	r1, r1, r4, lsr #7
    6b82:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6b86:	mov	r6, r0
    6b88:	cbz	r0, 6bc2 <FatPartition::fatPut(unsigned long, unsigned long)+0x7e>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b8a:	and.w	r4, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6b8e:	movs	r0, #1
    6b90:	str.w	r5, [r6, r4, lsl #2]
    6b94:	pop	{r4, r5, r6, pc}
    6b96:	ldr	r3, [r0, #24]
    6b98:	ubfx	r1, r1, #8, #8
    6b9c:	add.w	r0, r0, #564	; 0x234
    6ba0:	add	r1, r3
    6ba2:	movs	r2, #3
    6ba4:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    6ba8:	mov	r6, r0
    6baa:	cbz	r0, 6bb6 <FatPartition::fatPut(unsigned long, unsigned long)+0x72>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6bac:	uxtb	r4, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6bae:	movs	r0, #1
    6bb0:	strh.w	r5, [r6, r4, lsl #1]
    6bb4:	pop	{r4, r5, r6, pc}
  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6bb6:	movw	r0, #301	; 0x12d
    6bba:	bl	6984 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6bbe:	mov	r0, r6
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    6bc0:	pop	{r4, r5, r6, pc}

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
    6bc2:	mov.w	r0, #288	; 0x120
    6bc6:	bl	6984 <dbgPrint(unsigned short)>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    6bca:	mov	r0, r6
    6bcc:	pop	{r4, r5, r6, pc}
    6bce:	nop

00006bd0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6bd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6bd4:	ldr	r4, [r0, #12]
    6bd6:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6bd8:	sub	sp, #8
    6bda:	mov	r5, r0
    6bdc:	mov	r7, r1
    6bde:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6be0:	itte	cc
    6be2:	movcc	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6be4:	movcc	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6be6:	movcs	r6, #1
    6be8:	ldr	r3, [r5, #28]
  }
  while (1) {
    find++;
    6bea:	adds	r4, #1
    if (find > m_lastCluster) {
    6bec:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6bee:	add	r2, sp, #4
    6bf0:	mov	r0, r5
    6bf2:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6bf4:	bls.n	6c0a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x3a>
      if (setStart) {
    6bf6:	cbnz	r6, 6c5e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8e>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6bf8:	ldr	r4, [r5, #12]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6bfa:	adds	r4, #1
    if (find > m_lastCluster) {
    6bfc:	cmp	r4, r3
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
      setStart = true;
    6bfe:	mov.w	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c02:	add	r2, sp, #4
    6c04:	mov	r0, r5
    6c06:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6c08:	bhi.n	6bf6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6c0a:	cmp	r7, r4
    6c0c:	beq.n	6c4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c0e:	bl	6ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6c12:	cmp	r0, #0
    6c14:	blt.n	6c66 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6c16:	beq.n	6be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6c18:	ldr	r3, [sp, #4]
    6c1a:	cmp	r3, #0
    6c1c:	bne.n	6be8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
      break;
    }
  }
  if (setStart) {
    6c1e:	cbz	r6, 6c22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x52>
    m_allocSearchStart = find;
    6c20:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6c22:	mvn.w	r2, #4026531840	; 0xf0000000
    6c26:	mov	r1, r4
    6c28:	mov	r0, r5
    6c2a:	bl	6b44 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6c2e:	mov	r6, r0
    6c30:	cbz	r0, 6c88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0xb8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6c32:	cbnz	r7, 6c6e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x9e>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6c34:	ldr	r3, [r5, #36]	; 0x24
    6c36:	cmp	r3, #0
      m_freeClusterCount += change;
    6c38:	it	ge
    6c3a:	addge.w	r3, r3, #4294967295
  *next = find;
  return true;

fail:
  return false;
}
    6c3e:	mov	r0, r6
    6c40:	it	ge
    6c42:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6c44:	str.w	r4, [r8]
  return true;

fail:
  return false;
}
    6c48:	add	sp, #8
    6c4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      setStart = true;
      continue;
    }
    if (find == current) {
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
    6c4e:	movs	r0, #101	; 0x65
    6c50:	bl	6984 <dbgPrint(unsigned short)>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6c54:	movs	r6, #0
}
    6c56:	mov	r0, r6
    6c58:	add	sp, #8
    6c5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (1) {
    find++;
    if (find > m_lastCluster) {
      if (setStart) {
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
    6c5e:	movs	r0, #92	; 0x5c
    6c60:	bl	6984 <dbgPrint(unsigned short)>
        goto fail;
    6c64:	b.n	6c54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    if (fg < 0) {
      DBG_FAIL_MACRO;
    6c66:	movs	r0, #107	; 0x6b
    6c68:	bl	6984 <dbgPrint(unsigned short)>
      goto fail;
    6c6c:	b.n	6c54 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6c6e:	mov	r1, r7
    6c70:	mov	r2, r4
    6c72:	mov	r0, r5
    6c74:	bl	6b44 <FatPartition::fatPut(unsigned long, unsigned long)>
    6c78:	mov	r3, r0
    6c7a:	cmp	r0, #0
    6c7c:	bne.n	6c34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x64>
      DBG_FAIL_MACRO;
    6c7e:	movs	r0, #125	; 0x7d
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    6c80:	mov	r6, r3
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
      DBG_FAIL_MACRO;
    6c82:	bl	6984 <dbgPrint(unsigned short)>
      goto fail;
    6c86:	b.n	6c56 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>
  if (setStart) {
    m_allocSearchStart = find;
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    6c88:	movs	r0, #119	; 0x77
    6c8a:	bl	6984 <dbgPrint(unsigned short)>
    goto fail;
    6c8e:	b.n	6c56 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x86>

00006c90 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6c90:	push	{r4, r5, r6, r7, lr}
    6c92:	mov	r5, r0
    6c94:	sub	sp, #12
    6c96:	mov	r4, r1
    6c98:	b.n	6cbc <FatPartition::freeChain(unsigned long)+0x2c>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6c9a:	bl	6b44 <FatPartition::fatPut(unsigned long, unsigned long)>
    6c9e:	mov	r6, r0
    6ca0:	cbz	r0, 6ce2 <FatPartition::freeChain(unsigned long)+0x52>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
    6ca2:	ldr	r3, [r5, #36]	; 0x24
    6ca4:	cmp	r3, #0
      m_freeClusterCount += change;
    6ca6:	itt	ge
    6ca8:	addge	r3, #1
    6caa:	strge	r3, [r5, #36]	; 0x24
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6cac:	ldr	r3, [r5, #12]
    6cae:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    6cb0:	itt	cc
    6cb2:	addcc.w	r4, r4, #4294967295
    6cb6:	strcc	r4, [r5, #12]
    }
    cluster = next;
    6cb8:	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6cba:	cbz	r7, 6cdc <FatPartition::freeChain(unsigned long)+0x4c>
    fg = fatGet(cluster, &next);
    6cbc:	add	r2, sp, #4
    6cbe:	mov	r1, r4
    6cc0:	mov	r0, r5
    6cc2:	bl	6ab0 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6cc6:	subs	r7, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6cc8:	mov	r1, r4
    6cca:	mov.w	r2, #0
    6cce:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6cd0:	bge.n	6c9a <FatPartition::freeChain(unsigned long)+0xa>
      DBG_FAIL_MACRO;
    6cd2:	movw	r0, #357	; 0x165
    6cd6:	bl	6984 <dbgPrint(unsigned short)>
  } while (fg);

  return true;

fail:
  return false;
    6cda:	movs	r6, #0
}
    6cdc:	mov	r0, r6
    6cde:	add	sp, #12
    6ce0:	pop	{r4, r5, r6, r7, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
    6ce2:	mov.w	r0, #362	; 0x16a
    6ce6:	bl	6984 <dbgPrint(unsigned short)>

  return true;

fail:
  return false;
}
    6cea:	mov	r0, r6
    6cec:	add	sp, #12
    6cee:	pop	{r4, r5, r6, r7, pc}

00006cf0 <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    6cf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    6cf4:	ldr	r4, [r0, #36]	; 0x24
    6cf6:	cmp	r4, #0
    6cf8:	blt.n	6d00 <FatPartition::freeClusterCount()+0x10>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6cfa:	mov	r0, r4
    6cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d00:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6d02:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6d04:	cmp	r3, #16
    6d06:	mov	r6, r0
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    6d08:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    6d0c:	beq.n	6d24 <FatPartition::freeClusterCount()+0x34>
    6d0e:	cmp	r3, #32
    6d10:	beq.n	6d24 <FatPartition::freeClusterCount()+0x34>
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6d12:	movw	r0, #431	; 0x1af
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6d16:	mov.w	r4, #4294967295
      }
      todo -= n;
    }
  } else {
    // invalid FAT type
    DBG_FAIL_MACRO;
    6d1a:	bl	6984 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6d1e:	mov	r0, r4
    6d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    6d24:	ldr	r5, [r6, #24]
    while (todo) {
    6d26:	cmp.w	r8, #0
    6d2a:	beq.n	6dba <FatPartition::freeClusterCount()+0xca>
    6d2c:	add.w	r7, r6, #564	; 0x234
    6d30:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    6d32:	mov	r1, r5
    6d34:	movs	r2, #2
    6d36:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    6d38:	adds	r5, #1
    6d3a:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    6d3e:	cbz	r0, 6da8 <FatPartition::freeClusterCount()+0xb8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6d40:	ldrb	r3, [r6, #7]
    6d42:	cmp	r3, #16
    6d44:	beq.n	6d76 <FatPartition::freeClusterCount()+0x86>
      if (todo < n) {
    6d46:	cmp.w	r8, #127	; 0x7f
    6d4a:	bhi.n	6da0 <FatPartition::freeClusterCount()+0xb0>
        n = todo;
    6d4c:	uxth.w	r1, r8
    6d50:	mov	lr, r8
    6d52:	subs	r1, #1
    6d54:	uxth	r1, r1
    6d56:	add.w	r1, r0, r1, lsl #2
    6d5a:	subs	r3, r0, #4
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    6d5c:	ldr.w	r2, [r3, #4]!
    6d60:	cbnz	r2, 6d64 <FatPartition::freeClusterCount()+0x74>
            free++;
    6d62:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    6d64:	cmp	r3, r1
    6d66:	bne.n	6d5c <FatPartition::freeClusterCount()+0x6c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6d68:	subs.w	r8, r8, lr
    6d6c:	bne.n	6d32 <FatPartition::freeClusterCount()+0x42>
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6d6e:	str	r4, [r6, #36]	; 0x24
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6d70:	mov	r0, r4
    6d72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6d76:	cmp.w	r8, #255	; 0xff
    6d7a:	bls.n	6dbe <FatPartition::freeClusterCount()+0xce>
    6d7c:	mov.w	lr, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6d80:	mov	r3, lr
    6d82:	subs	r1, r3, #1
    6d84:	uxth	r1, r1
    6d86:	add.w	r1, r0, r1, lsl #1
    6d8a:	subs	r3, r0, #2
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    6d8c:	ldrh.w	r2, [r3, #2]!
    6d90:	cbnz	r2, 6d94 <FatPartition::freeClusterCount()+0xa4>
            free++;
    6d92:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    6d94:	cmp	r1, r3
    6d96:	bne.n	6d8c <FatPartition::freeClusterCount()+0x9c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6d98:	subs.w	r8, r8, lr
    6d9c:	bne.n	6d32 <FatPartition::freeClusterCount()+0x42>
    6d9e:	b.n	6d6e <FatPartition::freeClusterCount()+0x7e>
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    6da0:	mov.w	lr, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    6da4:	mov	r1, lr
    6da6:	b.n	6d52 <FatPartition::freeClusterCount()+0x62>
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6da8:	movw	r0, #407	; 0x197
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    6dac:	mov.w	r4, #4294967295
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
    6db0:	bl	6984 <dbgPrint(unsigned short)>
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
}
    6db4:	mov	r0, r4
    6db6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    6dba:	mov	r4, r8
    6dbc:	b.n	6d6e <FatPartition::freeClusterCount()+0x7e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    6dbe:	uxth.w	r3, r8
    6dc2:	mov	lr, r8
    6dc4:	b.n	6d82 <FatPartition::freeClusterCount()+0x92>
    6dc6:	nop

00006dc8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6dc8:	push	{r3, r4, r5, r6, r7, lr}
    6dca:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6dcc:	movs	r5, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    6dce:	mov.w	r3, #4294967295
  m_allocSearchStart = 1;
    6dd2:	movs	r0, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6dd4:	str	r1, [r4, #0]
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    6dd6:	str	r4, [r4, #44]	; 0x2c
    6dd8:	str.w	r4, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6ddc:	str	r0, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6dde:	strb	r5, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6de0:	strb.w	r5, [r4, #40]	; 0x28
    6de4:	strb.w	r5, [r4, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
    6de8:	str	r3, [r4, #48]	; 0x30
    6dea:	str.w	r3, [r4, #572]	; 0x23c
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6dee:	mov	r6, r2
    6df0:	cbz	r2, 6e36 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x6e>
    if (part > 4) {
    6df2:	cmp	r2, #4
    6df4:	bhi.n	6e2a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    6df6:	add.w	r7, r4, #40	; 0x28
    6dfa:	mov	r2, r5
    6dfc:	mov	r0, r7
    6dfe:	mov	r1, r5
    6e00:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    6e04:	add.w	r6, r6, #268435456	; 0x10000000
    6e08:	subs	r6, #1
    6e0a:	lsls	r6, r6, #4
    6e0c:	add.w	r3, r0, #446	; 0x1be
    6e10:	adds	r2, r3, r6

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6e12:	cbz	r0, 6e1e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6e14:	ldrb	r1, [r2, #4]
    6e16:	cbz	r1, 6e1e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    6e18:	ldrb	r3, [r3, r6]
    6e1a:	lsls	r3, r3, #25
    6e1c:	beq.n	6e58 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x90>
      DBG_FAIL_MACRO;
    6e1e:	mov.w	r0, #468	; 0x1d4
    6e22:	bl	6984 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6e26:	movs	r0, #0
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
      DBG_FAIL_MACRO;
      goto fail;
    6e28:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
    6e2a:	mov.w	r0, #460	; 0x1cc
    6e2e:	bl	6984 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6e32:	mov	r0, r5
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      DBG_FAIL_MACRO;
      goto fail;
    6e34:	pop	{r3, r4, r5, r6, r7, pc}
    6e36:	add.w	r7, r4, #40	; 0x28
    6e3a:	mov	r0, r7
    6e3c:	movs	r2, #0
    6e3e:	mov	r1, r6
    6e40:	bl	6a18 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6e44:	cbz	r0, 6e4c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    6e46:	ldrb	r3, [r0, #16]
    6e48:	cmp	r3, #2
    6e4a:	beq.n	6e5c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x94>
    DBG_FAIL_MACRO;
    6e4c:	mov.w	r0, #478	; 0x1de
    6e50:	bl	6984 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6e54:	movs	r0, #0
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
    6e56:	pop	{r3, r4, r5, r6, r7, pc}
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6e58:	ldr	r6, [r2, #8]
    6e5a:	b.n	6e3a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x72>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6e5c:	ldrh.w	r3, [r0, #11]
    6e60:	cmp.w	r3, #512	; 0x200
    6e64:	bne.n	6e4c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e66:	ldrb	r5, [r0, #13]
    6e68:	strb	r5, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e6a:	subs	r3, r5, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6e6c:	movs	r2, #0
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e6e:	cmp	r5, #1
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e70:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6e72:	strb	r2, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e74:	beq.n	6e9e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd6>
    6e76:	movs	r2, #1
    6e78:	mov	r1, r2
    6e7a:	b.n	6e7e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb6>
    6e7c:	mov	r2, r3
    6e7e:	lsls	r1, r1, #1
    6e80:	uxtb	r1, r1
    6e82:	adds	r3, r2, #1
    6e84:	cmp	r5, r1
    6e86:	uxtb	r3, r3
    6e88:	beq.n	6e9c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xd4>
    if (tmp == 0) {
    6e8a:	cmp	r3, #9
    6e8c:	bne.n	6e7c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6e8e:	strb	r2, [r4, #6]
      DBG_FAIL_MACRO;
    6e90:	movw	r0, #487	; 0x1e7
    6e94:	bl	6984 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6e98:	movs	r0, #0
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    6e9a:	pop	{r3, r4, r5, r6, r7, pc}
    6e9c:	strb	r2, [r4, #6]
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6e9e:	ldrh	r1, [r0, #22]
    6ea0:	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6ea2:	cbnz	r1, 6ea8 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe0>
    6ea4:	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6ea6:	str	r1, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6ea8:	ldrh	r7, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6eaa:	ldrh.w	r3, [r0, #17]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6eae:	strh	r3, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6eb0:	add	r7, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6eb2:	lsls	r3, r3, #5

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6eb4:	add.w	r5, r7, r1, lsl #1
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6eb8:	addw	r3, r3, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6ebc:	ldrh.w	r1, [r0, #19]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6ec0:	str	r7, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6ec2:	add.w	r3, r5, r3, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6ec6:	str	r5, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6ec8:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6eca:	cbnz	r1, 6ece <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6ecc:	ldr	r1, [r0, #32]
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6ece:	subs	r6, r6, r3
    6ed0:	add	r6, r1

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6ed2:	lsr.w	r2, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6ed6:	movw	r3, #4084	; 0xff4
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6eda:	adds	r5, r2, #1
  }
#endif  // USE_MULTI_SECTOR_IO
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
    6edc:	mov.w	r1, #4294967295

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6ee0:	cmp	r2, r3
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6ee2:	str	r5, [r4, #28]
    6ee4:	str	r1, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6ee6:	bls.n	6efe <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x136>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6ee8:	movw	r3, #65524	; 0xfff4
    6eec:	cmp	r2, r3
    6eee:	ittet	hi
    6ef0:	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6ef2:	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6ef4:	movls	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6ef6:	movhi	r3, #32
    6ef8:	strb	r3, [r4, #7]
  }
  return true;
    6efa:	movs	r0, #1
    6efc:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6efe:	movs	r3, #12
    6f00:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
    6f02:	movw	r0, #525	; 0x20d
    6f06:	bl	6984 <dbgPrint(unsigned short)>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    6f0a:	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6f0c:	pop	{r3, r4, r5, r6, r7, pc}
    6f0e:	nop

00006f10 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    6f10:	cmp	r1, #4
    6f12:	bls.n	6f2e <lfnGetChar(DirLfn_t*, unsigned char)+0x1e>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6f14:	cmp	r1, #10
    6f16:	bls.n	6f26 <lfnGetChar(DirLfn_t*, unsigned char)+0x16>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6f18:	cmp	r1, #12
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6f1a:	itte	ls
    6f1c:	addls.w	r1, r0, r1, lsl #1
    6f20:	ldrhls	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    6f22:	movhi	r0, #0
}
    6f24:	bx	lr
    6f26:	add.w	r1, r0, r1, lsl #1
    6f2a:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    6f2c:	bx	lr
    6f2e:	add.w	r1, r0, r1, lsl #1
    6f32:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6f36:	bx	lr

00006f38 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    6f38:	push	{r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6f3a:	movs	r1, #10
    6f3c:	mov	r5, r0
    6f3e:	ldr	r0, [pc, #40]	; (6f68 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    6f40:	ldr	r4, [pc, #40]	; (6f6c <dbgPrint(unsigned short)+0x34>)
    6f42:	bl	9784 <usb_serial_write>
    6f46:	movs	r1, #14
    6f48:	ldr	r0, [pc, #36]	; (6f70 <dbgPrint(unsigned short)+0x38>)
    6f4a:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    6f4e:	movs	r0, #46	; 0x2e
    6f50:	bl	988c <usb_serial_putchar>
    6f54:	mov	r1, r5
    6f56:	mov	r0, r4
    6f58:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    6f5c:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    6f5e:	ldmia.w	sp!, {r3, r4, r5, lr}
    6f62:	b.w	aca0 <Print::println()>
    6f66:	nop
    6f68:	.word	0x0000ff90
    6f6c:	.word	0x1fff098c
    6f70:	.word	0x0000fffc

00006f74 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    6f74:	push	{r4}
    6f76:	subs	r2, r0, #1
    6f78:	add.w	r4, r0, #10
  uint8_t sum = 0;
    6f7c:	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6f7e:	ldrb.w	r1, [r2, #1]!
    6f82:	lsrs	r3, r0, #1
    6f84:	orr.w	r0, r3, r0, lsl #7
    6f88:	uxtab	r0, r1, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6f8c:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6f8e:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6f90:	bne.n	6f7e <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    6f92:	ldr.w	r4, [sp], #4
    6f96:	bx	lr

00006f98 <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    6f98:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6f9a:	ldr	r3, [r1, #12]
    6f9c:	cbz	r3, 6fbc <FatFile::openCluster(FatFile*)+0x24>
    6f9e:	mov	r5, r0
    6fa0:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    6fa2:	movs	r2, #36	; 0x24
    6fa4:	movs	r1, #0
    6fa6:	bl	c37c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6faa:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6fac:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    6fae:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    6fb0:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    6fb2:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6fb4:	ldr	r3, [r4, #12]
    6fb6:	str	r3, [r5, #32]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    6fb8:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6fba:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6fbc:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    6fbe:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    6fc2:	b.w	5ba8 <FatFile::openRoot(FatVolume*)>
    6fc6:	nop

00006fc8 <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6fc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fcc:	sub	sp, #52	; 0x34
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6fce:	ldrb	r3, [r0, #0]
    6fd0:	movs	r4, #0
    6fd2:	strb.w	r4, [sp, #12]
    6fd6:	strb.w	r4, [sp, #13]
    6fda:	strb.w	r4, [sp, #14]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    6fde:	mov	r9, r1
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    6fe0:	cbz	r3, 6fe8 <FatFile::getName(char*, unsigned int)+0x20>
    6fe2:	cmp	r2, #12
    6fe4:	mov	r5, r2
    6fe6:	bhi.n	6ffc <FatFile::getName(char*, unsigned int)+0x34>
    DBG_FAIL_MACRO;
    6fe8:	movs	r0, #129	; 0x81
    6fea:	bl	6f38 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    6fee:	movs	r7, #0
    6ff0:	strb.w	r7, [r9]
  return false;
}
    6ff4:	mov	r0, r7
    6ff6:	add	sp, #52	; 0x34
    6ff8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    6ffc:	ldrb	r3, [r0, #3]
    6ffe:	mov	r8, r0
    7000:	cmp	r3, #0
    7002:	beq.n	70c2 <FatFile::getName(char*, unsigned int)+0xfa>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    7004:	add	r0, sp, #12
    7006:	mov	r1, r8
    7008:	bl	6f98 <FatFile::openCluster(FatFile*)>
    700c:	cmp	r0, #0
    700e:	beq.n	70d4 <FatFile::getName(char*, unsigned int)+0x10c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7010:	ldrb.w	r3, [r8, #3]
    7014:	cmp	r3, #0
    7016:	beq.n	70ba <FatFile::getName(char*, unsigned int)+0xf2>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    7018:	str	r4, [sp, #4]
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    701a:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    701c:	ldrh.w	r1, [r8, #4]
    7020:	subs	r1, r1, r6
    7022:	lsls	r1, r1, #5
    7024:	add	r0, sp, #12
    7026:	bl	5f64 <FatFile::seekSet(unsigned long)>
    702a:	mov	r7, r0
    702c:	cmp	r0, #0
    702e:	beq.n	70dc <FatFile::getName(char*, unsigned int)+0x114>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    7030:	movs	r1, #0
    7032:	add	r0, sp, #12
    7034:	bl	5f14 <FatFile::readDirCache(bool)>
    if (!ldir) {
    7038:	mov	sl, r0
    703a:	cmp	r0, #0
    703c:	beq.n	70e4 <FatFile::getName(char*, unsigned int)+0x11c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    703e:	ldrb	r3, [r0, #11]
    7040:	cmp	r3, #15
    7042:	bne.n	70ec <FatFile::getName(char*, unsigned int)+0x124>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    7044:	ldrb	r3, [r0, #0]
    7046:	and.w	r3, r3, #31
    704a:	cmp	r6, r3
    704c:	bne.n	70f4 <FatFile::getName(char*, unsigned int)+0x12c>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    704e:	subs	r3, r6, #1
    7050:	add.w	r2, r3, r3, lsl #1
    7054:	add.w	r2, r3, r2, lsl #2
    7058:	mov	r3, r2
    705a:	add.w	r4, r9, r2
    705e:	add.w	fp, r2, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    7062:	subs	r1, r3, r2
    7064:	uxtb	r1, r1
    7066:	mov	r0, sl
    7068:	bl	6f10 <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
    706c:	cbz	r0, 70d0 <FatFile::getName(char*, unsigned int)+0x108>
    706e:	cmp	r5, r3
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7070:	add.w	r3, r3, #1
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    7074:	bls.n	709a <FatFile::getName(char*, unsigned int)+0xd2>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7076:	cmp	r0, #126	; 0x7e
    7078:	ite	ls
    707a:	uxtbls	r0, r0
    707c:	movhi	r0, #63	; 0x3f
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    707e:	cmp	r3, fp
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    7080:	strb.w	r0, [r4], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    7084:	bne.n	7062 <FatFile::getName(char*, unsigned int)+0x9a>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    7086:	cmp	r5, fp
    7088:	bls.n	709a <FatFile::getName(char*, unsigned int)+0xd2>
    708a:	ldrb.w	r3, [sl]
    708e:	lsls	r2, r3, #25
    name[k] = 0;
    7090:	itt	mi
    7092:	ldrbmi.w	r3, [sp, #4]
    7096:	strbmi.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    709a:	add.w	r3, r9, r5
    709e:	ldrb.w	r2, [sp, #4]
    70a2:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    70a6:	ldrb.w	r3, [sl]
    70aa:	lsls	r3, r3, #25
    70ac:	bmi.n	6ff4 <FatFile::getName(char*, unsigned int)+0x2c>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    70ae:	adds	r6, #1
    70b0:	ldrb.w	r3, [r8, #3]
    70b4:	uxtb	r6, r6
    70b6:	cmp	r3, r6
    70b8:	bcs.n	701c <FatFile::getName(char*, unsigned int)+0x54>
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    70ba:	movs	r0, #166	; 0xa6
    70bc:	bl	6f38 <dbgPrint(unsigned short)>
    70c0:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    70c2:	bl	7aa0 <FatFile::getSFN(char*)>
    70c6:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    70c8:	mov	r0, r7
    70ca:	add	sp, #52	; 0x34
    70cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    70d0:	mov	fp, r3
    70d2:	b.n	7086 <FatFile::getName(char*, unsigned int)+0xbe>
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    70d4:	movs	r0, #136	; 0x88
    70d6:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    70da:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    70dc:	movs	r0, #141	; 0x8d
    70de:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    70e2:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    70e4:	movs	r0, #146	; 0x92
    70e6:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    70ea:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
      DBG_FAIL_MACRO;
    70ec:	movs	r0, #150	; 0x96
    70ee:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    70f2:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>
    }
    if (order != (ldir->order & 0X1F)) {
      DBG_FAIL_MACRO;
    70f4:	movs	r0, #154	; 0x9a
    70f6:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    70fa:	b.n	6fee <FatFile::getName(char*, unsigned int)+0x26>

000070fc <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    70fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    7100:	ldrb	r3, [r0, #0]
    7102:	cmp	r3, #32
    7104:	bne.n	710e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    7106:	ldrb.w	r3, [r0, #1]!
    710a:	cmp	r3, #32
    710c:	beq.n	7106 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    710e:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    7110:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    7112:	cmp	r3, #0
    7114:	beq.w	7346 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x24a>
    7118:	cmp	r3, #47	; 0x2f
    711a:	beq.n	7188 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8c>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    711c:	cmp	r3, #92	; 0x5c
    711e:	beq.n	7166 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    7120:	sub.w	r4, r3, #34	; 0x22
    7124:	uxtb	r4, r4
    7126:	cmp	r4, #29
    7128:	bls.n	7172 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x76>
    712a:	ldr.w	lr, [pc, #568]	; 7364 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>
    712e:	adds	r6, r0, #1
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7130:	movs	r4, #0
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    7132:	cmp	r3, #124	; 0x7c
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    7134:	sub.w	r5, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7138:	mov	r7, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    713a:	beq.n	7166 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    713c:	cmp	r5, #94	; 0x5e
    713e:	bhi.n	7166 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    7140:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7144:	sub.w	r5, r3, #34	; 0x22
    7148:	uxtb	r5, r5
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    714a:	adds	r4, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    714c:	cmp	r3, #0
    714e:	beq.w	7302 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x206>
    7152:	cmp	r3, #47	; 0x2f
    7154:	beq.n	718a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x8e>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7156:	cmp	r3, #92	; 0x5c
    7158:	lsr.w	r7, lr, r5
    715c:	beq.n	7166 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x6a>
    715e:	cmp	r5, #29
    7160:	bhi.n	7132 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    7162:	lsls	r7, r7, #31
    7164:	bpl.n	7132 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x36>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    7166:	movs	r0, #211	; 0xd3
    7168:	bl	6f38 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    716c:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    716e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    7172:	ldr	r5, [pc, #496]	; (7364 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x268>)
    7174:	lsr.w	r4, r5, r4
    7178:	lsls	r4, r4, #31
    717a:	bpl.n	712a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x2e>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
    717c:	movs	r0, #211	; 0xd3
    717e:	bl	6f38 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7182:	movs	r0, #0
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      DBG_FAIL_MACRO;
      goto fail;
    7184:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    7188:	movs	r4, #0
    718a:	adds	r7, r0, r4
    718c:	mov	r6, r7
    718e:	mov	r5, r4
    7190:	movs	r3, #47	; 0x2f
    7192:	b.n	719a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9e>
    7194:	ldrb.w	r3, [r6, #1]!
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    7198:	adds	r5, #1
    719a:	cmp	r3, #32
    719c:	beq.n	7194 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
    719e:	cmp	r3, #47	; 0x2f
    71a0:	beq.n	7194 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x98>
  *ptr = &path[end];
    71a2:	add	r5, r0
    71a4:	str	r5, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    71a6:	cbz	r4, 71bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    71a8:	mov	r2, r7
    c = path[len - 1];
    71aa:	ldrb.w	r3, [r2, #-1]!
    if (c != '.' && c != ' ') {
    71ae:	cmp	r3, #46	; 0x2e
    71b0:	beq.n	71b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xbc>
    71b2:	cmp	r3, #32
    71b4:	bne.w	7308 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x20c>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    71b8:	subs	r4, #1
    71ba:	bne.n	71aa <FatFile::parsePathName(char const*, fname_t*, char const**)+0xae>
    71bc:	mov.w	r5, #4294967295
    71c0:	mov	r3, r4
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    71c2:	str	r3, [r1, #4]
    71c4:	add.w	r6, r1, #23
    71c8:	add.w	r3, r1, #12
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    71cc:	movs	r2, #32
    71ce:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    71d2:	cmp	r3, r6
    71d4:	bne.n	71ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd2>
    71d6:	subs	r6, r0, #1
    71d8:	movs	r2, #0
    71da:	b.n	71de <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    71dc:	adds	r2, #1
    71de:	ldrb.w	r3, [r6, #1]!
    71e2:	cmp	r3, #46	; 0x2e
    71e4:	beq.n	71dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    71e6:	cmp	r3, #32
    71e8:	beq.n	71dc <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
    71ea:	clz	ip, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    71ee:	adds	r6, r5, #1
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
    71f0:	mov.w	ip, ip, lsr #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    71f4:	beq.n	7210 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    71f6:	ldrb	r7, [r0, r5]
    71f8:	cmp	r7, #46	; 0x2e
    71fa:	add.w	r6, r0, r5
    71fe:	bne.n	720a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10e>
    7200:	b.n	7210 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    7202:	ldrb.w	r7, [r6, #-1]!
    7206:	cmp	r7, #46	; 0x2e
    7208:	beq.n	7210 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x114>
    720a:	adds.w	r5, r5, #4294967295
    720e:	bcs.n	7202 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
  for (; si < len; si++) {
    7210:	cmp	r2, r4
    7212:	mov.w	r9, #0
    7216:	bge.w	7350 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x254>
    721a:	mov	r6, r9
    721c:	mov	sl, r9
    721e:	movs	r7, #7
    7220:	mov.w	r8, #8
    7224:	b.n	7272 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x176>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    7226:	cmp	r3, #46	; 0x2e
    7228:	beq.n	72b8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1bc>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    722a:	cmp	r3, #34	; 0x22
    722c:	beq.n	7246 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    722e:	cmp	r3, #124	; 0x7c
    7230:	beq.n	7246 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    7232:	sub.w	lr, r3, #42	; 0x2a
    7236:	cmp.w	lr, #5
    723a:	bls.n	72cc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d0>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    723c:	sub.w	lr, r3, #58	; 0x3a
    7240:	cmp.w	lr, #5
    7244:	bhi.n	72f6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fa>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    7246:	cmp	r5, r2
    7248:	beq.n	72bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    724a:	cmp	r7, r6
    724c:	bcc.n	72a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    724e:	mov.w	ip, #0
      c = '_';
    7252:	movs	r3, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7254:	add.w	lr, r6, #1
    7258:	add.w	fp, r1, r6
    725c:	uxtb.w	r6, lr
      if (i < 7) {
    7260:	cmp	r6, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    7262:	strb.w	r3, [fp, #13]
      if (i < 7) {
    7266:	bhi.n	726a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
        fname->seqPos = i;
    7268:	strb	r6, [r1, #12]
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    726a:	adds	r2, #1
    726c:	cmp	r2, r4
    726e:	bge.n	7280 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
    7270:	ldrb	r3, [r0, r2]
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    7272:	cmp	r3, #32
    7274:	bne.n	7226 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7276:	adds	r2, #1
    7278:	cmp	r2, r4
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
    727a:	mov.w	ip, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    727e:	blt.n	7270 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x174>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7280:	ldrb	r3, [r1, #13]
    7282:	cmp	r3, #32
    7284:	beq.n	7332 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    7286:	cmp.w	ip, #0
    728a:	beq.n	7318 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    728c:	tst.w	sl, r9
    7290:	it	ne
    7292:	movne.w	r9, #2
    7296:	strb.w	r9, [r1]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    729a:	movs	r0, #1
    729c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    72a0:	cmp	r7, #10
    72a2:	beq.n	732c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    72a4:	cmp	r5, r2
    72a6:	blt.n	732c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    72a8:	mov	r2, r5
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    72aa:	movs	r7, #10
      i = 8;    // Place for extension.
    72ac:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    72ae:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    72b2:	mov.w	ip, #0
    72b6:	b.n	726a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
    72b8:	cmp	r5, r2
    72ba:	bne.n	7276 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x17a>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    72bc:	cmp	r7, #10
    72be:	beq.n	732c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x230>
    72c0:	mov	r2, r5
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    72c2:	movs	r7, #10
      i = 8;    // Place for extension.
    72c4:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    72c6:	mov.w	r8, #16
    72ca:	b.n	726a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x16e>
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    72cc:	cmp	r3, #45	; 0x2d
    72ce:	bne.n	7246 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    72d0:	sub.w	lr, r3, #33	; 0x21
    72d4:	cmp.w	lr, #93	; 0x5d
    72d8:	bhi.n	7246 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    72da:	cmp	r5, r2
    72dc:	beq.n	72bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c0>
    72de:	cmp	r7, r6
    72e0:	bcc.n	72a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1a4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    72e2:	sub.w	lr, r3, #97	; 0x61
    72e6:	cmp.w	lr, #25
    72ea:	bhi.n	7354 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x258>
        c += 'A' - 'a';
    72ec:	subs	r3, #32
    72ee:	uxtb	r3, r3
        lc |= bit;
    72f0:	orr.w	r9, r8, r9
    72f4:	b.n	7254 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    72f6:	sub.w	lr, r3, #91	; 0x5b
    72fa:	cmp.w	lr, #2
    72fe:	bls.n	7246 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14a>
    7300:	b.n	72d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1d4>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7302:	str	r7, [r2, #0]
    7304:	adds	r7, r0, r4
    7306:	b.n	71a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xac>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    7308:	cmp	r4, #255	; 0xff
    730a:	ble.n	7340 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
    DBG_FAIL_MACRO;
    730c:	movs	r0, #229	; 0xe5
    730e:	bl	6f38 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    7312:	movs	r0, #0
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
    7314:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    7318:	ldrb	r3, [r1, #12]
    731a:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    731c:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    731e:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    7320:	movs	r2, #49	; 0x31
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7322:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    7324:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    7326:	strb	r2, [r3, #14]
    7328:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    732c:	ldrb	r3, [r1, #13]
    732e:	cmp	r3, #32
    7330:	bne.n	7318 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21c>
    DBG_FAIL_MACRO;
    7332:	movw	r0, #285	; 0x11d
    7336:	bl	6f38 <dbgPrint(unsigned short)>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    733a:	movs	r0, #0
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    DBG_FAIL_MACRO;
    goto fail;
    733c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7340:	subs	r5, r4, #1
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    c = path[len - 1];
    7342:	mov	r3, r4
    7344:	b.n	71c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    7346:	str	r0, [r2, #0]
    7348:	mov	r4, r3
    734a:	mov.w	r5, #4294967295
    734e:	b.n	71c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    7350:	mov	sl, r9
    7352:	b.n	7280 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x184>
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    7354:	sub.w	lr, r3, #65	; 0x41
    7358:	cmp.w	lr, #25
        uc |= bit;
    735c:	it	ls
    735e:	orrls.w	sl, r8, sl
    7362:	b.n	7254 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x158>
    7364:	.word	0x35000101

00007368 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    7368:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    736c:	ldrb	r3, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    736e:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7370:	movs	r2, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    7372:	and.w	r3, r3, #2
    7376:	strb.w	r2, [sp, #4]
    737a:	strb.w	r2, [sp, #5]
    737e:	strb.w	r2, [sp, #6]
    7382:	cmp	r3, #0
    7384:	beq.n	7400 <FatFile::remove()+0x98>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7386:	ldr	r1, [r0, #32]
    7388:	mov	r6, r0
    738a:	cbnz	r1, 73e4 <FatFile::remove()+0x7c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    738c:	movs	r1, #1
    738e:	mov	r0, r6
    7390:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7394:	mov	r7, r0
    7396:	cmp	r0, #0
    7398:	beq.w	74c4 <FatFile::remove()+0x15c>
    739c:	subs	r1, r7, #1
    739e:	add.w	r0, r7, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    73a2:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    73a4:	lsrs	r2, r4, #1
    73a6:	ldrb.w	r5, [r1, #1]!
    73aa:	orr.w	r3, r2, r4, lsl #7
    73ae:	uxtab	r3, r5, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    73b2:	cmp	r1, r0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    73b4:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    73b6:	bne.n	73a4 <FatFile::remove()+0x3c>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    73b8:	mov.w	r8, #229	; 0xe5
    73bc:	strb.w	r8, [r7]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    73c0:	ldr	r5, [r6, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    73c2:	movs	r3, #0
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    73c4:	add.w	r0, r5, #40	; 0x28
    73c8:	strb	r3, [r6, #0]
  m_flags = 0;
    73ca:	strb	r3, [r6, #2]
    73cc:	bl	6a94 <FatCache::sync()>
    73d0:	cbnz	r0, 7414 <FatFile::remove()+0xac>

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    73d2:	movw	r0, #594	; 0x252
    73d6:	bl	6f38 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    73da:	movs	r5, #0
}
    73dc:	mov	r0, r5
    73de:	add	sp, #40	; 0x28
    73e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    73e4:	ldr	r0, [r0, #8]
    73e6:	bl	6c90 <FatPartition::freeChain(unsigned long)>
    73ea:	mov	r5, r0
    73ec:	cmp	r0, #0
    73ee:	bne.n	738c <FatFile::remove()+0x24>
    DBG_FAIL_MACRO;
    73f0:	movw	r0, #574	; 0x23e
    73f4:	bl	6f38 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    73f8:	mov	r0, r5
    73fa:	add	sp, #40	; 0x28
    73fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    7400:	movw	r0, #569	; 0x239
    7404:	and.w	r5, r3, #255	; 0xff
    7408:	bl	6f38 <dbgPrint(unsigned short)>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
    740c:	mov	r0, r5
    740e:	add	sp, #40	; 0x28
    7410:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7414:	add.w	r0, r5, #564	; 0x234
    7418:	bl	6a94 <FatCache::sync()>
    741c:	cmp	r0, #0
    741e:	beq.n	73d2 <FatFile::remove()+0x6a>
    7420:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7422:	ldr	r3, [r0, #0]
    7424:	ldr	r3, [r3, #20]
    7426:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7428:	mov	r5, r0
    742a:	cmp	r0, #0
    742c:	beq.n	73d2 <FatFile::remove()+0x6a>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    742e:	ldrb	r3, [r6, #3]
    7430:	cmp	r3, #0
    7432:	beq.n	73dc <FatFile::remove()+0x74>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    7434:	add	r0, sp, #4
    7436:	mov	r1, r6
    7438:	bl	6f98 <FatFile::openCluster(FatFile*)>
    743c:	mov	r3, r0
    743e:	cmp	r0, #0
    7440:	beq.n	74b8 <FatFile::remove()+0x150>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7442:	ldrb	r3, [r6, #3]
    7444:	movs	r7, #1
    7446:	cbnz	r3, 748c <FatFile::remove()+0x124>
    7448:	b.n	74d0 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    744a:	add	r0, sp, #4
    744c:	bl	5f14 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7450:	adds	r1, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    7452:	mov	r3, r0
    7454:	cmp	r0, #0
    7456:	beq.n	74dc <FatFile::remove()+0x174>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7458:	ldrb	r2, [r0, #11]
    745a:	cmp	r2, #15
    745c:	bne.n	74ac <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    745e:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7460:	and.w	r0, r2, #31
    7464:	cmp	r7, r0
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7466:	uxtb	r7, r1
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7468:	bne.n	74ac <FatFile::remove()+0x144>
        order != (ldir->order & 0X1F) ||
    746a:	ldrb	r1, [r3, #13]
    746c:	cmp	r1, r4
    746e:	bne.n	74ac <FatFile::remove()+0x144>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    7470:	strb.w	r8, [r3]
    m_vol->cacheDirty();
    7474:	ldr	r1, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    7476:	ldrb.w	r3, [r1, #40]	; 0x28
    747a:	orr.w	r3, r3, #1
    747e:	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    7482:	lsls	r3, r2, #25
    7484:	bmi.n	74e8 <FatFile::remove()+0x180>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7486:	ldrb	r3, [r6, #3]
    7488:	cmp	r3, r7
    748a:	bcc.n	74d0 <FatFile::remove()+0x168>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    748c:	ldrh	r1, [r6, #4]
    748e:	subs	r1, r1, r7
    7490:	lsls	r1, r1, #5
    7492:	add	r0, sp, #4
    7494:	bl	5f64 <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    7498:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    749a:	mov	r3, r0
    749c:	cmp	r0, #0
    749e:	bne.n	744a <FatFile::remove()+0xe2>
      DBG_FAIL_MACRO;
    74a0:	movw	r0, #607	; 0x25f
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74a4:	mov	r5, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
    74a6:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    74aa:	b.n	73dc <FatFile::remove()+0x74>
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
    74ac:	movw	r0, #618	; 0x26a
    74b0:	bl	6f38 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74b4:	movs	r5, #0
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
        order != (ldir->order & 0X1F) ||
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    74b6:	b.n	73dc <FatFile::remove()+0x74>
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    74b8:	movw	r0, #602	; 0x25a
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74bc:	mov	r5, r3
  if (!isLFN()) {
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    74be:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    74c2:	b.n	73dc <FatFile::remove()+0x74>
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    74c4:	mov.w	r0, #580	; 0x244
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74c8:	mov	r5, r7
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    74ca:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    74ce:	b.n	73dc <FatFile::remove()+0x74>
      }
      return true;
    }
  }
  // Fall into fail.
  DBG_FAIL_MACRO;
    74d0:	movw	r0, #633	; 0x279
    74d4:	bl	6f38 <dbgPrint(unsigned short)>

fail:
  return false;
    74d8:	movs	r5, #0
    74da:	b.n	73dc <FatFile::remove()+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    74dc:	mov.w	r0, #612	; 0x264
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74e0:	mov	r5, r3
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    74e2:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    74e6:	b.n	73dc <FatFile::remove()+0x74>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    74e8:	ldr	r4, [r6, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    74ea:	add.w	r0, r4, #40	; 0x28
    74ee:	bl	6a94 <FatCache::sync()>
    74f2:	cbnz	r0, 7500 <FatFile::remove()+0x198>
        DBG_FAIL_MACRO;
    74f4:	movw	r0, #626	; 0x272
    74f8:	bl	6f38 <dbgPrint(unsigned short)>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    74fc:	movs	r5, #0
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
        DBG_FAIL_MACRO;
        goto fail;
    74fe:	b.n	73dc <FatFile::remove()+0x74>
    7500:	add.w	r0, r4, #564	; 0x234
    7504:	bl	6a94 <FatCache::sync()>
    7508:	cmp	r0, #0
    750a:	beq.n	74f4 <FatFile::remove()+0x18c>
    750c:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    750e:	ldr	r3, [r0, #0]
    7510:	ldr	r3, [r3, #20]
    7512:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7514:	cmp	r0, #0
    7516:	beq.n	74f4 <FatFile::remove()+0x18c>
    7518:	b.n	73dc <FatFile::remove()+0x74>
    751a:	nop

0000751c <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    751c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
    7520:	ldrb	r3, [r1, #0]
    7522:	lsls	r2, r3, #31
    7524:	bpl.n	7614 <FatFile::lfnUniqueSfn(fname_t*)+0xf8>
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    7526:	ldrb	r7, [r1, #12]
  DirFat_t *dir;
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');
    7528:	adds	r3, r1, r7
    752a:	mov	r5, r1
    752c:	ldrb	r2, [r3, #13]
    752e:	cmp	r2, #126	; 0x7e
    7530:	mov	r8, r0
    7532:	beq.n	755c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
    7534:	ldrb	r3, [r3, #14]
    7536:	cmp	r3, #49	; 0x31
    7538:	beq.n	755c <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    753a:	movs	r1, #9
    753c:	ldr	r0, [pc, #260]	; (7644 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    753e:	bl	9784 <usb_serial_write>
    7542:	movs	r1, #107	; 0x6b
    7544:	ldr	r0, [pc, #256]	; (7648 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7546:	bl	9784 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    754a:	movw	r1, #646	; 0x286
    754e:	ldr	r0, [pc, #252]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7550:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7554:	ldr	r0, [pc, #244]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7556:	bl	aca0 <Print::println()>
    755a:	b.n	755a <FatFile::lfnUniqueSfn(fname_t*)+0x3e>
    755c:	movs	r6, #2
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    755e:	add.w	r9, r5, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    7562:	ldr	r1, [r5, #4]
    7564:	ldr	r2, [r5, #8]
    7566:	adds	r3, r6, r1
    7568:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    756a:	cbz	r1, 757e <FatFile::lfnUniqueSfn(fname_t*)+0x62>
    756c:	adds	r0, r2, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    756e:	ldrb.w	r1, [r2], #1
    7572:	add.w	r3, r3, r3, lsl #5
    7576:	eors	r3, r1
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    7578:	cmp	r0, r2
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    757a:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    757c:	bne.n	756e <FatFile::lfnUniqueSfn(fname_t*)+0x52>
    757e:	cmp	r7, #3
    7580:	it	cs
    7582:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7584:	adds	r2, r7, #4
    7586:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    7588:	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    758c:	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    758e:	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7590:	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    7592:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7594:	ite	ls
    7596:	addls	r1, #48	; 0x30
    7598:	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    759a:	cmp	r2, r7
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    759c:	mov.w	r3, r3, lsr #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    75a0:	strb	r1, [r0, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    75a2:	bhi.n	7588 <FatFile::lfnUniqueSfn(fname_t*)+0x6c>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    75a4:	adds	r3, r5, r7
    75a6:	movs	r2, #126	; 0x7e
    75a8:	strb	r2, [r3, #13]
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    75aa:	movs	r1, #0
    75ac:	mov	r0, r8
    75ae:	bl	5f64 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    75b2:	movs	r1, #1
    75b4:	mov	r0, r8
    75b6:	bl	5f14 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    75ba:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    75bc:	mov	r4, r0
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    75be:	mov	r1, r0
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    75c0:	cbz	r0, 75ea <FatFile::lfnUniqueSfn(fname_t*)+0xce>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    75c2:	ldrb	r3, [r4, #0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    75c4:	mov	r0, r9
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    75c6:	cbz	r3, 75f0 <FatFile::lfnUniqueSfn(fname_t*)+0xd4>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    75c8:	ldrb	r3, [r4, #11]
    75ca:	lsls	r3, r3, #28
    75cc:	bmi.n	75b2 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
    75ce:	bl	c250 <memcmp>
    75d2:	mov	r4, r0
    75d4:	cmp	r0, #0
    75d6:	bne.n	75b2 <FatFile::lfnUniqueSfn(fname_t*)+0x96>
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    75d8:	cmp	r6, #99	; 0x63
    75da:	bne.n	75f6 <FatFile::lfnUniqueSfn(fname_t*)+0xda>
        break;
      }
    }
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;
    75dc:	movw	r0, #686	; 0x2ae
    75e0:	bl	6f38 <dbgPrint(unsigned short)>

fail:
  return false;
    75e4:	mov	r0, r4
    75e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    75ea:	ldrb.w	r3, [r8, #1]
    75ee:	cbnz	r3, 7636 <FatFile::lfnUniqueSfn(fname_t*)+0x11a>

fail:
  return false;

done:
  return true;
    75f0:	movs	r0, #1
    75f2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    75f6:	movs	r1, #107	; 0x6b
    75f8:	ldr	r0, [pc, #76]	; (7648 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    75fa:	bl	9784 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    75fe:	mov.w	r1, #652	; 0x28c
    7602:	ldr	r0, [pc, #72]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7604:	bl	ad6c <Print::print(long)>
    7608:	adds	r6, #1
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    760a:	ldr	r0, [pc, #64]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    760c:	bl	aca0 <Print::println()>
    7610:	uxth	r6, r6
    7612:	b.n	7562 <FatFile::lfnUniqueSfn(fname_t*)+0x46>
    7614:	movs	r1, #9
    7616:	ldr	r0, [pc, #44]	; (7644 <FatFile::lfnUniqueSfn(fname_t*)+0x128>)
    7618:	bl	9784 <usb_serial_write>
    761c:	movs	r1, #107	; 0x6b
    761e:	ldr	r0, [pc, #40]	; (7648 <FatFile::lfnUniqueSfn(fname_t*)+0x12c>)
    7620:	bl	9784 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7624:	movw	r1, #645	; 0x285
    7628:	ldr	r0, [pc, #32]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    762a:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    762e:	ldr	r0, [pc, #28]	; (764c <FatFile::lfnUniqueSfn(fname_t*)+0x130>)
    7630:	bl	aca0 <Print::println()>
    7634:	b.n	7634 <FatFile::lfnUniqueSfn(fname_t*)+0x118>
      if (!dir) {
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
    7636:	movw	r0, #673	; 0x2a1
    763a:	bl	6f38 <dbgPrint(unsigned short)>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

fail:
  return false;
    763e:	mov	r0, r4
        if (!getError()) {
          // At EOF and name not found if no error.
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7640:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7644:	.word	0x0001000c
    7648:	.word	0x00010018
    764c:	.word	0x1fff098c

00007650 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7650:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7654:	mov	r6, r1
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7656:	ldrb	r1, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    7658:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    765a:	tst.w	r1, #112	; 0x70
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    765e:	str	r0, [sp, #32]
    7660:	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    7662:	beq.n	7668 <FatFile::open(FatFile*, fname_t*, int)+0x18>
    7664:	ldrb	r3, [r0, #0]
    7666:	cbz	r3, 767a <FatFile::open(FatFile*, fname_t*, int)+0x2a>
    DBG_FAIL_MACRO;
    7668:	movw	r0, #319	; 0x13f
    766c:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7670:	movs	r5, #0
}
    7672:	mov	r0, r5
    7674:	add	sp, #52	; 0x34
    7676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    767a:	ldrb	r3, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    767c:	ldr.w	r8, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7680:	lsls	r3, r3, #30
    7682:	mov	fp, r2
    7684:	bne.n	7708 <FatFile::open(FatFile*, fname_t*, int)+0xb8>
    7686:	movs	r7, #1
    7688:	movs	r1, #0
    768a:	mov	r0, r6
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    768c:	mov	r9, r1
    768e:	bl	5f64 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7692:	add.w	r3, fp, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
    7696:	str.w	r9, [sp, #28]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    769a:	str.w	r9, [sp, #12]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    769e:	mov	r4, r9
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    76a0:	mov	sl, r9
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    76a2:	str.w	r9, [sp, #20]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    76a6:	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    76a8:	movs	r1, #1
    76aa:	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    76ac:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    76ae:	bl	5f14 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    76b2:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    76b6:	mov	r3, r0
    76b8:	cmp	r0, #0
    76ba:	beq.w	77d2 <FatFile::open(FatFile*, fname_t*, int)+0x182>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    76be:	ldrb	r2, [r0, #0]
    76c0:	cmp	r2, #229	; 0xe5
    76c2:	beq.n	7734 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
    76c4:	cmp	r2, #0
    76c6:	beq.n	7734 <FatFile::open(FatFile*, fname_t*, int)+0xe4>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    76c8:	cmp	r4, r7
    76ca:	it	cc
    76cc:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    76ce:	cmp	r2, #46	; 0x2e
    76d0:	beq.n	772e <FatFile::open(FatFile*, fname_t*, int)+0xde>
    76d2:	ldrb	r1, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    76d4:	cmp	r1, #15
    76d6:	beq.n	7750 <FatFile::open(FatFile*, fname_t*, int)+0x100>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    76d8:	and.w	r1, r1, #8
    76dc:	and.w	r2, r1, #255	; 0xff
    76e0:	cbnz	r1, 772e <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (lfnOrd) {
    76e2:	cmp.w	sl, #0
    76e6:	bne.w	7a3a <FatFile::open(FatFile*, fname_t*, int)+0x3ea>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    76ea:	mov	r0, r3
    76ec:	movs	r2, #11
    76ee:	ldr	r1, [sp, #16]
    76f0:	bl	c250 <memcmp>
    76f4:	cmp	r0, #0
    76f6:	bne.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    76f8:	ldrb.w	r3, [fp]
    76fc:	lsls	r0, r3, #31
    76fe:	bpl.w	7a1a <FatFile::open(FatFile*, fname_t*, int)+0x3ca>
          goto found;
        }
        fnameFound = true;
    7702:	movs	r3, #1
    7704:	str	r3, [sp, #20]
    7706:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    7708:	ldr	r7, [pc, #744]	; (79f4 <FatFile::open(FatFile*, fname_t*, int)+0x3a4>)
    770a:	add.w	r3, r8, #12
    770e:	umull	r3, r7, r7, r3
    7712:	lsrs	r7, r7, #2
    7714:	adds	r7, #1
    7716:	uxtb	r7, r7
    7718:	b.n	7688 <FatFile::open(FatFile*, fname_t*, int)+0x38>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    771a:	ldr	r1, [sp, #12]
    771c:	subs	r1, #1
    771e:	uxtb	r1, r1
    7720:	cmp	r2, r1
    7722:	str	r1, [sp, #12]
    7724:	bne.n	772e <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7726:	ldrb	r2, [r3, #13]
    7728:	ldr	r1, [sp, #28]
    772a:	cmp	r1, r2
    772c:	beq.n	7766 <FatFile::open(FatFile*, fname_t*, int)+0x116>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    772e:	mov.w	sl, #0
    7732:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    7734:	cmp	r4, #0
    7736:	it	eq
    7738:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    773a:	cmp	r4, r7
        freeFound++;
    773c:	itt	cc
    773e:	addcc	r4, #1
    7740:	uxtbcc	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    7742:	cmp	r2, #0
    7744:	beq.n	77da <FatFile::open(FatFile*, fname_t*, int)+0x18a>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7746:	cmp	r2, #229	; 0xe5
    7748:	bne.n	76ce <FatFile::open(FatFile*, fname_t*, int)+0x7e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    774a:	mov.w	sl, #0
    774e:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    7750:	cmp.w	sl, #0
    7754:	bne.n	771a <FatFile::open(FatFile*, fname_t*, int)+0xca>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    7756:	lsls	r5, r2, #25
    7758:	bpl.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    775a:	and.w	sl, r2, #31
        checksum = ldir->checksum;
    775e:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    7760:	str.w	sl, [sp, #12]
        checksum = ldir->checksum;
    7764:	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7766:	ldr	r2, [sp, #12]
    7768:	subs	r2, #1
    776a:	add.w	r5, r2, r2, lsl #1
    776e:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    7772:	cmp	r8, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    7774:	mov	r2, r5
      if (k >= len) {
    7776:	bls.n	772e <FatFile::open(FatFile*, fname_t*, int)+0xde>
    7778:	add.w	r1, r5, #13
    777c:	str.w	sl, [sp, #36]	; 0x24
    7780:	mov	sl, r1
    7782:	b.n	77ae <FatFile::open(FatFile*, fname_t*, int)+0x15e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    7784:	ldr.w	r0, [fp, #8]
    7788:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    778a:	cmp.w	ip, #25
    778e:	it	ls
    7790:	addls	r1, #32
    7792:	sub.w	r0, r2, #65	; 0x41
    7796:	it	ls
    7798:	uxtbls	r1, r1
    779a:	cmp	r0, #25
    779c:	itt	ls
    779e:	addls	r2, #32
    77a0:	uxtbls	r2, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    77a2:	cmp	r2, r1
    77a4:	bne.n	772e <FatFile::open(FatFile*, fname_t*, int)+0xde>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    77a6:	cmp	lr, sl
    77a8:	beq.w	7936 <FatFile::open(FatFile*, fname_t*, int)+0x2e6>
    77ac:	mov	r2, lr
        uint16_t u = lfnGetChar(ldir, i);
    77ae:	subs	r1, r2, r5
    77b0:	uxtb	r1, r1
    77b2:	mov	r0, r3
    77b4:	bl	6f10 <lfnGetChar(DirLfn_t*, unsigned char)>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    77b8:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    77ba:	cmp	r8, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    77bc:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    77c0:	add.w	lr, r2, #1
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    77c4:	beq.w	79e4 <FatFile::open(FatFile*, fname_t*, int)+0x394>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    77c8:	cmp	r0, #255	; 0xff
    77ca:	bls.n	7784 <FatFile::open(FatFile*, fname_t*, int)+0x134>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    77cc:	mov.w	sl, #0
    77d0:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    77d2:	ldrb	r2, [r6, #1]
    77d4:	cmp	r2, #0
    77d6:	bne.w	793c <FatFile::open(FatFile*, fname_t*, int)+0x2ec>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    77da:	ldr	r2, [sp, #24]
    77dc:	mov	r3, r2
    77de:	lsls	r2, r3, #22
    77e0:	bpl.n	77ec <FatFile::open(FatFile*, fname_t*, int)+0x19c>
    77e2:	and.w	r3, r3, #3
    77e6:	subs	r3, #1
    77e8:	cmp	r3, #1
    77ea:	bls.n	77fe <FatFile::open(FatFile*, fname_t*, int)+0x1ae>
    DBG_FAIL_MACRO;
    77ec:	mov.w	r0, #418	; 0x1a2
    77f0:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    77f4:	movs	r5, #0
}
    77f6:	mov	r0, r5
    77f8:	add	sp, #52	; 0x34
    77fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    77fe:	cmp	r4, #0
    7800:	it	eq
    7802:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    7804:	cmp	r4, r7
    7806:	bcc.n	7810 <FatFile::open(FatFile*, fname_t*, int)+0x1c0>
    7808:	b.n	785c <FatFile::open(FatFile*, fname_t*, int)+0x20c>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    780a:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    780c:	cmp	r7, r4
    780e:	bls.n	785c <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    dir = dirFile->readDirCache();
    7810:	movs	r1, #0
    7812:	mov	r0, r6
    7814:	bl	5f14 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    7818:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    781a:	cmp	r0, #0
    781c:	bne.n	780a <FatFile::open(FatFile*, fname_t*, int)+0x1ba>
      if (dirFile->getError()) {
    781e:	ldrb	r2, [r6, #1]
    7820:	mov	r3, r0
    7822:	cbz	r2, 7838 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        DBG_FAIL_MACRO;
    7824:	mov.w	r0, #430	; 0x1ae
    goto fail;
  }
  return true;

fail:
  return false;
    7828:	mov	r5, r3

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    782a:	bl	6f38 <dbgPrint(unsigned short)>
        goto fail;
    782e:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7830:	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    7832:	ldrb	r3, [r3, #4]
    7834:	cmp	r3, #1
    7836:	bhi.n	785c <FatFile::open(FatFile*, fname_t*, int)+0x20c>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    7838:	cmp	r7, r4
    783a:	bls.n	785c <FatFile::open(FatFile*, fname_t*, int)+0x20c>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    783c:	mov	r0, r6
    783e:	bl	59e4 <FatFile::addDirCluster()>
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    7842:	adds	r4, #16
    7844:	uxtb	r4, r4
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    7846:	cmp	r0, #0
    7848:	bne.n	7830 <FatFile::open(FatFile*, fname_t*, int)+0x1e0>
    784a:	mov	r5, r0
      DBG_FAIL_MACRO;
    784c:	movw	r0, #441	; 0x1b9
    7850:	bl	6f38 <dbgPrint(unsigned short)>
  }
  return true;

fail:
  return false;
}
    7854:	mov	r0, r5
    7856:	add	sp, #52	; 0x34
    7858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    785c:	ldr	r3, [sp, #20]
    785e:	cbz	r3, 7870 <FatFile::open(FatFile*, fname_t*, int)+0x220>
    if (!dirFile->lfnUniqueSfn(fname)) {
    7860:	mov	r1, fp
    7862:	mov	r0, r6
    7864:	bl	751c <FatFile::lfnUniqueSfn(fname_t*)>
    7868:	mov	r5, r0
    786a:	cmp	r0, #0
    786c:	beq.w	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    7870:	mov.w	r1, r9, lsl #5
    7874:	mov	r0, r6
    7876:	bl	5f64 <FatFile::seekSet(unsigned long)>
    787a:	mov	r5, r0
    787c:	cmp	r0, #0
    787e:	beq.w	7a4c <FatFile::open(FatFile*, fname_t*, int)+0x3fc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    7882:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    7884:	ands.w	sl, r7, #255	; 0xff
    7888:	beq.n	7950 <FatFile::open(FatFile*, fname_t*, int)+0x300>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    788a:	orr.w	r5, sl, #64	; 0x40
    788e:	uxtb	r5, r5
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7890:	mov	r7, sl
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    7892:	mov.w	r9, #0
    7896:	movs	r1, #0
    7898:	mov	r0, r6
    789a:	bl	5f14 <FatFile::readDirCache(bool)>
    if (!ldir) {
    789e:	cmp	r0, #0
    78a0:	beq.w	7a2c <FatFile::open(FatFile*, fname_t*, int)+0x3dc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    78a4:	ldr	r2, [r6, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    78a6:	ldrb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    78aa:	cmp	sl, r7
    78ac:	orr.w	r3, r3, #1
    78b0:	ite	ne
    78b2:	movne	r4, r7
    78b4:	moveq	r4, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    78b6:	movs	r1, #15
    78b8:	strb.w	r3, [r2, #40]	; 0x28
    78bc:	add.w	lr, fp, #23
    78c0:	add.w	r3, fp, #12
    ldir->mustBeZero1 = 0;
    78c4:	strb.w	r9, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    78c8:	strb	r4, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    78ca:	strb	r1, [r0, #11]
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    78cc:	movs	r2, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    78ce:	ldrb.w	ip, [r3, #1]!
    78d2:	lsrs	r1, r2, #1
    78d4:	orr.w	r2, r1, r2, lsl #7
    78d8:	uxtab	r2, ip, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    78dc:	cmp	r3, lr
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    78de:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    78e0:	bne.n	78ce <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    78e2:	and.w	r4, r4, #31
    78e6:	subs	r4, #1
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    78e8:	strb	r2, [r0, #13]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    78ea:	add.w	r3, r4, r4, lsl #1
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    78ee:	ldr.w	r2, [fp, #8]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    78f2:	strh.w	r9, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    78f6:	add.w	r4, r4, r3, lsl #2
    78fa:	adds	r0, #4
  for (uint8_t i = 0; i < 13; i++, k++) {
    78fc:	movs	r3, #0
    78fe:	b.n	791e <FatFile::open(FatFile*, fname_t*, int)+0x2ce>
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7900:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    7902:	ldrb	r1, [r2, r4]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    7904:	bls.n	7930 <FatFile::open(FatFile*, fname_t*, int)+0x2e0>
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    7906:	cmp	r3, #10
    7908:	ite	ls
    790a:	strhls	r1, [r0, #0]
    790c:	strhhi	r1, [r0, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    790e:	adds	r3, #1
    7910:	uxtb	r3, r3
    7912:	cmp	r3, #13
    7914:	add.w	r4, r4, #1
    7918:	add.w	r0, r0, #2
    791c:	beq.n	7948 <FatFile::open(FatFile*, fname_t*, int)+0x2f8>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    791e:	cmp	r8, r4
    7920:	bhi.n	7900 <FatFile::open(FatFile*, fname_t*, int)+0x2b0>
    7922:	ite	ne
    7924:	movne.w	r1, #4294967295
    7928:	moveq	r1, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    792a:	cmp	r3, #4
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    792c:	uxth	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    792e:	bhi.n	7906 <FatFile::open(FatFile*, fname_t*, int)+0x2b6>
    7930:	strh.w	r1, [r0, #-3]
    7934:	b.n	790e <FatFile::open(FatFile*, fname_t*, int)+0x2be>
    7936:	ldr.w	sl, [sp, #36]	; 0x24
    793a:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    793c:	movw	r0, #331	; 0x14b
    goto fail;
  }
  return true;

fail:
  return false;
    7940:	mov	r5, r3
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
        DBG_FAIL_MACRO;
    7942:	bl	6f38 <dbgPrint(unsigned short)>
        goto fail;
    7946:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    7948:	subs	r7, #1
    794a:	ands.w	r7, r7, #255	; 0xff
    794e:	bne.n	7896 <FatFile::open(FatFile*, fname_t*, int)+0x246>
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
    7950:	movs	r1, #0
    7952:	mov	r0, r6
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    7954:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    7956:	bl	5f14 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    795a:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    795e:	mov	r4, r0
    7960:	cmp	r0, #0
    7962:	beq.n	7a56 <FatFile::open(FatFile*, fname_t*, int)+0x406>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    7964:	movs	r2, #32
    7966:	movs	r1, #0
    7968:	bl	c37c <memset>
  memcpy(dir->name, fname->sfn, 11);
    796c:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    796e:	ldr	r2, [pc, #136]	; (79f8 <FatFile::open(FatFile*, fname_t*, int)+0x3a8>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    7970:	ldr.w	r1, [r3, #13]!
    7974:	ldr	r0, [r3, #4]
    7976:	str	r0, [r4, #4]
    7978:	str	r1, [r4, #0]
    797a:	ldrh	r1, [r3, #8]
    797c:	ldrb	r3, [r3, #10]
    797e:	strb	r3, [r4, #10]
    7980:	strh	r1, [r4, #8]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7982:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    7986:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7988:	and.w	r3, r3, #24
    798c:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    798e:	cbz	r7, 79b4 <FatFile::open(FatFile*, fname_t*, int)+0x364>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    7990:	add.w	r2, sp, #43	; 0x2b
    7994:	add.w	r1, sp, #46	; 0x2e
    7998:	add	r0, sp, #44	; 0x2c
    799a:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    799c:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    79a0:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    79a4:	ldrb.w	r1, [sp, #43]	; 0x2b
    79a8:	strb	r1, [r4, #13]
    79aa:	strh	r3, [r4, #16]
    79ac:	strh	r3, [r4, #18]
    79ae:	strh	r3, [r4, #24]
    79b0:	strh	r2, [r4, #14]
    79b2:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    79b4:	ldr	r2, [r6, #8]
    79b6:	ldrb.w	r3, [r2, #40]	; 0x28
    79ba:	orr.w	r3, r3, #1
    79be:	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    79c2:	mov	r2, r5
    79c4:	str.w	sl, [sp]
    79c8:	ldr	r3, [sp, #24]
    79ca:	ldr	r0, [sp, #32]
    79cc:	mov	r1, r6
    79ce:	bl	6088 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    79d2:	mov	r5, r0
    79d4:	cmp	r0, #0
    79d6:	bne.w	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    DBG_FAIL_MACRO;
    79da:	mov.w	r0, #504	; 0x1f8
    79de:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    79e2:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    79e4:	cmp	r0, #0
    79e6:	ldr.w	sl, [sp, #36]	; 0x24
    79ea:	it	ne
    79ec:	movne.w	sl, #0
    79f0:	b.n	76a8 <FatFile::open(FatFile*, fname_t*, int)+0x58>
    79f2:	nop
    79f4:	.word	0x4ec4ec4f
    79f8:	.word	0x1fff1ba4
    79fc:	subs	r4, r3, #1
    79fe:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7a00:	ldrb.w	r0, [r4, #1]!
    7a04:	lsrs	r1, r2, #1
    7a06:	orr.w	r2, r1, r2, lsl #7
    7a0a:	uxtab	r2, r0, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7a0e:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    7a10:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    7a12:	bne.n	7a00 <FatFile::open(FatFile*, fname_t*, int)+0x3b0>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7a14:	ldr	r3, [sp, #28]
    7a16:	cmp	r3, r2
    7a18:	bne.n	7a40 <FatFile::open(FatFile*, fname_t*, int)+0x3f0>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    7a1a:	ldr	r3, [sp, #24]
    7a1c:	lsls	r1, r3, #20
    7a1e:	bpl.n	79c2 <FatFile::open(FatFile*, fname_t*, int)+0x372>
    DBG_FAIL_MACRO;
    7a20:	mov.w	r0, #410	; 0x19a
    7a24:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7a28:	movs	r5, #0

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    DBG_FAIL_MACRO;
    goto fail;
    7a2a:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7a2c:	mov	r3, r0
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7a2e:	movw	r0, #463	; 0x1cf
    goto fail;
  }
  return true;

fail:
  return false;
    7a32:	mov	r5, r3
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
    7a34:	bl	6f38 <dbgPrint(unsigned short)>
      goto fail;
    7a38:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7a3a:	ldr	r1, [sp, #12]
    7a3c:	cmp	r1, #1
    7a3e:	beq.n	79fc <FatFile::open(FatFile*, fname_t*, int)+0x3ac>
          goto found;
        }
        DBG_FAIL_MACRO;
    7a40:	movw	r0, #393	; 0x189
    7a44:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
  }
  return true;

fail:
  return false;
    7a48:	movs	r5, #0
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
    7a4a:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    if (!dirFile->lfnUniqueSfn(fname)) {
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    7a4c:	mov.w	r0, #456	; 0x1c8
    7a50:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    7a54:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7a56:	movw	r0, #477	; 0x1dd
    goto fail;
  }
  return true;

fail:
  return false;
    7a5a:	mov	r5, r4
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
  dir = dirFile->readDirCache();
  if (!dir) {
    DBG_FAIL_MACRO;
    7a5c:	bl	6f38 <dbgPrint(unsigned short)>
    goto fail;
    7a60:	b.n	7672 <FatFile::open(FatFile*, fname_t*, int)+0x22>
    7a62:	nop

00007a64 <dbgPrint(unsigned short)>:
#if USE_DBG_MACROS
#include "Arduino.h"
#ifndef DBG_FILE
#error DBG_FILE not defined
#endif  // DBG_FILE
static void dbgPrint(uint16_t line) {
    7a64:	push	{r3, r4, r5, lr}
    7a66:	movs	r1, #10
    7a68:	mov	r5, r0
    7a6a:	ldr	r0, [pc, #40]	; (7a94 <dbgPrint(unsigned short)+0x30>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7a6c:	ldr	r4, [pc, #40]	; (7a98 <dbgPrint(unsigned short)+0x34>)
    7a6e:	bl	9784 <usb_serial_write>
    7a72:	movs	r1, #14
    7a74:	ldr	r0, [pc, #36]	; (7a9c <dbgPrint(unsigned short)+0x38>)
    7a76:	bl	9784 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7a7a:	movs	r0, #46	; 0x2e
    7a7c:	bl	988c <usb_serial_putchar>
    7a80:	mov	r1, r5
    7a82:	mov	r0, r4
    7a84:	bl	ad6c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7a88:	mov	r0, r4
  Serial.print(F("DBG_FAIL: "));
  Serial.print(F(DBG_FILE));
  Serial.write('.');
  Serial.println(line);
}
    7a8a:	ldmia.w	sp!, {r3, r4, r5, lr}
    7a8e:	b.w	aca0 <Print::println()>
    7a92:	nop
    7a94:	.word	0x0000ff90
    7a98:	.word	0x1fff098c
    7a9c:	.word	0x00010084

00007aa0 <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    7aa0:	push	{r3, r4, r5, r6, r7, lr}
    7aa2:	ldrb	r4, [r0, #0]
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    7aa4:	cbz	r4, 7b02 <FatFile::getSFN(char*)+0x62>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7aa6:	ands.w	r4, r4, #96	; 0x60
    7aaa:	mov	r5, r1
    7aac:	beq.n	7aba <FatFile::getSFN(char*)+0x1a>
    name[0] = '/';
    7aae:	movs	r2, #47	; 0x2f
    name[1] = '\0';
    7ab0:	movs	r3, #0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    7ab2:	strb	r2, [r1, #0]
    name[1] = '\0';
    7ab4:	strb	r3, [r1, #1]
    return true;
    7ab6:	movs	r0, #1
    7ab8:	pop	{r3, r4, r5, r6, r7, pc}
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    7aba:	mov	r1, r4
    7abc:	bl	5ab8 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ac0:	mov	r6, r0
    7ac2:	cbz	r0, 7b0c <FatFile::getSFN(char*)+0x6c>
    7ac4:	mov	r1, r4
    7ac6:	mov	r2, r4
    7ac8:	subs	r0, #1
    7aca:	movs	r7, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7acc:	mov.w	lr, #46	; 0x2e
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    7ad0:	ldrb.w	r3, [r0, #1]!
    7ad4:	cmp	r3, #32
    7ad6:	beq.n	7af4 <FatFile::getSFN(char*)+0x54>
      continue;
    }
    if (i == 8) {
    7ad8:	cmp	r1, #8
    7ada:	beq.n	7b16 <FatFile::getSFN(char*)+0x76>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7adc:	sub.w	r4, r3, #65	; 0x41
    7ae0:	cmp	r4, #25
    7ae2:	bhi.n	7aee <FatFile::getSFN(char*)+0x4e>
    7ae4:	ldrb	r4, [r6, #12]
    7ae6:	tst	r7, r4
      c += 'a' - 'A';
    7ae8:	itt	ne
    7aea:	addne	r3, #32
    7aec:	uxtbne	r3, r3
    }
    name[j++] = c;
    7aee:	strb	r3, [r5, r2]
    7af0:	adds	r2, #1
    7af2:	uxtb	r2, r2
    7af4:	adds	r1, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    7af6:	cmp	r1, #11
    7af8:	bne.n	7ad0 <FatFile::getSFN(char*)+0x30>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    7afa:	movs	r3, #0
    7afc:	strb	r3, [r5, r2]
  return true;
    7afe:	movs	r0, #1

fail:
  return false;
}
    7b00:	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    7b02:	movs	r0, #37	; 0x25
    7b04:	bl	7a64 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7b08:	mov	r0, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
    7b0a:	pop	{r3, r4, r5, r6, r7, pc}
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    DBG_FAIL_MACRO;
    7b0c:	movs	r0, #48	; 0x30
    7b0e:	bl	7a64 <dbgPrint(unsigned short)>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    7b12:	mov	r0, r6
    7b14:	pop	{r3, r4, r5, r6, r7, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    7b16:	strb.w	lr, [r5, r2]
    7b1a:	adds	r2, #1
    7b1c:	uxtb	r2, r2
    7b1e:	ldrb	r3, [r0, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    7b20:	movs	r7, #16
    7b22:	b.n	7adc <FatFile::getSFN(char*)+0x3c>

00007b24 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7b24:	push	{r3, r4, r5, r6, r7, lr}
  m_fFile = nullptr;
    7b26:	movs	r5, #0
    7b28:	str	r5, [r0, #56]	; 0x38
  m_xFile = nullptr;
  if (from.m_fFile) {
    7b2a:	ldr	r4, [r1, #56]	; 0x38
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
  m_fFile = nullptr;
  m_xFile = nullptr;
    7b2c:	str	r5, [r0, #60]	; 0x3c
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    7b2e:	mov	r6, r0
    7b30:	mov	r7, r1
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    7b32:	cbz	r4, 7b58 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7b34:	mov	r1, r0
    7b36:	movs	r0, #36	; 0x24
    7b38:	bl	7d90 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    7b3c:	strb	r5, [r0, #0]
    7b3e:	strb	r5, [r0, #1]
    7b40:	strb	r5, [r0, #2]
    7b42:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    7b44:	ldr	r5, [r7, #56]	; 0x38
    7b46:	mov	r4, r0
    7b48:	ldmia	r5!, {r0, r1, r2, r3}
    7b4a:	stmia	r4!, {r0, r1, r2, r3}
    7b4c:	ldmia	r5!, {r0, r1, r2, r3}
    7b4e:	stmia	r4!, {r0, r1, r2, r3}
    7b50:	ldr	r3, [r5, #0]
    7b52:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    7b54:	mov	r0, r6
    7b56:	pop	{r3, r4, r5, r6, r7, pc}
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    7b58:	ldr	r3, [r1, #60]	; 0x3c
    7b5a:	cmp	r3, #0
    7b5c:	beq.n	7b54 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>
    m_xFile = new (m_fileMem) ExFatFile;
    7b5e:	mov	r1, r0
    7b60:	movs	r0, #56	; 0x38
    7b62:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7b66:	strb.w	r4, [r0, #49]	; 0x31
    7b6a:	strb.w	r4, [r0, #50]	; 0x32
    7b6e:	strb.w	r4, [r0, #51]	; 0x33
    7b72:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    7b74:	ldr	r3, [r7, #60]	; 0x3c
    7b76:	mov	r2, r0
    7b78:	add.w	r1, r3, #48	; 0x30
    7b7c:	ldr	r5, [r3, #0]
    7b7e:	ldr	r4, [r3, #4]
    7b80:	ldr	r0, [r3, #8]
    7b82:	ldr	r7, [r3, #12]
    7b84:	str	r7, [r2, #12]
    7b86:	adds	r3, #16
    7b88:	cmp	r3, r1
    7b8a:	str	r5, [r2, #0]
    7b8c:	str	r4, [r2, #4]
    7b8e:	str	r0, [r2, #8]
    7b90:	add.w	r2, r2, #16
    7b94:	bne.n	7b7c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x58>
    7b96:	ldr	r3, [r3, #0]
    7b98:	str	r3, [r2, #0]
    7b9a:	b.n	7b54 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x30>

00007b9c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7b9c:	push	{r4, lr}
    7b9e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7ba0:	ldr	r0, [r0, #56]	; 0x38
    7ba2:	cbz	r0, 7bb0 <FsBaseFile::close()+0x14>
    7ba4:	bl	5b88 <FatFile::close()>
    7ba8:	cbz	r0, 7bb0 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    7baa:	movs	r3, #0
    7bac:	str	r3, [r4, #56]	; 0x38
    return true;
    7bae:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    7bb0:	ldr	r0, [r4, #60]	; 0x3c
    7bb2:	cbz	r0, 7bc0 <FsBaseFile::close()+0x24>
    7bb4:	bl	3c54 <ExFatFile::close()>
    7bb8:	cbz	r0, 7bc0 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    7bba:	movs	r3, #0
    7bbc:	str	r3, [r4, #60]	; 0x3c
    7bbe:	pop	{r4, pc}
    return true;
  }
  return false;
    7bc0:	movs	r0, #0
}
    7bc2:	pop	{r4, pc}

00007bc4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    7bc4:	cbz	r1, 7c3a <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7bc6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bca:	mov	r4, r1
    7bcc:	mov	r5, r0
    7bce:	mov	r8, r3
    7bd0:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    7bd2:	bl	7b9c <FsBaseFile::close()>
  if (vol->m_fVol) {
    7bd6:	ldr.w	r6, [r4, #1144]	; 0x478
    7bda:	cbz	r6, 7c08 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    m_fFile = new (m_fileMem) FatFile;
    7bdc:	mov	r1, r5
    7bde:	movs	r0, #36	; 0x24
    7be0:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7be4:	movs	r1, #0
    7be6:	strb	r1, [r0, #0]
    7be8:	strb	r1, [r0, #1]
    7bea:	strb	r1, [r0, #2]
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7bec:	ldr.w	r1, [r4, #1144]	; 0x478
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    7bf0:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7bf2:	mov	r3, r8
    7bf4:	mov	r2, r7
    7bf6:	bl	5cf8 <FatFile::open(FatVolume*, char const*, int)>
    7bfa:	cbz	r0, 7c02 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    7bfc:	movs	r0, #1
    7bfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    7c02:	str	r0, [r5, #56]	; 0x38
    return false;
    7c04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    7c08:	ldr.w	r3, [r4, #1148]	; 0x47c
    7c0c:	cbz	r3, 7c3e <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    7c0e:	mov	r1, r5
    7c10:	movs	r0, #56	; 0x38
    7c12:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7c16:	strb.w	r6, [r0, #49]	; 0x31
    7c1a:	strb.w	r6, [r0, #50]	; 0x32
    7c1e:	strb.w	r6, [r0, #51]	; 0x33
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7c22:	ldr.w	r1, [r4, #1148]	; 0x47c
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    7c26:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7c28:	mov	r3, r8
    7c2a:	mov	r2, r7
    7c2c:	bl	4694 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7c30:	cmp	r0, #0
    7c32:	bne.n	7bfc <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    7c34:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    7c36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7c3a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7c3c:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    7c3e:	movs	r0, #0
    7c40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007c44 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7c44:	push	{r3, r4, r5, r6, r7, lr}
    7c46:	mov	r5, r1
    7c48:	mov	r7, r2
    7c4a:	mov	r4, r0
  close();
    7c4c:	bl	7b9c <FsBaseFile::close()>
  if (dir->m_fFile) {
    7c50:	ldr	r6, [r5, #56]	; 0x38
    7c52:	cbz	r6, 7c78 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    7c54:	mov	r1, r4
    7c56:	movs	r0, #36	; 0x24
    7c58:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7c5c:	movs	r2, #0
    7c5e:	strb	r2, [r0, #0]
    7c60:	strb	r2, [r0, #1]
    7c62:	strb	r2, [r0, #2]
    7c64:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7c66:	mov	r2, r7
    7c68:	ldr	r1, [r5, #56]	; 0x38
    7c6a:	bl	61b8 <FatFile::openNext(FatFile*, int)>
    7c6e:	cbz	r0, 7c74 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    7c70:	movs	r0, #1
    7c72:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    7c74:	str	r0, [r4, #56]	; 0x38
    7c76:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    7c78:	ldr	r0, [r5, #60]	; 0x3c
    7c7a:	cbz	r0, 7ca0 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    7c7c:	mov	r1, r4
    7c7e:	movs	r0, #56	; 0x38
    7c80:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7c84:	strb.w	r6, [r0, #49]	; 0x31
    7c88:	strb.w	r6, [r0, #50]	; 0x32
    7c8c:	strb.w	r6, [r0, #51]	; 0x33
    7c90:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7c92:	mov	r2, r7
    7c94:	ldr	r1, [r5, #60]	; 0x3c
    7c96:	bl	46a4 <ExFatFile::openNext(ExFatFile*, int)>
    7c9a:	cmp	r0, #0
    7c9c:	bne.n	7c70 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    7c9e:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    7ca0:	pop	{r3, r4, r5, r6, r7, pc}
    7ca2:	nop

00007ca4 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7ca4:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7ca6:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    7ca8:	mov	r5, r0
  m_blockDev = blockDev;
    7caa:	str.w	r1, [r0, #1152]	; 0x480
  m_fVol = nullptr;
    7cae:	str.w	r6, [r0, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    7cb2:	mov	r1, r0
    7cb4:	mov.w	r0, #1144	; 0x478
    7cb8:	bl	7d90 <operator new(unsigned int, unsigned long*)>
    7cbc:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7cbe:	str	r6, [r0, #4]
    invalidate();
    7cc0:	bl	4748 <FsCache::invalidate()>
    7cc4:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    7cc8:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    7ccc:	bl	4748 <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    7cd0:	strb.w	r6, [r4, #1084]	; 0x43c
    7cd4:	strb.w	r6, [r4, #1137]	; 0x471
    7cd8:	strb.w	r6, [r4, #1138]	; 0x472
    7cdc:	strb.w	r6, [r4, #1139]	; 0x473
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7ce0:	ldr.w	r1, [r5, #1152]	; 0x480
    7ce4:	str.w	r4, [r5, #1148]	; 0x47c
    7ce8:	mov	r0, r4
    7cea:	movs	r2, #1
    7cec:	bl	48a4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    7cf0:	cbnz	r0, 7d2e <FsVolume::begin(BlockDeviceInterface*)+0x8a>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7cf2:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    7cf4:	mov	r1, r5
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    7cf6:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    7cfa:	movw	r0, #1124	; 0x464
    7cfe:	bl	7d90 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    7d02:	strb	r6, [r0, #7]
    7d04:	strb.w	r6, [r0, #1088]	; 0x440
    7d08:	strb.w	r6, [r0, #1089]	; 0x441
    7d0c:	strb.w	r6, [r0, #1090]	; 0x442
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7d10:	movs	r2, #1
    7d12:	ldr.w	r1, [r5, #1152]	; 0x480
    7d16:	str.w	r0, [r5, #1144]	; 0x478
    7d1a:	mov	r4, r0
    7d1c:	bl	6dc8 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    7d20:	cbnz	r0, 7d4c <FsVolume::begin(BlockDeviceInterface*)+0xa8>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    7d22:	ldr	r3, [pc, #64]	; (7d64 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
    7d24:	movs	r0, #0
    7d26:	str	r0, [r3, #0]
  m_fVol = nullptr;
    7d28:	str.w	r0, [r5, #1144]	; 0x478
  return false;
    7d2c:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7d2e:	add.w	r6, r4, #1088	; 0x440
    7d32:	mov	r0, r6
    7d34:	bl	3c54 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7d38:	mov	r1, r4
    7d3a:	mov	r0, r6
    7d3c:	bl	3d28 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7d40:	cmp	r0, #0
    7d42:	beq.n	7cf2 <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    7d44:	ldr	r3, [pc, #28]	; (7d64 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    7d46:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    7d48:	str	r5, [r3, #0]
  return true;
    7d4a:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7d4c:	add.w	r6, r4, #1088	; 0x440
    7d50:	mov	r0, r6
    7d52:	bl	5b88 <FatFile::close()>
    return m_vwd.openRoot(this);
    7d56:	mov	r1, r4
    7d58:	mov	r0, r6
    7d5a:	bl	5ba8 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    7d5e:	cmp	r0, #0
    7d60:	bne.n	7d44 <FsVolume::begin(BlockDeviceInterface*)+0xa0>
    7d62:	b.n	7d22 <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    7d64:	.word	0x1fff1ba8

00007d68 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7d68:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7d6a:	movs	r5, #0
    7d6c:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7d70:	ldr	r6, [pc, #24]	; (7d8c <FsVolume::open(char const*, int)+0x24>)
    7d72:	str	r7, [r0, #8]
    7d74:	mov	r4, r0
    7d76:	strb	r5, [r0, #4]
    7d78:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    7d7a:	str	r5, [r0, #72]	; 0x48
    7d7c:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7d7e:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7d82:	bl	7bc4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7d86:	mov	r0, r4
    7d88:	pop	{r3, r4, r5, r6, r7, pc}
    7d8a:	nop
    7d8c:	.word	0x0000fde4

00007d90 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7d90:	mov	r0, r1
    7d92:	bx	lr

00007d94 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    7d94:	ldrb	r0, [r0, #19]
    7d96:	bx	lr

00007d98 <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    7d98:	ldrb	r0, [r0, #21]
    7d9a:	bx	lr

00007d9c <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    7d9c:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7d9e:	ldr	r4, [r0, #0]
    7da0:	ldr	r4, [r4, #12]
    7da2:	movs	r3, #1
    7da4:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    7da6:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    7daa:	bx	ip

00007dac <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    7dac:	ldrb	r0, [r0, #22]
    7dae:	bx	lr

00007db0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    7db0:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7db2:	ldr	r4, [r0, #0]
    7db4:	ldr	r4, [r4, #28]
    7db6:	movs	r3, #1
    7db8:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    7dba:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    7dbe:	bx	ip

00007dc0 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    7dc0:	bx	lr
    7dc2:	nop

00007dc4 <SdSpiCard::~SdSpiCard()>:
    7dc4:	push	{r4, lr}
    7dc6:	movs	r1, #24
    7dc8:	mov	r4, r0
    7dca:	bl	ad94 <operator delete(void*, unsigned int)>
    7dce:	mov	r0, r4
    7dd0:	pop	{r4, pc}
    7dd2:	nop

00007dd4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7dd4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7dd8:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7dda:	ldrb	r1, [r0, #16]
    7ddc:	cmp	r1, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    7dde:	mov	r4, r0
    7de0:	mov	r5, r2
    7de2:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7de4:	beq.n	7df6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    7de6:	ldr	r3, [r4, #0]
    7de8:	mov	r0, r4
    7dea:	ldr	r3, [r3, #20]
    7dec:	blx	r3
    7dee:	cbnz	r0, 7e28 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    7df0:	movs	r0, #0
    7df2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    7df6:	ldr	r3, [r0, #12]
    7df8:	cmp	r3, r6
    7dfa:	bne.n	7de6 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7dfc:	movs	r6, #0
    7dfe:	cbz	r7, 7e18 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    7e00:	ldr	r3, [r4, #0]
    7e02:	mov	r1, r5
    7e04:	ldr	r3, [r3, #68]	; 0x44
    7e06:	mov	r0, r4
    7e08:	blx	r3
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7e0a:	adds	r6, #1
    7e0c:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    7e10:	cmp	r0, #0
    7e12:	beq.n	7df0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    7e14:	cmp	r7, r6
    7e16:	bne.n	7e00 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7e18:	ldr	r3, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7e1a:	ldrb	r2, [r4, #17]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    7e1c:	add	r7, r3
    7e1e:	str	r7, [r4, #12]
  return m_sharedSpi ? syncDevice() : true;
    7e20:	cbnz	r2, 7e3e <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    7e22:	movs	r0, #1
    7e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    7e28:	ldr	r3, [r4, #0]
    7e2a:	mov	r1, r6
    7e2c:	ldr	r3, [r3, #72]	; 0x48
    7e2e:	mov	r0, r4
    7e30:	blx	r3
    7e32:	cmp	r0, #0
    7e34:	beq.n	7df0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    7e36:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    7e38:	str	r6, [r4, #12]
    m_curState = WRITE_STATE;
    7e3a:	strb	r3, [r4, #16]
    7e3c:	b.n	7dfc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7e3e:	ldr	r3, [r4, #0]
    7e40:	mov	r0, r4
    7e42:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    7e44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    7e48:	bx	r3
    7e4a:	nop

00007e4c <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    7e4c:	push	{r4, lr}
    7e4e:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    7e50:	adds	r0, #4
    7e52:	bl	93fc <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    7e56:	ldrb	r0, [r4, #18]
    7e58:	movs	r1, #0
    7e5a:	bl	957c <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    7e5e:	movs	r3, #1
    7e60:	strb	r3, [r4, #20]
    7e62:	pop	{r4, pc}

00007e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    7e64:	push	{r3, r4, r5, lr}
    7e66:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7e68:	movs	r1, #1
    7e6a:	ldrb	r0, [r0, #18]
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7e6c:	adds	r5, r4, #4
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    7e6e:	bl	957c <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7e72:	mov	r0, r5
    7e74:	movs	r1, #255	; 0xff
    7e76:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    7e7a:	mov	r0, r5
    7e7c:	bl	948c <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    7e80:	movs	r3, #0
    7e82:	strb	r3, [r4, #20]
    7e84:	pop	{r3, r4, r5, pc}
    7e86:	nop

00007e88 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7e88:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    7e8a:	ldrb	r7, [r0, #20]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7e8c:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    7e8e:	cbnz	r7, 7e94 <SdSpiCard::isBusy()+0xc>
    7e90:	bl	7e4c <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    7e94:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    7e96:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7e98:	mov	r0, r5
    7e9a:	bl	94d4 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    7e9e:	cmp	r0, #255	; 0xff
    7ea0:	add.w	r3, r4, #4294967295
    7ea4:	beq.n	7ec2 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    7ea6:	ands.w	r4, r3, #255	; 0xff
    7eaa:	bne.n	7e98 <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    7eac:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    7eae:	cbnz	r7, 7eb4 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7eb0:	ldrb	r3, [r6, #20]
    7eb2:	cbnz	r3, 7eb8 <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    7eb4:	mov	r0, r4
    7eb6:	pop	{r3, r4, r5, r6, r7, pc}
    7eb8:	mov	r0, r6
    7eba:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    7ebe:	mov	r0, r4
    7ec0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    7ec2:	movs	r4, #0
    7ec4:	b.n	7eae <SdSpiCard::isBusy()+0x26>
    7ec6:	nop

00007ec8 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    7ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ecc:	ldr	r6, [pc, #116]	; (7f44 <SdSpiCard::readData(unsigned char*, unsigned int)+0x7c>)
    7ece:	sub	sp, #12
    7ed0:	ldr	r3, [r6, #0]
    7ed2:	str	r3, [sp, #0]
	return ret;
    7ed4:	ldr	r5, [sp, #0]
    7ed6:	mov	r4, r0
    7ed8:	mov	r8, r1
    7eda:	mov	r9, r2

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    7edc:	uxth	r5, r5
    7ede:	adds	r7, r0, #4
    7ee0:	b.n	7ef2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x2a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ee2:	ldr	r3, [r6, #0]
    7ee4:	str	r3, [sp, #4]
	return ret;
    7ee6:	ldr	r3, [sp, #4]
    7ee8:	uxth	r3, r3
    7eea:	subs	r3, r3, r5
    7eec:	cmp.w	r3, #300	; 0x12c
    7ef0:	bgt.n	7f18 <SdSpiCard::readData(unsigned char*, unsigned int)+0x50>
    7ef2:	mov	r0, r7
    7ef4:	bl	94d4 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    7ef8:	cmp	r0, #255	; 0xff
    7efa:	strb	r0, [r4, #21]
    7efc:	beq.n	7ee2 <SdSpiCard::readData(unsigned char*, unsigned int)+0x1a>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    7efe:	cmp	r0, #254	; 0xfe
    7f00:	beq.n	7f1e <SdSpiCard::readData(unsigned char*, unsigned int)+0x56>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7f02:	movs	r3, #24
    7f04:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    7f06:	ldrb	r0, [r4, #20]
    7f08:	cbz	r0, 7f12 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7f0a:	mov	r0, r4
    7f0c:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    7f10:	movs	r0, #0
}
    7f12:	add	sp, #12
    7f14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7f18:	movs	r3, #29
    7f1a:	strb	r3, [r4, #19]
    7f1c:	b.n	7f06 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    7f1e:	mov	r2, r9
    7f20:	mov	r1, r8
    7f22:	mov	r0, r7
    7f24:	bl	94f0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    7f28:	strb	r0, [r4, #21]
    7f2a:	cbz	r0, 7f32 <SdSpiCard::readData(unsigned char*, unsigned int)+0x6a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    7f2c:	movs	r3, #36	; 0x24
    7f2e:	strb	r3, [r4, #19]
    7f30:	b.n	7f06 <SdSpiCard::readData(unsigned char*, unsigned int)+0x3e>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7f32:	mov	r0, r7
    7f34:	bl	94d4 <SdSpiArduinoDriver::receive()>
    7f38:	mov	r0, r7
    7f3a:	bl	94d4 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    7f3e:	movs	r0, #1
    7f40:	b.n	7f12 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
    7f42:	nop
    7f44:	.word	0x1fff1c08

00007f48 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    7f48:	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f4a:	ldr	r5, [pc, #52]	; (7f80 <SdSpiCard::waitNotBusy(unsigned short)+0x38>)
    7f4c:	sub	sp, #12
    7f4e:	ldr	r3, [r5, #0]
    7f50:	str	r3, [sp, #0]
	return ret;
    7f52:	ldr	r4, [sp, #0]
    7f54:	mov	r7, r1
    7f56:	adds	r6, r0, #4
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    7f58:	uxth	r4, r4
    7f5a:	b.n	7f6a <SdSpiCard::waitNotBusy(unsigned short)+0x22>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f5c:	ldr	r3, [r5, #0]
    7f5e:	str	r3, [sp, #4]
	return ret;
    7f60:	ldr	r3, [sp, #4]
    7f62:	uxth	r3, r3
    7f64:	subs	r3, r3, r4
    7f66:	cmp	r3, r7
    7f68:	bgt.n	7f7a <SdSpiCard::waitNotBusy(unsigned short)+0x32>
    7f6a:	mov	r0, r6
    7f6c:	bl	94d4 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    7f70:	cmp	r0, #255	; 0xff
    7f72:	bne.n	7f5c <SdSpiCard::waitNotBusy(unsigned short)+0x14>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    7f74:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    7f76:	add	sp, #12
    7f78:	pop	{r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    7f7a:	movs	r0, #0
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
    7f7c:	add	sp, #12
    7f7e:	pop	{r4, r5, r6, r7, pc}
    7f80:	.word	0x1fff1c08

00007f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7f84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    7f88:	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7f8a:	sub	sp, #8
    7f8c:	mov	r6, r0
    7f8e:	mov	r8, r1
    7f90:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    7f92:	cbnz	r3, 7f98 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    7f94:	bl	7e4c <SdSpiCard::spiStart() [clone .part.7] [clone .constprop.24]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    7f98:	cmp.w	r8, #0
    7f9c:	bne.n	7ff4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x70>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    7f9e:	adds	r4, r6, #4
    7fa0:	mov	r0, r4
    7fa2:	orr.w	r1, r8, #64	; 0x40
    7fa6:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
    7faa:	add	r7, sp, #4
    7fac:	add	r5, sp, #8
    7fae:	ldrb.w	r1, [r5, #-1]!
    7fb2:	mov	r0, r4
    7fb4:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    7fb8:	cmp	r5, r7
    7fba:	bne.n	7fae <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7fbc:	cmp.w	r8, #0
    7fc0:	ite	eq
    7fc2:	moveq	r1, #149	; 0x95
    7fc4:	movne	r1, #135	; 0x87
    7fc6:	mov	r0, r4
    7fc8:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    7fcc:	mov	r0, r4
    7fce:	bl	94d4 <SdSpiArduinoDriver::receive()>
    7fd2:	movs	r5, #11
    7fd4:	mov	r0, r4
    7fd6:	bl	94d4 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7fda:	lsls	r3, r0, #24
    7fdc:	strb	r0, [r6, #21]
    7fde:	bmi.n	7fe6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x62>
  }
  return m_status;
}
    7fe0:	add	sp, #8
    7fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fe6:	subs	r3, r5, #1

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    7fe8:	ands.w	r5, r3, #255	; 0xff
    7fec:	bne.n	7fd4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
  }
  return m_status;
}
    7fee:	add	sp, #8
    7ff0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    7ff4:	mov.w	r1, #300	; 0x12c
    7ff8:	mov	r0, r6
    7ffa:	bl	7f48 <SdSpiCard::waitNotBusy(unsigned short)>
    7ffe:	b.n	7f9e <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00008000 <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8000:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    8002:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8004:	mov	r5, r0
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    8006:	ldr	r3, [r3, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8008:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    800a:	blx	r3
  if (cardCommand(CMD58, 0)) {
    800c:	mov	r0, r5
    800e:	movs	r2, #0
    8010:	movs	r1, #58	; 0x3a
    8012:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8016:	cbnz	r0, 8034 <SdSpiCard::readOCR(unsigned long*)+0x34>
    8018:	adds	r7, r5, #4
    801a:	adds	r4, r6, #4
    801c:	mov	r0, r7
    801e:	bl	94d4 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    8022:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    8026:	cmp	r6, r4
    8028:	bne.n	801c <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    802a:	ldrb	r4, [r5, #20]
    802c:	cbnz	r4, 804a <SdSpiCard::readOCR(unsigned long*)+0x4a>
    802e:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    8030:	mov	r0, r4
    8032:	pop	{r3, r4, r5, r6, r7, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8034:	ldrb	r4, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8036:	movs	r3, #18
    8038:	strb	r3, [r5, #19]
    803a:	cmp	r4, #0
    803c:	beq.n	8030 <SdSpiCard::readOCR(unsigned long*)+0x30>
    803e:	mov	r0, r5
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    8040:	movs	r4, #0
    8042:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8046:	mov	r0, r4
    8048:	pop	{r3, r4, r5, r6, r7, pc}
    804a:	mov	r0, r5
    804c:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8050:	mov	r0, r4
    8052:	pop	{r3, r4, r5, r6, r7, pc}

00008054 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8054:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    8056:	push	{r4, r5, r6, lr}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8058:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    805a:	mov	r4, r0
    805c:	mov	r5, r1
    805e:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    8060:	blx	r3
  if (cardCommand(cmd, 0)) {
    8062:	mov	r1, r5
    8064:	mov	r0, r4
    8066:	movs	r2, #0
    8068:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    806c:	cbz	r0, 8080 <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    806e:	movs	r3, #27
    8070:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8072:	ldrb	r0, [r4, #20]
    8074:	cbz	r0, 807e <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8076:	mov	r0, r4
    8078:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    807c:	movs	r0, #0
}
    807e:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    8080:	mov	r1, r6
    8082:	movs	r2, #16
    8084:	mov	r0, r4
    8086:	bl	7ec8 <SdSpiCard::readData(unsigned char*, unsigned int)>
    808a:	cmp	r0, #0
    808c:	beq.n	8072 <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    808e:	ldrb	r5, [r4, #20]
    8090:	cmp	r5, #0
    8092:	beq.n	807e <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    8094:	mov	r0, r4
    8096:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    809a:	mov	r0, r5
    809c:	pop	{r4, r5, r6, pc}
    809e:	nop

000080a0 <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    80a0:	mov	r2, r1
    80a2:	movs	r1, #9
    80a4:	b.w	8054 <SdSpiCard::readRegister(unsigned char, void*)>

000080a8 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    80a8:	mov	r2, r1
    80aa:	movs	r1, #10
    80ac:	b.w	8054 <SdSpiCard::readRegister(unsigned char, void*)>

000080b0 <SdSpiCard::sectorCount()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    80b0:	push	{r4, r5, lr}
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    80b2:	ldr	r3, [r0, #0]
    80b4:	ldr	r2, [pc, #140]	; (8144 <SdSpiCard::sectorCount()+0x94>)
    80b6:	ldr	r3, [r3, #52]	; 0x34
    80b8:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    80ba:	sub	sp, #20
    80bc:	bne.n	811e <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    80be:	mov	r2, sp
    80c0:	movs	r1, #9
    80c2:	bl	8054 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    80c6:	cbz	r0, 80d8 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    80c8:	ldrb.w	r3, [sp]
    80cc:	ands.w	r3, r3, #192	; 0xc0
    80d0:	beq.n	80dc <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    80d2:	cmp	r3, #64	; 0x40
    80d4:	beq.n	8124 <SdSpiCard::sectorCount()+0x74>
    80d6:	movs	r0, #0
}
    80d8:	add	sp, #20
    80da:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    80dc:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    80e0:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    80e4:	ldrb.w	r2, [sp, #7]
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    80e8:	ldrb.w	r0, [sp, #10]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    80ec:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    80f0:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    80f4:	and.w	r4, r4, #3
    80f8:	lsls	r4, r4, #1
    80fa:	lsls	r2, r2, #2
    80fc:	and.w	r3, r3, #3
    8100:	orr.w	r0, r4, r0, lsr #7
    8104:	and.w	r1, r1, #15
    8108:	orr.w	r3, r2, r3, lsl #10
    810c:	add	r0, r1
    810e:	orr.w	r3, r3, r5, lsr #6
    8112:	adds	r3, #1
    8114:	subs	r0, #7
    8116:	lsl.w	r0, r3, r0
    811a:	add	sp, #20
    811c:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    811e:	mov	r1, sp
    8120:	blx	r3
    8122:	b.n	80c6 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8124:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8128:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    812c:	ldrb.w	r0, [sp, #8]
    8130:	adds	r2, r3, #1
    8132:	and.w	r3, r1, #63	; 0x3f
    8136:	add.w	r3, r2, r3, lsl #16
    813a:	add.w	r0, r3, r0, lsl #8
    813e:	lsls	r0, r0, #10
}
    8140:	add	sp, #20
    8142:	pop	{r4, r5, pc}
    8144:	.word	0x000080a1

00008148 <SdSpiCard::readStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8148:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    814a:	ldr	r3, [r0, #0]
    814c:	ldr	r5, [pc, #68]	; (8194 <SdSpiCard::readStart(unsigned long)+0x4c>)
    814e:	ldr	r3, [r3, #64]	; 0x40
    8150:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8152:	sub	sp, #12
    8154:	mov	r4, r0
    8156:	mov	r2, r1
    8158:	bne.n	818a <SdSpiCard::readStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    815a:	ldrb	r0, [r0, #22]
  if (type() != SD_CARD_TYPE_SDHC) {
    815c:	cmp	r0, #3
    sector <<= 9;
    815e:	it	ne
    8160:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    8162:	movs	r1, #18
    8164:	mov	r0, r4
    8166:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    816a:	cbz	r0, 8184 <SdSpiCard::readStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    816c:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    816e:	movs	r3, #12
    8170:	strb	r3, [r4, #19]
    8172:	cbnz	r0, 8178 <SdSpiCard::readStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8174:	add	sp, #12
    8176:	pop	{r4, r5, pc}
    8178:	mov	r0, r4
    817a:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    817e:	movs	r0, #0
    8180:	add	sp, #12
    8182:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    8184:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8186:	add	sp, #12
    8188:	pop	{r4, r5, pc}
    818a:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    818c:	blx	r3
    818e:	ldr	r2, [sp, #4]
    8190:	b.n	815c <SdSpiCard::readStart(unsigned long)+0x14>
    8192:	nop
    8194:	.word	0x00007dad

00008198 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    8198:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    819c:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    819e:	ldrb	r1, [r0, #16]
    81a0:	cmp	r1, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    81a2:	mov	r6, r0
    81a4:	mov	r4, r2
    81a6:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    81a8:	beq.n	81ba <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    81aa:	ldr	r3, [r6, #0]
    81ac:	mov	r0, r6
    81ae:	ldr	r3, [r3, #20]
    81b0:	blx	r3
    81b2:	cbnz	r0, 81ee <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
      return false;
    81b4:	movs	r0, #0
    81b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    81ba:	ldr	r3, [r0, #12]
    81bc:	cmp	r3, r5
    81be:	bne.n	81aa <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    81c0:	movs	r5, #0
    81c2:	cbz	r7, 81de <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readData(dst, 512)) {
    81c4:	mov	r1, r4
    81c6:	mov.w	r2, #512	; 0x200
    81ca:	mov	r0, r6
    81cc:	bl	7ec8 <SdSpiCard::readData(unsigned char*, unsigned int)>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    81d0:	adds	r5, #1
    81d2:	add.w	r4, r4, #512	; 0x200
    if (!readData(dst, 512)) {
    81d6:	cmp	r0, #0
    81d8:	beq.n	81b4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    81da:	cmp	r7, r5
    81dc:	bne.n	81c4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    81de:	ldr	r3, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    81e0:	ldrb	r2, [r6, #17]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    81e2:	add	r7, r3
    81e4:	str	r7, [r6, #12]
  return m_sharedSpi ? syncDevice() : true;
    81e6:	cbnz	r2, 8202 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x6a>
    81e8:	movs	r0, #1
    81ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    81ee:	mov	r1, r5
    81f0:	mov	r0, r6
    81f2:	bl	8148 <SdSpiCard::readStart(unsigned long)>
    81f6:	cmp	r0, #0
    81f8:	beq.n	81b4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    81fa:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    81fc:	str	r5, [r6, #12]
    m_curState = READ_STATE;
    81fe:	strb	r3, [r6, #16]
    8200:	b.n	81c0 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    8202:	ldr	r3, [r6, #0]
    8204:	mov	r0, r6
    8206:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    8208:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    820c:	bx	r3
    820e:	nop

00008210 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8210:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    8212:	movs	r2, #0
    8214:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8216:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8218:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    821c:	ldrb	r4, [r5, #20]
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    821e:	cbz	r0, 822a <SdSpiCard::readStop()+0x1a>
    8220:	movs	r3, #9
    8222:	strb	r3, [r5, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8224:	cbnz	r4, 823c <SdSpiCard::readStop()+0x2c>
  return true;

fail:
  spiStop();
  return false;
}
    8226:	mov	r0, r4
    8228:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    822a:	cbnz	r4, 8232 <SdSpiCard::readStop()+0x22>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    822c:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    822e:	mov	r0, r4
    8230:	pop	{r3, r4, r5, pc}
    8232:	mov	r0, r5
    8234:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8238:	mov	r0, r4
    823a:	pop	{r3, r4, r5, pc}
    823c:	mov	r0, r5
    823e:	movs	r4, #0
    8240:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8244:	mov	r0, r4
    8246:	pop	{r3, r4, r5, pc}

00008248 <SdSpiCard::writeStart(unsigned long)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8248:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    824a:	ldr	r3, [r0, #0]
    824c:	ldr	r5, [pc, #68]	; (8294 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    824e:	ldr	r3, [r3, #64]	; 0x40
    8250:	cmp	r3, r5
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    8252:	sub	sp, #12
    8254:	mov	r4, r0
    8256:	mov	r2, r1
    8258:	bne.n	828a <SdSpiCard::writeStart(unsigned long)+0x42>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    825a:	ldrb	r0, [r0, #22]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    825c:	cmp	r0, #3
    sector <<= 9;
    825e:	it	ne
    8260:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    8262:	movs	r1, #25
    8264:	mov	r0, r4
    8266:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    826a:	cbz	r0, 8284 <SdSpiCard::writeStart(unsigned long)+0x3c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    826c:	ldrb	r0, [r4, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    826e:	movs	r3, #14
    8270:	strb	r3, [r4, #19]
    8272:	cbnz	r0, 8278 <SdSpiCard::writeStart(unsigned long)+0x30>
  return true;

fail:
  spiStop();
  return false;
}
    8274:	add	sp, #12
    8276:	pop	{r4, r5, pc}
    8278:	mov	r0, r4
    827a:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    827e:	movs	r0, #0
    8280:	add	sp, #12
    8282:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    8284:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8286:	add	sp, #12
    8288:	pop	{r4, r5, pc}
    828a:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    828c:	blx	r3
    828e:	ldr	r2, [sp, #4]
    8290:	b.n	825c <SdSpiCard::writeStart(unsigned long)+0x14>
    8292:	nop
    8294:	.word	0x00007dad

00008298 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8298:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    829a:	ldr	r3, [r0, #0]
    829c:	ldr	r7, [pc, #172]	; (834c <SdSpiCard::erase(unsigned long, unsigned long)+0xb4>)
    829e:	ldr	r3, [r3, #52]	; 0x34
    82a0:	cmp	r3, r7
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    82a2:	sub	sp, #20
    82a4:	mov	r4, r0
    82a6:	mov	r5, r1
    82a8:	mov	r6, r2
    82aa:	bne.n	8308 <SdSpiCard::erase(unsigned long, unsigned long)+0x70>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    82ac:	mov	r2, sp
    82ae:	movs	r1, #9
    82b0:	bl	8054 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    82b4:	cbz	r0, 82dc <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    82b6:	ldrb.w	r3, [sp, #10]
    82ba:	lsls	r2, r3, #25
    82bc:	bpl.n	82ec <SdSpiCard::erase(unsigned long, unsigned long)+0x54>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    82be:	ldrb	r3, [r4, #22]
    82c0:	cmp	r3, #3
    firstSector <<= 9;
    82c2:	it	ne
    82c4:	lslne	r5, r5, #9
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
    82c6:	mov	r2, r5
    82c8:	mov.w	r1, #32
    82cc:	mov	r0, r4
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
    82ce:	it	ne
    82d0:	lslne	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    82d2:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    82d6:	cbz	r0, 830e <SdSpiCard::erase(unsigned long, unsigned long)+0x76>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    82d8:	movs	r3, #37	; 0x25
    82da:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    82dc:	ldrb	r0, [r4, #20]
    82de:	cbz	r0, 82e8 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    82e0:	mov	r0, r4
    82e2:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    82e6:	movs	r0, #0
}
    82e8:	add	sp, #20
    82ea:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82ec:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    82f0:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    82f4:	lsls	r3, r3, #1
    82f6:	adds	r2, r6, #1
    82f8:	orr.w	r3, r3, r1, lsr #7
    82fc:	orrs	r2, r5
    82fe:	tst	r3, r2
    8300:	beq.n	82be <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    8302:	movs	r3, #38	; 0x26
    8304:	strb	r3, [r4, #19]
    8306:	b.n	82dc <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    8308:	mov	r1, sp
    830a:	blx	r3
    830c:	b.n	82b4 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    830e:	mov	r2, r6
    8310:	movs	r1, #33	; 0x21
    8312:	mov	r0, r4
    8314:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8318:	cmp	r0, #0
    831a:	bne.n	82d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
      || cardCommand(CMD38, 0)) {
    831c:	mov	r2, r0
    831e:	movs	r1, #38	; 0x26
    8320:	mov	r0, r4
    8322:	bl	7f84 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8326:	cmp	r0, #0
    8328:	bne.n	82d8 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    832a:	movw	r1, #10000	; 0x2710
    832e:	mov	r0, r4
    8330:	bl	7f48 <SdSpiCard::waitNotBusy(unsigned short)>
    8334:	cbnz	r0, 833c <SdSpiCard::erase(unsigned long, unsigned long)+0xa4>
    8336:	movs	r3, #39	; 0x27
    8338:	strb	r3, [r4, #19]
    833a:	b.n	82dc <SdSpiCard::erase(unsigned long, unsigned long)+0x44>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    833c:	ldrb	r5, [r4, #20]
    833e:	cmp	r5, #0
    8340:	beq.n	82e8 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    8342:	mov	r0, r4
    8344:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    8348:	mov	r0, r5
    834a:	b.n	82e8 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
    834c:	.word	0x000080a1

00008350 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8350:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8352:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    8356:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8358:	bl	7f48 <SdSpiCard::waitNotBusy(unsigned short)>
    835c:	mov	r6, r0
    835e:	cbnz	r0, 8378 <SdSpiCard::writeStop()+0x28>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8360:	ldrb	r4, [r5, #20]
    8362:	movs	r3, #30
    8364:	strb	r3, [r5, #19]
    8366:	cbnz	r4, 836c <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8368:	mov	r0, r4
    836a:	pop	{r4, r5, r6, pc}
    836c:	mov	r0, r5
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    836e:	mov	r4, r6
    8370:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
}
    8374:	mov	r0, r4
    8376:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8378:	movs	r1, #253	; 0xfd
    837a:	adds	r0, r5, #4
    837c:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8380:	ldrb	r4, [r5, #20]
    8382:	cbnz	r4, 838a <SdSpiCard::writeStop()+0x3a>
    8384:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    8386:	mov	r0, r4
    8388:	pop	{r4, r5, r6, pc}
    838a:	mov	r0, r5
    838c:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
    8390:	b.n	8368 <SdSpiCard::writeStop()+0x18>
    8392:	nop

00008394 <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    8394:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    8396:	ldrb	r3, [r0, #16]
    8398:	cmp	r3, #1
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    839a:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    839c:	beq.n	83aa <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    839e:	cmp	r3, #2
    83a0:	beq.n	83b6 <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    83a2:	movs	r3, #0
    83a4:	strb	r3, [r4, #16]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    83a6:	movs	r0, #1
    83a8:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    83aa:	bl	8210 <SdSpiCard::readStop()>
    83ae:	cmp	r0, #0
    83b0:	bne.n	83a2 <SdSpiCard::syncDevice()+0xe>
      return false;
    83b2:	movs	r0, #0
    83b4:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    83b6:	bl	8350 <SdSpiCard::writeStop()>
    83ba:	cmp	r0, #0
    83bc:	bne.n	83a2 <SdSpiCard::syncDevice()+0xe>
    83be:	b.n	83b2 <SdSpiCard::syncDevice()+0x1e>

000083c0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    83c0:	push	{r4, r5, r6, lr}
    83c2:	adds	r4, r0, #4
    83c4:	mov	r6, r2
    83c6:	mov	r5, r0
    83c8:	mov	r0, r4
    83ca:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    83ce:	mov.w	r2, #512	; 0x200
    83d2:	mov	r1, r6
    83d4:	mov	r0, r4
    83d6:	bl	9528 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    83da:	mov	r0, r4
    83dc:	movs	r1, #255	; 0xff
    83de:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
    83e2:	mov	r0, r4
    83e4:	movs	r1, #255	; 0xff
    83e6:	bl	9510 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    83ea:	mov	r0, r4
    83ec:	bl	94d4 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    83f0:	and.w	r3, r0, #31
    83f4:	cmp	r3, #5
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    83f6:	strb	r0, [r5, #21]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    83f8:	beq.n	840e <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83fa:	ldrb	r0, [r5, #20]
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    83fc:	movs	r3, #31
    83fe:	strb	r3, [r5, #19]
    8400:	cbnz	r0, 8404 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    8402:	pop	{r4, r5, r6, pc}
    8404:	mov	r0, r5
    8406:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    840a:	movs	r0, #0
    840c:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    840e:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    8410:	pop	{r4, r5, r6, pc}
    8412:	nop

00008414 <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8414:	push	{r3, r4, r5, lr}
    8416:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8418:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    841c:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    841e:	bl	7f48 <SdSpiCard::waitNotBusy(unsigned short)>
    8422:	cbnz	r0, 8436 <SdSpiCard::writeData(unsigned char const*)+0x22>
    8424:	movs	r3, #35	; 0x23
    8426:	strb	r3, [r4, #19]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8428:	ldrb	r0, [r4, #20]
    842a:	cbz	r0, 8434 <SdSpiCard::writeData(unsigned char const*)+0x20>
    842c:	mov	r0, r4
    842e:	bl	7e64 <SdSpiCard::spiStop() [clone .part.8] [clone .constprop.27]>
  }
  return true;

fail:
  spiStop();
  return false;
    8432:	movs	r0, #0
}
    8434:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8436:	mov	r2, r5
    8438:	movs	r1, #252	; 0xfc
    843a:	mov	r0, r4
    843c:	bl	83c0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    8440:	cmp	r0, #0
    8442:	beq.n	8428 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    8444:	pop	{r3, r4, r5, pc}
    8446:	nop

00008448 <sdIrs()>:
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    8448:	push	{r4}
  SDHC_IRQSIGEN = 0;
    844a:	ldr	r4, [pc, #28]	; (8468 <sdIrs()+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    844c:	ldr	r2, [pc, #28]	; (846c <sdIrs()+0x24>)
    844e:	ldr	r1, [pc, #32]	; (8470 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8450:	ldr	r0, [pc, #32]	; (8474 <sdIrs()+0x2c>)
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8452:	movs	r3, #0
    8454:	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    8456:	ldr	r4, [r2, #0]
    8458:	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    845a:	ldr	r1, [r1, #0]
    845c:	str	r1, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    845e:	ldr.w	r4, [sp], #4
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    8462:	strb	r3, [r0, #0]
}
    8464:	bx	lr
    8466:	nop
    8468:	.word	0x400b1038
    846c:	.word	0x400b1030
    8470:	.word	0x1fff1bd0
    8474:	.word	0x1fff1be8

00008478 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8478:	ldr	r3, [pc, #12]	; (8488 <isBusyCommandComplete()+0x10>)
    847a:	ldr	r0, [pc, #16]	; (848c <isBusyCommandComplete()+0x14>)
    847c:	ldr	r3, [r3, #0]
    847e:	ands	r0, r3
}
    8480:	clz	r0, r0
    8484:	lsrs	r0, r0, #5
    8486:	bx	lr
    8488:	.word	0x400b1030
    848c:	.word	0x000f0001

00008490 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8490:	ldr	r3, [pc, #8]	; (849c <isBusyCommandInhibit()+0xc>)
    8492:	ldr	r0, [r3, #0]
}
    8494:	and.w	r0, r0, #1
    8498:	bx	lr
    849a:	nop
    849c:	.word	0x400b1024

000084a0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    84a0:	ldr	r3, [pc, #4]	; (84a8 <isBusyDMA()+0x8>)
    84a2:	ldrb	r0, [r3, #0]
}
    84a4:	bx	lr
    84a6:	nop
    84a8:	.word	0x1fff1be8

000084ac <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    84ac:	ldr	r3, [pc, #12]	; (84bc <isBusyFifoRead()+0x10>)
    84ae:	ldr	r0, [r3, #0]
    84b0:	eor.w	r0, r0, #2048	; 0x800
}
    84b4:	ubfx	r0, r0, #11, #1
    84b8:	bx	lr
    84ba:	nop
    84bc:	.word	0x400b1024

000084c0 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    84c0:	ldr	r3, [pc, #12]	; (84d0 <isBusyFifoWrite()+0x10>)
    84c2:	ldr	r0, [r3, #0]
    84c4:	eor.w	r0, r0, #1024	; 0x400
}
    84c8:	ubfx	r0, r0, #10, #1
    84cc:	bx	lr
    84ce:	nop
    84d0:	.word	0x400b1024

000084d4 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    84d4:	ldr	r3, [pc, #12]	; (84e4 <isBusyTransferComplete()+0x10>)
    84d6:	ldr	r0, [pc, #16]	; (84e8 <isBusyTransferComplete()+0x14>)
    84d8:	ldr	r3, [r3, #0]
    84da:	ands	r0, r3
}
    84dc:	clz	r0, r0
    84e0:	lsrs	r0, r0, #5
    84e2:	bx	lr
    84e4:	.word	0x400b1030
    84e8:	.word	0x117f0002

000084ec <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    84ec:	mov.w	r2, #1000	; 0x3e8
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    84f0:	ldr	r3, [pc, #176]	; (85a4 <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    84f2:	mul.w	r0, r2, r0
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    84f6:	cmp	r0, r3
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    84f8:	push	{r4, r5, r6, r7}
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    84fa:	bhi.n	8594 <setSdclk(unsigned long)+0xa8>
    84fc:	ldr	r5, [pc, #168]	; (85a8 <setSdclk(unsigned long)+0xbc>)
    84fe:	movs	r2, #8
    8500:	movs	r1, #1
    sdclkfs <<= 1;
    8502:	lsls	r1, r1, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8504:	lsls	r3, r1, #4
    8506:	udiv	r3, r5, r3
    850a:	cmp	r0, r3
    850c:	ldr	r4, [pc, #152]	; (85a8 <setSdclk(unsigned long)+0xbc>)
    850e:	bcs.n	858c <setSdclk(unsigned long)+0xa0>
    8510:	subs	r2, #1
    8512:	bne.n	8502 <setSdclk(unsigned long)+0x16>
    8514:	udiv	r4, r4, r1
    8518:	lsrs	r3, r1, #1
    851a:	lsls	r7, r3, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    851c:	cmp	r0, r4
    851e:	bcs.n	859c <setSdclk(unsigned long)+0xb0>
    8520:	ldr	r6, [pc, #132]	; (85a8 <setSdclk(unsigned long)+0xbc>)
    8522:	lsls	r3, r1, #1
    8524:	movs	r2, #1
    8526:	b.n	852a <setSdclk(unsigned long)+0x3e>
    8528:	mov	r3, r4
    852a:	udiv	r4, r6, r3
    852e:	cmp	r0, r4
    dvs++;
    8530:	add.w	r5, r2, #1
    8534:	add.w	r4, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8538:	bcs.n	8588 <setSdclk(unsigned long)+0x9c>
    853a:	cmp	r5, #16
    853c:	mov	r2, r5
    853e:	bne.n	8528 <setSdclk(unsigned long)+0x3c>
    8540:	movs	r2, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8542:	ldr	r6, [pc, #104]	; (85ac <setSdclk(unsigned long)+0xc0>)
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8544:	ldr	r4, [pc, #104]	; (85b0 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8546:	ldr	r0, [pc, #96]	; (85a8 <setSdclk(unsigned long)+0xbc>)

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8548:	ldr	r1, [pc, #104]	; (85b4 <setSdclk(unsigned long)+0xc8>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    854a:	mov.w	r5, #1000	; 0x3e8
    854e:	mul.w	r3, r5, r3
    8552:	udiv	r3, r0, r3
    8556:	str	r3, [r6, #0]
  sdclkfs >>= 1;
  dvs--;
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
    8558:	ldr	r3, [r4, #0]
    855a:	bic.w	r3, r3, #8
    855e:	str	r3, [r4, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8560:	ldr	r0, [r4, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8562:	bic.w	r3, r0, #1044480	; 0xff000
    8566:	bic.w	r3, r3, #4080	; 0xff0
    856a:	orr.w	r3, r3, #917504	; 0xe0000
    856e:	orrs	r3, r7
    8570:	orrs	r2, r3
    8572:	str	r2, [r4, #0]

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8574:	ldr	r3, [r1, #0]
    8576:	lsls	r3, r3, #28
    8578:	bpl.n	8574 <setSdclk(unsigned long)+0x88>
  }

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
    857a:	ldr	r2, [pc, #52]	; (85b0 <setSdclk(unsigned long)+0xc4>)
    857c:	ldr	r3, [r2, #0]
    857e:	orr.w	r3, r3, #8
    8582:	str	r3, [r2, #0]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8584:	pop	{r4, r5, r6, r7}
    8586:	bx	lr
    8588:	lsls	r2, r2, #4
    858a:	b.n	8542 <setSdclk(unsigned long)+0x56>
    858c:	udiv	r4, r4, r1
    8590:	lsls	r7, r1, #7
    8592:	b.n	851c <setSdclk(unsigned long)+0x30>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8594:	ldr	r4, [pc, #16]	; (85a8 <setSdclk(unsigned long)+0xbc>)
    8596:	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    8598:	movs	r1, #1
    859a:	b.n	851c <setSdclk(unsigned long)+0x30>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    859c:	mov	r3, r1
    859e:	movs	r2, #0
    85a0:	b.n	8542 <setSdclk(unsigned long)+0x56>
    85a2:	nop
    85a4:	.word	0x005b8d7f
    85a8:	.word	0x05b8d800
    85ac:	.word	0x1fff1bec
    85b0:	.word	0x400b102c
    85b4:	.word	0x400b1024

000085b8 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    85b8:	ldr	r3, [pc, #4]	; (85c0 <SdioCard::errorCode() const+0x8>)
}
    85ba:	ldrb	r0, [r3, #0]
    85bc:	bx	lr
    85be:	nop
    85c0:	.word	0x1fff097c

000085c4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    85c4:	ldr	r3, [pc, #4]	; (85cc <SdioCard::errorData() const+0x8>)
    85c6:	ldr	r0, [r3, #0]
}
    85c8:	bx	lr
    85ca:	nop
    85cc:	.word	0x1fff1bd0

000085d0 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    85d0:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    85d2:	ldr	r4, [pc, #20]	; (85e8 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    85d4:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    85d6:	ldmia	r4!, {r0, r1, r2, r3}
    85d8:	str	r0, [r5, #0]
    85da:	str	r1, [r5, #4]
    85dc:	str	r2, [r5, #8]
    85de:	str	r3, [r5, #12]
  return true;
}
    85e0:	movs	r0, #1
    85e2:	pop	{r4, r5}
    85e4:	bx	lr
    85e6:	nop
    85e8:	.word	0x1fff1bb0

000085ec <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    85ec:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    85ee:	ldr	r4, [pc, #20]	; (8604 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    85f0:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    85f2:	ldmia	r4!, {r0, r1, r2, r3}
    85f4:	str	r0, [r5, #0]
    85f6:	str	r1, [r5, #4]
    85f8:	str	r2, [r5, #8]
    85fa:	str	r3, [r5, #12]
  return true;
}
    85fc:	movs	r0, #1
    85fe:	pop	{r4, r5}
    8600:	bx	lr
    8602:	nop
    8604:	.word	0x1fff1bd8

00008608 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8608:	ldr	r3, [pc, #8]	; (8614 <SdioCard::readOCR(unsigned long*)+0xc>)
    860a:	ldr	r3, [r3, #0]
    860c:	str	r3, [r1, #0]
  return true;
}
    860e:	movs	r0, #1
    8610:	bx	lr
    8612:	nop
    8614:	.word	0x1fff1bc8

00008618 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    8618:	bx	lr
    861a:	nop

0000861c <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    861c:	push	{r3, r4, r5, r6, r7, lr}
    861e:	mov	r5, r0
  uint32_t m = micros();
    8620:	bl	9b2c <micros>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8624:	ldr	r7, [pc, #24]	; (8640 <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    8626:	mov	r6, r0
    8628:	b.n	8634 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    862a:	bl	9b2c <micros>
    862e:	subs	r0, r0, r6
    8630:	cmp	r0, r7
    8632:	bhi.n	863c <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    8634:	blx	r5
    8636:	mov	r4, r0
    8638:	cmp	r0, #0
    863a:	bne.n	862a <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    863c:	mov	r0, r4
    863e:	pop	{r3, r4, r5, r6, r7, pc}
    8640:	.word	0x000f4240

00008644 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8644:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8648:	ldr.w	r8, [pc, #64]	; 868c <yieldTimeout(bool (*)())+0x48>
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    864c:	ldr	r7, [pc, #56]	; (8688 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    864e:	str.w	r0, [r8]
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    8652:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
    8654:	bl	9b2c <micros>
    8658:	mov	r6, r0
    865a:	b.n	866a <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    865c:	bl	9b2c <micros>
    8660:	subs	r0, r0, r6
    8662:	cmp	r0, r7
    8664:	bhi.n	867c <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    8666:	bl	ab08 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    866a:	blx	r5
    866c:	mov	r4, r0
    866e:	cmp	r0, #0
    8670:	bne.n	865c <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    8672:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    8676:	mov	r0, r4
    8678:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    867c:	movs	r3, #0
    867e:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    8682:	mov	r0, r4
    8684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8688:	.word	0x000f4240
    868c:	.word	0x1fff1bc0

00008690 <SdioCard::~SdioCard()>:
    8690:	push	{r4, lr}
    8692:	movs	r1, #12
    8694:	mov	r4, r0
    8696:	bl	ad94 <operator delete(void*, unsigned int)>
    869a:	mov	r0, r4
    869c:	pop	{r4, pc}
    869e:	nop

000086a0 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    86a0:	ldr	r3, [pc, #20]	; (86b8 <SdioCard::type() const+0x18>)
    86a2:	ldrb	r3, [r3, #0]
    86a4:	cbz	r3, 86b4 <SdioCard::type() const+0x14>
    86a6:	ldr	r3, [pc, #20]	; (86bc <SdioCard::type() const+0x1c>)
    86a8:	ldrb	r3, [r3, #0]
    86aa:	cmp	r3, #0
    86ac:	ite	ne
    86ae:	movne	r0, #3
    86b0:	moveq	r0, #2
    86b2:	bx	lr
    86b4:	movs	r0, #1
}
    86b6:	bx	lr
    86b8:	.word	0x1fff1bac
    86bc:	.word	0x1fff1bc4

000086c0 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    86c0:	push	{r3, r4, r5, lr}
    86c2:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    86c4:	ldr	r0, [pc, #60]	; (8704 <cardCommand(unsigned long, unsigned long)+0x44>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    86c6:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    86c8:	bl	861c <waitTimeout(bool (*)())>
    86cc:	cbz	r0, 86d2 <cardCommand(unsigned long, unsigned long)+0x12>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86ce:	movs	r0, #0
    86d0:	pop	{r3, r4, r5, pc}
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    86d2:	ldr	r2, [pc, #52]	; (8708 <cardCommand(unsigned long, unsigned long)+0x48>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    86d4:	ldr	r3, [pc, #52]	; (870c <cardCommand(unsigned long, unsigned long)+0x4c>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    86d6:	str	r5, [r2, #0]
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
  if (waitTimeout(isBusyCommandComplete)) {
    86d8:	ldr	r0, [pc, #52]	; (8710 <cardCommand(unsigned long, unsigned long)+0x50>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    86da:	str	r4, [r3, #0]
  if (waitTimeout(isBusyCommandComplete)) {
    86dc:	bl	861c <waitTimeout(bool (*)())>
    86e0:	cmp	r0, #0
    86e2:	bne.n	86ce <cardCommand(unsigned long, unsigned long)+0xe>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    86e4:	ldr	r2, [pc, #44]	; (8714 <cardCommand(unsigned long, unsigned long)+0x54>)
    86e6:	ldr	r3, [pc, #48]	; (8718 <cardCommand(unsigned long, unsigned long)+0x58>)
    86e8:	ldr	r1, [r2, #0]
    86ea:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    86ec:	ldr	r1, [r3, #0]
    86ee:	str	r1, [r2, #0]

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86f0:	ldr	r2, [r3, #0]
    86f2:	lsls	r2, r2, #31
    86f4:	bpl.n	86ce <cardCommand(unsigned long, unsigned long)+0xe>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    86f6:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86f8:	tst.w	r3, #983040	; 0xf0000
    86fc:	bne.n	86ce <cardCommand(unsigned long, unsigned long)+0xe>
    86fe:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    8700:	pop	{r3, r4, r5, pc}
    8702:	nop
    8704:	.word	0x00008491
    8708:	.word	0x400b1008
    870c:	.word	0x400b100c
    8710:	.word	0x00008479
    8714:	.word	0x400b1030
    8718:	.word	0x1fff1bd0

0000871c <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    871c:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    871e:	ldr	r3, [pc, #16]	; (8730 <SdioCard::status()+0x14>)
    8720:	ldr	r0, [pc, #16]	; (8734 <SdioCard::status()+0x18>)
    8722:	ldr	r1, [r3, #0]
    8724:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8728:	cbz	r0, 872e <SdioCard::status()+0x12>
    872a:	ldr	r3, [pc, #12]	; (8738 <SdioCard::status()+0x1c>)
    872c:	ldr	r0, [r3, #0]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    872e:	pop	{r3, pc}
    8730:	.word	0x1fff1bcc
    8734:	.word	0x0d1a0000
    8738:	.word	0x400b1010

0000873c <readReg16(unsigned long, void*)>:
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    873c:	push	{r4, r5, lr}
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    873e:	ldr	r3, [pc, #84]	; (8794 <readReg16(unsigned long, void*)+0x58>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    8740:	sub	sp, #20
    8742:	mov	r5, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    8744:	ldr	r1, [r3, #0]
    8746:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    874a:	cbz	r0, 878e <readReg16(unsigned long, void*)+0x52>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    874c:	ldr	r2, [pc, #72]	; (8798 <readReg16(unsigned long, void*)+0x5c>)
    874e:	ldr	r3, [pc, #76]	; (879c <readReg16(unsigned long, void*)+0x60>)
    8750:	ldr	r2, [r2, #0]
    8752:	str	r2, [sp, #0]
    8754:	ldr	r1, [r3, #0]
    8756:	str	r1, [sp, #4]
    8758:	ldr	r1, [r3, #4]
    875a:	str	r1, [sp, #8]
    875c:	adds	r3, #8
    875e:	add.w	r4, r5, #15
    8762:	ldr	r3, [r3, #0]
    8764:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8766:	movs	r3, #0
    8768:	b.n	876e <readReg16(unsigned long, void*)+0x32>
    876a:	ldr.w	r2, [r1, #-16]
    d[14 - i] = sr[i/4] >> 8*(i%4);
    876e:	and.w	r1, r3, #3
    8772:	lsls	r1, r1, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8774:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8776:	lsrs	r2, r1
    8778:	add.w	lr, sp, #16
    877c:	bic.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8780:	cmp	r3, #15
    8782:	add	r1, lr
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8784:	strb.w	r2, [r4, #-1]!
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    8788:	bne.n	876a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    878a:	movs	r3, #0
    878c:	strb	r3, [r5, #15]
  return true;
}
    878e:	add	sp, #20
    8790:	pop	{r4, r5, pc}
    8792:	nop
    8794:	.word	0x1fff1bcc
    8798:	.word	0x400b1010
    879c:	.word	0x400b1014

000087a0 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    87a0:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    87a2:	ldr	r3, [pc, #28]	; (87c0 <isBusyCMD13()+0x20>)
    87a4:	ldr	r0, [pc, #28]	; (87c4 <isBusyCMD13()+0x24>)
    87a6:	ldr	r1, [r3, #0]
    87a8:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    87ac:	cbz	r0, 87bc <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    87ae:	ldr	r3, [pc, #24]	; (87c8 <isBusyCMD13()+0x28>)
    87b0:	ldr	r0, [r3, #0]
    87b2:	eor.w	r0, r0, #256	; 0x100
    87b6:	ubfx	r0, r0, #8, #1
    87ba:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    87bc:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    87be:	pop	{r3, pc}
    87c0:	.word	0x1fff1bcc
    87c4:	.word	0x0d1a0000
    87c8:	.word	0x400b1010

000087cc <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    87cc:	ldr	r3, [pc, #16]	; (87e0 <SdioCard::isBusy()+0x14>)
    87ce:	ldr	r3, [r3, #0]
    87d0:	cbz	r3, 87d4 <SdioCard::isBusy()+0x8>
    87d2:	bx	r3
    87d4:	ldr	r3, [pc, #12]	; (87e4 <SdioCard::isBusy()+0x18>)
    87d6:	ldrb	r0, [r3, #0]
    87d8:	cbnz	r0, 87dc <SdioCard::isBusy()+0x10>
}
    87da:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    87dc:	b.w	87a0 <isBusyCMD13()>
    87e0:	.word	0x1fff1bc0
    87e4:	.word	0x1fff1bd4

000087e8 <waitDmaStatus() [clone .part.6]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    87e8:	ldr	r3, [pc, #20]	; (8800 <waitDmaStatus() [clone .part.6]+0x18>)
    87ea:	ldr	r0, [r3, #0]
    87ec:	ands.w	r0, r0, #2
    87f0:	beq.n	87fe <waitDmaStatus() [clone .part.6]+0x16>
    87f2:	ldr	r3, [r3, #0]
    87f4:	ldr	r0, [pc, #12]	; (8804 <waitDmaStatus() [clone .part.6]+0x1c>)
    87f6:	ands	r0, r3
    87f8:	clz	r0, r0
    87fc:	lsrs	r0, r0, #5
}
    87fe:	bx	lr
    8800:	.word	0x1fff1bd0
    8804:	.word	0x117f0000

00008808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    8808:	push	{r3, r4, r5, r6, r7, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    880a:	lsls	r4, r2, #30
    880c:	bne.n	8810 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8>
    880e:	cbnz	r3, 8822 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8810:	ldr	r1, [pc, #124]	; (8890 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    8812:	ldr	r3, [pc, #128]	; (8894 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8814:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8816:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    881a:	strb	r0, [r1, #0]
  m_errorLine = line;
    881c:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    881e:	movs	r0, #0
    8820:	pop	{r3, r4, r5, r6, r7, pc}
    8822:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8824:	ldr	r0, [pc, #112]	; (8898 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8826:	mov	r4, r3
    8828:	mov	r7, r1
    882a:	mov	r5, r2
    882c:	bl	8644 <yieldTimeout(bool (*)())>
    8830:	cbnz	r0, 887a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x72>
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8832:	ldr	r1, [pc, #104]	; (889c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8834:	ldr	r2, [pc, #104]	; (88a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8836:	ldr.w	lr, [pc, #128]	; 88b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>
    883a:	mov.w	ip, #1
    883e:	strb.w	ip, [lr]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8842:	lsls	r3, r4, #16
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8844:	str	r0, [r1, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8846:	ldr	r4, [pc, #92]	; (88a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    8848:	str	r5, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    884a:	ldr	r2, [pc, #92]	; (88a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    884c:	ldr	r1, [pc, #92]	; (88ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    884e:	ldr	r0, [pc, #96]	; (88b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    8850:	orr.w	r3, r3, #512	; 0x200
    8854:	str	r3, [r4, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    8856:	ldrb	r3, [r2, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8858:	str	r0, [r1, #0]
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    885a:	cbnz	r3, 888a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x82>
    885c:	lsls	r1, r7, #9
    885e:	mov	r0, r6
    8860:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8864:	cmp	r0, #0
    8866:	beq.n	881e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8868:	ldr	r0, [pc, #72]	; (88b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    886a:	bl	8644 <yieldTimeout(bool (*)())>
    886e:	cmp	r0, #0
    8870:	bne.n	881e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    8872:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8876:	b.w	87e8 <waitDmaStatus() [clone .part.6]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    887a:	ldr	r1, [pc, #20]	; (8890 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
  m_errorLine = line;
    887c:	ldr	r3, [pc, #20]	; (8894 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    887e:	movs	r0, #10
  m_errorLine = line;
    8880:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8884:	strb	r0, [r1, #0]
  m_errorLine = line;
    8886:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8888:	b.n	881e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x16>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    888a:	mov	r1, r7
    888c:	b.n	885e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    888e:	nop
    8890:	.word	0x1fff097c
    8894:	.word	0x1fff1bf0
    8898:	.word	0x000087a1
    889c:	.word	0x1fff1bd0
    88a0:	.word	0x400b1000
    88a4:	.word	0x400b1004
    88a8:	.word	0x1fff1bc4
    88ac:	.word	0x400b1038
    88b0:	.word	0x117f0002
    88b4:	.word	0x000084a1
    88b8:	.word	0x1fff1be8

000088bc <SdioCard::sectorCount()>:
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    88bc:	push	{r4, r5, r6}
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    88be:	ldr	r1, [pc, #100]	; (8924 <SdioCard::sectorCount()+0x68>)
    88c0:	ldrb	r3, [r1, #0]
    88c2:	ands.w	r3, r3, #192	; 0xc0
    88c6:	beq.n	88ec <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    88c8:	cmp	r3, #64	; 0x40
    88ca:	beq.n	88d2 <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    88cc:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    88ce:	pop	{r4, r5, r6}
    88d0:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    88d2:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    88d4:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    88d6:	ldrb	r0, [r1, #8]
    88d8:	adds	r2, r3, #1
    88da:	and.w	r3, r4, #63	; 0x3f
    88de:	add.w	r3, r2, r3, lsl #16
    88e2:	add.w	r0, r3, r0, lsl #8
    88e6:	lsls	r0, r0, #10
    88e8:	pop	{r4, r5, r6}
    88ea:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    88ec:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    88ee:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    88f0:	ldrb	r2, [r1, #7]
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    88f2:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    88f4:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    88f6:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    88f8:	and.w	r1, r5, #3
    88fc:	lsls	r1, r1, #1
    88fe:	and.w	r3, r3, #3
    8902:	lsls	r2, r2, #2
    8904:	orr.w	r0, r1, r0, lsr #7
    8908:	orr.w	r3, r2, r3, lsl #10
    890c:	and.w	r1, r4, #15
    8910:	orr.w	r3, r3, r6, lsr #6
    8914:	add	r0, r1
    8916:	subs	r0, #7
    8918:	adds	r3, #1
    891a:	lsl.w	r0, r3, r0
    891e:	pop	{r4, r5, r6}
    8920:	bx	lr
    8922:	nop
    8924:	.word	0x1fff1bd8

00008928 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8928:	push	{r4, r5, r6, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    892a:	ldr	r6, [pc, #176]	; (89dc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    892c:	ldrb	r3, [r6, #10]
    892e:	and.w	r0, r3, #64	; 0x40
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8932:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    8934:	cbnz	r0, 894e <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8936:	and.w	r3, r3, #63	; 0x3f
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    893a:	ldrb	r2, [r6, #11]
    893c:	and.w	r4, r0, #255	; 0xff
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8940:	lsls	r3, r3, #1
    8942:	adds	r0, r5, #1
    8944:	orr.w	r3, r3, r2, lsr #7
    8948:	orrs	r0, r1
    894a:	tst	r3, r0
    894c:	bne.n	8992 <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    894e:	ldr	r3, [pc, #144]	; (89e0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8950:	ldrb	r3, [r3, #0]
    8952:	cbnz	r3, 8958 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8954:	lsls	r1, r1, #9
    lastSector <<= 9;
    8956:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8958:	ldr	r0, [pc, #136]	; (89e4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    895a:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    895e:	mov	r4, r0
    8960:	cbnz	r0, 8974 <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8962:	ldr	r1, [pc, #132]	; (89e8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8964:	ldr	r3, [pc, #132]	; (89ec <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8966:	movs	r0, #15
  m_errorLine = line;
    8968:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    896c:	strb	r0, [r1, #0]
  m_errorLine = line;
    896e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    8970:	mov	r0, r4
    8972:	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8974:	mov	r1, r5
    8976:	ldr	r0, [pc, #120]	; (89f0 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    8978:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    897c:	mov	r4, r0
    897e:	cbnz	r0, 89a4 <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8980:	ldr	r1, [pc, #100]	; (89e8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8982:	ldr	r3, [pc, #104]	; (89ec <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8984:	movs	r0, #16
  m_errorLine = line;
    8986:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    898a:	strb	r0, [r1, #0]
  m_errorLine = line;
    898c:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    898e:	mov	r0, r4
    8990:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8992:	ldr	r1, [pc, #84]	; (89e8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    8994:	ldr	r3, [pc, #84]	; (89ec <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8996:	movs	r0, #38	; 0x26
  m_errorLine = line;
    8998:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    899c:	strb	r0, [r1, #0]
  m_errorLine = line;
    899e:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    89a0:	mov	r0, r4
    89a2:	pop	{r4, r5, r6, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    89a4:	movs	r1, #0
    89a6:	ldr	r0, [pc, #76]	; (89f4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    89a8:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    89ac:	mov	r4, r0
    89ae:	cbnz	r0, 89c0 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89b0:	ldr	r1, [pc, #52]	; (89e8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    89b2:	ldr	r3, [pc, #56]	; (89ec <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89b4:	movs	r0, #17
  m_errorLine = line;
    89b6:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ba:	strb	r0, [r1, #0]
  m_errorLine = line;
    89bc:	str	r2, [r3, #0]
    89be:	b.n	8970 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    89c0:	ldr	r0, [pc, #52]	; (89f8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    89c2:	bl	861c <waitTimeout(bool (*)())>
    89c6:	cmp	r0, #0
    89c8:	beq.n	8970 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ca:	ldr	r1, [pc, #28]	; (89e8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
  m_errorLine = line;
    89cc:	ldr	r3, [pc, #28]	; (89ec <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89ce:	movs	r0, #39	; 0x27
  m_errorLine = line;
    89d0:	movw	r2, #701	; 0x2bd
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    89d4:	strb	r0, [r1, #0]
  m_errorLine = line;
    89d6:	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    89d8:	movs	r4, #0
    89da:	b.n	8970 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    89dc:	.word	0x1fff1bd8
    89e0:	.word	0x1fff1bc4
    89e4:	.word	0x201a0000
    89e8:	.word	0x1fff097c
    89ec:	.word	0x1fff1bf0
    89f0:	.word	0x211a0000
    89f4:	.word	0x261b0000
    89f8:	.word	0x000087a1

000089fc <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    89fc:	push	{r4, r5, r6, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    89fe:	movs	r1, #0
    8a00:	ldr	r0, [pc, #84]	; (8a58 <transferStop()+0x5c>)
    8a02:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8a06:	mov	r4, r0
    8a08:	cbnz	r0, 8a1c <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a0a:	ldr	r1, [pc, #80]	; (8a5c <transferStop()+0x60>)
  m_errorLine = line;
    8a0c:	ldr	r3, [pc, #80]	; (8a60 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a0e:	movs	r0, #9
  m_errorLine = line;
    8a10:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a14:	strb	r0, [r1, #0]
  m_errorLine = line;
    8a16:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8a18:	mov	r0, r4
    8a1a:	pop	{r4, r5, r6, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    8a1c:	ldr	r0, [pc, #68]	; (8a64 <transferStop()+0x68>)
    8a1e:	bl	8644 <yieldTimeout(bool (*)())>
    8a22:	cbnz	r0, 8a42 <transferStop()+0x46>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8a24:	ldr	r0, [pc, #64]	; (8a68 <transferStop()+0x6c>)
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8a26:	ldr	r1, [pc, #68]	; (8a6c <transferStop()+0x70>)
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8a28:	ldr	r5, [pc, #68]	; (8a70 <transferStop()+0x74>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    8a2a:	ldr	r6, [r0, #0]
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8a2c:	ldr	r3, [r1, #0]
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8a2e:	ldr	r2, [r5, #0]
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8a30:	bic.w	r3, r3, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8a34:	orr.w	r2, r2, #67108864	; 0x4000000
    8a38:	str	r2, [r5, #0]
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    8a3a:	str	r6, [r0, #0]
  SDHC_PROCTL = proctl;
    8a3c:	str	r3, [r1, #0]
  return true;
}
    8a3e:	mov	r0, r4
    8a40:	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a42:	ldr	r1, [pc, #24]	; (8a5c <transferStop()+0x60>)
  m_errorLine = line;
    8a44:	ldr	r3, [pc, #24]	; (8a60 <transferStop()+0x64>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a46:	movs	r0, #10
  m_errorLine = line;
    8a48:	movw	r2, #543	; 0x21f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8a4c:	strb	r0, [r1, #0]
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8a4e:	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8a50:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    8a52:	mov	r0, r4
    8a54:	pop	{r4, r5, r6, pc}
    8a56:	nop
    8a58:	.word	0x0cdb0000
    8a5c:	.word	0x1fff097c
    8a60:	.word	0x1fff1bf0
    8a64:	.word	0x000087a1
    8a68:	.word	0x400b1034
    8a6c:	.word	0x400b1028
    8a70:	.word	0x400b102c

00008a74 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8a74:	b.w	89fc <transferStop()>

00008a78 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8a78:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8a7a:	ldr	r3, [pc, #160]	; (8b1c <SdioCard::writeData(unsigned char const*)+0xa4>)
    8a7c:	ldr	r3, [r3, #0]
    8a7e:	lsls	r0, r3, #23
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    8a80:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8a82:	bmi.n	8a96 <SdioCard::writeData(unsigned char const*)+0x1e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8a84:	ldr	r3, [pc, #152]	; (8b20 <SdioCard::writeData(unsigned char const*)+0xa8>)
    8a86:	ldr	r2, [r3, #0]
    8a88:	bic.w	r2, r2, #65536	; 0x10000
    8a8c:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8a8e:	ldr	r2, [r3, #0]
    8a90:	orr.w	r2, r2, #131072	; 0x20000
    8a94:	str	r2, [r3, #0]
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8a96:	ldr	r2, [pc, #136]	; (8b20 <SdioCard::writeData(unsigned char const*)+0xa8>)
  if (waitTimeout(isBusyFifoWrite)) {
    8a98:	ldr	r0, [pc, #136]	; (8b24 <SdioCard::writeData(unsigned char const*)+0xac>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8a9a:	ldr	r3, [r2, #0]
    8a9c:	orr.w	r3, r3, #65536	; 0x10000
    8aa0:	str	r3, [r2, #0]
  if (waitTimeout(isBusyFifoWrite)) {
    8aa2:	bl	861c <waitTimeout(bool (*)())>
    8aa6:	cmp	r0, #0
    8aa8:	bne.n	8b08 <SdioCard::writeData(unsigned char const*)+0x90>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8aaa:	ldr	r4, [pc, #112]	; (8b1c <SdioCard::writeData(unsigned char const*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8aac:	ldr	r0, [pc, #120]	; (8b28 <SdioCard::writeData(unsigned char const*)+0xb0>)
    8aae:	subs	r3, r5, #4
    8ab0:	add.w	r5, r5, #508	; 0x1fc
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8ab4:	ldr	r2, [r4, #0]
    8ab6:	lsls	r1, r2, #21
    8ab8:	bpl.n	8ab4 <SdioCard::writeData(unsigned char const*)+0x3c>
    8aba:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    8abe:	ldr.w	r2, [r3, #4]!
    8ac2:	str	r2, [r0, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8ac4:	cmp	r1, r3
    8ac6:	bne.n	8abe <SdioCard::writeData(unsigned char const*)+0x46>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8ac8:	cmp	r5, r1
    8aca:	mov	r3, r1
    8acc:	bne.n	8ab4 <SdioCard::writeData(unsigned char const*)+0x3c>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    8ace:	ldr	r0, [pc, #92]	; (8b2c <SdioCard::writeData(unsigned char const*)+0xb4>)
    8ad0:	bl	861c <waitTimeout(bool (*)())>
    8ad4:	cbnz	r0, 8af6 <SdioCard::writeData(unsigned char const*)+0x7e>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    8ad6:	ldr	r2, [pc, #88]	; (8b30 <SdioCard::writeData(unsigned char const*)+0xb8>)
    8ad8:	ldr	r3, [pc, #88]	; (8b34 <SdioCard::writeData(unsigned char const*)+0xbc>)
    8ada:	ldr	r1, [r2, #0]
    8adc:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ade:	ldr	r1, [r3, #0]
    8ae0:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8ae2:	ldr	r2, [r3, #0]
    8ae4:	lsls	r2, r2, #30
    8ae6:	bpl.n	8b18 <SdioCard::writeData(unsigned char const*)+0xa0>
    8ae8:	ldr	r3, [r3, #0]
    8aea:	ldr	r0, [pc, #76]	; (8b38 <SdioCard::writeData(unsigned char const*)+0xc0>)
    8aec:	ands	r0, r3
    8aee:	clz	r0, r0
    8af2:	lsrs	r0, r0, #5
    8af4:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8af6:	ldr	r1, [pc, #68]	; (8b3c <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8af8:	ldr	r3, [pc, #68]	; (8b40 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8afa:	movs	r0, #35	; 0x23
  m_errorLine = line;
    8afc:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b00:	strb	r0, [r1, #0]
  m_errorLine = line;
    8b02:	str	r2, [r3, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    8b04:	movs	r0, #0
    8b06:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b08:	ldr	r1, [pc, #48]	; (8b3c <SdioCard::writeData(unsigned char const*)+0xc4>)
  m_errorLine = line;
    8b0a:	ldr	r3, [pc, #52]	; (8b40 <SdioCard::writeData(unsigned char const*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b0c:	movs	r0, #32
  m_errorLine = line;
    8b0e:	movw	r2, #894	; 0x37e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b12:	strb	r0, [r1, #0]
  m_errorLine = line;
    8b14:	str	r2, [r3, #0]
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8b16:	movs	r0, #0
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    8b18:	pop	{r3, r4, r5, pc}
    8b1a:	nop
    8b1c:	.word	0x400b1024
    8b20:	.word	0x400b1028
    8b24:	.word	0x000084c1
    8b28:	.word	0x400b1020
    8b2c:	.word	0x000084d5
    8b30:	.word	0x400b1030
    8b34:	.word	0x1fff1bd0
    8b38:	.word	0x117f0000
    8b3c:	.word	0x1fff097c
    8b40:	.word	0x1fff1bf0

00008b44 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8b44:	push	{r3, r4, r5, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8b46:	ldr	r0, [pc, #80]	; (8b98 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8b48:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8b4a:	bl	8644 <yieldTimeout(bool (*)())>
    8b4e:	cbnz	r0, 8b84 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b50:	ldr	r2, [pc, #72]	; (8b9c <SdioCard::writeStart(unsigned long)+0x58>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b52:	ldr	r1, [pc, #76]	; (8ba0 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b54:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8b56:	ldr	r0, [pc, #76]	; (8ba4 <SdioCard::writeStart(unsigned long)+0x60>)
    8b58:	ldr	r5, [pc, #76]	; (8ba8 <SdioCard::writeStart(unsigned long)+0x64>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b5a:	bic.w	r3, r3, #65536	; 0x10000
    8b5e:	str	r3, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b60:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    8b62:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b64:	cbnz	r3, 8b80 <SdioCard::writeStart(unsigned long)+0x3c>
    8b66:	lsls	r1, r4, #9
    8b68:	ldr	r0, [pc, #64]	; (8bac <SdioCard::writeStart(unsigned long)+0x68>)
    8b6a:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8b6e:	cbnz	r0, 8b7e <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b70:	ldr	r1, [pc, #60]	; (8bb0 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8b72:	ldr	r3, [pc, #64]	; (8bb4 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b74:	movs	r4, #14
  m_errorLine = line;
    8b76:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b7a:	strb	r4, [r1, #0]
  m_errorLine = line;
    8b7c:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8b7e:	pop	{r3, r4, r5, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8b80:	mov	r1, r4
    8b82:	b.n	8b68 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b84:	ldr	r1, [pc, #40]	; (8bb0 <SdioCard::writeStart(unsigned long)+0x6c>)
  m_errorLine = line;
    8b86:	ldr	r3, [pc, #44]	; (8bb4 <SdioCard::writeStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b88:	movs	r0, #10
  m_errorLine = line;
    8b8a:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8b8e:	strb	r0, [r1, #0]
  m_errorLine = line;
    8b90:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8b92:	movs	r0, #0
    8b94:	pop	{r3, r4, r5, pc}
    8b96:	nop
    8b98:	.word	0x000087a1
    8b9c:	.word	0x400b1028
    8ba0:	.word	0x1fff1bc4
    8ba4:	.word	0x400b1004
    8ba8:	.word	0xffff0200
    8bac:	.word	0x193a0022
    8bb0:	.word	0x1fff097c
    8bb4:	.word	0x1fff1bf0

00008bb8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8bb8:	push	{r3, r4, r5, r6, r7, lr}
    8bba:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8bbc:	ldrb	r0, [r0, #8]
    8bbe:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8bc0:	mov	r4, r1
    8bc2:	mov	r5, r2
    8bc4:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8bc6:	bmi.n	8bf0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8bc8:	cbz	r3, 8bec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8bca:	add	r7, r1
    8bcc:	b.n	8bd2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    8bce:	cmp	r4, r7
    8bd0:	beq.n	8bec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    8bd2:	ldr	r3, [r6, #0]
    8bd4:	mov	r2, r5
    8bd6:	mov	r1, r4
    8bd8:	ldr	r3, [r3, #8]
    8bda:	mov	r0, r6
    8bdc:	blx	r3
    8bde:	adds	r4, #1
    8be0:	add.w	r5, r5, #512	; 0x200
    8be4:	cmp	r0, #0
    8be6:	bne.n	8bce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    8be8:	movs	r0, #0
    8bea:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8bec:	movs	r0, #1
    8bee:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    8bf0:	lsls	r0, r2, #30
    8bf2:	beq.n	8c1a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8bf4:	cmp	r3, #0
    8bf6:	beq.n	8bec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    8bf8:	add	r7, r1
    8bfa:	b.n	8c00 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    8bfc:	cmp	r7, r4
    8bfe:	beq.n	8bec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    8c00:	ldr	r3, [r6, #0]
    8c02:	mov	r2, r5
    8c04:	mov	r1, r4
    8c06:	ldr	r3, [r3, #8]
    8c08:	mov	r0, r6
    8c0a:	blx	r3
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8c0c:	adds	r4, #1
    8c0e:	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    8c12:	cmp	r0, #0
    8c14:	bne.n	8bfc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    8c16:	movs	r0, #0
    8c18:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    8c1a:	ldr	r0, [pc, #24]	; (8c34 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    8c1c:	bl	8808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8c20:	cmp	r0, #0
    8c22:	bne.n	8bec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c24:	ldr	r1, [pc, #16]	; (8c38 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
  m_errorLine = line;
    8c26:	ldr	r3, [pc, #20]	; (8c3c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c28:	movs	r4, #12
  m_errorLine = line;
    8c2a:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8c2e:	strb	r4, [r1, #0]
  m_errorLine = line;
    8c30:	str	r2, [r3, #0]
    8c32:	pop	{r3, r4, r5, r6, r7, pc}
    8c34:	.word	0x123a0037
    8c38:	.word	0x1fff097c
    8c3c:	.word	0x1fff1bf0

00008c40 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8c40:	push	{r3, r4, r5, r6, r7, lr}
    8c42:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    8c44:	ldrb	r0, [r0, #8]
    8c46:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    8c48:	mov	r4, r1
    8c4a:	mov	r5, r2
    8c4c:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    8c4e:	bmi.n	8c78 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    8c50:	cbz	r3, 8c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8c52:	add	r7, r1
    8c54:	b.n	8c5a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    8c56:	cmp	r4, r7
    8c58:	beq.n	8c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    8c5a:	ldr	r3, [r6, #0]
    8c5c:	mov	r2, r5
    8c5e:	mov	r1, r4
    8c60:	ldr	r3, [r3, #24]
    8c62:	mov	r0, r6
    8c64:	blx	r3
    8c66:	adds	r4, #1
    8c68:	add.w	r5, r5, #512	; 0x200
    8c6c:	cmp	r0, #0
    8c6e:	bne.n	8c56 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    8c70:	movs	r0, #0
    8c72:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    8c74:	movs	r0, #1
    8c76:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    8c78:	lsls	r0, r2, #30
    8c7a:	beq.n	8ca2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8c7c:	cmp	r3, #0
    8c7e:	beq.n	8c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    8c80:	add	r7, r1
    8c82:	b.n	8c88 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    8c84:	cmp	r7, r4
    8c86:	beq.n	8c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    8c88:	ldr	r3, [r6, #0]
    8c8a:	mov	r2, r5
    8c8c:	mov	r1, r4
    8c8e:	ldr	r3, [r3, #24]
    8c90:	mov	r0, r6
    8c92:	blx	r3
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8c94:	adds	r4, #1
    8c96:	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    8c9a:	cmp	r0, #0
    8c9c:	bne.n	8c84 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    8c9e:	movs	r0, #0
    8ca0:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    8ca2:	ldr	r0, [pc, #24]	; (8cbc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    8ca4:	bl	8808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8ca8:	cmp	r0, #0
    8caa:	bne.n	8c74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cac:	ldr	r1, [pc, #16]	; (8cc0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
  m_errorLine = line;
    8cae:	ldr	r3, [pc, #20]	; (8cc4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cb0:	movs	r4, #14
  m_errorLine = line;
    8cb2:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cb6:	strb	r4, [r1, #0]
  m_errorLine = line;
    8cb8:	str	r2, [r3, #0]
    8cba:	pop	{r3, r4, r5, r6, r7, pc}
    8cbc:	.word	0x193a0027
    8cc0:	.word	0x1fff097c
    8cc4:	.word	0x1fff1bf0

00008cc8 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8cc8:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    8cca:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8ccc:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8cce:	lsls	r2, r3, #31
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8cd0:	sub.w	sp, sp, #512	; 0x200
    8cd4:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    8cd6:	bpl.n	8d0c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    8cd8:	lsls	r3, r5, #30
    8cda:	beq.n	8cea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    8cdc:	mov	r1, r5
    8cde:	mov	r0, sp
    8ce0:	mov.w	r2, #512	; 0x200
    8ce4:	bl	9584 <memcpy>
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    8ce8:	mov	r5, sp
      memcpy(aligned, src, 512);
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8cea:	mov	r2, r5
    8cec:	mov	r1, r6
    8cee:	movs	r3, #1
    8cf0:	ldr	r0, [pc, #120]	; (8d6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    8cf2:	bl	8808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8cf6:	cbnz	r0, 8d06 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cf8:	ldr	r1, [pc, #116]	; (8d70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
  m_errorLine = line;
    8cfa:	ldr	r3, [pc, #120]	; (8d74 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8cfc:	movs	r4, #13
  m_errorLine = line;
    8cfe:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8d02:	strb	r4, [r1, #0]
  m_errorLine = line;
    8d04:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8d06:	add.w	sp, sp, #512	; 0x200
    8d0a:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8d0c:	ldrb	r3, [r0, #9]
    8d0e:	cmp	r3, #2
    8d10:	mov	r4, r0
    8d12:	beq.n	8d26 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    8d14:	ldr	r3, [r4, #0]
    8d16:	mov	r0, r4
    8d18:	ldr	r3, [r3, #20]
    8d1a:	blx	r3
    8d1c:	cbnz	r0, 8d56 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x8e>
        return false;
    8d1e:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    8d20:	add.w	sp, sp, #512	; 0x200
    8d24:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8d26:	ldr	r3, [r0, #4]
    8d28:	cmp	r1, r3
    8d2a:	bne.n	8d14 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    8d2c:	ldr	r3, [r4, #0]
    8d2e:	mov	r1, r5
    8d30:	ldr	r3, [r3, #68]	; 0x44
    8d32:	mov	r0, r4
    8d34:	blx	r3
    8d36:	cmp	r0, #0
    8d38:	beq.n	8d1e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    8d3a:	ldr	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8d3c:	ldr	r2, [pc, #56]	; (8d78 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
      return false;
    }
    m_curSector++;
    8d3e:	adds	r3, #1
    8d40:	str	r3, [r4, #4]
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // End transfer with CMD12 if required.
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    8d42:	ldr	r3, [r2, #0]
    8d44:	lsrs	r3, r3, #16
    8d46:	lsls	r3, r3, #16
    8d48:	cmp	r3, #0
    8d4a:	bne.n	8d06 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
      if (!syncDevice()) {
    8d4c:	ldr	r3, [r4, #0]
    8d4e:	mov	r0, r4
    8d50:	ldr	r3, [r3, #20]
    8d52:	blx	r3
    8d54:	b.n	8d06 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    8d56:	ldr	r3, [r4, #0]
    8d58:	mov	r1, r6
    8d5a:	ldr	r3, [r3, #72]	; 0x48
    8d5c:	mov	r0, r4
    8d5e:	blx	r3
    8d60:	cmp	r0, #0
    8d62:	beq.n	8d1e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    8d64:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    8d66:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    8d68:	strb	r3, [r4, #9]
    8d6a:	b.n	8d2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    8d6c:	.word	0x183a0001
    8d70:	.word	0x1fff097c
    8d74:	.word	0x1fff1bf0
    8d78:	.word	0x400b1004

00008d7c <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    8d7c:	ldrb	r3, [r0, #9]
    8d7e:	cmp	r3, #1
    8d80:	beq.n	8d9c <SdioCard::syncDevice()+0x20>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    8d82:	cmp	r3, #2
    8d84:	beq.n	8d8a <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    8d86:	movs	r0, #1
    8d88:	bx	lr
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8d8a:	movs	r1, #0
    if (!writeStop()) {
    8d8c:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    8d8e:	strb	r1, [r0, #9]
    if (!writeStop()) {
    8d90:	ldr	r3, [r3, #76]	; 0x4c
    8d92:	ldr	r2, [pc, #20]	; (8da8 <SdioCard::syncDevice()+0x2c>)
    8d94:	cmp	r3, r2
    8d96:	bne.n	8da4 <SdioCard::syncDevice()+0x28>
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    8d98:	b.w	89fc <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    8d9c:	movs	r3, #0
    8d9e:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    8da0:	b.w	89fc <transferStop()>
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    8da4:	bx	r3
    8da6:	nop
    8da8:	.word	0x00008a75

00008dac <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8dac:	push	{r3, r4, r5, r6, r7, lr}
    8dae:	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8db0:	ldr	r0, [pc, #116]	; (8e28 <cardCMD6(unsigned long, unsigned char*)+0x7c>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8db2:	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    8db4:	bl	861c <waitTimeout(bool (*)())>
    8db8:	cbz	r0, 8dcc <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dba:	ldr	r1, [pc, #112]	; (8e2c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8dbc:	ldr	r3, [pc, #112]	; (8e30 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dbe:	movs	r0, #10
  m_errorLine = line;
    8dc0:	movw	r2, #377	; 0x179
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dc4:	strb	r0, [r1, #0]
  m_errorLine = line;
    8dc6:	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    8dc8:	movs	r0, #0
    8dca:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8dcc:	ldr	r2, [pc, #100]	; (8e34 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8dce:	ldr.w	lr, [pc, #132]	; 8e54 <cardCMD6(unsigned long, unsigned char*)+0xa8>
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8dd2:	ldr	r7, [pc, #100]	; (8e38 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8dd4:	ldr	r6, [pc, #100]	; (8e3c <cardCMD6(unsigned long, unsigned char*)+0x90>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8dd6:	ldr	r3, [pc, #104]	; (8e40 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    8dd8:	mov.w	ip, #1
    8ddc:	strb.w	ip, [lr]
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8de0:	mov	r1, r5
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    8de2:	str	r0, [r2, #0]
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8de4:	ldr	r5, [pc, #92]	; (8e44 <cardCMD6(unsigned long, unsigned char*)+0x98>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8de6:	ldr	r2, [pc, #96]	; (8e48 <cardCMD6(unsigned long, unsigned char*)+0x9c>)
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    8de8:	str	r4, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8dea:	ldr	r0, [pc, #96]	; (8e4c <cardCMD6(unsigned long, unsigned char*)+0xa0>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8dec:	str	r5, [r6, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8dee:	str	r2, [r3, #0]
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8df0:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8df4:	cbnz	r0, 8e06 <cardCMD6(unsigned long, unsigned char*)+0x5a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8df6:	ldr	r1, [pc, #52]	; (8e2c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8df8:	ldr	r3, [pc, #52]	; (8e30 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8dfa:	movs	r4, #4
  m_errorLine = line;
    8dfc:	mov.w	r2, #384	; 0x180
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e00:	strb	r4, [r1, #0]
  m_errorLine = line;
    8e02:	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    8e04:	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    8e06:	ldr	r0, [pc, #72]	; (8e50 <cardCMD6(unsigned long, unsigned char*)+0xa4>)
    8e08:	bl	8644 <yieldTimeout(bool (*)())>
    8e0c:	cbnz	r0, 8e16 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    8e0e:	bl	87e8 <waitDmaStatus() [clone .part.6]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    8e12:	cbz	r0, 8e16 <cardCMD6(unsigned long, unsigned char*)+0x6a>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    8e14:	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e16:	ldr	r1, [pc, #20]	; (8e2c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  m_errorLine = line;
    8e18:	ldr	r3, [pc, #20]	; (8e30 <cardCMD6(unsigned long, unsigned char*)+0x84>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e1a:	movs	r0, #36	; 0x24
  m_errorLine = line;
    8e1c:	movw	r2, #387	; 0x183
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8e20:	strb	r0, [r1, #0]
  m_errorLine = line;
    8e22:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    8e24:	movs	r0, #0
    8e26:	pop	{r3, r4, r5, r6, r7, pc}
    8e28:	.word	0x000087a1
    8e2c:	.word	0x1fff097c
    8e30:	.word	0x1fff1bf0
    8e34:	.word	0x1fff1bd0
    8e38:	.word	0x400b1000
    8e3c:	.word	0x400b1004
    8e40:	.word	0x400b1038
    8e44:	.word	0x00010040
    8e48:	.word	0x117f0002
    8e4c:	.word	0x063a0011
    8e50:	.word	0x000084a1
    8e54:	.word	0x1fff1be8

00008e58 <SdioCard::begin(SdioConfig)>:
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8e58:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8e5c:	ldr	r5, [pc, #568]	; (9098 <SdioCard::begin(SdioConfig)+0x240>)
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8e5e:	ldr	r4, [pc, #572]	; (909c <SdioCard::begin(SdioConfig)+0x244>)
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    8e60:	ldr.w	r8, [pc, #684]	; 9110 <SdioCard::begin(SdioConfig)+0x2b8>
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8e64:	ldr	r7, [pc, #568]	; (90a0 <SdioCard::begin(SdioConfig)+0x248>)
  m_version2 = false;
    8e66:	ldr	r6, [pc, #572]	; (90a4 <SdioCard::begin(SdioConfig)+0x24c>)
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    8e68:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8e6a:	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    8e6c:	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    8e6e:	strb	r3, [r0, #9]
  m_initDone = false;
    8e70:	strb.w	r3, [r8]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    8e74:	strb	r3, [r7, #0]
  m_version2 = false;
    8e76:	strb	r3, [r6, #0]
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8e78:	ldr	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8e7a:	ldr	r2, [pc, #556]	; (90a8 <SdioCard::begin(SdioConfig)+0x250>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e7c:	ldr	r0, [pc, #556]	; (90ac <SdioCard::begin(SdioConfig)+0x254>)
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8e7e:	ldr	r1, [pc, #560]	; (90b0 <SdioCard::begin(SdioConfig)+0x258>)
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8e80:	ldr.w	lr, [pc, #656]	; 9114 <SdioCard::begin(SdioConfig)+0x2bc>
}
//------------------------------------------------------------------------------
static void initClock() {
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
    8e84:	orr.w	r3, r3, #201326592	; 0xc000000
    8e88:	str	r3, [r4, #0]
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8e8a:	ldr	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e8c:	add.w	r4, r4, #260096	; 0x3f800
#ifdef HAS_KINETIS_MPU
  // Allow SDHC Bus Master access.
  MPU_RGDAAC0 |= 0x0C000000;
#endif  // HAS_KINETIS_MPU
  // Enable SDHC clock.
  SIM_SCGC3 |= SIM_SCGC3_SDHC;
    8e90:	orr.w	r3, r3, #131072	; 0x20000
    8e94:	str	r3, [r2, #0]
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8e96:	adds	r4, #12
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8e98:	add.w	r2, r2, #428032	; 0x68800
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8e9c:	movw	r3, #259	; 0x103
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8ea0:	addw	r2, r2, #2044	; 0x7fc
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ea4:	str	r3, [r0, #0]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8ea6:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8eaa:	str	r3, [r1, #0]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8eac:	str	r3, [r4, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8eae:	str	r3, [r0, #16]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8eb0:	str	r3, [r1, #12]
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8eb2:	ldr	r3, [r2, #0]
    8eb4:	orr.w	r3, r3, #16777216	; 0x1000000
    8eb8:	orr.w	r3, r3, #32768	; 0x8000
  return false;  // Caller will set errorCode.
}
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    8ebc:	sub	sp, #68	; 0x44
#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
#endif

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8ebe:	str	r3, [r2, #0]

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8ec0:	ldr	r3, [r2, #0]
    8ec2:	ldr	r4, [pc, #496]	; (90b4 <SdioCard::begin(SdioConfig)+0x25c>)
    8ec4:	lsls	r1, r3, #7
    8ec6:	bmi.n	8ec0 <SdioCard::begin(SdioConfig)+0x68>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8ec8:	mov.w	r0, #400	; 0x190
    8ecc:	bl	84ec <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ed0:	ldr.w	ip, [pc, #472]	; 90ac <SdioCard::begin(SdioConfig)+0x254>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8ed4:	ldr.w	lr, [pc, #572]	; 9114 <SdioCard::begin(SdioConfig)+0x2bc>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8ed8:	ldr	r1, [pc, #468]	; (90b0 <SdioCard::begin(SdioConfig)+0x258>)
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8eda:	ldr	r2, [pc, #476]	; (90b8 <SdioCard::begin(SdioConfig)+0x260>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8edc:	ldr	r0, [pc, #476]	; (90bc <SdioCard::begin(SdioConfig)+0x264>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    8ede:	movw	r3, #1091	; 0x443
    8ee2:	str.w	r3, [ip]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    8ee6:	str.w	r3, [lr]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    8eea:	mov.w	lr, #1088	; 0x440
    8eee:	str.w	lr, [r1]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    8ef2:	str	r3, [r2, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8ef4:	add.w	r2, r2, #409600	; 0x64000
    8ef8:	adds	r2, #40	; 0x28

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    8efa:	str	r3, [r0, #0]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8efc:	ldr	r0, [pc, #448]	; (90c0 <SdioCard::begin(SdioConfig)+0x268>)
  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    8efe:	str	r3, [r1, #12]
  setSdclk(SD_MAX_INIT_RATE_KHZ);

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8f00:	str	r0, [r2, #0]

  attachInterruptVector(IRQ_SDHC, sdIrs);
    8f02:	ldr	r1, [pc, #448]	; (90c4 <SdioCard::begin(SdioConfig)+0x26c>)
    8f04:	movs	r0, #81	; 0x51
    8f06:	bl	9ae0 <attachInterruptVector>
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8f0a:	ldr	r3, [pc, #444]	; (90c8 <SdioCard::begin(SdioConfig)+0x270>)

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8f0c:	ldr	r1, [pc, #444]	; (90cc <SdioCard::begin(SdioConfig)+0x274>)
    8f0e:	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8f10:	mov.w	r2, #131072	; 0x20000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8f14:	strb	r0, [r1, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8f16:	str	r2, [r3, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8f18:	ldr	r3, [r4, #0]
    8f1a:	orr.w	r3, r3, #134217728	; 0x8000000
    8f1e:	str	r3, [r4, #0]
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8f20:	ldr	r1, [r4, #0]
    8f22:	ands.w	r1, r1, #134217728	; 0x8000000
    8f26:	bne.n	8f20 <SdioCard::begin(SdioConfig)+0xc8>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8f28:	mov	r0, r1
    8f2a:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8f2e:	mov	r4, r0
    8f30:	cmp	r0, #0
    8f32:	beq.n	8fd2 <SdioCard::begin(SdioConfig)+0x17a>
    8f34:	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8f36:	mov.w	r1, #426	; 0x1aa
    8f3a:	ldr	r0, [pc, #404]	; (90d0 <SdioCard::begin(SdioConfig)+0x278>)
    8f3c:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8f40:	cmp	r0, #0
    8f42:	bne.n	9000 <SdioCard::begin(SdioConfig)+0x1a8>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8f44:	subs	r4, #1
    8f46:	bne.n	8f36 <SdioCard::begin(SdioConfig)+0xde>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8f48:	ldrb	r3, [r6, #0]
    8f4a:	ldr	r6, [pc, #392]	; (90d4 <SdioCard::begin(SdioConfig)+0x27c>)
    8f4c:	cmp	r3, #0
    8f4e:	it	eq
    8f50:	moveq.w	r6, #3145728	; 0x300000
  int m = micros();
    8f54:	bl	9b2c <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8f58:	ldr	r4, [pc, #380]	; (90d8 <SdioCard::begin(SdioConfig)+0x280>)
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    8f5a:	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8f5c:	movs	r1, #0
    8f5e:	ldr	r0, [pc, #380]	; (90dc <SdioCard::begin(SdioConfig)+0x284>)
    8f60:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8f64:	cbnz	r0, 8f7c <SdioCard::begin(SdioConfig)+0x124>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8f66:	ldr	r2, [pc, #376]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    8f68:	movw	r1, #621	; 0x26d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f6c:	movs	r3, #23
  m_errorLine = line;
    8f6e:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8f70:	strb	r3, [r5, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    8f72:	movs	r4, #0

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8f74:	mov	r0, r4
    8f76:	add	sp, #68	; 0x44
    8f78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8f7c:	mov	r1, r6
    8f7e:	ldr	r0, [pc, #356]	; (90e4 <SdioCard::begin(SdioConfig)+0x28c>)
    8f80:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8f84:	cmp	r0, #0
    8f86:	beq.n	8f66 <SdioCard::begin(SdioConfig)+0x10e>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8f88:	bl	9b2c <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8f8c:	ldr	r3, [pc, #344]	; (90e8 <SdioCard::begin(SdioConfig)+0x290>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8f8e:	ldr	r2, [pc, #328]	; (90d8 <SdioCard::begin(SdioConfig)+0x280>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8f90:	rsb	r0, r9, r0
    8f94:	cmp	r0, r3
    8f96:	bhi.n	8f66 <SdioCard::begin(SdioConfig)+0x10e>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8f98:	ldr	r3, [r4, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    8f9a:	cmp	r3, #0
    8f9c:	bge.n	8f5c <SdioCard::begin(SdioConfig)+0x104>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    8f9e:	ldr	r3, [pc, #332]	; (90ec <SdioCard::begin(SdioConfig)+0x294>)
    8fa0:	ldr	r1, [r2, #0]
    8fa2:	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    8fa4:	ldr	r3, [r2, #0]
    // Is high capacity.
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8fa6:	ldr	r0, [pc, #328]	; (90f0 <SdioCard::begin(SdioConfig)+0x298>)
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    8fa8:	lsls	r2, r3, #1
    // Is high capacity.
    m_highCapacity = true;
    8faa:	it	mi
    8fac:	movmi	r3, #1
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8fae:	mov.w	r1, #0
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
  if (SDHC_CMDRSP0 & 0x40000000) {
    // Is high capacity.
    m_highCapacity = true;
    8fb2:	it	mi
    8fb4:	strbmi	r3, [r7, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8fb6:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8fba:	mov	r4, r0
    8fbc:	cbnz	r0, 8fe6 <SdioCard::begin(SdioConfig)+0x18e>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8fbe:	ldr	r2, [pc, #288]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    8fc0:	movw	r1, #630	; 0x276
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fc4:	movs	r3, #2

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8fc6:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8fc8:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fca:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8fcc:	add	sp, #68	; 0x44
    8fce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8fd2:	ldr	r2, [pc, #268]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    8fd4:	mov.w	r1, #604	; 0x25c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fd8:	movs	r3, #1

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8fda:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8fdc:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8fde:	strb	r3, [r5, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    8fe0:	add	sp, #68	; 0x44
    8fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8fe6:	movs	r1, #0
    8fe8:	ldr	r0, [pc, #264]	; (90f4 <SdioCard::begin(SdioConfig)+0x29c>)
    8fea:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    8fee:	mov	r4, r0
    8ff0:	cbnz	r0, 9022 <SdioCard::begin(SdioConfig)+0x1ca>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8ff2:	ldr	r2, [pc, #236]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    8ff4:	movw	r1, #633	; 0x279
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ff8:	movs	r3, #3
  m_errorLine = line;
    8ffa:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8ffc:	strb	r3, [r5, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    8ffe:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    9000:	ldr	r3, [pc, #212]	; (90d8 <SdioCard::begin(SdioConfig)+0x280>)
    9002:	ldr	r3, [r3, #0]
    9004:	cmp.w	r3, #426	; 0x1aa
    9008:	beq.n	901a <SdioCard::begin(SdioConfig)+0x1c2>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    900a:	ldr	r2, [pc, #212]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    900c:	movw	r1, #610	; 0x262
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9010:	movs	r3, #6
  m_errorLine = line;
    9012:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9014:	strb	r3, [r5, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    9016:	movs	r4, #0
    9018:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
      }
      m_version2 = true;
    901a:	movs	r3, #1
    901c:	strb	r3, [r6, #0]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    901e:	ldr	r6, [pc, #180]	; (90d4 <SdioCard::begin(SdioConfig)+0x27c>)
    9020:	b.n	8f54 <SdioCard::begin(SdioConfig)+0xfc>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9022:	ldr	r3, [pc, #180]	; (90d8 <SdioCard::begin(SdioConfig)+0x280>)
    9024:	ldr	r6, [pc, #208]	; (90f8 <SdioCard::begin(SdioConfig)+0x2a0>)
    9026:	ldr	r3, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9028:	ldr	r1, [pc, #208]	; (90fc <SdioCard::begin(SdioConfig)+0x2a4>)
    902a:	ldr	r0, [pc, #212]	; (9100 <SdioCard::begin(SdioConfig)+0x2a8>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    902c:	lsrs	r3, r3, #16
    902e:	lsls	r3, r3, #16
    9030:	str	r3, [r6, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9032:	bl	873c <readReg16(unsigned long, void*)>
    9036:	mov	r4, r0
    9038:	cbnz	r0, 9048 <SdioCard::begin(SdioConfig)+0x1f0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    903a:	ldr	r2, [pc, #164]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    903c:	movw	r1, #638	; 0x27e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9040:	movs	r3, #7
  m_errorLine = line;
    9042:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9044:	strb	r3, [r5, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    9046:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9048:	ldr	r1, [pc, #184]	; (9104 <SdioCard::begin(SdioConfig)+0x2ac>)
    904a:	ldr	r0, [pc, #188]	; (9108 <SdioCard::begin(SdioConfig)+0x2b0>)
    904c:	bl	873c <readReg16(unsigned long, void*)>
    9050:	mov	r4, r0
    9052:	cbnz	r0, 9062 <SdioCard::begin(SdioConfig)+0x20a>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9054:	ldr	r2, [pc, #136]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    9056:	movw	r1, #641	; 0x281
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    905a:	movs	r3, #8
  m_errorLine = line;
    905c:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    905e:	strb	r3, [r5, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    9060:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9062:	ldr	r1, [r6, #0]
    9064:	ldr	r0, [pc, #164]	; (910c <SdioCard::begin(SdioConfig)+0x2b4>)
    9066:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    906a:	mov	r4, r0
    906c:	cbnz	r0, 907c <SdioCard::begin(SdioConfig)+0x224>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    906e:	ldr	r2, [pc, #112]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    9070:	mov.w	r1, #644	; 0x284
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9074:	movs	r3, #5
  m_errorLine = line;
    9076:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9078:	strb	r3, [r5, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    907a:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    907c:	ldr	r1, [r6, #0]
    907e:	ldr	r0, [pc, #92]	; (90dc <SdioCard::begin(SdioConfig)+0x284>)
    9080:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    9084:	cmp	r0, #0
    9086:	bne.n	9118 <SdioCard::begin(SdioConfig)+0x2c0>
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9088:	ldr	r2, [pc, #84]	; (90e0 <SdioCard::begin(SdioConfig)+0x288>)
    908a:	mov.w	r1, #648	; 0x288
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    908e:	movs	r3, #20
  m_errorLine = line;
    9090:	str	r1, [r2, #0]
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9092:	strb	r3, [r5, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    9094:	movs	r4, #0
    9096:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>
    9098:	.word	0x1fff097c
    909c:	.word	0x4000d800
    90a0:	.word	0x1fff1bc4
    90a4:	.word	0x1fff1bac
    90a8:	.word	0x40048030
    90ac:	.word	0x4004d000
    90b0:	.word	0x4004d008
    90b4:	.word	0x400b102c
    90b8:	.word	0x4004d00c
    90bc:	.word	0x4004d010
    90c0:	.word	0x117f000b
    90c4:	.word	0x00008449
    90c8:	.word	0xe000e108
    90cc:	.word	0xe000e451
    90d0:	.word	0x081a0000
    90d4:	.word	0x40300000
    90d8:	.word	0x400b1010
    90dc:	.word	0x371a0000
    90e0:	.word	0x1fff1bf0
    90e4:	.word	0x29020000
    90e8:	.word	0x000f4240
    90ec:	.word	0x1fff1bc8
    90f0:	.word	0x02090000
    90f4:	.word	0x031a0000
    90f8:	.word	0x1fff1bcc
    90fc:	.word	0x1fff1bd8
    9100:	.word	0x09090000
    9104:	.word	0x1fff1bb0
    9108:	.word	0x0a090000
    910c:	.word	0x071b0000
    9110:	.word	0x1fff1bd4
    9114:	.word	0x4004d004
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9118:	movs	r1, #2
    911a:	ldr	r0, [pc, #168]	; (91c4 <SdioCard::begin(SdioConfig)+0x36c>)
    911c:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    9120:	mov	r4, r0
    9122:	cmp	r0, #0
    9124:	beq.n	9088 <SdioCard::begin(SdioConfig)+0x230>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9126:	ldr	r3, [pc, #160]	; (91c8 <SdioCard::begin(SdioConfig)+0x370>)
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9128:	ldr	r0, [pc, #160]	; (91cc <SdioCard::begin(SdioConfig)+0x374>)
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    912a:	ldr	r2, [r3, #0]
    912c:	bic.w	r2, r2, #6
    9130:	str	r2, [r3, #0]
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9132:	ldr	r2, [r3, #0]

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9134:	mov.w	r5, #1048592	; 0x100010
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9138:	orr.w	r2, r2, #2
    913c:	str	r2, [r3, #0]
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    913e:	mov	r1, sp
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9140:	str	r5, [r0, #0]

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    9142:	mvn.w	r0, #4278190080	; 0xff000000
    9146:	bl	8dac <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    914a:	cbz	r0, 9154 <SdioCard::begin(SdioConfig)+0x2fc>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    914c:	ldrb.w	r3, [sp, #13]
    9150:	lsls	r3, r3, #30
    9152:	bmi.n	91a6 <SdioCard::begin(SdioConfig)+0x34e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    9154:	movw	r0, #25000	; 0x61a8
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9158:	ldr.w	fp, [pc, #132]	; 91e0 <SdioCard::begin(SdioConfig)+0x388>
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    915c:	ldr.w	sl, [pc, #132]	; 91e4 <SdioCard::begin(SdioConfig)+0x38c>
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9160:	ldr.w	r9, [pc, #132]	; 91e8 <SdioCard::begin(SdioConfig)+0x390>
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    9164:	ldr	r7, [pc, #104]	; (91d0 <SdioCard::begin(SdioConfig)+0x378>)
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    9166:	ldr	r6, [pc, #108]	; (91d4 <SdioCard::begin(SdioConfig)+0x37c>)
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    9168:	ldr	r5, [pc, #108]	; (91d8 <SdioCard::begin(SdioConfig)+0x380>)
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    916a:	movw	r3, #259	; 0x103
    916e:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9172:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9176:	str.w	r3, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    917a:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    917c:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    917e:	str	r3, [r5, #0]
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    9180:	bl	84ec <setSdclk(unsigned long)>
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    9184:	movw	r3, #1091	; 0x443
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9188:	mov.w	r1, #1088	; 0x440
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    918c:	movs	r2, #1
static void enableGPIO(bool enable) {
  const uint32_t PORT_CLK = PORT_PCR_MUX(4) | PORT_PCR_DSE;
  const uint32_t PORT_CMD_DATA = PORT_CLK   | PORT_PCR_PE | PORT_PCR_PS;
  const uint32_t PORT_PUP = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;

  PORTE_PCR0 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D1
    918e:	str.w	r3, [fp]
  PORTE_PCR1 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D0
    9192:	str.w	r3, [sl]
  PORTE_PCR2 = enable ? PORT_CLK      : PORT_PUP;  // SDHC_CLK
    9196:	str.w	r1, [r9]
  PORTE_PCR3 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_CMD
    919a:	str	r3, [r7, #0]
  PORTE_PCR4 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D3
    919c:	str	r3, [r6, #0]
  PORTE_PCR5 = enable ? PORT_CMD_DATA : PORT_PUP;  // SDHC_D2
    919e:	str	r3, [r5, #0]
  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    91a0:	strb.w	r2, [r8]
  return true;
    91a4:	b.n	8f74 <SdioCard::begin(SdioConfig)+0x11c>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    91a6:	mov	r1, sp
    91a8:	ldr	r0, [pc, #48]	; (91dc <SdioCard::begin(SdioConfig)+0x384>)
    91aa:	bl	8dac <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    91ae:	cmp	r0, #0
    91b0:	beq.n	9154 <SdioCard::begin(SdioConfig)+0x2fc>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    91b2:	ldrb.w	r3, [sp, #16]
    91b6:	and.w	r3, r3, #15
    91ba:	cmp	r3, #1
    91bc:	bne.n	9154 <SdioCard::begin(SdioConfig)+0x2fc>
    kHzSdClk = 50000;
    91be:	movw	r0, #50000	; 0xc350
    91c2:	b.n	9158 <SdioCard::begin(SdioConfig)+0x300>
    91c4:	.word	0x061a0000
    91c8:	.word	0x400b1028
    91cc:	.word	0x400b1044
    91d0:	.word	0x4004d00c
    91d4:	.word	0x4004d010
    91d8:	.word	0x4004d014
    91dc:	.word	0x80fffff1
    91e0:	.word	0x4004d000
    91e4:	.word	0x4004d004
    91e8:	.word	0x4004d008

000091ec <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    91ec:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    91ee:	ldr	r3, [pc, #160]	; (9290 <SdioCard::readData(unsigned char*)+0xa4>)
    91f0:	ldr	r3, [r3, #0]
    91f2:	lsls	r0, r3, #22
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    91f4:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    91f6:	bmi.n	9216 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91f8:	ldr	r3, [pc, #152]	; (9294 <SdioCard::readData(unsigned char*)+0xa8>)
    91fa:	ldr	r2, [r3, #0]
    91fc:	bic.w	r2, r2, #65536	; 0x10000
    9200:	str	r2, [r3, #0]
    noInterrupts();
    9202:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9204:	ldr	r2, [r3, #0]
    9206:	orr.w	r2, r2, #131072	; 0x20000
    920a:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    920c:	ldr	r2, [r3, #0]
    920e:	orr.w	r2, r2, #65536	; 0x10000
    9212:	str	r2, [r3, #0]
    interrupts();
    9214:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    9216:	ldr	r0, [pc, #128]	; (9298 <SdioCard::readData(unsigned char*)+0xac>)
    9218:	bl	861c <waitTimeout(bool (*)())>
    921c:	cmp	r0, #0
    921e:	bne.n	927e <SdioCard::readData(unsigned char*)+0x92>
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9220:	ldr	r4, [pc, #108]	; (9290 <SdioCard::readData(unsigned char*)+0xa4>)
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9222:	ldr	r0, [pc, #120]	; (929c <SdioCard::readData(unsigned char*)+0xb0>)
    9224:	subs	r3, r5, #4
    9226:	add.w	r5, r5, #508	; 0x1fc
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    922a:	ldr	r2, [r4, #0]
    922c:	lsls	r1, r2, #20
    922e:	bpl.n	922a <SdioCard::readData(unsigned char*)+0x3e>
    9230:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    9234:	ldr	r2, [r0, #0]
    9236:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    923a:	cmp	r1, r3
    923c:	bne.n	9234 <SdioCard::readData(unsigned char*)+0x48>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    923e:	cmp	r5, r1
    9240:	mov	r3, r1
    9242:	bne.n	922a <SdioCard::readData(unsigned char*)+0x3e>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    9244:	ldr	r0, [pc, #88]	; (92a0 <SdioCard::readData(unsigned char*)+0xb4>)
    9246:	bl	861c <waitTimeout(bool (*)())>
    924a:	cbnz	r0, 926c <SdioCard::readData(unsigned char*)+0x80>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    924c:	ldr	r2, [pc, #84]	; (92a4 <SdioCard::readData(unsigned char*)+0xb8>)
    924e:	ldr	r3, [pc, #88]	; (92a8 <SdioCard::readData(unsigned char*)+0xbc>)
    9250:	ldr	r1, [r2, #0]
    9252:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9254:	ldr	r1, [r3, #0]
    9256:	str	r1, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9258:	ldr	r2, [r3, #0]
    925a:	lsls	r2, r2, #30
    925c:	bpl.n	928e <SdioCard::readData(unsigned char*)+0xa2>
    925e:	ldr	r3, [r3, #0]
    9260:	ldr	r0, [pc, #72]	; (92ac <SdioCard::readData(unsigned char*)+0xc0>)
    9262:	ands	r0, r3
    9264:	clz	r0, r0
    9268:	lsrs	r0, r0, #5
    926a:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    926c:	ldr	r1, [pc, #64]	; (92b0 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    926e:	ldr	r3, [pc, #68]	; (92b4 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9270:	movs	r0, #29
  m_errorLine = line;
    9272:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9276:	strb	r0, [r1, #0]
  m_errorLine = line;
    9278:	str	r2, [r3, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    927a:	movs	r0, #0
    927c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    927e:	ldr	r1, [pc, #48]	; (92b0 <SdioCard::readData(unsigned char*)+0xc4>)
  m_errorLine = line;
    9280:	ldr	r3, [pc, #48]	; (92b4 <SdioCard::readData(unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9282:	movs	r0, #26
  m_errorLine = line;
    9284:	mov.w	r2, #748	; 0x2ec
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9288:	strb	r0, [r1, #0]
  m_errorLine = line;
    928a:	str	r2, [r3, #0]
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    928c:	movs	r0, #0
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    928e:	pop	{r3, r4, r5, pc}
    9290:	.word	0x400b1024
    9294:	.word	0x400b1028
    9298:	.word	0x000084ad
    929c:	.word	0x400b1020
    92a0:	.word	0x000084d5
    92a4:	.word	0x400b1030
    92a8:	.word	0x1fff1bd0
    92ac:	.word	0x117f0000
    92b0:	.word	0x1fff097c
    92b4:	.word	0x1fff1bf0

000092b8 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    92b8:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    92ba:	ldr	r0, [pc, #80]	; (930c <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    92bc:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    92be:	bl	8644 <yieldTimeout(bool (*)())>
    92c2:	cbnz	r0, 92f8 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    92c4:	ldr	r2, [pc, #72]	; (9310 <SdioCard::readStart(unsigned long)+0x58>)
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    92c6:	ldr	r1, [pc, #76]	; (9314 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    92c8:	ldr	r3, [r2, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    92ca:	ldr	r0, [pc, #76]	; (9318 <SdioCard::readStart(unsigned long)+0x60>)
    92cc:	ldr	r5, [pc, #76]	; (931c <SdioCard::readStart(unsigned long)+0x64>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    92ce:	orr.w	r3, r3, #65536	; 0x10000
    92d2:	str	r3, [r2, #0]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    92d4:	ldrb	r3, [r1, #0]
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
    92d6:	str	r5, [r0, #0]
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    92d8:	cbnz	r3, 92f4 <SdioCard::readStart(unsigned long)+0x3c>
    92da:	lsls	r1, r4, #9
    92dc:	ldr	r0, [pc, #64]	; (9320 <SdioCard::readStart(unsigned long)+0x68>)
    92de:	bl	86c0 <cardCommand(unsigned long, unsigned long)>
    92e2:	cbnz	r0, 92f2 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92e4:	ldr	r1, [pc, #60]	; (9324 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    92e6:	ldr	r3, [pc, #64]	; (9328 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92e8:	movs	r4, #12
  m_errorLine = line;
    92ea:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92ee:	strb	r4, [r1, #0]
  m_errorLine = line;
    92f0:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    92f2:	pop	{r3, r4, r5, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    92f4:	mov	r1, r4
    92f6:	b.n	92dc <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92f8:	ldr	r1, [pc, #40]	; (9324 <SdioCard::readStart(unsigned long)+0x6c>)
  m_errorLine = line;
    92fa:	ldr	r3, [pc, #44]	; (9328 <SdioCard::readStart(unsigned long)+0x70>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    92fc:	movs	r0, #10
  m_errorLine = line;
    92fe:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9302:	strb	r0, [r1, #0]
  m_errorLine = line;
    9304:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    9306:	movs	r0, #0
    9308:	pop	{r3, r4, r5, pc}
    930a:	nop
    930c:	.word	0x000087a1
    9310:	.word	0x400b1028
    9314:	.word	0x1fff1bc4
    9318:	.word	0x400b1004
    931c:	.word	0xffff0200
    9320:	.word	0x123a0032
    9324:	.word	0x1fff097c
    9328:	.word	0x1fff1bf0

0000932c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    932c:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    932e:	ldrb	r3, [r0, #8]
    9330:	lsls	r4, r3, #31
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9332:	sub.w	sp, sp, #512	; 0x200
    9336:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9338:	bpl.n	9360 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    933a:	lsls	r3, r2, #30
    933c:	beq.n	937e <SdioCard::readSector(unsigned long, unsigned char*)+0x52>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    933e:	mov	r2, sp
    9340:	movs	r3, #1
    9342:	ldr	r0, [pc, #168]	; (93ec <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    9344:	bl	8808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9348:	cbz	r0, 938a <SdioCard::readSector(unsigned long, unsigned char*)+0x5e>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    934a:	mov	r1, sp
    934c:	mov	r0, r5
    934e:	mov.w	r2, #512	; 0x200
    9352:	bl	9584 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    9356:	movs	r5, #1
}
    9358:	mov	r0, r5
    935a:	add.w	sp, sp, #512	; 0x200
    935e:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    9360:	ldrb	r3, [r0, #9]
    9362:	cmp	r3, #1
    9364:	mov	r4, r0
    9366:	mov	r6, r1
    9368:	beq.n	93a2 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    936a:	ldr	r3, [r4, #0]
    936c:	mov	r0, r4
    936e:	ldr	r3, [r3, #20]
    9370:	blx	r3
    9372:	cbnz	r0, 93c8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
        return false;
    9374:	movs	r5, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9376:	mov	r0, r5
    9378:	add.w	sp, sp, #512	; 0x200
    937c:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    937e:	movs	r3, #1
    9380:	ldr	r0, [pc, #104]	; (93ec <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    9382:	bl	8808 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9386:	cmp	r0, #0
    9388:	bne.n	9356 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    938a:	ldr	r1, [pc, #100]	; (93f0 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    938c:	ldr	r3, [pc, #100]	; (93f4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    938e:	movs	r0, #11
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    9390:	movs	r5, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    9392:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    9396:	strb	r0, [r1, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    9398:	mov	r0, r5
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    939a:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    939c:	add.w	sp, sp, #512	; 0x200
    93a0:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    93a2:	ldr	r3, [r0, #4]
    93a4:	cmp	r1, r3
    93a6:	bne.n	936a <SdioCard::readSector(unsigned long, unsigned char*)+0x3e>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    93a8:	mov	r1, r5
    93aa:	mov	r0, r4
    93ac:	bl	91ec <SdioCard::readData(unsigned char*)>
    93b0:	mov	r5, r0
    93b2:	cmp	r0, #0
    93b4:	beq.n	9374 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
    93b6:	ldr	r3, [pc, #64]	; (93f8 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>)
    93b8:	ldr	r3, [r3, #0]
    93ba:	lsrs	r3, r3, #16
    93bc:	lsls	r3, r3, #16
    93be:	cbz	r3, 93dc <SdioCard::readSector(unsigned long, unsigned char*)+0xb0>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    93c0:	ldr	r3, [r4, #4]
    93c2:	adds	r3, #1
    93c4:	str	r3, [r4, #4]
    93c6:	b.n	9376 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    93c8:	mov	r1, r6
    93ca:	mov	r0, r4
    93cc:	bl	92b8 <SdioCard::readStart(unsigned long)>
    93d0:	cmp	r0, #0
    93d2:	beq.n	9374 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    93d4:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    93d6:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    93d8:	strb	r3, [r4, #9]
    93da:	b.n	93a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
    if (!readData(dst)) {
      return false;
    }
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ((SDHC_BLKATTR & 0XFFFF0000) == 0) {
      if (!syncDevice()) {
    93dc:	ldr	r3, [r4, #0]
    93de:	mov	r0, r4
    93e0:	ldr	r3, [r3, #20]
    93e2:	blx	r3
    93e4:	cmp	r0, #0
    93e6:	bne.n	93c0 <SdioCard::readSector(unsigned long, unsigned char*)+0x94>
    93e8:	b.n	9374 <SdioCard::readSector(unsigned long, unsigned char*)+0x48>
    93ea:	nop
    93ec:	.word	0x113a0011
    93f0:	.word	0x1fff097c
    93f4:	.word	0x1fff1bf0
    93f8:	.word	0x400b1004

000093fc <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    93fc:	push	{r4}
  m_spi->beginTransaction(m_spiSettings);
    93fe:	ldr	r3, [r0, #0]
    9400:	ldr	r2, [r0, #4]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    9402:	ldrb	r1, [r3, #11]
    9404:	cbz	r1, 9446 <SdSpiArduinoDriver::activate()+0x4a>
			__disable_irq();
    9406:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9408:	ldrb	r1, [r3, #11]
    940a:	lsls	r0, r1, #31
    940c:	bpl.n	941c <SdSpiArduinoDriver::activate()+0x20>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    940e:	ldr	r0, [pc, #100]	; (9474 <SdSpiArduinoDriver::activate()+0x78>)
    9410:	ldr	r1, [r3, #12]
    9412:	ldr	r4, [r0, #0]
    9414:	ands	r1, r4
    9416:	str	r1, [r3, #28]
				NVIC_ICER0 = interruptSave[0];
    9418:	str	r1, [r0, #0]
    941a:	ldrb	r1, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    941c:	lsls	r4, r1, #30
    941e:	bpl.n	942e <SdSpiArduinoDriver::activate()+0x32>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9420:	ldr	r0, [pc, #84]	; (9478 <SdSpiArduinoDriver::activate()+0x7c>)
    9422:	ldr	r1, [r3, #16]
    9424:	ldr	r4, [r0, #0]
    9426:	ands	r1, r4
    9428:	str	r1, [r3, #32]
				NVIC_ICER1 = interruptSave[1];
    942a:	str	r1, [r0, #0]
    942c:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    942e:	lsls	r0, r1, #29
    9430:	bpl.n	9440 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9432:	ldr	r0, [pc, #72]	; (947c <SdSpiArduinoDriver::activate()+0x80>)
    9434:	ldr	r1, [r3, #20]
    9436:	ldr	r4, [r0, #0]
    9438:	ands	r1, r4
    943a:	str	r1, [r3, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    943c:	str	r1, [r0, #0]
    943e:	ldrb	r1, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    9440:	lsls	r1, r1, #28
    9442:	bmi.n	9464 <SdSpiArduinoDriver::activate()+0x68>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    9444:	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9446:	ldr	r3, [r3, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    9448:	ldr	r1, [r3, #12]
    944a:	cmp	r1, r2
    944c:	beq.n	945e <SdSpiArduinoDriver::activate()+0x62>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    944e:	ldr	r0, [pc, #48]	; (9480 <SdSpiArduinoDriver::activate()+0x84>)
    9450:	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    9452:	ldr	r1, [pc, #48]	; (9484 <SdSpiArduinoDriver::activate()+0x88>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    9454:	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    9456:	orr.w	r0, r2, #1073741824	; 0x40000000
    945a:	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    945c:	str	r1, [r3, #0]
}
    945e:	ldr.w	r4, [sp], #4
    9462:	bx	lr
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9464:	ldr	r0, [pc, #32]	; (9488 <SdSpiArduinoDriver::activate()+0x8c>)
    9466:	ldr	r1, [r3, #24]
    9468:	ldr	r4, [r0, #0]
    946a:	ands	r1, r4
    946c:	str	r1, [r3, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    946e:	str	r1, [r0, #0]
    9470:	b.n	9444 <SdSpiArduinoDriver::activate()+0x48>
    9472:	nop
    9474:	.word	0xe000e180
    9478:	.word	0xe000e184
    947c:	.word	0xe000e188
    9480:	.word	0x003f4001
    9484:	.word	0x803f0000
    9488:	.word	0xe000e18c

0000948c <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    948c:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    948e:	ldrb	r3, [r2, #11]
    9490:	cbz	r3, 94c0 <SdSpiArduinoDriver::deactivate()+0x34>
			if (interruptMasksUsed & 0x01) {
    9492:	lsls	r1, r3, #31
    9494:	bpl.n	949e <SdSpiArduinoDriver::deactivate()+0x12>
				NVIC_ISER0 = interruptSave[0];
    9496:	ldr	r3, [pc, #44]	; (94c4 <SdSpiArduinoDriver::deactivate()+0x38>)
    9498:	ldr	r1, [r2, #28]
    949a:	str	r1, [r3, #0]
    949c:	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    949e:	lsls	r0, r3, #30
    94a0:	bpl.n	94aa <SdSpiArduinoDriver::deactivate()+0x1e>
				NVIC_ISER1 = interruptSave[1];
    94a2:	ldr	r3, [pc, #36]	; (94c8 <SdSpiArduinoDriver::deactivate()+0x3c>)
    94a4:	ldr	r1, [r2, #32]
    94a6:	str	r1, [r3, #0]
    94a8:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    94aa:	lsls	r1, r3, #29
    94ac:	bpl.n	94b6 <SdSpiArduinoDriver::deactivate()+0x2a>
				NVIC_ISER2 = interruptSave[2];
    94ae:	ldr	r3, [pc, #28]	; (94cc <SdSpiArduinoDriver::deactivate()+0x40>)
    94b0:	ldr	r1, [r2, #36]	; 0x24
    94b2:	str	r1, [r3, #0]
    94b4:	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    94b6:	lsls	r3, r3, #28
    94b8:	bpl.n	94c0 <SdSpiArduinoDriver::deactivate()+0x34>
				NVIC_ISER3 = interruptSave[3];
    94ba:	ldr	r3, [pc, #20]	; (94d0 <SdSpiArduinoDriver::deactivate()+0x44>)
    94bc:	ldr	r2, [r2, #40]	; 0x28
    94be:	str	r2, [r3, #0]
    94c0:	bx	lr
    94c2:	nop
    94c4:	.word	0xe000e100
    94c8:	.word	0xe000e104
    94cc:	.word	0xe000e108
    94d0:	.word	0xe000e10c

000094d4 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    94d4:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    94d6:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    94d8:	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    94dc:	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    94de:	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    94e0:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    94e2:	ldr	r3, [r2, #44]	; 0x2c
    94e4:	cmp	r3, #0
    94e6:	bge.n	94e2 <SdSpiArduinoDriver::receive()+0xe>
		return port().POPR;
    94e8:	ldr	r0, [r2, #56]	; 0x38
  return m_spi->transfer(0XFF);
}
    94ea:	uxtb	r0, r0
    94ec:	bx	lr
    94ee:	nop

000094f0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    94f0:	push	{r4, r5, r6, lr}
    94f2:	mov	r5, r0
    94f4:	mov	r4, r1
    94f6:	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    94f8:	mov	r0, r1
    94fa:	movs	r1, #255	; 0xff
    94fc:	bl	c37c <memset>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9500:	ldr	r0, [r5, #0]
    9502:	mov	r3, r6
    9504:	mov	r2, r4
    9506:	mov	r1, r4
    9508:	bl	3660 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    950c:	movs	r0, #0
    950e:	pop	{r4, r5, r6, pc}

00009510 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    9510:	ldr	r3, [r0, #0]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9512:	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9514:	mov.w	r3, #2147483648	; 0x80000000
    9518:	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    951a:	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    951c:	ldr	r3, [r2, #44]	; 0x2c
    951e:	cmp	r3, #0
    9520:	bge.n	951c <SdSpiArduinoDriver::send(unsigned char)+0xc>
		return port().POPR;
    9522:	ldr	r3, [r2, #56]	; 0x38
    9524:	bx	lr
    9526:	nop

00009528 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9528:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    952a:	subs	r5, r2, #1
    952c:	cmp.w	r5, #512	; 0x200
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9530:	sub.w	sp, sp, #516	; 0x204
    9534:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9536:	bcc.n	955e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9538:	cbz	r2, 9558 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
    953a:	ldr	r2, [r0, #0]
    953c:	ldr	r2, [r2, #0]
    953e:	adds	r0, r1, r3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    9540:	mov.w	r4, #2147483648	; 0x80000000
    m_spi->transfer(buf[i]);
    9544:	ldrb.w	r3, [r1], #1
    9548:	str	r4, [r2, #44]	; 0x2c
		port().PUSHR = data;
    954a:	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    954c:	ldr	r3, [r2, #44]	; 0x2c
    954e:	cmp	r3, #0
    9550:	bge.n	954c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x24>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9552:	cmp	r1, r0
		return port().POPR;
    9554:	ldr	r3, [r2, #56]	; 0x38
    9556:	bne.n	9544 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    9558:	add.w	sp, sp, #516	; 0x204
    955c:	pop	{r4, r5, pc}
    955e:	mov	r5, r0
    9560:	mov	r4, r2
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    9562:	mov	r0, sp
    9564:	bl	9584 <memcpy>
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    9568:	mov	r3, r4
    956a:	mov	r2, sp
    956c:	mov	r1, sp
    956e:	ldr	r0, [r5, #0]
    9570:	bl	3660 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    9574:	add.w	sp, sp, #516	; 0x204
    9578:	pop	{r4, r5, pc}
    957a:	nop

0000957c <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    957c:	b.w	9b14 <digitalWrite>

00009580 <usb_mtp_configure>:
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
	}

#else
	void usb_mtp_configure(void) {}
    9580:	bx	lr
    9582:	nop

00009584 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9584:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9586:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    958a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    958e:	bne.n	966c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9590:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9592:	bcc.n	9618 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9594:	ldr.w	r3, [r1], #4
    9598:	str.w	r3, [r0], #4
    959c:	ldr.w	r3, [r1], #4
    95a0:	str.w	r3, [r0], #4
    95a4:	ldr.w	r3, [r1], #4
    95a8:	str.w	r3, [r0], #4
    95ac:	ldr.w	r3, [r1], #4
    95b0:	str.w	r3, [r0], #4
    95b4:	ldr.w	r3, [r1], #4
    95b8:	str.w	r3, [r0], #4
    95bc:	ldr.w	r3, [r1], #4
    95c0:	str.w	r3, [r0], #4
    95c4:	ldr.w	r3, [r1], #4
    95c8:	str.w	r3, [r0], #4
    95cc:	ldr.w	r3, [r1], #4
    95d0:	str.w	r3, [r0], #4
    95d4:	ldr.w	r3, [r1], #4
    95d8:	str.w	r3, [r0], #4
    95dc:	ldr.w	r3, [r1], #4
    95e0:	str.w	r3, [r0], #4
    95e4:	ldr.w	r3, [r1], #4
    95e8:	str.w	r3, [r0], #4
    95ec:	ldr.w	r3, [r1], #4
    95f0:	str.w	r3, [r0], #4
    95f4:	ldr.w	r3, [r1], #4
    95f8:	str.w	r3, [r0], #4
    95fc:	ldr.w	r3, [r1], #4
    9600:	str.w	r3, [r0], #4
    9604:	ldr.w	r3, [r1], #4
    9608:	str.w	r3, [r0], #4
    960c:	ldr.w	r3, [r1], #4
    9610:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9614:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9616:	bcs.n	9594 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9618:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    961a:	bcc.n	9640 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    961c:	ldr.w	r3, [r1], #4
    9620:	str.w	r3, [r0], #4
    9624:	ldr.w	r3, [r1], #4
    9628:	str.w	r3, [r0], #4
    962c:	ldr.w	r3, [r1], #4
    9630:	str.w	r3, [r0], #4
    9634:	ldr.w	r3, [r1], #4
    9638:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    963c:	subs	r2, #16
	bhs	.Lmid_block_loop
    963e:	bcs.n	961c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9640:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9642:	bcc.n	9650 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9644:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9648:	str.w	r3, [r0], #4
	subs	r2, #4
    964c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    964e:	bcs.n	9644 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9650:	adds	r2, #4
	beq	.Ldone
    9652:	beq.n	9666 <memcpy+0xe2>

	lsls	r2, r2, #31
    9654:	lsls	r2, r2, #31
	itt ne
    9656:	itt	ne
	ldrbne  r3, [r1], #1
    9658:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    965c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9660:	bcc.n	9666 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9662:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9664:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9666:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9668:	bx	lr
    966a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    966c:	cmp	r2, #8
	blo	.Lbyte_copy
    966e:	bcc.n	9698 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9670:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9672:	beq.n	9590 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9674:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9678:	beq.n	9590 <memcpy+0xc>

	rsb	r3, #4
    967a:	rsb	r3, r3, #4
	subs	r2, r3
    967e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9680:	lsls	r3, r3, #31
	itt ne
    9682:	itt	ne
	ldrbne  r3, [r1], #1
    9684:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9688:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    968c:	bcc.n	9590 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    968e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9692:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9696:	b.n	9590 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9698:	subs	r2, #4
	blo	.Lcopy_less_than_4
    969a:	bcc.n	9650 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    969c:	subs	r2, #1
	ldrb    r3, [r1], #1
    969e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    96a2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    96a6:	bcs.n	969c <memcpy+0x118>

	ldrb	r3, [r1]
    96a8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    96aa:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    96ac:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    96ae:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    96b0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    96b2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    96b4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    96b6:	bx	lr

000096b8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    96b8:	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    96ba:	ldr	r5, [pc, #60]	; (96f8 <usb_serial_getchar+0x40>)
    96bc:	ldr	r0, [r5, #0]
    96be:	cbz	r0, 96e0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    96c0:	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    96c2:	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    96c4:	adds	r1, r0, r3
    96c6:	adds	r3, #1
	if (i >= rx_packet->len) {
    96c8:	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    96ca:	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    96cc:	bcs.n	96d4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    96ce:	strh	r3, [r0, #2]
	}
	return c;
    96d0:	mov	r0, r4
}
    96d2:	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    96d4:	bl	9db8 <usb_free>
		rx_packet = NULL;
    96d8:	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    96da:	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    96dc:	str	r3, [r5, #0]
    96de:	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    96e0:	ldr	r3, [pc, #24]	; (96fc <usb_serial_getchar+0x44>)
    96e2:	ldrb	r3, [r3, #0]
    96e4:	cbz	r3, 96f2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    96e6:	movs	r0, #2
    96e8:	bl	9e04 <usb_rx>
    96ec:	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    96ee:	cmp	r0, #0
    96f0:	bne.n	96c0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    96f2:	mov.w	r0, #4294967295
    96f6:	pop	{r3, r4, r5, pc}
    96f8:	.word	0x1fff1c00
    96fc:	.word	0x1fff1d0c

00009700 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    9700:	push	{r4, lr}
	if (!rx_packet) {
    9702:	ldr	r4, [pc, #36]	; (9728 <usb_serial_peekchar+0x28>)
    9704:	ldr	r0, [r4, #0]
    9706:	cbz	r0, 9710 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    9708:	ldrh	r3, [r0, #2]
    970a:	add	r0, r3
    970c:	ldrb	r0, [r0, #8]
}
    970e:	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9710:	ldr	r3, [pc, #24]	; (972c <usb_serial_peekchar+0x2c>)
    9712:	ldrb	r3, [r3, #0]
    9714:	cbz	r3, 9722 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    9716:	movs	r0, #2
    9718:	bl	9e04 <usb_rx>
    971c:	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    971e:	cmp	r0, #0
    9720:	bne.n	9708 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    9722:	mov.w	r0, #4294967295
    9726:	pop	{r4, pc}
    9728:	.word	0x1fff1c00
    972c:	.word	0x1fff1d0c

00009730 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9730:	ldr	r3, [pc, #16]	; (9744 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    9732:	ldr	r2, [pc, #20]	; (9748 <usb_serial_available+0x18>)
    9734:	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    9736:	ldrh	r0, [r2, #2]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    9738:	cbz	r3, 9742 <usb_serial_available+0x12>
    973a:	ldrh	r2, [r3, #0]
    973c:	ldrh	r3, [r3, #2]
    973e:	subs	r3, r2, r3
    9740:	add	r0, r3
	return count;
}
    9742:	bx	lr
    9744:	.word	0x1fff1c00
    9748:	.word	0x1fff1d88

0000974c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    974c:	ldr	r3, [pc, #44]	; (977c <usb_serial_flush_input+0x30>)
    974e:	ldrb	r3, [r3, #0]
    9750:	cbz	r3, 977a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    9752:	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    9754:	ldr	r4, [pc, #40]	; (9780 <usb_serial_flush_input+0x34>)
    9756:	ldr	r0, [r4, #0]
    9758:	cbz	r0, 976e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    975a:	bl	9db8 <usb_free>
		rx_packet = NULL;
    975e:	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9760:	movs	r0, #2
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    9762:	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    9764:	bl	9e04 <usb_rx>
		if (!rx) break;
    9768:	cbz	r0, 9778 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    976a:	bl	9db8 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    976e:	movs	r0, #2
    9770:	bl	9e04 <usb_rx>
		if (!rx) break;
    9774:	cmp	r0, #0
    9776:	bne.n	976a <usb_serial_flush_input+0x1e>
    9778:	pop	{r4, pc}
    977a:	bx	lr
    977c:	.word	0x1fff1d0c
    9780:	.word	0x1fff1c00

00009784 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    9784:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    9788:	ldr.w	r9, [pc, #248]	; 9884 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    978c:	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    978e:	movs	r2, #1
    9790:	strb.w	r2, [r9]
	while (size > 0) {
    9794:	str	r1, [sp, #4]
    9796:	cbz	r1, 97f4 <usb_serial_write+0x70>
    9798:	ldr.w	r8, [pc, #236]	; 9888 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    979c:	ldr	r7, [pc, #216]	; (9878 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    979e:	ldr	r6, [sp, #4]
    97a0:	mov	fp, r0
		if (!tx_packet) {
    97a2:	ldr.w	r0, [r8]
    97a6:	cbz	r0, 9816 <usb_serial_write+0x92>
    97a8:	ldr	r5, [pc, #208]	; (987c <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    97aa:	ldrh	r4, [r0, #2]
    97ac:	rsb	r1, r4, #64	; 0x40
    97b0:	cmp	r1, r6
    97b2:	it	cs
    97b4:	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    97b6:	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    97ba:	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    97bc:	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    97c0:	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    97c2:	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    97c4:	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    97c8:	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    97cc:	cbz	r1, 97e4 <usb_serial_write+0x60>
    97ce:	subs	r4, #1
    97d0:	add	r2, r4
    97d2:	add	r1, fp
    97d4:	ldrb.w	r4, [fp], #1
    97d8:	strb.w	r4, [r2, #1]!
    97dc:	cmp	fp, r1
    97de:	bne.n	97d4 <usb_serial_write+0x50>
    97e0:	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    97e4:	cmp.w	lr, #63	; 0x3f
    97e8:	bhi.n	9802 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    97ea:	ldr	r2, [pc, #148]	; (9880 <usb_serial_write+0xfc>)
    97ec:	movs	r1, #5
    97ee:	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    97f0:	cmp	r6, #0
    97f2:	bne.n	97a2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    97f4:	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    97f6:	movs	r3, #0
    97f8:	strb.w	r3, [r9]
	return ret;
}
    97fc:	add	sp, #12
    97fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    9802:	movs	r2, #64	; 0x40
    9804:	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9806:	mov	r1, r0
    9808:	movs	r0, #3
    980a:	bl	9f74 <usb_tx>
			tx_packet = NULL;
    980e:	movs	r2, #0
    9810:	str.w	r2, [r8]
    9814:	b.n	97ea <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9816:	ldrb	r2, [r7, #0]
    9818:	cbz	r2, 9866 <usb_serial_write+0xe2>
    981a:	ldr	r5, [pc, #96]	; (987c <usb_serial_write+0xf8>)
    981c:	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    9820:	mov.w	sl, #1
    9824:	b.n	9836 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9826:	subs	r4, #1
    9828:	beq.n	9858 <usb_serial_write+0xd4>
    982a:	ldrb	r2, [r5, #0]
    982c:	cbnz	r2, 9858 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    982e:	bl	ab08 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    9832:	ldrb	r2, [r7, #0]
    9834:	cbz	r2, 9866 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    9836:	movs	r0, #3
    9838:	bl	9e40 <usb_tx_packet_count>
    983c:	cmp	r0, #7
    983e:	bhi.n	9826 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    9840:	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    9844:	bl	9d78 <usb_malloc>
    9848:	str.w	r0, [r8]
					if (tx_packet) break;
    984c:	cmp	r0, #0
    984e:	bne.n	97aa <usb_serial_write+0x26>
					tx_noautoflush = 0;
    9850:	ldr	r3, [pc, #48]	; (9884 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9852:	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    9854:	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    9856:	bne.n	982a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    9858:	movs	r3, #1
					return -1;
    985a:	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    985e:	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9860:	add	sp, #12
    9862:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    9866:	movs	r3, #0
					return -1;
    9868:	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    986c:	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    9870:	add	sp, #12
    9872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9876:	nop
    9878:	.word	0x1fff1d0c
    987c:	.word	0x1fff1bfc
    9880:	.word	0x1fff1bf4
    9884:	.word	0x1fff1bf5
    9888:	.word	0x1fff1bf8

0000988c <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    988c:	push	{lr}
    988e:	sub	sp, #12
    9890:	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    9892:	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    9894:	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    9898:	mov	r0, r3
    989a:	bl	9784 <usb_serial_write>
}
    989e:	add	sp, #12
    98a0:	ldr.w	pc, [sp], #4

000098a4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    98a4:	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    98a6:	ldr	r5, [pc, #56]	; (98e0 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    98a8:	ldr	r4, [pc, #56]	; (98e4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    98aa:	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    98ac:	movs	r3, #1
    98ae:	strb	r3, [r4, #0]
	if (!tx_packet) {
    98b0:	cbz	r0, 98be <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    98b2:	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    98b4:	movs	r3, #0
    98b6:	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    98b8:	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    98bc:	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    98be:	ldr	r3, [pc, #40]	; (98e8 <usb_serial_write_buffer_free+0x44>)
    98c0:	ldrb	r3, [r3, #0]
    98c2:	cbnz	r3, 98ca <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    98c4:	movs	r0, #0
    98c6:	strb	r0, [r4, #0]
			return 0;
    98c8:	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    98ca:	movs	r0, #3
    98cc:	bl	9e40 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    98d0:	cmp	r0, #7
    98d2:	bhi.n	98c4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    98d4:	bl	9d78 <usb_malloc>
    98d8:	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    98da:	cmp	r0, #0
    98dc:	bne.n	98b2 <usb_serial_write_buffer_free+0xe>
    98de:	b.n	98c4 <usb_serial_write_buffer_free+0x20>
    98e0:	.word	0x1fff1bf8
    98e4:	.word	0x1fff1bf5
    98e8:	.word	0x1fff1d0c

000098ec <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    98ec:	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    98ee:	ldr	r3, [pc, #68]	; (9934 <usb_serial_flush_output+0x48>)
    98f0:	ldrb	r3, [r3, #0]
    98f2:	cbz	r3, 9918 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    98f4:	ldr	r6, [pc, #64]	; (9938 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    98f6:	ldr	r5, [pc, #68]	; (993c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    98f8:	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    98fa:	movs	r7, #1
    98fc:	strb	r7, [r5, #0]
	if (tx_packet) {
    98fe:	cbz	r4, 991a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    9900:	ldr	r2, [pc, #60]	; (9940 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    9902:	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    9904:	movs	r7, #0
    9906:	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    9908:	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    990a:	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    990c:	movs	r0, #3
    990e:	bl	9f74 <usb_tx>
		tx_packet = NULL;
    9912:	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    9914:	movs	r3, #0
    9916:	strb	r3, [r5, #0]
    9918:	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    991a:	bl	9d78 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    991e:	ldr	r3, [pc, #32]	; (9940 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    9920:	cbz	r0, 992e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    9922:	mov	r1, r0
    9924:	movs	r0, #3
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    9926:	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    9928:	bl	9f74 <usb_tx>
    992c:	b.n	9914 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    992e:	strb	r7, [r3, #0]
    9930:	b.n	9914 <usb_serial_flush_output+0x28>
    9932:	nop
    9934:	.word	0x1fff1d0c
    9938:	.word	0x1fff1bf8
    993c:	.word	0x1fff1bf5
    9940:	.word	0x1fff1bf4

00009944 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    9944:	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    9946:	ldr	r3, [pc, #56]	; (9980 <usb_serial_flush_callback+0x3c>)
    9948:	ldrb	r3, [r3, #0]
    994a:	cbnz	r3, 996a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    994c:	ldr	r4, [pc, #52]	; (9984 <usb_serial_flush_callback+0x40>)
    994e:	ldr	r1, [r4, #0]
    9950:	cbz	r1, 996c <usb_serial_flush_callback+0x28>
    9952:	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    9956:	ldrh	r3, [r1, #2]
    9958:	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    995a:	movs	r0, #3
    995c:	bl	9f74 <usb_tx>
		tx_packet = NULL;
    9960:	str	r5, [r4, #0]
    9962:	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    9964:	ldr	r3, [pc, #32]	; (9988 <usb_serial_flush_callback+0x44>)
    9966:	movs	r2, #1
    9968:	strb	r2, [r3, #0]
    996a:	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    996c:	bl	9d78 <usb_malloc>
		if (tx) {
    9970:	cmp	r0, #0
    9972:	beq.n	9964 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    9974:	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    9976:	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    997a:	movs	r0, #3
    997c:	b.w	9f74 <usb_tx>
    9980:	.word	0x1fff1bf5
    9984:	.word	0x1fff1bf8
    9988:	.word	0x1fff1bf4

0000998c <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    998c:	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    998e:	ldr	r4, [pc, #64]	; (99d0 <fault_isr+0x44>)
    9990:	b.n	99a4 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9992:	ldr	r3, [r4, #0]
    9994:	lsls	r1, r3, #21
    9996:	bmi.n	99b4 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9998:	ldr	r3, [r4, #0]
    999a:	lsls	r2, r3, #20
    999c:	bmi.n	99be <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    999e:	ldr	r3, [r4, #0]
    99a0:	lsls	r3, r3, #19
    99a2:	bmi.n	99c8 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    99a4:	ldr	r3, [r4, #0]
    99a6:	lsls	r0, r3, #13
    99a8:	bpl.n	9992 <fault_isr+0x6>
    99aa:	bl	9ff8 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    99ae:	ldr	r3, [r4, #0]
    99b0:	lsls	r1, r3, #21
    99b2:	bpl.n	9998 <fault_isr+0xc>
    99b4:	bl	99d4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    99b8:	ldr	r3, [r4, #0]
    99ba:	lsls	r2, r3, #20
    99bc:	bpl.n	999e <fault_isr+0x12>
    99be:	bl	99d4 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    99c2:	ldr	r3, [r4, #0]
    99c4:	lsls	r3, r3, #19
    99c6:	bpl.n	99a4 <fault_isr+0x18>
    99c8:	bl	99d4 <unused_isr>
    99cc:	b.n	99a4 <fault_isr+0x18>
    99ce:	nop
    99d0:	.word	0x40048034

000099d4 <unused_isr>:
	}
}

void unused_isr(void)
{
    99d4:	push	{r3, lr}
	fault_isr();
    99d6:	bl	998c <fault_isr>
    99da:	nop

000099dc <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    99dc:	ldr	r3, [pc, #4]	; (99e4 <startup_early_hook+0x8>)
    99de:	movs	r2, #16
    99e0:	strh	r2, [r3, #0]
    99e2:	bx	lr
    99e4:	.word	0x40052000

000099e8 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    99e8:	bx	lr
    99ea:	nop

000099ec <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    99ec:	ldr	r1, [pc, #36]	; (9a14 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    99ee:	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    99f0:	ldr	r3, [r1, #0]
	if (incr != 0) {
    99f2:	cbz	r0, 9a02 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    99f4:	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    99f6:	add	r0, r3
    99f8:	sub.w	r2, r2, #8192	; 0x2000
    99fc:	cmp	r0, r2
    99fe:	bcs.n	9a06 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9a00:	str	r0, [r1, #0]
	}
	return prev;
    9a02:	mov	r0, r3
}
    9a04:	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    9a06:	bl	bb90 <__errno>
    9a0a:	movs	r3, #12
    9a0c:	str	r3, [r0, #0]
			return (void *)-1;
    9a0e:	mov.w	r0, #4294967295
    9a12:	pop	{r3, pc}
    9a14:	.word	0x1fff0980

00009a18 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    9a18:	b.n	9a18 <__cxa_pure_virtual>
    9a1a:	nop

00009a1c <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9a1c:	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9a1e:	ldr	r3, [pc, #68]	; (9a64 <digitalWrite.part.1+0x48>)
    9a20:	ldr.w	r2, [r3, r0, lsl #3]
    9a24:	ldrb.w	r4, [r2, #640]	; 0x280
    9a28:	cbz	r4, 9a38 <digitalWrite.part.1+0x1c>
		if (val) {
			*portSetRegister(pin) = 1;
    9a2a:	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    9a2c:	cbz	r1, 9a4e <digitalWrite.part.1+0x32>
			*portSetRegister(pin) = 1;
    9a2e:	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9a32:	ldr.w	r4, [sp], #4
    9a36:	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    9a38:	add.w	r3, r3, r0, lsl #3
    9a3c:	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9a3e:	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    9a40:	cbnz	r1, 9a58 <digitalWrite.part.1+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    9a42:	bic.w	r2, r2, #2
    9a46:	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9a48:	ldr.w	r4, [sp], #4
    9a4c:	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    9a4e:	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9a52:	ldr.w	r4, [sp], #4
    9a56:	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9a58:	orr.w	r2, r2, #3
    9a5c:	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9a5e:	ldr.w	r4, [sp], #4
    9a62:	bx	lr
    9a64:	.word	0x00010144

00009a68 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9a68:	ldr	r2, [pc, #112]	; (9adc <pinMode.part.2+0x74>)
    9a6a:	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9a6e:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    9a70:	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9a72:	beq.n	9a98 <pinMode.part.2+0x30>
    9a74:	cmp	r1, #4
    9a76:	beq.n	9ab0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9a78:	ldr.w	r0, [r2, r0, lsl #3]
    9a7c:	movs	r2, #0
    9a7e:	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    9a82:	cbz	r1, 9a90 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9a84:	cmp	r1, #2
    9a86:	beq.n	9aca <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9a88:	cmp	r1, #3
    9a8a:	beq.n	9ad2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9a8c:	str	r2, [r3, #0]
    9a8e:	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9a90:	mov.w	r2, #256	; 0x100
    9a94:	str	r2, [r3, #0]
    9a96:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9a98:	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9a9c:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9aa0:	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9aa4:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9aa6:	ldr	r2, [r3, #0]
    9aa8:	bic.w	r2, r2, #32
    9aac:	str	r2, [r3, #0]
    9aae:	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9ab0:	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9ab4:	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    9ab8:	movs	r0, #1
    9aba:	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9abe:	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    9ac0:	ldr	r2, [r3, #0]
    9ac2:	orr.w	r2, r2, #32
    9ac6:	str	r2, [r3, #0]
    9ac8:	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    9aca:	movw	r2, #259	; 0x103
    9ace:	str	r2, [r3, #0]
    9ad0:	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9ad2:	mov.w	r2, #258	; 0x102
    9ad6:	str	r2, [r3, #0]
    9ad8:	bx	lr
    9ada:	nop
    9adc:	.word	0x00010144

00009ae0 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    9ae0:	adds	r0, #16
    9ae2:	ldr	r3, [pc, #8]	; (9aec <attachInterruptVector+0xc>)
    9ae4:	str.w	r1, [r3, r0, lsl #2]
    9ae8:	bx	lr
    9aea:	nop
    9aec:	.word	0x1fff0200

00009af0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    9af0:	push	{r4, r5}
	RTC_SR = 0;
    9af2:	ldr	r3, [pc, #20]	; (9b08 <rtc_set+0x18>)
	RTC_TPR = 0;
    9af4:	ldr	r5, [pc, #20]	; (9b0c <rtc_set+0x1c>)
	RTC_TSR = t;
    9af6:	ldr	r4, [pc, #24]	; (9b10 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9af8:	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    9afa:	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    9afc:	str	r2, [r3, #0]
	RTC_TPR = 0;
    9afe:	str	r2, [r5, #0]
	RTC_TSR = t;
    9b00:	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    9b02:	str	r1, [r3, #0]
}
    9b04:	pop	{r4, r5}
    9b06:	bx	lr
    9b08:	.word	0x4003d014
    9b0c:	.word	0x4003d004
    9b10:	.word	0x4003d000

00009b14 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    9b14:	cmp	r0, #63	; 0x3f
    9b16:	bhi.n	9b1c <digitalWrite+0x8>
    9b18:	b.w	9a1c <digitalWrite.part.1>
    9b1c:	bx	lr
    9b1e:	nop

00009b20 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    9b20:	cmp	r0, #63	; 0x3f
    9b22:	bhi.n	9b28 <pinMode+0x8>
    9b24:	b.w	9a68 <pinMode.part.2>
    9b28:	bx	lr
    9b2a:	nop

00009b2c <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b2c:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9b2e:	ldr	r1, [pc, #48]	; (9b60 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b30:	ldr	r3, [pc, #48]	; (9b64 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b32:	ldr	r2, [pc, #52]	; (9b68 <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b34:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9b36:	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b38:	ldr	r2, [r2, #0]
	__enable_irq();
    9b3a:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b3c:	lsls	r2, r2, #5
    9b3e:	bpl.n	9b46 <micros+0x1a>
    9b40:	cmp	r3, #50	; 0x32
    9b42:	it	hi
    9b44:	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b46:	ldr	r1, [pc, #36]	; (9b6c <micros+0x40>)
    9b48:	rsb	r3, r3, #95744	; 0x17600
    9b4c:	mov.w	r2, #1000	; 0x3e8
    9b50:	adds	r3, #255	; 0xff
    9b52:	umull	r1, r3, r1, r3
    9b56:	mul.w	r0, r2, r0
}
    9b5a:	add.w	r0, r0, r3, lsr #6
    9b5e:	bx	lr
    9b60:	.word	0x1fff1c08
    9b64:	.word	0xe000e018
    9b68:	.word	0xe000ed04
    9b6c:	.word	0xaaaaaaab

00009b70 <delay>:

void delay(uint32_t ms)
{
    9b70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b74:	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9b76:	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    9b78:	ldr	r7, [pc, #128]	; (9bfc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b7a:	ldr	r3, [pc, #132]	; (9c00 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b7c:	ldr	r2, [pc, #132]	; (9c04 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b7e:	ldr	r3, [r3, #0]
	count = systick_millis_count;
    9b80:	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b82:	ldr	r2, [r2, #0]
	__enable_irq();
    9b84:	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9b86:	lsls	r2, r2, #5
    9b88:	bpl.n	9b90 <delay+0x20>
    9b8a:	cmp	r3, #50	; 0x32
    9b8c:	it	hi
    9b8e:	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    9b90:	cbz	r5, 9bf8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9b92:	rsb	r3, r3, #95744	; 0x17600
    9b96:	ldr	r6, [pc, #112]	; (9c08 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    9b98:	ldr.w	r9, [pc, #100]	; 9c00 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9b9c:	ldr.w	r8, [pc, #100]	; 9c04 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9ba0:	adds	r3, #255	; 0xff
    9ba2:	mov.w	r2, #1000	; 0x3e8
    9ba6:	umull	r1, r3, r6, r3
    9baa:	mul.w	r4, r2, r4
    9bae:	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9bb2:	cpsid	i
	current = SYST_CVR;
    9bb4:	ldr.w	r1, [r9]
	count = systick_millis_count;
    9bb8:	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9bba:	ldr.w	lr, [r8]
	__enable_irq();
    9bbe:	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9bc0:	rsb	r3, r1, #95744	; 0x17600
    9bc4:	adds	r3, #255	; 0xff
    9bc6:	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bca:	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9bce:	rsb	r3, r4, r3, lsr #6
    9bd2:	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9bd6:	beq.n	9bde <delay+0x6e>
    9bd8:	cmp	r1, #50	; 0x32
    9bda:	it	hi
    9bdc:	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    9bde:	mla	r3, r0, r2, r3
    9be2:	cmp.w	r3, #1000	; 0x3e8
    9be6:	bcc.n	9bf2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    9be8:	subs	r5, #1
    9bea:	beq.n	9bf8 <delay+0x88>
				start += 1000;
    9bec:	add.w	r4, r4, #1000	; 0x3e8
    9bf0:	b.n	9bb2 <delay+0x42>
			}
			yield();
    9bf2:	bl	ab08 <yield>
		}
    9bf6:	b.n	9bb2 <delay+0x42>
    9bf8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9bfc:	.word	0x1fff1c08
    9c00:	.word	0xe000e018
    9c04:	.word	0xe000ed04
    9c08:	.word	0xaaaaaaab

00009c0c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    9c0c:	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9c0e:	ldr	r3, [pc, #312]	; (9d48 <_init_Teensyduino_internal_+0x13c>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9c10:	ldr	r0, [pc, #312]	; (9d4c <_init_Teensyduino_internal_+0x140>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    9c12:	ldr.w	ip, [pc, #348]	; 9d70 <_init_Teensyduino_internal_+0x164>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    9c16:	ldr	r4, [pc, #312]	; (9d50 <_init_Teensyduino_internal_+0x144>)
	FTM0_C2SC = 0x28;
    9c18:	ldr	r1, [pc, #312]	; (9d54 <_init_Teensyduino_internal_+0x148>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9c1a:	ldr.w	lr, [pc, #344]	; 9d74 <_init_Teensyduino_internal_+0x168>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    9c1e:	ldr	r6, [pc, #312]	; (9d58 <_init_Teensyduino_internal_+0x14c>)
	FTM0_C4SC = 0x28;
    9c20:	ldr	r5, [pc, #312]	; (9d5c <_init_Teensyduino_internal_+0x150>)
	FTM0_C5SC = 0x28;
    9c22:	ldr	r7, [pc, #316]	; (9d60 <_init_Teensyduino_internal_+0x154>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9c24:	mov.w	r2, #134217728	; 0x8000000
    9c28:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9c2a:	mov.w	r2, #268435456	; 0x10000000
    9c2e:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9c30:	mov.w	r2, #536870912	; 0x20000000
    9c34:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9c36:	mov.w	r2, #1073741824	; 0x40000000
    9c3a:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9c3c:	mov.w	r2, #2147483648	; 0x80000000
    9c40:	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    9c42:	movs	r2, #0
    9c44:	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9c46:	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    9c48:	movw	r0, #49151	; 0xbfff
    9c4c:	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9c50:	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    9c54:	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9c56:	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    9c5a:	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    9c5c:	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    9c5e:	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9c60:	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    9c64:	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    9c66:	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    9c6a:	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9c6c:	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    9c70:	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9c72:	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    9c76:	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9c7a:	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    9c7e:	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    9c82:	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    9c86:	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    9c88:	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    9c8c:	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    9c8e:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9c90:	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    9c92:	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    9c96:	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    9c98:	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    9c9a:	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c9c:	ldr	r4, [pc, #196]	; (9d64 <_init_Teensyduino_internal_+0x158>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    9c9e:	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    9ca0:	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9ca2:	movs	r1, #9
    9ca4:	str	r1, [r4, #0]
	FTM1_CNT = 0;
    9ca6:	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    9caa:	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9cae:	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    9cb0:	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    9cb2:	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9cb4:	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    9cb6:	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    9cb8:	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9cba:	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9cbe:	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    9cc2:	add.w	r7, r7, #520192	; 0x7f000
    9cc6:	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    9cc8:	addw	r4, r4, #2044	; 0x7fc
    9ccc:	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9cce:	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    9cd0:	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    9cd2:	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9cd4:	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    9cd8:	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    9cda:	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    9cde:	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    9ce2:	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9ce4:	sub.w	r4, r4, #460800	; 0x70800
    9ce8:	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    9cec:	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    9cee:	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9cf0:	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9cf4:	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9cf6:	ldr	r0, [pc, #112]	; (9d68 <_init_Teensyduino_internal_+0x15c>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9cf8:	orr.w	r1, r1, #512	; 0x200
    9cfc:	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9cfe:	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9d00:	ldr	r4, [pc, #104]	; (9d6c <_init_Teensyduino_internal_+0x160>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    9d02:	add.w	lr, lr, #65280	; 0xff00
    9d06:	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    9d0a:	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    9d0e:	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    9d12:	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9d16:	orr.w	r1, r1, #33554432	; 0x2000000
    9d1a:	str	r1, [r0, #0]
	TPM1_CNT = 0;
    9d1c:	str.w	r2, [lr]
	TPM1_MOD = 32767;
    9d20:	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9d24:	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    9d26:	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    9d28:	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    9d2a:	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9d2c:	str	r2, [r4, #0]
#endif
	analog_init();
    9d2e:	bl	ad98 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    9d32:	movs	r0, #25
    9d34:	bl	9b70 <delay>
	usb_init();
    9d38:	bl	aa40 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9d3c:	movw	r0, #275	; 0x113
}
    9d40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    9d44:	b.w	9b70 <delay>
    9d48:	.word	0xe000e104
    9d4c:	.word	0x40038004
    9d50:	.word	0x40038014
    9d54:	.word	0x4003801c
    9d58:	.word	0x40038024
    9d5c:	.word	0x4003802c
    9d60:	.word	0x40038034
    9d64:	.word	0x40038000
    9d68:	.word	0x40048004
    9d6c:	.word	0x400c9000
    9d70:	.word	0x40038008
    9d74:	.word	0x4003800c

00009d78 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9d78:	cpsid	i
	avail = usb_buffer_available;
    9d7a:	ldr	r0, [pc, #52]	; (9db0 <usb_malloc+0x38>)
    9d7c:	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9d7e:	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    9d82:	cmp	r3, #19
    9d84:	bgt.n	9da8 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    9d86:	mov.w	r1, #2147483648	; 0x80000000
    9d8a:	lsrs	r1, r3
    9d8c:	bic.w	r2, r2, r1
    9d90:	str	r2, [r0, #0]
	__enable_irq();
    9d92:	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    9d94:	ldr	r0, [pc, #28]	; (9db4 <usb_malloc+0x3c>)
    9d96:	add.w	r3, r3, r3, lsl #3
    9d9a:	lsls	r3, r3, #3
    9d9c:	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    9d9e:	movs	r1, #0
    9da0:	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    9da2:	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    9da4:	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    9da6:	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    9da8:	cpsie	i
		return NULL;
    9daa:	movs	r0, #0
    9dac:	bx	lr
    9dae:	nop
    9db0:	.word	0x1fff0984
    9db4:	.word	0x1fff03d0

00009db8 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    9db8:	ldr	r3, [pc, #52]	; (9df0 <usb_free+0x38>)
    9dba:	ldr	r2, [pc, #56]	; (9df4 <usb_free+0x3c>)
    9dbc:	subs	r3, r0, r3
    9dbe:	umull	r2, r3, r2, r3
    9dc2:	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    9dc4:	cmp	r3, #19
    9dc6:	bhi.n	9de2 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9dc8:	ldr	r2, [pc, #44]	; (9df8 <usb_free+0x40>)
    9dca:	ldrb	r2, [r2, #0]
    9dcc:	cbnz	r2, 9de4 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    9dce:	cpsid	i
	usb_buffer_available |= mask;
    9dd0:	ldr	r0, [pc, #40]	; (9dfc <usb_free+0x44>)
    9dd2:	mov.w	r1, #2147483648	; 0x80000000
    9dd6:	ldr	r2, [r0, #0]
    9dd8:	lsr.w	r3, r1, r3
    9ddc:	orrs	r2, r3
    9dde:	str	r2, [r0, #0]
	__enable_irq();
    9de0:	cpsie	i
    9de2:	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    9de4:	ldr	r2, [pc, #24]	; (9e00 <usb_free+0x48>)
    9de6:	ldrb	r2, [r2, #0]
    9de8:	cmp	r2, #0
    9dea:	beq.n	9dce <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    9dec:	b.w	9e6c <usb_rx_memory>
    9df0:	.word	0x1fff03d0
    9df4:	.word	0x38e38e39
    9df8:	.word	0x1fff1d01
    9dfc:	.word	0x1fff0984
    9e00:	.word	0x1fff1d0c

00009e04 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9e04:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9e06:	cmp	r3, #5
    9e08:	bhi.n	9e34 <usb_rx+0x30>
	__disable_irq();
    9e0a:	cpsid	i
	ret = rx_first[endpoint];
    9e0c:	ldr	r1, [pc, #40]	; (9e38 <usb_rx+0x34>)
    9e0e:	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9e12:	cbz	r0, 9e30 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    9e14:	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9e16:	ldr	r4, [pc, #36]	; (9e3c <usb_rx+0x38>)
    9e18:	ldrh	r5, [r0, #0]
    9e1a:	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    9e1e:	ldr	r6, [r0, #4]
    9e20:	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    9e24:	subs	r2, r2, r5
    9e26:	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9e2a:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9e2c:	pop	{r4, r5, r6}
    9e2e:	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    9e30:	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9e32:	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    9e34:	movs	r0, #0
    9e36:	bx	lr
    9e38:	.word	0x1fff1c6c
    9e3c:	.word	0x1fff1d88

00009e40 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9e40:	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9e42:	cmp	r0, #5
    9e44:	bhi.n	9e5e <usb_tx_packet_count+0x1e>
	__disable_irq();
    9e46:	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9e48:	ldr	r3, [pc, #28]	; (9e68 <usb_tx_packet_count+0x28>)
    9e4a:	ldr.w	r3, [r3, r0, lsl #2]
    9e4e:	cbz	r3, 9e62 <usb_tx_packet_count+0x22>
    9e50:	movs	r0, #0
    9e52:	ldr	r3, [r3, #4]
    9e54:	adds	r0, #1
    9e56:	cmp	r3, #0
    9e58:	bne.n	9e52 <usb_tx_packet_count+0x12>
	__enable_irq();
    9e5a:	cpsie	i
	return count;
    9e5c:	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9e5e:	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    9e60:	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    9e62:	mov	r0, r3
    9e64:	b.n	9e5a <usb_tx_packet_count+0x1a>
    9e66:	nop
    9e68:	.word	0x1fff1cc8

00009e6c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    9e6c:	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    9e6e:	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e70:	ldr	r2, [pc, #236]	; (9f60 <usb_rx_memory+0xf4>)
    9e72:	ldrb	r3, [r2, #0]
    9e74:	lsls	r1, r3, #28
    9e76:	bpl.n	9e86 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e78:	ldr	r3, [pc, #232]	; (9f64 <usb_rx_memory+0xf8>)
    9e7a:	ldr	r1, [r3, #32]
    9e7c:	cmp	r1, #0
    9e7e:	beq.n	9f20 <usb_rx_memory+0xb4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e80:	ldr	r1, [r3, #40]	; 0x28
    9e82:	cmp	r1, #0
    9e84:	beq.n	9f3c <usb_rx_memory+0xd0>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e86:	ldrb	r3, [r2, #1]
    9e88:	lsls	r3, r3, #28
    9e8a:	bpl.n	9e9a <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9e8c:	ldr	r3, [pc, #212]	; (9f64 <usb_rx_memory+0xf8>)
    9e8e:	ldr	r1, [r3, #64]	; 0x40
    9e90:	cmp	r1, #0
    9e92:	beq.n	9f50 <usb_rx_memory+0xe4>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9e94:	ldr	r1, [r3, #72]	; 0x48
    9e96:	cmp	r1, #0
    9e98:	beq.n	9f40 <usb_rx_memory+0xd4>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9e9a:	ldrb	r3, [r2, #2]
    9e9c:	lsls	r5, r3, #28
    9e9e:	bpl.n	9eae <usb_rx_memory+0x42>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9ea0:	ldr	r3, [pc, #192]	; (9f64 <usb_rx_memory+0xf8>)
    9ea2:	ldr	r1, [r3, #96]	; 0x60
    9ea4:	cmp	r1, #0
    9ea6:	beq.n	9f4c <usb_rx_memory+0xe0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ea8:	ldr	r1, [r3, #104]	; 0x68
    9eaa:	cmp	r1, #0
    9eac:	beq.n	9f44 <usb_rx_memory+0xd8>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9eae:	ldrb	r3, [r2, #3]
    9eb0:	lsls	r4, r3, #28
    9eb2:	bpl.n	9ec6 <usb_rx_memory+0x5a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9eb4:	ldr	r3, [pc, #172]	; (9f64 <usb_rx_memory+0xf8>)
    9eb6:	ldr.w	r1, [r3, #128]	; 0x80
    9eba:	cmp	r1, #0
    9ebc:	beq.n	9f54 <usb_rx_memory+0xe8>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ebe:	ldr.w	r1, [r3, #136]	; 0x88
    9ec2:	cmp	r1, #0
    9ec4:	beq.n	9f48 <usb_rx_memory+0xdc>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9ec6:	ldrb	r3, [r2, #4]
    9ec8:	lsls	r1, r3, #28
    9eca:	bpl.n	9edc <usb_rx_memory+0x70>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9ecc:	ldr	r3, [pc, #148]	; (9f64 <usb_rx_memory+0xf8>)
    9ece:	ldr.w	r1, [r3, #160]	; 0xa0
    9ed2:	cmp	r1, #0
    9ed4:	beq.n	9f5c <usb_rx_memory+0xf0>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9ed6:	ldr.w	r1, [r3, #168]	; 0xa8
    9eda:	cbz	r1, 9f02 <usb_rx_memory+0x96>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    9edc:	ldrb	r3, [r2, #5]
    9ede:	lsls	r3, r3, #28
    9ee0:	bpl.n	9ef4 <usb_rx_memory+0x88>
			if (table[index(i, RX, EVEN)].desc == 0) {
    9ee2:	ldr	r3, [pc, #128]	; (9f64 <usb_rx_memory+0xf8>)
    9ee4:	ldr.w	r2, [r3, #192]	; 0xc0
    9ee8:	cmp	r2, #0
    9eea:	beq.n	9f58 <usb_rx_memory+0xec>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9eec:	ldr.w	r2, [r3, #200]	; 0xc8
    9ef0:	movs	r4, #25
    9ef2:	cbz	r2, 9f04 <usb_rx_memory+0x98>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    9ef4:	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    9ef6:	ldr	r3, [pc, #112]	; (9f68 <usb_rx_memory+0xfc>)
    9ef8:	movs	r2, #0
    9efa:	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    9efc:	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    9efe:	b.w	9db8 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f02:	movs	r4, #21
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9f04:	ldr	r1, [pc, #96]	; (9f68 <usb_rx_memory+0xfc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9f06:	ldr	r5, [pc, #100]	; (9f6c <usb_rx_memory+0x100>)
				usb_rx_memory_needed--;
    9f08:	ldrb	r2, [r1, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9f0a:	str.w	r5, [r3, r4, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9f0e:	add.w	r3, r3, r4, lsl #3
    9f12:	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9f14:	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    9f16:	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    9f18:	strb	r2, [r1, #0]
				__enable_irq();
    9f1a:	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    9f1c:	pop	{r4, r5}
    9f1e:	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f20:	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9f22:	ldr	r4, [pc, #68]	; (9f68 <usb_rx_memory+0xfc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9f24:	ldr	r5, [pc, #72]	; (9f70 <usb_rx_memory+0x104>)
				usb_rx_memory_needed--;
    9f26:	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9f28:	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9f2c:	add.w	r3, r3, r2, lsl #3
    9f30:	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9f32:	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    9f34:	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    9f36:	strb	r2, [r4, #0]
				__enable_irq();
    9f38:	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    9f3a:	b.n	9f1c <usb_rx_memory+0xb0>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    9f3c:	movs	r4, #5
    9f3e:	b.n	9f04 <usb_rx_memory+0x98>
    9f40:	movs	r4, #9
    9f42:	b.n	9f04 <usb_rx_memory+0x98>
    9f44:	movs	r4, #13
    9f46:	b.n	9f04 <usb_rx_memory+0x98>
    9f48:	movs	r4, #17
    9f4a:	b.n	9f04 <usb_rx_memory+0x98>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    9f4c:	movs	r2, #12
    9f4e:	b.n	9f22 <usb_rx_memory+0xb6>
    9f50:	movs	r2, #8
    9f52:	b.n	9f22 <usb_rx_memory+0xb6>
    9f54:	movs	r2, #16
    9f56:	b.n	9f22 <usb_rx_memory+0xb6>
    9f58:	movs	r2, #24
    9f5a:	b.n	9f22 <usb_rx_memory+0xb6>
    9f5c:	movs	r2, #20
    9f5e:	b.n	9f22 <usb_rx_memory+0xb6>
    9f60:	.word	0x00010370
    9f64:	.word	0x1fff0000
    9f68:	.word	0x1fff1d01
    9f6c:	.word	0x004000c8
    9f70:	.word	0x00400088

00009f74 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9f74:	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    9f76:	cmp	r3, #5
    9f78:	bhi.n	9fb6 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9f7a:	ldr	r2, [pc, #108]	; (9fe8 <usb_tx+0x74>)
    9f7c:	lsls	r0, r0, #5
    9f7e:	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    9f82:	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9f84:	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    9f86:	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    9f88:	ldr	r4, [pc, #96]	; (9fec <usb_tx+0x78>)
    9f8a:	ldrb	r2, [r4, r3]
    9f8c:	cmp	r2, #3
    9f8e:	bhi.n	9fc8 <usb_tx+0x54>
    9f90:	tbb	[pc, r2]
    9f94:	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    9f98:	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9f9a:	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9f9c:	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9f9e:	tst.w	r0, #8
    9fa2:	ite	ne
    9fa4:	movne	r3, #200	; 0xc8
    9fa6:	moveq	r3, #136	; 0x88
    9fa8:	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9fac:	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9fae:	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    9fb0:	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    9fb2:	cpsie	i
}
    9fb4:	pop	{r4, r5}
    9fb6:	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    9fb8:	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    9fba:	movs	r2, #2
		break;
    9fbc:	b.n	9f9a <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    9fbe:	movs	r2, #5
    9fc0:	b.n	9f9a <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    9fc2:	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    9fc4:	movs	r2, #4
		break;
    9fc6:	b.n	9f9a <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    9fc8:	ldr	r2, [pc, #36]	; (9ff0 <usb_tx+0x7c>)
    9fca:	ldr.w	r0, [r2, r3, lsl #2]
    9fce:	cbz	r0, 9fe0 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    9fd0:	ldr	r2, [pc, #32]	; (9ff4 <usb_tx+0x80>)
    9fd2:	ldr.w	r0, [r2, r3, lsl #2]
    9fd6:	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    9fd8:	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    9fdc:	cpsie	i
		return;
    9fde:	b.n	9fb4 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    9fe0:	str.w	r1, [r2, r3, lsl #2]
    9fe4:	ldr	r2, [pc, #12]	; (9ff4 <usb_tx+0x80>)
    9fe6:	b.n	9fd8 <usb_tx+0x64>
    9fe8:	.word	0x1fff0000
    9fec:	.word	0x1fff1d10
    9ff0:	.word	0x1fff1cc8
    9ff4:	.word	0x1fff1ce0

00009ff8 <usb_isr>:
}



void usb_isr(void)
{
    9ff8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    9ffc:	ldr.w	fp, [pc, #780]	; a30c <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    a000:	ldr.w	sl, [pc, #780]	; a310 <usb_isr+0x318>
}



void usb_isr(void)
{
    a004:	sub	sp, #28
    a006:	b.n	a092 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    a008:	ldr	r7, [pc, #692]	; (a2c0 <usb_isr+0x2c8>)
    a00a:	mov.w	r8, r3, lsr #2
    a00e:	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a012:	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a014:	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a018:	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    a01c:	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a01e:	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    a022:	and.w	r4, r3, #255	; 0xff
    a026:	cmp	r3, #0
    a028:	bne.w	a314 <usb_isr+0x31c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    a02c:	ldr.w	r3, [r7, r8, lsl #3]
    a030:	lsrs	r3, r3, #16
    a032:	uxth	r1, r3
    a034:	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    a038:	cmp	r3, #0
    a03a:	beq.w	a2ac <usb_isr+0x2b4>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    a03e:	ldr	r3, [pc, #644]	; (a2c4 <usb_isr+0x2cc>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    a040:	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    a044:	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    a048:	ldr.w	r2, [r3, r6, lsl #2]
    a04c:	cmp	r2, #0
    a04e:	beq.w	a3b0 <usb_isr+0x3b8>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    a052:	ldr	r5, [pc, #628]	; (a2c8 <usb_isr+0x2d0>)
    a054:	ldr.w	r3, [r5, r6, lsl #2]
    a058:	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    a05a:	ldr	r4, [pc, #624]	; (a2cc <usb_isr+0x2d4>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    a05c:	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    a060:	ldrh.w	r3, [r4, r6, lsl #1]
    a064:	add	r1, r3
    a066:	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    a06a:	bl	9d78 <usb_malloc>
					if (packet) {
    a06e:	cmp	r0, #0
    a070:	beq.w	a3a2 <usb_isr+0x3aa>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    a074:	ldr	r2, [pc, #600]	; (a2d0 <usb_isr+0x2d8>)
    a076:	ldr	r3, [pc, #604]	; (a2d4 <usb_isr+0x2dc>)
    a078:	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a07c:	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    a080:	it	ne
    a082:	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    a084:	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    a088:	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    a08c:	movs	r3, #8
    a08e:	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a092:	ldrb.w	r4, [fp]
    a096:	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a098:	lsls	r5, r4, #29
    a09a:	bpl.n	a0d4 <usb_isr+0xdc>
		if (usb_configuration) {
    a09c:	ldr	r3, [pc, #568]	; (a2d8 <usb_isr+0x2e0>)
    a09e:	ldrb	r3, [r3, #0]
    a0a0:	cbz	r3, a0ce <usb_isr+0xd6>
			t = usb_reboot_timer;
    a0a2:	ldr	r1, [pc, #568]	; (a2dc <usb_isr+0x2e4>)
    a0a4:	ldrb	r2, [r1, #0]
			if (t) {
    a0a6:	and.w	r3, r2, #255	; 0xff
    a0aa:	cbz	r2, a0b8 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    a0ac:	subs	r3, #1
    a0ae:	uxtb	r3, r3
    a0b0:	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    a0b2:	cmp	r3, #0
    a0b4:	beq.w	aa36 <usb_isr+0xa3e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    a0b8:	ldr	r1, [pc, #548]	; (a2e0 <usb_isr+0x2e8>)
    a0ba:	ldrb	r2, [r1, #0]
			if (t) {
    a0bc:	and.w	r3, r2, #255	; 0xff
    a0c0:	cbz	r2, a0ce <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    a0c2:	subs	r3, #1
    a0c4:	uxtb	r3, r3
    a0c6:	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    a0c8:	cmp	r3, #0
    a0ca:	beq.w	a39c <usb_isr+0x3a4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    a0ce:	movs	r3, #4
    a0d0:	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    a0d4:	and.w	r3, r4, #8
    a0d8:	and.w	r2, r3, #255	; 0xff
    a0dc:	cmp	r3, #0
    a0de:	beq.w	a36e <usb_isr+0x376>
		uint8_t endpoint;
		stat = USB0_STAT;
    a0e2:	ldrb.w	r3, [sl]
    a0e6:	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    a0e8:	lsrs	r6, r3, #4
    a0ea:	bne.n	a008 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a0ec:	lsrs	r0, r3, #2
    a0ee:	ldr.w	r9, [pc, #464]	; a2c0 <usb_isr+0x2c8>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a0f2:	ldr.w	r2, [r9, r0, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    a0f6:	add.w	r1, r9, r0, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a0fa:	ubfx	r2, r2, #2, #4
    a0fe:	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    a100:	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    a102:	cmp	r2, #12
    a104:	bhi.w	a28e <usb_isr+0x296>
    a108:	tbh	[pc, r2, lsl #1]
    a10c:	.word	0x00c500c5
    a110:	.word	0x00c100c1
    a114:	.word	0x00c100c1
    a118:	.word	0x00c100c1
    a11c:	.word	0x00c1008b
    a120:	.word	0x00c100c1
    a124:	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a126:	ldr	r2, [r1, #0]
    a128:	ldr	r5, [pc, #440]	; (a2e4 <usb_isr+0x2ec>)
		setup.word2 = *(uint32_t *)(buf + 4);
    a12a:	ldr	r1, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a12c:	ldr	r7, [pc, #440]	; (a2e8 <usb_isr+0x2f0>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a12e:	ldr	r6, [pc, #444]	; (a2ec <usb_isr+0x2f4>)
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a130:	ldr	r4, [pc, #412]	; (a2d0 <usb_isr+0x2d8>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    a132:	str	r1, [r5, #4]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a134:	uxth	r1, r2
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a136:	str.w	r4, [r9, r0, lsl #3]
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    a13a:	str	r2, [r5, #0]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a13c:	movs	r0, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a13e:	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a140:	cmp.w	r1, #2176	; 0x880
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    a144:	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    a146:	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    a14a:	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    a14e:	strb	r0, [r6, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a150:	beq.w	a7f2 <usb_isr+0x7fa>
    a154:	bls.w	a3b8 <usb_isr+0x3c0>
    a158:	movw	r4, #8993	; 0x2321
    a15c:	cmp	r1, r4
    a15e:	beq.w	a7fc <usb_isr+0x804>
    a162:	bhi.w	a4ee <usb_isr+0x4f6>
    a166:	movw	r4, #8225	; 0x2021
    a16a:	cmp	r1, r4
    a16c:	beq.w	a504 <usb_isr+0x50c>
    a170:	movw	r4, #8737	; 0x2221
    a174:	cmp	r1, r4
    a176:	beq.w	a64e <usb_isr+0x656>
    a17a:	cmp.w	r1, #2304	; 0x900
    a17e:	bne.w	a4fe <usb_isr+0x506>
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    a182:	ldr	r2, [pc, #340]	; (a2d8 <usb_isr+0x2e0>)
    a184:	ldr	r4, [pc, #312]	; (a2c0 <usb_isr+0x2c8>)
    a186:	ldrb	r1, [r5, #2]
    a188:	strb	r1, [r2, #0]
    a18a:	add.w	r5, r4, #192	; 0xc0
    a18e:	b.n	a196 <usb_isr+0x19e>
    a190:	adds	r4, #8
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a192:	cmp	r5, r4
    a194:	beq.n	a1aa <usb_isr+0x1b2>
			if (table[i].desc & BDT_OWN) {
    a196:	ldr	r3, [r4, #32]
    a198:	lsls	r0, r3, #24
    a19a:	bpl.n	a190 <usb_isr+0x198>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a19c:	ldr	r0, [r4, #36]	; 0x24
    a19e:	adds	r4, #8
    a1a0:	subs	r0, #8
    a1a2:	bl	9db8 <usb_free>
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a1a6:	cmp	r5, r4
    a1a8:	bne.n	a196 <usb_isr+0x19e>
    a1aa:	ldr	r4, [pc, #324]	; (a2f0 <usb_isr+0x2f8>)
    a1ac:	ldr	r2, [pc, #276]	; (a2c4 <usb_isr+0x2cc>)
    a1ae:	ldr	r1, [pc, #324]	; (a2f4 <usb_isr+0x2fc>)
    a1b0:	ldr	r0, [pc, #324]	; (a2f8 <usb_isr+0x300>)
    a1b2:	ldr	r5, [pc, #276]	; (a2c8 <usb_isr+0x2d0>)
    a1b4:	str	r4, [sp, #4]
    a1b6:	movs	r3, #0
    a1b8:	ldr	r4, [pc, #272]	; (a2cc <usb_isr+0x2d4>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a1ba:	str	r6, [sp, #20]
    a1bc:	str	r5, [sp, #8]
    a1be:	str	r4, [sp, #12]
    a1c0:	mov	r8, r0
    a1c2:	str	r7, [sp, #16]
    a1c4:	mov	r6, r2
    a1c6:	mov	r5, r1
    a1c8:	mov	r4, r3
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    a1ca:	ldr	r0, [r6, #0]
			while (p) {
    a1cc:	cbz	r0, a1da <usb_isr+0x1e2>
				n = p->next;
    a1ce:	ldr	r7, [r0, #4]
				usb_free(p);
    a1d0:	bl	9db8 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    a1d4:	mov	r0, r7
    a1d6:	cmp	r7, #0
    a1d8:	bne.n	a1ce <usb_isr+0x1d6>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    a1da:	movs	r3, #0
    a1dc:	str	r3, [r6, #0]
			rx_last[i] = NULL;
    a1de:	ldr	r3, [sp, #8]
			p = tx_first[i];
    a1e0:	ldr	r0, [r5, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    a1e2:	mov	r2, r3
    a1e4:	movs	r3, #0
    a1e6:	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    a1ea:	cbz	r0, a1f8 <usb_isr+0x200>
				n = p->next;
    a1ec:	ldr	r7, [r0, #4]
				usb_free(p);
    a1ee:	bl	9db8 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    a1f2:	mov	r0, r7
    a1f4:	cmp	r7, #0
    a1f6:	bne.n	a1ec <usb_isr+0x1f4>
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a1f8:	ldr	r3, [sp, #4]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a1fa:	movs	r2, #0
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    a1fc:	ldrb	r3, [r3, #0]
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    a1fe:	str	r2, [r5, #0]
			tx_last[i] = NULL;
    a200:	str.w	r2, [r8], #4
			usb_rx_byte_count_data[i] = 0;
    a204:	ldr	r2, [sp, #12]
    a206:	mov.w	r1, #0
			switch (tx_state[i]) {
    a20a:	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    a20c:	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    a210:	cmp	r3, #3
    a212:	bhi.w	a728 <usb_isr+0x730>
    a216:	tbh	[pc, r3, lsl #1]
    a21a:	.short	0x02e7
    a21c:	.word	0x02e70283
    a220:	.short	0x0283
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    a222:	ldr	r7, [pc, #196]	; (a2e8 <usb_isr+0x2f0>)
    a224:	ldr	r2, [r7, #0]
		if (data) {
    a226:	cbz	r2, a27a <usb_isr+0x282>
			size = ep0_tx_len;
    a228:	ldr	r3, [pc, #208]	; (a2fc <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a22a:	ldr	r6, [pc, #192]	; (a2ec <usb_isr+0x2f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a22c:	ldr	r1, [pc, #208]	; (a300 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    a22e:	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a230:	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a232:	ldrb	r5, [r1, #0]
    a234:	cmp	r0, #64	; 0x40
    a236:	mov	lr, r0
    a238:	orr.w	r8, r5, #2
    a23c:	it	cs
    a23e:	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a242:	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    a244:	eor.w	r4, r4, #1
    a248:	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a24a:	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a24e:	ite	eq
    a250:	moveq	r4, #136	; 0x88
    a252:	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a254:	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a258:	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a25a:	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a25e:	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a262:	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    a264:	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a266:	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    a26a:	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a26c:	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a26e:	cbnz	r0, a278 <usb_isr+0x280>
    a270:	cmp.w	lr, #64	; 0x40
    a274:	it	ne
    a276:	movne	r2, #0
    a278:	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a27a:	ldr	r3, [pc, #104]	; (a2e4 <usb_isr+0x2ec>)
    a27c:	ldrh	r2, [r3, #0]
    a27e:	cmp.w	r2, #1280	; 0x500
    a282:	bne.n	a28e <usb_isr+0x296>
			setup.bRequest = 0;
    a284:	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a286:	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    a288:	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    a28a:	ldr	r3, [pc, #120]	; (a304 <usb_isr+0x30c>)
    a28c:	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a28e:	ldr	r2, [pc, #120]	; (a308 <usb_isr+0x310>)
    a290:	movs	r3, #1
    a292:	strb	r3, [r2, #0]
    a294:	b.n	a08c <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a296:	ldr	r2, [pc, #76]	; (a2e4 <usb_isr+0x2ec>)
    a298:	ldrh	r5, [r2, #0]
    a29a:	movw	r4, #8225	; 0x2021
    a29e:	cmp	r5, r4
    a2a0:	beq.w	a498 <usb_isr+0x4a0>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a2a4:	ldr	r2, [pc, #40]	; (a2d0 <usb_isr+0x2d8>)
    a2a6:	str.w	r2, [r9, r0, lsl #3]
    a2aa:	b.n	a28e <usb_isr+0x296>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a2ac:	ldr	r2, [pc, #32]	; (a2d0 <usb_isr+0x2d8>)
    a2ae:	ldr	r3, [pc, #36]	; (a2d4 <usb_isr+0x2dc>)
    a2b0:	tst.w	r9, #8
    a2b4:	it	ne
    a2b6:	movne	r3, r2
    a2b8:	str.w	r3, [r7, r8, lsl #3]
    a2bc:	b.n	a08c <usb_isr+0x94>
    a2be:	nop
    a2c0:	.word	0x1fff0000
    a2c4:	.word	0x1fff1c6c
    a2c8:	.word	0x1fff1c10
    a2cc:	.word	0x1fff1d88
    a2d0:	.word	0x004000c8
    a2d4:	.word	0x00400088
    a2d8:	.word	0x1fff1d0c
    a2dc:	.word	0x1fff1c85
    a2e0:	.word	0x1fff1bf4
    a2e4:	.word	0x1fff1cf8
    a2e8:	.word	0x1fff1c0c
    a2ec:	.word	0x1fff1c84
    a2f0:	.word	0x1fff1d10
    a2f4:	.word	0x1fff1cc8
    a2f8:	.word	0x1fff1ce0
    a2fc:	.word	0x1fff1c28
    a300:	.word	0x1fff1d00
    a304:	.word	0x40072098
    a308:	.word	0x40072094
    a30c:	.word	0x40072080
    a310:	.word	0x40072090
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    a314:	bl	9db8 <usb_free>
				packet = tx_first[endpoint];
    a318:	ldr	r2, [pc, #692]	; (a5d0 <usb_isr+0x5d8>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a31a:	ldr	r1, [pc, #696]	; (a5d4 <usb_isr+0x5dc>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    a31c:	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    a320:	cmp	r3, #0
    a322:	beq.w	a478 <usb_isr+0x480>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a326:	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    a328:	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    a32a:	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    a32e:	add.w	r2, r3, #8
    a332:	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    a336:	cmp	r4, #3
    a338:	bhi.n	a346 <usb_isr+0x34e>
    a33a:	tbb	[pc, r4]
    a33e:	.short	0x0f12
    a340:	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a342:	movs	r2, #4
    a344:	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    a346:	ldrh	r2, [r3, #0]
    a348:	tst.w	r9, #8
    a34c:	ite	eq
    a34e:	moveq	r3, #136	; 0x88
    a350:	movne	r3, #200	; 0xc8
    a352:	orr.w	r3, r3, r2, lsl #16
    a356:	str.w	r3, [r7, r8, lsl #3]
    a35a:	b.n	a08c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a35c:	movs	r2, #2
    a35e:	strb	r2, [r1, r6]
						break;
    a360:	b.n	a346 <usb_isr+0x34e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a362:	movs	r2, #3
    a364:	strb	r2, [r1, r6]
						break;
    a366:	b.n	a346 <usb_isr+0x34e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a368:	movs	r2, #5
    a36a:	strb	r2, [r1, r6]
						break;
    a36c:	b.n	a346 <usb_isr+0x34e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a36e:	lsls	r0, r4, #31
    a370:	bmi.w	a50c <usb_isr+0x514>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a374:	lsls	r1, r4, #24
    a376:	bmi.w	a5a8 <usb_isr+0x5b0>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a37a:	lsls	r2, r4, #30
    a37c:	bpl.n	a38c <usb_isr+0x394>
		uint8_t err = USB0_ERRSTAT;
    a37e:	ldr	r2, [pc, #600]	; (a5d8 <usb_isr+0x5e0>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a380:	ldr	r1, [pc, #600]	; (a5dc <usb_isr+0x5e4>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a382:	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a384:	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    a386:	uxtb	r3, r3
		USB0_ERRSTAT = err;
    a388:	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a38a:	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    a38c:	lsls	r3, r4, #27
    a38e:	bpl.n	a396 <usb_isr+0x39e>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    a390:	ldr	r3, [pc, #584]	; (a5dc <usb_isr+0x5e4>)
    a392:	movs	r2, #16
    a394:	strb	r2, [r3, #0]
	}

}
    a396:	add	sp, #28
    a398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    a39c:	bl	9944 <usb_serial_flush_callback>
    a3a0:	b.n	a0ce <usb_isr+0xd6>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    a3a2:	ldr	r2, [pc, #572]	; (a5e0 <usb_isr+0x5e8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    a3a4:	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    a3a8:	ldrb	r3, [r2, #0]
    a3aa:	adds	r3, #1
    a3ac:	strb	r3, [r2, #0]
    a3ae:	b.n	a08c <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    a3b0:	str.w	r0, [r3, r6, lsl #2]
    a3b4:	ldr	r5, [pc, #556]	; (a5e4 <usb_isr+0x5ec>)
    a3b6:	b.n	a05a <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a3b8:	movw	r4, #770	; 0x302
    a3bc:	cmp	r1, r4
    a3be:	beq.w	a804 <usb_isr+0x80c>
    a3c2:	bhi.w	a566 <usb_isr+0x56e>
    a3c6:	cmp	r1, #130	; 0x82
    a3c8:	beq.w	a6fa <usb_isr+0x702>
    a3cc:	cmp.w	r1, #258	; 0x102
    a3d0:	beq.w	a628 <usb_isr+0x630>
    a3d4:	cmp	r1, #128	; 0x80
    a3d6:	bne.w	a4fe <usb_isr+0x506>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a3da:	ldr	r4, [pc, #524]	; (a5e8 <usb_isr+0x5f0>)
		reply_buffer[1] = 0;
		datalen = 2;
    a3dc:	movs	r0, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    a3de:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a3e0:	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a3e2:	ldrh	r2, [r5, #6]
    a3e4:	cmp	r2, r0
    a3e6:	bcs.w	a986 <usb_isr+0x98e>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a3ea:	ldr	r1, [pc, #512]	; (a5ec <usb_isr+0x5f4>)
    a3ec:	ldrb	r5, [r1, #0]
    a3ee:	cmp	r2, #64	; 0x40
    a3f0:	mov	lr, r2
    a3f2:	orr.w	ip, r5, #2
    a3f6:	it	cs
    a3f8:	movcs.w	lr, #64	; 0x40
    a3fc:	add.w	r3, r4, lr
    a400:	add.w	r0, r9, ip, lsl #3
    a404:	str	r3, [sp, #4]
    a406:	movs	r3, #1
    a408:	str	r4, [r0, #4]
    a40a:	mov.w	r8, lr, lsl #16
    a40e:	rsb	r0, lr, r2
    a412:	str	r3, [sp, #8]
    a414:	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a416:	movs	r4, #200	; 0xc8
    a418:	orr.w	r3, r8, r4
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a41c:	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a420:	str.w	r3, [r9, ip, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a424:	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a426:	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a428:	ldr.w	ip, [pc, #472]	; a604 <usb_isr+0x60c>
	ep0_tx_data_toggle ^= 1;
    a42c:	ldr	r3, [pc, #448]	; (a5f0 <usb_isr+0x5f8>)
	ep0_tx_bdt_bank ^= 1;
    a42e:	ldr.w	r8, [pc, #444]	; a5ec <usb_isr+0x5f4>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a432:	cmp	r0, #0
    a434:	bne.w	a690 <usb_isr+0x698>
    a438:	cmp.w	lr, #64	; 0x40
    a43c:	bne.n	a504 <usb_isr+0x50c>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a43e:	orr.w	ip, r4, #2
    a442:	add.w	r3, r9, ip, lsl #3
    a446:	ldr	r4, [sp, #4]
    a448:	ldr.w	lr, [pc, #440]	; a604 <usb_isr+0x60c>
    a44c:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a44e:	cmp	r2, #0
    a450:	bne.w	a6bc <usb_isr+0x6c4>
    a454:	lsls	r2, r0, #16
    a456:	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    a45a:	ldrb.w	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a45e:	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a462:	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a464:	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    a466:	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a468:	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    a46a:	cmp	r0, #64	; 0x40
    a46c:	bne.n	a504 <usb_isr+0x50c>
    a46e:	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    a470:	ldr	r2, [pc, #384]	; (a5f4 <usb_isr+0x5fc>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    a472:	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    a474:	strh	r0, [r2, #0]
    a476:	b.n	a504 <usb_isr+0x50c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    a478:	ldrb	r3, [r1, r6]
    a47a:	cmp	r3, #3
    a47c:	bhi.w	a6ec <usb_isr+0x6f4>
    a480:	add	r2, pc, #4	; (adr r2, a488 <usb_isr+0x490>)
    a482:	ldr.w	pc, [r2, r3, lsl #2]
    a486:	nop
    a488:	.word	0x0000a08d
    a48c:	.word	0x0000a08d
    a490:	.word	0x0000a561
    a494:	.word	0x0000a55b
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    a498:	ldrh	r2, [r2, #4]
    a49a:	cbnz	r2, a4c0 <usb_isr+0x4c8>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a49c:	ldr	r2, [pc, #344]	; (a5f8 <usb_isr+0x600>)
    a49e:	ldrb	r5, [r1, #0]
    a4a0:	ldrb	r4, [r1, #1]
    a4a2:	strb	r5, [r2, #0]
    a4a4:	strb	r4, [r2, #1]
    a4a6:	ldrb	r5, [r1, #2]
    a4a8:	ldrb	r4, [r1, #3]
    a4aa:	strb	r5, [r2, #2]
    a4ac:	strb	r4, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a4ae:	ldr	r4, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a4b0:	ldrb	r5, [r1, #4]
    a4b2:	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a4b4:	cmp	r4, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    a4b6:	ldrb	r5, [r1, #5]
    a4b8:	ldrb	r1, [r1, #6]
    a4ba:	strb	r5, [r2, #5]
    a4bc:	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a4be:	beq.n	a5bc <usb_isr+0x5c4>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4c0:	ldr	r1, [pc, #296]	; (a5ec <usb_isr+0x5f4>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4c2:	ldr	r6, [pc, #300]	; (a5f0 <usb_isr+0x5f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4c4:	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4c6:	ldrb	r4, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a4c8:	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4cc:	cmp	r4, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4ce:	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a4d2:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a4d4:	ite	eq
    a4d6:	moveq	r1, #136	; 0x88
    a4d8:	movne	r1, #200	; 0xc8
    a4da:	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4de:	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a4e2:	eor.w	r4, r4, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4e6:	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    a4e8:	strb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a4ea:	str	r1, [r2, #4]
    a4ec:	b.n	a2a4 <usb_isr+0x2ac>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a4ee:	movw	r2, #26273	; 0x66a1
    a4f2:	cmp	r1, r2
    a4f4:	beq.n	a4fe <usb_isr+0x506>
    a4f6:	movw	r2, #26529	; 0x67a1
    a4fa:	cmp	r1, r2
    a4fc:	beq.n	a5c4 <usb_isr+0x5cc>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a4fe:	ldr	r2, [pc, #252]	; (a5fc <usb_isr+0x604>)
    a500:	movs	r3, #15
    a502:	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a504:	ldr	r2, [pc, #248]	; (a600 <usb_isr+0x608>)
    a506:	movs	r3, #1
    a508:	strb	r3, [r2, #0]
    a50a:	b.n	a28e <usb_isr+0x296>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a50c:	ldr	r3, [pc, #244]	; (a604 <usb_isr+0x60c>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a50e:	ldr	r0, [pc, #240]	; (a600 <usb_isr+0x608>)
		ep0_tx_bdt_bank = 0;
    a510:	ldr	r1, [pc, #216]	; (a5ec <usb_isr+0x5f4>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    a512:	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    a514:	mov.w	lr, #2
    a518:	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a51c:	ldr	r7, [pc, #220]	; (a5fc <usb_isr+0x604>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    a51e:	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    a520:	ldr	r1, [pc, #228]	; (a608 <usb_isr+0x610>)
    a522:	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    a524:	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a526:	ldr	r6, [pc, #176]	; (a5d8 <usb_isr+0x5e0>)
		USB0_ISTAT = 0xFF;
    a528:	ldr	r5, [pc, #176]	; (a5dc <usb_isr+0x5e4>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a52a:	ldr	r4, [pc, #224]	; (a60c <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    a52c:	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a52e:	movs	r1, #13
    a530:	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    a532:	movs	r1, #255	; 0xff
    a534:	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a536:	ldr.w	lr, [pc, #236]	; a624 <usb_isr+0x62c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    a53a:	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    a53c:	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a53e:	ldr	r5, [pc, #208]	; (a610 <usb_isr+0x618>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a540:	ldr	r2, [pc, #208]	; (a614 <usb_isr+0x61c>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    a542:	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a546:	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a548:	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    a54a:	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    a54e:	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    a550:	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    a552:	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    a554:	add	sp, #28
    a556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a55a:	movs	r3, #1
    a55c:	strb	r3, [r1, r6]
						break;
    a55e:	b.n	a08c <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a560:	movs	r3, #0
    a562:	strb	r3, [r1, r6]
						break;
    a564:	b.n	a08c <usb_isr+0x94>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a566:	cmp.w	r1, #1280	; 0x500
    a56a:	beq.w	a7fc <usb_isr+0x804>
    a56e:	bcc.n	a4fe <usb_isr+0x506>
    a570:	sub.w	r1, r1, #1664	; 0x680
    a574:	cmp	r1, #1
    a576:	bhi.n	a4fe <usb_isr+0x506>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    a578:	ldr	r2, [pc, #156]	; (a618 <usb_isr+0x620>)
    a57a:	ldr	r4, [r2, #4]
    a57c:	cmp	r4, #0
    a57e:	beq.n	a4fe <usb_isr+0x506>
    a580:	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a582:	ldrh.w	lr, [r5, #4]
    a586:	b.n	a590 <usb_isr+0x598>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    a588:	adds	r2, #12
			if (list->addr == NULL) break;
    a58a:	ldr	r4, [r2, #4]
    a58c:	cmp	r4, #0
    a58e:	beq.n	a4fe <usb_isr+0x506>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a590:	ldrh	r3, [r2, #0]
    a592:	cmp	r3, r0
    a594:	bne.n	a588 <usb_isr+0x590>
    a596:	ldrh	r3, [r2, #2]
    a598:	cmp	r3, lr
    a59a:	bne.n	a588 <usb_isr+0x590>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    a59c:	lsrs	r0, r0, #8
    a59e:	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    a5a0:	ite	eq
    a5a2:	ldrbeq	r0, [r4, #0]
				} else {
					datalen = list->length;
    a5a4:	ldrhne	r0, [r2, #8]
    a5a6:	b.n	a3e2 <usb_isr+0x3ea>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a5a8:	ldr	r1, [pc, #80]	; (a5fc <usb_isr+0x604>)
		USB0_ISTAT = USB_ISTAT_STALL;
    a5aa:	ldr	r3, [pc, #48]	; (a5dc <usb_isr+0x5e4>)
    a5ac:	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a5ae:	movs	r0, #13
    a5b0:	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    a5b2:	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a5b4:	lsls	r2, r4, #30
    a5b6:	bpl.w	a38c <usb_isr+0x394>
    a5ba:	b.n	a37e <usb_isr+0x386>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    a5bc:	ldr	r2, [pc, #92]	; (a61c <usb_isr+0x624>)
    a5be:	movs	r1, #15
    a5c0:	strb	r1, [r2, #0]
    a5c2:	b.n	a4c0 <usb_isr+0x4c8>
		// TODO: required by PTP spec
		endpoint0_stall();
		return;
	case 0x67A1: // Get Device Statis (PTP spec, 5.2.4, page 10)
		// For now, always respond with status ok.
		reply_buffer[0] = 0x4;
    a5c4:	ldr	r4, [pc, #32]	; (a5e8 <usb_isr+0x5f0>)
    a5c6:	ldr	r3, [pc, #88]	; (a620 <usb_isr+0x628>)
    a5c8:	str	r3, [r4, #0]
		reply_buffer[1] = 0;
		reply_buffer[2] = 0x01;
		reply_buffer[3] = 0x20;
		data = reply_buffer;
		datalen = 4;
    a5ca:	movs	r0, #4
    a5cc:	b.n	a3e2 <usb_isr+0x3ea>
    a5ce:	nop
    a5d0:	.word	0x1fff1cc8
    a5d4:	.word	0x1fff1d10
    a5d8:	.word	0x40072088
    a5dc:	.word	0x40072080
    a5e0:	.word	0x1fff1d01
    a5e4:	.word	0x1fff1c10
    a5e8:	.word	0x1fff1d04
    a5ec:	.word	0x1fff1d00
    a5f0:	.word	0x1fff1c84
    a5f4:	.word	0x1fff1c28
    a5f8:	.word	0x1fff1d7c
    a5fc:	.word	0x400720c0
    a600:	.word	0x40072094
    a604:	.word	0x1fff0000
    a608:	.word	0x00400088
    a60c:	.word	0x40072098
    a610:	.word	0x1fff1c2c
    a614:	.word	0x1fff1c88
    a618:	.word	0x00010378
    a61c:	.word	0x1fff1c85
    a620:	.word	0x20010004
    a624:	.word	0x4007208c
    a628:	ldrh	r1, [r5, #4]
    a62a:	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a62e:	cmp	r1, #6
    a630:	bhi.w	a4fe <usb_isr+0x506>
    a634:	ldrh	r2, [r5, #2]
    a636:	cmp	r2, #0
    a638:	bne.w	a4fe <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    a63c:	ldr	r4, [pc, #724]	; (a914 <usb_isr+0x91c>)
    a63e:	str	r0, [sp, #8]
    a640:	lsls	r1, r1, #2
    a642:	add	r4, r1
    a644:	ldrb	r1, [r4, #0]
    a646:	bic.w	r1, r1, #2
    a64a:	strb	r1, [r4, #0]
    a64c:	b.n	a668 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a64e:	ldrh	r1, [r5, #4]
    a650:	cmp	r1, #0
    a652:	bne.w	a82a <usb_isr+0x832>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a656:	ldr	r3, [pc, #704]	; (a918 <usb_isr+0x920>)
    a658:	ldr	r2, [pc, #704]	; (a91c <usb_isr+0x924>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a65a:	ldr	r4, [pc, #708]	; (a920 <usb_isr+0x928>)
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a65c:	ldr	r3, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a65e:	ldrb	r5, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a660:	str	r3, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a662:	str	r0, [sp, #8]
    a664:	mov	r2, r1
    a666:	strb	r5, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a668:	movs	r0, #0
    a66a:	str	r0, [sp, #4]
    a66c:	mov	r8, r0
    a66e:	mov	lr, r0
    a670:	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a672:	ldr	r1, [pc, #688]	; (a924 <usb_isr+0x92c>)
    a674:	ldrb	r5, [r1, #0]
    a676:	orr.w	ip, r5, #2
    a67a:	add.w	r3, r9, ip, lsl #3
    a67e:	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a680:	ldr	r3, [sp, #8]
    a682:	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a684:	ldr	r3, [sp, #12]
    a686:	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a688:	ite	eq
    a68a:	moveq	r4, #136	; 0x88
    a68c:	movne	r4, #200	; 0xc8
    a68e:	b.n	a418 <usb_isr+0x420>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    a690:	cmp	r0, #64	; 0x40
    a692:	bls.w	a43e <usb_isr+0x446>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a696:	orr.w	r4, r4, #2
    a69a:	add.w	r1, ip, r4, lsl #3
    a69e:	ldr	r6, [sp, #4]
    a6a0:	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6a2:	cbz	r2, a6d4 <usb_isr+0x6dc>
	ep0_tx_data_toggle ^= 1;
    a6a4:	ldrb.w	r1, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6a8:	ldr	r2, [pc, #636]	; (a928 <usb_isr+0x930>)
	ep0_tx_data_toggle ^= 1;
    a6aa:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6ac:	mov	r3, r6
    a6ae:	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a6b0:	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6b4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6b6:	str.w	r2, [ip, r4, lsl #3]
    a6ba:	b.n	a470 <usb_isr+0x478>
	ep0_tx_data_toggle ^= 1;
    a6bc:	ldrb.w	r3, [sp, #8]
    a6c0:	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6c2:	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6c4:	ldr	r3, [sp, #4]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a6c6:	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6c8:	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6cc:	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6ce:	str.w	r2, [lr, ip, lsl #3]
    a6d2:	b.n	a46a <usb_isr+0x472>
	ep0_tx_data_toggle ^= 1;
    a6d4:	ldrb.w	r1, [sp, #8]
    a6d8:	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6da:	ldr	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6dc:	ldr	r2, [pc, #588]	; (a92c <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    a6de:	strb.w	r5, [r8]
    a6e2:	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    a6e4:	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a6e6:	str.w	r2, [ip, r4, lsl #3]
    a6ea:	b.n	a470 <usb_isr+0x478>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    a6ec:	tst.w	r9, #8
    a6f0:	ite	eq
    a6f2:	moveq	r3, #2
    a6f4:	movne	r3, #3
    a6f6:	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    a6f8:	b.n	a08c <usb_isr+0x94>
    a6fa:	ldrh	r1, [r5, #4]
    a6fc:	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    a700:	cmp	r1, #6
    a702:	bhi.w	a4fe <usb_isr+0x506>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a706:	ldr	r3, [pc, #524]	; (a914 <usb_isr+0x91c>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a708:	ldr	r4, [pc, #548]	; (a930 <usb_isr+0x938>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a70a:	lsls	r1, r1, #2
    a70c:	add	r3, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    a70e:	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    a710:	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a712:	ldrb	r2, [r3, #0]
    a714:	lsls	r3, r2, #30
    a716:	bpl.w	a82e <usb_isr+0x836>
    a71a:	strb	r0, [r4, #0]
		data = reply_buffer;
		datalen = 2;
    a71c:	movs	r0, #2
    a71e:	b.n	a3e2 <usb_isr+0x3ea>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a720:	ldr	r3, [sp, #4]
    a722:	mov.w	r2, #1
    a726:	strb	r2, [r3, #0]
    a728:	ldr	r3, [sp, #4]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    a72a:	adds	r4, #1
    a72c:	adds	r3, #1
    a72e:	cmp	r4, #6
    a730:	add.w	r6, r6, #4
    a734:	add.w	r5, r5, #4
    a738:	str	r3, [sp, #4]
    a73a:	bne.w	a1ca <usb_isr+0x1d2>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a73e:	ldr	r5, [pc, #500]	; (a934 <usb_isr+0x93c>)
			*reg = epconf;
    a740:	ldr	r1, [pc, #500]	; (a938 <usb_isr+0x940>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a742:	ldrb	r2, [r5, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    a744:	ldr	r4, [pc, #500]	; (a93c <usb_isr+0x944>)
    a746:	ldr	r7, [sp, #16]
    a748:	ldr	r6, [sp, #20]
    a74a:	movs	r0, #0
    a74c:	strb	r0, [r4, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a74e:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a750:	lsls	r1, r2, #28
    a752:	bmi.w	a860 <usb_isr+0x868>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a756:	ldrb	r2, [r5, #1]
			*reg = epconf;
    a758:	ldr	r1, [pc, #484]	; (a940 <usb_isr+0x948>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a75a:	ldr.w	r8, [pc, #504]	; a954 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a75e:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a760:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a762:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a764:	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    a768:	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a76c:	bmi.n	a832 <usb_isr+0x83a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a76e:	ldrb	r2, [r5, #2]
			*reg = epconf;
    a770:	ldr	r1, [pc, #464]	; (a944 <usb_isr+0x94c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a772:	ldr.w	r8, [pc, #480]	; a954 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a776:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a778:	lsls	r3, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a77a:	mov.w	r1, #0
    a77e:	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    a782:	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a786:	bmi.w	a95c <usb_isr+0x964>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a78a:	ldrb	r2, [r5, #3]
			*reg = epconf;
    a78c:	ldr	r1, [pc, #440]	; (a948 <usb_isr+0x950>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a78e:	ldr.w	r8, [pc, #452]	; a954 <usb_isr+0x95c>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a792:	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a794:	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a796:	mov.w	r1, #0
    a79a:	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    a79e:	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7a2:	bmi.w	a8ea <usb_isr+0x8f2>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a7a6:	ldr	r1, [pc, #420]	; (a94c <usb_isr+0x954>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a7a8:	ldrb	r2, [r5, #4]
			*reg = epconf;
    a7aa:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7ac:	movs	r1, #0
    a7ae:	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    a7b2:	str.w	r1, [r9, #152]	; 0x98
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7b6:	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7b8:	ldr.w	r8, [pc, #408]	; a954 <usb_isr+0x95c>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7bc:	bmi.n	a8bc <usb_isr+0x8c4>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    a7be:	ldrb	r2, [r5, #5]
			*reg = epconf;
    a7c0:	ldr	r1, [pc, #396]	; (a950 <usb_isr+0x958>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7c2:	ldr	r5, [pc, #400]	; (a954 <usb_isr+0x95c>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    a7c4:	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7c6:	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7c8:	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7ca:	str.w	r1, [r9, #176]	; 0xb0
			table[index(i, TX, ODD)].desc = 0;
    a7ce:	str.w	r1, [r9, #184]	; 0xb8
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    a7d2:	bmi.n	a88e <usb_isr+0x896>
    a7d4:	ldrb	r3, [r6, #0]
    a7d6:	str	r3, [sp, #8]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    a7d8:	movs	r1, #0
    a7da:	eor.w	r2, r3, #1
    a7de:	str.w	r1, [r9, #208]	; 0xd0
			table[index(i, TX, ODD)].desc = 0;
    a7e2:	str.w	r1, [r9, #216]	; 0xd8
    a7e6:	b.n	a668 <usb_isr+0x670>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    a7e8:	ldr	r3, [sp, #4]
    a7ea:	mov.w	r2, #0
    a7ee:	strb	r2, [r3, #0]
    a7f0:	b.n	a728 <usb_isr+0x730>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    a7f2:	ldr	r2, [pc, #356]	; (a958 <usb_isr+0x960>)
    a7f4:	ldr	r4, [pc, #312]	; (a930 <usb_isr+0x938>)
    a7f6:	ldrb	r2, [r2, #0]
    a7f8:	strb	r2, [r4, #0]
    a7fa:	b.n	a3e2 <usb_isr+0x3ea>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    a7fc:	movs	r3, #1
    a7fe:	movs	r2, #0
    a800:	str	r3, [sp, #8]
    a802:	b.n	a668 <usb_isr+0x670>
    a804:	ldrh	r1, [r5, #4]
    a806:	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a80a:	cmp	r1, #6
    a80c:	bhi.w	a4fe <usb_isr+0x506>
    a810:	ldrh	r2, [r5, #2]
    a812:	cmp	r2, #0
    a814:	bne.w	a4fe <usb_isr+0x506>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a818:	ldr	r4, [pc, #248]	; (a914 <usb_isr+0x91c>)
    a81a:	str	r0, [sp, #8]
    a81c:	lsls	r1, r1, #2
    a81e:	add	r4, r1
    a820:	ldrb	r1, [r4, #0]
    a822:	orr.w	r1, r1, #2
    a826:	strb	r1, [r4, #0]
    a828:	b.n	a668 <usb_isr+0x670>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    a82a:	str	r0, [sp, #8]
    a82c:	b.n	a668 <usb_isr+0x670>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    a82e:	movs	r0, #2
    a830:	b.n	a3e2 <usb_isr+0x3ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a832:	bl	9d78 <usb_malloc>
				if (p) {
    a836:	cmp	r0, #0
    a838:	beq.w	aa12 <usb_isr+0xa1a>
					table[index(i, RX, EVEN)].addr = p->buf;
    a83c:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a83e:	ldr	r2, [pc, #236]	; (a92c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a840:	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a844:	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a848:	bl	9d78 <usb_malloc>
				if (p) {
    a84c:	cmp	r0, #0
    a84e:	beq.w	aa06 <usb_isr+0xa0e>
					table[index(i, RX, ODD)].addr = p->buf;
    a852:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a854:	ldr	r2, [pc, #208]	; (a928 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a856:	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a85a:	str.w	r2, [r9, #72]	; 0x48
    a85e:	b.n	a76e <usb_isr+0x776>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a860:	bl	9d78 <usb_malloc>
				if (p) {
    a864:	cmp	r0, #0
    a866:	beq.w	a9e2 <usb_isr+0x9ea>
					table[index(i, RX, EVEN)].addr = p->buf;
    a86a:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a86c:	ldr	r2, [pc, #188]	; (a92c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a86e:	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a872:	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a876:	bl	9d78 <usb_malloc>
				if (p) {
    a87a:	cmp	r0, #0
    a87c:	beq.w	a9d6 <usb_isr+0x9de>
					table[index(i, RX, ODD)].addr = p->buf;
    a880:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a882:	ldr	r2, [pc, #164]	; (a928 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a884:	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a888:	str.w	r2, [r9, #40]	; 0x28
    a88c:	b.n	a756 <usb_isr+0x75e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a88e:	bl	9d78 <usb_malloc>
				if (p) {
    a892:	cmp	r0, #0
    a894:	beq.w	a9ca <usb_isr+0x9d2>
					table[index(i, RX, EVEN)].addr = p->buf;
    a898:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a89a:	ldr	r2, [pc, #144]	; (a92c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a89c:	str.w	r0, [r5, #196]	; 0xc4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8a0:	str.w	r2, [r5, #192]	; 0xc0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8a4:	bl	9d78 <usb_malloc>
				if (p) {
    a8a8:	cmp	r0, #0
    a8aa:	beq.w	a9be <usb_isr+0x9c6>
					table[index(i, RX, ODD)].addr = p->buf;
    a8ae:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8b0:	ldr	r2, [pc, #116]	; (a928 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a8b2:	str.w	r0, [r9, #204]	; 0xcc
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8b6:	str.w	r2, [r9, #200]	; 0xc8
    a8ba:	b.n	a7d4 <usb_isr+0x7dc>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a8bc:	bl	9d78 <usb_malloc>
				if (p) {
    a8c0:	cmp	r0, #0
    a8c2:	beq.w	a9fa <usb_isr+0xa02>
					table[index(i, RX, EVEN)].addr = p->buf;
    a8c6:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8c8:	ldr	r2, [pc, #96]	; (a92c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a8ca:	str.w	r0, [r8, #164]	; 0xa4
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8ce:	str.w	r2, [r8, #160]	; 0xa0
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8d2:	bl	9d78 <usb_malloc>
				if (p) {
    a8d6:	cmp	r0, #0
    a8d8:	beq.w	a9ee <usb_isr+0x9f6>
					table[index(i, RX, ODD)].addr = p->buf;
    a8dc:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8de:	ldr	r2, [pc, #72]	; (a928 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a8e0:	str.w	r0, [r9, #172]	; 0xac
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a8e4:	str.w	r2, [r9, #168]	; 0xa8
    a8e8:	b.n	a7be <usb_isr+0x7c6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a8ea:	bl	9d78 <usb_malloc>
				if (p) {
    a8ee:	cmp	r0, #0
    a8f0:	beq.n	a9b2 <usb_isr+0x9ba>
					table[index(i, RX, EVEN)].addr = p->buf;
    a8f2:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8f4:	ldr	r2, [pc, #52]	; (a92c <usb_isr+0x934>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a8f6:	str.w	r0, [r8, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a8fa:	str.w	r2, [r8, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a8fe:	bl	9d78 <usb_malloc>
				if (p) {
    a902:	cmp	r0, #0
    a904:	beq.n	a9a6 <usb_isr+0x9ae>
					table[index(i, RX, ODD)].addr = p->buf;
    a906:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a908:	ldr	r2, [pc, #28]	; (a928 <usb_isr+0x930>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a90a:	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a90e:	str.w	r2, [r9, #136]	; 0x88
    a912:	b.n	a7a6 <usb_isr+0x7ae>
    a914:	.word	0x400720c0
    a918:	.word	0x1fff1c08
    a91c:	.word	0x1fff1d84
    a920:	.word	0x1fff1c04
    a924:	.word	0x1fff1d00
    a928:	.word	0x004000c8
    a92c:	.word	0x00400088
    a930:	.word	0x1fff1d04
    a934:	.word	0x00010370
    a938:	.word	0x400720c4
    a93c:	.word	0x1fff1d01
    a940:	.word	0x400720c8
    a944:	.word	0x400720cc
    a948:	.word	0x400720d0
    a94c:	.word	0x400720d4
    a950:	.word	0x400720d8
    a954:	.word	0x1fff0000
    a958:	.word	0x1fff1d0c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    a95c:	bl	9d78 <usb_malloc>
				if (p) {
    a960:	cmp	r0, #0
    a962:	beq.n	aa2a <usb_isr+0xa32>
					table[index(i, RX, EVEN)].addr = p->buf;
    a964:	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a966:	ldr	r2, [pc, #208]	; (aa38 <usb_isr+0xa40>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    a968:	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a96c:	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    a970:	bl	9d78 <usb_malloc>
				if (p) {
    a974:	cmp	r0, #0
    a976:	beq.n	aa1e <usb_isr+0xa26>
					table[index(i, RX, ODD)].addr = p->buf;
    a978:	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a97a:	ldr	r2, [pc, #192]	; (aa3c <usb_isr+0xa44>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    a97c:	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a980:	str.w	r2, [r9, #104]	; 0x68
    a984:	b.n	a78a <usb_isr+0x792>
    a986:	cmp	r0, #64	; 0x40
    a988:	mov	lr, r0
    a98a:	it	cs
    a98c:	movcs.w	lr, #64	; 0x40
    a990:	add.w	r3, r4, lr
    a994:	str	r3, [sp, #4]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    a996:	movs	r3, #1
    a998:	rsb	r0, lr, r0
    a99c:	mov.w	r8, lr, lsl #16
    a9a0:	movs	r2, #0
    a9a2:	str	r3, [sp, #8]
    a9a4:	b.n	a672 <usb_isr+0x67a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a9a6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a9a8:	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    a9ac:	adds	r2, #1
    a9ae:	strb	r2, [r4, #0]
    a9b0:	b.n	a7a6 <usb_isr+0x7ae>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a9b2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a9b4:	str.w	r0, [r8, #128]	; 0x80
					usb_rx_memory_needed++;
    a9b8:	adds	r2, #1
    a9ba:	strb	r2, [r4, #0]
    a9bc:	b.n	a8fe <usb_isr+0x906>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a9be:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a9c0:	str.w	r0, [r9, #200]	; 0xc8
					usb_rx_memory_needed++;
    a9c4:	adds	r2, #1
    a9c6:	strb	r2, [r4, #0]
    a9c8:	b.n	a7d4 <usb_isr+0x7dc>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a9ca:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a9cc:	str.w	r0, [r5, #192]	; 0xc0
					usb_rx_memory_needed++;
    a9d0:	adds	r2, #1
    a9d2:	strb	r2, [r4, #0]
    a9d4:	b.n	a8a4 <usb_isr+0x8ac>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a9d6:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a9d8:	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    a9dc:	adds	r2, #1
    a9de:	strb	r2, [r4, #0]
    a9e0:	b.n	a756 <usb_isr+0x75e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a9e2:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a9e4:	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    a9e8:	adds	r2, #1
    a9ea:	strb	r2, [r4, #0]
    a9ec:	b.n	a876 <usb_isr+0x87e>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    a9ee:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    a9f0:	str.w	r0, [r9, #168]	; 0xa8
					usb_rx_memory_needed++;
    a9f4:	adds	r2, #1
    a9f6:	strb	r2, [r4, #0]
    a9f8:	b.n	a7be <usb_isr+0x7c6>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    a9fa:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    a9fc:	str.w	r0, [r8, #160]	; 0xa0
					usb_rx_memory_needed++;
    aa00:	adds	r2, #1
    aa02:	strb	r2, [r4, #0]
    aa04:	b.n	a8d2 <usb_isr+0x8da>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa06:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa08:	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    aa0c:	adds	r2, #1
    aa0e:	strb	r2, [r4, #0]
    aa10:	b.n	a76e <usb_isr+0x776>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa12:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    aa14:	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    aa18:	adds	r2, #1
    aa1a:	strb	r2, [r4, #0]
    aa1c:	b.n	a848 <usb_isr+0x850>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    aa1e:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    aa20:	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    aa24:	adds	r2, #1
    aa26:	strb	r2, [r4, #0]
    aa28:	b.n	a78a <usb_isr+0x792>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    aa2a:	ldrb	r2, [r4, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    aa2c:	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    aa30:	adds	r2, #1
    aa32:	strb	r2, [r4, #0]
    aa34:	b.n	a970 <usb_isr+0x978>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    aa36:	bkpt	0x0000
    aa38:	.word	0x00400088
    aa3c:	.word	0x004000c8

0000aa40 <usb_init>:
}



void usb_init(void)
{
    aa40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aa44:	ldr	r4, [pc, #144]	; (aad8 <usb_init+0x98>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    aa46:	bl	ae78 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    aa4a:	movs	r2, #0
    aa4c:	add.w	r0, r4, #224	; 0xe0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    aa50:	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    aa52:	str	r2, [r3, #0]
		table[i].addr = 0;
    aa54:	str	r2, [r3, #4]
    aa56:	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    aa58:	cmp	r3, r0
		table[i].desc = 0;
    aa5a:	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    aa5e:	bne.n	aa52 <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aa60:	ldr	r0, [pc, #120]	; (aadc <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aa62:	ldr	r2, [pc, #124]	; (aae0 <usb_init+0xa0>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aa64:	ldr	r3, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    aa66:	ldr.w	lr, [pc, #144]	; aaf8 <usb_init+0xb8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aa6a:	ldr	r7, [pc, #120]	; (aae4 <usb_init+0xa4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aa6c:	ldr	r5, [pc, #120]	; (aae8 <usb_init+0xa8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    aa6e:	ldr	r6, [pc, #124]	; (aaec <usb_init+0xac>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    aa70:	ldr.w	r8, [pc, #136]	; aafc <usb_init+0xbc>
	USB0_ERRSTAT = 0xFF;
    aa74:	ldr.w	ip, [pc, #136]	; ab00 <usb_init+0xc0>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    aa78:	ldr.w	r9, [pc, #136]	; ab04 <usb_init+0xc4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    aa7c:	orr.w	r3, r3, #262144	; 0x40000
    aa80:	str	r3, [r0, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aa82:	ldr	r3, [r2, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aa84:	ldr	r0, [pc, #104]	; (aaf0 <usb_init+0xb0>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    aa86:	orr.w	r3, r3, #50331648	; 0x3000000
    aa8a:	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    aa8c:	ubfx	r3, r4, #8, #8
    aa90:	strb.w	r3, [lr]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    aa94:	ubfx	r3, r4, #16, #8
    aa98:	strb	r3, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aa9a:	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    aa9c:	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aa9e:	add.w	r2, r2, #411648	; 0x64800
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    aaa2:	strb	r4, [r5, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aaa4:	add.w	r2, r2, #264	; 0x108
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    aaa8:	strb.w	r3, [r8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aaac:	ldr	r5, [pc, #68]	; (aaf4 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    aaae:	strb.w	r3, [ip]
	USB0_OTGISTAT = 0xFF;
    aab2:	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    aab4:	movs	r3, #1
    aab6:	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aaba:	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aabc:	strb.w	r1, [lr, #100]	; 0x64
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aac0:	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aac4:	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    aac6:	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    aaca:	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    aacc:	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aace:	strb	r1, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    aad0:	add.w	lr, lr, #100	; 0x64
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    aad4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aad8:	.word	0x1fff0000
    aadc:	.word	0x40048034
    aae0:	.word	0x4000d800
    aae4:	.word	0x400720b0
    aae8:	.word	0x400720b4
    aaec:	.word	0x40072010
    aaf0:	.word	0xe000e104
    aaf4:	.word	0xe000e435
    aaf8:	.word	0x4007209c
    aafc:	.word	0x40072080
    ab00:	.word	0x40072088
    ab04:	.word	0x40072094

0000ab08 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ab08:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    ab0c:	ldr	r6, [pc, #196]	; (abd4 <yield+0xcc>)
    ab0e:	ldrb	r3, [r6, #0]
    ab10:	cbz	r3, ab38 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    ab12:	ldr	r7, [pc, #196]	; (abd8 <yield+0xd0>)
    ab14:	ldrb	r2, [r7, #0]
    ab16:	cbnz	r2, ab38 <yield+0x30>
	running = 1;
    ab18:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    ab1a:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    ab1c:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    ab1e:	bmi.n	ab8e <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    ab20:	lsls	r2, r3, #30
    ab22:	bmi.n	ab58 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    ab24:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    ab26:	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    ab28:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    ab2a:	bpl.n	ab38 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    ab2c:	ldr	r3, [pc, #172]	; (abdc <yield+0xd4>)
    ab2e:	ldr	r2, [r3, #0]
    ab30:	cbz	r2, ab38 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ab32:	mrs	r2, IPSR
		if (ipsr != 0) return;
    ab36:	cbz	r2, ab3c <yield+0x34>
    ab38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ab3c:	mrs	r1, PRIMASK
		__disable_irq();
    ab40:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    ab42:	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ab44:	cbz	r0, ab4e <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    ab46:	ldr	r4, [pc, #152]	; (abe0 <yield+0xd8>)
    ab48:	ldrb	r2, [r4, #0]
    ab4a:	cmp	r2, #0
    ab4c:	beq.n	abac <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ab4e:	cmp	r1, #0
    ab50:	bne.n	ab38 <yield+0x30>
    ab52:	cpsie	i
    ab54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ab58:	ldr.w	r8, [pc, #144]	; abec <yield+0xe4>
    ab5c:	ldrb.w	r2, [r8]
    ab60:	cmp	r2, #0
    ab62:	beq.n	ab24 <yield+0x1c>
    ab64:	ldr.w	r9, [pc, #136]	; abf0 <yield+0xe8>
    ab68:	movs	r4, #0
    ab6a:	b.n	ab78 <yield+0x70>
    ab6c:	adds	r4, #1
    ab6e:	ldrb.w	r3, [r8]
    ab72:	uxtb	r4, r4
    ab74:	cmp	r3, r4
    ab76:	bls.n	ab9e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    ab78:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    ab7c:	ldr	r3, [r5, #0]
    ab7e:	mov	r0, r5
    ab80:	ldr	r3, [r3, #16]
    ab82:	blx	r3
    ab84:	cmp	r0, #0
    ab86:	beq.n	ab6c <yield+0x64>
    ab88:	ldr	r3, [r5, #16]
    ab8a:	blx	r3
    ab8c:	b.n	ab6c <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ab8e:	bl	9730 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    ab92:	cbnz	r0, abc8 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    ab94:	ldr	r3, [pc, #76]	; (abe4 <yield+0xdc>)
    ab96:	ldrb	r3, [r3, #0]
    ab98:	cbnz	r3, aba2 <yield+0x9a>
    ab9a:	ldrb	r3, [r6, #0]
    ab9c:	b.n	ab20 <yield+0x18>
    ab9e:	ldrb	r3, [r6, #0]
    aba0:	b.n	ab24 <yield+0x1c>
    aba2:	ldrb	r3, [r6, #0]
    aba4:	and.w	r3, r3, #254	; 0xfe
    aba8:	strb	r3, [r6, #0]
    abaa:	b.n	ab20 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    abac:	ldr	r5, [r0, #20]
    abae:	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    abb0:	movs	r3, #1
    abb2:	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    abb4:	cbz	r5, abce <yield+0xc6>
			firstYield->_prev = nullptr;
    abb6:	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    abb8:	cbnz	r1, abbc <yield+0xb4>
    abba:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    abbc:	movs	r5, #0
    abbe:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    abc0:	ldr	r3, [r0, #8]
    abc2:	blx	r3
		runningFromYield = false;
    abc4:	strb	r5, [r4, #0]
    abc6:	b.n	ab38 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    abc8:	bl	ad8c <serialEvent()>
    abcc:	b.n	ab94 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    abce:	ldr	r3, [pc, #24]	; (abe8 <yield+0xe0>)
    abd0:	str	r5, [r3, #0]
    abd2:	b.n	abb8 <yield+0xb0>
    abd4:	.word	0x1fff0988
    abd8:	.word	0x1fff1d16
    abdc:	.word	0x1fff1d24
    abe0:	.word	0x1fff1d28
    abe4:	.word	0x1fff099c
    abe8:	.word	0x1fff1d20
    abec:	.word	0x1fff1d44
    abf0:	.word	0x1fff1d2c

0000abf4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    abf4:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    abf6:	mrs	r2, PRIMASK
		__disable_irq();
    abfa:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    abfc:	ldr	r4, [pc, #48]	; (ac30 <EventResponder::runFromInterrupt()+0x3c>)
    abfe:	ldr	r0, [r4, #0]
		if (first) {
    ac00:	cbz	r0, ac24 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ac02:	ldr	r6, [pc, #48]	; (ac34 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    ac04:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    ac06:	ldr	r3, [r0, #20]
    ac08:	str	r3, [r4, #0]
			if (firstInterrupt) {
    ac0a:	cbz	r3, ac2a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    ac0c:	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac0e:	cbnz	r2, ac12 <EventResponder::runFromInterrupt()+0x1e>
    ac10:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    ac12:	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ac14:	ldr	r3, [r0, #8]
    ac16:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ac18:	mrs	r2, PRIMASK
		__disable_irq();
    ac1c:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ac1e:	ldr	r0, [r4, #0]
		if (first) {
    ac20:	cmp	r0, #0
    ac22:	bne.n	ac06 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ac24:	cbnz	r2, ac28 <EventResponder::runFromInterrupt()+0x34>
    ac26:	cpsie	i
    ac28:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ac2a:	str	r3, [r6, #0]
    ac2c:	b.n	ac0e <EventResponder::runFromInterrupt()+0x1a>
    ac2e:	nop
    ac30:	.word	0x1fff1d18
    ac34:	.word	0x1fff1d1c

0000ac38 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    ac38:	b.w	abf4 <EventResponder::runFromInterrupt()>

0000ac3c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    ac3c:	ldr	r2, [pc, #8]	; (ac48 <systick_isr+0xc>)
    ac3e:	ldr	r3, [r2, #0]
    ac40:	adds	r3, #1
    ac42:	str	r3, [r2, #0]
    ac44:	bx	lr
    ac46:	nop
    ac48:	.word	0x1fff1c08

0000ac4c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    ac4c:	b.w	974c <usb_serial_flush_input>

0000ac50 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    ac50:	b.w	9700 <usb_serial_peekchar>

0000ac54 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    ac54:	b.w	96b8 <usb_serial_getchar>

0000ac58 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    ac58:	b.w	9730 <usb_serial_available>

0000ac5c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ac5c:	b.w	98ec <usb_serial_flush_output>

0000ac60 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ac60:	b.w	98a4 <usb_serial_write_buffer_free>

0000ac64 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ac64:	mov	r0, r1
    ac66:	mov	r1, r2
    ac68:	b.w	9784 <usb_serial_write>

0000ac6c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ac6c:	mov	r0, r1
    ac6e:	b.w	988c <usb_serial_putchar>
    ac72:	nop

0000ac74 <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    ac74:	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    ac76:	mov	r6, r1
    ac78:	cbz	r1, ac98 <Print::write(unsigned char const*, unsigned int)+0x24>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    ac7a:	cbz	r2, ac9c <Print::write(unsigned char const*, unsigned int)+0x28>
    ac7c:	mov	r7, r0
    ac7e:	mov	r4, r2
    ac80:	movs	r5, #0
    ac82:	ldr	r3, [r7, #0]
    ac84:	ldrb.w	r1, [r6], #1
    ac88:	ldr	r3, [r3, #0]
    ac8a:	mov	r0, r7
    ac8c:	blx	r3
    ac8e:	subs	r4, #1
    ac90:	add	r5, r0
    ac92:	bne.n	ac82 <Print::write(unsigned char const*, unsigned int)+0xe>
    ac94:	mov	r0, r5
    ac96:	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
    ac98:	mov	r0, r1
    ac9a:	pop	{r3, r4, r5, r6, r7, pc}
    ac9c:	mov	r0, r2
	size_t count = 0;
	while (size--) count += write(*buffer++);
	return count;
}
    ac9e:	pop	{r3, r4, r5, r6, r7, pc}

0000aca0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    aca0:	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    aca2:	ldr	r2, [pc, #24]	; (acbc <Print::println()+0x1c>)
	return write(buf, 2);
    aca4:	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    aca6:	ldrh	r2, [r2, #0]
	return write(buf, 2);
    aca8:	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    acaa:	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    acac:	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    acae:	strh.w	r2, [sp, #4]
	return write(buf, 2);
    acb2:	movs	r2, #2
    acb4:	blx	r3
}
    acb6:	add	sp, #12
    acb8:	ldr.w	pc, [sp], #4
    acbc:	.word	0x0001036c

0000acc0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    acc0:	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    acc2:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    acc4:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    acc6:	ldr	r3, [r3, #4]
    acc8:	blx	r3
	return len;
}
    acca:	mov	r0, r4
    accc:	pop	{r4, pc}
    acce:	nop

0000acd0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    acd0:	push	{r1, r2, r3}
    acd2:	push	{lr}
    acd4:	sub	sp, #8
    acd6:	add	r2, sp, #12
    acd8:	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    acdc:	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    acde:	bl	cb08 <vdprintf>
#endif
}
    ace2:	add	sp, #8
    ace4:	ldr.w	lr, [sp], #4
    ace8:	add	sp, #12
    acea:	bx	lr

0000acec <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    acec:	push	{r4, r5, r6, r7, lr}
    acee:	mov	r7, r0
    acf0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    acf2:	cmp	r2, #0
    acf4:	beq.n	ad5e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    acf6:	cmp	r2, #1
    acf8:	it	eq
    acfa:	moveq	r2, #10
	}


	if (n == 0) {
    acfc:	cbz	r1, ad54 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    acfe:	movs	r4, #33	; 0x21
    ad00:	b.n	ad04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ad02:	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ad04:	udiv	r5, r1, r2
    ad08:	mls	r1, r2, r5, r1
    ad0c:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ad0e:	cmp	r1, #9
    ad10:	add.w	r1, r0, #48	; 0x30
    ad14:	it	ls
    ad16:	uxtbls	r0, r1
    ad18:	add	r1, sp, #40	; 0x28
    ad1a:	it	hi
    ad1c:	addhi	r0, #55	; 0x37
    ad1e:	add	r1, r4
    ad20:	it	hi
    ad22:	uxtbhi	r0, r0
    ad24:	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    ad28:	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    ad2a:	mov	r1, r5
    ad2c:	cmp	r5, #0
    ad2e:	bne.n	ad02 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    ad30:	cbz	r3, ad40 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    ad32:	subs	r4, #1
    ad34:	uxtb	r4, r4
		buf[i] = '-';
    ad36:	add	r3, sp, #40	; 0x28
    ad38:	add	r3, r4
    ad3a:	movs	r2, #45	; 0x2d
    ad3c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    ad40:	ldr	r3, [r7, #0]
    ad42:	add	r2, sp, #4
    ad44:	adds	r1, r2, r4
    ad46:	ldr	r3, [r3, #4]
    ad48:	mov	r0, r7
    ad4a:	rsb	r2, r4, #34	; 0x22
    ad4e:	blx	r3
}
    ad50:	add	sp, #44	; 0x2c
    ad52:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    ad54:	movs	r2, #48	; 0x30
    ad56:	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    ad5a:	movs	r4, #33	; 0x21
    ad5c:	b.n	ad30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    ad5e:	ldr	r3, [r0, #0]
    ad60:	uxtb	r1, r1
    ad62:	ldr	r3, [r3, #0]
    ad64:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    ad66:	add	sp, #44	; 0x2c
    ad68:	pop	{r4, r5, r6, r7, pc}
    ad6a:	nop

0000ad6c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    ad6c:	cmp	r1, #0
		sign = '-';
		n = -n;
    ad6e:	itte	lt
    ad70:	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    ad72:	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    ad74:	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    ad76:	movs	r2, #10
    ad78:	b.w	acec <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000ad7c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    ad7c:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    ad7e:	bl	684 <setup>
	while (1) {
		loop();
    ad82:	bl	710 <loop>
		yield();
    ad86:	bl	ab08 <yield>
    ad8a:	b.n	ad82 <main+0x6>

0000ad8c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    ad8c:	bx	lr
    ad8e:	nop

0000ad90 <operator new(unsigned int)>:
    ad90:	b.w	bbec <malloc>

0000ad94 <operator delete(void*, unsigned int)>:
    ad94:	b.w	bbfc <free>

0000ad98 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    ad98:	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ad9a:	ldr	r0, [pc, #164]	; (ae40 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    ad9c:	ldr	r2, [pc, #164]	; (ae44 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    ad9e:	ldr	r3, [pc, #168]	; (ae48 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ada0:	ldr	r5, [pc, #168]	; (ae4c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ada2:	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    ada4:	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    ada6:	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    ada8:	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    adaa:	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    adac:	ldr	r4, [pc, #160]	; (ae50 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    adae:	cmp	r3, #8
    adb0:	beq.n	ae14 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    adb2:	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    adb4:	ldr	r0, [pc, #156]	; (ae54 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    adb6:	ldr	r1, [pc, #160]	; (ae58 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    adb8:	beq.n	ae2a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    adba:	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    adbc:	ite	eq
    adbe:	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    adc0:	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    adc2:	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    adc4:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    adc6:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    adc8:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    adca:	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    adcc:	ldr	r3, [pc, #140]	; (ae5c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    adce:	ldr	r1, [pc, #144]	; (ae60 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    add0:	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    add2:	ldr	r2, [pc, #144]	; (ae64 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    add4:	cbz	r3, ae06 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    add6:	movs	r3, #1
    add8:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    adda:	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    addc:	ldr	r3, [pc, #136]	; (ae68 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    adde:	ldr	r1, [pc, #140]	; (ae6c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    ade0:	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ade2:	ldr	r2, [pc, #140]	; (ae70 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    ade4:	cmp	r3, #1
    ade6:	bls.n	ae36 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    ade8:	cmp	r3, #4
    adea:	bls.n	ae0c <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    adec:	cmp	r3, #8
    adee:	bls.n	ae2e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    adf0:	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    adf2:	ite	ls
    adf4:	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    adf6:	movhi	r3, #135	; 0x87
    adf8:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    adfa:	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    adfc:	ldr	r3, [pc, #116]	; (ae74 <analog_init+0xdc>)
    adfe:	movs	r2, #1
    ae00:	strb	r2, [r3, #0]
}
    ae02:	pop	{r4, r5}
    ae04:	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ae06:	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    ae08:	str	r3, [r2, #0]
    ae0a:	b.n	addc <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ae0c:	movs	r3, #132	; 0x84
    ae0e:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    ae10:	str	r3, [r2, #0]
    ae12:	b.n	adfc <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ae14:	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ae18:	ldr	r1, [pc, #60]	; (ae58 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ae1a:	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    ae1c:	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ae1e:	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ae20:	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ae22:	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ae24:	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    ae26:	str	r3, [r1, #0]
    ae28:	b.n	adcc <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    ae2a:	movs	r2, #57	; 0x39
    ae2c:	b.n	ae1e <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ae2e:	movs	r3, #133	; 0x85
    ae30:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    ae32:	str	r3, [r2, #0]
    ae34:	b.n	adfc <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    ae36:	movs	r3, #128	; 0x80
    ae38:	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    ae3a:	str	r3, [r2, #0]
    ae3c:	b.n	adfc <analog_init+0x64>
    ae3e:	nop
    ae40:	.word	0x40074000
    ae44:	.word	0x40074001
    ae48:	.word	0x1fff099d
    ae4c:	.word	0x4003b008
    ae50:	.word	0x4003b00c
    ae54:	.word	0x400bb008
    ae58:	.word	0x400bb00c
    ae5c:	.word	0x1fff1d46
    ae60:	.word	0x4003b020
    ae64:	.word	0x400bb020
    ae68:	.word	0x1fff099e
    ae6c:	.word	0x4003b024
    ae70:	.word	0x400bb024
    ae74:	.word	0x1fff1d45

0000ae78 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    ae78:	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ae7a:	ldr	r2, [pc, #96]	; (aedc <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ae7c:	ldr	r3, [pc, #96]	; (aee0 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    ae7e:	ldr	r1, [pc, #100]	; (aee4 <usb_init_serialnumber+0x6c>)
    ae80:	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ae82:	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ae84:	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    ae86:	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ae88:	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    ae8a:	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    ae8c:	ldrb	r3, [r2, #0]
    ae8e:	lsls	r3, r3, #24
    ae90:	bpl.n	ae8c <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ae92:	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ae94:	ldr	r3, [pc, #80]	; (aee8 <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ae96:	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    ae98:	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    ae9a:	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ae9c:	ldr	r3, [pc, #76]	; (aeec <usb_init_serialnumber+0x74>)
    ae9e:	ldr	r4, [pc, #80]	; (aef0 <usb_init_serialnumber+0x78>)
    aea0:	cmp	r0, r3
    aea2:	it	ls
    aea4:	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    aea8:	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    aeaa:	it	ls
    aeac:	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    aeae:	movs	r2, #10
    aeb0:	bl	aef4 <ultoa>
    aeb4:	add	r1, sp, #4
    aeb6:	mov	r0, r4
	for (i=0; i<10; i++) {
    aeb8:	movs	r3, #0
		char c = buf[i];
    aeba:	ldrb.w	r2, [r1], #1
    aebe:	adds	r3, #1
		if (!c) break;
    aec0:	cbz	r2, aed2 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aec2:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    aec4:	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    aec8:	bne.n	aeba <usb_init_serialnumber+0x42>
    aeca:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aecc:	strb	r3, [r4, #0]
}
    aece:	add	sp, #16
    aed0:	pop	{r4, pc}
    aed2:	lsls	r3, r3, #1
    aed4:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    aed6:	strb	r3, [r4, #0]
}
    aed8:	add	sp, #16
    aeda:	pop	{r4, pc}
    aedc:	.word	0x40020004
    aee0:	.word	0x40020000
    aee4:	.word	0x41070000
    aee8:	.word	0x4002000c
    aeec:	.word	0x0098967f
    aef0:	.word	0x1fff0a74

0000aef4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    aef4:	push	{r4, r5, r6, r7}
    aef6:	subs	r5, r1, #1
    aef8:	mov	r6, r5
	unsigned digit;
	int i=0, j;
    aefa:	movs	r4, #0
    aefc:	b.n	af00 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    aefe:	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    af00:	udiv	r3, r0, r2
    af04:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    af08:	cmp	r0, #9
    af0a:	add.w	r7, r0, #48	; 0x30
    af0e:	itet	hi
    af10:	addhi	r0, #55	; 0x37
    af12:	uxtbls	r0, r7
    af14:	uxtbhi	r0, r0
    af16:	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    af1a:	mov	r0, r3
    af1c:	cmp	r3, #0
    af1e:	bne.n	aefe <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    af20:	adds	r2, r1, r4
    af22:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    af24:	cbz	r4, af3a <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    af26:	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    af28:	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    af2c:	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    af2e:	adds	r3, #1
    af30:	subs	r0, r4, r3
    af32:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    af34:	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    af38:	blt.n	af26 <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    af3a:	mov	r0, r1
    af3c:	pop	{r4, r5, r6, r7}
    af3e:	bx	lr

0000af40 <__aeabi_atexit>:
    af40:	mov	r3, r1
    af42:	mov	r1, r0
    af44:	mov	r0, r3
    af46:	b.w	bb84 <__cxa_atexit>
    af4a:	nop

0000af4c <__aeabi_drsub>:
    af4c:	eor.w	r1, r1, #2147483648	; 0x80000000
    af50:	b.n	af58 <__adddf3>
    af52:	nop

0000af54 <__aeabi_dsub>:
    af54:	eor.w	r3, r3, #2147483648	; 0x80000000

0000af58 <__adddf3>:
    af58:	push	{r4, r5, lr}
    af5a:	mov.w	r4, r1, lsl #1
    af5e:	mov.w	r5, r3, lsl #1
    af62:	teq	r4, r5
    af66:	it	eq
    af68:	teqeq	r0, r2
    af6c:	itttt	ne
    af6e:	orrsne.w	ip, r4, r0
    af72:	orrsne.w	ip, r5, r2
    af76:	mvnsne.w	ip, r4, asr #21
    af7a:	mvnsne.w	ip, r5, asr #21
    af7e:	beq.w	b146 <__adddf3+0x1ee>
    af82:	mov.w	r4, r4, lsr #21
    af86:	rsbs	r5, r4, r5, lsr #21
    af8a:	it	lt
    af8c:	neglt	r5, r5
    af8e:	ble.n	afaa <__adddf3+0x52>
    af90:	add	r4, r5
    af92:	eor.w	r2, r0, r2
    af96:	eor.w	r3, r1, r3
    af9a:	eor.w	r0, r2, r0
    af9e:	eor.w	r1, r3, r1
    afa2:	eor.w	r2, r0, r2
    afa6:	eor.w	r3, r1, r3
    afaa:	cmp	r5, #54	; 0x36
    afac:	it	hi
    afae:	pophi	{r4, r5, pc}
    afb0:	tst.w	r1, #2147483648	; 0x80000000
    afb4:	mov.w	r1, r1, lsl #12
    afb8:	mov.w	ip, #1048576	; 0x100000
    afbc:	orr.w	r1, ip, r1, lsr #12
    afc0:	beq.n	afc8 <__adddf3+0x70>
    afc2:	negs	r0, r0
    afc4:	sbc.w	r1, r1, r1, lsl #1
    afc8:	tst.w	r3, #2147483648	; 0x80000000
    afcc:	mov.w	r3, r3, lsl #12
    afd0:	orr.w	r3, ip, r3, lsr #12
    afd4:	beq.n	afdc <__adddf3+0x84>
    afd6:	negs	r2, r2
    afd8:	sbc.w	r3, r3, r3, lsl #1
    afdc:	teq	r4, r5
    afe0:	beq.w	b132 <__adddf3+0x1da>
    afe4:	sub.w	r4, r4, #1
    afe8:	rsbs	lr, r5, #32
    afec:	blt.n	b00a <__adddf3+0xb2>
    afee:	lsl.w	ip, r2, lr
    aff2:	lsr.w	r2, r2, r5
    aff6:	adds	r0, r0, r2
    aff8:	adc.w	r1, r1, #0
    affc:	lsl.w	r2, r3, lr
    b000:	adds	r0, r0, r2
    b002:	asr.w	r3, r3, r5
    b006:	adcs	r1, r3
    b008:	b.n	b028 <__adddf3+0xd0>
    b00a:	sub.w	r5, r5, #32
    b00e:	add.w	lr, lr, #32
    b012:	cmp	r2, #1
    b014:	lsl.w	ip, r3, lr
    b018:	it	cs
    b01a:	orrcs.w	ip, ip, #2
    b01e:	asr.w	r3, r3, r5
    b022:	adds	r0, r0, r3
    b024:	adcs.w	r1, r1, r3, asr #31
    b028:	and.w	r5, r1, #2147483648	; 0x80000000
    b02c:	bpl.n	b03e <__adddf3+0xe6>
    b02e:	mov.w	lr, #0
    b032:	rsbs	ip, ip, #0
    b036:	sbcs.w	r0, lr, r0
    b03a:	sbc.w	r1, lr, r1
    b03e:	cmp.w	r1, #1048576	; 0x100000
    b042:	bcc.n	b07c <__adddf3+0x124>
    b044:	cmp.w	r1, #2097152	; 0x200000
    b048:	bcc.n	b064 <__adddf3+0x10c>
    b04a:	lsrs	r1, r1, #1
    b04c:	movs.w	r0, r0, rrx
    b050:	mov.w	ip, ip, rrx
    b054:	add.w	r4, r4, #1
    b058:	mov.w	r2, r4, lsl #21
    b05c:	cmn.w	r2, #4194304	; 0x400000
    b060:	bcs.w	b198 <__adddf3+0x240>
    b064:	cmp.w	ip, #2147483648	; 0x80000000
    b068:	it	eq
    b06a:	movseq.w	ip, r0, lsr #1
    b06e:	adcs.w	r0, r0, #0
    b072:	adc.w	r1, r1, r4, lsl #20
    b076:	orr.w	r1, r1, r5
    b07a:	pop	{r4, r5, pc}
    b07c:	movs.w	ip, ip, lsl #1
    b080:	adcs	r0, r0
    b082:	adc.w	r1, r1, r1
    b086:	tst.w	r1, #1048576	; 0x100000
    b08a:	sub.w	r4, r4, #1
    b08e:	bne.n	b064 <__adddf3+0x10c>
    b090:	teq	r1, #0
    b094:	itt	eq
    b096:	moveq	r1, r0
    b098:	moveq	r0, #0
    b09a:	clz	r3, r1
    b09e:	it	eq
    b0a0:	addeq	r3, #32
    b0a2:	sub.w	r3, r3, #11
    b0a6:	subs.w	r2, r3, #32
    b0aa:	bge.n	b0c6 <__adddf3+0x16e>
    b0ac:	adds	r2, #12
    b0ae:	ble.n	b0c2 <__adddf3+0x16a>
    b0b0:	add.w	ip, r2, #20
    b0b4:	rsb	r2, r2, #12
    b0b8:	lsl.w	r0, r1, ip
    b0bc:	lsr.w	r1, r1, r2
    b0c0:	b.n	b0dc <__adddf3+0x184>
    b0c2:	add.w	r2, r2, #20
    b0c6:	it	le
    b0c8:	rsble	ip, r2, #32
    b0cc:	lsl.w	r1, r1, r2
    b0d0:	lsr.w	ip, r0, ip
    b0d4:	itt	le
    b0d6:	orrle.w	r1, r1, ip
    b0da:	lslle	r0, r2
    b0dc:	subs	r4, r4, r3
    b0de:	ittt	ge
    b0e0:	addge.w	r1, r1, r4, lsl #20
    b0e4:	orrge	r1, r5
    b0e6:	popge	{r4, r5, pc}
    b0e8:	mvn.w	r4, r4
    b0ec:	subs	r4, #31
    b0ee:	bge.n	b12a <__adddf3+0x1d2>
    b0f0:	adds	r4, #12
    b0f2:	bgt.n	b112 <__adddf3+0x1ba>
    b0f4:	add.w	r4, r4, #20
    b0f8:	rsb	r2, r4, #32
    b0fc:	lsr.w	r0, r0, r4
    b100:	lsl.w	r3, r1, r2
    b104:	orr.w	r0, r0, r3
    b108:	lsr.w	r3, r1, r4
    b10c:	orr.w	r1, r5, r3
    b110:	pop	{r4, r5, pc}
    b112:	rsb	r4, r4, #12
    b116:	rsb	r2, r4, #32
    b11a:	lsr.w	r0, r0, r2
    b11e:	lsl.w	r3, r1, r4
    b122:	orr.w	r0, r0, r3
    b126:	mov	r1, r5
    b128:	pop	{r4, r5, pc}
    b12a:	lsr.w	r0, r1, r4
    b12e:	mov	r1, r5
    b130:	pop	{r4, r5, pc}
    b132:	teq	r4, #0
    b136:	eor.w	r3, r3, #1048576	; 0x100000
    b13a:	itte	eq
    b13c:	eoreq.w	r1, r1, #1048576	; 0x100000
    b140:	addeq	r4, #1
    b142:	subne	r5, #1
    b144:	b.n	afe4 <__adddf3+0x8c>
    b146:	mvns.w	ip, r4, asr #21
    b14a:	it	ne
    b14c:	mvnsne.w	ip, r5, asr #21
    b150:	beq.n	b1a6 <__adddf3+0x24e>
    b152:	teq	r4, r5
    b156:	it	eq
    b158:	teqeq	r0, r2
    b15c:	beq.n	b16a <__adddf3+0x212>
    b15e:	orrs.w	ip, r4, r0
    b162:	itt	eq
    b164:	moveq	r1, r3
    b166:	moveq	r0, r2
    b168:	pop	{r4, r5, pc}
    b16a:	teq	r1, r3
    b16e:	ittt	ne
    b170:	movne	r1, #0
    b172:	movne	r0, #0
    b174:	popne	{r4, r5, pc}
    b176:	movs.w	ip, r4, lsr #21
    b17a:	bne.n	b188 <__adddf3+0x230>
    b17c:	lsls	r0, r0, #1
    b17e:	adcs	r1, r1
    b180:	it	cs
    b182:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b186:	pop	{r4, r5, pc}
    b188:	adds.w	r4, r4, #4194304	; 0x400000
    b18c:	itt	cc
    b18e:	addcc.w	r1, r1, #1048576	; 0x100000
    b192:	popcc	{r4, r5, pc}
    b194:	and.w	r5, r1, #2147483648	; 0x80000000
    b198:	orr.w	r1, r5, #2130706432	; 0x7f000000
    b19c:	orr.w	r1, r1, #15728640	; 0xf00000
    b1a0:	mov.w	r0, #0
    b1a4:	pop	{r4, r5, pc}
    b1a6:	mvns.w	ip, r4, asr #21
    b1aa:	itte	ne
    b1ac:	movne	r1, r3
    b1ae:	movne	r0, r2
    b1b0:	mvnseq.w	ip, r5, asr #21
    b1b4:	itt	ne
    b1b6:	movne	r3, r1
    b1b8:	movne	r2, r0
    b1ba:	orrs.w	r4, r0, r1, lsl #12
    b1be:	itte	eq
    b1c0:	orrseq.w	r5, r2, r3, lsl #12
    b1c4:	teqeq	r1, r3
    b1c8:	orrne.w	r1, r1, #524288	; 0x80000
    b1cc:	pop	{r4, r5, pc}
    b1ce:	nop

0000b1d0 <__aeabi_ui2d>:
    b1d0:	teq	r0, #0
    b1d4:	itt	eq
    b1d6:	moveq	r1, #0
    b1d8:	bxeq	lr
    b1da:	push	{r4, r5, lr}
    b1dc:	mov.w	r4, #1024	; 0x400
    b1e0:	add.w	r4, r4, #50	; 0x32
    b1e4:	mov.w	r5, #0
    b1e8:	mov.w	r1, #0
    b1ec:	b.n	b090 <__adddf3+0x138>
    b1ee:	nop

0000b1f0 <__aeabi_i2d>:
    b1f0:	teq	r0, #0
    b1f4:	itt	eq
    b1f6:	moveq	r1, #0
    b1f8:	bxeq	lr
    b1fa:	push	{r4, r5, lr}
    b1fc:	mov.w	r4, #1024	; 0x400
    b200:	add.w	r4, r4, #50	; 0x32
    b204:	ands.w	r5, r0, #2147483648	; 0x80000000
    b208:	it	mi
    b20a:	negmi	r0, r0
    b20c:	mov.w	r1, #0
    b210:	b.n	b090 <__adddf3+0x138>
    b212:	nop

0000b214 <__aeabi_f2d>:
    b214:	lsls	r2, r0, #1
    b216:	mov.w	r1, r2, asr #3
    b21a:	mov.w	r1, r1, rrx
    b21e:	mov.w	r0, r2, lsl #28
    b222:	itttt	ne
    b224:	andsne.w	r3, r2, #4278190080	; 0xff000000
    b228:	teqne	r3, #4278190080	; 0xff000000
    b22c:	eorne.w	r1, r1, #939524096	; 0x38000000
    b230:	bxne	lr
    b232:	teq	r2, #0
    b236:	ite	ne
    b238:	teqne	r3, #4278190080	; 0xff000000
    b23c:	bxeq	lr
    b23e:	push	{r4, r5, lr}
    b240:	mov.w	r4, #896	; 0x380
    b244:	and.w	r5, r1, #2147483648	; 0x80000000
    b248:	bic.w	r1, r1, #2147483648	; 0x80000000
    b24c:	b.n	b090 <__adddf3+0x138>
    b24e:	nop

0000b250 <__aeabi_ul2d>:
    b250:	orrs.w	r2, r0, r1
    b254:	it	eq
    b256:	bxeq	lr
    b258:	push	{r4, r5, lr}
    b25a:	mov.w	r5, #0
    b25e:	b.n	b276 <__aeabi_l2d+0x16>

0000b260 <__aeabi_l2d>:
    b260:	orrs.w	r2, r0, r1
    b264:	it	eq
    b266:	bxeq	lr
    b268:	push	{r4, r5, lr}
    b26a:	ands.w	r5, r1, #2147483648	; 0x80000000
    b26e:	bpl.n	b276 <__aeabi_l2d+0x16>
    b270:	negs	r0, r0
    b272:	sbc.w	r1, r1, r1, lsl #1
    b276:	mov.w	r4, #1024	; 0x400
    b27a:	add.w	r4, r4, #50	; 0x32
    b27e:	movs.w	ip, r1, lsr #22
    b282:	beq.w	b03e <__adddf3+0xe6>
    b286:	mov.w	r2, #3
    b28a:	movs.w	ip, ip, lsr #3
    b28e:	it	ne
    b290:	addne	r2, #3
    b292:	movs.w	ip, ip, lsr #3
    b296:	it	ne
    b298:	addne	r2, #3
    b29a:	add.w	r2, r2, ip, lsr #3
    b29e:	rsb	r3, r2, #32
    b2a2:	lsl.w	ip, r0, r3
    b2a6:	lsr.w	r0, r0, r2
    b2aa:	lsl.w	lr, r1, r3
    b2ae:	orr.w	r0, r0, lr
    b2b2:	lsr.w	r1, r1, r2
    b2b6:	add	r4, r2
    b2b8:	b.n	b03e <__adddf3+0xe6>
    b2ba:	nop

0000b2bc <__aeabi_dmul>:
    b2bc:	push	{r4, r5, r6, lr}
    b2be:	mov.w	ip, #255	; 0xff
    b2c2:	orr.w	ip, ip, #1792	; 0x700
    b2c6:	ands.w	r4, ip, r1, lsr #20
    b2ca:	ittte	ne
    b2cc:	andsne.w	r5, ip, r3, lsr #20
    b2d0:	teqne	r4, ip
    b2d4:	teqne	r5, ip
    b2d8:	bleq	b498 <__aeabi_dmul+0x1dc>
    b2dc:	add	r4, r5
    b2de:	eor.w	r6, r1, r3
    b2e2:	bic.w	r1, r1, ip, lsl #21
    b2e6:	bic.w	r3, r3, ip, lsl #21
    b2ea:	orrs.w	r5, r0, r1, lsl #12
    b2ee:	it	ne
    b2f0:	orrsne.w	r5, r2, r3, lsl #12
    b2f4:	orr.w	r1, r1, #1048576	; 0x100000
    b2f8:	orr.w	r3, r3, #1048576	; 0x100000
    b2fc:	beq.n	b370 <__aeabi_dmul+0xb4>
    b2fe:	umull	ip, lr, r0, r2
    b302:	mov.w	r5, #0
    b306:	umlal	lr, r5, r1, r2
    b30a:	and.w	r2, r6, #2147483648	; 0x80000000
    b30e:	umlal	lr, r5, r0, r3
    b312:	mov.w	r6, #0
    b316:	umlal	r5, r6, r1, r3
    b31a:	teq	ip, #0
    b31e:	it	ne
    b320:	orrne.w	lr, lr, #1
    b324:	sub.w	r4, r4, #255	; 0xff
    b328:	cmp.w	r6, #512	; 0x200
    b32c:	sbc.w	r4, r4, #768	; 0x300
    b330:	bcs.n	b33c <__aeabi_dmul+0x80>
    b332:	movs.w	lr, lr, lsl #1
    b336:	adcs	r5, r5
    b338:	adc.w	r6, r6, r6
    b33c:	orr.w	r1, r2, r6, lsl #11
    b340:	orr.w	r1, r1, r5, lsr #21
    b344:	mov.w	r0, r5, lsl #11
    b348:	orr.w	r0, r0, lr, lsr #21
    b34c:	mov.w	lr, lr, lsl #11
    b350:	subs.w	ip, r4, #253	; 0xfd
    b354:	it	hi
    b356:	cmphi.w	ip, #1792	; 0x700
    b35a:	bhi.n	b39a <__aeabi_dmul+0xde>
    b35c:	cmp.w	lr, #2147483648	; 0x80000000
    b360:	it	eq
    b362:	movseq.w	lr, r0, lsr #1
    b366:	adcs.w	r0, r0, #0
    b36a:	adc.w	r1, r1, r4, lsl #20
    b36e:	pop	{r4, r5, r6, pc}
    b370:	and.w	r6, r6, #2147483648	; 0x80000000
    b374:	orr.w	r1, r6, r1
    b378:	orr.w	r0, r0, r2
    b37c:	eor.w	r1, r1, r3
    b380:	subs.w	r4, r4, ip, lsr #1
    b384:	ittt	gt
    b386:	rsbsgt	r5, r4, ip
    b38a:	orrgt.w	r1, r1, r4, lsl #20
    b38e:	popgt	{r4, r5, r6, pc}
    b390:	orr.w	r1, r1, #1048576	; 0x100000
    b394:	mov.w	lr, #0
    b398:	subs	r4, #1
    b39a:	bgt.w	b4f4 <__aeabi_dmul+0x238>
    b39e:	cmn.w	r4, #54	; 0x36
    b3a2:	ittt	le
    b3a4:	movle	r0, #0
    b3a6:	andle.w	r1, r1, #2147483648	; 0x80000000
    b3aa:	pople	{r4, r5, r6, pc}
    b3ac:	rsb	r4, r4, #0
    b3b0:	subs	r4, #32
    b3b2:	bge.n	b420 <__aeabi_dmul+0x164>
    b3b4:	adds	r4, #12
    b3b6:	bgt.n	b3f0 <__aeabi_dmul+0x134>
    b3b8:	add.w	r4, r4, #20
    b3bc:	rsb	r5, r4, #32
    b3c0:	lsl.w	r3, r0, r5
    b3c4:	lsr.w	r0, r0, r4
    b3c8:	lsl.w	r2, r1, r5
    b3cc:	orr.w	r0, r0, r2
    b3d0:	and.w	r2, r1, #2147483648	; 0x80000000
    b3d4:	bic.w	r1, r1, #2147483648	; 0x80000000
    b3d8:	adds.w	r0, r0, r3, lsr #31
    b3dc:	lsr.w	r6, r1, r4
    b3e0:	adc.w	r1, r2, r6
    b3e4:	orrs.w	lr, lr, r3, lsl #1
    b3e8:	it	eq
    b3ea:	biceq.w	r0, r0, r3, lsr #31
    b3ee:	pop	{r4, r5, r6, pc}
    b3f0:	rsb	r4, r4, #12
    b3f4:	rsb	r5, r4, #32
    b3f8:	lsl.w	r3, r0, r4
    b3fc:	lsr.w	r0, r0, r5
    b400:	lsl.w	r2, r1, r4
    b404:	orr.w	r0, r0, r2
    b408:	and.w	r1, r1, #2147483648	; 0x80000000
    b40c:	adds.w	r0, r0, r3, lsr #31
    b410:	adc.w	r1, r1, #0
    b414:	orrs.w	lr, lr, r3, lsl #1
    b418:	it	eq
    b41a:	biceq.w	r0, r0, r3, lsr #31
    b41e:	pop	{r4, r5, r6, pc}
    b420:	rsb	r5, r4, #32
    b424:	lsl.w	r2, r0, r5
    b428:	orr.w	lr, lr, r2
    b42c:	lsr.w	r3, r0, r4
    b430:	lsl.w	r2, r1, r5
    b434:	orr.w	r3, r3, r2
    b438:	lsr.w	r0, r1, r4
    b43c:	and.w	r1, r1, #2147483648	; 0x80000000
    b440:	lsr.w	r2, r1, r4
    b444:	bic.w	r0, r0, r2
    b448:	add.w	r0, r0, r3, lsr #31
    b44c:	orrs.w	lr, lr, r3, lsl #1
    b450:	it	eq
    b452:	biceq.w	r0, r0, r3, lsr #31
    b456:	pop	{r4, r5, r6, pc}
    b458:	teq	r4, #0
    b45c:	bne.n	b47e <__aeabi_dmul+0x1c2>
    b45e:	and.w	r6, r1, #2147483648	; 0x80000000
    b462:	lsls	r0, r0, #1
    b464:	adc.w	r1, r1, r1
    b468:	tst.w	r1, #1048576	; 0x100000
    b46c:	it	eq
    b46e:	subeq	r4, #1
    b470:	beq.n	b462 <__aeabi_dmul+0x1a6>
    b472:	orr.w	r1, r1, r6
    b476:	teq	r5, #0
    b47a:	it	ne
    b47c:	bxne	lr
    b47e:	and.w	r6, r3, #2147483648	; 0x80000000
    b482:	lsls	r2, r2, #1
    b484:	adc.w	r3, r3, r3
    b488:	tst.w	r3, #1048576	; 0x100000
    b48c:	it	eq
    b48e:	subeq	r5, #1
    b490:	beq.n	b482 <__aeabi_dmul+0x1c6>
    b492:	orr.w	r3, r3, r6
    b496:	bx	lr
    b498:	teq	r4, ip
    b49c:	and.w	r5, ip, r3, lsr #20
    b4a0:	it	ne
    b4a2:	teqne	r5, ip
    b4a6:	beq.n	b4c2 <__aeabi_dmul+0x206>
    b4a8:	orrs.w	r6, r0, r1, lsl #1
    b4ac:	it	ne
    b4ae:	orrsne.w	r6, r2, r3, lsl #1
    b4b2:	bne.n	b458 <__aeabi_dmul+0x19c>
    b4b4:	eor.w	r1, r1, r3
    b4b8:	and.w	r1, r1, #2147483648	; 0x80000000
    b4bc:	mov.w	r0, #0
    b4c0:	pop	{r4, r5, r6, pc}
    b4c2:	orrs.w	r6, r0, r1, lsl #1
    b4c6:	itte	eq
    b4c8:	moveq	r0, r2
    b4ca:	moveq	r1, r3
    b4cc:	orrsne.w	r6, r2, r3, lsl #1
    b4d0:	beq.n	b506 <__aeabi_dmul+0x24a>
    b4d2:	teq	r4, ip
    b4d6:	bne.n	b4de <__aeabi_dmul+0x222>
    b4d8:	orrs.w	r6, r0, r1, lsl #12
    b4dc:	bne.n	b506 <__aeabi_dmul+0x24a>
    b4de:	teq	r5, ip
    b4e2:	bne.n	b4f0 <__aeabi_dmul+0x234>
    b4e4:	orrs.w	r6, r2, r3, lsl #12
    b4e8:	itt	ne
    b4ea:	movne	r0, r2
    b4ec:	movne	r1, r3
    b4ee:	bne.n	b506 <__aeabi_dmul+0x24a>
    b4f0:	eor.w	r1, r1, r3
    b4f4:	and.w	r1, r1, #2147483648	; 0x80000000
    b4f8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b4fc:	orr.w	r1, r1, #15728640	; 0xf00000
    b500:	mov.w	r0, #0
    b504:	pop	{r4, r5, r6, pc}
    b506:	orr.w	r1, r1, #2130706432	; 0x7f000000
    b50a:	orr.w	r1, r1, #16252928	; 0xf80000
    b50e:	pop	{r4, r5, r6, pc}

0000b510 <__aeabi_ddiv>:
    b510:	push	{r4, r5, r6, lr}
    b512:	mov.w	ip, #255	; 0xff
    b516:	orr.w	ip, ip, #1792	; 0x700
    b51a:	ands.w	r4, ip, r1, lsr #20
    b51e:	ittte	ne
    b520:	andsne.w	r5, ip, r3, lsr #20
    b524:	teqne	r4, ip
    b528:	teqne	r5, ip
    b52c:	bleq	b67e <__aeabi_ddiv+0x16e>
    b530:	sub.w	r4, r4, r5
    b534:	eor.w	lr, r1, r3
    b538:	orrs.w	r5, r2, r3, lsl #12
    b53c:	mov.w	r1, r1, lsl #12
    b540:	beq.w	b654 <__aeabi_ddiv+0x144>
    b544:	mov.w	r3, r3, lsl #12
    b548:	mov.w	r5, #268435456	; 0x10000000
    b54c:	orr.w	r3, r5, r3, lsr #4
    b550:	orr.w	r3, r3, r2, lsr #24
    b554:	mov.w	r2, r2, lsl #8
    b558:	orr.w	r5, r5, r1, lsr #4
    b55c:	orr.w	r5, r5, r0, lsr #24
    b560:	mov.w	r6, r0, lsl #8
    b564:	and.w	r1, lr, #2147483648	; 0x80000000
    b568:	cmp	r5, r3
    b56a:	it	eq
    b56c:	cmpeq	r6, r2
    b56e:	adc.w	r4, r4, #253	; 0xfd
    b572:	add.w	r4, r4, #768	; 0x300
    b576:	bcs.n	b57e <__aeabi_ddiv+0x6e>
    b578:	lsrs	r3, r3, #1
    b57a:	mov.w	r2, r2, rrx
    b57e:	subs	r6, r6, r2
    b580:	sbc.w	r5, r5, r3
    b584:	lsrs	r3, r3, #1
    b586:	mov.w	r2, r2, rrx
    b58a:	mov.w	r0, #1048576	; 0x100000
    b58e:	mov.w	ip, #524288	; 0x80000
    b592:	subs.w	lr, r6, r2
    b596:	sbcs.w	lr, r5, r3
    b59a:	ittt	cs
    b59c:	subcs	r6, r6, r2
    b59e:	movcs	r5, lr
    b5a0:	orrcs.w	r0, r0, ip
    b5a4:	lsrs	r3, r3, #1
    b5a6:	mov.w	r2, r2, rrx
    b5aa:	subs.w	lr, r6, r2
    b5ae:	sbcs.w	lr, r5, r3
    b5b2:	ittt	cs
    b5b4:	subcs	r6, r6, r2
    b5b6:	movcs	r5, lr
    b5b8:	orrcs.w	r0, r0, ip, lsr #1
    b5bc:	lsrs	r3, r3, #1
    b5be:	mov.w	r2, r2, rrx
    b5c2:	subs.w	lr, r6, r2
    b5c6:	sbcs.w	lr, r5, r3
    b5ca:	ittt	cs
    b5cc:	subcs	r6, r6, r2
    b5ce:	movcs	r5, lr
    b5d0:	orrcs.w	r0, r0, ip, lsr #2
    b5d4:	lsrs	r3, r3, #1
    b5d6:	mov.w	r2, r2, rrx
    b5da:	subs.w	lr, r6, r2
    b5de:	sbcs.w	lr, r5, r3
    b5e2:	ittt	cs
    b5e4:	subcs	r6, r6, r2
    b5e6:	movcs	r5, lr
    b5e8:	orrcs.w	r0, r0, ip, lsr #3
    b5ec:	orrs.w	lr, r5, r6
    b5f0:	beq.n	b624 <__aeabi_ddiv+0x114>
    b5f2:	mov.w	r5, r5, lsl #4
    b5f6:	orr.w	r5, r5, r6, lsr #28
    b5fa:	mov.w	r6, r6, lsl #4
    b5fe:	mov.w	r3, r3, lsl #3
    b602:	orr.w	r3, r3, r2, lsr #29
    b606:	mov.w	r2, r2, lsl #3
    b60a:	movs.w	ip, ip, lsr #4
    b60e:	bne.n	b592 <__aeabi_ddiv+0x82>
    b610:	tst.w	r1, #1048576	; 0x100000
    b614:	bne.n	b62e <__aeabi_ddiv+0x11e>
    b616:	orr.w	r1, r1, r0
    b61a:	mov.w	r0, #0
    b61e:	mov.w	ip, #2147483648	; 0x80000000
    b622:	b.n	b592 <__aeabi_ddiv+0x82>
    b624:	tst.w	r1, #1048576	; 0x100000
    b628:	itt	eq
    b62a:	orreq	r1, r0
    b62c:	moveq	r0, #0
    b62e:	subs.w	ip, r4, #253	; 0xfd
    b632:	it	hi
    b634:	cmphi.w	ip, #1792	; 0x700
    b638:	bhi.w	b39a <__aeabi_dmul+0xde>
    b63c:	subs.w	ip, r5, r3
    b640:	itt	eq
    b642:	subseq.w	ip, r6, r2
    b646:	movseq.w	ip, r0, lsr #1
    b64a:	adcs.w	r0, r0, #0
    b64e:	adc.w	r1, r1, r4, lsl #20
    b652:	pop	{r4, r5, r6, pc}
    b654:	and.w	lr, lr, #2147483648	; 0x80000000
    b658:	orr.w	r1, lr, r1, lsr #12
    b65c:	adds.w	r4, r4, ip, lsr #1
    b660:	ittt	gt
    b662:	rsbsgt	r5, r4, ip
    b666:	orrgt.w	r1, r1, r4, lsl #20
    b66a:	popgt	{r4, r5, r6, pc}
    b66c:	orr.w	r1, r1, #1048576	; 0x100000
    b670:	mov.w	lr, #0
    b674:	subs	r4, #1
    b676:	b.n	b39a <__aeabi_dmul+0xde>
    b678:	orr.w	lr, r5, r6
    b67c:	b.n	b39a <__aeabi_dmul+0xde>
    b67e:	and.w	r5, ip, r3, lsr #20
    b682:	teq	r4, ip
    b686:	it	eq
    b688:	teqeq	r5, ip
    b68c:	beq.w	b506 <__aeabi_dmul+0x24a>
    b690:	teq	r4, ip
    b694:	bne.n	b6ac <__aeabi_ddiv+0x19c>
    b696:	orrs.w	r4, r0, r1, lsl #12
    b69a:	bne.w	b506 <__aeabi_dmul+0x24a>
    b69e:	teq	r5, ip
    b6a2:	bne.w	b4f0 <__aeabi_dmul+0x234>
    b6a6:	mov	r0, r2
    b6a8:	mov	r1, r3
    b6aa:	b.n	b506 <__aeabi_dmul+0x24a>
    b6ac:	teq	r5, ip
    b6b0:	bne.n	b6c0 <__aeabi_ddiv+0x1b0>
    b6b2:	orrs.w	r5, r2, r3, lsl #12
    b6b6:	beq.w	b4b4 <__aeabi_dmul+0x1f8>
    b6ba:	mov	r0, r2
    b6bc:	mov	r1, r3
    b6be:	b.n	b506 <__aeabi_dmul+0x24a>
    b6c0:	orrs.w	r6, r0, r1, lsl #1
    b6c4:	it	ne
    b6c6:	orrsne.w	r6, r2, r3, lsl #1
    b6ca:	bne.w	b458 <__aeabi_dmul+0x19c>
    b6ce:	orrs.w	r4, r0, r1, lsl #1
    b6d2:	bne.w	b4f0 <__aeabi_dmul+0x234>
    b6d6:	orrs.w	r5, r2, r3, lsl #1
    b6da:	bne.w	b4b4 <__aeabi_dmul+0x1f8>
    b6de:	b.n	b506 <__aeabi_dmul+0x24a>

0000b6e0 <__gedf2>:
    b6e0:	mov.w	ip, #4294967295
    b6e4:	b.n	b6f4 <__cmpdf2+0x4>
    b6e6:	nop

0000b6e8 <__ledf2>:
    b6e8:	mov.w	ip, #1
    b6ec:	b.n	b6f4 <__cmpdf2+0x4>
    b6ee:	nop

0000b6f0 <__cmpdf2>:
    b6f0:	mov.w	ip, #1
    b6f4:	str.w	ip, [sp, #-4]!
    b6f8:	mov.w	ip, r1, lsl #1
    b6fc:	mvns.w	ip, ip, asr #21
    b700:	mov.w	ip, r3, lsl #1
    b704:	it	ne
    b706:	mvnsne.w	ip, ip, asr #21
    b70a:	beq.n	b744 <__cmpdf2+0x54>
    b70c:	add	sp, #4
    b70e:	orrs.w	ip, r0, r1, lsl #1
    b712:	ite	eq
    b714:	orrseq.w	ip, r2, r3, lsl #1
    b718:	teqne	r1, r3
    b71c:	ittt	eq
    b71e:	teqeq	r0, r2
    b722:	moveq	r0, #0
    b724:	bxeq	lr
    b726:	cmn.w	r0, #0
    b72a:	teq	r1, r3
    b72e:	it	pl
    b730:	cmppl	r1, r3
    b732:	it	eq
    b734:	cmpeq	r0, r2
    b736:	ite	cs
    b738:	asrcs	r0, r3, #31
    b73a:	mvncc.w	r0, r3, asr #31
    b73e:	orr.w	r0, r0, #1
    b742:	bx	lr
    b744:	mov.w	ip, r1, lsl #1
    b748:	mvns.w	ip, ip, asr #21
    b74c:	bne.n	b754 <__cmpdf2+0x64>
    b74e:	orrs.w	ip, r0, r1, lsl #12
    b752:	bne.n	b764 <__cmpdf2+0x74>
    b754:	mov.w	ip, r3, lsl #1
    b758:	mvns.w	ip, ip, asr #21
    b75c:	bne.n	b70c <__cmpdf2+0x1c>
    b75e:	orrs.w	ip, r2, r3, lsl #12
    b762:	beq.n	b70c <__cmpdf2+0x1c>
    b764:	ldr.w	r0, [sp], #4
    b768:	bx	lr
    b76a:	nop

0000b76c <__aeabi_cdrcmple>:
    b76c:	mov	ip, r0
    b76e:	mov	r0, r2
    b770:	mov	r2, ip
    b772:	mov	ip, r1
    b774:	mov	r1, r3
    b776:	mov	r3, ip
    b778:	b.n	b77c <__aeabi_cdcmpeq>
    b77a:	nop

0000b77c <__aeabi_cdcmpeq>:
    b77c:	push	{r0, lr}
    b77e:	bl	b6f0 <__cmpdf2>
    b782:	cmp	r0, #0
    b784:	it	mi
    b786:	cmnmi.w	r0, #0
    b78a:	pop	{r0, pc}

0000b78c <__aeabi_dcmpeq>:
    b78c:	str.w	lr, [sp, #-8]!
    b790:	bl	b77c <__aeabi_cdcmpeq>
    b794:	ite	eq
    b796:	moveq	r0, #1
    b798:	movne	r0, #0
    b79a:	ldr.w	pc, [sp], #8
    b79e:	nop

0000b7a0 <__aeabi_dcmplt>:
    b7a0:	str.w	lr, [sp, #-8]!
    b7a4:	bl	b77c <__aeabi_cdcmpeq>
    b7a8:	ite	cc
    b7aa:	movcc	r0, #1
    b7ac:	movcs	r0, #0
    b7ae:	ldr.w	pc, [sp], #8
    b7b2:	nop

0000b7b4 <__aeabi_dcmple>:
    b7b4:	str.w	lr, [sp, #-8]!
    b7b8:	bl	b77c <__aeabi_cdcmpeq>
    b7bc:	ite	ls
    b7be:	movls	r0, #1
    b7c0:	movhi	r0, #0
    b7c2:	ldr.w	pc, [sp], #8
    b7c6:	nop

0000b7c8 <__aeabi_dcmpge>:
    b7c8:	str.w	lr, [sp, #-8]!
    b7cc:	bl	b76c <__aeabi_cdrcmple>
    b7d0:	ite	ls
    b7d2:	movls	r0, #1
    b7d4:	movhi	r0, #0
    b7d6:	ldr.w	pc, [sp], #8
    b7da:	nop

0000b7dc <__aeabi_dcmpgt>:
    b7dc:	str.w	lr, [sp, #-8]!
    b7e0:	bl	b76c <__aeabi_cdrcmple>
    b7e4:	ite	cc
    b7e6:	movcc	r0, #1
    b7e8:	movcs	r0, #0
    b7ea:	ldr.w	pc, [sp], #8
    b7ee:	nop

0000b7f0 <__aeabi_dcmpun>:
    b7f0:	mov.w	ip, r1, lsl #1
    b7f4:	mvns.w	ip, ip, asr #21
    b7f8:	bne.n	b800 <__aeabi_dcmpun+0x10>
    b7fa:	orrs.w	ip, r0, r1, lsl #12
    b7fe:	bne.n	b816 <__aeabi_dcmpun+0x26>
    b800:	mov.w	ip, r3, lsl #1
    b804:	mvns.w	ip, ip, asr #21
    b808:	bne.n	b810 <__aeabi_dcmpun+0x20>
    b80a:	orrs.w	ip, r2, r3, lsl #12
    b80e:	bne.n	b816 <__aeabi_dcmpun+0x26>
    b810:	mov.w	r0, #0
    b814:	bx	lr
    b816:	mov.w	r0, #1
    b81a:	bx	lr

0000b81c <__aeabi_d2iz>:
    b81c:	mov.w	r2, r1, lsl #1
    b820:	adds.w	r2, r2, #2097152	; 0x200000
    b824:	bcs.n	b852 <__aeabi_d2iz+0x36>
    b826:	bpl.n	b84c <__aeabi_d2iz+0x30>
    b828:	mvn.w	r3, #992	; 0x3e0
    b82c:	subs.w	r2, r3, r2, asr #21
    b830:	bls.n	b858 <__aeabi_d2iz+0x3c>
    b832:	mov.w	r3, r1, lsl #11
    b836:	orr.w	r3, r3, #2147483648	; 0x80000000
    b83a:	orr.w	r3, r3, r0, lsr #21
    b83e:	tst.w	r1, #2147483648	; 0x80000000
    b842:	lsr.w	r0, r3, r2
    b846:	it	ne
    b848:	negne	r0, r0
    b84a:	bx	lr
    b84c:	mov.w	r0, #0
    b850:	bx	lr
    b852:	orrs.w	r0, r0, r1, lsl #12
    b856:	bne.n	b864 <__aeabi_d2iz+0x48>
    b858:	ands.w	r0, r1, #2147483648	; 0x80000000
    b85c:	it	eq
    b85e:	mvneq.w	r0, #2147483648	; 0x80000000
    b862:	bx	lr
    b864:	mov.w	r0, #0
    b868:	bx	lr
    b86a:	nop

0000b86c <__aeabi_uldivmod>:
    b86c:	cbnz	r3, b884 <__aeabi_uldivmod+0x18>
    b86e:	cbnz	r2, b884 <__aeabi_uldivmod+0x18>
    b870:	cmp	r1, #0
    b872:	it	eq
    b874:	cmpeq	r0, #0
    b876:	itt	ne
    b878:	movne.w	r1, #4294967295
    b87c:	movne.w	r0, #4294967295
    b880:	b.w	bb80 <__aeabi_idiv0>
    b884:	sub.w	ip, sp, #8
    b888:	strd	ip, lr, [sp, #-16]!
    b88c:	bl	b89c <__udivmoddi4>
    b890:	ldr.w	lr, [sp, #4]
    b894:	ldrd	r2, r3, [sp, #8]
    b898:	add	sp, #16
    b89a:	bx	lr

0000b89c <__udivmoddi4>:
    b89c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8a0:	mov	ip, r1
    b8a2:	mov	r6, r1
    b8a4:	mov	r4, r0
    b8a6:	ldr	r5, [sp, #32]
    b8a8:	cmp	r3, #0
    b8aa:	bne.n	b94e <__udivmoddi4+0xb2>
    b8ac:	cmp	r2, r1
    b8ae:	mov	r7, r2
    b8b0:	bls.n	b98c <__udivmoddi4+0xf0>
    b8b2:	clz	lr, r2
    b8b6:	cmp.w	lr, #0
    b8ba:	beq.n	b8d4 <__udivmoddi4+0x38>
    b8bc:	rsb	r4, lr, #32
    b8c0:	lsr.w	r4, r0, r4
    b8c4:	lsl.w	r6, r1, lr
    b8c8:	orr.w	ip, r4, r6
    b8cc:	lsl.w	r7, r2, lr
    b8d0:	lsl.w	r4, r0, lr
    b8d4:	mov.w	r9, r7, lsr #16
    b8d8:	lsrs	r2, r4, #16
    b8da:	udiv	r0, ip, r9
    b8de:	uxth.w	r8, r7
    b8e2:	mls	r6, r9, r0, ip
    b8e6:	orr.w	r6, r2, r6, lsl #16
    b8ea:	mul.w	r3, r0, r8
    b8ee:	cmp	r3, r6
    b8f0:	bls.n	b906 <__udivmoddi4+0x6a>
    b8f2:	adds	r6, r6, r7
    b8f4:	add.w	r2, r0, #4294967295
    b8f8:	bcs.w	bb40 <__udivmoddi4+0x2a4>
    b8fc:	cmp	r3, r6
    b8fe:	bls.w	bb40 <__udivmoddi4+0x2a4>
    b902:	subs	r0, #2
    b904:	add	r6, r7
    b906:	subs	r6, r6, r3
    b908:	uxth	r2, r4
    b90a:	udiv	r3, r6, r9
    b90e:	mls	r6, r9, r3, r6
    b912:	orr.w	r4, r2, r6, lsl #16
    b916:	mul.w	r8, r3, r8
    b91a:	cmp	r8, r4
    b91c:	bls.n	b932 <__udivmoddi4+0x96>
    b91e:	adds	r4, r4, r7
    b920:	add.w	r2, r3, #4294967295
    b924:	bcs.w	bb3c <__udivmoddi4+0x2a0>
    b928:	cmp	r8, r4
    b92a:	bls.w	bb3c <__udivmoddi4+0x2a0>
    b92e:	subs	r3, #2
    b930:	add	r4, r7
    b932:	rsb	r4, r8, r4
    b936:	orr.w	r0, r3, r0, lsl #16
    b93a:	movs	r1, #0
    b93c:	cmp	r5, #0
    b93e:	beq.n	ba06 <__udivmoddi4+0x16a>
    b940:	lsr.w	r4, r4, lr
    b944:	movs	r3, #0
    b946:	str	r4, [r5, #0]
    b948:	str	r3, [r5, #4]
    b94a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b94e:	cmp	r3, r1
    b950:	bls.n	b962 <__udivmoddi4+0xc6>
    b952:	cmp	r5, #0
    b954:	beq.n	ba02 <__udivmoddi4+0x166>
    b956:	movs	r1, #0
    b958:	stmia.w	r5, {r0, r6}
    b95c:	mov	r0, r1
    b95e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b962:	clz	r1, r3
    b966:	cmp	r1, #0
    b968:	bne.w	ba8c <__udivmoddi4+0x1f0>
    b96c:	cmp	r3, r6
    b96e:	bcc.n	b976 <__udivmoddi4+0xda>
    b970:	cmp	r2, r0
    b972:	bhi.w	bb66 <__udivmoddi4+0x2ca>
    b976:	subs	r4, r0, r2
    b978:	sbc.w	r6, r6, r3
    b97c:	movs	r0, #1
    b97e:	mov	ip, r6
    b980:	cmp	r5, #0
    b982:	beq.n	ba06 <__udivmoddi4+0x16a>
    b984:	stmia.w	r5, {r4, ip}
    b988:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b98c:	cbnz	r2, b994 <__udivmoddi4+0xf8>
    b98e:	movs	r7, #1
    b990:	udiv	r7, r7, r2
    b994:	clz	lr, r7
    b998:	cmp.w	lr, #0
    b99c:	bne.n	ba0a <__udivmoddi4+0x16e>
    b99e:	subs	r3, r6, r7
    b9a0:	mov.w	r8, r7, lsr #16
    b9a4:	uxth.w	ip, r7
    b9a8:	movs	r1, #1
    b9aa:	udiv	r0, r3, r8
    b9ae:	lsrs	r2, r4, #16
    b9b0:	mls	r6, r8, r0, r3
    b9b4:	orr.w	r6, r2, r6, lsl #16
    b9b8:	mul.w	r3, ip, r0
    b9bc:	cmp	r3, r6
    b9be:	bls.n	b9d0 <__udivmoddi4+0x134>
    b9c0:	adds	r6, r6, r7
    b9c2:	add.w	r2, r0, #4294967295
    b9c6:	bcs.n	b9ce <__udivmoddi4+0x132>
    b9c8:	cmp	r3, r6
    b9ca:	bhi.w	bb6a <__udivmoddi4+0x2ce>
    b9ce:	mov	r0, r2
    b9d0:	subs	r6, r6, r3
    b9d2:	uxth	r2, r4
    b9d4:	udiv	r3, r6, r8
    b9d8:	mls	r6, r8, r3, r6
    b9dc:	orr.w	r4, r2, r6, lsl #16
    b9e0:	mul.w	ip, ip, r3
    b9e4:	cmp	ip, r4
    b9e6:	bls.n	b9f8 <__udivmoddi4+0x15c>
    b9e8:	adds	r4, r4, r7
    b9ea:	add.w	r2, r3, #4294967295
    b9ee:	bcs.n	b9f6 <__udivmoddi4+0x15a>
    b9f0:	cmp	ip, r4
    b9f2:	bhi.w	bb60 <__udivmoddi4+0x2c4>
    b9f6:	mov	r3, r2
    b9f8:	rsb	r4, ip, r4
    b9fc:	orr.w	r0, r3, r0, lsl #16
    ba00:	b.n	b93c <__udivmoddi4+0xa0>
    ba02:	mov	r1, r5
    ba04:	mov	r0, r5
    ba06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba0a:	rsb	r1, lr, #32
    ba0e:	lsl.w	r3, r6, lr
    ba12:	lsl.w	r7, r7, lr
    ba16:	lsr.w	r9, r0, r1
    ba1a:	mov.w	r8, r7, lsr #16
    ba1e:	lsrs	r6, r1
    ba20:	orr.w	r9, r9, r3
    ba24:	udiv	sl, r6, r8
    ba28:	mov.w	r4, r9, lsr #16
    ba2c:	mls	r6, r8, sl, r6
    ba30:	uxth.w	ip, r7
    ba34:	orr.w	r3, r4, r6, lsl #16
    ba38:	mul.w	r2, sl, ip
    ba3c:	cmp	r2, r3
    ba3e:	lsl.w	r4, r0, lr
    ba42:	bls.n	ba5a <__udivmoddi4+0x1be>
    ba44:	adds	r3, r3, r7
    ba46:	add.w	r1, sl, #4294967295
    ba4a:	bcs.w	bb5c <__udivmoddi4+0x2c0>
    ba4e:	cmp	r2, r3
    ba50:	bls.w	bb5c <__udivmoddi4+0x2c0>
    ba54:	sub.w	sl, sl, #2
    ba58:	add	r3, r7
    ba5a:	subs	r3, r3, r2
    ba5c:	uxth.w	r9, r9
    ba60:	udiv	r1, r3, r8
    ba64:	mls	r3, r8, r1, r3
    ba68:	orr.w	r3, r9, r3, lsl #16
    ba6c:	mul.w	r6, r1, ip
    ba70:	cmp	r6, r3
    ba72:	bls.n	ba84 <__udivmoddi4+0x1e8>
    ba74:	adds	r3, r3, r7
    ba76:	add.w	r2, r1, #4294967295
    ba7a:	bcs.n	bb54 <__udivmoddi4+0x2b8>
    ba7c:	cmp	r6, r3
    ba7e:	bls.n	bb54 <__udivmoddi4+0x2b8>
    ba80:	subs	r1, #2
    ba82:	add	r3, r7
    ba84:	subs	r3, r3, r6
    ba86:	orr.w	r1, r1, sl, lsl #16
    ba8a:	b.n	b9aa <__udivmoddi4+0x10e>
    ba8c:	rsb	lr, r1, #32
    ba90:	lsr.w	r4, r2, lr
    ba94:	lsls	r3, r1
    ba96:	orrs	r3, r4
    ba98:	lsr.w	r7, r0, lr
    ba9c:	lsl.w	r4, r6, r1
    baa0:	mov.w	ip, r3, lsr #16
    baa4:	lsr.w	r6, r6, lr
    baa8:	orrs	r4, r7
    baaa:	udiv	r9, r6, ip
    baae:	lsrs	r7, r4, #16
    bab0:	mls	r6, ip, r9, r6
    bab4:	uxth.w	r8, r3
    bab8:	orr.w	r6, r7, r6, lsl #16
    babc:	mul.w	r7, r9, r8
    bac0:	cmp	r7, r6
    bac2:	lsl.w	r2, r2, r1
    bac6:	lsl.w	sl, r0, r1
    baca:	bls.n	bade <__udivmoddi4+0x242>
    bacc:	adds	r6, r6, r3
    bace:	add.w	r0, r9, #4294967295
    bad2:	bcs.n	bb58 <__udivmoddi4+0x2bc>
    bad4:	cmp	r7, r6
    bad6:	bls.n	bb58 <__udivmoddi4+0x2bc>
    bad8:	sub.w	r9, r9, #2
    badc:	add	r6, r3
    bade:	subs	r6, r6, r7
    bae0:	uxth	r0, r4
    bae2:	udiv	r4, r6, ip
    bae6:	mls	r6, ip, r4, r6
    baea:	orr.w	r7, r0, r6, lsl #16
    baee:	mul.w	r8, r4, r8
    baf2:	cmp	r8, r7
    baf4:	bls.n	bb06 <__udivmoddi4+0x26a>
    baf6:	adds	r7, r7, r3
    baf8:	add.w	r0, r4, #4294967295
    bafc:	bcs.n	bb50 <__udivmoddi4+0x2b4>
    bafe:	cmp	r8, r7
    bb00:	bls.n	bb50 <__udivmoddi4+0x2b4>
    bb02:	subs	r4, #2
    bb04:	add	r7, r3
    bb06:	orr.w	r0, r4, r9, lsl #16
    bb0a:	rsb	r7, r8, r7
    bb0e:	umull	r8, r9, r0, r2
    bb12:	cmp	r7, r9
    bb14:	mov	r4, r8
    bb16:	mov	r6, r9
    bb18:	bcc.n	bb44 <__udivmoddi4+0x2a8>
    bb1a:	beq.n	bb70 <__udivmoddi4+0x2d4>
    bb1c:	cbz	r5, bb78 <__udivmoddi4+0x2dc>
    bb1e:	subs.w	r3, sl, r4
    bb22:	sbc.w	r7, r7, r6
    bb26:	lsl.w	lr, r7, lr
    bb2a:	lsrs	r3, r1
    bb2c:	lsrs	r7, r1
    bb2e:	orr.w	r3, lr, r3
    bb32:	stmia.w	r5, {r3, r7}
    bb36:	movs	r1, #0
    bb38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb3c:	mov	r3, r2
    bb3e:	b.n	b932 <__udivmoddi4+0x96>
    bb40:	mov	r0, r2
    bb42:	b.n	b906 <__udivmoddi4+0x6a>
    bb44:	subs.w	r4, r8, r2
    bb48:	sbc.w	r6, r9, r3
    bb4c:	subs	r0, #1
    bb4e:	b.n	bb1c <__udivmoddi4+0x280>
    bb50:	mov	r4, r0
    bb52:	b.n	bb06 <__udivmoddi4+0x26a>
    bb54:	mov	r1, r2
    bb56:	b.n	ba84 <__udivmoddi4+0x1e8>
    bb58:	mov	r9, r0
    bb5a:	b.n	bade <__udivmoddi4+0x242>
    bb5c:	mov	sl, r1
    bb5e:	b.n	ba5a <__udivmoddi4+0x1be>
    bb60:	subs	r3, #2
    bb62:	add	r4, r7
    bb64:	b.n	b9f8 <__udivmoddi4+0x15c>
    bb66:	mov	r0, r1
    bb68:	b.n	b980 <__udivmoddi4+0xe4>
    bb6a:	subs	r0, #2
    bb6c:	add	r6, r7
    bb6e:	b.n	b9d0 <__udivmoddi4+0x134>
    bb70:	cmp	sl, r8
    bb72:	bcc.n	bb44 <__udivmoddi4+0x2a8>
    bb74:	mov	r6, r7
    bb76:	b.n	bb1c <__udivmoddi4+0x280>
    bb78:	mov	r1, r5
    bb7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb7e:	nop

0000bb80 <__aeabi_idiv0>:
    bb80:	bx	lr
    bb82:	nop

0000bb84 <__cxa_atexit>:
    bb84:	mov	r3, r2
    bb86:	mov	r2, r1
    bb88:	mov	r1, r0
    bb8a:	movs	r0, #2
    bb8c:	b.w	cb68 <__register_exitproc>

0000bb90 <__errno>:
    bb90:	ldr	r3, [pc, #4]	; (bb98 <__errno+0x8>)
    bb92:	ldr	r0, [r3, #0]
    bb94:	bx	lr
    bb96:	nop
    bb98:	.word	0x1fff0eb8

0000bb9c <__libc_init_array>:
    bb9c:	push	{r4, r5, r6, lr}
    bb9e:	ldr	r6, [pc, #60]	; (bbdc <__libc_init_array+0x40>)
    bba0:	ldr	r5, [pc, #60]	; (bbe0 <__libc_init_array+0x44>)
    bba2:	subs	r6, r6, r5
    bba4:	asrs	r6, r6, #2
    bba6:	it	ne
    bba8:	movne	r4, #0
    bbaa:	beq.n	bbb8 <__libc_init_array+0x1c>
    bbac:	adds	r4, #1
    bbae:	ldr.w	r3, [r5], #4
    bbb2:	blx	r3
    bbb4:	cmp	r6, r4
    bbb6:	bne.n	bbac <__libc_init_array+0x10>
    bbb8:	ldr	r6, [pc, #40]	; (bbe4 <__libc_init_array+0x48>)
    bbba:	ldr	r5, [pc, #44]	; (bbe8 <__libc_init_array+0x4c>)
    bbbc:	subs	r6, r6, r5
    bbbe:	bl	10660 <_init>
    bbc2:	asrs	r6, r6, #2
    bbc4:	it	ne
    bbc6:	movne	r4, #0
    bbc8:	beq.n	bbd8 <__libc_init_array+0x3c>
    bbca:	adds	r4, #1
    bbcc:	ldr.w	r3, [r5], #4
    bbd0:	blx	r3
    bbd2:	cmp	r6, r4
    bbd4:	bne.n	bbca <__libc_init_array+0x2e>
    bbd6:	pop	{r4, r5, r6, pc}
    bbd8:	pop	{r4, r5, r6, pc}
    bbda:	nop
    bbdc:	.word	0x0001066c
    bbe0:	.word	0x0001066c
    bbe4:	.word	0x0001067c
    bbe8:	.word	0x0001066c

0000bbec <malloc>:
    bbec:	ldr	r3, [pc, #8]	; (bbf8 <malloc+0xc>)
    bbee:	mov	r1, r0
    bbf0:	ldr	r0, [r3, #0]
    bbf2:	b.w	bc0c <_malloc_r>
    bbf6:	nop
    bbf8:	.word	0x1fff0eb8

0000bbfc <free>:
    bbfc:	ldr	r3, [pc, #8]	; (bc08 <free+0xc>)
    bbfe:	mov	r1, r0
    bc00:	ldr	r0, [r3, #0]
    bc02:	b.w	ccf0 <_free_r>
    bc06:	nop
    bc08:	.word	0x1fff0eb8

0000bc0c <_malloc_r>:
    bc0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc10:	add.w	r5, r1, #11
    bc14:	cmp	r5, #22
    bc16:	sub	sp, #12
    bc18:	mov	r6, r0
    bc1a:	bls.w	bd5c <_malloc_r+0x150>
    bc1e:	bics.w	r5, r5, #7
    bc22:	bmi.w	bda4 <_malloc_r+0x198>
    bc26:	cmp	r1, r5
    bc28:	bhi.w	bda4 <_malloc_r+0x198>
    bc2c:	bl	c418 <__malloc_lock>
    bc30:	cmp.w	r5, #504	; 0x1f8
    bc34:	bcc.w	c170 <_malloc_r+0x564>
    bc38:	lsrs	r3, r5, #9
    bc3a:	beq.w	bdb2 <_malloc_r+0x1a6>
    bc3e:	cmp	r3, #4
    bc40:	bhi.w	bf4a <_malloc_r+0x33e>
    bc44:	lsrs	r0, r5, #6
    bc46:	add.w	lr, r0, #57	; 0x39
    bc4a:	mov.w	r3, lr, lsl #1
    bc4e:	adds	r0, #56	; 0x38
    bc50:	ldr	r7, [pc, #784]	; (bf64 <_malloc_r+0x358>)
    bc52:	add.w	r3, r7, r3, lsl #2
    bc56:	sub.w	r1, r3, #8
    bc5a:	ldr	r4, [r3, #4]
    bc5c:	cmp	r1, r4
    bc5e:	bne.n	bc70 <_malloc_r+0x64>
    bc60:	b.n	bdbc <_malloc_r+0x1b0>
    bc62:	cmp	r2, #0
    bc64:	bge.w	bdc0 <_malloc_r+0x1b4>
    bc68:	ldr	r4, [r4, #12]
    bc6a:	cmp	r1, r4
    bc6c:	beq.w	bdbc <_malloc_r+0x1b0>
    bc70:	ldr	r3, [r4, #4]
    bc72:	bic.w	r3, r3, #3
    bc76:	subs	r2, r3, r5
    bc78:	cmp	r2, #15
    bc7a:	ble.n	bc62 <_malloc_r+0x56>
    bc7c:	ldr	r1, [pc, #740]	; (bf64 <_malloc_r+0x358>)
    bc7e:	ldr	r4, [r7, #16]
    bc80:	add.w	lr, r1, #8
    bc84:	cmp	r4, lr
    bc86:	beq.w	bff0 <_malloc_r+0x3e4>
    bc8a:	ldr	r3, [r4, #4]
    bc8c:	bic.w	r3, r3, #3
    bc90:	subs	r2, r3, r5
    bc92:	cmp	r2, #15
    bc94:	bgt.w	bfca <_malloc_r+0x3be>
    bc98:	cmp	r2, #0
    bc9a:	str.w	lr, [r1, #20]
    bc9e:	str.w	lr, [r1, #16]
    bca2:	bge.w	bde2 <_malloc_r+0x1d6>
    bca6:	cmp.w	r3, #512	; 0x200
    bcaa:	bcs.w	bf7c <_malloc_r+0x370>
    bcae:	lsrs	r3, r3, #3
    bcb0:	add.w	ip, r3, #1
    bcb4:	movs	r2, #1
    bcb6:	asrs	r3, r3, #2
    bcb8:	lsl.w	r3, r2, r3
    bcbc:	ldr	r2, [r1, #4]
    bcbe:	ldr.w	r8, [r1, ip, lsl #3]
    bcc2:	str.w	r8, [r4, #8]
    bcc6:	add.w	r9, r1, ip, lsl #3
    bcca:	orrs	r2, r3
    bccc:	sub.w	r3, r9, #8
    bcd0:	str	r3, [r4, #12]
    bcd2:	str	r2, [r1, #4]
    bcd4:	str.w	r4, [r1, ip, lsl #3]
    bcd8:	str.w	r4, [r8, #12]
    bcdc:	asrs	r3, r0, #2
    bcde:	movs	r4, #1
    bce0:	lsls	r4, r3
    bce2:	cmp	r4, r2
    bce4:	bhi.w	bdfc <_malloc_r+0x1f0>
    bce8:	tst	r4, r2
    bcea:	bne.n	bcfa <_malloc_r+0xee>
    bcec:	bic.w	r0, r0, #3
    bcf0:	lsls	r4, r4, #1
    bcf2:	tst	r4, r2
    bcf4:	add.w	r0, r0, #4
    bcf8:	beq.n	bcf0 <_malloc_r+0xe4>
    bcfa:	add.w	r9, r7, r0, lsl #3
    bcfe:	mov	ip, r9
    bd00:	mov	r8, r0
    bd02:	ldr.w	r1, [ip, #12]
    bd06:	cmp	ip, r1
    bd08:	bne.n	bd1a <_malloc_r+0x10e>
    bd0a:	b.n	bff4 <_malloc_r+0x3e8>
    bd0c:	cmp	r2, #0
    bd0e:	bge.w	c014 <_malloc_r+0x408>
    bd12:	ldr	r1, [r1, #12]
    bd14:	cmp	ip, r1
    bd16:	beq.w	bff4 <_malloc_r+0x3e8>
    bd1a:	ldr	r3, [r1, #4]
    bd1c:	bic.w	r3, r3, #3
    bd20:	subs	r2, r3, r5
    bd22:	cmp	r2, #15
    bd24:	ble.n	bd0c <_malloc_r+0x100>
    bd26:	mov	r4, r1
    bd28:	ldr.w	ip, [r1, #12]
    bd2c:	ldr.w	r8, [r4, #8]!
    bd30:	adds	r3, r1, r5
    bd32:	orr.w	r5, r5, #1
    bd36:	str	r5, [r1, #4]
    bd38:	orr.w	r1, r2, #1
    bd3c:	str.w	ip, [r8, #12]
    bd40:	mov	r0, r6
    bd42:	str.w	r8, [ip, #8]
    bd46:	str	r3, [r7, #20]
    bd48:	str	r3, [r7, #16]
    bd4a:	str.w	lr, [r3, #12]
    bd4e:	str.w	lr, [r3, #8]
    bd52:	str	r1, [r3, #4]
    bd54:	str	r2, [r3, r2]
    bd56:	bl	c41c <__malloc_unlock>
    bd5a:	b.n	bd9c <_malloc_r+0x190>
    bd5c:	cmp	r1, #16
    bd5e:	bhi.n	bda4 <_malloc_r+0x198>
    bd60:	bl	c418 <__malloc_lock>
    bd64:	movs	r5, #16
    bd66:	movs	r3, #6
    bd68:	movs	r0, #2
    bd6a:	ldr	r7, [pc, #504]	; (bf64 <_malloc_r+0x358>)
    bd6c:	add.w	r3, r7, r3, lsl #2
    bd70:	sub.w	r2, r3, #8
    bd74:	ldr	r4, [r3, #4]
    bd76:	cmp	r4, r2
    bd78:	beq.w	c006 <_malloc_r+0x3fa>
    bd7c:	ldr	r3, [r4, #4]
    bd7e:	ldr	r1, [r4, #12]
    bd80:	ldr	r5, [r4, #8]
    bd82:	bic.w	r3, r3, #3
    bd86:	add	r3, r4
    bd88:	mov	r0, r6
    bd8a:	ldr	r2, [r3, #4]
    bd8c:	str	r1, [r5, #12]
    bd8e:	orr.w	r2, r2, #1
    bd92:	str	r5, [r1, #8]
    bd94:	str	r2, [r3, #4]
    bd96:	bl	c41c <__malloc_unlock>
    bd9a:	adds	r4, #8
    bd9c:	mov	r0, r4
    bd9e:	add	sp, #12
    bda0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bda4:	movs	r4, #0
    bda6:	movs	r3, #12
    bda8:	mov	r0, r4
    bdaa:	str	r3, [r6, #0]
    bdac:	add	sp, #12
    bdae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb2:	movs	r3, #128	; 0x80
    bdb4:	mov.w	lr, #64	; 0x40
    bdb8:	movs	r0, #63	; 0x3f
    bdba:	b.n	bc50 <_malloc_r+0x44>
    bdbc:	mov	r0, lr
    bdbe:	b.n	bc7c <_malloc_r+0x70>
    bdc0:	add	r3, r4
    bdc2:	ldr	r1, [r4, #12]
    bdc4:	ldr	r2, [r3, #4]
    bdc6:	ldr	r5, [r4, #8]
    bdc8:	orr.w	r2, r2, #1
    bdcc:	str	r1, [r5, #12]
    bdce:	mov	r0, r6
    bdd0:	str	r5, [r1, #8]
    bdd2:	str	r2, [r3, #4]
    bdd4:	bl	c41c <__malloc_unlock>
    bdd8:	adds	r4, #8
    bdda:	mov	r0, r4
    bddc:	add	sp, #12
    bdde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bde2:	add	r3, r4
    bde4:	mov	r0, r6
    bde6:	ldr	r2, [r3, #4]
    bde8:	orr.w	r2, r2, #1
    bdec:	str	r2, [r3, #4]
    bdee:	bl	c41c <__malloc_unlock>
    bdf2:	adds	r4, #8
    bdf4:	mov	r0, r4
    bdf6:	add	sp, #12
    bdf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdfc:	ldr	r4, [r7, #8]
    bdfe:	ldr	r3, [r4, #4]
    be00:	bic.w	r8, r3, #3
    be04:	cmp	r8, r5
    be06:	bcc.n	be12 <_malloc_r+0x206>
    be08:	rsb	r3, r5, r8
    be0c:	cmp	r3, #15
    be0e:	bgt.w	bf2a <_malloc_r+0x31e>
    be12:	ldr	r3, [pc, #340]	; (bf68 <_malloc_r+0x35c>)
    be14:	ldr.w	r9, [pc, #352]	; bf78 <_malloc_r+0x36c>
    be18:	ldr	r2, [r3, #0]
    be1a:	ldr.w	r3, [r9]
    be1e:	adds	r3, #1
    be20:	add	r2, r5
    be22:	add.w	sl, r4, r8
    be26:	beq.w	c0ea <_malloc_r+0x4de>
    be2a:	add.w	r2, r2, #4096	; 0x1000
    be2e:	adds	r2, #15
    be30:	bic.w	r2, r2, #4080	; 0xff0
    be34:	bic.w	r2, r2, #15
    be38:	mov	r1, r2
    be3a:	mov	r0, r6
    be3c:	str	r2, [sp, #4]
    be3e:	bl	c800 <_sbrk_r>
    be42:	cmp.w	r0, #4294967295
    be46:	mov	fp, r0
    be48:	ldr	r2, [sp, #4]
    be4a:	beq.w	c0fe <_malloc_r+0x4f2>
    be4e:	cmp	sl, r0
    be50:	bhi.w	c04c <_malloc_r+0x440>
    be54:	ldr	r3, [pc, #276]	; (bf6c <_malloc_r+0x360>)
    be56:	ldr	r1, [r3, #0]
    be58:	cmp	sl, fp
    be5a:	add	r1, r2
    be5c:	str	r1, [r3, #0]
    be5e:	beq.w	c108 <_malloc_r+0x4fc>
    be62:	ldr.w	r0, [r9]
    be66:	ldr.w	lr, [pc, #272]	; bf78 <_malloc_r+0x36c>
    be6a:	adds	r0, #1
    be6c:	ittet	ne
    be6e:	rsbne	sl, sl, fp
    be72:	addne	r1, sl
    be74:	streq.w	fp, [lr]
    be78:	strne	r1, [r3, #0]
    be7a:	ands.w	r1, fp, #7
    be7e:	beq.w	c0b0 <_malloc_r+0x4a4>
    be82:	rsb	r0, r1, #8
    be86:	rsb	r1, r1, #4096	; 0x1000
    be8a:	add	fp, r0
    be8c:	adds	r1, #8
    be8e:	add	r2, fp
    be90:	ubfx	r2, r2, #0, #12
    be94:	rsb	r9, r2, r1
    be98:	mov	r1, r9
    be9a:	mov	r0, r6
    be9c:	str	r3, [sp, #4]
    be9e:	bl	c800 <_sbrk_r>
    bea2:	adds	r3, r0, #1
    bea4:	ldr	r3, [sp, #4]
    bea6:	beq.w	c128 <_malloc_r+0x51c>
    beaa:	rsb	r2, fp, r0
    beae:	add	r2, r9
    beb0:	orr.w	r2, r2, #1
    beb4:	ldr	r1, [r3, #0]
    beb6:	str.w	fp, [r7, #8]
    beba:	add	r1, r9
    bebc:	cmp	r4, r7
    bebe:	str.w	r2, [fp, #4]
    bec2:	str	r1, [r3, #0]
    bec4:	ldr.w	r9, [pc, #164]	; bf6c <_malloc_r+0x360>
    bec8:	beq.n	bef8 <_malloc_r+0x2ec>
    beca:	cmp.w	r8, #15
    bece:	bls.w	c0cc <_malloc_r+0x4c0>
    bed2:	ldr	r2, [r4, #4]
    bed4:	sub.w	r3, r8, #12
    bed8:	bic.w	r3, r3, #7
    bedc:	adds	r0, r4, r3
    bede:	and.w	r2, r2, #1
    bee2:	mov.w	lr, #5
    bee6:	orrs	r2, r3
    bee8:	cmp	r3, #15
    beea:	str	r2, [r4, #4]
    beec:	str.w	lr, [r0, #4]
    bef0:	str.w	lr, [r0, #8]
    bef4:	bhi.w	c130 <_malloc_r+0x524>
    bef8:	ldr	r3, [pc, #116]	; (bf70 <_malloc_r+0x364>)
    befa:	ldr	r4, [r7, #8]
    befc:	ldr	r2, [r3, #0]
    befe:	cmp	r1, r2
    bf00:	it	hi
    bf02:	strhi	r1, [r3, #0]
    bf04:	ldr	r3, [pc, #108]	; (bf74 <_malloc_r+0x368>)
    bf06:	ldr	r2, [r3, #0]
    bf08:	cmp	r1, r2
    bf0a:	ldr	r2, [r4, #4]
    bf0c:	it	hi
    bf0e:	strhi	r1, [r3, #0]
    bf10:	bic.w	r2, r2, #3
    bf14:	cmp	r5, r2
    bf16:	sub.w	r3, r2, r5
    bf1a:	bhi.n	bf20 <_malloc_r+0x314>
    bf1c:	cmp	r3, #15
    bf1e:	bgt.n	bf2a <_malloc_r+0x31e>
    bf20:	mov	r0, r6
    bf22:	bl	c41c <__malloc_unlock>
    bf26:	movs	r4, #0
    bf28:	b.n	bd9c <_malloc_r+0x190>
    bf2a:	adds	r2, r4, r5
    bf2c:	orr.w	r3, r3, #1
    bf30:	orr.w	r5, r5, #1
    bf34:	str	r5, [r4, #4]
    bf36:	mov	r0, r6
    bf38:	str	r2, [r7, #8]
    bf3a:	str	r3, [r2, #4]
    bf3c:	bl	c41c <__malloc_unlock>
    bf40:	adds	r4, #8
    bf42:	mov	r0, r4
    bf44:	add	sp, #12
    bf46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf4a:	cmp	r3, #20
    bf4c:	bls.n	c032 <_malloc_r+0x426>
    bf4e:	cmp	r3, #84	; 0x54
    bf50:	bhi.w	c09c <_malloc_r+0x490>
    bf54:	lsrs	r0, r5, #12
    bf56:	add.w	lr, r0, #111	; 0x6f
    bf5a:	mov.w	r3, lr, lsl #1
    bf5e:	adds	r0, #110	; 0x6e
    bf60:	b.n	bc50 <_malloc_r+0x44>
    bf62:	nop
    bf64:	.word	0x1fff1028
    bf68:	.word	0x1fff1d50
    bf6c:	.word	0x1fff1d54
    bf70:	.word	0x1fff1d4c
    bf74:	.word	0x1fff1d48
    bf78:	.word	0x1fff1434
    bf7c:	lsrs	r2, r3, #9
    bf7e:	cmp	r2, #4
    bf80:	bls.n	c040 <_malloc_r+0x434>
    bf82:	cmp	r2, #20
    bf84:	bhi.w	c0ee <_malloc_r+0x4e2>
    bf88:	add.w	r1, r2, #92	; 0x5c
    bf8c:	lsls	r1, r1, #1
    bf8e:	adds	r2, #91	; 0x5b
    bf90:	add.w	ip, r7, r1, lsl #2
    bf94:	ldr.w	r1, [r7, r1, lsl #2]
    bf98:	ldr.w	r8, [pc, #476]	; c178 <_malloc_r+0x56c>
    bf9c:	sub.w	ip, ip, #8
    bfa0:	cmp	ip, r1
    bfa2:	beq.w	c0b6 <_malloc_r+0x4aa>
    bfa6:	ldr	r2, [r1, #4]
    bfa8:	bic.w	r2, r2, #3
    bfac:	cmp	r3, r2
    bfae:	bcs.n	bfb6 <_malloc_r+0x3aa>
    bfb0:	ldr	r1, [r1, #8]
    bfb2:	cmp	ip, r1
    bfb4:	bne.n	bfa6 <_malloc_r+0x39a>
    bfb6:	ldr.w	ip, [r1, #12]
    bfba:	ldr	r2, [r7, #4]
    bfbc:	str.w	ip, [r4, #12]
    bfc0:	str	r1, [r4, #8]
    bfc2:	str.w	r4, [ip, #8]
    bfc6:	str	r4, [r1, #12]
    bfc8:	b.n	bcdc <_malloc_r+0xd0>
    bfca:	adds	r3, r4, r5
    bfcc:	orr.w	r7, r2, #1
    bfd0:	orr.w	r5, r5, #1
    bfd4:	str	r5, [r4, #4]
    bfd6:	mov	r0, r6
    bfd8:	str	r3, [r1, #20]
    bfda:	str	r3, [r1, #16]
    bfdc:	str.w	lr, [r3, #12]
    bfe0:	str.w	lr, [r3, #8]
    bfe4:	str	r7, [r3, #4]
    bfe6:	str	r2, [r3, r2]
    bfe8:	adds	r4, #8
    bfea:	bl	c41c <__malloc_unlock>
    bfee:	b.n	bd9c <_malloc_r+0x190>
    bff0:	ldr	r2, [r1, #4]
    bff2:	b.n	bcdc <_malloc_r+0xd0>
    bff4:	add.w	r8, r8, #1
    bff8:	tst.w	r8, #3
    bffc:	add.w	ip, ip, #8
    c000:	bne.w	bd02 <_malloc_r+0xf6>
    c004:	b.n	c068 <_malloc_r+0x45c>
    c006:	ldr	r4, [r3, #12]
    c008:	cmp	r3, r4
    c00a:	it	eq
    c00c:	addeq	r0, #2
    c00e:	beq.w	bc7c <_malloc_r+0x70>
    c012:	b.n	bd7c <_malloc_r+0x170>
    c014:	add	r3, r1
    c016:	mov	r4, r1
    c018:	ldr	r2, [r3, #4]
    c01a:	ldr	r1, [r1, #12]
    c01c:	ldr.w	r5, [r4, #8]!
    c020:	orr.w	r2, r2, #1
    c024:	str	r2, [r3, #4]
    c026:	mov	r0, r6
    c028:	str	r1, [r5, #12]
    c02a:	str	r5, [r1, #8]
    c02c:	bl	c41c <__malloc_unlock>
    c030:	b.n	bd9c <_malloc_r+0x190>
    c032:	add.w	lr, r3, #92	; 0x5c
    c036:	add.w	r0, r3, #91	; 0x5b
    c03a:	mov.w	r3, lr, lsl #1
    c03e:	b.n	bc50 <_malloc_r+0x44>
    c040:	lsrs	r2, r3, #6
    c042:	add.w	r1, r2, #57	; 0x39
    c046:	lsls	r1, r1, #1
    c048:	adds	r2, #56	; 0x38
    c04a:	b.n	bf90 <_malloc_r+0x384>
    c04c:	cmp	r4, r7
    c04e:	ldr	r3, [pc, #296]	; (c178 <_malloc_r+0x56c>)
    c050:	beq.w	be54 <_malloc_r+0x248>
    c054:	ldr	r4, [r3, #8]
    c056:	ldr	r2, [r4, #4]
    c058:	bic.w	r2, r2, #3
    c05c:	b.n	bf14 <_malloc_r+0x308>
    c05e:	ldr.w	r3, [r9], #-8
    c062:	cmp	r9, r3
    c064:	bne.w	c16c <_malloc_r+0x560>
    c068:	tst.w	r0, #3
    c06c:	add.w	r0, r0, #4294967295
    c070:	bne.n	c05e <_malloc_r+0x452>
    c072:	ldr	r3, [r7, #4]
    c074:	bic.w	r3, r3, r4
    c078:	str	r3, [r7, #4]
    c07a:	lsls	r4, r4, #1
    c07c:	cmp	r4, r3
    c07e:	bhi.w	bdfc <_malloc_r+0x1f0>
    c082:	cmp	r4, #0
    c084:	beq.w	bdfc <_malloc_r+0x1f0>
    c088:	tst	r4, r3
    c08a:	mov	r0, r8
    c08c:	bne.w	bcfa <_malloc_r+0xee>
    c090:	lsls	r4, r4, #1
    c092:	tst	r4, r3
    c094:	add.w	r0, r0, #4
    c098:	beq.n	c090 <_malloc_r+0x484>
    c09a:	b.n	bcfa <_malloc_r+0xee>
    c09c:	cmp.w	r3, #340	; 0x154
    c0a0:	bhi.n	c0d4 <_malloc_r+0x4c8>
    c0a2:	lsrs	r0, r5, #15
    c0a4:	add.w	lr, r0, #120	; 0x78
    c0a8:	mov.w	r3, lr, lsl #1
    c0ac:	adds	r0, #119	; 0x77
    c0ae:	b.n	bc50 <_malloc_r+0x44>
    c0b0:	mov.w	r1, #4096	; 0x1000
    c0b4:	b.n	be8e <_malloc_r+0x282>
    c0b6:	movs	r1, #1
    c0b8:	ldr.w	r3, [r8, #4]
    c0bc:	asrs	r2, r2, #2
    c0be:	lsl.w	r2, r1, r2
    c0c2:	orrs	r2, r3
    c0c4:	str.w	r2, [r8, #4]
    c0c8:	mov	r1, ip
    c0ca:	b.n	bfbc <_malloc_r+0x3b0>
    c0cc:	movs	r3, #1
    c0ce:	str.w	r3, [fp, #4]
    c0d2:	b.n	bf20 <_malloc_r+0x314>
    c0d4:	movw	r2, #1364	; 0x554
    c0d8:	cmp	r3, r2
    c0da:	bhi.n	c11e <_malloc_r+0x512>
    c0dc:	lsrs	r0, r5, #18
    c0de:	add.w	lr, r0, #125	; 0x7d
    c0e2:	mov.w	r3, lr, lsl #1
    c0e6:	adds	r0, #124	; 0x7c
    c0e8:	b.n	bc50 <_malloc_r+0x44>
    c0ea:	adds	r2, #16
    c0ec:	b.n	be38 <_malloc_r+0x22c>
    c0ee:	cmp	r2, #84	; 0x54
    c0f0:	bhi.n	c140 <_malloc_r+0x534>
    c0f2:	lsrs	r2, r3, #12
    c0f4:	add.w	r1, r2, #111	; 0x6f
    c0f8:	lsls	r1, r1, #1
    c0fa:	adds	r2, #110	; 0x6e
    c0fc:	b.n	bf90 <_malloc_r+0x384>
    c0fe:	ldr	r4, [r7, #8]
    c100:	ldr	r2, [r4, #4]
    c102:	bic.w	r2, r2, #3
    c106:	b.n	bf14 <_malloc_r+0x308>
    c108:	ubfx	r0, sl, #0, #12
    c10c:	cmp	r0, #0
    c10e:	bne.w	be62 <_malloc_r+0x256>
    c112:	add	r2, r8
    c114:	ldr	r3, [r7, #8]
    c116:	orr.w	r2, r2, #1
    c11a:	str	r2, [r3, #4]
    c11c:	b.n	bef8 <_malloc_r+0x2ec>
    c11e:	movs	r3, #254	; 0xfe
    c120:	mov.w	lr, #127	; 0x7f
    c124:	movs	r0, #126	; 0x7e
    c126:	b.n	bc50 <_malloc_r+0x44>
    c128:	movs	r2, #1
    c12a:	mov.w	r9, #0
    c12e:	b.n	beb4 <_malloc_r+0x2a8>
    c130:	add.w	r1, r4, #8
    c134:	mov	r0, r6
    c136:	bl	ccf0 <_free_r>
    c13a:	ldr.w	r1, [r9]
    c13e:	b.n	bef8 <_malloc_r+0x2ec>
    c140:	cmp.w	r2, #340	; 0x154
    c144:	bhi.n	c152 <_malloc_r+0x546>
    c146:	lsrs	r2, r3, #15
    c148:	add.w	r1, r2, #120	; 0x78
    c14c:	lsls	r1, r1, #1
    c14e:	adds	r2, #119	; 0x77
    c150:	b.n	bf90 <_malloc_r+0x384>
    c152:	movw	r1, #1364	; 0x554
    c156:	cmp	r2, r1
    c158:	bhi.n	c166 <_malloc_r+0x55a>
    c15a:	lsrs	r2, r3, #18
    c15c:	add.w	r1, r2, #125	; 0x7d
    c160:	lsls	r1, r1, #1
    c162:	adds	r2, #124	; 0x7c
    c164:	b.n	bf90 <_malloc_r+0x384>
    c166:	movs	r1, #254	; 0xfe
    c168:	movs	r2, #126	; 0x7e
    c16a:	b.n	bf90 <_malloc_r+0x384>
    c16c:	ldr	r3, [r7, #4]
    c16e:	b.n	c07a <_malloc_r+0x46e>
    c170:	lsrs	r0, r5, #3
    c172:	adds	r3, r0, #1
    c174:	lsls	r3, r3, #1
    c176:	b.n	bd6a <_malloc_r+0x15e>
    c178:	.word	0x1fff1028

0000c17c <__ascii_mbtowc>:
    c17c:	sub	sp, #8
    c17e:	cbz	r1, c194 <__ascii_mbtowc+0x18>
    c180:	cbz	r2, c19a <__ascii_mbtowc+0x1e>
    c182:	cbz	r3, c1a0 <__ascii_mbtowc+0x24>
    c184:	ldrb	r3, [r2, #0]
    c186:	str	r3, [r1, #0]
    c188:	ldrb	r2, [r2, #0]
    c18a:	adds	r0, r2, #0
    c18c:	it	ne
    c18e:	movne	r0, #1
    c190:	add	sp, #8
    c192:	bx	lr
    c194:	add	r1, sp, #4
    c196:	cmp	r2, #0
    c198:	bne.n	c182 <__ascii_mbtowc+0x6>
    c19a:	mov	r0, r2
    c19c:	add	sp, #8
    c19e:	bx	lr
    c1a0:	mvn.w	r0, #1
    c1a4:	b.n	c190 <__ascii_mbtowc+0x14>
    c1a6:	nop
    c1a8:			; <UNDEFINED> instruction: 0xffffffff
    c1ac:			; <UNDEFINED> instruction: 0xffffffff

0000c1b0 <memchr>:
    c1b0:	and.w	r1, r1, #255	; 0xff
    c1b4:	cmp	r2, #16
    c1b6:	blt.n	c210 <memchr+0x60>
    c1b8:	tst.w	r0, #7
    c1bc:	beq.n	c1d0 <memchr+0x20>
    c1be:	ldrb.w	r3, [r0], #1
    c1c2:	subs	r2, #1
    c1c4:	cmp	r3, r1
    c1c6:	beq.n	c224 <memchr+0x74>
    c1c8:	tst.w	r0, #7
    c1cc:	cbz	r2, c220 <memchr+0x70>
    c1ce:	bne.n	c1be <memchr+0xe>
    c1d0:	push	{r4, r5, r6, r7}
    c1d2:	orr.w	r1, r1, r1, lsl #8
    c1d6:	orr.w	r1, r1, r1, lsl #16
    c1da:	bic.w	r4, r2, #7
    c1de:	mvns.w	r7, #0
    c1e2:	movs	r3, #0
    c1e4:	ldrd	r5, r6, [r0], #8
    c1e8:	subs	r4, #8
    c1ea:	eor.w	r5, r5, r1
    c1ee:	eor.w	r6, r6, r1
    c1f2:	uadd8	r5, r5, r7
    c1f6:	sel	r5, r3, r7
    c1fa:	uadd8	r6, r6, r7
    c1fe:	sel	r6, r5, r7
    c202:	cbnz	r6, c228 <memchr+0x78>
    c204:	bne.n	c1e4 <memchr+0x34>
    c206:	pop	{r4, r5, r6, r7}
    c208:	and.w	r1, r1, #255	; 0xff
    c20c:	and.w	r2, r2, #7
    c210:	cbz	r2, c220 <memchr+0x70>
    c212:	ldrb.w	r3, [r0], #1
    c216:	subs	r2, #1
    c218:	eor.w	r3, r3, r1
    c21c:	cbz	r3, c224 <memchr+0x74>
    c21e:	bne.n	c212 <memchr+0x62>
    c220:	movs	r0, #0
    c222:	bx	lr
    c224:	subs	r0, #1
    c226:	bx	lr
    c228:	cmp	r5, #0
    c22a:	itte	eq
    c22c:	moveq	r5, r6
    c22e:	subeq	r0, #3
    c230:	subne	r0, #7
    c232:	tst.w	r5, #1
    c236:	bne.n	c248 <memchr+0x98>
    c238:	adds	r0, #1
    c23a:	tst.w	r5, #256	; 0x100
    c23e:	ittt	eq
    c240:	addeq	r0, #1
    c242:	tsteq.w	r5, #98304	; 0x18000
    c246:	addeq	r0, #1
    c248:	pop	{r4, r5, r6, r7}
    c24a:	subs	r0, #1
    c24c:	bx	lr
    c24e:	nop

0000c250 <memcmp>:
    c250:	cmp	r2, #3
    c252:	push	{r4, r5, r6}
    c254:	bls.n	c2a4 <memcmp+0x54>
    c256:	orr.w	r3, r0, r1
    c25a:	lsls	r3, r3, #30
    c25c:	beq.n	c282 <memcmp+0x32>
    c25e:	ldrb	r4, [r0, #0]
    c260:	ldrb	r5, [r1, #0]
    c262:	cmp	r4, r5
    c264:	bne.n	c2ac <memcmp+0x5c>
    c266:	add	r2, r0
    c268:	adds	r3, r0, #1
    c26a:	b.n	c278 <memcmp+0x28>
    c26c:	ldrb.w	r4, [r3], #1
    c270:	ldrb.w	r5, [r1, #1]!
    c274:	cmp	r4, r5
    c276:	bne.n	c2ac <memcmp+0x5c>
    c278:	cmp	r3, r2
    c27a:	bne.n	c26c <memcmp+0x1c>
    c27c:	movs	r0, #0
    c27e:	pop	{r4, r5, r6}
    c280:	bx	lr
    c282:	mov	r4, r1
    c284:	mov	r3, r0
    c286:	ldr	r6, [r3, #0]
    c288:	ldr	r5, [r4, #0]
    c28a:	cmp	r6, r5
    c28c:	mov	r0, r3
    c28e:	mov	r1, r4
    c290:	add.w	r3, r3, #4
    c294:	add.w	r4, r4, #4
    c298:	bne.n	c25e <memcmp+0xe>
    c29a:	subs	r2, #4
    c29c:	cmp	r2, #3
    c29e:	mov	r0, r3
    c2a0:	mov	r1, r4
    c2a2:	bhi.n	c286 <memcmp+0x36>
    c2a4:	cmp	r2, #0
    c2a6:	bne.n	c25e <memcmp+0xe>
    c2a8:	mov	r0, r2
    c2aa:	b.n	c27e <memcmp+0x2e>
    c2ac:	subs	r0, r4, r5
    c2ae:	pop	{r4, r5, r6}
    c2b0:	bx	lr
    c2b2:	nop

0000c2b4 <memmove>:
    c2b4:	cmp	r0, r1
    c2b6:	push	{r4, r5, r6, r7, lr}
    c2b8:	bls.n	c2d6 <memmove+0x22>
    c2ba:	adds	r3, r1, r2
    c2bc:	cmp	r0, r3
    c2be:	bcs.n	c2d6 <memmove+0x22>
    c2c0:	adds	r1, r0, r2
    c2c2:	cmp	r2, #0
    c2c4:	beq.n	c36a <memmove+0xb6>
    c2c6:	subs	r2, r3, r2
    c2c8:	ldrb.w	r4, [r3, #-1]!
    c2cc:	strb.w	r4, [r1, #-1]!
    c2d0:	cmp	r3, r2
    c2d2:	bne.n	c2c8 <memmove+0x14>
    c2d4:	pop	{r4, r5, r6, r7, pc}
    c2d6:	cmp	r2, #15
    c2d8:	bls.n	c36c <memmove+0xb8>
    c2da:	orr.w	r3, r1, r0
    c2de:	lsls	r3, r3, #30
    c2e0:	bne.n	c370 <memmove+0xbc>
    c2e2:	add.w	r4, r0, #16
    c2e6:	add.w	r3, r1, #16
    c2ea:	mov	r5, r2
    c2ec:	ldr.w	r6, [r3, #-16]
    c2f0:	str.w	r6, [r4, #-16]
    c2f4:	ldr.w	r6, [r3, #-12]
    c2f8:	str.w	r6, [r4, #-12]
    c2fc:	ldr.w	r6, [r3, #-8]
    c300:	str.w	r6, [r4, #-8]
    c304:	subs	r5, #16
    c306:	ldr.w	r6, [r3, #-4]
    c30a:	str.w	r6, [r4, #-4]
    c30e:	cmp	r5, #15
    c310:	add.w	r3, r3, #16
    c314:	add.w	r4, r4, #16
    c318:	bhi.n	c2ec <memmove+0x38>
    c31a:	sub.w	r3, r2, #16
    c31e:	bic.w	r3, r3, #15
    c322:	and.w	lr, r2, #15
    c326:	adds	r3, #16
    c328:	cmp.w	lr, #3
    c32c:	add	r1, r3
    c32e:	add	r3, r0
    c330:	bls.n	c376 <memmove+0xc2>
    c332:	subs	r6, r3, #4
    c334:	mov	r5, r1
    c336:	mov	r4, lr
    c338:	subs	r4, #4
    c33a:	ldr.w	r7, [r5], #4
    c33e:	str.w	r7, [r6, #4]!
    c342:	cmp	r4, #3
    c344:	bhi.n	c338 <memmove+0x84>
    c346:	sub.w	r4, lr, #4
    c34a:	bic.w	r4, r4, #3
    c34e:	adds	r4, #4
    c350:	add	r3, r4
    c352:	add	r1, r4
    c354:	and.w	r2, r2, #3
    c358:	cbz	r2, c374 <memmove+0xc0>
    c35a:	subs	r3, #1
    c35c:	add	r2, r1
    c35e:	ldrb.w	r4, [r1], #1
    c362:	strb.w	r4, [r3, #1]!
    c366:	cmp	r2, r1
    c368:	bne.n	c35e <memmove+0xaa>
    c36a:	pop	{r4, r5, r6, r7, pc}
    c36c:	mov	r3, r0
    c36e:	b.n	c358 <memmove+0xa4>
    c370:	mov	r3, r0
    c372:	b.n	c35a <memmove+0xa6>
    c374:	pop	{r4, r5, r6, r7, pc}
    c376:	mov	r2, lr
    c378:	b.n	c358 <memmove+0xa4>
    c37a:	nop

0000c37c <memset>:
    c37c:	push	{r4, r5, r6}
    c37e:	lsls	r4, r0, #30
    c380:	beq.n	c410 <memset+0x94>
    c382:	subs	r4, r2, #1
    c384:	cmp	r2, #0
    c386:	beq.n	c40c <memset+0x90>
    c388:	uxtb	r5, r1
    c38a:	mov	r3, r0
    c38c:	b.n	c394 <memset+0x18>
    c38e:	subs	r2, r4, #1
    c390:	cbz	r4, c40c <memset+0x90>
    c392:	mov	r4, r2
    c394:	strb.w	r5, [r3], #1
    c398:	lsls	r2, r3, #30
    c39a:	bne.n	c38e <memset+0x12>
    c39c:	cmp	r4, #3
    c39e:	bls.n	c3fe <memset+0x82>
    c3a0:	uxtb	r5, r1
    c3a2:	orr.w	r5, r5, r5, lsl #8
    c3a6:	cmp	r4, #15
    c3a8:	orr.w	r5, r5, r5, lsl #16
    c3ac:	bls.n	c3e2 <memset+0x66>
    c3ae:	add.w	r2, r3, #16
    c3b2:	mov	r6, r4
    c3b4:	subs	r6, #16
    c3b6:	cmp	r6, #15
    c3b8:	str.w	r5, [r2, #-16]
    c3bc:	str.w	r5, [r2, #-12]
    c3c0:	str.w	r5, [r2, #-8]
    c3c4:	str.w	r5, [r2, #-4]
    c3c8:	add.w	r2, r2, #16
    c3cc:	bhi.n	c3b4 <memset+0x38>
    c3ce:	sub.w	r2, r4, #16
    c3d2:	bic.w	r2, r2, #15
    c3d6:	and.w	r4, r4, #15
    c3da:	adds	r2, #16
    c3dc:	cmp	r4, #3
    c3de:	add	r3, r2
    c3e0:	bls.n	c3fe <memset+0x82>
    c3e2:	mov	r6, r3
    c3e4:	mov	r2, r4
    c3e6:	subs	r2, #4
    c3e8:	cmp	r2, #3
    c3ea:	str.w	r5, [r6], #4
    c3ee:	bhi.n	c3e6 <memset+0x6a>
    c3f0:	subs	r2, r4, #4
    c3f2:	bic.w	r2, r2, #3
    c3f6:	adds	r2, #4
    c3f8:	add	r3, r2
    c3fa:	and.w	r4, r4, #3
    c3fe:	cbz	r4, c40c <memset+0x90>
    c400:	uxtb	r1, r1
    c402:	add	r4, r3
    c404:	strb.w	r1, [r3], #1
    c408:	cmp	r3, r4
    c40a:	bne.n	c404 <memset+0x88>
    c40c:	pop	{r4, r5, r6}
    c40e:	bx	lr
    c410:	mov	r4, r2
    c412:	mov	r3, r0
    c414:	b.n	c39c <memset+0x20>
    c416:	nop

0000c418 <__malloc_lock>:
    c418:	bx	lr
    c41a:	nop

0000c41c <__malloc_unlock>:
    c41c:	bx	lr
    c41e:	nop

0000c420 <_realloc_r>:
    c420:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c424:	mov	r7, r2
    c426:	sub	sp, #12
    c428:	cmp	r1, #0
    c42a:	beq.w	c5b0 <_realloc_r+0x190>
    c42e:	mov	r6, r1
    c430:	mov	r9, r0
    c432:	add.w	r5, r7, #11
    c436:	bl	c418 <__malloc_lock>
    c43a:	ldr.w	lr, [r6, #-4]
    c43e:	cmp	r5, #22
    c440:	bic.w	r4, lr, #3
    c444:	sub.w	r8, r6, #8
    c448:	bhi.n	c4cc <_realloc_r+0xac>
    c44a:	movs	r2, #16
    c44c:	mov	r5, r2
    c44e:	cmp	r7, r5
    c450:	bhi.n	c4d6 <_realloc_r+0xb6>
    c452:	cmp	r4, r2
    c454:	bge.n	c542 <_realloc_r+0x122>
    c456:	ldr	r3, [pc, #804]	; (c77c <_realloc_r+0x35c>)
    c458:	ldr	r1, [r3, #8]
    c45a:	add.w	r0, r8, r4
    c45e:	cmp	r0, r1
    c460:	ldr	r1, [r0, #4]
    c462:	beq.w	c618 <_realloc_r+0x1f8>
    c466:	bic.w	r3, r1, #1
    c46a:	add	r3, r0
    c46c:	ldr	r3, [r3, #4]
    c46e:	lsls	r3, r3, #31
    c470:	bpl.n	c56e <_realloc_r+0x14e>
    c472:	tst.w	lr, #1
    c476:	beq.n	c4e4 <_realloc_r+0xc4>
    c478:	mov	r1, r7
    c47a:	mov	r0, r9
    c47c:	bl	bc0c <_malloc_r>
    c480:	mov	r7, r0
    c482:	cbz	r0, c4be <_realloc_r+0x9e>
    c484:	ldr.w	r3, [r6, #-4]
    c488:	bic.w	r3, r3, #1
    c48c:	add	r3, r8
    c48e:	sub.w	r2, r0, #8
    c492:	cmp	r2, r3
    c494:	beq.w	c720 <_realloc_r+0x300>
    c498:	subs	r2, r4, #4
    c49a:	cmp	r2, #36	; 0x24
    c49c:	bhi.w	c702 <_realloc_r+0x2e2>
    c4a0:	cmp	r2, #19
    c4a2:	bhi.w	c6ae <_realloc_r+0x28e>
    c4a6:	mov	r3, r0
    c4a8:	mov	r2, r6
    c4aa:	ldr	r1, [r2, #0]
    c4ac:	str	r1, [r3, #0]
    c4ae:	ldr	r1, [r2, #4]
    c4b0:	str	r1, [r3, #4]
    c4b2:	ldr	r2, [r2, #8]
    c4b4:	str	r2, [r3, #8]
    c4b6:	mov	r1, r6
    c4b8:	mov	r0, r9
    c4ba:	bl	ccf0 <_free_r>
    c4be:	mov	r0, r9
    c4c0:	bl	c41c <__malloc_unlock>
    c4c4:	mov	r0, r7
    c4c6:	add	sp, #12
    c4c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4cc:	bic.w	r5, r5, #7
    c4d0:	cmp	r5, #0
    c4d2:	mov	r2, r5
    c4d4:	bge.n	c44e <_realloc_r+0x2e>
    c4d6:	movs	r3, #12
    c4d8:	movs	r0, #0
    c4da:	str.w	r3, [r9]
    c4de:	add	sp, #12
    c4e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4e4:	ldr.w	r3, [r6, #-8]
    c4e8:	rsb	sl, r3, r8
    c4ec:	ldr.w	r3, [sl, #4]
    c4f0:	bic.w	ip, r3, #3
    c4f4:	add.w	r3, r4, ip
    c4f8:	cmp	r3, r2
    c4fa:	blt.n	c478 <_realloc_r+0x58>
    c4fc:	mov	r7, sl
    c4fe:	ldr.w	r1, [sl, #12]
    c502:	ldr.w	r0, [r7, #8]!
    c506:	subs	r2, r4, #4
    c508:	cmp	r2, #36	; 0x24
    c50a:	str	r1, [r0, #12]
    c50c:	str	r0, [r1, #8]
    c50e:	bhi.w	c740 <_realloc_r+0x320>
    c512:	cmp	r2, #19
    c514:	bls.w	c73c <_realloc_r+0x31c>
    c518:	ldr	r1, [r6, #0]
    c51a:	str.w	r1, [sl, #8]
    c51e:	ldr	r1, [r6, #4]
    c520:	str.w	r1, [sl, #12]
    c524:	cmp	r2, #27
    c526:	bhi.w	c780 <_realloc_r+0x360>
    c52a:	adds	r6, #8
    c52c:	add.w	r2, sl, #16
    c530:	ldr	r1, [r6, #0]
    c532:	str	r1, [r2, #0]
    c534:	ldr	r1, [r6, #4]
    c536:	str	r1, [r2, #4]
    c538:	ldr	r1, [r6, #8]
    c53a:	str	r1, [r2, #8]
    c53c:	mov	r6, r7
    c53e:	mov	r4, r3
    c540:	mov	r8, sl
    c542:	subs	r3, r4, r5
    c544:	cmp	r3, #15
    c546:	bhi.n	c584 <_realloc_r+0x164>
    c548:	ldr.w	r3, [r8, #4]
    c54c:	and.w	r3, r3, #1
    c550:	orrs	r3, r4
    c552:	add	r4, r8
    c554:	str.w	r3, [r8, #4]
    c558:	ldr	r3, [r4, #4]
    c55a:	orr.w	r3, r3, #1
    c55e:	str	r3, [r4, #4]
    c560:	mov	r0, r9
    c562:	bl	c41c <__malloc_unlock>
    c566:	mov	r0, r6
    c568:	add	sp, #12
    c56a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c56e:	bic.w	r1, r1, #3
    c572:	add	r1, r4
    c574:	cmp	r1, r2
    c576:	blt.n	c5bc <_realloc_r+0x19c>
    c578:	ldr	r3, [r0, #12]
    c57a:	ldr	r2, [r0, #8]
    c57c:	mov	r4, r1
    c57e:	str	r3, [r2, #12]
    c580:	str	r2, [r3, #8]
    c582:	b.n	c542 <_realloc_r+0x122>
    c584:	ldr.w	r2, [r8, #4]
    c588:	add.w	r1, r8, r5
    c58c:	and.w	r2, r2, #1
    c590:	orrs	r5, r2
    c592:	orr.w	r2, r3, #1
    c596:	add	r3, r1
    c598:	str.w	r5, [r8, #4]
    c59c:	str	r2, [r1, #4]
    c59e:	ldr	r2, [r3, #4]
    c5a0:	orr.w	r2, r2, #1
    c5a4:	adds	r1, #8
    c5a6:	str	r2, [r3, #4]
    c5a8:	mov	r0, r9
    c5aa:	bl	ccf0 <_free_r>
    c5ae:	b.n	c560 <_realloc_r+0x140>
    c5b0:	mov	r1, r2
    c5b2:	add	sp, #12
    c5b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5b8:	b.w	bc0c <_malloc_r>
    c5bc:	tst.w	lr, #1
    c5c0:	bne.w	c478 <_realloc_r+0x58>
    c5c4:	ldr.w	r3, [r6, #-8]
    c5c8:	rsb	sl, r3, r8
    c5cc:	ldr.w	r3, [sl, #4]
    c5d0:	bic.w	ip, r3, #3
    c5d4:	add.w	lr, r1, ip
    c5d8:	cmp	lr, r2
    c5da:	blt.n	c4f4 <_realloc_r+0xd4>
    c5dc:	ldr	r3, [r0, #12]
    c5de:	ldr	r2, [r0, #8]
    c5e0:	mov	r7, sl
    c5e2:	str	r3, [r2, #12]
    c5e4:	str	r2, [r3, #8]
    c5e6:	ldr.w	r1, [r7, #8]!
    c5ea:	ldr.w	r3, [sl, #12]
    c5ee:	str	r3, [r1, #12]
    c5f0:	subs	r2, r4, #4
    c5f2:	cmp	r2, #36	; 0x24
    c5f4:	str	r1, [r3, #8]
    c5f6:	bhi.w	c72c <_realloc_r+0x30c>
    c5fa:	cmp	r2, #19
    c5fc:	bls.n	c6c4 <_realloc_r+0x2a4>
    c5fe:	ldr	r3, [r6, #0]
    c600:	str.w	r3, [sl, #8]
    c604:	ldr	r3, [r6, #4]
    c606:	str.w	r3, [sl, #12]
    c60a:	cmp	r2, #27
    c60c:	bhi.w	c750 <_realloc_r+0x330>
    c610:	adds	r6, #8
    c612:	add.w	r3, sl, #16
    c616:	b.n	c6c6 <_realloc_r+0x2a6>
    c618:	bic.w	fp, r1, #3
    c61c:	add	fp, r4
    c61e:	add.w	r0, r5, #16
    c622:	cmp	fp, r0
    c624:	bge.n	c6da <_realloc_r+0x2ba>
    c626:	tst.w	lr, #1
    c62a:	bne.w	c478 <_realloc_r+0x58>
    c62e:	ldr.w	r1, [r6, #-8]
    c632:	rsb	sl, r1, r8
    c636:	ldr.w	r1, [sl, #4]
    c63a:	bic.w	ip, r1, #3
    c63e:	add	fp, ip
    c640:	cmp	r0, fp
    c642:	bgt.w	c4f4 <_realloc_r+0xd4>
    c646:	mov	r7, sl
    c648:	ldr.w	r1, [sl, #12]
    c64c:	ldr.w	r0, [r7, #8]!
    c650:	subs	r2, r4, #4
    c652:	cmp	r2, #36	; 0x24
    c654:	str	r1, [r0, #12]
    c656:	str	r0, [r1, #8]
    c658:	bhi.w	c7c4 <_realloc_r+0x3a4>
    c65c:	cmp	r2, #19
    c65e:	bls.w	c7ac <_realloc_r+0x38c>
    c662:	ldr	r1, [r6, #0]
    c664:	str.w	r1, [sl, #8]
    c668:	ldr	r1, [r6, #4]
    c66a:	str.w	r1, [sl, #12]
    c66e:	cmp	r2, #27
    c670:	bhi.w	c7d2 <_realloc_r+0x3b2>
    c674:	adds	r6, #8
    c676:	add.w	r2, sl, #16
    c67a:	ldr	r1, [r6, #0]
    c67c:	str	r1, [r2, #0]
    c67e:	ldr	r1, [r6, #4]
    c680:	str	r1, [r2, #4]
    c682:	ldr	r1, [r6, #8]
    c684:	str	r1, [r2, #8]
    c686:	add.w	r1, sl, r5
    c68a:	rsb	r2, r5, fp
    c68e:	orr.w	r2, r2, #1
    c692:	str	r1, [r3, #8]
    c694:	str	r2, [r1, #4]
    c696:	ldr.w	r3, [sl, #4]
    c69a:	and.w	r3, r3, #1
    c69e:	orrs	r5, r3
    c6a0:	mov	r0, r9
    c6a2:	str.w	r5, [sl, #4]
    c6a6:	bl	c41c <__malloc_unlock>
    c6aa:	mov	r0, r7
    c6ac:	b.n	c568 <_realloc_r+0x148>
    c6ae:	ldr	r3, [r6, #0]
    c6b0:	str	r3, [r0, #0]
    c6b2:	ldr	r3, [r6, #4]
    c6b4:	str	r3, [r0, #4]
    c6b6:	cmp	r2, #27
    c6b8:	bhi.n	c70a <_realloc_r+0x2ea>
    c6ba:	add.w	r3, r0, #8
    c6be:	add.w	r2, r6, #8
    c6c2:	b.n	c4aa <_realloc_r+0x8a>
    c6c4:	mov	r3, r7
    c6c6:	ldr	r2, [r6, #0]
    c6c8:	str	r2, [r3, #0]
    c6ca:	ldr	r2, [r6, #4]
    c6cc:	str	r2, [r3, #4]
    c6ce:	ldr	r2, [r6, #8]
    c6d0:	str	r2, [r3, #8]
    c6d2:	mov	r6, r7
    c6d4:	mov	r4, lr
    c6d6:	mov	r8, sl
    c6d8:	b.n	c542 <_realloc_r+0x122>
    c6da:	add.w	r1, r8, r5
    c6de:	rsb	fp, r5, fp
    c6e2:	orr.w	r2, fp, #1
    c6e6:	str	r1, [r3, #8]
    c6e8:	str	r2, [r1, #4]
    c6ea:	ldr.w	r3, [r6, #-4]
    c6ee:	and.w	r3, r3, #1
    c6f2:	orrs	r5, r3
    c6f4:	mov	r0, r9
    c6f6:	str.w	r5, [r6, #-4]
    c6fa:	bl	c41c <__malloc_unlock>
    c6fe:	mov	r0, r6
    c700:	b.n	c568 <_realloc_r+0x148>
    c702:	mov	r1, r6
    c704:	bl	c2b4 <memmove>
    c708:	b.n	c4b6 <_realloc_r+0x96>
    c70a:	ldr	r3, [r6, #8]
    c70c:	str	r3, [r0, #8]
    c70e:	ldr	r3, [r6, #12]
    c710:	str	r3, [r0, #12]
    c712:	cmp	r2, #36	; 0x24
    c714:	beq.n	c768 <_realloc_r+0x348>
    c716:	add.w	r3, r0, #16
    c71a:	add.w	r2, r6, #16
    c71e:	b.n	c4aa <_realloc_r+0x8a>
    c720:	ldr.w	r3, [r0, #-4]
    c724:	bic.w	r3, r3, #3
    c728:	add	r4, r3
    c72a:	b.n	c542 <_realloc_r+0x122>
    c72c:	mov	r1, r6
    c72e:	mov	r0, r7
    c730:	mov	r4, lr
    c732:	mov	r8, sl
    c734:	bl	c2b4 <memmove>
    c738:	mov	r6, r7
    c73a:	b.n	c542 <_realloc_r+0x122>
    c73c:	mov	r2, r7
    c73e:	b.n	c530 <_realloc_r+0x110>
    c740:	mov	r1, r6
    c742:	mov	r0, r7
    c744:	mov	r4, r3
    c746:	mov	r8, sl
    c748:	bl	c2b4 <memmove>
    c74c:	mov	r6, r7
    c74e:	b.n	c542 <_realloc_r+0x122>
    c750:	ldr	r3, [r6, #8]
    c752:	str.w	r3, [sl, #16]
    c756:	ldr	r3, [r6, #12]
    c758:	str.w	r3, [sl, #20]
    c75c:	cmp	r2, #36	; 0x24
    c75e:	beq.n	c798 <_realloc_r+0x378>
    c760:	adds	r6, #16
    c762:	add.w	r3, sl, #24
    c766:	b.n	c6c6 <_realloc_r+0x2a6>
    c768:	ldr	r3, [r6, #16]
    c76a:	str	r3, [r0, #16]
    c76c:	ldr	r3, [r6, #20]
    c76e:	str	r3, [r0, #20]
    c770:	add.w	r2, r6, #24
    c774:	add.w	r3, r0, #24
    c778:	b.n	c4aa <_realloc_r+0x8a>
    c77a:	nop
    c77c:	.word	0x1fff1028
    c780:	ldr	r1, [r6, #8]
    c782:	str.w	r1, [sl, #16]
    c786:	ldr	r1, [r6, #12]
    c788:	str.w	r1, [sl, #20]
    c78c:	cmp	r2, #36	; 0x24
    c78e:	beq.n	c7b0 <_realloc_r+0x390>
    c790:	adds	r6, #16
    c792:	add.w	r2, sl, #24
    c796:	b.n	c530 <_realloc_r+0x110>
    c798:	ldr	r3, [r6, #16]
    c79a:	str.w	r3, [sl, #24]
    c79e:	ldr	r3, [r6, #20]
    c7a0:	str.w	r3, [sl, #28]
    c7a4:	adds	r6, #24
    c7a6:	add.w	r3, sl, #32
    c7aa:	b.n	c6c6 <_realloc_r+0x2a6>
    c7ac:	mov	r2, r7
    c7ae:	b.n	c67a <_realloc_r+0x25a>
    c7b0:	ldr	r2, [r6, #16]
    c7b2:	str.w	r2, [sl, #24]
    c7b6:	ldr	r2, [r6, #20]
    c7b8:	str.w	r2, [sl, #28]
    c7bc:	adds	r6, #24
    c7be:	add.w	r2, sl, #32
    c7c2:	b.n	c530 <_realloc_r+0x110>
    c7c4:	mov	r1, r6
    c7c6:	mov	r0, r7
    c7c8:	str	r3, [sp, #4]
    c7ca:	bl	c2b4 <memmove>
    c7ce:	ldr	r3, [sp, #4]
    c7d0:	b.n	c686 <_realloc_r+0x266>
    c7d2:	ldr	r1, [r6, #8]
    c7d4:	str.w	r1, [sl, #16]
    c7d8:	ldr	r1, [r6, #12]
    c7da:	str.w	r1, [sl, #20]
    c7de:	cmp	r2, #36	; 0x24
    c7e0:	beq.n	c7ea <_realloc_r+0x3ca>
    c7e2:	adds	r6, #16
    c7e4:	add.w	r2, sl, #24
    c7e8:	b.n	c67a <_realloc_r+0x25a>
    c7ea:	ldr	r2, [r6, #16]
    c7ec:	str.w	r2, [sl, #24]
    c7f0:	ldr	r2, [r6, #20]
    c7f2:	str.w	r2, [sl, #28]
    c7f6:	adds	r6, #24
    c7f8:	add.w	r2, sl, #32
    c7fc:	b.n	c67a <_realloc_r+0x25a>
    c7fe:	nop

0000c800 <_sbrk_r>:
    c800:	push	{r3, r4, r5, lr}
    c802:	ldr	r4, [pc, #28]	; (c820 <_sbrk_r+0x20>)
    c804:	movs	r3, #0
    c806:	mov	r5, r0
    c808:	mov	r0, r1
    c80a:	str	r3, [r4, #0]
    c80c:	bl	99ec <_sbrk>
    c810:	adds	r3, r0, #1
    c812:	beq.n	c816 <_sbrk_r+0x16>
    c814:	pop	{r3, r4, r5, pc}
    c816:	ldr	r3, [r4, #0]
    c818:	cmp	r3, #0
    c81a:	beq.n	c814 <_sbrk_r+0x14>
    c81c:	str	r3, [r5, #0]
    c81e:	pop	{r3, r4, r5, pc}
    c820:	.word	0x1fff1d94

0000c824 <strcat>:
    c824:	lsls	r3, r0, #30
    c826:	push	{r4, lr}
    c828:	mov	r4, r0
    c82a:	bne.n	c84e <strcat+0x2a>
    c82c:	ldr	r2, [r0, #0]
    c82e:	sub.w	r3, r2, #16843009	; 0x1010101
    c832:	bic.w	r3, r3, r2
    c836:	tst.w	r3, #2155905152	; 0x80808080
    c83a:	bne.n	c84e <strcat+0x2a>
    c83c:	ldr.w	r2, [r0, #4]!
    c840:	sub.w	r3, r2, #16843009	; 0x1010101
    c844:	bic.w	r3, r3, r2
    c848:	tst.w	r3, #2155905152	; 0x80808080
    c84c:	beq.n	c83c <strcat+0x18>
    c84e:	ldrb	r3, [r0, #0]
    c850:	cbz	r3, c85a <strcat+0x36>
    c852:	ldrb.w	r3, [r0, #1]!
    c856:	cmp	r3, #0
    c858:	bne.n	c852 <strcat+0x2e>
    c85a:	bl	c864 <strcpy>
    c85e:	mov	r0, r4
    c860:	pop	{r4, pc}
    c862:	nop

0000c864 <strcpy>:
    c864:	eor.w	r2, r0, r1
    c868:	mov	ip, r0
    c86a:	tst.w	r2, #3
    c86e:	bne.n	c910 <strcpy+0xac>
    c870:	tst.w	r1, #3
    c874:	bne.n	c8dc <strcpy+0x78>
    c876:	str.w	r4, [sp, #-4]!
    c87a:	tst.w	r1, #4
    c87e:	ldr.w	r3, [r1], #4
    c882:	beq.n	c89c <strcpy+0x38>
    c884:	sub.w	r2, r3, #16843009	; 0x1010101
    c888:	bics	r2, r3
    c88a:	tst.w	r2, #2155905152	; 0x80808080
    c88e:	itt	eq
    c890:	streq.w	r3, [ip], #4
    c894:	ldreq.w	r3, [r1], #4
    c898:	bne.n	c8c8 <strcpy+0x64>
    c89a:	nop
    c89c:	ldr.w	r4, [r1], #4
    c8a0:	sub.w	r2, r3, #16843009	; 0x1010101
    c8a4:	bics	r2, r3
    c8a6:	tst.w	r2, #2155905152	; 0x80808080
    c8aa:	sub.w	r2, r4, #16843009	; 0x1010101
    c8ae:	bne.n	c8c8 <strcpy+0x64>
    c8b0:	str.w	r3, [ip], #4
    c8b4:	bics	r2, r4
    c8b6:	tst.w	r2, #2155905152	; 0x80808080
    c8ba:	itt	eq
    c8bc:	ldreq.w	r3, [r1], #4
    c8c0:	streq.w	r4, [ip], #4
    c8c4:	beq.n	c89c <strcpy+0x38>
    c8c6:	mov	r3, r4
    c8c8:	strb.w	r3, [ip], #1
    c8cc:	tst.w	r3, #255	; 0xff
    c8d0:	mov.w	r3, r3, ror #8
    c8d4:	bne.n	c8c8 <strcpy+0x64>
    c8d6:	ldr.w	r4, [sp], #4
    c8da:	bx	lr
    c8dc:	tst.w	r1, #1
    c8e0:	beq.n	c8f0 <strcpy+0x8c>
    c8e2:	ldrb.w	r2, [r1], #1
    c8e6:	strb.w	r2, [ip], #1
    c8ea:	cmp	r2, #0
    c8ec:	it	eq
    c8ee:	bxeq	lr
    c8f0:	tst.w	r1, #2
    c8f4:	beq.n	c876 <strcpy+0x12>
    c8f6:	ldrh.w	r2, [r1], #2
    c8fa:	tst.w	r2, #255	; 0xff
    c8fe:	itet	ne
    c900:	strhne.w	r2, [ip], #2
    c904:	strbeq.w	r2, [ip]
    c908:	tstne.w	r2, #65280	; 0xff00
    c90c:	bne.n	c876 <strcpy+0x12>
    c90e:	bx	lr
    c910:	ldrb.w	r2, [r1], #1
    c914:	strb.w	r2, [ip], #1
    c918:	cmp	r2, #0
    c91a:	bne.n	c910 <strcpy+0xac>
    c91c:	bx	lr
    c91e:	nop
    c920:			; <UNDEFINED> instruction: 0xffffffff
    c924:			; <UNDEFINED> instruction: 0xffffffff
    c928:			; <UNDEFINED> instruction: 0xffffffff
    c92c:			; <UNDEFINED> instruction: 0xffffffff
    c930:			; <UNDEFINED> instruction: 0xffffffff
    c934:			; <UNDEFINED> instruction: 0xffffffff
    c938:			; <UNDEFINED> instruction: 0xffffffff
    c93c:			; <UNDEFINED> instruction: 0xffffffff

0000c940 <strlen>:
    c940:	pld	[r0]
    c944:	strd	r4, r5, [sp, #-8]!
    c948:	bic.w	r1, r0, #7
    c94c:	mvn.w	ip, #0
    c950:	ands.w	r4, r0, #7
    c954:	pld	[r1, #32]
    c958:	bne.w	c9ee <strlen+0xae>
    c95c:	mov.w	r4, #0
    c960:	mvn.w	r0, #7
    c964:	ldrd	r2, r3, [r1]
    c968:	pld	[r1, #64]	; 0x40
    c96c:	add.w	r0, r0, #8
    c970:	uadd8	r2, r2, ip
    c974:	sel	r2, r4, ip
    c978:	uadd8	r3, r3, ip
    c97c:	sel	r3, r2, ip
    c980:	cbnz	r3, c9d6 <strlen+0x96>
    c982:	ldrd	r2, r3, [r1, #8]
    c986:	uadd8	r2, r2, ip
    c98a:	add.w	r0, r0, #8
    c98e:	sel	r2, r4, ip
    c992:	uadd8	r3, r3, ip
    c996:	sel	r3, r2, ip
    c99a:	cbnz	r3, c9d6 <strlen+0x96>
    c99c:	ldrd	r2, r3, [r1, #16]
    c9a0:	uadd8	r2, r2, ip
    c9a4:	add.w	r0, r0, #8
    c9a8:	sel	r2, r4, ip
    c9ac:	uadd8	r3, r3, ip
    c9b0:	sel	r3, r2, ip
    c9b4:	cbnz	r3, c9d6 <strlen+0x96>
    c9b6:	ldrd	r2, r3, [r1, #24]
    c9ba:	add.w	r1, r1, #32
    c9be:	uadd8	r2, r2, ip
    c9c2:	add.w	r0, r0, #8
    c9c6:	sel	r2, r4, ip
    c9ca:	uadd8	r3, r3, ip
    c9ce:	sel	r3, r2, ip
    c9d2:	cmp	r3, #0
    c9d4:	beq.n	c964 <strlen+0x24>
    c9d6:	cmp	r2, #0
    c9d8:	itt	eq
    c9da:	addeq	r0, #4
    c9dc:	moveq	r2, r3
    c9de:	rev	r2, r2
    c9e0:	clz	r2, r2
    c9e4:	ldrd	r4, r5, [sp], #8
    c9e8:	add.w	r0, r0, r2, lsr #3
    c9ec:	bx	lr
    c9ee:	ldrd	r2, r3, [r1]
    c9f2:	and.w	r5, r4, #3
    c9f6:	rsb	r0, r4, #0
    c9fa:	mov.w	r5, r5, lsl #3
    c9fe:	tst.w	r4, #4
    ca02:	pld	[r1, #64]	; 0x40
    ca06:	lsl.w	r5, ip, r5
    ca0a:	orn	r2, r2, r5
    ca0e:	itt	ne
    ca10:	ornne	r3, r3, r5
    ca14:	movne	r2, ip
    ca16:	mov.w	r4, #0
    ca1a:	b.n	c970 <strlen+0x30>

0000ca1c <strncmp>:
    ca1c:	cmp	r2, #0
    ca1e:	beq.n	caa4 <strncmp+0x88>
    ca20:	orr.w	r3, r0, r1
    ca24:	ands.w	r3, r3, #3
    ca28:	push	{r4, r5, r6, r7}
    ca2a:	bne.n	ca78 <strncmp+0x5c>
    ca2c:	cmp	r2, #3
    ca2e:	bls.n	ca78 <strncmp+0x5c>
    ca30:	ldr	r4, [r0, #0]
    ca32:	ldr	r5, [r1, #0]
    ca34:	cmp	r4, r5
    ca36:	bne.n	ca78 <strncmp+0x5c>
    ca38:	subs	r2, #4
    ca3a:	beq.n	caa8 <strncmp+0x8c>
    ca3c:	sub.w	r5, r4, #16843009	; 0x1010101
    ca40:	bic.w	r4, r5, r4
    ca44:	tst.w	r4, #2155905152	; 0x80808080
    ca48:	bne.n	caae <strncmp+0x92>
    ca4a:	adds	r7, r0, #4
    ca4c:	adds	r5, r1, #4
    ca4e:	b.n	ca6c <strncmp+0x50>
    ca50:	ldr.w	r3, [r7], #4
    ca54:	ldr	r6, [r1, #0]
    ca56:	sub.w	r4, r3, #16843009	; 0x1010101
    ca5a:	cmp	r3, r6
    ca5c:	bic.w	r4, r4, r3
    ca60:	bne.n	ca78 <strncmp+0x5c>
    ca62:	subs	r2, #4
    ca64:	beq.n	caa8 <strncmp+0x8c>
    ca66:	tst.w	r4, #2155905152	; 0x80808080
    ca6a:	bne.n	cab4 <strncmp+0x98>
    ca6c:	cmp	r2, #3
    ca6e:	mov	r1, r5
    ca70:	mov	r0, r7
    ca72:	add.w	r5, r5, #4
    ca76:	bhi.n	ca50 <strncmp+0x34>
    ca78:	ldrb	r3, [r0, #0]
    ca7a:	ldrb	r4, [r1, #0]
    ca7c:	cmp	r4, r3
    ca7e:	add.w	r2, r2, #4294967295
    ca82:	bne.n	ca9e <strncmp+0x82>
    ca84:	cbz	r2, caa8 <strncmp+0x8c>
    ca86:	cbnz	r4, ca8e <strncmp+0x72>
    ca88:	b.n	cab8 <strncmp+0x9c>
    ca8a:	cbz	r2, caa8 <strncmp+0x8c>
    ca8c:	cbz	r3, caae <strncmp+0x92>
    ca8e:	ldrb.w	r3, [r0, #1]!
    ca92:	ldrb.w	r4, [r1, #1]!
    ca96:	cmp	r3, r4
    ca98:	add.w	r2, r2, #4294967295
    ca9c:	beq.n	ca8a <strncmp+0x6e>
    ca9e:	subs	r0, r3, r4
    caa0:	pop	{r4, r5, r6, r7}
    caa2:	bx	lr
    caa4:	mov	r0, r2
    caa6:	bx	lr
    caa8:	mov	r0, r2
    caaa:	pop	{r4, r5, r6, r7}
    caac:	bx	lr
    caae:	mov	r0, r3
    cab0:	pop	{r4, r5, r6, r7}
    cab2:	bx	lr
    cab4:	movs	r0, #0
    cab6:	b.n	caa0 <strncmp+0x84>
    cab8:	mov	r0, r4
    caba:	b.n	caa0 <strncmp+0x84>

0000cabc <_vdprintf_r>:
    cabc:	push	{r4, r5, r6, r7, lr}
    cabe:	sub.w	sp, sp, #532	; 0x214
    cac2:	add	r5, sp, #16
    cac4:	str	r3, [sp, #0]
    cac6:	mov	r7, r1
    cac8:	mov	r3, r2
    caca:	mov.w	r4, #512	; 0x200
    cace:	add	r2, sp, #12
    cad0:	mov	r1, r5
    cad2:	str	r4, [sp, #12]
    cad4:	mov	r6, r0
    cad6:	bl	d500 <_vasnprintf_r>
    cada:	cbz	r0, cb00 <_vdprintf_r+0x44>
    cadc:	mov	r4, r0
    cade:	mov	r2, r0
    cae0:	mov	r1, r7
    cae2:	ldr	r3, [sp, #12]
    cae4:	mov	r0, r6
    cae6:	bl	cb3c <_write_r>
    caea:	cmp	r4, r5
    caec:	str	r0, [sp, #12]
    caee:	beq.n	cafa <_vdprintf_r+0x3e>
    caf0:	mov	r0, r6
    caf2:	mov	r1, r4
    caf4:	bl	ccf0 <_free_r>
    caf8:	ldr	r0, [sp, #12]
    cafa:	add.w	sp, sp, #532	; 0x214
    cafe:	pop	{r4, r5, r6, r7, pc}
    cb00:	mov.w	r0, #4294967295
    cb04:	b.n	cafa <_vdprintf_r+0x3e>
    cb06:	nop

0000cb08 <vdprintf>:
    cb08:	push	{r4}
    cb0a:	ldr	r4, [pc, #16]	; (cb1c <vdprintf+0x14>)
    cb0c:	mov	r3, r2
    cb0e:	mov	r2, r1
    cb10:	mov	r1, r0
    cb12:	ldr	r0, [r4, #0]
    cb14:	ldr.w	r4, [sp], #4
    cb18:	b.w	cabc <_vdprintf_r>
    cb1c:	.word	0x1fff0eb8

0000cb20 <__ascii_wctomb>:
    cb20:	cbz	r1, cb2c <__ascii_wctomb+0xc>
    cb22:	cmp	r2, #255	; 0xff
    cb24:	bhi.n	cb30 <__ascii_wctomb+0x10>
    cb26:	strb	r2, [r1, #0]
    cb28:	movs	r0, #1
    cb2a:	bx	lr
    cb2c:	mov	r0, r1
    cb2e:	bx	lr
    cb30:	movs	r3, #138	; 0x8a
    cb32:	str	r3, [r0, #0]
    cb34:	mov.w	r0, #4294967295
    cb38:	bx	lr
    cb3a:	nop

0000cb3c <_write_r>:
    cb3c:	push	{r4, r5, r6, lr}
    cb3e:	mov	r5, r1
    cb40:	ldr	r4, [pc, #32]	; (cb64 <_write_r+0x28>)
    cb42:	mov	r1, r2
    cb44:	mov	r6, r0
    cb46:	mov	r2, r3
    cb48:	mov	r0, r5
    cb4a:	movs	r3, #0
    cb4c:	str	r3, [r4, #0]
    cb4e:	bl	acc0 <_write>
    cb52:	adds	r3, r0, #1
    cb54:	beq.n	cb58 <_write_r+0x1c>
    cb56:	pop	{r4, r5, r6, pc}
    cb58:	ldr	r3, [r4, #0]
    cb5a:	cmp	r3, #0
    cb5c:	beq.n	cb56 <_write_r+0x1a>
    cb5e:	str	r3, [r6, #0]
    cb60:	pop	{r4, r5, r6, pc}
    cb62:	nop
    cb64:	.word	0x1fff1d94

0000cb68 <__register_exitproc>:
    cb68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb6c:	ldr	r4, [pc, #148]	; (cc04 <__register_exitproc+0x9c>)
    cb6e:	ldr	r5, [r4, #0]
    cb70:	ldr.w	r4, [r5, #328]	; 0x148
    cb74:	mov	r6, r0
    cb76:	mov	r8, r1
    cb78:	mov	sl, r2
    cb7a:	mov	r9, r3
    cb7c:	cbz	r4, cbf0 <__register_exitproc+0x88>
    cb7e:	ldr	r0, [r4, #4]
    cb80:	cmp	r0, #31
    cb82:	bgt.n	cbb4 <__register_exitproc+0x4c>
    cb84:	adds	r3, r0, #1
    cb86:	cbz	r6, cba6 <__register_exitproc+0x3e>
    cb88:	add.w	r5, r4, r0, lsl #2
    cb8c:	movs	r2, #1
    cb8e:	str.w	sl, [r5, #136]	; 0x88
    cb92:	ldr.w	r1, [r4, #392]	; 0x188
    cb96:	lsls	r2, r0
    cb98:	orrs	r1, r2
    cb9a:	cmp	r6, #2
    cb9c:	str.w	r1, [r4, #392]	; 0x188
    cba0:	str.w	r9, [r5, #264]	; 0x108
    cba4:	beq.n	cbe4 <__register_exitproc+0x7c>
    cba6:	adds	r0, #2
    cba8:	str	r3, [r4, #4]
    cbaa:	str.w	r8, [r4, r0, lsl #2]
    cbae:	movs	r0, #0
    cbb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cbb4:	ldr	r3, [pc, #80]	; (cc08 <__register_exitproc+0xa0>)
    cbb6:	cbz	r3, cbfa <__register_exitproc+0x92>
    cbb8:	mov.w	r0, #400	; 0x190
    cbbc:	bl	bbec <malloc>
    cbc0:	mov	r4, r0
    cbc2:	cbz	r0, cbfa <__register_exitproc+0x92>
    cbc4:	ldr.w	r3, [r5, #328]	; 0x148
    cbc8:	movs	r7, #0
    cbca:	stmia.w	r0, {r3, r7}
    cbce:	str.w	r4, [r5, #328]	; 0x148
    cbd2:	mov	r0, r7
    cbd4:	movs	r3, #1
    cbd6:	str.w	r7, [r4, #392]	; 0x188
    cbda:	str.w	r7, [r4, #396]	; 0x18c
    cbde:	cmp	r6, #0
    cbe0:	beq.n	cba6 <__register_exitproc+0x3e>
    cbe2:	b.n	cb88 <__register_exitproc+0x20>
    cbe4:	ldr.w	r1, [r4, #396]	; 0x18c
    cbe8:	orrs	r2, r1
    cbea:	str.w	r2, [r4, #396]	; 0x18c
    cbee:	b.n	cba6 <__register_exitproc+0x3e>
    cbf0:	add.w	r4, r5, #332	; 0x14c
    cbf4:	str.w	r4, [r5, #328]	; 0x148
    cbf8:	b.n	cb7e <__register_exitproc+0x16>
    cbfa:	mov.w	r0, #4294967295
    cbfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc02:	nop
    cc04:	.word	0x000103d8
    cc08:	.word	0x0000bbed

0000cc0c <register_fini>:
    cc0c:	ldr	r3, [pc, #8]	; (cc18 <register_fini+0xc>)
    cc0e:	cbz	r3, cc16 <register_fini+0xa>
    cc10:	ldr	r0, [pc, #8]	; (cc1c <register_fini+0x10>)
    cc12:	b.w	cc20 <atexit>
    cc16:	bx	lr
    cc18:	.word	0x00000000
    cc1c:	.word	0x0000cc2d

0000cc20 <atexit>:
    cc20:	movs	r3, #0
    cc22:	mov	r1, r0
    cc24:	mov	r2, r3
    cc26:	mov	r0, r3
    cc28:	b.w	cb68 <__register_exitproc>

0000cc2c <__libc_fini_array>:
    cc2c:	push	{r3, r4, r5, lr}
    cc2e:	ldr	r5, [pc, #28]	; (cc4c <__libc_fini_array+0x20>)
    cc30:	ldr	r4, [pc, #28]	; (cc50 <__libc_fini_array+0x24>)
    cc32:	subs	r4, r5, r4
    cc34:	asrs	r4, r4, #2
    cc36:	beq.n	cc44 <__libc_fini_array+0x18>
    cc38:	subs	r4, #1
    cc3a:	ldr.w	r3, [r5, #-4]!
    cc3e:	blx	r3
    cc40:	cmp	r4, #0
    cc42:	bne.n	cc38 <__libc_fini_array+0xc>
    cc44:	ldmia.w	sp!, {r3, r4, r5, lr}
    cc48:	b.w	1067c <__init_array_end>
	...

0000cc54 <_malloc_trim_r>:
    cc54:	push	{r3, r4, r5, r6, r7, lr}
    cc56:	ldr	r7, [pc, #140]	; (cce4 <_malloc_trim_r+0x90>)
    cc58:	mov	r4, r1
    cc5a:	mov	r6, r0
    cc5c:	bl	c418 <__malloc_lock>
    cc60:	ldr	r3, [r7, #8]
    cc62:	ldr	r5, [r3, #4]
    cc64:	bic.w	r5, r5, #3
    cc68:	subs	r1, r5, r4
    cc6a:	addw	r1, r1, #4079	; 0xfef
    cc6e:	bic.w	r1, r1, #4080	; 0xff0
    cc72:	bic.w	r1, r1, #15
    cc76:	sub.w	r4, r1, #4096	; 0x1000
    cc7a:	cmp.w	r4, #4096	; 0x1000
    cc7e:	blt.n	cc90 <_malloc_trim_r+0x3c>
    cc80:	movs	r1, #0
    cc82:	mov	r0, r6
    cc84:	bl	c800 <_sbrk_r>
    cc88:	ldr	r3, [r7, #8]
    cc8a:	add	r3, r5
    cc8c:	cmp	r0, r3
    cc8e:	beq.n	cc9a <_malloc_trim_r+0x46>
    cc90:	mov	r0, r6
    cc92:	bl	c41c <__malloc_unlock>
    cc96:	movs	r0, #0
    cc98:	pop	{r3, r4, r5, r6, r7, pc}
    cc9a:	negs	r1, r4
    cc9c:	mov	r0, r6
    cc9e:	bl	c800 <_sbrk_r>
    cca2:	adds	r0, #1
    cca4:	beq.n	ccc2 <_malloc_trim_r+0x6e>
    cca6:	ldr	r3, [pc, #64]	; (cce8 <_malloc_trim_r+0x94>)
    cca8:	ldr	r2, [r7, #8]
    ccaa:	ldr	r1, [r3, #0]
    ccac:	subs	r5, r5, r4
    ccae:	orr.w	r5, r5, #1
    ccb2:	mov	r0, r6
    ccb4:	subs	r1, r1, r4
    ccb6:	str	r5, [r2, #4]
    ccb8:	str	r1, [r3, #0]
    ccba:	bl	c41c <__malloc_unlock>
    ccbe:	movs	r0, #1
    ccc0:	pop	{r3, r4, r5, r6, r7, pc}
    ccc2:	movs	r1, #0
    ccc4:	mov	r0, r6
    ccc6:	bl	c800 <_sbrk_r>
    ccca:	ldr	r2, [r7, #8]
    cccc:	subs	r3, r0, r2
    ccce:	cmp	r3, #15
    ccd0:	ble.n	cc90 <_malloc_trim_r+0x3c>
    ccd2:	ldr	r4, [pc, #24]	; (ccec <_malloc_trim_r+0x98>)
    ccd4:	ldr	r1, [pc, #16]	; (cce8 <_malloc_trim_r+0x94>)
    ccd6:	ldr	r4, [r4, #0]
    ccd8:	orr.w	r3, r3, #1
    ccdc:	subs	r0, r0, r4
    ccde:	str	r3, [r2, #4]
    cce0:	str	r0, [r1, #0]
    cce2:	b.n	cc90 <_malloc_trim_r+0x3c>
    cce4:	.word	0x1fff1028
    cce8:	.word	0x1fff1d54
    ccec:	.word	0x1fff1434

0000ccf0 <_free_r>:
    ccf0:	cmp	r1, #0
    ccf2:	beq.n	cd80 <_free_r+0x90>
    ccf4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccf8:	mov	r5, r1
    ccfa:	mov	r8, r0
    ccfc:	bl	c418 <__malloc_lock>
    cd00:	ldr.w	r7, [r5, #-4]
    cd04:	ldr	r1, [pc, #424]	; (ceb0 <_free_r+0x1c0>)
    cd06:	bic.w	r3, r7, #1
    cd0a:	sub.w	r4, r5, #8
    cd0e:	adds	r2, r4, r3
    cd10:	ldr	r6, [r1, #8]
    cd12:	ldr	r0, [r2, #4]
    cd14:	cmp	r2, r6
    cd16:	bic.w	r0, r0, #3
    cd1a:	beq.n	cde2 <_free_r+0xf2>
    cd1c:	lsls	r6, r7, #31
    cd1e:	str	r0, [r2, #4]
    cd20:	bmi.n	cd3a <_free_r+0x4a>
    cd22:	ldr.w	r7, [r5, #-8]
    cd26:	subs	r4, r4, r7
    cd28:	add.w	lr, r1, #8
    cd2c:	ldr	r5, [r4, #8]
    cd2e:	cmp	r5, lr
    cd30:	add	r3, r7
    cd32:	beq.n	ce14 <_free_r+0x124>
    cd34:	ldr	r7, [r4, #12]
    cd36:	str	r7, [r5, #12]
    cd38:	str	r5, [r7, #8]
    cd3a:	adds	r5, r2, r0
    cd3c:	ldr	r5, [r5, #4]
    cd3e:	lsls	r5, r5, #31
    cd40:	bpl.n	cdc8 <_free_r+0xd8>
    cd42:	orr.w	r2, r3, #1
    cd46:	str	r2, [r4, #4]
    cd48:	str	r3, [r4, r3]
    cd4a:	cmp.w	r3, #512	; 0x200
    cd4e:	bcs.n	cd82 <_free_r+0x92>
    cd50:	lsrs	r3, r3, #3
    cd52:	adds	r2, r3, #1
    cd54:	ldr	r5, [r1, #4]
    cd56:	ldr.w	r7, [r1, r2, lsl #3]
    cd5a:	str	r7, [r4, #8]
    cd5c:	movs	r0, #1
    cd5e:	asrs	r3, r3, #2
    cd60:	lsl.w	r3, r0, r3
    cd64:	add.w	r0, r1, r2, lsl #3
    cd68:	orrs	r5, r3
    cd6a:	subs	r0, #8
    cd6c:	str	r0, [r4, #12]
    cd6e:	str	r5, [r1, #4]
    cd70:	str.w	r4, [r1, r2, lsl #3]
    cd74:	str	r4, [r7, #12]
    cd76:	mov	r0, r8
    cd78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd7c:	b.w	c41c <__malloc_unlock>
    cd80:	bx	lr
    cd82:	lsrs	r2, r3, #9
    cd84:	cmp	r2, #4
    cd86:	bhi.n	ce30 <_free_r+0x140>
    cd88:	lsrs	r2, r3, #6
    cd8a:	add.w	r7, r2, #57	; 0x39
    cd8e:	lsls	r7, r7, #1
    cd90:	add.w	r5, r2, #56	; 0x38
    cd94:	add.w	r0, r1, r7, lsl #2
    cd98:	ldr.w	r2, [r1, r7, lsl #2]
    cd9c:	ldr	r1, [pc, #272]	; (ceb0 <_free_r+0x1c0>)
    cd9e:	subs	r0, #8
    cda0:	cmp	r0, r2
    cda2:	beq.n	ce40 <_free_r+0x150>
    cda4:	ldr	r1, [r2, #4]
    cda6:	bic.w	r1, r1, #3
    cdaa:	cmp	r3, r1
    cdac:	bcs.n	cdb4 <_free_r+0xc4>
    cdae:	ldr	r2, [r2, #8]
    cdb0:	cmp	r0, r2
    cdb2:	bne.n	cda4 <_free_r+0xb4>
    cdb4:	ldr	r0, [r2, #12]
    cdb6:	str	r0, [r4, #12]
    cdb8:	str	r2, [r4, #8]
    cdba:	str	r4, [r0, #8]
    cdbc:	str	r4, [r2, #12]
    cdbe:	mov	r0, r8
    cdc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cdc4:	b.w	c41c <__malloc_unlock>
    cdc8:	ldr	r5, [r2, #8]
    cdca:	ldr	r7, [pc, #232]	; (ceb4 <_free_r+0x1c4>)
    cdcc:	cmp	r5, r7
    cdce:	add	r3, r0
    cdd0:	beq.n	ce52 <_free_r+0x162>
    cdd2:	ldr	r0, [r2, #12]
    cdd4:	str	r0, [r5, #12]
    cdd6:	orr.w	r2, r3, #1
    cdda:	str	r5, [r0, #8]
    cddc:	str	r2, [r4, #4]
    cdde:	str	r3, [r4, r3]
    cde0:	b.n	cd4a <_free_r+0x5a>
    cde2:	lsls	r7, r7, #31
    cde4:	add	r3, r0
    cde6:	bmi.n	cdf8 <_free_r+0x108>
    cde8:	ldr.w	r2, [r5, #-8]
    cdec:	subs	r4, r4, r2
    cdee:	add	r3, r2
    cdf0:	ldr	r0, [r4, #8]
    cdf2:	ldr	r2, [r4, #12]
    cdf4:	str	r2, [r0, #12]
    cdf6:	str	r0, [r2, #8]
    cdf8:	ldr	r2, [pc, #188]	; (ceb8 <_free_r+0x1c8>)
    cdfa:	ldr	r2, [r2, #0]
    cdfc:	orr.w	r0, r3, #1
    ce00:	cmp	r3, r2
    ce02:	str	r0, [r4, #4]
    ce04:	str	r4, [r1, #8]
    ce06:	bcc.n	cd76 <_free_r+0x86>
    ce08:	ldr	r3, [pc, #176]	; (cebc <_free_r+0x1cc>)
    ce0a:	mov	r0, r8
    ce0c:	ldr	r1, [r3, #0]
    ce0e:	bl	cc54 <_malloc_trim_r>
    ce12:	b.n	cd76 <_free_r+0x86>
    ce14:	adds	r1, r2, r0
    ce16:	ldr	r1, [r1, #4]
    ce18:	lsls	r1, r1, #31
    ce1a:	bmi.n	cea6 <_free_r+0x1b6>
    ce1c:	ldr	r1, [r2, #8]
    ce1e:	ldr	r2, [r2, #12]
    ce20:	str	r2, [r1, #12]
    ce22:	add	r3, r0
    ce24:	orr.w	r0, r3, #1
    ce28:	str	r1, [r2, #8]
    ce2a:	str	r0, [r4, #4]
    ce2c:	str	r3, [r4, r3]
    ce2e:	b.n	cd76 <_free_r+0x86>
    ce30:	cmp	r2, #20
    ce32:	bhi.n	ce64 <_free_r+0x174>
    ce34:	add.w	r7, r2, #92	; 0x5c
    ce38:	lsls	r7, r7, #1
    ce3a:	add.w	r5, r2, #91	; 0x5b
    ce3e:	b.n	cd94 <_free_r+0xa4>
    ce40:	asrs	r2, r5, #2
    ce42:	ldr	r3, [r1, #4]
    ce44:	movs	r5, #1
    ce46:	lsl.w	r2, r5, r2
    ce4a:	orrs	r3, r2
    ce4c:	str	r3, [r1, #4]
    ce4e:	mov	r2, r0
    ce50:	b.n	cdb6 <_free_r+0xc6>
    ce52:	orr.w	r2, r3, #1
    ce56:	str	r4, [r1, #20]
    ce58:	str	r4, [r1, #16]
    ce5a:	str	r5, [r4, #12]
    ce5c:	str	r5, [r4, #8]
    ce5e:	str	r2, [r4, #4]
    ce60:	str	r3, [r4, r3]
    ce62:	b.n	cd76 <_free_r+0x86>
    ce64:	cmp	r2, #84	; 0x54
    ce66:	bhi.n	ce76 <_free_r+0x186>
    ce68:	lsrs	r2, r3, #12
    ce6a:	add.w	r7, r2, #111	; 0x6f
    ce6e:	lsls	r7, r7, #1
    ce70:	add.w	r5, r2, #110	; 0x6e
    ce74:	b.n	cd94 <_free_r+0xa4>
    ce76:	cmp.w	r2, #340	; 0x154
    ce7a:	bhi.n	ce8a <_free_r+0x19a>
    ce7c:	lsrs	r2, r3, #15
    ce7e:	add.w	r7, r2, #120	; 0x78
    ce82:	lsls	r7, r7, #1
    ce84:	add.w	r5, r2, #119	; 0x77
    ce88:	b.n	cd94 <_free_r+0xa4>
    ce8a:	movw	r0, #1364	; 0x554
    ce8e:	cmp	r2, r0
    ce90:	bhi.n	cea0 <_free_r+0x1b0>
    ce92:	lsrs	r2, r3, #18
    ce94:	add.w	r7, r2, #125	; 0x7d
    ce98:	lsls	r7, r7, #1
    ce9a:	add.w	r5, r2, #124	; 0x7c
    ce9e:	b.n	cd94 <_free_r+0xa4>
    cea0:	movs	r7, #254	; 0xfe
    cea2:	movs	r5, #126	; 0x7e
    cea4:	b.n	cd94 <_free_r+0xa4>
    cea6:	orr.w	r2, r3, #1
    ceaa:	str	r2, [r4, #4]
    ceac:	str	r3, [r4, r3]
    ceae:	b.n	cd76 <_free_r+0x86>
    ceb0:	.word	0x1fff1028
    ceb4:	.word	0x1fff1030
    ceb8:	.word	0x1fff1430
    cebc:	.word	0x1fff1d50

0000cec0 <_localeconv_r>:
    cec0:	ldr	r2, [pc, #16]	; (ced4 <_localeconv_r+0x14>)
    cec2:	ldr	r3, [pc, #20]	; (ced8 <_localeconv_r+0x18>)
    cec4:	ldr	r2, [r2, #0]
    cec6:	ldr	r0, [r2, #52]	; 0x34
    cec8:	cmp	r0, #0
    ceca:	it	eq
    cecc:	moveq	r0, r3
    cece:	adds	r0, #240	; 0xf0
    ced0:	bx	lr
    ced2:	nop
    ced4:	.word	0x1fff0eb8
    ced8:	.word	0x1fff0ebc

0000cedc <_Balloc>:
    cedc:	ldr	r3, [r0, #76]	; 0x4c
    cede:	push	{r4, r5, r6, lr}
    cee0:	mov	r5, r0
    cee2:	mov	r4, r1
    cee4:	cbz	r3, cefa <_Balloc+0x1e>
    cee6:	ldr.w	r0, [r3, r4, lsl #2]
    ceea:	cbz	r0, cf0e <_Balloc+0x32>
    ceec:	ldr	r2, [r0, #0]
    ceee:	str.w	r2, [r3, r4, lsl #2]
    cef2:	movs	r3, #0
    cef4:	str	r3, [r0, #16]
    cef6:	str	r3, [r0, #12]
    cef8:	pop	{r4, r5, r6, pc}
    cefa:	movs	r2, #33	; 0x21
    cefc:	movs	r1, #4
    cefe:	bl	d560 <_calloc_r>
    cf02:	str	r0, [r5, #76]	; 0x4c
    cf04:	mov	r3, r0
    cf06:	cmp	r0, #0
    cf08:	bne.n	cee6 <_Balloc+0xa>
    cf0a:	movs	r0, #0
    cf0c:	pop	{r4, r5, r6, pc}
    cf0e:	movs	r1, #1
    cf10:	lsl.w	r6, r1, r4
    cf14:	adds	r2, r6, #5
    cf16:	mov	r0, r5
    cf18:	lsls	r2, r2, #2
    cf1a:	bl	d560 <_calloc_r>
    cf1e:	cmp	r0, #0
    cf20:	beq.n	cf0a <_Balloc+0x2e>
    cf22:	str	r4, [r0, #4]
    cf24:	str	r6, [r0, #8]
    cf26:	b.n	cef2 <_Balloc+0x16>

0000cf28 <_Bfree>:
    cf28:	cbz	r1, cf38 <_Bfree+0x10>
    cf2a:	ldr	r3, [r0, #76]	; 0x4c
    cf2c:	ldr	r2, [r1, #4]
    cf2e:	ldr.w	r0, [r3, r2, lsl #2]
    cf32:	str	r0, [r1, #0]
    cf34:	str.w	r1, [r3, r2, lsl #2]
    cf38:	bx	lr
    cf3a:	nop

0000cf3c <__multadd>:
    cf3c:	push	{r4, r5, r6, r7, lr}
    cf3e:	ldr	r4, [r1, #16]
    cf40:	sub	sp, #12
    cf42:	mov	r5, r1
    cf44:	mov	r6, r0
    cf46:	add.w	lr, r1, #20
    cf4a:	movs	r7, #0
    cf4c:	ldr.w	r0, [lr]
    cf50:	uxth	r1, r0
    cf52:	mla	r1, r2, r1, r3
    cf56:	lsrs	r3, r1, #16
    cf58:	lsrs	r0, r0, #16
    cf5a:	mla	r3, r2, r0, r3
    cf5e:	uxth	r1, r1
    cf60:	adds	r7, #1
    cf62:	add.w	r1, r1, r3, lsl #16
    cf66:	cmp	r4, r7
    cf68:	str.w	r1, [lr], #4
    cf6c:	mov.w	r3, r3, lsr #16
    cf70:	bgt.n	cf4c <__multadd+0x10>
    cf72:	cbz	r3, cf84 <__multadd+0x48>
    cf74:	ldr	r2, [r5, #8]
    cf76:	cmp	r4, r2
    cf78:	bge.n	cf8a <__multadd+0x4e>
    cf7a:	add.w	r2, r5, r4, lsl #2
    cf7e:	adds	r4, #1
    cf80:	str	r3, [r2, #20]
    cf82:	str	r4, [r5, #16]
    cf84:	mov	r0, r5
    cf86:	add	sp, #12
    cf88:	pop	{r4, r5, r6, r7, pc}
    cf8a:	ldr	r1, [r5, #4]
    cf8c:	str	r3, [sp, #4]
    cf8e:	adds	r1, #1
    cf90:	mov	r0, r6
    cf92:	bl	cedc <_Balloc>
    cf96:	ldr	r2, [r5, #16]
    cf98:	adds	r2, #2
    cf9a:	add.w	r1, r5, #12
    cf9e:	mov	r7, r0
    cfa0:	lsls	r2, r2, #2
    cfa2:	adds	r0, #12
    cfa4:	bl	9584 <memcpy>
    cfa8:	ldr	r2, [r6, #76]	; 0x4c
    cfaa:	ldr	r1, [r5, #4]
    cfac:	ldr	r3, [sp, #4]
    cfae:	ldr.w	r0, [r2, r1, lsl #2]
    cfb2:	str	r0, [r5, #0]
    cfb4:	str.w	r5, [r2, r1, lsl #2]
    cfb8:	mov	r5, r7
    cfba:	b.n	cf7a <__multadd+0x3e>

0000cfbc <__hi0bits>:
    cfbc:	lsrs	r3, r0, #16
    cfbe:	lsls	r3, r3, #16
    cfc0:	cbnz	r3, cff0 <__hi0bits+0x34>
    cfc2:	lsls	r0, r0, #16
    cfc4:	movs	r3, #16
    cfc6:	tst.w	r0, #4278190080	; 0xff000000
    cfca:	itt	eq
    cfcc:	lsleq	r0, r0, #8
    cfce:	addeq	r3, #8
    cfd0:	tst.w	r0, #4026531840	; 0xf0000000
    cfd4:	itt	eq
    cfd6:	lsleq	r0, r0, #4
    cfd8:	addeq	r3, #4
    cfda:	tst.w	r0, #3221225472	; 0xc0000000
    cfde:	itt	eq
    cfe0:	lsleq	r0, r0, #2
    cfe2:	addeq	r3, #2
    cfe4:	cmp	r0, #0
    cfe6:	blt.n	cff8 <__hi0bits+0x3c>
    cfe8:	lsls	r2, r0, #1
    cfea:	bmi.n	cff4 <__hi0bits+0x38>
    cfec:	movs	r0, #32
    cfee:	bx	lr
    cff0:	movs	r3, #0
    cff2:	b.n	cfc6 <__hi0bits+0xa>
    cff4:	adds	r0, r3, #1
    cff6:	bx	lr
    cff8:	mov	r0, r3
    cffa:	bx	lr

0000cffc <__lo0bits>:
    cffc:	ldr	r3, [r0, #0]
    cffe:	ands.w	r2, r3, #7
    d002:	beq.n	d014 <__lo0bits+0x18>
    d004:	lsls	r1, r3, #31
    d006:	bmi.n	d04a <__lo0bits+0x4e>
    d008:	lsls	r2, r3, #30
    d00a:	bmi.n	d04e <__lo0bits+0x52>
    d00c:	lsrs	r3, r3, #2
    d00e:	str	r3, [r0, #0]
    d010:	movs	r0, #2
    d012:	bx	lr
    d014:	uxth	r1, r3
    d016:	cbnz	r1, d01c <__lo0bits+0x20>
    d018:	lsrs	r3, r3, #16
    d01a:	movs	r2, #16
    d01c:	tst.w	r3, #255	; 0xff
    d020:	itt	eq
    d022:	lsreq	r3, r3, #8
    d024:	addeq	r2, #8
    d026:	lsls	r1, r3, #28
    d028:	itt	eq
    d02a:	lsreq	r3, r3, #4
    d02c:	addeq	r2, #4
    d02e:	lsls	r1, r3, #30
    d030:	itt	eq
    d032:	lsreq	r3, r3, #2
    d034:	addeq	r2, #2
    d036:	lsls	r1, r3, #31
    d038:	bmi.n	d044 <__lo0bits+0x48>
    d03a:	lsrs	r3, r3, #1
    d03c:	bne.n	d042 <__lo0bits+0x46>
    d03e:	movs	r0, #32
    d040:	bx	lr
    d042:	adds	r2, #1
    d044:	str	r3, [r0, #0]
    d046:	mov	r0, r2
    d048:	bx	lr
    d04a:	movs	r0, #0
    d04c:	bx	lr
    d04e:	lsrs	r3, r3, #1
    d050:	str	r3, [r0, #0]
    d052:	movs	r0, #1
    d054:	bx	lr
    d056:	nop

0000d058 <__i2b>:
    d058:	push	{r4, lr}
    d05a:	mov	r4, r1
    d05c:	movs	r1, #1
    d05e:	bl	cedc <_Balloc>
    d062:	movs	r2, #1
    d064:	str	r4, [r0, #20]
    d066:	str	r2, [r0, #16]
    d068:	pop	{r4, pc}
    d06a:	nop

0000d06c <__multiply>:
    d06c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d070:	ldr	r5, [r1, #16]
    d072:	ldr	r7, [r2, #16]
    d074:	cmp	r5, r7
    d076:	sub	sp, #12
    d078:	mov	r4, r1
    d07a:	mov	r6, r2
    d07c:	bge.n	d088 <__multiply+0x1c>
    d07e:	mov	r2, r5
    d080:	mov	r4, r6
    d082:	mov	r5, r7
    d084:	mov	r6, r1
    d086:	mov	r7, r2
    d088:	ldr	r3, [r4, #8]
    d08a:	ldr	r1, [r4, #4]
    d08c:	add.w	r8, r5, r7
    d090:	cmp	r8, r3
    d092:	it	gt
    d094:	addgt	r1, #1
    d096:	bl	cedc <_Balloc>
    d09a:	add.w	ip, r0, #20
    d09e:	add.w	r9, ip, r8, lsl #2
    d0a2:	cmp	ip, r9
    d0a4:	str	r0, [sp, #0]
    d0a6:	bcs.n	d0b4 <__multiply+0x48>
    d0a8:	mov	r3, ip
    d0aa:	movs	r1, #0
    d0ac:	str.w	r1, [r3], #4
    d0b0:	cmp	r9, r3
    d0b2:	bhi.n	d0ac <__multiply+0x40>
    d0b4:	add.w	r2, r6, #20
    d0b8:	add.w	sl, r2, r7, lsl #2
    d0bc:	add.w	r3, r4, #20
    d0c0:	cmp	r2, sl
    d0c2:	add.w	lr, r3, r5, lsl #2
    d0c6:	bcs.n	d172 <__multiply+0x106>
    d0c8:	str.w	r9, [sp, #4]
    d0cc:	mov	r9, r3
    d0ce:	ldr.w	r3, [r2], #4
    d0d2:	uxth.w	fp, r3
    d0d6:	cmp.w	fp, #0
    d0da:	beq.n	d11e <__multiply+0xb2>
    d0dc:	movs	r0, #0
    d0de:	mov	r7, r9
    d0e0:	mov	r6, ip
    d0e2:	mov	r5, r0
    d0e4:	b.n	d0e8 <__multiply+0x7c>
    d0e6:	mov	r6, r3
    d0e8:	ldr.w	r4, [r7], #4
    d0ec:	ldr	r0, [r6, #0]
    d0ee:	uxth	r1, r4
    d0f0:	uxth	r3, r0
    d0f2:	mla	r1, fp, r1, r3
    d0f6:	lsrs	r4, r4, #16
    d0f8:	lsrs	r0, r0, #16
    d0fa:	adds	r3, r1, r5
    d0fc:	mla	r0, fp, r4, r0
    d100:	add.w	r0, r0, r3, lsr #16
    d104:	uxth	r1, r3
    d106:	mov	r3, r6
    d108:	orr.w	r1, r1, r0, lsl #16
    d10c:	cmp	lr, r7
    d10e:	mov.w	r5, r0, lsr #16
    d112:	str.w	r1, [r3], #4
    d116:	bhi.n	d0e6 <__multiply+0x7a>
    d118:	str	r5, [r6, #4]
    d11a:	ldr.w	r3, [r2, #-4]
    d11e:	movs.w	fp, r3, lsr #16
    d122:	beq.n	d166 <__multiply+0xfa>
    d124:	ldr.w	r3, [ip]
    d128:	mov	r7, ip
    d12a:	mov	r0, r3
    d12c:	mov	r5, r9
    d12e:	movs	r1, #0
    d130:	b.n	d134 <__multiply+0xc8>
    d132:	mov	r7, r6
    d134:	ldrh	r4, [r5, #0]
    d136:	lsrs	r0, r0, #16
    d138:	mla	r0, fp, r4, r0
    d13c:	add	r1, r0
    d13e:	uxth	r4, r3
    d140:	mov	r6, r7
    d142:	orr.w	r3, r4, r1, lsl #16
    d146:	str.w	r3, [r6], #4
    d14a:	ldr	r0, [r7, #4]
    d14c:	ldr.w	r4, [r5], #4
    d150:	uxth	r3, r0
    d152:	lsrs	r4, r4, #16
    d154:	mla	r4, fp, r4, r3
    d158:	add.w	r3, r4, r1, lsr #16
    d15c:	cmp	lr, r5
    d15e:	mov.w	r1, r3, lsr #16
    d162:	bhi.n	d132 <__multiply+0xc6>
    d164:	str	r3, [r7, #4]
    d166:	cmp	sl, r2
    d168:	add.w	ip, ip, #4
    d16c:	bhi.n	d0ce <__multiply+0x62>
    d16e:	ldr.w	r9, [sp, #4]
    d172:	cmp.w	r8, #0
    d176:	ble.n	d190 <__multiply+0x124>
    d178:	ldr.w	r3, [r9, #-4]
    d17c:	sub.w	r9, r9, #4
    d180:	cbz	r3, d18a <__multiply+0x11e>
    d182:	b.n	d190 <__multiply+0x124>
    d184:	ldr.w	r3, [r9, #-4]!
    d188:	cbnz	r3, d190 <__multiply+0x124>
    d18a:	subs.w	r8, r8, #1
    d18e:	bne.n	d184 <__multiply+0x118>
    d190:	ldr	r0, [sp, #0]
    d192:	str.w	r8, [r0, #16]
    d196:	add	sp, #12
    d198:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d19c <__pow5mult>:
    d19c:	ands.w	r3, r2, #3
    d1a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1a4:	mov	r4, r2
    d1a6:	mov	r7, r0
    d1a8:	bne.n	d208 <__pow5mult+0x6c>
    d1aa:	mov	r6, r1
    d1ac:	asrs	r4, r4, #2
    d1ae:	beq.n	d1ea <__pow5mult+0x4e>
    d1b0:	ldr	r5, [r7, #72]	; 0x48
    d1b2:	cbz	r5, d21a <__pow5mult+0x7e>
    d1b4:	lsls	r3, r4, #31
    d1b6:	mov.w	r8, #0
    d1ba:	bmi.n	d1ca <__pow5mult+0x2e>
    d1bc:	asrs	r4, r4, #1
    d1be:	beq.n	d1ea <__pow5mult+0x4e>
    d1c0:	ldr	r0, [r5, #0]
    d1c2:	cbz	r0, d1f0 <__pow5mult+0x54>
    d1c4:	mov	r5, r0
    d1c6:	lsls	r3, r4, #31
    d1c8:	bpl.n	d1bc <__pow5mult+0x20>
    d1ca:	mov	r2, r5
    d1cc:	mov	r1, r6
    d1ce:	mov	r0, r7
    d1d0:	bl	d06c <__multiply>
    d1d4:	cbz	r6, d204 <__pow5mult+0x68>
    d1d6:	ldr	r2, [r6, #4]
    d1d8:	ldr	r3, [r7, #76]	; 0x4c
    d1da:	asrs	r4, r4, #1
    d1dc:	ldr.w	r1, [r3, r2, lsl #2]
    d1e0:	str	r1, [r6, #0]
    d1e2:	str.w	r6, [r3, r2, lsl #2]
    d1e6:	mov	r6, r0
    d1e8:	bne.n	d1c0 <__pow5mult+0x24>
    d1ea:	mov	r0, r6
    d1ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1f0:	mov	r2, r5
    d1f2:	mov	r1, r5
    d1f4:	mov	r0, r7
    d1f6:	bl	d06c <__multiply>
    d1fa:	str	r0, [r5, #0]
    d1fc:	str.w	r8, [r0]
    d200:	mov	r5, r0
    d202:	b.n	d1c6 <__pow5mult+0x2a>
    d204:	mov	r6, r0
    d206:	b.n	d1bc <__pow5mult+0x20>
    d208:	subs	r2, r3, #1
    d20a:	ldr	r5, [pc, #44]	; (d238 <__pow5mult+0x9c>)
    d20c:	movs	r3, #0
    d20e:	ldr.w	r2, [r5, r2, lsl #2]
    d212:	bl	cf3c <__multadd>
    d216:	mov	r6, r0
    d218:	b.n	d1ac <__pow5mult+0x10>
    d21a:	movs	r1, #1
    d21c:	mov	r0, r7
    d21e:	bl	cedc <_Balloc>
    d222:	movw	r1, #625	; 0x271
    d226:	movs	r2, #1
    d228:	movs	r3, #0
    d22a:	str	r1, [r0, #20]
    d22c:	str	r2, [r0, #16]
    d22e:	mov	r5, r0
    d230:	str	r0, [r7, #72]	; 0x48
    d232:	str	r3, [r0, #0]
    d234:	b.n	d1b4 <__pow5mult+0x18>
    d236:	nop
    d238:	.word	0x000105e0

0000d23c <__lshift>:
    d23c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d240:	mov	r9, r2
    d242:	ldr	r2, [r1, #16]
    d244:	ldr	r3, [r1, #8]
    d246:	mov.w	r4, r9, asr #5
    d24a:	add.w	r8, r4, r2
    d24e:	add.w	r5, r8, #1
    d252:	cmp	r5, r3
    d254:	mov	r6, r1
    d256:	mov	sl, r0
    d258:	ldr	r1, [r1, #4]
    d25a:	ble.n	d266 <__lshift+0x2a>
    d25c:	lsls	r3, r3, #1
    d25e:	cmp	r5, r3
    d260:	add.w	r1, r1, #1
    d264:	bgt.n	d25c <__lshift+0x20>
    d266:	mov	r0, sl
    d268:	bl	cedc <_Balloc>
    d26c:	cmp	r4, #0
    d26e:	add.w	r2, r0, #20
    d272:	ble.n	d2e6 <__lshift+0xaa>
    d274:	add.w	r3, r2, r4, lsl #2
    d278:	movs	r1, #0
    d27a:	str.w	r1, [r2], #4
    d27e:	cmp	r3, r2
    d280:	bne.n	d27a <__lshift+0x3e>
    d282:	ldr	r4, [r6, #16]
    d284:	add.w	r1, r6, #20
    d288:	ands.w	r9, r9, #31
    d28c:	add.w	lr, r1, r4, lsl #2
    d290:	beq.n	d2d6 <__lshift+0x9a>
    d292:	rsb	r2, r9, #32
    d296:	movs	r4, #0
    d298:	ldr	r7, [r1, #0]
    d29a:	lsl.w	ip, r7, r9
    d29e:	orr.w	r4, ip, r4
    d2a2:	mov	ip, r3
    d2a4:	str.w	r4, [r3], #4
    d2a8:	ldr.w	r4, [r1], #4
    d2ac:	cmp	lr, r1
    d2ae:	lsr.w	r4, r4, r2
    d2b2:	bhi.n	d298 <__lshift+0x5c>
    d2b4:	str.w	r4, [ip, #4]
    d2b8:	cbz	r4, d2be <__lshift+0x82>
    d2ba:	add.w	r5, r8, #2
    d2be:	ldr.w	r3, [sl, #76]	; 0x4c
    d2c2:	ldr	r2, [r6, #4]
    d2c4:	subs	r5, #1
    d2c6:	ldr.w	r1, [r3, r2, lsl #2]
    d2ca:	str	r5, [r0, #16]
    d2cc:	str	r1, [r6, #0]
    d2ce:	str.w	r6, [r3, r2, lsl #2]
    d2d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2d6:	subs	r3, #4
    d2d8:	ldr.w	r2, [r1], #4
    d2dc:	str.w	r2, [r3, #4]!
    d2e0:	cmp	lr, r1
    d2e2:	bhi.n	d2d8 <__lshift+0x9c>
    d2e4:	b.n	d2be <__lshift+0x82>
    d2e6:	mov	r3, r2
    d2e8:	b.n	d282 <__lshift+0x46>
    d2ea:	nop

0000d2ec <__mcmp>:
    d2ec:	ldr	r2, [r0, #16]
    d2ee:	ldr	r3, [r1, #16]
    d2f0:	subs	r2, r2, r3
    d2f2:	bne.n	d31c <__mcmp+0x30>
    d2f4:	lsls	r3, r3, #2
    d2f6:	adds	r0, #20
    d2f8:	adds	r1, #20
    d2fa:	add	r1, r3
    d2fc:	push	{r4}
    d2fe:	add	r3, r0
    d300:	b.n	d306 <__mcmp+0x1a>
    d302:	cmp	r0, r3
    d304:	bcs.n	d320 <__mcmp+0x34>
    d306:	ldr.w	r4, [r3, #-4]!
    d30a:	ldr.w	r2, [r1, #-4]!
    d30e:	cmp	r4, r2
    d310:	beq.n	d302 <__mcmp+0x16>
    d312:	bcc.n	d328 <__mcmp+0x3c>
    d314:	movs	r0, #1
    d316:	ldr.w	r4, [sp], #4
    d31a:	bx	lr
    d31c:	mov	r0, r2
    d31e:	bx	lr
    d320:	movs	r0, #0
    d322:	ldr.w	r4, [sp], #4
    d326:	bx	lr
    d328:	mov.w	r0, #4294967295
    d32c:	b.n	d316 <__mcmp+0x2a>
    d32e:	nop

0000d330 <__mdiff>:
    d330:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d334:	ldr	r3, [r1, #16]
    d336:	mov	r7, r1
    d338:	ldr	r1, [r2, #16]
    d33a:	subs	r3, r3, r1
    d33c:	cmp	r3, #0
    d33e:	mov	r8, r2
    d340:	bne.n	d372 <__mdiff+0x42>
    d342:	lsls	r1, r1, #2
    d344:	add.w	r2, r7, #20
    d348:	add.w	r5, r8, #20
    d34c:	adds	r3, r2, r1
    d34e:	add	r1, r5
    d350:	b.n	d356 <__mdiff+0x26>
    d352:	cmp	r2, r3
    d354:	bcs.n	d414 <__mdiff+0xe4>
    d356:	ldr.w	r6, [r3, #-4]!
    d35a:	ldr.w	r4, [r1, #-4]!
    d35e:	cmp	r6, r4
    d360:	beq.n	d352 <__mdiff+0x22>
    d362:	bcs.n	d426 <__mdiff+0xf6>
    d364:	mov	r3, r7
    d366:	mov	r4, r2
    d368:	mov	r7, r8
    d36a:	mov.w	r9, #1
    d36e:	mov	r8, r3
    d370:	b.n	d380 <__mdiff+0x50>
    d372:	blt.n	d430 <__mdiff+0x100>
    d374:	add.w	r5, r7, #20
    d378:	add.w	r4, r2, #20
    d37c:	mov.w	r9, #0
    d380:	ldr	r1, [r7, #4]
    d382:	bl	cedc <_Balloc>
    d386:	ldr.w	r3, [r8, #16]
    d38a:	ldr	r6, [r7, #16]
    d38c:	str.w	r9, [r0, #12]
    d390:	add.w	ip, r4, r3, lsl #2
    d394:	mov	lr, r4
    d396:	add.w	r7, r5, r6, lsl #2
    d39a:	add.w	r4, r0, #20
    d39e:	movs	r3, #0
    d3a0:	ldr.w	r1, [lr], #4
    d3a4:	ldr.w	r8, [r5], #4
    d3a8:	uxth	r2, r1
    d3aa:	uxtah	r3, r3, r8
    d3ae:	lsrs	r1, r1, #16
    d3b0:	subs	r2, r3, r2
    d3b2:	rsb	r3, r1, r8, lsr #16
    d3b6:	add.w	r3, r3, r2, asr #16
    d3ba:	uxth	r2, r2
    d3bc:	orr.w	r2, r2, r3, lsl #16
    d3c0:	cmp	ip, lr
    d3c2:	str.w	r2, [r4], #4
    d3c6:	mov.w	r3, r3, asr #16
    d3ca:	bhi.n	d3a0 <__mdiff+0x70>
    d3cc:	cmp	r7, r5
    d3ce:	bls.n	d400 <__mdiff+0xd0>
    d3d0:	mov	ip, r4
    d3d2:	mov	r1, r5
    d3d4:	ldr.w	lr, [r1], #4
    d3d8:	uxtah	r2, r3, lr
    d3dc:	asrs	r3, r2, #16
    d3de:	add.w	r3, r3, lr, lsr #16
    d3e2:	uxth	r2, r2
    d3e4:	orr.w	r2, r2, r3, lsl #16
    d3e8:	cmp	r7, r1
    d3ea:	str.w	r2, [ip], #4
    d3ee:	mov.w	r3, r3, asr #16
    d3f2:	bhi.n	d3d4 <__mdiff+0xa4>
    d3f4:	mvns	r5, r5
    d3f6:	add	r5, r7
    d3f8:	bic.w	r5, r5, #3
    d3fc:	adds	r5, #4
    d3fe:	add	r4, r5
    d400:	subs	r4, #4
    d402:	cbnz	r2, d40e <__mdiff+0xde>
    d404:	ldr.w	r3, [r4, #-4]!
    d408:	subs	r6, #1
    d40a:	cmp	r3, #0
    d40c:	beq.n	d404 <__mdiff+0xd4>
    d40e:	str	r6, [r0, #16]
    d410:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d414:	movs	r1, #0
    d416:	bl	cedc <_Balloc>
    d41a:	movs	r2, #1
    d41c:	movs	r3, #0
    d41e:	str	r2, [r0, #16]
    d420:	str	r3, [r0, #20]
    d422:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d426:	mov	r4, r5
    d428:	mov.w	r9, #0
    d42c:	mov	r5, r2
    d42e:	b.n	d380 <__mdiff+0x50>
    d430:	mov	r3, r7
    d432:	add.w	r4, r7, #20
    d436:	add.w	r5, r8, #20
    d43a:	mov	r7, r8
    d43c:	mov.w	r9, #1
    d440:	mov	r8, r3
    d442:	b.n	d380 <__mdiff+0x50>

0000d444 <__d2b>:
    d444:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d448:	vmov	r6, r7, d0
    d44c:	sub	sp, #12
    d44e:	mov	r8, r1
    d450:	movs	r1, #1
    d452:	mov	r4, r7
    d454:	ubfx	r5, r7, #20, #11
    d458:	mov	r7, r2
    d45a:	bl	cedc <_Balloc>
    d45e:	ubfx	r4, r4, #0, #20
    d462:	mov	r9, r0
    d464:	cbz	r5, d46a <__d2b+0x26>
    d466:	orr.w	r4, r4, #1048576	; 0x100000
    d46a:	str	r4, [sp, #4]
    d46c:	cbz	r6, d4b6 <__d2b+0x72>
    d46e:	add	r0, sp, #8
    d470:	str.w	r6, [r0, #-8]!
    d474:	bl	cffc <__lo0bits>
    d478:	cmp	r0, #0
    d47a:	bne.n	d4e6 <__d2b+0xa2>
    d47c:	ldmia.w	sp, {r2, r3}
    d480:	str.w	r2, [r9, #20]
    d484:	cmp	r3, #0
    d486:	ite	eq
    d488:	moveq	r1, #1
    d48a:	movne	r1, #2
    d48c:	str.w	r3, [r9, #24]
    d490:	str.w	r1, [r9, #16]
    d494:	cbnz	r5, d4ce <__d2b+0x8a>
    d496:	add.w	r3, r9, r1, lsl #2
    d49a:	subw	r0, r0, #1074	; 0x432
    d49e:	str.w	r0, [r8]
    d4a2:	ldr	r0, [r3, #16]
    d4a4:	bl	cfbc <__hi0bits>
    d4a8:	rsb	r0, r0, r1, lsl #5
    d4ac:	str	r0, [r7, #0]
    d4ae:	mov	r0, r9
    d4b0:	add	sp, #12
    d4b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d4b6:	add	r0, sp, #4
    d4b8:	bl	cffc <__lo0bits>
    d4bc:	ldr	r3, [sp, #4]
    d4be:	str.w	r3, [r9, #20]
    d4c2:	movs	r1, #1
    d4c4:	adds	r0, #32
    d4c6:	str.w	r1, [r9, #16]
    d4ca:	cmp	r5, #0
    d4cc:	beq.n	d496 <__d2b+0x52>
    d4ce:	subw	r5, r5, #1075	; 0x433
    d4d2:	add	r5, r0
    d4d4:	rsb	r0, r0, #53	; 0x35
    d4d8:	str.w	r5, [r8]
    d4dc:	str	r0, [r7, #0]
    d4de:	mov	r0, r9
    d4e0:	add	sp, #12
    d4e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d4e6:	ldmia.w	sp, {r2, r3}
    d4ea:	rsb	r1, r0, #32
    d4ee:	lsl.w	r1, r3, r1
    d4f2:	orrs	r2, r1
    d4f4:	lsrs	r3, r0
    d4f6:	str	r3, [sp, #4]
    d4f8:	str.w	r2, [r9, #20]
    d4fc:	b.n	d484 <__d2b+0x40>
    d4fe:	nop

0000d500 <_vasnprintf_r>:
    d500:	push	{r4, r5, r6, lr}
    d502:	mov	r5, r2
    d504:	sub	sp, #104	; 0x68
    d506:	ldr	r4, [r2, #0]
    d508:	cbz	r1, d50e <_vasnprintf_r+0xe>
    d50a:	cmp	r4, #0
    d50c:	bne.n	d544 <_vasnprintf_r+0x44>
    d50e:	movs	r4, #0
    d510:	mov.w	r2, #648	; 0x288
    d514:	strh.w	r2, [sp, #12]
    d518:	str	r4, [sp, #0]
    d51a:	str	r4, [sp, #16]
    d51c:	mov	r2, r3
    d51e:	movw	r6, #65535	; 0xffff
    d522:	ldr	r3, [sp, #120]	; 0x78
    d524:	str	r4, [sp, #8]
    d526:	mov	r1, sp
    d528:	str	r4, [sp, #20]
    d52a:	strh.w	r6, [sp, #14]
    d52e:	bl	e520 <_svfprintf_r>
    d532:	cmp	r0, #0
    d534:	blt.n	d55a <_vasnprintf_r+0x5a>
    d536:	ldr	r3, [sp, #0]
    d538:	str	r0, [r5, #0]
    d53a:	movs	r2, #0
    d53c:	strb	r2, [r3, #0]
    d53e:	ldr	r0, [sp, #16]
    d540:	add	sp, #104	; 0x68
    d542:	pop	{r4, r5, r6, pc}
    d544:	mov.w	r2, #1544	; 0x608
    d548:	str	r1, [sp, #0]
    d54a:	str	r1, [sp, #16]
    d54c:	strh.w	r2, [sp, #12]
    d550:	bge.n	d51c <_vasnprintf_r+0x1c>
    d552:	movs	r3, #139	; 0x8b
    d554:	str	r3, [r0, #0]
    d556:	movs	r0, #0
    d558:	b.n	d540 <_vasnprintf_r+0x40>
    d55a:	movs	r0, #0
    d55c:	b.n	d540 <_vasnprintf_r+0x40>
    d55e:	nop

0000d560 <_calloc_r>:
    d560:	push	{r4, lr}
    d562:	mul.w	r1, r2, r1
    d566:	bl	bc0c <_malloc_r>
    d56a:	mov	r4, r0
    d56c:	cbz	r0, d5a6 <_calloc_r+0x46>
    d56e:	ldr.w	r2, [r0, #-4]
    d572:	bic.w	r2, r2, #3
    d576:	subs	r2, #4
    d578:	cmp	r2, #36	; 0x24
    d57a:	bhi.n	d5ae <_calloc_r+0x4e>
    d57c:	cmp	r2, #19
    d57e:	bls.n	d5aa <_calloc_r+0x4a>
    d580:	movs	r3, #0
    d582:	cmp	r2, #27
    d584:	str	r3, [r0, #0]
    d586:	str	r3, [r0, #4]
    d588:	bls.n	d5b8 <_calloc_r+0x58>
    d58a:	cmp	r2, #36	; 0x24
    d58c:	str	r3, [r0, #8]
    d58e:	str	r3, [r0, #12]
    d590:	iteee	ne
    d592:	addne.w	r2, r0, #16
    d596:	streq	r3, [r0, #16]
    d598:	streq	r3, [r0, #20]
    d59a:	addeq.w	r2, r0, #24
    d59e:	movs	r3, #0
    d5a0:	str	r3, [r2, #0]
    d5a2:	str	r3, [r2, #4]
    d5a4:	str	r3, [r2, #8]
    d5a6:	mov	r0, r4
    d5a8:	pop	{r4, pc}
    d5aa:	mov	r2, r0
    d5ac:	b.n	d59e <_calloc_r+0x3e>
    d5ae:	movs	r1, #0
    d5b0:	bl	c37c <memset>
    d5b4:	mov	r0, r4
    d5b6:	pop	{r4, pc}
    d5b8:	add.w	r2, r0, #8
    d5bc:	b.n	d59e <_calloc_r+0x3e>
    d5be:	nop

0000d5c0 <quorem>:
    d5c0:	ldr	r2, [r0, #16]
    d5c2:	ldr	r3, [r1, #16]
    d5c4:	cmp	r3, r2
    d5c6:	bgt.w	d6e4 <quorem+0x124>
    d5ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5ce:	add.w	r8, r3, #4294967295
    d5d2:	add.w	r7, r1, #20
    d5d6:	add.w	fp, r0, #20
    d5da:	ldr.w	r2, [r7, r8, lsl #2]
    d5de:	ldr.w	r3, [fp, r8, lsl #2]
    d5e2:	mov.w	r4, r8, lsl #2
    d5e6:	sub	sp, #12
    d5e8:	adds	r2, #1
    d5ea:	udiv	r9, r3, r2
    d5ee:	add.w	r3, fp, r4
    d5f2:	str	r4, [sp, #0]
    d5f4:	add.w	sl, r7, r4
    d5f8:	str	r3, [sp, #4]
    d5fa:	cmp.w	r9, #0
    d5fe:	beq.n	d674 <quorem+0xb4>
    d600:	movs	r5, #0
    d602:	mov	ip, r7
    d604:	mov	lr, fp
    d606:	mov	r3, r5
    d608:	ldr.w	r6, [ip], #4
    d60c:	ldr.w	r2, [lr]
    d610:	uxth	r4, r6
    d612:	mla	r5, r9, r4, r5
    d616:	lsrs	r6, r6, #16
    d618:	lsrs	r4, r5, #16
    d61a:	mla	r4, r9, r6, r4
    d61e:	uxth	r5, r5
    d620:	subs	r3, r3, r5
    d622:	uxth	r6, r4
    d624:	uxtah	r3, r3, r2
    d628:	rsb	r6, r6, r2, lsr #16
    d62c:	add.w	r6, r6, r3, asr #16
    d630:	uxth	r3, r3
    d632:	orr.w	r3, r3, r6, lsl #16
    d636:	cmp	sl, ip
    d638:	str.w	r3, [lr], #4
    d63c:	mov.w	r5, r4, lsr #16
    d640:	mov.w	r3, r6, asr #16
    d644:	bcs.n	d608 <quorem+0x48>
    d646:	ldr	r3, [sp, #0]
    d648:	ldr.w	r3, [fp, r3]
    d64c:	cbnz	r3, d674 <quorem+0xb4>
    d64e:	ldr	r4, [sp, #4]
    d650:	subs	r3, r4, #4
    d652:	cmp	fp, r3
    d654:	bcs.n	d670 <quorem+0xb0>
    d656:	ldr.w	r3, [r4, #-4]
    d65a:	cbnz	r3, d670 <quorem+0xb0>
    d65c:	sub.w	r3, r4, #8
    d660:	b.n	d668 <quorem+0xa8>
    d662:	ldr	r2, [r3, #0]
    d664:	subs	r3, #4
    d666:	cbnz	r2, d670 <quorem+0xb0>
    d668:	cmp	fp, r3
    d66a:	add.w	r8, r8, #4294967295
    d66e:	bcc.n	d662 <quorem+0xa2>
    d670:	str.w	r8, [r0, #16]
    d674:	mov	r4, r0
    d676:	bl	d2ec <__mcmp>
    d67a:	cmp	r0, #0
    d67c:	blt.n	d6dc <quorem+0x11c>
    d67e:	add.w	r9, r9, #1
    d682:	mov	r5, fp
    d684:	movs	r3, #0
    d686:	ldr.w	r1, [r7], #4
    d68a:	ldr	r0, [r5, #0]
    d68c:	uxth	r2, r1
    d68e:	subs	r2, r3, r2
    d690:	lsrs	r1, r1, #16
    d692:	uxtah	r2, r2, r0
    d696:	rsb	r3, r1, r0, lsr #16
    d69a:	add.w	r3, r3, r2, asr #16
    d69e:	uxth	r1, r2
    d6a0:	orr.w	r1, r1, r3, lsl #16
    d6a4:	cmp	sl, r7
    d6a6:	str.w	r1, [r5], #4
    d6aa:	mov.w	r3, r3, asr #16
    d6ae:	bcs.n	d686 <quorem+0xc6>
    d6b0:	ldr.w	r2, [fp, r8, lsl #2]
    d6b4:	add.w	r3, fp, r8, lsl #2
    d6b8:	cbnz	r2, d6dc <quorem+0x11c>
    d6ba:	subs	r2, r3, #4
    d6bc:	cmp	fp, r2
    d6be:	bcs.n	d6d8 <quorem+0x118>
    d6c0:	ldr.w	r2, [r3, #-4]
    d6c4:	cbnz	r2, d6d8 <quorem+0x118>
    d6c6:	subs	r3, #8
    d6c8:	b.n	d6d0 <quorem+0x110>
    d6ca:	ldr	r2, [r3, #0]
    d6cc:	subs	r3, #4
    d6ce:	cbnz	r2, d6d8 <quorem+0x118>
    d6d0:	cmp	fp, r3
    d6d2:	add.w	r8, r8, #4294967295
    d6d6:	bcc.n	d6ca <quorem+0x10a>
    d6d8:	str.w	r8, [r4, #16]
    d6dc:	mov	r0, r9
    d6de:	add	sp, #12
    d6e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6e4:	movs	r0, #0
    d6e6:	bx	lr

0000d6e8 <_dtoa_r>:
    d6e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6ec:	vmov	r6, r7, d0
    d6f0:	sub	sp, #108	; 0x6c
    d6f2:	ldr	r4, [r0, #64]	; 0x40
    d6f4:	ldr	r5, [sp, #144]	; 0x90
    d6f6:	str	r1, [sp, #0]
    d6f8:	mov	r9, r0
    d6fa:	str	r2, [sp, #20]
    d6fc:	str	r3, [sp, #12]
    d6fe:	vmov	sl, s0
    d702:	mov	fp, r7
    d704:	cbz	r4, d71c <_dtoa_r+0x34>
    d706:	ldr	r2, [r0, #68]	; 0x44
    d708:	str	r2, [r4, #4]
    d70a:	movs	r3, #1
    d70c:	lsls	r3, r2
    d70e:	str	r3, [r4, #8]
    d710:	mov	r1, r4
    d712:	bl	cf28 <_Bfree>
    d716:	movs	r3, #0
    d718:	str.w	r3, [r9, #64]	; 0x40
    d71c:	cmp.w	fp, #0
    d720:	mov	r4, fp
    d722:	blt.n	d78e <_dtoa_r+0xa6>
    d724:	movs	r3, #0
    d726:	str	r3, [r5, #0]
    d728:	ldr	r3, [pc, #644]	; (d9b0 <_dtoa_r+0x2c8>)
    d72a:	mov	r2, r3
    d72c:	ands	r3, r4
    d72e:	cmp	r3, r2
    d730:	beq.n	d760 <_dtoa_r+0x78>
    d732:	movs	r2, #0
    d734:	movs	r3, #0
    d736:	mov	r0, sl
    d738:	mov	r1, fp
    d73a:	bl	b78c <__aeabi_dcmpeq>
    d73e:	mov	r6, sl
    d740:	mov	r7, fp
    d742:	mov	r8, r0
    d744:	cbz	r0, d79a <_dtoa_r+0xb2>
    d746:	ldr	r2, [sp, #12]
    d748:	movs	r3, #1
    d74a:	str	r3, [r2, #0]
    d74c:	ldr	r3, [sp, #148]	; 0x94
    d74e:	cmp	r3, #0
    d750:	beq.w	d8d0 <_dtoa_r+0x1e8>
    d754:	ldr	r0, [pc, #604]	; (d9b4 <_dtoa_r+0x2cc>)
    d756:	str	r0, [r3, #0]
    d758:	subs	r0, #1
    d75a:	add	sp, #108	; 0x6c
    d75c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d760:	ldr	r2, [sp, #12]
    d762:	movw	r3, #9999	; 0x270f
    d766:	str	r3, [r2, #0]
    d768:	cmp.w	sl, #0
    d76c:	beq.w	d8a4 <_dtoa_r+0x1bc>
    d770:	ldr	r0, [pc, #580]	; (d9b8 <_dtoa_r+0x2d0>)
    d772:	ldr	r3, [sp, #148]	; 0x94
    d774:	cmp	r3, #0
    d776:	beq.n	d75a <_dtoa_r+0x72>
    d778:	ldrb	r3, [r0, #3]
    d77a:	cmp	r3, #0
    d77c:	beq.w	d8d4 <_dtoa_r+0x1ec>
    d780:	add.w	r3, r0, #8
    d784:	ldr	r2, [sp, #148]	; 0x94
    d786:	str	r3, [r2, #0]
    d788:	add	sp, #108	; 0x6c
    d78a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d78e:	movs	r3, #1
    d790:	bic.w	r4, fp, #2147483648	; 0x80000000
    d794:	str	r3, [r5, #0]
    d796:	mov	fp, r4
    d798:	b.n	d728 <_dtoa_r+0x40>
    d79a:	add	r2, sp, #96	; 0x60
    d79c:	add	r1, sp, #100	; 0x64
    d79e:	vmov	d0, r6, r7
    d7a2:	mov	r0, r9
    d7a4:	bl	d444 <__d2b>
    d7a8:	lsrs	r5, r4, #20
    d7aa:	str	r0, [sp, #40]	; 0x28
    d7ac:	bne.w	d8b6 <_dtoa_r+0x1ce>
    d7b0:	ldr	r5, [sp, #96]	; 0x60
    d7b2:	ldr	r6, [sp, #100]	; 0x64
    d7b4:	add	r6, r5
    d7b6:	addw	r3, r6, #1074	; 0x432
    d7ba:	cmp	r3, #32
    d7bc:	ble.w	dcd0 <_dtoa_r+0x5e8>
    d7c0:	rsb	r3, r3, #64	; 0x40
    d7c4:	addw	r0, r6, #1042	; 0x412
    d7c8:	lsls	r4, r3
    d7ca:	lsr.w	r0, sl, r0
    d7ce:	orrs	r0, r4
    d7d0:	bl	b1d0 <__aeabi_ui2d>
    d7d4:	movs	r3, #1
    d7d6:	subs	r4, r6, #1
    d7d8:	sub.w	r1, r1, #32505856	; 0x1f00000
    d7dc:	str	r3, [sp, #60]	; 0x3c
    d7de:	movs	r2, #0
    d7e0:	ldr	r3, [pc, #472]	; (d9bc <_dtoa_r+0x2d4>)
    d7e2:	bl	af54 <__aeabi_dsub>
    d7e6:	add	r3, pc, #432	; (adr r3, d998 <_dtoa_r+0x2b0>)
    d7e8:	ldrd	r2, r3, [r3]
    d7ec:	bl	b2bc <__aeabi_dmul>
    d7f0:	add	r3, pc, #428	; (adr r3, d9a0 <_dtoa_r+0x2b8>)
    d7f2:	ldrd	r2, r3, [r3]
    d7f6:	bl	af58 <__adddf3>
    d7fa:	mov	r6, r0
    d7fc:	mov	r0, r4
    d7fe:	mov	r7, r1
    d800:	bl	b1f0 <__aeabi_i2d>
    d804:	add	r3, pc, #416	; (adr r3, d9a8 <_dtoa_r+0x2c0>)
    d806:	ldrd	r2, r3, [r3]
    d80a:	bl	b2bc <__aeabi_dmul>
    d80e:	mov	r2, r0
    d810:	mov	r3, r1
    d812:	mov	r0, r6
    d814:	mov	r1, r7
    d816:	bl	af58 <__adddf3>
    d81a:	mov	r6, r0
    d81c:	mov	r7, r1
    d81e:	bl	b81c <__aeabi_d2iz>
    d822:	movs	r2, #0
    d824:	str	r0, [sp, #16]
    d826:	movs	r3, #0
    d828:	mov	r0, r6
    d82a:	mov	r1, r7
    d82c:	bl	b7a0 <__aeabi_dcmplt>
    d830:	cmp	r0, #0
    d832:	bne.w	dc86 <_dtoa_r+0x59e>
    d836:	ldr	r6, [sp, #16]
    d838:	cmp	r6, #22
    d83a:	bhi.w	dc80 <_dtoa_r+0x598>
    d83e:	ldr	r3, [pc, #384]	; (d9c0 <_dtoa_r+0x2d8>)
    d840:	add.w	r3, r3, r6, lsl #3
    d844:	ldrd	r0, r1, [r3]
    d848:	mov	r2, sl
    d84a:	mov	r3, fp
    d84c:	bl	b7dc <__aeabi_dcmpgt>
    d850:	cmp	r0, #0
    d852:	beq.w	dcda <_dtoa_r+0x5f2>
    d856:	subs	r3, r6, #1
    d858:	str	r3, [sp, #16]
    d85a:	movs	r3, #0
    d85c:	str	r3, [sp, #52]	; 0x34
    d85e:	subs	r5, r5, r4
    d860:	subs.w	r8, r5, #1
    d864:	bmi.w	dcbc <_dtoa_r+0x5d4>
    d868:	movs	r3, #0
    d86a:	str	r3, [sp, #28]
    d86c:	ldr	r3, [sp, #16]
    d86e:	cmp	r3, #0
    d870:	blt.w	dcaa <_dtoa_r+0x5c2>
    d874:	add	r8, r3
    d876:	str	r3, [sp, #48]	; 0x30
    d878:	movs	r3, #0
    d87a:	str	r3, [sp, #24]
    d87c:	ldr	r3, [sp, #0]
    d87e:	cmp	r3, #9
    d880:	bhi.n	d8d8 <_dtoa_r+0x1f0>
    d882:	cmp	r3, #5
    d884:	ble.w	e510 <_dtoa_r+0xe28>
    d888:	subs	r3, #4
    d88a:	str	r3, [sp, #0]
    d88c:	movs	r6, #0
    d88e:	ldr	r3, [sp, #0]
    d890:	subs	r3, #2
    d892:	cmp	r3, #3
    d894:	bhi.w	e4de <_dtoa_r+0xdf6>
    d898:	tbh	[pc, r3, lsl #1]
    d89c:	.word	0x0224032b
    d8a0:	.word	0x04500336
    d8a4:	ldr	r3, [pc, #272]	; (d9b8 <_dtoa_r+0x2d0>)
    d8a6:	ldr	r2, [pc, #284]	; (d9c4 <_dtoa_r+0x2dc>)
    d8a8:	ubfx	r0, r4, #0, #20
    d8ac:	cmp	r0, #0
    d8ae:	ite	ne
    d8b0:	movne	r0, r3
    d8b2:	moveq	r0, r2
    d8b4:	b.n	d772 <_dtoa_r+0x8a>
    d8b6:	ubfx	r3, fp, #0, #20
    d8ba:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    d8be:	subw	r4, r5, #1023	; 0x3ff
    d8c2:	mov	r0, sl
    d8c4:	str.w	r8, [sp, #60]	; 0x3c
    d8c8:	orr.w	r1, r1, #3145728	; 0x300000
    d8cc:	ldr	r5, [sp, #96]	; 0x60
    d8ce:	b.n	d7de <_dtoa_r+0xf6>
    d8d0:	ldr	r0, [pc, #244]	; (d9c8 <_dtoa_r+0x2e0>)
    d8d2:	b.n	d75a <_dtoa_r+0x72>
    d8d4:	adds	r3, r0, #3
    d8d6:	b.n	d784 <_dtoa_r+0x9c>
    d8d8:	movs	r1, #0
    d8da:	str.w	r1, [r9, #68]	; 0x44
    d8de:	mov	r0, r9
    d8e0:	mov	r4, r1
    d8e2:	str	r1, [sp, #0]
    d8e4:	bl	cedc <_Balloc>
    d8e8:	mov.w	r3, #4294967295
    d8ec:	str	r3, [sp, #32]
    d8ee:	str	r3, [sp, #56]	; 0x38
    d8f0:	movs	r3, #1
    d8f2:	str	r0, [sp, #36]	; 0x24
    d8f4:	str.w	r0, [r9, #64]	; 0x40
    d8f8:	str	r4, [sp, #20]
    d8fa:	str	r3, [sp, #44]	; 0x2c
    d8fc:	ldr	r3, [sp, #100]	; 0x64
    d8fe:	cmp	r3, #0
    d900:	blt.w	daa4 <_dtoa_r+0x3bc>
    d904:	ldr	r2, [sp, #16]
    d906:	cmp	r2, #14
    d908:	bgt.w	daa4 <_dtoa_r+0x3bc>
    d90c:	ldr	r3, [pc, #176]	; (d9c0 <_dtoa_r+0x2d8>)
    d90e:	add.w	r3, r3, r2, lsl #3
    d912:	vldr	d7, [r3]
    d916:	ldr	r3, [sp, #20]
    d918:	cmp	r3, #0
    d91a:	vstr	d7, [sp]
    d91e:	blt.w	df1e <_dtoa_r+0x836>
    d922:	mov	r6, sl
    d924:	mov	r7, fp
    d926:	ldrd	sl, fp, [sp]
    d92a:	mov	r0, r6
    d92c:	mov	r2, sl
    d92e:	mov	r3, fp
    d930:	mov	r1, r7
    d932:	bl	b510 <__aeabi_ddiv>
    d936:	bl	b81c <__aeabi_d2iz>
    d93a:	mov	r4, r0
    d93c:	bl	b1f0 <__aeabi_i2d>
    d940:	mov	r2, sl
    d942:	mov	r3, fp
    d944:	bl	b2bc <__aeabi_dmul>
    d948:	mov	r3, r1
    d94a:	mov	r2, r0
    d94c:	mov	r1, r7
    d94e:	mov	r0, r6
    d950:	bl	af54 <__aeabi_dsub>
    d954:	ldr	r5, [sp, #36]	; 0x24
    d956:	add.w	r3, r4, #48	; 0x30
    d95a:	strb	r3, [r5, #0]
    d95c:	ldr	r3, [sp, #32]
    d95e:	cmp	r3, #1
    d960:	mov	r6, r0
    d962:	mov	r7, r1
    d964:	add.w	r5, r5, #1
    d968:	beq.n	da2e <_dtoa_r+0x346>
    d96a:	movs	r2, #0
    d96c:	ldr	r3, [pc, #92]	; (d9cc <_dtoa_r+0x2e4>)
    d96e:	bl	b2bc <__aeabi_dmul>
    d972:	movs	r2, #0
    d974:	movs	r3, #0
    d976:	mov	r6, r0
    d978:	mov	r7, r1
    d97a:	bl	b78c <__aeabi_dcmpeq>
    d97e:	cmp	r0, #0
    d980:	bne.n	da7e <_dtoa_r+0x396>
    d982:	str.w	r9, [sp, #20]
    d986:	ldr.w	sl, [sp, #32]
    d98a:	ldr.w	fp, [sp, #36]	; 0x24
    d98e:	ldrd	r8, r9, [sp]
    d992:	b.n	d9e6 <_dtoa_r+0x2fe>
    d994:	nop.w
    d998:	.word	0x636f4361
    d99c:	.word	0x3fd287a7
    d9a0:	.word	0x8b60c8b3
    d9a4:	.word	0x3fc68a28
    d9a8:	.word	0x509f79fb
    d9ac:	.word	0x3fd34413
    d9b0:	.word	0x7ff00000
    d9b4:	.word	0x000105fd
    d9b8:	.word	0x000105f8
    d9bc:	.word	0x3ff80000
    d9c0:	.word	0x000104f0
    d9c4:	.word	0x000105ec
    d9c8:	.word	0x000105fc
    d9cc:	.word	0x40240000
    d9d0:	bl	b2bc <__aeabi_dmul>
    d9d4:	movs	r2, #0
    d9d6:	movs	r3, #0
    d9d8:	mov	r6, r0
    d9da:	mov	r7, r1
    d9dc:	bl	b78c <__aeabi_dcmpeq>
    d9e0:	cmp	r0, #0
    d9e2:	bne.w	e142 <_dtoa_r+0xa5a>
    d9e6:	mov	r2, r8
    d9e8:	mov	r3, r9
    d9ea:	mov	r0, r6
    d9ec:	mov	r1, r7
    d9ee:	bl	b510 <__aeabi_ddiv>
    d9f2:	bl	b81c <__aeabi_d2iz>
    d9f6:	mov	r4, r0
    d9f8:	bl	b1f0 <__aeabi_i2d>
    d9fc:	mov	r2, r8
    d9fe:	mov	r3, r9
    da00:	bl	b2bc <__aeabi_dmul>
    da04:	mov	r2, r0
    da06:	mov	r3, r1
    da08:	mov	r0, r6
    da0a:	mov	r1, r7
    da0c:	bl	af54 <__aeabi_dsub>
    da10:	add.w	lr, r4, #48	; 0x30
    da14:	strb.w	lr, [r5], #1
    da18:	rsb	lr, fp, r5
    da1c:	cmp	lr, sl
    da1e:	mov	r6, r0
    da20:	mov	r7, r1
    da22:	mov.w	r2, #0
    da26:	ldr	r3, [pc, #696]	; (dce0 <_dtoa_r+0x5f8>)
    da28:	bne.n	d9d0 <_dtoa_r+0x2e8>
    da2a:	ldr.w	r9, [sp, #20]
    da2e:	mov	r2, r6
    da30:	mov	r3, r7
    da32:	mov	r0, r6
    da34:	mov	r1, r7
    da36:	bl	af58 <__adddf3>
    da3a:	mov	r6, r0
    da3c:	mov	r7, r1
    da3e:	mov	r2, r0
    da40:	mov	r3, r1
    da42:	ldrd	r0, r1, [sp]
    da46:	bl	b7a0 <__aeabi_dcmplt>
    da4a:	cbnz	r0, da5e <_dtoa_r+0x376>
    da4c:	mov	r2, r6
    da4e:	mov	r3, r7
    da50:	ldrd	r0, r1, [sp]
    da54:	bl	b78c <__aeabi_dcmpeq>
    da58:	cbz	r0, da7e <_dtoa_r+0x396>
    da5a:	lsls	r3, r4, #31
    da5c:	bpl.n	da7e <_dtoa_r+0x396>
    da5e:	ldrb.w	r4, [r5, #-1]
    da62:	ldr	r2, [sp, #36]	; 0x24
    da64:	subs	r3, r5, #1
    da66:	b.n	da72 <_dtoa_r+0x38a>
    da68:	cmp	r2, r3
    da6a:	beq.w	e266 <_dtoa_r+0xb7e>
    da6e:	ldrb.w	r4, [r3, #-1]!
    da72:	cmp	r4, #57	; 0x39
    da74:	add.w	r5, r3, #1
    da78:	beq.n	da68 <_dtoa_r+0x380>
    da7a:	adds	r4, #1
    da7c:	strb	r4, [r3, #0]
    da7e:	ldr	r1, [sp, #40]	; 0x28
    da80:	mov	r0, r9
    da82:	bl	cf28 <_Bfree>
    da86:	movs	r2, #0
    da88:	ldr	r3, [sp, #16]
    da8a:	strb	r2, [r5, #0]
    da8c:	ldr	r2, [sp, #12]
    da8e:	adds	r3, #1
    da90:	str	r3, [r2, #0]
    da92:	ldr	r3, [sp, #148]	; 0x94
    da94:	cmp	r3, #0
    da96:	beq.w	e1d0 <_dtoa_r+0xae8>
    da9a:	ldr	r0, [sp, #36]	; 0x24
    da9c:	str	r5, [r3, #0]
    da9e:	add	sp, #108	; 0x6c
    daa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    daa4:	ldr	r2, [sp, #44]	; 0x2c
    daa6:	cmp	r2, #0
    daa8:	beq.w	dcc8 <_dtoa_r+0x5e0>
    daac:	ldr	r2, [sp, #0]
    daae:	cmp	r2, #1
    dab0:	ble.w	df62 <_dtoa_r+0x87a>
    dab4:	ldr	r3, [sp, #32]
    dab6:	ldr	r2, [sp, #24]
    dab8:	subs	r7, r3, #1
    daba:	cmp	r2, r7
    dabc:	blt.w	e1d6 <_dtoa_r+0xaee>
    dac0:	subs	r7, r2, r7
    dac2:	ldr	r3, [sp, #32]
    dac4:	cmp	r3, #0
    dac6:	blt.w	e3ca <_dtoa_r+0xce2>
    daca:	ldr	r5, [sp, #28]
    dacc:	ldr	r3, [sp, #32]
    dace:	ldr	r2, [sp, #28]
    dad0:	movs	r1, #1
    dad2:	add	r2, r3
    dad4:	mov	r0, r9
    dad6:	str	r2, [sp, #28]
    dad8:	add	r8, r3
    dada:	bl	d058 <__i2b>
    dade:	mov	r6, r0
    dae0:	cbz	r5, dafc <_dtoa_r+0x414>
    dae2:	cmp.w	r8, #0
    dae6:	ble.n	dafc <_dtoa_r+0x414>
    dae8:	cmp	r5, r8
    daea:	ldr	r2, [sp, #28]
    daec:	mov	r3, r5
    daee:	it	ge
    daf0:	movge	r3, r8
    daf2:	subs	r2, r2, r3
    daf4:	str	r2, [sp, #28]
    daf6:	subs	r5, r5, r3
    daf8:	rsb	r8, r3, r8
    dafc:	ldr	r3, [sp, #24]
    dafe:	cmp	r3, #0
    db00:	ble.w	e0ee <_dtoa_r+0xa06>
    db04:	ldr	r2, [sp, #44]	; 0x2c
    db06:	cmp	r2, #0
    db08:	beq.w	df10 <_dtoa_r+0x828>
    db0c:	cmp	r7, #0
    db0e:	beq.w	df10 <_dtoa_r+0x828>
    db12:	mov	r1, r6
    db14:	mov	r2, r7
    db16:	mov	r0, r9
    db18:	bl	d19c <__pow5mult>
    db1c:	ldr	r2, [sp, #40]	; 0x28
    db1e:	mov	r1, r0
    db20:	mov	r6, r0
    db22:	mov	r0, r9
    db24:	bl	d06c <__multiply>
    db28:	ldr	r1, [sp, #40]	; 0x28
    db2a:	mov	r4, r0
    db2c:	mov	r0, r9
    db2e:	bl	cf28 <_Bfree>
    db32:	ldr	r3, [sp, #24]
    db34:	subs	r3, r3, r7
    db36:	str	r3, [sp, #24]
    db38:	bne.w	df0e <_dtoa_r+0x826>
    db3c:	movs	r1, #1
    db3e:	mov	r0, r9
    db40:	bl	d058 <__i2b>
    db44:	ldr	r3, [sp, #48]	; 0x30
    db46:	str	r0, [sp, #24]
    db48:	cmp	r3, #0
    db4a:	beq.w	df78 <_dtoa_r+0x890>
    db4e:	mov	r1, r0
    db50:	mov	r2, r3
    db52:	mov	r0, r9
    db54:	bl	d19c <__pow5mult>
    db58:	ldr	r3, [sp, #0]
    db5a:	str	r0, [sp, #24]
    db5c:	cmp	r3, #1
    db5e:	ble.w	e148 <_dtoa_r+0xa60>
    db62:	movs	r7, #0
    db64:	ldr	r2, [sp, #24]
    db66:	ldr	r3, [r2, #16]
    db68:	add.w	r3, r2, r3, lsl #2
    db6c:	ldr	r0, [r3, #16]
    db6e:	bl	cfbc <__hi0bits>
    db72:	rsb	r0, r0, #32
    db76:	add	r0, r8
    db78:	ands.w	r0, r0, #31
    db7c:	beq.w	df74 <_dtoa_r+0x88c>
    db80:	rsb	r3, r0, #32
    db84:	cmp	r3, #4
    db86:	ble.w	e504 <_dtoa_r+0xe1c>
    db8a:	rsb	r0, r0, #28
    db8e:	ldr	r3, [sp, #28]
    db90:	add	r3, r0
    db92:	str	r3, [sp, #28]
    db94:	add	r5, r0
    db96:	add	r8, r0
    db98:	ldr	r3, [sp, #28]
    db9a:	cmp	r3, #0
    db9c:	ble.n	dbaa <_dtoa_r+0x4c2>
    db9e:	mov	r1, r4
    dba0:	mov	r2, r3
    dba2:	mov	r0, r9
    dba4:	bl	d23c <__lshift>
    dba8:	mov	r4, r0
    dbaa:	cmp.w	r8, #0
    dbae:	ble.n	dbbc <_dtoa_r+0x4d4>
    dbb0:	mov	r2, r8
    dbb2:	ldr	r1, [sp, #24]
    dbb4:	mov	r0, r9
    dbb6:	bl	d23c <__lshift>
    dbba:	str	r0, [sp, #24]
    dbbc:	ldr	r3, [sp, #52]	; 0x34
    dbbe:	cmp	r3, #0
    dbc0:	bne.w	e0b8 <_dtoa_r+0x9d0>
    dbc4:	ldr	r3, [sp, #32]
    dbc6:	cmp	r3, #0
    dbc8:	ble.w	e0f2 <_dtoa_r+0xa0a>
    dbcc:	ldr	r3, [sp, #44]	; 0x2c
    dbce:	cmp	r3, #0
    dbd0:	bne.w	dfbc <_dtoa_r+0x8d4>
    dbd4:	ldr.w	fp, [sp, #36]	; 0x24
    dbd8:	ldr	r7, [sp, #32]
    dbda:	ldr.w	r8, [sp, #24]
    dbde:	mov	r5, fp
    dbe0:	b.n	dbe8 <_dtoa_r+0x500>
    dbe2:	bl	cf3c <__multadd>
    dbe6:	mov	r4, r0
    dbe8:	mov	r1, r8
    dbea:	mov	r0, r4
    dbec:	bl	d5c0 <quorem>
    dbf0:	add.w	sl, r0, #48	; 0x30
    dbf4:	strb.w	sl, [r5], #1
    dbf8:	rsb	r3, fp, r5
    dbfc:	cmp	r3, r7
    dbfe:	mov.w	r2, #10
    dc02:	mov.w	r3, #0
    dc06:	mov	r1, r4
    dc08:	mov	r0, r9
    dc0a:	blt.n	dbe2 <_dtoa_r+0x4fa>
    dc0c:	ldr	r3, [sp, #36]	; 0x24
    dc0e:	ldr	r2, [sp, #32]
    dc10:	cmp	r2, #1
    dc12:	ite	ge
    dc14:	addge	r3, r3, r2
    dc16:	addlt	r3, #1
    dc18:	mov	r5, r3
    dc1a:	mov.w	fp, #0
    dc1e:	mov	r1, r4
    dc20:	movs	r2, #1
    dc22:	mov	r0, r9
    dc24:	bl	d23c <__lshift>
    dc28:	ldr	r1, [sp, #24]
    dc2a:	str	r0, [sp, #40]	; 0x28
    dc2c:	bl	d2ec <__mcmp>
    dc30:	cmp	r0, #0
    dc32:	ble.w	e240 <_dtoa_r+0xb58>
    dc36:	ldrb.w	r2, [r5, #-1]
    dc3a:	ldr	r1, [sp, #36]	; 0x24
    dc3c:	subs	r3, r5, #1
    dc3e:	b.n	dc4a <_dtoa_r+0x562>
    dc40:	cmp	r3, r1
    dc42:	beq.w	e12e <_dtoa_r+0xa46>
    dc46:	ldrb.w	r2, [r3, #-1]!
    dc4a:	cmp	r2, #57	; 0x39
    dc4c:	add.w	r5, r3, #1
    dc50:	beq.n	dc40 <_dtoa_r+0x558>
    dc52:	adds	r2, #1
    dc54:	strb	r2, [r3, #0]
    dc56:	ldr	r1, [sp, #24]
    dc58:	mov	r0, r9
    dc5a:	bl	cf28 <_Bfree>
    dc5e:	cmp	r6, #0
    dc60:	beq.w	da7e <_dtoa_r+0x396>
    dc64:	cmp.w	fp, #0
    dc68:	beq.n	dc76 <_dtoa_r+0x58e>
    dc6a:	cmp	fp, r6
    dc6c:	beq.n	dc76 <_dtoa_r+0x58e>
    dc6e:	mov	r1, fp
    dc70:	mov	r0, r9
    dc72:	bl	cf28 <_Bfree>
    dc76:	mov	r1, r6
    dc78:	mov	r0, r9
    dc7a:	bl	cf28 <_Bfree>
    dc7e:	b.n	da7e <_dtoa_r+0x396>
    dc80:	movs	r3, #1
    dc82:	str	r3, [sp, #52]	; 0x34
    dc84:	b.n	d85e <_dtoa_r+0x176>
    dc86:	ldr.w	r8, [sp, #16]
    dc8a:	mov	r0, r8
    dc8c:	bl	b1f0 <__aeabi_i2d>
    dc90:	mov	r2, r0
    dc92:	mov	r3, r1
    dc94:	mov	r0, r6
    dc96:	mov	r1, r7
    dc98:	bl	b78c <__aeabi_dcmpeq>
    dc9c:	cmp	r0, #0
    dc9e:	bne.w	d836 <_dtoa_r+0x14e>
    dca2:	add.w	r3, r8, #4294967295
    dca6:	str	r3, [sp, #16]
    dca8:	b.n	d836 <_dtoa_r+0x14e>
    dcaa:	ldr	r2, [sp, #28]
    dcac:	ldr	r3, [sp, #16]
    dcae:	subs	r2, r2, r3
    dcb0:	negs	r3, r3
    dcb2:	str	r3, [sp, #24]
    dcb4:	movs	r3, #0
    dcb6:	str	r2, [sp, #28]
    dcb8:	str	r3, [sp, #48]	; 0x30
    dcba:	b.n	d87c <_dtoa_r+0x194>
    dcbc:	rsb	r3, r8, #0
    dcc0:	str	r3, [sp, #28]
    dcc2:	mov.w	r8, #0
    dcc6:	b.n	d86c <_dtoa_r+0x184>
    dcc8:	ldr	r7, [sp, #24]
    dcca:	ldr	r5, [sp, #28]
    dccc:	ldr	r6, [sp, #44]	; 0x2c
    dcce:	b.n	dae0 <_dtoa_r+0x3f8>
    dcd0:	rsb	r4, r3, #32
    dcd4:	lsl.w	r0, sl, r4
    dcd8:	b.n	d7d0 <_dtoa_r+0xe8>
    dcda:	str	r0, [sp, #52]	; 0x34
    dcdc:	b.n	d85e <_dtoa_r+0x176>
    dcde:	nop
    dce0:	.word	0x40240000
    dce4:	movs	r3, #0
    dce6:	str	r3, [sp, #44]	; 0x2c
    dce8:	ldr	r3, [sp, #16]
    dcea:	ldr	r2, [sp, #20]
    dcec:	add	r3, r2
    dcee:	str	r3, [sp, #56]	; 0x38
    dcf0:	adds	r3, #1
    dcf2:	cmp	r3, #0
    dcf4:	str	r3, [sp, #32]
    dcf6:	ble.w	e1f4 <_dtoa_r+0xb0c>
    dcfa:	ldr	r4, [sp, #32]
    dcfc:	mov	r5, r4
    dcfe:	movs	r1, #0
    dd00:	cmp	r5, #23
    dd02:	str.w	r1, [r9, #68]	; 0x44
    dd06:	bls.n	dd20 <_dtoa_r+0x638>
    dd08:	movs	r2, #1
    dd0a:	movs	r3, #4
    dd0c:	lsls	r3, r3, #1
    dd0e:	add.w	r0, r3, #20
    dd12:	cmp	r0, r5
    dd14:	mov	r1, r2
    dd16:	add.w	r2, r2, #1
    dd1a:	bls.n	dd0c <_dtoa_r+0x624>
    dd1c:	str.w	r1, [r9, #68]	; 0x44
    dd20:	mov	r0, r9
    dd22:	bl	cedc <_Balloc>
    dd26:	cmp	r4, #14
    dd28:	str	r0, [sp, #36]	; 0x24
    dd2a:	str.w	r0, [r9, #64]	; 0x40
    dd2e:	bhi.w	d8fc <_dtoa_r+0x214>
    dd32:	cmp	r6, #0
    dd34:	beq.w	d8fc <_dtoa_r+0x214>
    dd38:	ldr	r1, [sp, #16]
    dd3a:	cmp	r1, #0
    dd3c:	strd	sl, fp, [sp, #64]	; 0x40
    dd40:	ble.w	e278 <_dtoa_r+0xb90>
    dd44:	ldr	r3, [pc, #576]	; (df88 <_dtoa_r+0x8a0>)
    dd46:	and.w	r2, r1, #15
    dd4a:	asrs	r6, r1, #4
    dd4c:	add.w	r3, r3, r2, lsl #3
    dd50:	lsls	r0, r6, #27
    dd52:	ldrd	r4, r5, [r3]
    dd56:	bpl.w	e1e6 <_dtoa_r+0xafe>
    dd5a:	ldr	r3, [pc, #560]	; (df8c <_dtoa_r+0x8a4>)
    dd5c:	mov	r0, sl
    dd5e:	mov	r1, fp
    dd60:	ldrd	r2, r3, [r3, #32]
    dd64:	bl	b510 <__aeabi_ddiv>
    dd68:	strd	r0, r1, [sp, #72]	; 0x48
    dd6c:	and.w	r6, r6, #15
    dd70:	mov.w	sl, #3
    dd74:	cbz	r6, dd98 <_dtoa_r+0x6b0>
    dd76:	ldr	r7, [pc, #532]	; (df8c <_dtoa_r+0x8a4>)
    dd78:	lsls	r1, r6, #31
    dd7a:	bpl.n	dd90 <_dtoa_r+0x6a8>
    dd7c:	mov	r0, r4
    dd7e:	mov	r1, r5
    dd80:	ldrd	r2, r3, [r7]
    dd84:	bl	b2bc <__aeabi_dmul>
    dd88:	add.w	sl, sl, #1
    dd8c:	mov	r4, r0
    dd8e:	mov	r5, r1
    dd90:	asrs	r6, r6, #1
    dd92:	add.w	r7, r7, #8
    dd96:	bne.n	dd78 <_dtoa_r+0x690>
    dd98:	mov	r2, r4
    dd9a:	mov	r3, r5
    dd9c:	ldrd	r0, r1, [sp, #72]	; 0x48
    dda0:	bl	b510 <__aeabi_ddiv>
    dda4:	mov	r6, r0
    dda6:	mov	r7, r1
    dda8:	ldr	r3, [sp, #52]	; 0x34
    ddaa:	cbz	r3, ddbe <_dtoa_r+0x6d6>
    ddac:	movs	r2, #0
    ddae:	ldr	r3, [pc, #480]	; (df90 <_dtoa_r+0x8a8>)
    ddb0:	mov	r0, r6
    ddb2:	mov	r1, r7
    ddb4:	bl	b7a0 <__aeabi_dcmplt>
    ddb8:	cmp	r0, #0
    ddba:	bne.w	e3f2 <_dtoa_r+0xd0a>
    ddbe:	mov	r0, sl
    ddc0:	bl	b1f0 <__aeabi_i2d>
    ddc4:	mov	r2, r6
    ddc6:	mov	r3, r7
    ddc8:	bl	b2bc <__aeabi_dmul>
    ddcc:	ldr	r3, [pc, #452]	; (df94 <_dtoa_r+0x8ac>)
    ddce:	movs	r2, #0
    ddd0:	bl	af58 <__adddf3>
    ddd4:	ldr	r3, [sp, #32]
    ddd6:	mov	r4, r0
    ddd8:	sub.w	r5, r1, #54525952	; 0x3400000
    dddc:	cmp	r3, #0
    ddde:	beq.w	e198 <_dtoa_r+0xab0>
    dde2:	ldr	r3, [sp, #16]
    dde4:	str	r3, [sp, #88]	; 0x58
    dde6:	ldr	r3, [sp, #32]
    dde8:	str	r3, [sp, #72]	; 0x48
    ddea:	ldr	r3, [sp, #44]	; 0x2c
    ddec:	cmp	r3, #0
    ddee:	beq.w	e31a <_dtoa_r+0xc32>
    ddf2:	ldr	r2, [sp, #72]	; 0x48
    ddf4:	ldr	r3, [pc, #400]	; (df88 <_dtoa_r+0x8a0>)
    ddf6:	ldr	r1, [pc, #416]	; (df98 <_dtoa_r+0x8b0>)
    ddf8:	add.w	r3, r3, r2, lsl #3
    ddfc:	ldrd	r2, r3, [r3, #-8]
    de00:	movs	r0, #0
    de02:	bl	b510 <__aeabi_ddiv>
    de06:	mov	r2, r4
    de08:	mov	r3, r5
    de0a:	bl	af54 <__aeabi_dsub>
    de0e:	mov	sl, r0
    de10:	mov	fp, r1
    de12:	mov	r0, r6
    de14:	mov	r1, r7
    de16:	bl	b81c <__aeabi_d2iz>
    de1a:	mov	r4, r0
    de1c:	bl	b1f0 <__aeabi_i2d>
    de20:	mov	r2, r0
    de22:	mov	r3, r1
    de24:	mov	r0, r6
    de26:	mov	r1, r7
    de28:	bl	af54 <__aeabi_dsub>
    de2c:	adds	r4, #48	; 0x30
    de2e:	ldr	r5, [sp, #36]	; 0x24
    de30:	uxtb	r4, r4
    de32:	mov	r6, r0
    de34:	mov	r7, r1
    de36:	strb	r4, [r5, #0]
    de38:	mov	r2, r0
    de3a:	mov	r3, r1
    de3c:	mov	r0, sl
    de3e:	mov	r1, fp
    de40:	adds	r5, #1
    de42:	bl	b7dc <__aeabi_dcmpgt>
    de46:	cmp	r0, #0
    de48:	bne.n	deec <_dtoa_r+0x804>
    de4a:	mov	r2, r6
    de4c:	mov	r3, r7
    de4e:	movs	r0, #0
    de50:	ldr	r1, [pc, #316]	; (df90 <_dtoa_r+0x8a8>)
    de52:	bl	af54 <__aeabi_dsub>
    de56:	mov	r2, r0
    de58:	mov	r3, r1
    de5a:	mov	r0, sl
    de5c:	mov	r1, fp
    de5e:	bl	b7dc <__aeabi_dcmpgt>
    de62:	cmp	r0, #0
    de64:	bne.w	e478 <_dtoa_r+0xd90>
    de68:	ldr	r2, [sp, #72]	; 0x48
    de6a:	cmp	r2, #1
    de6c:	ble.w	e25e <_dtoa_r+0xb76>
    de70:	ldr	r3, [sp, #72]	; 0x48
    de72:	ldr	r2, [sp, #36]	; 0x24
    de74:	str.w	r8, [sp, #72]	; 0x48
    de78:	add	r3, r2
    de7a:	mov	r8, r3
    de7c:	b.n	de9a <_dtoa_r+0x7b2>
    de7e:	movs	r0, #0
    de80:	ldr	r1, [pc, #268]	; (df90 <_dtoa_r+0x8a8>)
    de82:	bl	af54 <__aeabi_dsub>
    de86:	mov	r2, sl
    de88:	mov	r3, fp
    de8a:	bl	b7a0 <__aeabi_dcmplt>
    de8e:	cmp	r0, #0
    de90:	bne.w	e478 <_dtoa_r+0xd90>
    de94:	cmp	r5, r8
    de96:	beq.w	e25a <_dtoa_r+0xb72>
    de9a:	mov	r0, sl
    de9c:	mov	r1, fp
    de9e:	movs	r2, #0
    dea0:	ldr	r3, [pc, #248]	; (df9c <_dtoa_r+0x8b4>)
    dea2:	bl	b2bc <__aeabi_dmul>
    dea6:	movs	r2, #0
    dea8:	ldr	r3, [pc, #240]	; (df9c <_dtoa_r+0x8b4>)
    deaa:	mov	sl, r0
    deac:	mov	fp, r1
    deae:	mov	r0, r6
    deb0:	mov	r1, r7
    deb2:	bl	b2bc <__aeabi_dmul>
    deb6:	mov	r7, r1
    deb8:	mov	r6, r0
    deba:	bl	b81c <__aeabi_d2iz>
    debe:	mov	r4, r0
    dec0:	bl	b1f0 <__aeabi_i2d>
    dec4:	mov	r2, r0
    dec6:	mov	r3, r1
    dec8:	mov	r0, r6
    deca:	mov	r1, r7
    decc:	bl	af54 <__aeabi_dsub>
    ded0:	adds	r4, #48	; 0x30
    ded2:	uxtb	r4, r4
    ded4:	mov	r2, sl
    ded6:	mov	r3, fp
    ded8:	strb.w	r4, [r5], #1
    dedc:	mov	r6, r0
    dede:	mov	r7, r1
    dee0:	bl	b7a0 <__aeabi_dcmplt>
    dee4:	mov	r2, r6
    dee6:	mov	r3, r7
    dee8:	cmp	r0, #0
    deea:	beq.n	de7e <_dtoa_r+0x796>
    deec:	ldr	r3, [sp, #88]	; 0x58
    deee:	str	r3, [sp, #16]
    def0:	b.n	da7e <_dtoa_r+0x396>
    def2:	movs	r3, #0
    def4:	str	r3, [sp, #44]	; 0x2c
    def6:	ldr	r3, [sp, #20]
    def8:	cmp	r3, #0
    defa:	ble.w	e1fe <_dtoa_r+0xb16>
    defe:	mov	r5, r3
    df00:	mov	r4, r3
    df02:	str	r3, [sp, #56]	; 0x38
    df04:	str	r3, [sp, #32]
    df06:	b.n	dcfe <_dtoa_r+0x616>
    df08:	movs	r3, #1
    df0a:	str	r3, [sp, #44]	; 0x2c
    df0c:	b.n	def6 <_dtoa_r+0x80e>
    df0e:	str	r4, [sp, #40]	; 0x28
    df10:	ldr	r2, [sp, #24]
    df12:	ldr	r1, [sp, #40]	; 0x28
    df14:	mov	r0, r9
    df16:	bl	d19c <__pow5mult>
    df1a:	mov	r4, r0
    df1c:	b.n	db3c <_dtoa_r+0x454>
    df1e:	ldr	r3, [sp, #32]
    df20:	cmp	r3, #0
    df22:	bgt.w	d922 <_dtoa_r+0x23a>
    df26:	bne.w	e1c8 <_dtoa_r+0xae0>
    df2a:	movs	r2, #0
    df2c:	ldr	r3, [pc, #112]	; (dfa0 <_dtoa_r+0x8b8>)
    df2e:	ldrd	r0, r1, [sp]
    df32:	bl	b2bc <__aeabi_dmul>
    df36:	mov	r3, fp
    df38:	mov	r2, sl
    df3a:	bl	b7c8 <__aeabi_dcmpge>
    df3e:	ldr	r3, [sp, #32]
    df40:	str	r3, [sp, #24]
    df42:	mov	r6, r3
    df44:	cmp	r0, #0
    df46:	beq.w	e11e <_dtoa_r+0xa36>
    df4a:	ldr	r3, [sp, #20]
    df4c:	ldr	r5, [sp, #36]	; 0x24
    df4e:	mvns	r3, r3
    df50:	str	r3, [sp, #16]
    df52:	ldr	r1, [sp, #24]
    df54:	mov	r0, r9
    df56:	bl	cf28 <_Bfree>
    df5a:	cmp	r6, #0
    df5c:	beq.w	da7e <_dtoa_r+0x396>
    df60:	b.n	dc76 <_dtoa_r+0x58e>
    df62:	ldr	r2, [sp, #60]	; 0x3c
    df64:	cmp	r2, #0
    df66:	beq.w	e3da <_dtoa_r+0xcf2>
    df6a:	addw	r3, r3, #1075	; 0x433
    df6e:	ldr	r7, [sp, #24]
    df70:	ldr	r5, [sp, #28]
    df72:	b.n	dace <_dtoa_r+0x3e6>
    df74:	movs	r0, #28
    df76:	b.n	db8e <_dtoa_r+0x4a6>
    df78:	ldr	r3, [sp, #0]
    df7a:	cmp	r3, #1
    df7c:	ble.w	e480 <_dtoa_r+0xd98>
    df80:	ldr	r7, [sp, #48]	; 0x30
    df82:	movs	r0, #1
    df84:	b.n	db76 <_dtoa_r+0x48e>
    df86:	nop
    df88:	.word	0x000104f0
    df8c:	.word	0x000105b8
    df90:	.word	0x3ff00000
    df94:	.word	0x401c0000
    df98:	.word	0x3fe00000
    df9c:	.word	0x40240000
    dfa0:	.word	0x40140000
    dfa4:	mov	r1, r6
    dfa6:	movs	r3, #0
    dfa8:	movs	r2, #10
    dfaa:	mov	r0, r9
    dfac:	bl	cf3c <__multadd>
    dfb0:	ldr	r3, [sp, #56]	; 0x38
    dfb2:	cmp	r3, #0
    dfb4:	mov	r6, r0
    dfb6:	ble.w	e4d4 <_dtoa_r+0xdec>
    dfba:	str	r3, [sp, #32]
    dfbc:	cmp	r5, #0
    dfbe:	ble.n	dfcc <_dtoa_r+0x8e4>
    dfc0:	mov	r1, r6
    dfc2:	mov	r2, r5
    dfc4:	mov	r0, r9
    dfc6:	bl	d23c <__lshift>
    dfca:	mov	r6, r0
    dfcc:	cmp	r7, #0
    dfce:	bne.w	e2ca <_dtoa_r+0xbe2>
    dfd2:	mov	r8, r6
    dfd4:	ldr	r3, [sp, #32]
    dfd6:	ldr	r2, [sp, #36]	; 0x24
    dfd8:	subs	r3, #1
    dfda:	adds	r3, r2, r3
    dfdc:	str	r3, [sp, #32]
    dfde:	and.w	r3, sl, #1
    dfe2:	str	r3, [sp, #40]	; 0x28
    dfe4:	mov	r7, r2
    dfe6:	ldr.w	fp, [sp, #24]
    dfea:	mov	r0, r4
    dfec:	mov	r1, fp
    dfee:	bl	d5c0 <quorem>
    dff2:	mov	r1, r6
    dff4:	mov	r5, r0
    dff6:	mov	r0, r4
    dff8:	bl	d2ec <__mcmp>
    dffc:	mov	r2, r8
    dffe:	mov	r1, fp
    e000:	mov	sl, r0
    e002:	mov	r0, r9
    e004:	bl	d330 <__mdiff>
    e008:	ldr	r2, [r0, #12]
    e00a:	mov	fp, r0
    e00c:	add.w	r3, r5, #48	; 0x30
    e010:	cmp	r2, #0
    e012:	bne.n	e0a8 <_dtoa_r+0x9c0>
    e014:	mov	r1, r0
    e016:	mov	r0, r4
    e018:	str	r3, [sp, #28]
    e01a:	bl	d2ec <__mcmp>
    e01e:	mov	r1, fp
    e020:	str	r0, [sp, #20]
    e022:	mov	r0, r9
    e024:	bl	cf28 <_Bfree>
    e028:	ldr	r2, [sp, #20]
    e02a:	ldr	r3, [sp, #28]
    e02c:	cbnz	r2, e03a <_dtoa_r+0x952>
    e02e:	ldr	r1, [sp, #0]
    e030:	cbnz	r1, e03a <_dtoa_r+0x952>
    e032:	ldr	r1, [sp, #40]	; 0x28
    e034:	cmp	r1, #0
    e036:	beq.w	e4a4 <_dtoa_r+0xdbc>
    e03a:	cmp.w	sl, #0
    e03e:	blt.w	e208 <_dtoa_r+0xb20>
    e042:	bne.n	e050 <_dtoa_r+0x968>
    e044:	ldr	r1, [sp, #0]
    e046:	cbnz	r1, e050 <_dtoa_r+0x968>
    e048:	ldr	r1, [sp, #40]	; 0x28
    e04a:	cmp	r1, #0
    e04c:	beq.w	e208 <_dtoa_r+0xb20>
    e050:	cmp	r2, #0
    e052:	bgt.w	e2f2 <_dtoa_r+0xc0a>
    e056:	ldr	r2, [sp, #32]
    e058:	strb	r3, [r7, #0]
    e05a:	add.w	sl, r7, #1
    e05e:	cmp	r7, r2
    e060:	mov	r5, sl
    e062:	beq.w	e30a <_dtoa_r+0xc22>
    e066:	mov	r1, r4
    e068:	movs	r3, #0
    e06a:	movs	r2, #10
    e06c:	mov	r0, r9
    e06e:	bl	cf3c <__multadd>
    e072:	cmp	r6, r8
    e074:	mov	r4, r0
    e076:	mov	r1, r6
    e078:	mov.w	r3, #0
    e07c:	mov.w	r2, #10
    e080:	mov	r0, r9
    e082:	beq.n	e09c <_dtoa_r+0x9b4>
    e084:	bl	cf3c <__multadd>
    e088:	mov	r1, r8
    e08a:	mov	r6, r0
    e08c:	movs	r3, #0
    e08e:	movs	r2, #10
    e090:	mov	r0, r9
    e092:	bl	cf3c <__multadd>
    e096:	mov	r7, sl
    e098:	mov	r8, r0
    e09a:	b.n	dfe6 <_dtoa_r+0x8fe>
    e09c:	bl	cf3c <__multadd>
    e0a0:	mov	r7, sl
    e0a2:	mov	r6, r0
    e0a4:	mov	r8, r0
    e0a6:	b.n	dfe6 <_dtoa_r+0x8fe>
    e0a8:	mov	r1, r0
    e0aa:	mov	r0, r9
    e0ac:	str	r3, [sp, #20]
    e0ae:	bl	cf28 <_Bfree>
    e0b2:	movs	r2, #1
    e0b4:	ldr	r3, [sp, #20]
    e0b6:	b.n	e03a <_dtoa_r+0x952>
    e0b8:	ldr	r1, [sp, #24]
    e0ba:	mov	r0, r4
    e0bc:	bl	d2ec <__mcmp>
    e0c0:	cmp	r0, #0
    e0c2:	bge.w	dbc4 <_dtoa_r+0x4dc>
    e0c6:	mov	r1, r4
    e0c8:	ldr	r4, [sp, #16]
    e0ca:	movs	r3, #0
    e0cc:	subs	r4, #1
    e0ce:	movs	r2, #10
    e0d0:	mov	r0, r9
    e0d2:	str	r4, [sp, #16]
    e0d4:	bl	cf3c <__multadd>
    e0d8:	ldr	r3, [sp, #44]	; 0x2c
    e0da:	mov	r4, r0
    e0dc:	cmp	r3, #0
    e0de:	bne.w	dfa4 <_dtoa_r+0x8bc>
    e0e2:	ldr	r3, [sp, #56]	; 0x38
    e0e4:	cmp	r3, #0
    e0e6:	ble.w	e4c4 <_dtoa_r+0xddc>
    e0ea:	str	r3, [sp, #32]
    e0ec:	b.n	dbd4 <_dtoa_r+0x4ec>
    e0ee:	ldr	r4, [sp, #40]	; 0x28
    e0f0:	b.n	db3c <_dtoa_r+0x454>
    e0f2:	ldr	r3, [sp, #0]
    e0f4:	cmp	r3, #2
    e0f6:	ble.w	dbcc <_dtoa_r+0x4e4>
    e0fa:	ldr	r3, [sp, #32]
    e0fc:	cmp	r3, #0
    e0fe:	bne.w	e43c <_dtoa_r+0xd54>
    e102:	ldr	r1, [sp, #24]
    e104:	movs	r2, #5
    e106:	mov	r0, r9
    e108:	bl	cf3c <__multadd>
    e10c:	mov	r1, r0
    e10e:	str	r0, [sp, #24]
    e110:	mov	r0, r4
    e112:	bl	d2ec <__mcmp>
    e116:	cmp	r0, #0
    e118:	str	r4, [sp, #40]	; 0x28
    e11a:	ble.w	df4a <_dtoa_r+0x862>
    e11e:	ldr	r2, [sp, #16]
    e120:	ldr	r1, [sp, #36]	; 0x24
    e122:	movs	r3, #49	; 0x31
    e124:	adds	r2, #1
    e126:	str	r2, [sp, #16]
    e128:	strb	r3, [r1, #0]
    e12a:	adds	r5, r1, #1
    e12c:	b.n	df52 <_dtoa_r+0x86a>
    e12e:	ldr	r2, [sp, #16]
    e130:	adds	r2, #1
    e132:	str	r2, [sp, #16]
    e134:	ldr	r2, [sp, #36]	; 0x24
    e136:	movs	r3, #49	; 0x31
    e138:	strb	r3, [r2, #0]
    e13a:	b.n	dc56 <_dtoa_r+0x56e>
    e13c:	movs	r3, #1
    e13e:	str	r3, [sp, #44]	; 0x2c
    e140:	b.n	dce8 <_dtoa_r+0x600>
    e142:	ldr.w	r9, [sp, #20]
    e146:	b.n	da7e <_dtoa_r+0x396>
    e148:	cmp.w	sl, #0
    e14c:	bne.w	db62 <_dtoa_r+0x47a>
    e150:	ubfx	r3, fp, #0, #20
    e154:	cmp	r3, #0
    e156:	bne.w	e3d6 <_dtoa_r+0xcee>
    e15a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e15e:	lsrs	r7, r7, #20
    e160:	lsls	r7, r7, #20
    e162:	cbz	r7, e170 <_dtoa_r+0xa88>
    e164:	ldr	r3, [sp, #28]
    e166:	adds	r3, #1
    e168:	str	r3, [sp, #28]
    e16a:	add.w	r8, r8, #1
    e16e:	movs	r7, #1
    e170:	ldr	r3, [sp, #48]	; 0x30
    e172:	movs	r0, #1
    e174:	cmp	r3, #0
    e176:	beq.w	db76 <_dtoa_r+0x48e>
    e17a:	b.n	db64 <_dtoa_r+0x47c>
    e17c:	mov	r0, sl
    e17e:	bl	b1f0 <__aeabi_i2d>
    e182:	mov	r2, r6
    e184:	mov	r3, r7
    e186:	bl	b2bc <__aeabi_dmul>
    e18a:	movs	r2, #0
    e18c:	ldr	r3, [pc, #764]	; (e48c <_dtoa_r+0xda4>)
    e18e:	bl	af58 <__adddf3>
    e192:	mov	r4, r0
    e194:	sub.w	r5, r1, #54525952	; 0x3400000
    e198:	mov	r0, r6
    e19a:	mov	r1, r7
    e19c:	movs	r2, #0
    e19e:	ldr	r3, [pc, #752]	; (e490 <_dtoa_r+0xda8>)
    e1a0:	bl	af54 <__aeabi_dsub>
    e1a4:	mov	r2, r4
    e1a6:	mov	r3, r5
    e1a8:	mov	r6, r0
    e1aa:	mov	r7, r1
    e1ac:	bl	b7dc <__aeabi_dcmpgt>
    e1b0:	cmp	r0, #0
    e1b2:	bne.w	e312 <_dtoa_r+0xc2a>
    e1b6:	mov	r2, r4
    e1b8:	add.w	r3, r5, #2147483648	; 0x80000000
    e1bc:	mov	r0, r6
    e1be:	mov	r1, r7
    e1c0:	bl	b7a0 <__aeabi_dcmplt>
    e1c4:	cmp	r0, #0
    e1c6:	beq.n	e25e <_dtoa_r+0xb76>
    e1c8:	movs	r3, #0
    e1ca:	str	r3, [sp, #24]
    e1cc:	mov	r6, r3
    e1ce:	b.n	df4a <_dtoa_r+0x862>
    e1d0:	ldr	r0, [sp, #36]	; 0x24
    e1d2:	b.w	d75a <_dtoa_r+0x72>
    e1d6:	ldr	r3, [sp, #24]
    e1d8:	ldr	r2, [sp, #48]	; 0x30
    e1da:	str	r7, [sp, #24]
    e1dc:	subs	r3, r7, r3
    e1de:	add	r2, r3
    e1e0:	str	r2, [sp, #48]	; 0x30
    e1e2:	movs	r7, #0
    e1e4:	b.n	dac2 <_dtoa_r+0x3da>
    e1e6:	vldr	d7, [sp, #64]	; 0x40
    e1ea:	mov.w	sl, #2
    e1ee:	vstr	d7, [sp, #72]	; 0x48
    e1f2:	b.n	dd74 <_dtoa_r+0x68c>
    e1f4:	mov	r4, r3
    e1f6:	movs	r1, #0
    e1f8:	str.w	r1, [r9, #68]	; 0x44
    e1fc:	b.n	dd20 <_dtoa_r+0x638>
    e1fe:	movs	r4, #1
    e200:	str	r4, [sp, #56]	; 0x38
    e202:	str	r4, [sp, #32]
    e204:	str	r4, [sp, #20]
    e206:	b.n	e1f6 <_dtoa_r+0xb0e>
    e208:	cmp	r2, #0
    e20a:	mov	sl, r3
    e20c:	ble.n	e232 <_dtoa_r+0xb4a>
    e20e:	mov	r1, r4
    e210:	movs	r2, #1
    e212:	mov	r0, r9
    e214:	bl	d23c <__lshift>
    e218:	ldr	r1, [sp, #24]
    e21a:	mov	r4, r0
    e21c:	bl	d2ec <__mcmp>
    e220:	cmp	r0, #0
    e222:	ble.w	e4b6 <_dtoa_r+0xdce>
    e226:	cmp.w	sl, #57	; 0x39
    e22a:	beq.w	e440 <_dtoa_r+0xd58>
    e22e:	add.w	sl, r5, #49	; 0x31
    e232:	mov	fp, r6
    e234:	strb.w	sl, [r7]
    e238:	adds	r5, r7, #1
    e23a:	mov	r6, r8
    e23c:	str	r4, [sp, #40]	; 0x28
    e23e:	b.n	dc56 <_dtoa_r+0x56e>
    e240:	bne.n	e24c <_dtoa_r+0xb64>
    e242:	tst.w	sl, #1
    e246:	beq.n	e24c <_dtoa_r+0xb64>
    e248:	b.n	dc36 <_dtoa_r+0x54e>
    e24a:	mov	r5, r2
    e24c:	ldrb.w	r3, [r5, #-1]
    e250:	cmp	r3, #48	; 0x30
    e252:	add.w	r2, r5, #4294967295
    e256:	beq.n	e24a <_dtoa_r+0xb62>
    e258:	b.n	dc56 <_dtoa_r+0x56e>
    e25a:	ldr.w	r8, [sp, #72]	; 0x48
    e25e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e262:	b.w	d8fc <_dtoa_r+0x214>
    e266:	ldr	r1, [sp, #36]	; 0x24
    e268:	movs	r2, #48	; 0x30
    e26a:	strb	r2, [r1, #0]
    e26c:	ldr	r2, [sp, #16]
    e26e:	ldrb.w	r4, [r5, #-1]
    e272:	adds	r2, #1
    e274:	str	r2, [sp, #16]
    e276:	b.n	da7a <_dtoa_r+0x392>
    e278:	ldr	r3, [sp, #16]
    e27a:	negs	r4, r3
    e27c:	cmp	r4, #0
    e27e:	beq.w	e3e8 <_dtoa_r+0xd00>
    e282:	ldr	r3, [pc, #528]	; (e494 <_dtoa_r+0xdac>)
    e284:	and.w	r2, r4, #15
    e288:	add.w	r3, r3, r2, lsl #3
    e28c:	ldrd	r2, r3, [r3]
    e290:	ldrd	r0, r1, [sp, #64]	; 0x40
    e294:	bl	b2bc <__aeabi_dmul>
    e298:	asrs	r4, r4, #4
    e29a:	mov	r6, r0
    e29c:	mov	r7, r1
    e29e:	beq.w	e4ce <_dtoa_r+0xde6>
    e2a2:	ldr	r5, [pc, #500]	; (e498 <_dtoa_r+0xdb0>)
    e2a4:	mov.w	sl, #2
    e2a8:	lsls	r2, r4, #31
    e2aa:	bpl.n	e2c0 <_dtoa_r+0xbd8>
    e2ac:	mov	r0, r6
    e2ae:	mov	r1, r7
    e2b0:	ldrd	r2, r3, [r5]
    e2b4:	bl	b2bc <__aeabi_dmul>
    e2b8:	add.w	sl, sl, #1
    e2bc:	mov	r6, r0
    e2be:	mov	r7, r1
    e2c0:	asrs	r4, r4, #1
    e2c2:	add.w	r5, r5, #8
    e2c6:	bne.n	e2a8 <_dtoa_r+0xbc0>
    e2c8:	b.n	dda8 <_dtoa_r+0x6c0>
    e2ca:	ldr	r1, [r6, #4]
    e2cc:	mov	r0, r9
    e2ce:	bl	cedc <_Balloc>
    e2d2:	ldr	r3, [r6, #16]
    e2d4:	adds	r2, r3, #2
    e2d6:	mov	r5, r0
    e2d8:	lsls	r2, r2, #2
    e2da:	add.w	r1, r6, #12
    e2de:	adds	r0, #12
    e2e0:	bl	9584 <memcpy>
    e2e4:	mov	r1, r5
    e2e6:	movs	r2, #1
    e2e8:	mov	r0, r9
    e2ea:	bl	d23c <__lshift>
    e2ee:	mov	r8, r0
    e2f0:	b.n	dfd4 <_dtoa_r+0x8ec>
    e2f2:	cmp	r3, #57	; 0x39
    e2f4:	beq.w	e440 <_dtoa_r+0xd58>
    e2f8:	add.w	sl, r3, #1
    e2fc:	mov	fp, r6
    e2fe:	strb.w	sl, [r7]
    e302:	adds	r5, r7, #1
    e304:	mov	r6, r8
    e306:	str	r4, [sp, #40]	; 0x28
    e308:	b.n	dc56 <_dtoa_r+0x56e>
    e30a:	mov	fp, r6
    e30c:	mov	sl, r3
    e30e:	mov	r6, r8
    e310:	b.n	dc1e <_dtoa_r+0x536>
    e312:	movs	r3, #0
    e314:	str	r3, [sp, #24]
    e316:	mov	r6, r3
    e318:	b.n	e11e <_dtoa_r+0xa36>
    e31a:	ldr	r3, [sp, #72]	; 0x48
    e31c:	ldr	r1, [pc, #372]	; (e494 <_dtoa_r+0xdac>)
    e31e:	subs	r2, r3, #1
    e320:	add.w	r1, r1, r2, lsl #3
    e324:	mov	r3, r5
    e326:	str	r2, [sp, #92]	; 0x5c
    e328:	ldrd	r0, r1, [r1]
    e32c:	mov	r2, r4
    e32e:	bl	b2bc <__aeabi_dmul>
    e332:	strd	r0, r1, [sp, #80]	; 0x50
    e336:	mov	r1, r7
    e338:	mov	r0, r6
    e33a:	bl	b81c <__aeabi_d2iz>
    e33e:	mov	r4, r0
    e340:	bl	b1f0 <__aeabi_i2d>
    e344:	mov	r3, r1
    e346:	mov	r2, r0
    e348:	mov	r1, r7
    e34a:	mov	r0, r6
    e34c:	bl	af54 <__aeabi_dsub>
    e350:	ldr	r3, [sp, #72]	; 0x48
    e352:	mov	r7, r1
    e354:	ldr	r1, [sp, #36]	; 0x24
    e356:	adds	r4, #48	; 0x30
    e358:	cmp	r3, #1
    e35a:	mov	r6, r0
    e35c:	strb	r4, [r1, #0]
    e35e:	add.w	r5, r1, #1
    e362:	beq.n	e3a6 <_dtoa_r+0xcbe>
    e364:	ldr	r3, [sp, #72]	; 0x48
    e366:	ldr	r2, [sp, #36]	; 0x24
    e368:	add	r3, r2
    e36a:	mov	sl, r3
    e36c:	mov	fp, r5
    e36e:	movs	r2, #0
    e370:	ldr	r3, [pc, #296]	; (e49c <_dtoa_r+0xdb4>)
    e372:	mov	r0, r6
    e374:	mov	r1, r7
    e376:	bl	b2bc <__aeabi_dmul>
    e37a:	mov	r7, r1
    e37c:	mov	r6, r0
    e37e:	bl	b81c <__aeabi_d2iz>
    e382:	mov	r4, r0
    e384:	bl	b1f0 <__aeabi_i2d>
    e388:	adds	r4, #48	; 0x30
    e38a:	mov	r2, r0
    e38c:	mov	r3, r1
    e38e:	mov	r0, r6
    e390:	mov	r1, r7
    e392:	bl	af54 <__aeabi_dsub>
    e396:	strb.w	r4, [fp], #1
    e39a:	cmp	sl, fp
    e39c:	mov	r6, r0
    e39e:	mov	r7, r1
    e3a0:	bne.n	e36e <_dtoa_r+0xc86>
    e3a2:	ldr	r3, [sp, #92]	; 0x5c
    e3a4:	add	r5, r3
    e3a6:	movs	r2, #0
    e3a8:	ldr	r3, [pc, #244]	; (e4a0 <_dtoa_r+0xdb8>)
    e3aa:	ldrd	r0, r1, [sp, #80]	; 0x50
    e3ae:	bl	af58 <__adddf3>
    e3b2:	mov	r2, r6
    e3b4:	mov	r3, r7
    e3b6:	bl	b7a0 <__aeabi_dcmplt>
    e3ba:	cmp	r0, #0
    e3bc:	beq.n	e450 <_dtoa_r+0xd68>
    e3be:	ldr	r3, [sp, #88]	; 0x58
    e3c0:	str	r3, [sp, #16]
    e3c2:	ldrb.w	r4, [r5, #-1]
    e3c6:	b.w	da62 <_dtoa_r+0x37a>
    e3ca:	ldr	r3, [sp, #28]
    e3cc:	ldr	r2, [sp, #32]
    e3ce:	subs	r5, r3, r2
    e3d0:	movs	r3, #0
    e3d2:	b.w	dace <_dtoa_r+0x3e6>
    e3d6:	movs	r7, #0
    e3d8:	b.n	e170 <_dtoa_r+0xa88>
    e3da:	ldr	r3, [sp, #96]	; 0x60
    e3dc:	ldr	r7, [sp, #24]
    e3de:	ldr	r5, [sp, #28]
    e3e0:	rsb	r3, r3, #54	; 0x36
    e3e4:	b.w	dace <_dtoa_r+0x3e6>
    e3e8:	ldrd	r6, r7, [sp, #64]	; 0x40
    e3ec:	mov.w	sl, #2
    e3f0:	b.n	dda8 <_dtoa_r+0x6c0>
    e3f2:	ldr	r3, [sp, #32]
    e3f4:	cmp	r3, #0
    e3f6:	beq.w	e17c <_dtoa_r+0xa94>
    e3fa:	ldr	r3, [sp, #56]	; 0x38
    e3fc:	cmp	r3, #0
    e3fe:	ble.w	e25e <_dtoa_r+0xb76>
    e402:	movs	r2, #0
    e404:	ldr	r3, [pc, #148]	; (e49c <_dtoa_r+0xdb4>)
    e406:	mov	r0, r6
    e408:	mov	r1, r7
    e40a:	bl	b2bc <__aeabi_dmul>
    e40e:	mov	r6, r0
    e410:	mov	r7, r1
    e412:	add.w	r0, sl, #1
    e416:	bl	b1f0 <__aeabi_i2d>
    e41a:	mov	r2, r6
    e41c:	mov	r3, r7
    e41e:	bl	b2bc <__aeabi_dmul>
    e422:	movs	r2, #0
    e424:	ldr	r3, [pc, #100]	; (e48c <_dtoa_r+0xda4>)
    e426:	bl	af58 <__adddf3>
    e42a:	ldr	r2, [sp, #16]
    e42c:	ldr	r3, [sp, #56]	; 0x38
    e42e:	str	r3, [sp, #72]	; 0x48
    e430:	subs	r2, #1
    e432:	mov	r4, r0
    e434:	sub.w	r5, r1, #54525952	; 0x3400000
    e438:	str	r2, [sp, #88]	; 0x58
    e43a:	b.n	ddea <_dtoa_r+0x702>
    e43c:	str	r4, [sp, #40]	; 0x28
    e43e:	b.n	df4a <_dtoa_r+0x862>
    e440:	movs	r2, #57	; 0x39
    e442:	mov	fp, r6
    e444:	str	r4, [sp, #40]	; 0x28
    e446:	mov	r6, r8
    e448:	strb	r2, [r7, #0]
    e44a:	adds	r5, r7, #1
    e44c:	b.w	dc3a <_dtoa_r+0x552>
    e450:	ldrd	r2, r3, [sp, #80]	; 0x50
    e454:	movs	r0, #0
    e456:	ldr	r1, [pc, #72]	; (e4a0 <_dtoa_r+0xdb8>)
    e458:	bl	af54 <__aeabi_dsub>
    e45c:	mov	r2, r6
    e45e:	mov	r3, r7
    e460:	bl	b7dc <__aeabi_dcmpgt>
    e464:	cbnz	r0, e46a <_dtoa_r+0xd82>
    e466:	b.n	e25e <_dtoa_r+0xb76>
    e468:	mov	r5, r2
    e46a:	ldrb.w	r3, [r5, #-1]
    e46e:	cmp	r3, #48	; 0x30
    e470:	add.w	r2, r5, #4294967295
    e474:	beq.n	e468 <_dtoa_r+0xd80>
    e476:	b.n	deec <_dtoa_r+0x804>
    e478:	ldr	r3, [sp, #88]	; 0x58
    e47a:	str	r3, [sp, #16]
    e47c:	b.w	da62 <_dtoa_r+0x37a>
    e480:	cmp.w	sl, #0
    e484:	bne.w	df80 <_dtoa_r+0x898>
    e488:	b.n	e150 <_dtoa_r+0xa68>
    e48a:	nop
    e48c:	.word	0x401c0000
    e490:	.word	0x40140000
    e494:	.word	0x000104f0
    e498:	.word	0x000105b8
    e49c:	.word	0x40240000
    e4a0:	.word	0x3fe00000
    e4a4:	cmp	r3, #57	; 0x39
    e4a6:	mov	fp, sl
    e4a8:	mov	sl, r3
    e4aa:	beq.n	e440 <_dtoa_r+0xd58>
    e4ac:	cmp.w	fp, #0
    e4b0:	bgt.w	e22e <_dtoa_r+0xb46>
    e4b4:	b.n	e232 <_dtoa_r+0xb4a>
    e4b6:	bne.w	e232 <_dtoa_r+0xb4a>
    e4ba:	tst.w	sl, #1
    e4be:	beq.w	e232 <_dtoa_r+0xb4a>
    e4c2:	b.n	e226 <_dtoa_r+0xb3e>
    e4c4:	ldr	r3, [sp, #0]
    e4c6:	cmp	r3, #2
    e4c8:	bgt.n	e516 <_dtoa_r+0xe2e>
    e4ca:	ldr	r3, [sp, #56]	; 0x38
    e4cc:	b.n	e0ea <_dtoa_r+0xa02>
    e4ce:	mov.w	sl, #2
    e4d2:	b.n	dda8 <_dtoa_r+0x6c0>
    e4d4:	ldr	r3, [sp, #0]
    e4d6:	cmp	r3, #2
    e4d8:	bgt.n	e516 <_dtoa_r+0xe2e>
    e4da:	ldr	r3, [sp, #56]	; 0x38
    e4dc:	b.n	dfba <_dtoa_r+0x8d2>
    e4de:	movs	r4, #0
    e4e0:	str.w	r4, [r9, #68]	; 0x44
    e4e4:	mov	r1, r4
    e4e6:	mov	r0, r9
    e4e8:	bl	cedc <_Balloc>
    e4ec:	mov.w	r3, #4294967295
    e4f0:	str	r3, [sp, #32]
    e4f2:	str	r3, [sp, #56]	; 0x38
    e4f4:	movs	r3, #1
    e4f6:	str	r0, [sp, #36]	; 0x24
    e4f8:	str	r4, [sp, #20]
    e4fa:	str.w	r0, [r9, #64]	; 0x40
    e4fe:	str	r3, [sp, #44]	; 0x2c
    e500:	b.w	d8fc <_dtoa_r+0x214>
    e504:	beq.w	db98 <_dtoa_r+0x4b0>
    e508:	rsb	r0, r0, #60	; 0x3c
    e50c:	b.w	db8e <_dtoa_r+0x4a6>
    e510:	movs	r6, #1
    e512:	b.w	d88e <_dtoa_r+0x1a6>
    e516:	ldr	r3, [sp, #56]	; 0x38
    e518:	str	r3, [sp, #32]
    e51a:	b.n	e0fa <_dtoa_r+0xa12>
    e51c:			; <UNDEFINED> instruction: 0xffffffff

0000e520 <_svfprintf_r>:
    e520:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e524:	sub	sp, #260	; 0x104
    e526:	mov	r4, r1
    e528:	str	r1, [sp, #20]
    e52a:	mov	r5, r2
    e52c:	str	r3, [sp, #40]	; 0x28
    e52e:	str	r0, [sp, #24]
    e530:	bl	cec0 <_localeconv_r>
    e534:	ldr	r3, [r0, #0]
    e536:	str	r3, [sp, #76]	; 0x4c
    e538:	mov	r0, r3
    e53a:	bl	c940 <strlen>
    e53e:	ldrh	r3, [r4, #12]
    e540:	str	r0, [sp, #72]	; 0x48
    e542:	lsls	r6, r3, #24
    e544:	bpl.n	e54e <_svfprintf_r+0x2e>
    e546:	ldr	r3, [r4, #16]
    e548:	cmp	r3, #0
    e54a:	beq.w	f7b0 <_svfprintf_r+0x1290>
    e54e:	vldr	d7, [pc, #664]	; e7e8 <_svfprintf_r+0x2c8>
    e552:	movs	r3, #0
    e554:	vstr	d7, [sp, #64]	; 0x40
    e558:	str	r3, [sp, #56]	; 0x38
    e55a:	str	r3, [sp, #148]	; 0x94
    e55c:	str	r3, [sp, #144]	; 0x90
    e55e:	str	r3, [sp, #84]	; 0x54
    e560:	str	r3, [sp, #28]
    e562:	ldr.w	sl, [pc, #656]	; e7f4 <_svfprintf_r+0x2d4>
    e566:	add	r3, sp, #192	; 0xc0
    e568:	str	r3, [sp, #140]	; 0x8c
    e56a:	mov	r9, r3
    e56c:	mov	r8, r5
    e56e:	ldrb.w	r3, [r8]
    e572:	mov	r4, r8
    e574:	cbz	r3, e5b2 <_svfprintf_r+0x92>
    e576:	cmp	r3, #37	; 0x25
    e578:	bne.n	e580 <_svfprintf_r+0x60>
    e57a:	b.n	e5b2 <_svfprintf_r+0x92>
    e57c:	cmp	r3, #37	; 0x25
    e57e:	beq.n	e588 <_svfprintf_r+0x68>
    e580:	ldrb.w	r3, [r4, #1]!
    e584:	cmp	r3, #0
    e586:	bne.n	e57c <_svfprintf_r+0x5c>
    e588:	rsb	r5, r8, r4
    e58c:	cbz	r5, e5b2 <_svfprintf_r+0x92>
    e58e:	ldr	r3, [sp, #144]	; 0x90
    e590:	ldr	r2, [sp, #148]	; 0x94
    e592:	str.w	r8, [r9]
    e596:	adds	r3, #1
    e598:	add	r2, r5
    e59a:	cmp	r3, #7
    e59c:	str.w	r5, [r9, #4]
    e5a0:	str	r2, [sp, #148]	; 0x94
    e5a2:	str	r3, [sp, #144]	; 0x90
    e5a4:	bgt.w	e6f4 <_svfprintf_r+0x1d4>
    e5a8:	add.w	r9, r9, #8
    e5ac:	ldr	r3, [sp, #28]
    e5ae:	add	r3, r5
    e5b0:	str	r3, [sp, #28]
    e5b2:	ldrb	r3, [r4, #0]
    e5b4:	cmp	r3, #0
    e5b6:	beq.w	e706 <_svfprintf_r+0x1e6>
    e5ba:	movs	r3, #0
    e5bc:	mov	r2, r3
    e5be:	strb.w	r3, [sp, #111]	; 0x6f
    e5c2:	mov	r1, r3
    e5c4:	str	r3, [sp, #32]
    e5c6:	str	r3, [sp, #12]
    e5c8:	mov.w	fp, #4294967295
    e5cc:	ldrb	r3, [r4, #1]
    e5ce:	add.w	r8, r4, #1
    e5d2:	mov	r5, fp
    e5d4:	add.w	r8, r8, #1
    e5d8:	sub.w	r0, r3, #32
    e5dc:	cmp	r0, #88	; 0x58
    e5de:	bhi.w	ee4a <_svfprintf_r+0x92a>
    e5e2:	tbh	[pc, r0, lsl #1]
    e5e6:	.short	0x03a0
    e5e8:	.word	0x04320432
    e5ec:	.word	0x043203a8
    e5f0:	.word	0x04320432
    e5f4:	.word	0x04320432
    e5f8:	.word	0x03af0432
    e5fc:	.word	0x043203bd
    e600:	.word	0x00e2005d
    e604:	.word	0x01090432
    e608:	.word	0x01100110
    e60c:	.word	0x01100110
    e610:	.word	0x01100110
    e614:	.word	0x01100110
    e618:	.word	0x04320110
    e61c:	.word	0x04320432
    e620:	.word	0x04320432
    e624:	.word	0x04320432
    e628:	.word	0x04320432
    e62c:	.word	0x01200432
    e630:	.word	0x04320286
    e634:	.word	0x04320286
    e638:	.word	0x04320432
    e63c:	.word	0x02d40432
    e640:	.word	0x04320432
    e644:	.word	0x043202e5
    e648:	.word	0x04320432
    e64c:	.word	0x04320432
    e650:	.word	0x0432030f
    e654:	.word	0x033d0432
    e658:	.word	0x04320432
    e65c:	.word	0x04320432
    e660:	.word	0x04320432
    e664:	.word	0x04320432
    e668:	.word	0x04320432
    e66c:	.word	0x0391037e
    e670:	.word	0x02860286
    e674:	.word	0x03990286
    e678:	.word	0x04320391
    e67c:	.word	0x04070432
    e680:	.word	0x04120432
    e684:	.word	0x006400a3
    e688:	.word	0x043203c2
    e68c:	.word	0x043203c9
    e690:	.word	0x043203ea
    e694:	.word	0x03f20432
    e698:	ldr	r0, [sp, #32]
    e69a:	str	r3, [sp, #40]	; 0x28
    e69c:	negs	r0, r0
    e69e:	str	r0, [sp, #32]
    e6a0:	ldr	r3, [sp, #12]
    e6a2:	orr.w	r3, r3, #4
    e6a6:	str	r3, [sp, #12]
    e6a8:	ldrb.w	r3, [r8]
    e6ac:	b.n	e5d4 <_svfprintf_r+0xb4>
    e6ae:	ldr	r0, [sp, #40]	; 0x28
    e6b0:	mov	fp, r5
    e6b2:	movs	r1, #0
    e6b4:	ldr	r4, [r0, #0]
    e6b6:	strb.w	r1, [sp, #111]	; 0x6f
    e6ba:	adds	r7, r0, #4
    e6bc:	ldr	r0, [sp, #12]
    e6be:	movs	r3, #48	; 0x30
    e6c0:	movs	r2, #120	; 0x78
    e6c2:	cmp	fp, r1
    e6c4:	strb.w	r3, [sp, #112]	; 0x70
    e6c8:	mov.w	r5, #0
    e6cc:	strb.w	r2, [sp, #113]	; 0x71
    e6d0:	orr.w	r3, r0, #2
    e6d4:	blt.w	ee84 <_svfprintf_r+0x964>
    e6d8:	bic.w	r3, r0, #128	; 0x80
    e6dc:	orr.w	r3, r3, #2
    e6e0:	str	r3, [sp, #12]
    e6e2:	orrs.w	r3, r4, r5
    e6e6:	str	r7, [sp, #40]	; 0x28
    e6e8:	beq.w	ee30 <_svfprintf_r+0x910>
    e6ec:	mov	r7, r1
    e6ee:	str	r2, [sp, #52]	; 0x34
    e6f0:	ldr	r0, [pc, #252]	; (e7f0 <_svfprintf_r+0x2d0>)
    e6f2:	b.n	ecc2 <_svfprintf_r+0x7a2>
    e6f4:	add	r2, sp, #140	; 0x8c
    e6f6:	ldr	r1, [sp, #20]
    e6f8:	ldr	r0, [sp, #24]
    e6fa:	bl	fc04 <__ssprint_r>
    e6fe:	cbnz	r0, e714 <_svfprintf_r+0x1f4>
    e700:	add.w	r9, sp, #192	; 0xc0
    e704:	b.n	e5ac <_svfprintf_r+0x8c>
    e706:	ldr	r3, [sp, #148]	; 0x94
    e708:	cbz	r3, e714 <_svfprintf_r+0x1f4>
    e70a:	ldr	r0, [sp, #24]
    e70c:	ldr	r1, [sp, #20]
    e70e:	add	r2, sp, #140	; 0x8c
    e710:	bl	fc04 <__ssprint_r>
    e714:	ldr	r3, [sp, #20]
    e716:	ldrh	r3, [r3, #12]
    e718:	tst.w	r3, #64	; 0x40
    e71c:	ldr	r3, [sp, #28]
    e71e:	it	ne
    e720:	movne.w	r3, #4294967295
    e724:	mov	r0, r3
    e726:	add	sp, #260	; 0x104
    e728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e72c:	str	r3, [sp, #52]	; 0x34
    e72e:	mov	fp, r5
    e730:	cmp	r2, #0
    e732:	bne.w	fb9c <_svfprintf_r+0x167c>
    e736:	ldr	r2, [sp, #12]
    e738:	ands.w	r3, r2, #32
    e73c:	beq.w	ebcc <_svfprintf_r+0x6ac>
    e740:	ldr	r7, [sp, #40]	; 0x28
    e742:	adds	r7, #7
    e744:	bic.w	r3, r7, #7
    e748:	movs	r7, #0
    e74a:	add.w	r1, r3, #8
    e74e:	cmp	fp, r7
    e750:	str	r1, [sp, #40]	; 0x28
    e752:	ldrd	r4, r5, [r3]
    e756:	strb.w	r7, [sp, #111]	; 0x6f
    e75a:	blt.w	f622 <_svfprintf_r+0x1102>
    e75e:	bic.w	r3, r2, #128	; 0x80
    e762:	str	r3, [sp, #12]
    e764:	orrs.w	r3, r4, r5
    e768:	beq.w	ee74 <_svfprintf_r+0x954>
    e76c:	add	r6, sp, #192	; 0xc0
    e76e:	lsrs	r2, r4, #3
    e770:	orr.w	r2, r2, r5, lsl #29
    e774:	lsrs	r1, r5, #3
    e776:	and.w	r3, r4, #7
    e77a:	mov	r5, r1
    e77c:	mov	r4, r2
    e77e:	adds	r3, #48	; 0x30
    e780:	orrs.w	r2, r4, r5
    e784:	strb.w	r3, [r6, #-1]!
    e788:	bne.n	e76e <_svfprintf_r+0x24e>
    e78a:	ldr	r2, [sp, #12]
    e78c:	lsls	r1, r2, #31
    e78e:	bpl.w	e8b0 <_svfprintf_r+0x390>
    e792:	cmp	r3, #48	; 0x30
    e794:	beq.w	e8b0 <_svfprintf_r+0x390>
    e798:	movs	r2, #48	; 0x30
    e79a:	subs	r3, r6, #1
    e79c:	strb.w	r2, [r6, #-1]
    e7a0:	add	r2, sp, #192	; 0xc0
    e7a2:	subs	r2, r2, r3
    e7a4:	str	r2, [sp, #36]	; 0x24
    e7a6:	mov	r6, r3
    e7a8:	b.n	e8b6 <_svfprintf_r+0x396>
    e7aa:	ldrb.w	r3, [r8]
    e7ae:	cmp	r3, #42	; 0x2a
    e7b0:	add.w	r4, r8, #1
    e7b4:	beq.w	fb80 <_svfprintf_r+0x1660>
    e7b8:	sub.w	r0, r3, #48	; 0x30
    e7bc:	cmp	r0, #9
    e7be:	it	ls
    e7c0:	movls	r5, #0
    e7c2:	bhi.w	fad2 <_svfprintf_r+0x15b2>
    e7c6:	ldrb.w	r3, [r4], #1
    e7ca:	add.w	r5, r5, r5, lsl #2
    e7ce:	add.w	r5, r0, r5, lsl #1
    e7d2:	sub.w	r0, r3, #48	; 0x30
    e7d6:	cmp	r0, #9
    e7d8:	bls.n	e7c6 <_svfprintf_r+0x2a6>
    e7da:	orr.w	r5, r5, r5, asr #31
    e7de:	mov	r8, r4
    e7e0:	b.n	e5d8 <_svfprintf_r+0xb8>
    e7e2:	nop
    e7e4:	nop.w
	...
    e7f0:	.word	0x00010634
    e7f4:	.word	0x00010600
    e7f8:	ldr	r3, [sp, #12]
    e7fa:	orr.w	r3, r3, #128	; 0x80
    e7fe:	str	r3, [sp, #12]
    e800:	ldrb.w	r3, [r8]
    e804:	b.n	e5d4 <_svfprintf_r+0xb4>
    e806:	sub.w	r0, r3, #48	; 0x30
    e80a:	movs	r3, #0
    e80c:	mov	r4, r3
    e80e:	ldrb.w	r3, [r8], #1
    e812:	add.w	r4, r4, r4, lsl #2
    e816:	add.w	r4, r0, r4, lsl #1
    e81a:	sub.w	r0, r3, #48	; 0x30
    e81e:	cmp	r0, #9
    e820:	bls.n	e80e <_svfprintf_r+0x2ee>
    e822:	str	r4, [sp, #32]
    e824:	b.n	e5d8 <_svfprintf_r+0xb8>
    e826:	str	r3, [sp, #52]	; 0x34
    e828:	mov	fp, r5
    e82a:	cmp	r2, #0
    e82c:	bne.w	fbb8 <_svfprintf_r+0x1698>
    e830:	ldr	r3, [sp, #12]
    e832:	orr.w	r3, r3, #16
    e836:	str	r3, [sp, #12]
    e838:	ldr	r3, [sp, #12]
    e83a:	lsls	r4, r3, #26
    e83c:	bpl.w	f2ae <_svfprintf_r+0xd8e>
    e840:	ldr	r7, [sp, #40]	; 0x28
    e842:	adds	r7, #7
    e844:	bic.w	r7, r7, #7
    e848:	ldrd	r2, r3, [r7]
    e84c:	add.w	r1, r7, #8
    e850:	str	r1, [sp, #40]	; 0x28
    e852:	mov	r4, r2
    e854:	mov	r5, r3
    e856:	cmp	r2, #0
    e858:	sbcs.w	r3, r3, #0
    e85c:	blt.w	f324 <_svfprintf_r+0xe04>
    e860:	cmp.w	fp, #0
    e864:	ldrb.w	r7, [sp, #111]	; 0x6f
    e868:	blt.w	f2ea <_svfprintf_r+0xdca>
    e86c:	ldr	r3, [sp, #12]
    e86e:	bic.w	r3, r3, #128	; 0x80
    e872:	str	r3, [sp, #12]
    e874:	orrs.w	r3, r4, r5
    e878:	beq.w	ec4c <_svfprintf_r+0x72c>
    e87c:	cmp	r5, #0
    e87e:	it	eq
    e880:	cmpeq	r4, #10
    e882:	bcc.w	ec56 <_svfprintf_r+0x736>
    e886:	add	r6, sp, #192	; 0xc0
    e888:	mov	r0, r4
    e88a:	mov	r1, r5
    e88c:	movs	r2, #10
    e88e:	movs	r3, #0
    e890:	bl	b86c <__aeabi_uldivmod>
    e894:	adds	r2, #48	; 0x30
    e896:	strb.w	r2, [r6, #-1]!
    e89a:	mov	r0, r4
    e89c:	mov	r1, r5
    e89e:	movs	r3, #0
    e8a0:	movs	r2, #10
    e8a2:	bl	b86c <__aeabi_uldivmod>
    e8a6:	mov	r4, r0
    e8a8:	mov	r5, r1
    e8aa:	orrs.w	r3, r4, r5
    e8ae:	bne.n	e888 <_svfprintf_r+0x368>
    e8b0:	add	r3, sp, #192	; 0xc0
    e8b2:	subs	r3, r3, r6
    e8b4:	str	r3, [sp, #36]	; 0x24
    e8b6:	ldr	r3, [sp, #36]	; 0x24
    e8b8:	cmp	r3, fp
    e8ba:	it	lt
    e8bc:	movlt	r3, fp
    e8be:	str	r3, [sp, #16]
    e8c0:	movs	r3, #0
    e8c2:	str	r3, [sp, #60]	; 0x3c
    e8c4:	cbz	r7, e8cc <_svfprintf_r+0x3ac>
    e8c6:	ldr	r3, [sp, #16]
    e8c8:	adds	r3, #1
    e8ca:	str	r3, [sp, #16]
    e8cc:	ldr	r3, [sp, #12]
    e8ce:	ands.w	r3, r3, #2
    e8d2:	str	r3, [sp, #44]	; 0x2c
    e8d4:	beq.n	e8dc <_svfprintf_r+0x3bc>
    e8d6:	ldr	r3, [sp, #16]
    e8d8:	adds	r3, #2
    e8da:	str	r3, [sp, #16]
    e8dc:	ldr	r3, [sp, #12]
    e8de:	ands.w	r3, r3, #132	; 0x84
    e8e2:	str	r3, [sp, #48]	; 0x30
    e8e4:	bne.w	ee9e <_svfprintf_r+0x97e>
    e8e8:	ldr	r3, [sp, #32]
    e8ea:	ldr	r2, [sp, #16]
    e8ec:	subs	r5, r3, r2
    e8ee:	cmp	r5, #0
    e8f0:	ble.w	ee9e <_svfprintf_r+0x97e>
    e8f4:	cmp	r5, #16
    e8f6:	ldr	r1, [sp, #148]	; 0x94
    e8f8:	ldr	r2, [sp, #144]	; 0x90
    e8fa:	ldr	r7, [pc, #672]	; (eb9c <_svfprintf_r+0x67c>)
    e8fc:	ble.n	e94e <_svfprintf_r+0x42e>
    e8fe:	str	r6, [sp, #80]	; 0x50
    e900:	mov	r0, r9
    e902:	movs	r4, #16
    e904:	mov	r9, r7
    e906:	ldr	r6, [sp, #20]
    e908:	mov	r7, r5
    e90a:	ldr	r5, [sp, #24]
    e90c:	b.n	e918 <_svfprintf_r+0x3f8>
    e90e:	subs	r7, #16
    e910:	cmp	r7, #16
    e912:	add.w	r0, r0, #8
    e916:	ble.n	e946 <_svfprintf_r+0x426>
    e918:	adds	r2, #1
    e91a:	ldr	r3, [pc, #640]	; (eb9c <_svfprintf_r+0x67c>)
    e91c:	str	r2, [sp, #144]	; 0x90
    e91e:	adds	r1, #16
    e920:	cmp	r2, #7
    e922:	str	r1, [sp, #148]	; 0x94
    e924:	stmia.w	r0, {r3, r4}
    e928:	ble.n	e90e <_svfprintf_r+0x3ee>
    e92a:	add	r2, sp, #140	; 0x8c
    e92c:	mov	r1, r6
    e92e:	mov	r0, r5
    e930:	bl	fc04 <__ssprint_r>
    e934:	cmp	r0, #0
    e936:	bne.w	e714 <_svfprintf_r+0x1f4>
    e93a:	subs	r7, #16
    e93c:	cmp	r7, #16
    e93e:	ldr	r1, [sp, #148]	; 0x94
    e940:	ldr	r2, [sp, #144]	; 0x90
    e942:	add	r0, sp, #192	; 0xc0
    e944:	bgt.n	e918 <_svfprintf_r+0x3f8>
    e946:	ldr	r6, [sp, #80]	; 0x50
    e948:	mov	r5, r7
    e94a:	mov	r7, r9
    e94c:	mov	r9, r0
    e94e:	adds	r2, #1
    e950:	adds	r4, r5, r1
    e952:	cmp	r2, #7
    e954:	str	r4, [sp, #148]	; 0x94
    e956:	str	r2, [sp, #144]	; 0x90
    e958:	str.w	r7, [r9]
    e95c:	str.w	r5, [r9, #4]
    e960:	bgt.w	f1be <_svfprintf_r+0xc9e>
    e964:	ldrb.w	r7, [sp, #111]	; 0x6f
    e968:	add.w	r9, r9, #8
    e96c:	cbz	r7, e98c <_svfprintf_r+0x46c>
    e96e:	ldr	r3, [sp, #144]	; 0x90
    e970:	adds	r3, #1
    e972:	adds	r4, #1
    e974:	add.w	r1, sp, #111	; 0x6f
    e978:	movs	r2, #1
    e97a:	cmp	r3, #7
    e97c:	str	r4, [sp, #148]	; 0x94
    e97e:	str	r3, [sp, #144]	; 0x90
    e980:	stmia.w	r9, {r1, r2}
    e984:	bgt.w	f0d2 <_svfprintf_r+0xbb2>
    e988:	add.w	r9, r9, #8
    e98c:	ldr	r3, [sp, #44]	; 0x2c
    e98e:	cbz	r3, e9ac <_svfprintf_r+0x48c>
    e990:	ldr	r3, [sp, #144]	; 0x90
    e992:	adds	r3, #1
    e994:	adds	r4, #2
    e996:	add	r1, sp, #112	; 0x70
    e998:	movs	r2, #2
    e99a:	cmp	r3, #7
    e99c:	str	r4, [sp, #148]	; 0x94
    e99e:	str	r3, [sp, #144]	; 0x90
    e9a0:	stmia.w	r9, {r1, r2}
    e9a4:	bgt.w	f0ea <_svfprintf_r+0xbca>
    e9a8:	add.w	r9, r9, #8
    e9ac:	ldr	r3, [sp, #48]	; 0x30
    e9ae:	cmp	r3, #128	; 0x80
    e9b0:	beq.w	ef76 <_svfprintf_r+0xa56>
    e9b4:	ldr	r3, [sp, #36]	; 0x24
    e9b6:	rsb	r7, r3, fp
    e9ba:	cmp	r7, #0
    e9bc:	ble.n	ea26 <_svfprintf_r+0x506>
    e9be:	ldr	r2, [pc, #480]	; (eba0 <_svfprintf_r+0x680>)
    e9c0:	ldr	r3, [sp, #144]	; 0x90
    e9c2:	str	r2, [sp, #44]	; 0x2c
    e9c4:	cmp	r7, #16
    e9c6:	ble.n	ea0e <_svfprintf_r+0x4ee>
    e9c8:	mov	r2, r4
    e9ca:	mov.w	fp, #16
    e9ce:	ldr	r5, [sp, #24]
    e9d0:	ldr	r4, [sp, #20]
    e9d2:	b.n	e9de <_svfprintf_r+0x4be>
    e9d4:	subs	r7, #16
    e9d6:	cmp	r7, #16
    e9d8:	add.w	r9, r9, #8
    e9dc:	ble.n	ea0c <_svfprintf_r+0x4ec>
    e9de:	adds	r3, #1
    e9e0:	adds	r2, #16
    e9e2:	cmp	r3, #7
    e9e4:	str	r2, [sp, #148]	; 0x94
    e9e6:	str	r3, [sp, #144]	; 0x90
    e9e8:	stmia.w	r9, {sl, fp}
    e9ec:	ble.n	e9d4 <_svfprintf_r+0x4b4>
    e9ee:	add	r2, sp, #140	; 0x8c
    e9f0:	mov	r1, r4
    e9f2:	mov	r0, r5
    e9f4:	bl	fc04 <__ssprint_r>
    e9f8:	cmp	r0, #0
    e9fa:	bne.w	e714 <_svfprintf_r+0x1f4>
    e9fe:	subs	r7, #16
    ea00:	cmp	r7, #16
    ea02:	ldr	r2, [sp, #148]	; 0x94
    ea04:	ldr	r3, [sp, #144]	; 0x90
    ea06:	add.w	r9, sp, #192	; 0xc0
    ea0a:	bgt.n	e9de <_svfprintf_r+0x4be>
    ea0c:	mov	r4, r2
    ea0e:	adds	r3, #1
    ea10:	ldr	r2, [sp, #44]	; 0x2c
    ea12:	str	r3, [sp, #144]	; 0x90
    ea14:	add	r4, r7
    ea16:	cmp	r3, #7
    ea18:	str	r4, [sp, #148]	; 0x94
    ea1a:	stmia.w	r9, {r2, r7}
    ea1e:	bgt.w	f0ba <_svfprintf_r+0xb9a>
    ea22:	add.w	r9, r9, #8
    ea26:	ldr	r3, [sp, #12]
    ea28:	lsls	r2, r3, #23
    ea2a:	bmi.w	eea2 <_svfprintf_r+0x982>
    ea2e:	ldr	r3, [sp, #144]	; 0x90
    ea30:	ldr	r1, [sp, #36]	; 0x24
    ea32:	str.w	r6, [r9]
    ea36:	adds	r3, #1
    ea38:	add	r4, r1
    ea3a:	cmp	r3, #7
    ea3c:	str	r4, [sp, #148]	; 0x94
    ea3e:	str.w	r1, [r9, #4]
    ea42:	str	r3, [sp, #144]	; 0x90
    ea44:	bgt.w	f08e <_svfprintf_r+0xb6e>
    ea48:	add.w	r9, r9, #8
    ea4c:	ldr	r3, [sp, #12]
    ea4e:	lsls	r1, r3, #29
    ea50:	bpl.n	ead2 <_svfprintf_r+0x5b2>
    ea52:	ldr	r3, [sp, #32]
    ea54:	ldr	r2, [sp, #16]
    ea56:	subs	r5, r3, r2
    ea58:	cmp	r5, #0
    ea5a:	ble.n	ead2 <_svfprintf_r+0x5b2>
    ea5c:	cmp	r5, #16
    ea5e:	ldr	r3, [sp, #144]	; 0x90
    ea60:	ldr	r7, [pc, #312]	; (eb9c <_svfprintf_r+0x67c>)
    ea62:	ble.n	eaac <_svfprintf_r+0x58c>
    ea64:	mov	r2, r4
    ea66:	movs	r6, #16
    ea68:	ldr.w	fp, [sp, #24]
    ea6c:	ldr	r4, [sp, #20]
    ea6e:	b.n	ea7a <_svfprintf_r+0x55a>
    ea70:	subs	r5, #16
    ea72:	cmp	r5, #16
    ea74:	add.w	r9, r9, #8
    ea78:	ble.n	eaaa <_svfprintf_r+0x58a>
    ea7a:	adds	r3, #1
    ea7c:	ldr	r1, [pc, #284]	; (eb9c <_svfprintf_r+0x67c>)
    ea7e:	str	r3, [sp, #144]	; 0x90
    ea80:	adds	r2, #16
    ea82:	cmp	r3, #7
    ea84:	str	r2, [sp, #148]	; 0x94
    ea86:	stmia.w	r9, {r1, r6}
    ea8a:	ble.n	ea70 <_svfprintf_r+0x550>
    ea8c:	add	r2, sp, #140	; 0x8c
    ea8e:	mov	r1, r4
    ea90:	mov	r0, fp
    ea92:	bl	fc04 <__ssprint_r>
    ea96:	cmp	r0, #0
    ea98:	bne.w	e714 <_svfprintf_r+0x1f4>
    ea9c:	subs	r5, #16
    ea9e:	cmp	r5, #16
    eaa0:	ldr	r2, [sp, #148]	; 0x94
    eaa2:	ldr	r3, [sp, #144]	; 0x90
    eaa4:	add.w	r9, sp, #192	; 0xc0
    eaa8:	bgt.n	ea7a <_svfprintf_r+0x55a>
    eaaa:	mov	r4, r2
    eaac:	adds	r3, #1
    eaae:	add	r4, r5
    eab0:	cmp	r3, #7
    eab2:	str	r4, [sp, #148]	; 0x94
    eab4:	str	r3, [sp, #144]	; 0x90
    eab6:	str.w	r7, [r9]
    eaba:	str.w	r5, [r9, #4]
    eabe:	ble.n	ead2 <_svfprintf_r+0x5b2>
    eac0:	add	r2, sp, #140	; 0x8c
    eac2:	ldr	r1, [sp, #20]
    eac4:	ldr	r0, [sp, #24]
    eac6:	bl	fc04 <__ssprint_r>
    eaca:	cmp	r0, #0
    eacc:	bne.w	e714 <_svfprintf_r+0x1f4>
    ead0:	ldr	r4, [sp, #148]	; 0x94
    ead2:	ldr	r3, [sp, #28]
    ead4:	ldr	r2, [sp, #32]
    ead6:	ldr	r1, [sp, #16]
    ead8:	cmp	r2, r1
    eada:	ite	ge
    eadc:	addge	r3, r3, r2
    eade:	addlt	r3, r3, r1
    eae0:	str	r3, [sp, #28]
    eae2:	cmp	r4, #0
    eae4:	bne.w	f0a6 <_svfprintf_r+0xb86>
    eae8:	movs	r3, #0
    eaea:	str	r3, [sp, #144]	; 0x90
    eaec:	add.w	r9, sp, #192	; 0xc0
    eaf0:	b.n	e56e <_svfprintf_r+0x4e>
    eaf2:	str	r3, [sp, #52]	; 0x34
    eaf4:	mov	fp, r5
    eaf6:	cmp	r2, #0
    eaf8:	bne.w	fbc0 <_svfprintf_r+0x16a0>
    eafc:	ldr	r3, [sp, #12]
    eafe:	ldr	r7, [sp, #40]	; 0x28
    eb00:	lsls	r2, r3, #28
    eb02:	add.w	r7, r7, #7
    eb06:	bpl.w	f5f2 <_svfprintf_r+0x10d2>
    eb0a:	bic.w	r3, r7, #7
    eb0e:	vldr	d7, [r3]
    eb12:	vstr	d7, [sp, #64]	; 0x40
    eb16:	add.w	r2, r3, #8
    eb1a:	str	r2, [sp, #40]	; 0x28
    eb1c:	ldrd	r1, r2, [sp, #64]	; 0x40
    eb20:	bic.w	r3, r2, #2147483648	; 0x80000000
    eb24:	str	r1, [sp, #88]	; 0x58
    eb26:	str	r3, [sp, #92]	; 0x5c
    eb28:	ldrd	r4, r5, [sp, #88]	; 0x58
    eb2c:	mov.w	r2, #4294967295
    eb30:	mov	r0, r4
    eb32:	mov	r1, r5
    eb34:	ldr	r3, [pc, #108]	; (eba4 <_svfprintf_r+0x684>)
    eb36:	bl	b7f0 <__aeabi_dcmpun>
    eb3a:	cmp	r0, #0
    eb3c:	bne.w	f4f4 <_svfprintf_r+0xfd4>
    eb40:	mov.w	r2, #4294967295
    eb44:	ldr	r3, [pc, #92]	; (eba4 <_svfprintf_r+0x684>)
    eb46:	mov	r0, r4
    eb48:	mov	r1, r5
    eb4a:	bl	b7b4 <__aeabi_dcmple>
    eb4e:	cmp	r0, #0
    eb50:	bne.w	f4f4 <_svfprintf_r+0xfd4>
    eb54:	movs	r2, #0
    eb56:	movs	r3, #0
    eb58:	ldrd	r0, r1, [sp, #64]	; 0x40
    eb5c:	bl	b7a0 <__aeabi_dcmplt>
    eb60:	cmp	r0, #0
    eb62:	bne.w	fa0a <_svfprintf_r+0x14ea>
    eb66:	ldrb.w	r7, [sp, #111]	; 0x6f
    eb6a:	ldr	r6, [pc, #60]	; (eba8 <_svfprintf_r+0x688>)
    eb6c:	ldr	r3, [pc, #60]	; (ebac <_svfprintf_r+0x68c>)
    eb6e:	ldr	r1, [sp, #12]
    eb70:	bic.w	r1, r1, #128	; 0x80
    eb74:	str	r1, [sp, #12]
    eb76:	ldr	r1, [sp, #52]	; 0x34
    eb78:	movs	r2, #3
    eb7a:	mov.w	fp, #0
    eb7e:	str	r2, [sp, #16]
    eb80:	cmp	r1, #71	; 0x47
    eb82:	it	le
    eb84:	movle	r6, r3
    eb86:	str	r2, [sp, #36]	; 0x24
    eb88:	str.w	fp, [sp, #60]	; 0x3c
    eb8c:	b.n	e8c4 <_svfprintf_r+0x3a4>
    eb8e:	ldr	r3, [sp, #12]
    eb90:	orr.w	r3, r3, #8
    eb94:	str	r3, [sp, #12]
    eb96:	ldrb.w	r3, [r8]
    eb9a:	b.n	e5d4 <_svfprintf_r+0xb4>
    eb9c:	.word	0x00010650
    eba0:	.word	0x00010600
    eba4:	.word	0x7fefffff
    eba8:	.word	0x00010614
    ebac:	.word	0x00010610
    ebb0:	str	r3, [sp, #52]	; 0x34
    ebb2:	mov	fp, r5
    ebb4:	cmp	r2, #0
    ebb6:	bne.w	fbd8 <_svfprintf_r+0x16b8>
    ebba:	ldr	r3, [sp, #12]
    ebbc:	orr.w	r3, r3, #16
    ebc0:	str	r3, [sp, #12]
    ebc2:	ldr	r2, [sp, #12]
    ebc4:	ands.w	r3, r2, #32
    ebc8:	bne.w	e740 <_svfprintf_r+0x220>
    ebcc:	ldr	r1, [sp, #12]
    ebce:	ands.w	r2, r1, #16
    ebd2:	beq.w	f48c <_svfprintf_r+0xf6c>
    ebd6:	ldr	r0, [sp, #40]	; 0x28
    ebd8:	strb.w	r3, [sp, #111]	; 0x6f
    ebdc:	cmp.w	fp, #0
    ebe0:	ldr	r4, [r0, #0]
    ebe2:	add.w	r7, r0, #4
    ebe6:	mov.w	r5, #0
    ebea:	blt.w	f620 <_svfprintf_r+0x1100>
    ebee:	mov	r2, r1
    ebf0:	bic.w	r2, r2, #128	; 0x80
    ebf4:	str	r2, [sp, #12]
    ebf6:	orrs.w	r2, r4, r5
    ebfa:	str	r7, [sp, #40]	; 0x28
    ebfc:	beq.w	ee74 <_svfprintf_r+0x954>
    ec00:	mov	r7, r3
    ec02:	b.n	e76c <_svfprintf_r+0x24c>
    ec04:	str	r3, [sp, #52]	; 0x34
    ec06:	mov	fp, r5
    ec08:	cmp	r2, #0
    ec0a:	bne.w	fbd0 <_svfprintf_r+0x16b0>
    ec0e:	ldr	r3, [sp, #12]
    ec10:	orr.w	r3, r3, #16
    ec14:	str	r3, [sp, #12]
    ec16:	ldr	r2, [sp, #12]
    ec18:	ands.w	r3, r2, #32
    ec1c:	beq.w	f278 <_svfprintf_r+0xd58>
    ec20:	ldr	r7, [sp, #40]	; 0x28
    ec22:	adds	r7, #7
    ec24:	bic.w	r3, r7, #7
    ec28:	movs	r7, #0
    ec2a:	add.w	r1, r3, #8
    ec2e:	cmp	fp, r7
    ec30:	str	r1, [sp, #40]	; 0x28
    ec32:	ldrd	r4, r5, [r3]
    ec36:	strb.w	r7, [sp, #111]	; 0x6f
    ec3a:	blt.w	f2ea <_svfprintf_r+0xdca>
    ec3e:	bic.w	r3, r2, #128	; 0x80
    ec42:	str	r3, [sp, #12]
    ec44:	orrs.w	r3, r4, r5
    ec48:	bne.w	e87c <_svfprintf_r+0x35c>
    ec4c:	cmp.w	fp, #0
    ec50:	beq.w	ee3e <_svfprintf_r+0x91e>
    ec54:	movs	r4, #0
    ec56:	add	r6, sp, #256	; 0x100
    ec58:	adds	r4, #48	; 0x30
    ec5a:	strb.w	r4, [r6, #-65]!
    ec5e:	b.n	e8b0 <_svfprintf_r+0x390>
    ec60:	str	r3, [sp, #52]	; 0x34
    ec62:	mov	fp, r5
    ec64:	cmp	r2, #0
    ec66:	bne.w	fbc8 <_svfprintf_r+0x16a8>
    ec6a:	ldr	r3, [sp, #12]
    ec6c:	ldr	r0, [pc, #700]	; (ef2c <_svfprintf_r+0xa0c>)
    ec6e:	lsls	r5, r3, #26
    ec70:	bpl.w	edde <_svfprintf_r+0x8be>
    ec74:	ldr	r7, [sp, #40]	; 0x28
    ec76:	adds	r7, #7
    ec78:	bic.w	r3, r7, #7
    ec7c:	ldrd	r4, r5, [r3]
    ec80:	add.w	r2, r3, #8
    ec84:	str	r2, [sp, #40]	; 0x28
    ec86:	ldr	r2, [sp, #12]
    ec88:	ands.w	r7, r2, #1
    ec8c:	beq.w	f102 <_svfprintf_r+0xbe2>
    ec90:	orrs.w	r3, r4, r5
    ec94:	beq.w	f69c <_svfprintf_r+0x117c>
    ec98:	ldrb.w	r2, [sp, #52]	; 0x34
    ec9c:	strb.w	r2, [sp, #113]	; 0x71
    eca0:	movs	r7, #0
    eca2:	ldr	r2, [sp, #12]
    eca4:	strb.w	r7, [sp, #111]	; 0x6f
    eca8:	movs	r3, #48	; 0x30
    ecaa:	cmp	fp, r7
    ecac:	strb.w	r3, [sp, #112]	; 0x70
    ecb0:	orr.w	r3, r2, #2
    ecb4:	blt.w	fa14 <_svfprintf_r+0x14f4>
    ecb8:	bic.w	r3, r2, #128	; 0x80
    ecbc:	orr.w	r3, r3, #2
    ecc0:	str	r3, [sp, #12]
    ecc2:	add	r6, sp, #192	; 0xc0
    ecc4:	lsrs	r3, r4, #4
    ecc6:	and.w	r1, r4, #15
    ecca:	orr.w	r3, r3, r5, lsl #28
    ecce:	lsrs	r2, r5, #4
    ecd0:	mov	r4, r3
    ecd2:	mov	r5, r2
    ecd4:	ldrb	r3, [r0, r1]
    ecd6:	strb.w	r3, [r6, #-1]!
    ecda:	orrs.w	r3, r4, r5
    ecde:	bne.n	ecc4 <_svfprintf_r+0x7a4>
    ece0:	b.n	e8b0 <_svfprintf_r+0x390>
    ece2:	ldr	r1, [sp, #40]	; 0x28
    ece4:	str	r3, [sp, #52]	; 0x34
    ece6:	ldr	r2, [r1, #0]
    ece8:	strb.w	r2, [sp, #152]	; 0x98
    ecec:	movs	r3, #0
    ecee:	mov	r2, r1
    ecf0:	mov	r7, r3
    ecf2:	strb.w	r3, [sp, #111]	; 0x6f
    ecf6:	adds	r2, #4
    ecf8:	movs	r3, #1
    ecfa:	str	r3, [sp, #16]
    ecfc:	mov	fp, r7
    ecfe:	str	r7, [sp, #60]	; 0x3c
    ed00:	str	r2, [sp, #40]	; 0x28
    ed02:	str	r3, [sp, #36]	; 0x24
    ed04:	add	r6, sp, #152	; 0x98
    ed06:	b.n	e8cc <_svfprintf_r+0x3ac>
    ed08:	str	r3, [sp, #52]	; 0x34
    ed0a:	mov	fp, r5
    ed0c:	cmp	r2, #0
    ed0e:	beq.w	e838 <_svfprintf_r+0x318>
    ed12:	strb.w	r1, [sp, #111]	; 0x6f
    ed16:	b.n	e838 <_svfprintf_r+0x318>
    ed18:	ldr	r3, [sp, #12]
    ed1a:	orr.w	r3, r3, #64	; 0x40
    ed1e:	str	r3, [sp, #12]
    ed20:	ldrb.w	r3, [r8]
    ed24:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed26:	ldrb.w	r3, [r8]
    ed2a:	cmp	r1, #0
    ed2c:	bne.w	e5d4 <_svfprintf_r+0xb4>
    ed30:	movs	r2, #1
    ed32:	movs	r1, #32
    ed34:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed36:	ldr	r3, [sp, #12]
    ed38:	orr.w	r3, r3, #1
    ed3c:	str	r3, [sp, #12]
    ed3e:	ldrb.w	r3, [r8]
    ed42:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed44:	ldr	r4, [sp, #40]	; 0x28
    ed46:	ldr	r3, [r4, #0]
    ed48:	str	r3, [sp, #32]
    ed4a:	mov	r0, r3
    ed4c:	cmp	r0, #0
    ed4e:	mov	r3, r4
    ed50:	add.w	r3, r3, #4
    ed54:	blt.w	e698 <_svfprintf_r+0x178>
    ed58:	str	r3, [sp, #40]	; 0x28
    ed5a:	ldrb.w	r3, [r8]
    ed5e:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed60:	ldrb.w	r3, [r8]
    ed64:	movs	r2, #1
    ed66:	movs	r1, #43	; 0x2b
    ed68:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed6a:	ldr	r3, [sp, #12]
    ed6c:	orr.w	r3, r3, #32
    ed70:	str	r3, [sp, #12]
    ed72:	ldrb.w	r3, [r8]
    ed76:	b.n	e5d4 <_svfprintf_r+0xb4>
    ed78:	ldr	r2, [sp, #40]	; 0x28
    ed7a:	str	r3, [sp, #52]	; 0x34
    ed7c:	ldr	r6, [r2, #0]
    ed7e:	movs	r4, #0
    ed80:	strb.w	r4, [sp, #111]	; 0x6f
    ed84:	adds	r7, r2, #4
    ed86:	cmp	r6, #0
    ed88:	beq.w	f9c4 <_svfprintf_r+0x14a4>
    ed8c:	cmp	r5, #0
    ed8e:	blt.w	f854 <_svfprintf_r+0x1334>
    ed92:	mov	r2, r5
    ed94:	mov	r1, r4
    ed96:	mov	r0, r6
    ed98:	bl	c1b0 <memchr>
    ed9c:	cmp	r0, #0
    ed9e:	beq.w	fa68 <_svfprintf_r+0x1548>
    eda2:	subs	r3, r0, r6
    eda4:	str	r3, [sp, #36]	; 0x24
    eda6:	mov	fp, r4
    eda8:	bic.w	r3, r3, r3, asr #31
    edac:	str	r7, [sp, #40]	; 0x28
    edae:	str	r3, [sp, #16]
    edb0:	str.w	fp, [sp, #60]	; 0x3c
    edb4:	ldrb.w	r7, [sp, #111]	; 0x6f
    edb8:	b.n	e8c4 <_svfprintf_r+0x3a4>
    edba:	str	r3, [sp, #52]	; 0x34
    edbc:	mov	fp, r5
    edbe:	cmp	r2, #0
    edc0:	beq.w	ec16 <_svfprintf_r+0x6f6>
    edc4:	strb.w	r1, [sp, #111]	; 0x6f
    edc8:	b.n	ec16 <_svfprintf_r+0x6f6>
    edca:	str	r3, [sp, #52]	; 0x34
    edcc:	mov	fp, r5
    edce:	cmp	r2, #0
    edd0:	bne.w	fbf0 <_svfprintf_r+0x16d0>
    edd4:	ldr	r3, [sp, #12]
    edd6:	ldr	r0, [pc, #344]	; (ef30 <_svfprintf_r+0xa10>)
    edd8:	lsls	r5, r3, #26
    edda:	bmi.w	ec74 <_svfprintf_r+0x754>
    edde:	ldr	r3, [sp, #12]
    ede0:	lsls	r4, r3, #27
    ede2:	bpl.w	f662 <_svfprintf_r+0x1142>
    ede6:	ldr	r2, [sp, #40]	; 0x28
    ede8:	mov	r3, r2
    edea:	adds	r3, #4
    edec:	ldr	r4, [r2, #0]
    edee:	str	r3, [sp, #40]	; 0x28
    edf0:	movs	r5, #0
    edf2:	b.n	ec86 <_svfprintf_r+0x766>
    edf4:	ldrb.w	r3, [r8]
    edf8:	cmp	r3, #108	; 0x6c
    edfa:	beq.w	f782 <_svfprintf_r+0x1262>
    edfe:	ldr	r0, [sp, #12]
    ee00:	orr.w	r0, r0, #16
    ee04:	str	r0, [sp, #12]
    ee06:	b.w	e5d4 <_svfprintf_r+0xb4>
    ee0a:	cmp	r2, #0
    ee0c:	bne.w	fbe8 <_svfprintf_r+0x16c8>
    ee10:	ldr	r3, [sp, #12]
    ee12:	lsls	r3, r3, #26
    ee14:	bpl.w	f4c6 <_svfprintf_r+0xfa6>
    ee18:	ldr	r2, [sp, #40]	; 0x28
    ee1a:	ldr	r1, [sp, #28]
    ee1c:	ldr	r3, [r2, #0]
    ee1e:	asrs	r5, r1, #31
    ee20:	mov	r0, r1
    ee22:	adds	r2, #4
    ee24:	mov	r1, r5
    ee26:	str	r2, [sp, #40]	; 0x28
    ee28:	strd	r0, r1, [r3]
    ee2c:	b.w	e56e <_svfprintf_r+0x4e>
    ee30:	ldr	r0, [pc, #252]	; (ef30 <_svfprintf_r+0xa10>)
    ee32:	str	r2, [sp, #52]	; 0x34
    ee34:	cmp.w	fp, #0
    ee38:	bne.w	f124 <_svfprintf_r+0xc04>
    ee3c:	mov	r7, fp
    ee3e:	mov.w	fp, #0
    ee42:	str.w	fp, [sp, #36]	; 0x24
    ee46:	add	r6, sp, #192	; 0xc0
    ee48:	b.n	e8b6 <_svfprintf_r+0x396>
    ee4a:	str	r3, [sp, #52]	; 0x34
    ee4c:	cmp	r2, #0
    ee4e:	bne.w	fbe0 <_svfprintf_r+0x16c0>
    ee52:	ldr	r2, [sp, #52]	; 0x34
    ee54:	cmp	r2, #0
    ee56:	beq.w	e706 <_svfprintf_r+0x1e6>
    ee5a:	movs	r3, #0
    ee5c:	movs	r1, #1
    ee5e:	mov	r7, r3
    ee60:	str	r1, [sp, #16]
    ee62:	strb.w	r2, [sp, #152]	; 0x98
    ee66:	strb.w	r3, [sp, #111]	; 0x6f
    ee6a:	mov	fp, r3
    ee6c:	str	r3, [sp, #60]	; 0x3c
    ee6e:	str	r1, [sp, #36]	; 0x24
    ee70:	add	r6, sp, #152	; 0x98
    ee72:	b.n	e8cc <_svfprintf_r+0x3ac>
    ee74:	cmp.w	fp, #0
    ee78:	beq.w	fa98 <_svfprintf_r+0x1578>
    ee7c:	movs	r7, #0
    ee7e:	movs	r4, #0
    ee80:	movs	r5, #0
    ee82:	b.n	e76c <_svfprintf_r+0x24c>
    ee84:	ldr	r0, [pc, #168]	; (ef30 <_svfprintf_r+0xa10>)
    ee86:	str	r3, [sp, #12]
    ee88:	str	r2, [sp, #52]	; 0x34
    ee8a:	orrs.w	r3, r4, r5
    ee8e:	str	r7, [sp, #40]	; 0x28
    ee90:	mov.w	r7, #0
    ee94:	bne.w	ecc2 <_svfprintf_r+0x7a2>
    ee98:	movs	r4, #0
    ee9a:	movs	r5, #0
    ee9c:	b.n	ecc2 <_svfprintf_r+0x7a2>
    ee9e:	ldr	r4, [sp, #148]	; 0x94
    eea0:	b.n	e96c <_svfprintf_r+0x44c>
    eea2:	ldr	r3, [sp, #52]	; 0x34
    eea4:	cmp	r3, #101	; 0x65
    eea6:	ble.w	effe <_svfprintf_r+0xade>
    eeaa:	movs	r2, #0
    eeac:	movs	r3, #0
    eeae:	ldrd	r0, r1, [sp, #64]	; 0x40
    eeb2:	bl	b78c <__aeabi_dcmpeq>
    eeb6:	cmp	r0, #0
    eeb8:	beq.w	f128 <_svfprintf_r+0xc08>
    eebc:	ldr	r3, [sp, #144]	; 0x90
    eebe:	ldr	r2, [pc, #116]	; (ef34 <_svfprintf_r+0xa14>)
    eec0:	str.w	r2, [r9]
    eec4:	adds	r3, #1
    eec6:	adds	r4, #1
    eec8:	movs	r2, #1
    eeca:	cmp	r3, #7
    eecc:	str	r4, [sp, #148]	; 0x94
    eece:	str	r3, [sp, #144]	; 0x90
    eed0:	str.w	r2, [r9, #4]
    eed4:	bgt.w	f6b4 <_svfprintf_r+0x1194>
    eed8:	add.w	r9, r9, #8
    eedc:	ldr	r3, [sp, #116]	; 0x74
    eede:	ldr	r2, [sp, #56]	; 0x38
    eee0:	cmp	r3, r2
    eee2:	blt.n	eeec <_svfprintf_r+0x9cc>
    eee4:	ldr	r3, [sp, #12]
    eee6:	lsls	r3, r3, #31
    eee8:	bpl.w	ea4c <_svfprintf_r+0x52c>
    eeec:	ldr	r3, [sp, #144]	; 0x90
    eeee:	ldr	r1, [sp, #72]	; 0x48
    eef0:	ldr	r2, [sp, #76]	; 0x4c
    eef2:	str.w	r2, [r9]
    eef6:	adds	r3, #1
    eef8:	add	r4, r1
    eefa:	cmp	r3, #7
    eefc:	str	r4, [sp, #148]	; 0x94
    eefe:	str.w	r1, [r9, #4]
    ef02:	str	r3, [sp, #144]	; 0x90
    ef04:	bgt.w	f796 <_svfprintf_r+0x1276>
    ef08:	add.w	r9, r9, #8
    ef0c:	ldr	r3, [sp, #56]	; 0x38
    ef0e:	subs	r5, r3, #1
    ef10:	cmp	r5, #0
    ef12:	ble.w	ea4c <_svfprintf_r+0x52c>
    ef16:	ldr	r2, [pc, #32]	; (ef38 <_svfprintf_r+0xa18>)
    ef18:	ldr	r3, [sp, #144]	; 0x90
    ef1a:	str	r2, [sp, #44]	; 0x2c
    ef1c:	cmp	r5, #16
    ef1e:	ble.w	f2f4 <_svfprintf_r+0xdd4>
    ef22:	movs	r6, #16
    ef24:	ldr	r7, [sp, #24]
    ef26:	ldr.w	fp, [sp, #20]
    ef2a:	b.n	ef48 <_svfprintf_r+0xa28>
    ef2c:	.word	0x00010620
    ef30:	.word	0x00010634
    ef34:	.word	0x000105fc
    ef38:	.word	0x00010600
    ef3c:	add.w	r9, r9, #8
    ef40:	subs	r5, #16
    ef42:	cmp	r5, #16
    ef44:	ble.w	f2f4 <_svfprintf_r+0xdd4>
    ef48:	adds	r3, #1
    ef4a:	adds	r4, #16
    ef4c:	cmp	r3, #7
    ef4e:	str	r4, [sp, #148]	; 0x94
    ef50:	str	r3, [sp, #144]	; 0x90
    ef52:	str.w	sl, [r9]
    ef56:	str.w	r6, [r9, #4]
    ef5a:	ble.n	ef3c <_svfprintf_r+0xa1c>
    ef5c:	add	r2, sp, #140	; 0x8c
    ef5e:	mov	r1, fp
    ef60:	mov	r0, r7
    ef62:	bl	fc04 <__ssprint_r>
    ef66:	cmp	r0, #0
    ef68:	bne.w	e714 <_svfprintf_r+0x1f4>
    ef6c:	ldr	r4, [sp, #148]	; 0x94
    ef6e:	ldr	r3, [sp, #144]	; 0x90
    ef70:	add.w	r9, sp, #192	; 0xc0
    ef74:	b.n	ef40 <_svfprintf_r+0xa20>
    ef76:	ldr	r3, [sp, #32]
    ef78:	ldr	r2, [sp, #16]
    ef7a:	subs	r7, r3, r2
    ef7c:	cmp	r7, #0
    ef7e:	ble.w	e9b4 <_svfprintf_r+0x494>
    ef82:	ldr	r2, [pc, #752]	; (f274 <_svfprintf_r+0xd54>)
    ef84:	ldr	r3, [sp, #144]	; 0x90
    ef86:	str	r2, [sp, #44]	; 0x2c
    ef88:	cmp	r7, #16
    ef8a:	ble.n	efe4 <_svfprintf_r+0xac4>
    ef8c:	mov	r2, r9
    ef8e:	mov	r1, r4
    ef90:	mov	r9, r7
    ef92:	movs	r5, #16
    ef94:	mov	r7, r6
    ef96:	ldr	r4, [sp, #24]
    ef98:	ldr	r6, [sp, #20]
    ef9a:	b.n	efaa <_svfprintf_r+0xa8a>
    ef9c:	sub.w	r9, r9, #16
    efa0:	cmp.w	r9, #16
    efa4:	add.w	r2, r2, #8
    efa8:	ble.n	efdc <_svfprintf_r+0xabc>
    efaa:	adds	r3, #1
    efac:	adds	r1, #16
    efae:	cmp	r3, #7
    efb0:	str	r1, [sp, #148]	; 0x94
    efb2:	str	r3, [sp, #144]	; 0x90
    efb4:	str.w	sl, [r2]
    efb8:	str	r5, [r2, #4]
    efba:	ble.n	ef9c <_svfprintf_r+0xa7c>
    efbc:	add	r2, sp, #140	; 0x8c
    efbe:	mov	r1, r6
    efc0:	mov	r0, r4
    efc2:	bl	fc04 <__ssprint_r>
    efc6:	cmp	r0, #0
    efc8:	bne.w	e714 <_svfprintf_r+0x1f4>
    efcc:	sub.w	r9, r9, #16
    efd0:	cmp.w	r9, #16
    efd4:	ldr	r1, [sp, #148]	; 0x94
    efd6:	ldr	r3, [sp, #144]	; 0x90
    efd8:	add	r2, sp, #192	; 0xc0
    efda:	bgt.n	efaa <_svfprintf_r+0xa8a>
    efdc:	mov	r6, r7
    efde:	mov	r4, r1
    efe0:	mov	r7, r9
    efe2:	mov	r9, r2
    efe4:	adds	r3, #1
    efe6:	ldr	r2, [sp, #44]	; 0x2c
    efe8:	str	r3, [sp, #144]	; 0x90
    efea:	add	r4, r7
    efec:	cmp	r3, #7
    efee:	str	r4, [sp, #148]	; 0x94
    eff0:	stmia.w	r9, {r2, r7}
    eff4:	bgt.w	f472 <_svfprintf_r+0xf52>
    eff8:	add.w	r9, r9, #8
    effc:	b.n	e9b4 <_svfprintf_r+0x494>
    effe:	ldr	r3, [sp, #56]	; 0x38
    f000:	ldr	r5, [sp, #144]	; 0x90
    f002:	cmp	r3, #1
    f004:	ble.w	f41c <_svfprintf_r+0xefc>
    f008:	adds	r5, #1
    f00a:	adds	r4, #1
    f00c:	movs	r3, #1
    f00e:	cmp	r5, #7
    f010:	str	r4, [sp, #148]	; 0x94
    f012:	str	r5, [sp, #144]	; 0x90
    f014:	str.w	r6, [r9]
    f018:	str.w	r3, [r9, #4]
    f01c:	bgt.w	f43e <_svfprintf_r+0xf1e>
    f020:	add.w	r9, r9, #8
    f024:	ldr	r2, [sp, #72]	; 0x48
    f026:	ldr	r3, [sp, #76]	; 0x4c
    f028:	str.w	r3, [r9]
    f02c:	adds	r5, #1
    f02e:	add	r4, r2
    f030:	cmp	r5, #7
    f032:	str	r4, [sp, #148]	; 0x94
    f034:	str	r5, [sp, #144]	; 0x90
    f036:	str.w	r2, [r9, #4]
    f03a:	bgt.w	f458 <_svfprintf_r+0xf38>
    f03e:	add.w	r9, r9, #8
    f042:	movs	r3, #0
    f044:	movs	r2, #0
    f046:	ldrd	r0, r1, [sp, #64]	; 0x40
    f04a:	bl	b78c <__aeabi_dcmpeq>
    f04e:	ldr	r3, [sp, #56]	; 0x38
    f050:	cmp	r0, #0
    f052:	bne.w	f1dc <_svfprintf_r+0xcbc>
    f056:	subs	r3, #1
    f058:	adds	r5, #1
    f05a:	adds	r6, #1
    f05c:	add	r4, r3
    f05e:	cmp	r5, #7
    f060:	str	r5, [sp, #144]	; 0x90
    f062:	str	r4, [sp, #148]	; 0x94
    f064:	str.w	r6, [r9]
    f068:	str.w	r3, [r9, #4]
    f06c:	bgt.w	f25a <_svfprintf_r+0xd3a>
    f070:	add.w	r9, r9, #8
    f074:	ldr	r2, [sp, #84]	; 0x54
    f076:	str.w	r2, [r9, #4]
    f07a:	adds	r5, #1
    f07c:	add	r4, r2
    f07e:	add	r3, sp, #124	; 0x7c
    f080:	cmp	r5, #7
    f082:	str	r4, [sp, #148]	; 0x94
    f084:	str	r5, [sp, #144]	; 0x90
    f086:	str.w	r3, [r9]
    f08a:	ble.w	ea48 <_svfprintf_r+0x528>
    f08e:	add	r2, sp, #140	; 0x8c
    f090:	ldr	r1, [sp, #20]
    f092:	ldr	r0, [sp, #24]
    f094:	bl	fc04 <__ssprint_r>
    f098:	cmp	r0, #0
    f09a:	bne.w	e714 <_svfprintf_r+0x1f4>
    f09e:	ldr	r4, [sp, #148]	; 0x94
    f0a0:	add.w	r9, sp, #192	; 0xc0
    f0a4:	b.n	ea4c <_svfprintf_r+0x52c>
    f0a6:	add	r2, sp, #140	; 0x8c
    f0a8:	ldr	r1, [sp, #20]
    f0aa:	ldr	r0, [sp, #24]
    f0ac:	bl	fc04 <__ssprint_r>
    f0b0:	cmp	r0, #0
    f0b2:	beq.w	eae8 <_svfprintf_r+0x5c8>
    f0b6:	b.w	e714 <_svfprintf_r+0x1f4>
    f0ba:	add	r2, sp, #140	; 0x8c
    f0bc:	ldr	r1, [sp, #20]
    f0be:	ldr	r0, [sp, #24]
    f0c0:	bl	fc04 <__ssprint_r>
    f0c4:	cmp	r0, #0
    f0c6:	bne.w	e714 <_svfprintf_r+0x1f4>
    f0ca:	ldr	r4, [sp, #148]	; 0x94
    f0cc:	add.w	r9, sp, #192	; 0xc0
    f0d0:	b.n	ea26 <_svfprintf_r+0x506>
    f0d2:	add	r2, sp, #140	; 0x8c
    f0d4:	ldr	r1, [sp, #20]
    f0d6:	ldr	r0, [sp, #24]
    f0d8:	bl	fc04 <__ssprint_r>
    f0dc:	cmp	r0, #0
    f0de:	bne.w	e714 <_svfprintf_r+0x1f4>
    f0e2:	ldr	r4, [sp, #148]	; 0x94
    f0e4:	add.w	r9, sp, #192	; 0xc0
    f0e8:	b.n	e98c <_svfprintf_r+0x46c>
    f0ea:	add	r2, sp, #140	; 0x8c
    f0ec:	ldr	r1, [sp, #20]
    f0ee:	ldr	r0, [sp, #24]
    f0f0:	bl	fc04 <__ssprint_r>
    f0f4:	cmp	r0, #0
    f0f6:	bne.w	e714 <_svfprintf_r+0x1f4>
    f0fa:	ldr	r4, [sp, #148]	; 0x94
    f0fc:	add.w	r9, sp, #192	; 0xc0
    f100:	b.n	e9ac <_svfprintf_r+0x48c>
    f102:	cmp.w	fp, #0
    f106:	strb.w	r7, [sp, #111]	; 0x6f
    f10a:	blt.w	f6cc <_svfprintf_r+0x11ac>
    f10e:	bic.w	r3, r2, #128	; 0x80
    f112:	str	r3, [sp, #12]
    f114:	orrs.w	r3, r4, r5
    f118:	bne.w	ecc2 <_svfprintf_r+0x7a2>
    f11c:	cmp.w	fp, #0
    f120:	beq.w	ee3c <_svfprintf_r+0x91c>
    f124:	movs	r7, #0
    f126:	b.n	ee98 <_svfprintf_r+0x978>
    f128:	ldr	r5, [sp, #116]	; 0x74
    f12a:	cmp	r5, #0
    f12c:	ble.w	f6d2 <_svfprintf_r+0x11b2>
    f130:	ldr	r3, [sp, #60]	; 0x3c
    f132:	ldr	r2, [sp, #56]	; 0x38
    f134:	cmp	r3, r2
    f136:	it	ge
    f138:	movge	r3, r2
    f13a:	cmp	r3, #0
    f13c:	mov	r5, r3
    f13e:	ble.n	f15c <_svfprintf_r+0xc3c>
    f140:	ldr	r3, [sp, #144]	; 0x90
    f142:	str.w	r6, [r9]
    f146:	adds	r3, #1
    f148:	add	r4, r5
    f14a:	cmp	r3, #7
    f14c:	str	r4, [sp, #148]	; 0x94
    f14e:	str.w	r5, [r9, #4]
    f152:	str	r3, [sp, #144]	; 0x90
    f154:	bgt.w	f8aa <_svfprintf_r+0x138a>
    f158:	add.w	r9, r9, #8
    f15c:	ldr	r3, [sp, #60]	; 0x3c
    f15e:	cmp	r5, #0
    f160:	it	ge
    f162:	subge	r3, r3, r5
    f164:	cmp	r3, #0
    f166:	mov	r5, r3
    f168:	ble.w	f35c <_svfprintf_r+0xe3c>
    f16c:	ldr	r2, [pc, #260]	; (f274 <_svfprintf_r+0xd54>)
    f16e:	ldr	r3, [sp, #144]	; 0x90
    f170:	str	r2, [sp, #44]	; 0x2c
    f172:	cmp	r5, #16
    f174:	ble.w	f67e <_svfprintf_r+0x115e>
    f178:	mov	r2, r4
    f17a:	movs	r7, #16
    f17c:	ldr.w	fp, [sp, #24]
    f180:	ldr	r4, [sp, #20]
    f182:	b.n	f190 <_svfprintf_r+0xc70>
    f184:	add.w	r9, r9, #8
    f188:	subs	r5, #16
    f18a:	cmp	r5, #16
    f18c:	ble.w	f67c <_svfprintf_r+0x115c>
    f190:	adds	r3, #1
    f192:	adds	r2, #16
    f194:	cmp	r3, #7
    f196:	str	r2, [sp, #148]	; 0x94
    f198:	str	r3, [sp, #144]	; 0x90
    f19a:	str.w	sl, [r9]
    f19e:	str.w	r7, [r9, #4]
    f1a2:	ble.n	f184 <_svfprintf_r+0xc64>
    f1a4:	add	r2, sp, #140	; 0x8c
    f1a6:	mov	r1, r4
    f1a8:	mov	r0, fp
    f1aa:	bl	fc04 <__ssprint_r>
    f1ae:	cmp	r0, #0
    f1b0:	bne.w	e714 <_svfprintf_r+0x1f4>
    f1b4:	ldr	r2, [sp, #148]	; 0x94
    f1b6:	ldr	r3, [sp, #144]	; 0x90
    f1b8:	add.w	r9, sp, #192	; 0xc0
    f1bc:	b.n	f188 <_svfprintf_r+0xc68>
    f1be:	add	r2, sp, #140	; 0x8c
    f1c0:	ldr	r1, [sp, #20]
    f1c2:	ldr	r0, [sp, #24]
    f1c4:	bl	fc04 <__ssprint_r>
    f1c8:	cmp	r0, #0
    f1ca:	bne.w	e714 <_svfprintf_r+0x1f4>
    f1ce:	ldrb.w	r7, [sp, #111]	; 0x6f
    f1d2:	ldr	r4, [sp, #148]	; 0x94
    f1d4:	add.w	r9, sp, #192	; 0xc0
    f1d8:	b.w	e96c <_svfprintf_r+0x44c>
    f1dc:	subs	r6, r3, #1
    f1de:	cmp	r6, #0
    f1e0:	ble.w	f074 <_svfprintf_r+0xb54>
    f1e4:	ldr	r3, [pc, #140]	; (f274 <_svfprintf_r+0xd54>)
    f1e6:	str	r3, [sp, #44]	; 0x2c
    f1e8:	cmp	r6, #16
    f1ea:	ble.n	f246 <_svfprintf_r+0xd26>
    f1ec:	str.w	r8, [sp, #36]	; 0x24
    f1f0:	movs	r7, #16
    f1f2:	mov	r8, r6
    f1f4:	ldr.w	fp, [sp, #24]
    f1f8:	ldr	r6, [sp, #20]
    f1fa:	b.n	f20a <_svfprintf_r+0xcea>
    f1fc:	sub.w	r8, r8, #16
    f200:	cmp.w	r8, #16
    f204:	add.w	r9, r9, #8
    f208:	ble.n	f240 <_svfprintf_r+0xd20>
    f20a:	adds	r5, #1
    f20c:	adds	r4, #16
    f20e:	cmp	r5, #7
    f210:	str	r4, [sp, #148]	; 0x94
    f212:	str	r5, [sp, #144]	; 0x90
    f214:	str.w	sl, [r9]
    f218:	str.w	r7, [r9, #4]
    f21c:	ble.n	f1fc <_svfprintf_r+0xcdc>
    f21e:	add	r2, sp, #140	; 0x8c
    f220:	mov	r1, r6
    f222:	mov	r0, fp
    f224:	bl	fc04 <__ssprint_r>
    f228:	cmp	r0, #0
    f22a:	bne.w	e714 <_svfprintf_r+0x1f4>
    f22e:	sub.w	r8, r8, #16
    f232:	cmp.w	r8, #16
    f236:	ldr	r4, [sp, #148]	; 0x94
    f238:	ldr	r5, [sp, #144]	; 0x90
    f23a:	add.w	r9, sp, #192	; 0xc0
    f23e:	bgt.n	f20a <_svfprintf_r+0xcea>
    f240:	mov	r6, r8
    f242:	ldr.w	r8, [sp, #36]	; 0x24
    f246:	ldr	r3, [sp, #44]	; 0x2c
    f248:	adds	r5, #1
    f24a:	add	r4, r6
    f24c:	cmp	r5, #7
    f24e:	str	r4, [sp, #148]	; 0x94
    f250:	str	r5, [sp, #144]	; 0x90
    f252:	stmia.w	r9, {r3, r6}
    f256:	ble.w	f070 <_svfprintf_r+0xb50>
    f25a:	add	r2, sp, #140	; 0x8c
    f25c:	ldr	r1, [sp, #20]
    f25e:	ldr	r0, [sp, #24]
    f260:	bl	fc04 <__ssprint_r>
    f264:	cmp	r0, #0
    f266:	bne.w	e714 <_svfprintf_r+0x1f4>
    f26a:	ldr	r4, [sp, #148]	; 0x94
    f26c:	ldr	r5, [sp, #144]	; 0x90
    f26e:	add.w	r9, sp, #192	; 0xc0
    f272:	b.n	f074 <_svfprintf_r+0xb54>
    f274:	.word	0x00010600
    f278:	ldr	r1, [sp, #12]
    f27a:	ands.w	r2, r1, #16
    f27e:	beq.w	f628 <_svfprintf_r+0x1108>
    f282:	ldr	r0, [sp, #40]	; 0x28
    f284:	strb.w	r3, [sp, #111]	; 0x6f
    f288:	cmp.w	fp, #0
    f28c:	ldr	r4, [r0, #0]
    f28e:	add.w	r7, r0, #4
    f292:	mov.w	r5, #0
    f296:	blt.n	f2e6 <_svfprintf_r+0xdc6>
    f298:	mov	r2, r1
    f29a:	bic.w	r2, r2, #128	; 0x80
    f29e:	str	r2, [sp, #12]
    f2a0:	orrs.w	r2, r4, r5
    f2a4:	str	r7, [sp, #40]	; 0x28
    f2a6:	mov	r7, r3
    f2a8:	bne.w	e87c <_svfprintf_r+0x35c>
    f2ac:	b.n	ec4c <_svfprintf_r+0x72c>
    f2ae:	ldr	r3, [sp, #12]
    f2b0:	lsls	r0, r3, #27
    f2b2:	bmi.n	f30a <_svfprintf_r+0xdea>
    f2b4:	ldr	r3, [sp, #12]
    f2b6:	lsls	r1, r3, #25
    f2b8:	bpl.n	f30a <_svfprintf_r+0xdea>
    f2ba:	ldr	r1, [sp, #40]	; 0x28
    f2bc:	ldrsh.w	r4, [r1]
    f2c0:	adds	r1, #4
    f2c2:	asrs	r5, r4, #31
    f2c4:	mov	r2, r4
    f2c6:	mov	r3, r5
    f2c8:	str	r1, [sp, #40]	; 0x28
    f2ca:	b.w	e856 <_svfprintf_r+0x336>
    f2ce:	ldr	r1, [sp, #40]	; 0x28
    f2d0:	strb.w	r3, [sp, #111]	; 0x6f
    f2d4:	cmp.w	fp, #0
    f2d8:	ldr	r4, [r1, #0]
    f2da:	add.w	r7, r1, #4
    f2de:	mov.w	r5, #0
    f2e2:	bge.w	f77e <_svfprintf_r+0x125e>
    f2e6:	str	r7, [sp, #40]	; 0x28
    f2e8:	mov	r7, r3
    f2ea:	orrs.w	r3, r4, r5
    f2ee:	bne.w	e87c <_svfprintf_r+0x35c>
    f2f2:	b.n	ec56 <_svfprintf_r+0x736>
    f2f4:	adds	r3, #1
    f2f6:	ldr	r2, [sp, #44]	; 0x2c
    f2f8:	str	r3, [sp, #144]	; 0x90
    f2fa:	add	r4, r5
    f2fc:	cmp	r3, #7
    f2fe:	str	r4, [sp, #148]	; 0x94
    f300:	stmia.w	r9, {r2, r5}
    f304:	ble.w	ea48 <_svfprintf_r+0x528>
    f308:	b.n	f08e <_svfprintf_r+0xb6e>
    f30a:	ldr	r2, [sp, #40]	; 0x28
    f30c:	ldr	r4, [r2, #0]
    f30e:	mov	r3, r2
    f310:	adds	r3, #4
    f312:	asrs	r5, r4, #31
    f314:	mov	r2, r4
    f316:	str	r3, [sp, #40]	; 0x28
    f318:	cmp	r2, #0
    f31a:	mov	r3, r5
    f31c:	sbcs.w	r3, r3, #0
    f320:	bge.w	e860 <_svfprintf_r+0x340>
    f324:	negs	r4, r4
    f326:	mov.w	r7, #45	; 0x2d
    f32a:	sbc.w	r5, r5, r5, lsl #1
    f32e:	cmp.w	fp, #0
    f332:	strb.w	r7, [sp, #111]	; 0x6f
    f336:	blt.w	e87c <_svfprintf_r+0x35c>
    f33a:	ldr	r3, [sp, #12]
    f33c:	bic.w	r3, r3, #128	; 0x80
    f340:	str	r3, [sp, #12]
    f342:	b.w	e87c <_svfprintf_r+0x35c>
    f346:	add	r2, sp, #140	; 0x8c
    f348:	ldr	r1, [sp, #20]
    f34a:	ldr	r0, [sp, #24]
    f34c:	bl	fc04 <__ssprint_r>
    f350:	cmp	r0, #0
    f352:	bne.w	e714 <_svfprintf_r+0x1f4>
    f356:	ldr	r4, [sp, #148]	; 0x94
    f358:	add.w	r9, sp, #192	; 0xc0
    f35c:	ldr	r2, [sp, #60]	; 0x3c
    f35e:	ldr	r3, [sp, #116]	; 0x74
    f360:	add	r2, r6
    f362:	mov	r7, r2
    f364:	ldr	r2, [sp, #56]	; 0x38
    f366:	cmp	r3, r2
    f368:	blt.n	f3fa <_svfprintf_r+0xeda>
    f36a:	ldr	r2, [sp, #12]
    f36c:	lsls	r5, r2, #31
    f36e:	bmi.n	f3fa <_svfprintf_r+0xeda>
    f370:	ldr	r1, [sp, #56]	; 0x38
    f372:	add	r6, r1
    f374:	subs	r5, r6, r7
    f376:	subs	r3, r1, r3
    f378:	cmp	r5, r3
    f37a:	it	ge
    f37c:	movge	r5, r3
    f37e:	cmp	r5, #0
    f380:	mov	r6, r5
    f382:	ble.n	f3a0 <_svfprintf_r+0xe80>
    f384:	ldr	r2, [sp, #144]	; 0x90
    f386:	str.w	r7, [r9]
    f38a:	adds	r2, #1
    f38c:	add	r4, r5
    f38e:	cmp	r2, #7
    f390:	str	r4, [sp, #148]	; 0x94
    f392:	str.w	r5, [r9, #4]
    f396:	str	r2, [sp, #144]	; 0x90
    f398:	bgt.w	f998 <_svfprintf_r+0x1478>
    f39c:	add.w	r9, r9, #8
    f3a0:	cmp	r6, #0
    f3a2:	ite	ge
    f3a4:	subge	r5, r3, r6
    f3a6:	movlt	r5, r3
    f3a8:	cmp	r5, #0
    f3aa:	ble.w	ea4c <_svfprintf_r+0x52c>
    f3ae:	ldr	r2, [pc, #744]	; (f698 <_svfprintf_r+0x1178>)
    f3b0:	ldr	r3, [sp, #144]	; 0x90
    f3b2:	str	r2, [sp, #44]	; 0x2c
    f3b4:	cmp	r5, #16
    f3b6:	ble.n	f2f4 <_svfprintf_r+0xdd4>
    f3b8:	movs	r6, #16
    f3ba:	ldr	r7, [sp, #24]
    f3bc:	ldr.w	fp, [sp, #20]
    f3c0:	b.n	f3cc <_svfprintf_r+0xeac>
    f3c2:	add.w	r9, r9, #8
    f3c6:	subs	r5, #16
    f3c8:	cmp	r5, #16
    f3ca:	ble.n	f2f4 <_svfprintf_r+0xdd4>
    f3cc:	adds	r3, #1
    f3ce:	adds	r4, #16
    f3d0:	cmp	r3, #7
    f3d2:	str	r4, [sp, #148]	; 0x94
    f3d4:	str	r3, [sp, #144]	; 0x90
    f3d6:	str.w	sl, [r9]
    f3da:	str.w	r6, [r9, #4]
    f3de:	ble.n	f3c2 <_svfprintf_r+0xea2>
    f3e0:	add	r2, sp, #140	; 0x8c
    f3e2:	mov	r1, fp
    f3e4:	mov	r0, r7
    f3e6:	bl	fc04 <__ssprint_r>
    f3ea:	cmp	r0, #0
    f3ec:	bne.w	e714 <_svfprintf_r+0x1f4>
    f3f0:	ldr	r4, [sp, #148]	; 0x94
    f3f2:	ldr	r3, [sp, #144]	; 0x90
    f3f4:	add.w	r9, sp, #192	; 0xc0
    f3f8:	b.n	f3c6 <_svfprintf_r+0xea6>
    f3fa:	ldr	r2, [sp, #144]	; 0x90
    f3fc:	ldr	r0, [sp, #72]	; 0x48
    f3fe:	ldr	r1, [sp, #76]	; 0x4c
    f400:	str.w	r1, [r9]
    f404:	adds	r2, #1
    f406:	add	r4, r0
    f408:	cmp	r2, #7
    f40a:	str	r4, [sp, #148]	; 0x94
    f40c:	str.w	r0, [r9, #4]
    f410:	str	r2, [sp, #144]	; 0x90
    f412:	bgt.w	f97e <_svfprintf_r+0x145e>
    f416:	add.w	r9, r9, #8
    f41a:	b.n	f370 <_svfprintf_r+0xe50>
    f41c:	ldr	r3, [sp, #12]
    f41e:	lsls	r0, r3, #31
    f420:	bmi.w	f008 <_svfprintf_r+0xae8>
    f424:	adds	r5, #1
    f426:	adds	r4, #1
    f428:	movs	r3, #1
    f42a:	cmp	r5, #7
    f42c:	str	r4, [sp, #148]	; 0x94
    f42e:	str	r5, [sp, #144]	; 0x90
    f430:	str.w	r6, [r9]
    f434:	str.w	r3, [r9, #4]
    f438:	ble.w	f070 <_svfprintf_r+0xb50>
    f43c:	b.n	f25a <_svfprintf_r+0xd3a>
    f43e:	add	r2, sp, #140	; 0x8c
    f440:	ldr	r1, [sp, #20]
    f442:	ldr	r0, [sp, #24]
    f444:	bl	fc04 <__ssprint_r>
    f448:	cmp	r0, #0
    f44a:	bne.w	e714 <_svfprintf_r+0x1f4>
    f44e:	ldr	r4, [sp, #148]	; 0x94
    f450:	ldr	r5, [sp, #144]	; 0x90
    f452:	add.w	r9, sp, #192	; 0xc0
    f456:	b.n	f024 <_svfprintf_r+0xb04>
    f458:	add	r2, sp, #140	; 0x8c
    f45a:	ldr	r1, [sp, #20]
    f45c:	ldr	r0, [sp, #24]
    f45e:	bl	fc04 <__ssprint_r>
    f462:	cmp	r0, #0
    f464:	bne.w	e714 <_svfprintf_r+0x1f4>
    f468:	ldr	r4, [sp, #148]	; 0x94
    f46a:	ldr	r5, [sp, #144]	; 0x90
    f46c:	add.w	r9, sp, #192	; 0xc0
    f470:	b.n	f042 <_svfprintf_r+0xb22>
    f472:	add	r2, sp, #140	; 0x8c
    f474:	ldr	r1, [sp, #20]
    f476:	ldr	r0, [sp, #24]
    f478:	bl	fc04 <__ssprint_r>
    f47c:	cmp	r0, #0
    f47e:	bne.w	e714 <_svfprintf_r+0x1f4>
    f482:	ldr	r4, [sp, #148]	; 0x94
    f484:	add.w	r9, sp, #192	; 0xc0
    f488:	b.w	e9b4 <_svfprintf_r+0x494>
    f48c:	ldr	r1, [sp, #12]
    f48e:	ands.w	r3, r1, #64	; 0x40
    f492:	beq.w	f608 <_svfprintf_r+0x10e8>
    f496:	ldr	r0, [sp, #40]	; 0x28
    f498:	strb.w	r2, [sp, #111]	; 0x6f
    f49c:	mov	r3, r0
    f49e:	cmp.w	fp, #0
    f4a2:	add.w	r3, r3, #4
    f4a6:	ldrh	r4, [r0, #0]
    f4a8:	mov.w	r5, #0
    f4ac:	blt.w	f830 <_svfprintf_r+0x1310>
    f4b0:	bic.w	r1, r1, #128	; 0x80
    f4b4:	str	r1, [sp, #12]
    f4b6:	orrs.w	r1, r4, r5
    f4ba:	str	r3, [sp, #40]	; 0x28
    f4bc:	beq.w	ee74 <_svfprintf_r+0x954>
    f4c0:	mov	r7, r2
    f4c2:	b.w	e76c <_svfprintf_r+0x24c>
    f4c6:	ldr	r3, [sp, #12]
    f4c8:	lsls	r7, r3, #27
    f4ca:	bmi.n	f4e4 <_svfprintf_r+0xfc4>
    f4cc:	ldr	r3, [sp, #12]
    f4ce:	lsls	r6, r3, #25
    f4d0:	bpl.n	f4e4 <_svfprintf_r+0xfc4>
    f4d2:	ldr	r2, [sp, #40]	; 0x28
    f4d4:	ldr	r3, [r2, #0]
    f4d6:	adds	r2, #4
    f4d8:	str	r2, [sp, #40]	; 0x28
    f4da:	ldrh.w	r2, [sp, #28]
    f4de:	strh	r2, [r3, #0]
    f4e0:	b.w	e56e <_svfprintf_r+0x4e>
    f4e4:	ldr	r2, [sp, #40]	; 0x28
    f4e6:	ldr	r3, [r2, #0]
    f4e8:	adds	r2, #4
    f4ea:	str	r2, [sp, #40]	; 0x28
    f4ec:	ldr	r2, [sp, #28]
    f4ee:	str	r2, [r3, #0]
    f4f0:	b.w	e56e <_svfprintf_r+0x4e>
    f4f4:	ldrd	r0, r1, [sp, #64]	; 0x40
    f4f8:	mov	r2, r0
    f4fa:	mov	r3, r1
    f4fc:	bl	b7f0 <__aeabi_dcmpun>
    f500:	cmp	r0, #0
    f502:	bne.w	fb00 <_svfprintf_r+0x15e0>
    f506:	ldr	r3, [sp, #52]	; 0x34
    f508:	cmp.w	fp, #4294967295
    f50c:	bic.w	r7, r3, #32
    f510:	beq.w	f9e2 <_svfprintf_r+0x14c2>
    f514:	cmp	r7, #71	; 0x47
    f516:	beq.w	f81e <_svfprintf_r+0x12fe>
    f51a:	ldr	r3, [sp, #68]	; 0x44
    f51c:	ldr	r2, [sp, #12]
    f51e:	cmp	r3, #0
    f520:	orr.w	r2, r2, #256	; 0x100
    f524:	str	r2, [sp, #44]	; 0x2c
    f526:	blt.w	fa1a <_svfprintf_r+0x14fa>
    f52a:	vldr	d7, [sp, #64]	; 0x40
    f52e:	vstr	d7, [sp, #96]	; 0x60
    f532:	movs	r3, #0
    f534:	str	r3, [sp, #16]
    f536:	ldr	r3, [sp, #52]	; 0x34
    f538:	cmp	r3, #102	; 0x66
    f53a:	beq.w	f9e8 <_svfprintf_r+0x14c8>
    f53e:	cmp	r3, #70	; 0x46
    f540:	beq.w	f7ce <_svfprintf_r+0x12ae>
    f544:	cmp	r7, #69	; 0x45
    f546:	ite	eq
    f548:	addeq.w	r5, fp, #1
    f54c:	movne	r5, fp
    f54e:	add	r2, sp, #132	; 0x84
    f550:	add	r3, sp, #120	; 0x78
    f552:	str	r2, [sp, #4]
    f554:	str	r3, [sp, #0]
    f556:	mov	r2, r5
    f558:	add	r3, sp, #116	; 0x74
    f55a:	movs	r1, #2
    f55c:	vldr	d0, [sp, #96]	; 0x60
    f560:	ldr	r0, [sp, #24]
    f562:	bl	d6e8 <_dtoa_r>
    f566:	ldr	r3, [sp, #52]	; 0x34
    f568:	cmp	r3, #103	; 0x67
    f56a:	mov	r6, r0
    f56c:	bne.w	fa46 <_svfprintf_r+0x1526>
    f570:	ldr	r3, [sp, #12]
    f572:	lsls	r2, r3, #31
    f574:	bpl.w	faea <_svfprintf_r+0x15ca>
    f578:	adds	r4, r6, r5
    f57a:	movs	r2, #0
    f57c:	movs	r3, #0
    f57e:	ldrd	r0, r1, [sp, #96]	; 0x60
    f582:	bl	b78c <__aeabi_dcmpeq>
    f586:	cmp	r0, #0
    f588:	bne.w	f8a6 <_svfprintf_r+0x1386>
    f58c:	ldr	r3, [sp, #132]	; 0x84
    f58e:	cmp	r4, r3
    f590:	bls.n	f5a0 <_svfprintf_r+0x1080>
    f592:	movs	r1, #48	; 0x30
    f594:	adds	r2, r3, #1
    f596:	str	r2, [sp, #132]	; 0x84
    f598:	strb	r1, [r3, #0]
    f59a:	ldr	r3, [sp, #132]	; 0x84
    f59c:	cmp	r4, r3
    f59e:	bhi.n	f594 <_svfprintf_r+0x1074>
    f5a0:	subs	r3, r3, r6
    f5a2:	cmp	r7, #71	; 0x47
    f5a4:	str	r3, [sp, #56]	; 0x38
    f5a6:	beq.w	f898 <_svfprintf_r+0x1378>
    f5aa:	ldr	r3, [sp, #52]	; 0x34
    f5ac:	cmp	r3, #101	; 0x65
    f5ae:	ble.w	fa64 <_svfprintf_r+0x1544>
    f5b2:	ldr	r3, [sp, #52]	; 0x34
    f5b4:	cmp	r3, #102	; 0x66
    f5b6:	ldr	r3, [sp, #116]	; 0x74
    f5b8:	str	r3, [sp, #60]	; 0x3c
    f5ba:	beq.w	fa7e <_svfprintf_r+0x155e>
    f5be:	ldr	r2, [sp, #60]	; 0x3c
    f5c0:	ldr	r1, [sp, #56]	; 0x38
    f5c2:	cmp	r2, r1
    f5c4:	blt.w	fa2c <_svfprintf_r+0x150c>
    f5c8:	ldr	r3, [sp, #12]
    f5ca:	lsls	r1, r3, #31
    f5cc:	bmi.w	faee <_svfprintf_r+0x15ce>
    f5d0:	bic.w	r3, r2, r2, asr #31
    f5d4:	str	r2, [sp, #36]	; 0x24
    f5d6:	movs	r2, #103	; 0x67
    f5d8:	str	r2, [sp, #52]	; 0x34
    f5da:	ldr	r2, [sp, #16]
    f5dc:	cmp	r2, #0
    f5de:	bne.w	f840 <_svfprintf_r+0x1320>
    f5e2:	str	r3, [sp, #16]
    f5e4:	ldr	r3, [sp, #44]	; 0x2c
    f5e6:	str	r3, [sp, #12]
    f5e8:	mov	fp, r2
    f5ea:	ldrb.w	r7, [sp, #111]	; 0x6f
    f5ee:	b.w	e8c4 <_svfprintf_r+0x3a4>
    f5f2:	bic.w	r7, r7, #7
    f5f6:	vldr	d7, [r7]
    f5fa:	add.w	r3, r7, #8
    f5fe:	vstr	d7, [sp, #64]	; 0x40
    f602:	str	r3, [sp, #40]	; 0x28
    f604:	b.w	eb1c <_svfprintf_r+0x5fc>
    f608:	ldr	r1, [sp, #40]	; 0x28
    f60a:	strb.w	r3, [sp, #111]	; 0x6f
    f60e:	cmp.w	fp, #0
    f612:	ldr	r4, [r1, #0]
    f614:	add.w	r7, r1, #4
    f618:	mov.w	r5, #0
    f61c:	bge.w	f778 <_svfprintf_r+0x1258>
    f620:	str	r7, [sp, #40]	; 0x28
    f622:	movs	r7, #0
    f624:	b.w	e76c <_svfprintf_r+0x24c>
    f628:	ldr	r1, [sp, #12]
    f62a:	ands.w	r3, r1, #64	; 0x40
    f62e:	beq.w	f2ce <_svfprintf_r+0xdae>
    f632:	ldr	r0, [sp, #40]	; 0x28
    f634:	strb.w	r2, [sp, #111]	; 0x6f
    f638:	mov	r3, r0
    f63a:	cmp.w	fp, #0
    f63e:	add.w	r3, r3, #4
    f642:	ldrh	r4, [r0, #0]
    f644:	mov.w	r5, #0
    f648:	blt.w	f82a <_svfprintf_r+0x130a>
    f64c:	bic.w	r1, r1, #128	; 0x80
    f650:	str	r1, [sp, #12]
    f652:	orrs.w	r1, r4, r5
    f656:	str	r3, [sp, #40]	; 0x28
    f658:	mov	r7, r2
    f65a:	bne.w	e87c <_svfprintf_r+0x35c>
    f65e:	b.w	ec4c <_svfprintf_r+0x72c>
    f662:	ldr	r3, [sp, #12]
    f664:	ldr	r2, [sp, #40]	; 0x28
    f666:	tst.w	r3, #64	; 0x40
    f66a:	mov	r3, r2
    f66c:	beq.w	f834 <_svfprintf_r+0x1314>
    f670:	adds	r3, #4
    f672:	ldrh	r4, [r2, #0]
    f674:	str	r3, [sp, #40]	; 0x28
    f676:	movs	r5, #0
    f678:	b.w	ec86 <_svfprintf_r+0x766>
    f67c:	mov	r4, r2
    f67e:	adds	r3, #1
    f680:	ldr	r2, [sp, #44]	; 0x2c
    f682:	str	r3, [sp, #144]	; 0x90
    f684:	add	r4, r5
    f686:	cmp	r3, #7
    f688:	str	r4, [sp, #148]	; 0x94
    f68a:	stmia.w	r9, {r2, r5}
    f68e:	bgt.w	f346 <_svfprintf_r+0xe26>
    f692:	add.w	r9, r9, #8
    f696:	b.n	f35c <_svfprintf_r+0xe3c>
    f698:	.word	0x00010600
    f69c:	movs	r7, #0
    f69e:	cmp	fp, r7
    f6a0:	strb.w	r7, [sp, #111]	; 0x6f
    f6a4:	blt.w	ee98 <_svfprintf_r+0x978>
    f6a8:	ldr	r3, [sp, #12]
    f6aa:	bic.w	r3, r3, #128	; 0x80
    f6ae:	str	r3, [sp, #12]
    f6b0:	b.w	ee34 <_svfprintf_r+0x914>
    f6b4:	add	r2, sp, #140	; 0x8c
    f6b6:	ldr	r1, [sp, #20]
    f6b8:	ldr	r0, [sp, #24]
    f6ba:	bl	fc04 <__ssprint_r>
    f6be:	cmp	r0, #0
    f6c0:	bne.w	e714 <_svfprintf_r+0x1f4>
    f6c4:	ldr	r4, [sp, #148]	; 0x94
    f6c6:	add.w	r9, sp, #192	; 0xc0
    f6ca:	b.n	eedc <_svfprintf_r+0x9bc>
    f6cc:	ldr	r7, [sp, #40]	; 0x28
    f6ce:	b.w	ee8a <_svfprintf_r+0x96a>
    f6d2:	ldr	r3, [sp, #144]	; 0x90
    f6d4:	ldr	r2, [pc, #736]	; (f9b8 <_svfprintf_r+0x1498>)
    f6d6:	str.w	r2, [r9]
    f6da:	adds	r3, #1
    f6dc:	adds	r4, #1
    f6de:	movs	r2, #1
    f6e0:	cmp	r3, #7
    f6e2:	str	r4, [sp, #148]	; 0x94
    f6e4:	str	r3, [sp, #144]	; 0x90
    f6e6:	str.w	r2, [r9, #4]
    f6ea:	bgt.w	f804 <_svfprintf_r+0x12e4>
    f6ee:	add.w	r9, r9, #8
    f6f2:	cbnz	r5, f700 <_svfprintf_r+0x11e0>
    f6f4:	ldr	r3, [sp, #56]	; 0x38
    f6f6:	cbnz	r3, f700 <_svfprintf_r+0x11e0>
    f6f8:	ldr	r3, [sp, #12]
    f6fa:	lsls	r7, r3, #31
    f6fc:	bpl.w	ea4c <_svfprintf_r+0x52c>
    f700:	ldr	r3, [sp, #144]	; 0x90
    f702:	ldr	r1, [sp, #72]	; 0x48
    f704:	ldr	r2, [sp, #76]	; 0x4c
    f706:	str.w	r2, [r9]
    f70a:	adds	r3, #1
    f70c:	add	r4, r1
    f70e:	cmp	r3, #7
    f710:	str	r4, [sp, #148]	; 0x94
    f712:	str.w	r1, [r9, #4]
    f716:	str	r3, [sp, #144]	; 0x90
    f718:	bgt.w	fab6 <_svfprintf_r+0x1596>
    f71c:	add.w	r9, r9, #8
    f720:	negs	r5, r5
    f722:	cmp	r5, #0
    f724:	ble.w	f87c <_svfprintf_r+0x135c>
    f728:	ldr	r2, [pc, #656]	; (f9bc <_svfprintf_r+0x149c>)
    f72a:	str	r2, [sp, #44]	; 0x2c
    f72c:	cmp	r5, #16
    f72e:	ble.w	f8c4 <_svfprintf_r+0x13a4>
    f732:	mov	r2, r4
    f734:	movs	r7, #16
    f736:	ldr.w	fp, [sp, #24]
    f73a:	ldr	r4, [sp, #20]
    f73c:	b.n	f74a <_svfprintf_r+0x122a>
    f73e:	add.w	r9, r9, #8
    f742:	subs	r5, #16
    f744:	cmp	r5, #16
    f746:	ble.w	f8c2 <_svfprintf_r+0x13a2>
    f74a:	adds	r3, #1
    f74c:	adds	r2, #16
    f74e:	cmp	r3, #7
    f750:	str	r2, [sp, #148]	; 0x94
    f752:	str	r3, [sp, #144]	; 0x90
    f754:	str.w	sl, [r9]
    f758:	str.w	r7, [r9, #4]
    f75c:	ble.n	f73e <_svfprintf_r+0x121e>
    f75e:	add	r2, sp, #140	; 0x8c
    f760:	mov	r1, r4
    f762:	mov	r0, fp
    f764:	bl	fc04 <__ssprint_r>
    f768:	cmp	r0, #0
    f76a:	bne.w	e714 <_svfprintf_r+0x1f4>
    f76e:	ldr	r2, [sp, #148]	; 0x94
    f770:	ldr	r3, [sp, #144]	; 0x90
    f772:	add.w	r9, sp, #192	; 0xc0
    f776:	b.n	f742 <_svfprintf_r+0x1222>
    f778:	ldr	r2, [sp, #12]
    f77a:	b.w	ebf0 <_svfprintf_r+0x6d0>
    f77e:	ldr	r2, [sp, #12]
    f780:	b.n	f29a <_svfprintf_r+0xd7a>
    f782:	ldr	r3, [sp, #12]
    f784:	orr.w	r3, r3, #32
    f788:	str	r3, [sp, #12]
    f78a:	add.w	r8, r8, #1
    f78e:	ldrb.w	r3, [r8]
    f792:	b.w	e5d4 <_svfprintf_r+0xb4>
    f796:	add	r2, sp, #140	; 0x8c
    f798:	ldr	r1, [sp, #20]
    f79a:	ldr	r0, [sp, #24]
    f79c:	bl	fc04 <__ssprint_r>
    f7a0:	cmp	r0, #0
    f7a2:	bne.w	e714 <_svfprintf_r+0x1f4>
    f7a6:	ldr	r4, [sp, #148]	; 0x94
    f7a8:	add.w	r9, sp, #192	; 0xc0
    f7ac:	b.w	ef0c <_svfprintf_r+0x9ec>
    f7b0:	movs	r1, #64	; 0x40
    f7b2:	ldr	r0, [sp, #24]
    f7b4:	bl	bc0c <_malloc_r>
    f7b8:	ldr	r2, [sp, #20]
    f7ba:	str	r0, [r2, #0]
    f7bc:	str	r0, [r2, #16]
    f7be:	cmp	r0, #0
    f7c0:	beq.w	fbaa <_svfprintf_r+0x168a>
    f7c4:	ldr	r2, [sp, #20]
    f7c6:	movs	r3, #64	; 0x40
    f7c8:	str	r3, [r2, #20]
    f7ca:	b.w	e54e <_svfprintf_r+0x2e>
    f7ce:	add	r2, sp, #132	; 0x84
    f7d0:	add	r3, sp, #120	; 0x78
    f7d2:	str	r2, [sp, #4]
    f7d4:	str	r3, [sp, #0]
    f7d6:	mov	r2, fp
    f7d8:	add	r3, sp, #116	; 0x74
    f7da:	movs	r1, #3
    f7dc:	vldr	d0, [sp, #96]	; 0x60
    f7e0:	ldr	r0, [sp, #24]
    f7e2:	bl	d6e8 <_dtoa_r>
    f7e6:	mov	r5, fp
    f7e8:	mov	r6, r0
    f7ea:	ldr	r3, [sp, #52]	; 0x34
    f7ec:	cmp	r3, #70	; 0x46
    f7ee:	add.w	r4, r6, r5
    f7f2:	bne.w	f57a <_svfprintf_r+0x105a>
    f7f6:	ldrb	r3, [r6, #0]
    f7f8:	cmp	r3, #48	; 0x30
    f7fa:	beq.w	fb0c <_svfprintf_r+0x15ec>
    f7fe:	ldr	r5, [sp, #116]	; 0x74
    f800:	add	r4, r5
    f802:	b.n	f57a <_svfprintf_r+0x105a>
    f804:	add	r2, sp, #140	; 0x8c
    f806:	ldr	r1, [sp, #20]
    f808:	ldr	r0, [sp, #24]
    f80a:	bl	fc04 <__ssprint_r>
    f80e:	cmp	r0, #0
    f810:	bne.w	e714 <_svfprintf_r+0x1f4>
    f814:	ldr	r5, [sp, #116]	; 0x74
    f816:	ldr	r4, [sp, #148]	; 0x94
    f818:	add.w	r9, sp, #192	; 0xc0
    f81c:	b.n	f6f2 <_svfprintf_r+0x11d2>
    f81e:	cmp.w	fp, #0
    f822:	it	eq
    f824:	moveq.w	fp, #1
    f828:	b.n	f51a <_svfprintf_r+0xffa>
    f82a:	str	r3, [sp, #40]	; 0x28
    f82c:	mov	r7, r2
    f82e:	b.n	f2ea <_svfprintf_r+0xdca>
    f830:	str	r3, [sp, #40]	; 0x28
    f832:	b.n	f622 <_svfprintf_r+0x1102>
    f834:	adds	r3, #4
    f836:	ldr	r4, [r2, #0]
    f838:	str	r3, [sp, #40]	; 0x28
    f83a:	movs	r5, #0
    f83c:	b.w	ec86 <_svfprintf_r+0x766>
    f840:	movs	r7, #45	; 0x2d
    f842:	str	r3, [sp, #16]
    f844:	ldr	r3, [sp, #44]	; 0x2c
    f846:	str	r3, [sp, #12]
    f848:	strb.w	r7, [sp, #111]	; 0x6f
    f84c:	mov.w	fp, #0
    f850:	b.w	e8c6 <_svfprintf_r+0x3a6>
    f854:	mov	r0, r6
    f856:	bl	c940 <strlen>
    f85a:	mov	fp, r4
    f85c:	mov	r3, r0
    f85e:	str	r0, [sp, #36]	; 0x24
    f860:	b.w	eda8 <_svfprintf_r+0x888>
    f864:	add	r2, sp, #140	; 0x8c
    f866:	ldr	r1, [sp, #20]
    f868:	ldr	r0, [sp, #24]
    f86a:	bl	fc04 <__ssprint_r>
    f86e:	cmp	r0, #0
    f870:	bne.w	e714 <_svfprintf_r+0x1f4>
    f874:	ldr	r4, [sp, #148]	; 0x94
    f876:	ldr	r3, [sp, #144]	; 0x90
    f878:	add.w	r9, sp, #192	; 0xc0
    f87c:	ldr	r1, [sp, #56]	; 0x38
    f87e:	str.w	r6, [r9]
    f882:	adds	r3, #1
    f884:	add	r4, r1
    f886:	cmp	r3, #7
    f888:	str	r4, [sp, #148]	; 0x94
    f88a:	str	r3, [sp, #144]	; 0x90
    f88c:	str.w	r1, [r9, #4]
    f890:	ble.w	ea48 <_svfprintf_r+0x528>
    f894:	b.w	f08e <_svfprintf_r+0xb6e>
    f898:	ldr	r3, [sp, #116]	; 0x74
    f89a:	adds	r5, r3, #3
    f89c:	blt.n	f8dc <_svfprintf_r+0x13bc>
    f89e:	cmp	fp, r3
    f8a0:	blt.n	f8dc <_svfprintf_r+0x13bc>
    f8a2:	str	r3, [sp, #60]	; 0x3c
    f8a4:	b.n	f5be <_svfprintf_r+0x109e>
    f8a6:	mov	r3, r4
    f8a8:	b.n	f5a0 <_svfprintf_r+0x1080>
    f8aa:	add	r2, sp, #140	; 0x8c
    f8ac:	ldr	r1, [sp, #20]
    f8ae:	ldr	r0, [sp, #24]
    f8b0:	bl	fc04 <__ssprint_r>
    f8b4:	cmp	r0, #0
    f8b6:	bne.w	e714 <_svfprintf_r+0x1f4>
    f8ba:	ldr	r4, [sp, #148]	; 0x94
    f8bc:	add.w	r9, sp, #192	; 0xc0
    f8c0:	b.n	f15c <_svfprintf_r+0xc3c>
    f8c2:	mov	r4, r2
    f8c4:	adds	r3, #1
    f8c6:	ldr	r2, [sp, #44]	; 0x2c
    f8c8:	str	r3, [sp, #144]	; 0x90
    f8ca:	add	r4, r5
    f8cc:	cmp	r3, #7
    f8ce:	str	r4, [sp, #148]	; 0x94
    f8d0:	stmia.w	r9, {r2, r5}
    f8d4:	bgt.n	f864 <_svfprintf_r+0x1344>
    f8d6:	add.w	r9, r9, #8
    f8da:	b.n	f87c <_svfprintf_r+0x135c>
    f8dc:	ldr	r2, [sp, #52]	; 0x34
    f8de:	subs	r2, #2
    f8e0:	str	r2, [sp, #52]	; 0x34
    f8e2:	subs	r3, #1
    f8e4:	cmp	r3, #0
    f8e6:	ldrb.w	r2, [sp, #52]	; 0x34
    f8ea:	str	r3, [sp, #116]	; 0x74
    f8ec:	it	lt
    f8ee:	neglt	r3, r3
    f8f0:	strb.w	r2, [sp, #124]	; 0x7c
    f8f4:	ite	lt
    f8f6:	movlt	r2, #45	; 0x2d
    f8f8:	movge	r2, #43	; 0x2b
    f8fa:	cmp	r3, #9
    f8fc:	strb.w	r2, [sp, #125]	; 0x7d
    f900:	ble.w	fada <_svfprintf_r+0x15ba>
    f904:	add.w	r0, sp, #139	; 0x8b
    f908:	mov	r4, r0
    f90a:	ldr	r2, [pc, #180]	; (f9c0 <_svfprintf_r+0x14a0>)
    f90c:	smull	r2, r1, r2, r3
    f910:	asrs	r2, r3, #31
    f912:	rsb	r2, r2, r1, asr #2
    f916:	add.w	r1, r2, r2, lsl #2
    f91a:	sub.w	r3, r3, r1, lsl #1
    f91e:	add.w	r1, r3, #48	; 0x30
    f922:	cmp	r2, #9
    f924:	mov	r3, r2
    f926:	strb.w	r1, [r4, #-1]!
    f92a:	bgt.n	f90a <_svfprintf_r+0x13ea>
    f92c:	mov	r1, r4
    f92e:	adds	r3, #48	; 0x30
    f930:	uxtb	r2, r3
    f932:	strb.w	r2, [r1, #-1]!
    f936:	cmp	r0, r1
    f938:	bls.w	fba4 <_svfprintf_r+0x1684>
    f93c:	add.w	r1, sp, #126	; 0x7e
    f940:	mov	r3, r4
    f942:	b.n	f948 <_svfprintf_r+0x1428>
    f944:	ldrb.w	r2, [r3], #1
    f948:	strb.w	r2, [r1], #1
    f94c:	cmp	r0, r3
    f94e:	bne.n	f944 <_svfprintf_r+0x1424>
    f950:	adds	r3, r0, #1
    f952:	subs	r3, r3, r4
    f954:	add.w	r2, sp, #126	; 0x7e
    f958:	add	r3, r2
    f95a:	add	r2, sp, #124	; 0x7c
    f95c:	subs	r3, r3, r2
    f95e:	ldr	r2, [sp, #56]	; 0x38
    f960:	str	r3, [sp, #84]	; 0x54
    f962:	cmp	r2, #1
    f964:	add	r3, r2
    f966:	str	r3, [sp, #36]	; 0x24
    f968:	ble.w	fb3a <_svfprintf_r+0x161a>
    f96c:	ldr	r3, [sp, #36]	; 0x24
    f96e:	ldr	r2, [sp, #72]	; 0x48
    f970:	add	r3, r2
    f972:	movs	r2, #0
    f974:	str	r3, [sp, #36]	; 0x24
    f976:	str	r2, [sp, #60]	; 0x3c
    f978:	bic.w	r3, r3, r3, asr #31
    f97c:	b.n	f5da <_svfprintf_r+0x10ba>
    f97e:	add	r2, sp, #140	; 0x8c
    f980:	ldr	r1, [sp, #20]
    f982:	ldr	r0, [sp, #24]
    f984:	bl	fc04 <__ssprint_r>
    f988:	cmp	r0, #0
    f98a:	bne.w	e714 <_svfprintf_r+0x1f4>
    f98e:	ldr	r3, [sp, #116]	; 0x74
    f990:	ldr	r4, [sp, #148]	; 0x94
    f992:	add.w	r9, sp, #192	; 0xc0
    f996:	b.n	f370 <_svfprintf_r+0xe50>
    f998:	add	r2, sp, #140	; 0x8c
    f99a:	ldr	r1, [sp, #20]
    f99c:	ldr	r0, [sp, #24]
    f99e:	bl	fc04 <__ssprint_r>
    f9a2:	cmp	r0, #0
    f9a4:	bne.w	e714 <_svfprintf_r+0x1f4>
    f9a8:	ldr	r3, [sp, #116]	; 0x74
    f9aa:	ldr	r2, [sp, #56]	; 0x38
    f9ac:	ldr	r4, [sp, #148]	; 0x94
    f9ae:	subs	r3, r2, r3
    f9b0:	add.w	r9, sp, #192	; 0xc0
    f9b4:	b.n	f3a0 <_svfprintf_r+0xe80>
    f9b6:	nop
    f9b8:	.word	0x000105fc
    f9bc:	.word	0x00010600
    f9c0:	.word	0x66666667
    f9c4:	cmp	r5, #6
    f9c6:	mov	r3, r5
    f9c8:	it	cs
    f9ca:	movcs	r3, #6
    f9cc:	str	r3, [sp, #36]	; 0x24
    f9ce:	bic.w	r3, r3, r3, asr #31
    f9d2:	mov	fp, r6
    f9d4:	str	r7, [sp, #40]	; 0x28
    f9d6:	str	r6, [sp, #60]	; 0x3c
    f9d8:	mov	r7, r6
    f9da:	str	r3, [sp, #16]
    f9dc:	ldr	r6, [pc, #536]	; (fbf8 <_svfprintf_r+0x16d8>)
    f9de:	b.w	e8c4 <_svfprintf_r+0x3a4>
    f9e2:	mov.w	fp, #6
    f9e6:	b.n	f51a <_svfprintf_r+0xffa>
    f9e8:	add	r2, sp, #132	; 0x84
    f9ea:	add	r3, sp, #120	; 0x78
    f9ec:	str	r2, [sp, #4]
    f9ee:	str	r3, [sp, #0]
    f9f0:	mov	r2, fp
    f9f2:	add	r3, sp, #116	; 0x74
    f9f4:	movs	r1, #3
    f9f6:	vldr	d0, [sp, #96]	; 0x60
    f9fa:	ldr	r0, [sp, #24]
    f9fc:	bl	d6e8 <_dtoa_r>
    fa00:	mov	r5, fp
    fa02:	mov	r6, r0
    fa04:	add.w	r4, r0, fp
    fa08:	b.n	f7f6 <_svfprintf_r+0x12d6>
    fa0a:	movs	r7, #45	; 0x2d
    fa0c:	strb.w	r7, [sp, #111]	; 0x6f
    fa10:	b.w	eb6a <_svfprintf_r+0x64a>
    fa14:	str	r3, [sp, #12]
    fa16:	b.w	ecc2 <_svfprintf_r+0x7a2>
    fa1a:	ldrd	r1, r2, [sp, #64]	; 0x40
    fa1e:	add.w	r3, r2, #2147483648	; 0x80000000
    fa22:	str	r3, [sp, #100]	; 0x64
    fa24:	movs	r3, #45	; 0x2d
    fa26:	str	r1, [sp, #96]	; 0x60
    fa28:	str	r3, [sp, #16]
    fa2a:	b.n	f536 <_svfprintf_r+0x1016>
    fa2c:	ldr	r2, [sp, #72]	; 0x48
    fa2e:	ldr	r3, [sp, #56]	; 0x38
    fa30:	add	r3, r2
    fa32:	ldr	r2, [sp, #60]	; 0x3c
    fa34:	str	r3, [sp, #36]	; 0x24
    fa36:	cmp	r2, #0
    fa38:	ble.w	fb4e <_svfprintf_r+0x162e>
    fa3c:	movs	r2, #103	; 0x67
    fa3e:	bic.w	r3, r3, r3, asr #31
    fa42:	str	r2, [sp, #52]	; 0x34
    fa44:	b.n	f5da <_svfprintf_r+0x10ba>
    fa46:	ldr	r3, [sp, #52]	; 0x34
    fa48:	cmp	r3, #71	; 0x47
    fa4a:	bne.w	f578 <_svfprintf_r+0x1058>
    fa4e:	ldr	r3, [sp, #12]
    fa50:	lsls	r3, r3, #31
    fa52:	bmi.w	f7ea <_svfprintf_r+0x12ca>
    fa56:	ldr	r3, [sp, #132]	; 0x84
    fa58:	cmp	r7, #71	; 0x47
    fa5a:	sub.w	r3, r3, r6
    fa5e:	str	r3, [sp, #56]	; 0x38
    fa60:	beq.w	f898 <_svfprintf_r+0x1378>
    fa64:	ldr	r3, [sp, #116]	; 0x74
    fa66:	b.n	f8e2 <_svfprintf_r+0x13c2>
    fa68:	bic.w	r3, r5, r5, asr #31
    fa6c:	str	r7, [sp, #40]	; 0x28
    fa6e:	str	r3, [sp, #16]
    fa70:	str	r5, [sp, #36]	; 0x24
    fa72:	mov	fp, r0
    fa74:	str	r0, [sp, #60]	; 0x3c
    fa76:	ldrb.w	r7, [sp, #111]	; 0x6f
    fa7a:	b.w	e8c4 <_svfprintf_r+0x3a4>
    fa7e:	cmp	r3, #0
    fa80:	ble.n	fb5e <_svfprintf_r+0x163e>
    fa82:	cmp.w	fp, #0
    fa86:	bne.n	fb28 <_svfprintf_r+0x1608>
    fa88:	ldr	r2, [sp, #12]
    fa8a:	lsls	r4, r2, #31
    fa8c:	bmi.n	fb28 <_svfprintf_r+0x1608>
    fa8e:	mov	r2, r3
    fa90:	str	r2, [sp, #36]	; 0x24
    fa92:	bic.w	r3, r3, r3, asr #31
    fa96:	b.n	f5da <_svfprintf_r+0x10ba>
    fa98:	ldr	r3, [sp, #12]
    fa9a:	lsls	r3, r3, #31
    fa9c:	mov	r7, fp
    fa9e:	bpl.n	faac <_svfprintf_r+0x158c>
    faa0:	add	r6, sp, #256	; 0x100
    faa2:	movs	r3, #48	; 0x30
    faa4:	strb.w	r3, [r6, #-65]!
    faa8:	b.w	e8b0 <_svfprintf_r+0x390>
    faac:	str.w	fp, [sp, #36]	; 0x24
    fab0:	add	r6, sp, #192	; 0xc0
    fab2:	b.w	e8b6 <_svfprintf_r+0x396>
    fab6:	add	r2, sp, #140	; 0x8c
    fab8:	ldr	r1, [sp, #20]
    faba:	ldr	r0, [sp, #24]
    fabc:	bl	fc04 <__ssprint_r>
    fac0:	cmp	r0, #0
    fac2:	bne.w	e714 <_svfprintf_r+0x1f4>
    fac6:	ldr	r5, [sp, #116]	; 0x74
    fac8:	ldr	r4, [sp, #148]	; 0x94
    faca:	ldr	r3, [sp, #144]	; 0x90
    facc:	add.w	r9, sp, #192	; 0xc0
    fad0:	b.n	f720 <_svfprintf_r+0x1200>
    fad2:	mov	r8, r4
    fad4:	movs	r5, #0
    fad6:	b.w	e5d8 <_svfprintf_r+0xb8>
    fada:	adds	r3, #48	; 0x30
    fadc:	movs	r2, #48	; 0x30
    fade:	strb.w	r3, [sp, #127]	; 0x7f
    fae2:	strb.w	r2, [sp, #126]	; 0x7e
    fae6:	add	r3, sp, #128	; 0x80
    fae8:	b.n	f95a <_svfprintf_r+0x143a>
    faea:	ldr	r3, [sp, #132]	; 0x84
    faec:	b.n	f5a0 <_svfprintf_r+0x1080>
    faee:	ldr	r2, [sp, #72]	; 0x48
    faf0:	ldr	r3, [sp, #60]	; 0x3c
    faf2:	add	r3, r2
    faf4:	movs	r2, #103	; 0x67
    faf6:	str	r3, [sp, #36]	; 0x24
    faf8:	str	r2, [sp, #52]	; 0x34
    fafa:	bic.w	r3, r3, r3, asr #31
    fafe:	b.n	f5da <_svfprintf_r+0x10ba>
    fb00:	ldr	r6, [pc, #248]	; (fbfc <_svfprintf_r+0x16dc>)
    fb02:	ldr	r3, [pc, #252]	; (fc00 <_svfprintf_r+0x16e0>)
    fb04:	ldrb.w	r7, [sp, #111]	; 0x6f
    fb08:	b.w	eb6e <_svfprintf_r+0x64e>
    fb0c:	movs	r2, #0
    fb0e:	movs	r3, #0
    fb10:	ldrd	r0, r1, [sp, #96]	; 0x60
    fb14:	bl	b78c <__aeabi_dcmpeq>
    fb18:	cmp	r0, #0
    fb1a:	bne.w	f7fe <_svfprintf_r+0x12de>
    fb1e:	rsb	r5, r5, #1
    fb22:	str	r5, [sp, #116]	; 0x74
    fb24:	add	r4, r5
    fb26:	b.n	f57a <_svfprintf_r+0x105a>
    fb28:	ldr	r3, [sp, #60]	; 0x3c
    fb2a:	ldr	r2, [sp, #72]	; 0x48
    fb2c:	adds	r5, r3, r2
    fb2e:	add.w	r3, r5, fp
    fb32:	str	r3, [sp, #36]	; 0x24
    fb34:	bic.w	r3, r3, r3, asr #31
    fb38:	b.n	f5da <_svfprintf_r+0x10ba>
    fb3a:	ldr	r3, [sp, #12]
    fb3c:	ands.w	r3, r3, #1
    fb40:	bne.w	f96c <_svfprintf_r+0x144c>
    fb44:	str	r3, [sp, #60]	; 0x3c
    fb46:	ldr	r3, [sp, #36]	; 0x24
    fb48:	bic.w	r3, r3, r3, asr #31
    fb4c:	b.n	f5da <_svfprintf_r+0x10ba>
    fb4e:	ldr	r3, [sp, #60]	; 0x3c
    fb50:	ldr	r2, [sp, #36]	; 0x24
    fb52:	rsb	r3, r3, #1
    fb56:	add	r2, r3
    fb58:	mov	r3, r2
    fb5a:	str	r2, [sp, #36]	; 0x24
    fb5c:	b.n	fa3c <_svfprintf_r+0x151c>
    fb5e:	cmp.w	fp, #0
    fb62:	bne.n	fb6a <_svfprintf_r+0x164a>
    fb64:	ldr	r3, [sp, #12]
    fb66:	lsls	r0, r3, #31
    fb68:	bpl.n	fb7a <_svfprintf_r+0x165a>
    fb6a:	ldr	r3, [sp, #72]	; 0x48
    fb6c:	adds	r5, r3, #1
    fb6e:	add.w	r3, r5, fp
    fb72:	str	r3, [sp, #36]	; 0x24
    fb74:	bic.w	r3, r3, r3, asr #31
    fb78:	b.n	f5da <_svfprintf_r+0x10ba>
    fb7a:	movs	r3, #1
    fb7c:	str	r3, [sp, #36]	; 0x24
    fb7e:	b.n	f5da <_svfprintf_r+0x10ba>
    fb80:	ldr	r0, [sp, #40]	; 0x28
    fb82:	ldrb.w	r3, [r8, #1]
    fb86:	ldr	r5, [r0, #0]
    fb88:	adds	r0, #4
    fb8a:	cmp	r5, #0
    fb8c:	str	r0, [sp, #40]	; 0x28
    fb8e:	mov	r8, r4
    fb90:	bge.w	e5d4 <_svfprintf_r+0xb4>
    fb94:	mov.w	r5, #4294967295
    fb98:	b.w	e5d4 <_svfprintf_r+0xb4>
    fb9c:	strb.w	r1, [sp, #111]	; 0x6f
    fba0:	b.w	e736 <_svfprintf_r+0x216>
    fba4:	add.w	r3, sp, #126	; 0x7e
    fba8:	b.n	f95a <_svfprintf_r+0x143a>
    fbaa:	ldr	r2, [sp, #24]
    fbac:	movs	r3, #12
    fbae:	str	r3, [r2, #0]
    fbb0:	mov.w	r0, #4294967295
    fbb4:	b.w	e726 <_svfprintf_r+0x206>
    fbb8:	strb.w	r1, [sp, #111]	; 0x6f
    fbbc:	b.w	e830 <_svfprintf_r+0x310>
    fbc0:	strb.w	r1, [sp, #111]	; 0x6f
    fbc4:	b.w	eafc <_svfprintf_r+0x5dc>
    fbc8:	strb.w	r1, [sp, #111]	; 0x6f
    fbcc:	b.w	ec6a <_svfprintf_r+0x74a>
    fbd0:	strb.w	r1, [sp, #111]	; 0x6f
    fbd4:	b.w	ec0e <_svfprintf_r+0x6ee>
    fbd8:	strb.w	r1, [sp, #111]	; 0x6f
    fbdc:	b.w	ebba <_svfprintf_r+0x69a>
    fbe0:	strb.w	r1, [sp, #111]	; 0x6f
    fbe4:	b.w	ee52 <_svfprintf_r+0x932>
    fbe8:	strb.w	r1, [sp, #111]	; 0x6f
    fbec:	b.w	ee10 <_svfprintf_r+0x8f0>
    fbf0:	strb.w	r1, [sp, #111]	; 0x6f
    fbf4:	b.w	edd4 <_svfprintf_r+0x8b4>
    fbf8:	.word	0x00010648
    fbfc:	.word	0x0001061c
    fc00:	.word	0x00010618

0000fc04 <__ssprint_r>:
    fc04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fc08:	ldr	r3, [r2, #8]
    fc0a:	sub	sp, #12
    fc0c:	mov	r8, r2
    fc0e:	cmp	r3, #0
    fc10:	beq.n	fcf8 <__ssprint_r+0xf4>
    fc12:	mov	fp, r0
    fc14:	mov.w	r9, #0
    fc18:	ldr	r6, [r2, #0]
    fc1a:	ldr	r0, [r1, #0]
    fc1c:	ldr	r3, [r1, #8]
    fc1e:	mov	r5, r1
    fc20:	mov	r4, r9
    fc22:	cmp	r4, #0
    fc24:	beq.n	fcb2 <__ssprint_r+0xae>
    fc26:	cmp	r4, r3
    fc28:	mov	r7, r3
    fc2a:	mov	sl, r3
    fc2c:	bcc.n	fcbc <__ssprint_r+0xb8>
    fc2e:	ldrh	r3, [r5, #12]
    fc30:	tst.w	r3, #1152	; 0x480
    fc34:	beq.n	fc92 <__ssprint_r+0x8e>
    fc36:	ldr	r7, [r5, #20]
    fc38:	ldr	r1, [r5, #16]
    fc3a:	add.w	r7, r7, r7, lsl #1
    fc3e:	rsb	sl, r1, r0
    fc42:	add.w	r7, r7, r7, lsr #31
    fc46:	adds	r0, r4, #1
    fc48:	asrs	r7, r7, #1
    fc4a:	add	r0, sl
    fc4c:	cmp	r0, r7
    fc4e:	mov	r2, r7
    fc50:	itt	hi
    fc52:	movhi	r7, r0
    fc54:	movhi	r2, r7
    fc56:	lsls	r3, r3, #21
    fc58:	bpl.n	fcc2 <__ssprint_r+0xbe>
    fc5a:	mov	r1, r2
    fc5c:	mov	r0, fp
    fc5e:	bl	bc0c <_malloc_r>
    fc62:	cmp	r0, #0
    fc64:	beq.n	fcd6 <__ssprint_r+0xd2>
    fc66:	mov	r2, sl
    fc68:	ldr	r1, [r5, #16]
    fc6a:	str	r0, [sp, #4]
    fc6c:	bl	9584 <memcpy>
    fc70:	ldrh	r2, [r5, #12]
    fc72:	ldr	r3, [sp, #4]
    fc74:	bic.w	r2, r2, #1152	; 0x480
    fc78:	orr.w	r2, r2, #128	; 0x80
    fc7c:	strh	r2, [r5, #12]
    fc7e:	rsb	r2, sl, r7
    fc82:	add.w	r0, r3, sl
    fc86:	str	r7, [r5, #20]
    fc88:	str	r3, [r5, #16]
    fc8a:	str	r0, [r5, #0]
    fc8c:	str	r2, [r5, #8]
    fc8e:	mov	r7, r4
    fc90:	mov	sl, r4
    fc92:	mov	r2, sl
    fc94:	mov	r1, r9
    fc96:	bl	c2b4 <memmove>
    fc9a:	ldr.w	r2, [r8, #8]
    fc9e:	ldr	r3, [r5, #8]
    fca0:	ldr	r0, [r5, #0]
    fca2:	subs	r3, r3, r7
    fca4:	add	r0, sl
    fca6:	subs	r4, r2, r4
    fca8:	str	r3, [r5, #8]
    fcaa:	str	r0, [r5, #0]
    fcac:	str.w	r4, [r8, #8]
    fcb0:	cbz	r4, fcf8 <__ssprint_r+0xf4>
    fcb2:	ldr.w	r9, [r6]
    fcb6:	ldr	r4, [r6, #4]
    fcb8:	adds	r6, #8
    fcba:	b.n	fc22 <__ssprint_r+0x1e>
    fcbc:	mov	r7, r4
    fcbe:	mov	sl, r4
    fcc0:	b.n	fc92 <__ssprint_r+0x8e>
    fcc2:	mov	r0, fp
    fcc4:	bl	c420 <_realloc_r>
    fcc8:	mov	r3, r0
    fcca:	cmp	r0, #0
    fccc:	bne.n	fc7e <__ssprint_r+0x7a>
    fcce:	ldr	r1, [r5, #16]
    fcd0:	mov	r0, fp
    fcd2:	bl	ccf0 <_free_r>
    fcd6:	movs	r3, #12
    fcd8:	str.w	r3, [fp]
    fcdc:	ldrh	r3, [r5, #12]
    fcde:	movs	r2, #0
    fce0:	orr.w	r3, r3, #64	; 0x40
    fce4:	mov.w	r0, #4294967295
    fce8:	strh	r3, [r5, #12]
    fcea:	str.w	r2, [r8, #8]
    fcee:	str.w	r2, [r8, #4]
    fcf2:	add	sp, #12
    fcf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fcf8:	movs	r0, #0
    fcfa:	str.w	r0, [r8, #4]
    fcfe:	add	sp, #12
    fd00:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd04 <vtable for File>:
	...
    fd0c:	....u...m.......
    fd1c:	....U.......]...
    fd2c:	........u.......
    fd3c:	................
    fd4c:	................
    fd5c:	I...  File    th
    fd6c:	is=%x, f=%x.....
    fd7c:	No storage..MTP 
    fd8c:	test....

0000fd94 <vtable for Stream>:
	...
    fd9c:	....u...m...q...
    fdac:	............

0000fdb8 <vtable for StreamFile<FsBaseFile, unsigned long long>>:
	...
    fdc0:	........m...}...
    fdd0:	....E.......

0000fddc <vtable for FsFile>:
	...
    fde4:	........m...}...
    fdf4:	....E.......

0000fe00 <vtable for SDFile>:
	...
    fe08:	....u...m.......
    fe18:	%...U...-...u...
    fe28:	................
    fe38:	}.......q.......
    fe48:	................
    fe58:	....

0000fe5c <vtable for MTPStorage_SD>:
	...
    fe64:	............U...
    fe74:	....1.......i...
    fe84:	................
    fe94:	....i...........
    fea4:	........   SDFil
    feb4:	e this=%x, refco
    fec4:	unt=%u../mtpinde
    fed4:	x.dat.../...

0000fee0 <supported_op>:
    fee0:	................
    fef0:	................
    ff00:	....

0000ff04 <propertyList>:
    ff04:	................
    ff14:	A.D.Teensy..micr
    ff24:	osoft.com: 1.0;.
    ff34:	PJRC....1.0.1234
    ff44:	....SD_Card.%x %
    ff54:	d %d %d: %x %x %
    ff64:	x...

0000ff68 <monthDays>:
    ff68:	............

0000ff74 <vtable for SDClass>:
	...
    ff7c:	.;...:..i:...9..
    ff8c:	.:..DBG_FAIL: ..
    ff9c:	ExFatFile.cpp...
    ffac:	ExFatPartition.c
    ffbc:	pp..EXFAT...ExFa
    ffcc:	tFileWrite.cpp..
    ffdc:	FatFile.cpp.FatP
    ffec:	artition.cpp....
    fffc:	FatFileLFN.cpp..
   1000c:	DBG_HALT ...C:\U
   1001c:	sers\zimme\Docum
   1002c:	ents\arduino-1.8
   1003c:	.12\hardware\tee
   1004c:	nsy\avr\librarie
   1005c:	s/SdFat-beta/src
   1006c:	/FatLib//FatFile
   1007c:	LFN.cpp.FatFileS
   1008c:	FN.cpp..

00010094 <vtable for SdSpiCard>:
	...
   1009c:	.}...}...}......
   100ac:	.........}...}..
   100bc:	.....}...}...~..
   100cc:	.............9..
   100dc:	.}......I...Q...

000100ec <vtable for SdioCard>:
	...
   100f4:	........-.......
   10104:	....}.......A...
   10114:	)...............
   10124:	................
   10134:	....y...E...u...

00010144 <digital_pin_to_info_PGM>:
   10144:	@..C@..@D..CD..@
   10154:	...C...@0..C0..@
   10164:	4..C4..@...C...@
   10174:	...C...@...C...@
   10184:	...C...@...C...@
   10194:	...C...@...C...@
   101a4:	...C...@...C...@
   101b4:	...C...@...C...@
   101c4:	...C...@...C...@
   101d4:	...C...@...C...@
   101e4:	...C...@...C...@
   101f4:	...C...@...C...@
   10204:	h .Ch..@...C...@
   10214:	8..C8..@<..C<..@
   10224:	@..C@..@H..CH..@
   10234:	L..CL..@(..C(..@
   10244:	,..C,..@` .C`..@
   10254:	d .Cd..@ ..C ..@
   10264:	$..C$..@(..C(..@
   10274:	,..C,..@D..CD..@
   10284:	p..Cp..@t..Ct..@
   10294:	h..Ch..@P..CP..@
   102a4:	X..CX..@\..C\..@
   102b4:	T..CT..@ ..C ..@
   102c4:	$..C$..@...C...@
   102d4:	...C...@8..C8..@
   102e4:	4..C4..@0..C0..@
   102f4:	<..C<..@,..C,..@
   10304:	( .C(..@, .C,..@
   10314:	. .C...@. .C...@
   10324:	. .C...@. .C...@
   10334:	. .C...@. .C...@

00010344 <vtable for usb_serial_class>:
	...
   1034c:	m...e...a...]...
   1035c:	Y...U...Q...M...
   1036c:	....

00010370 <usb_endpoint_config_table>:
   10370:	........

00010378 <usb_descriptor_list>:
   10378:	................
   10388:	....i.......8...
   10398:	........p.......
   103a8:	................
   103b8:	@...........t...
	...

000103d8 <_global_impure_ptr>:
   103d8:	....C...POSIX...
   103e8:	....

000103ec <_ctype_>:
   103ec:	.         ((((( 
   103fc:	                
   1040c:	 ...............
   1041c:	................
   1042c:	..AAAAAA........
   1043c:	................
   1044c:	..BBBBBB........
   1045c:	................
   1046c:	 ...............
	...
   104ec:	....

000104f0 <__mprec_tens>:
   104f0:	.......?......$@
   10500:	......Y@.....@.@
   10510:	.......@.....j.@
   10520:	.......A......cA
   10530:	.......A....e..A
   10540:	... _..B....vH7B
   10550:	......mB..@..0.B
   10560:	.......B..4&.k.C
   10570:	...7y.AC....W4vC
   10580:	..Ngm..C.=.`.X.C
   10590:	@..x...DP.....KD
   105a0:	..M....D.J...-.D
   105b0:	...yCx.D

000105b8 <__mprec_bigtens>:
   105b8:	...7y.AC.n.....F
   105c8:	..?..O8M2.0.Hw.Z
   105d8:	<.s..O.u

000105e0 <p05.6087>:
   105e0:	........}...Infi
   105f0:	nity....NaN.0...

00010600 <zeroes.7258>:
   10600:	0000000000000000
   10610:	INF.inf.NAN.nan.
   10620:	0123456789ABCDEF
   10630:	....0123456789ab
   10640:	cdef....(null)..

00010650 <blanks.7257>:
   10650:	                

00010660 <_init>:
   10660:	push	{r3, r4, r5, r6, r7, lr}
   10662:	nop
   10664:	pop	{r3, r4, r5, r6, r7}
   10666:	pop	{r3}
   10668:	mov	lr, r3
   1066a:	bx	lr

0001066c <__init_array_start>:
   1066c:	.word	0x0000cc0d

00010670 <__frame_dummy_init_array_entry>:
   10670:	5........;..

Disassembly of section .fini:

0001067c <_fini>:
   1067c:	push	{r3, r4, r5, r6, r7, lr}
   1067e:	nop
