
.vsteensy/build/mtp-test_T40.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000eed0 l    d  .fini	00000000 .fini
0000eed4 l    d  .ARM.exidx.text.__aeabi_atexit	00000000 .ARM.exidx.text.__aeabi_atexit
0000eedc l    d  .ARM.exidx	00000000 .ARM.exidx
0000eedc l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200012a0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00008454 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00008f24 l     F .text.itcm	0000005c schedule_transfer
00008f80 l     F .text.itcm	00000036 run_callbacks
00008fb8 l     F .text.itcm	000000a4 endpoint0_transmit.constprop.1
0000905c l     F .text.itcm	00000684 isr
200049e4 l     O .bss	00000004 endpointN_notify_mask
200049e8 l     O .bss	00000001 sof_usage
200049f4 l     O .bss	00000004 endpoint0_notify_mask
200049f8 l     O .bss	00000001 usb_reboot_timer
20004a00 l     O .bss	00000008 endpoint0_setupdata
20004a08 l     O .bss	00000008 reply_buffer
20004a10 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 analog.c
20004a28 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 tempmon.c
20004a2c l     O .bss	00000004 s_hotTemp
20004a30 l     O .bss	00000004 s_hot_ROOM
20004a34 l     O .bss	00000004 s_roomC_hotC
20004a38 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 usb_desc.c
6000174c l     O .text.progmem	0000000a qualifier_descriptor
200008bc l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.12/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200012a0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200012a4 l       .bss	00000000 object.8610
600017b0 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mtp-test.ino
000001c0 l     F .text.itcm	0000002c logg(unsigned long, char const*) [clone .part.13]
0000027c l     F .text.itcm	0000009c _GLOBAL__sub_I_storage
200012bc l     O .bss	00000004 logg(unsigned long, char const*)::to
00000000 l    df *ABS*	00000000 Storage.cpp
00004fe8 l     F .text.itcm	0000001c MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]
00005174 l     F .text.itcm	00000094 MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]
000059bc l     F .text.itcm	00000032 MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]
00005bb4 l     F .text.itcm	00000058 _GLOBAL__sub_I__Z8dateTimePtS_Ph
00000000 l    df *ABS*	00000000 ExFatFormatter.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000d1c l     F .text.itcm	0000001e FsCache::sync() [clone .part.2]
00000da8 l     F .text.itcm	00000034 ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]
00000ddc l     F .text.itcm	0000002a ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]
00000000 l    df *ABS*	00000000 upcase.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00001ca4 l     F .text.itcm	00000032 FatFile::openRoot(FatVolume*) [clone .part.36]
00001dc0 l     F .text.itcm	00000094 FatFile::sync() [clone .part.40]
00000000 l    df *ABS*	00000000 FatPartition.cpp
000029ac l     F .text.itcm	0000004a FatCache::sync() [clone .part.8]
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00002ddc l     F .text.itcm	0000002a lfnGetChar(DirLfn_t*, unsigned char)
00000000 l    df *ABS*	00000000 FatFileSFN.cpp
00003764 l     F .text.itcm	00000066 FatFile::getSFN(char*) [clone .part.2]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00003b30 l     F .text.itcm	00000018 SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]
00003b48 l     F .text.itcm	00000022 SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000042e0 l     F .text.itcm	00000018 isBusyCommandComplete()
000042f8 l     F .text.itcm	00000010 isBusyCommandInhibit()
00004308 l     F .text.itcm	0000000c isBusyDMA()
00004314 l     F .text.itcm	00000014 isBusyFifoRead()
00004328 l     F .text.itcm	00000014 isBusyFifoWrite()
0000433c l     F .text.itcm	00000018 isBusyTransferComplete()
000043b8 l     F .text.itcm	00000028 waitTimeout(bool (*)())
000043e0 l     F .text.itcm	0000004c yieldTimeout(bool (*)())
0000445c l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000044e4 l     F .text.itcm	0000002c isBusyCMD13()
0000452c l     F .text.itcm	00000020 waitDmaStatus() [clone .part.7]
0000454c l     F .text.itcm	000000b8 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00004744 l     F .text.itcm	0000006c transferStop()
20003828 l     O .bss	00000001 m_version2
2000382c l     O .bss	00000010 m_cid
2000383c l     O .bss	00000004 m_busyFcn
20003840 l     O .bss	00000001 m_highCapacity
20003844 l     O .bss	00000004 m_ocr
20003848 l     O .bss	00000004 m_rca
2000384c l     O .bss	00000004 m_irqstat
20000854 l     O .data	00000001 m_errorCode
20003850 l     O .bss	00000001 m_initDone
20003854 l     O .bss	00000010 m_csd
20003864 l     O .bss	00000001 m_dmaBusy
20003868 l     O .bss	00000004 m_errorLine
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 mtp.cpp
00005c0c l     F .text.itcm	00000080 MTPD::write(char const*, int) [clone .part.1]
00005d58 l     F .text.itcm	000000c8 MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]
0000712c l     F .text.itcm	0000002c MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]
200001c4 l     O .data	00000024 supported_op
200001e8 l     O .data	00000014 propertyList
20003d1c l     O .bss	00000004 MTPD::write(char const*, int)::dst
20003d20 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
00000000 l    df *ABS*	00000000 SPI.cpp
00007b04 l     F .text.itcm	00000058 SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]
00000000 l    df *ABS*	00000000 Time.cpp
00008000 l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
20003d24 l     O .bss	00000004 cacheTime
20003d28 l     O .bss	00000007 tm
20003d30 l     O .bss	00000004 sysTime
20003d34 l     O .bss	00000001 Status
20003d3c l     O .bss	00000004 prevMillis
200008ac l     O .data	00000004 syncInterval
20000298 l     O .data	0000000c monthDays
20003d40 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 usb1_mtp.c
00008168 l     F .text.itcm	00000010 tx_event
00008178 l     F .text.itcm	00000010 rx_event
00008188 l     F .text.itcm	0000004c usb_mtp_wait
20003d44 l     O .bss	00000800 txbuffer
20004544 l     O .bss	00000004 mtp_RXcount
20004548 l     O .bss	00000001 tx_head
2000454c l     O .bss	00000200 rx_buffer
20004760 l     O .bss	00000020 rx_transfer
20004780 l     O .bss	00000080 tx_transfer
20004800 l     O .bss	00000004 mtp_TXcount
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00008520 l     F .text.itcm	0000006c rx_queue_transfer
0000858c l     F .text.itcm	000000b4 rx_event
00008640 l     F .text.itcm	00000098 usb_serial_flush_callback
000086d8 l     F .text.itcm	0000017c usb_serial_write.part.1
20004804 l     O .bss	00000010 rx_index
20004814 l     O .bss	00000002 tx_packet_size
20004816 l     O .bss	00000001 tx_noautoflush
20004817 l     O .bss	00000001 tx_head
20004820 l     O .bss	00000100 rx_transfer
20004920 l     O .bss	00000001 rx_tail
20004924 l     O .bss	00000009 rx_list
2000492e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20004930 l     O .bss	00000010 rx_count
20004940 l     O .bss	00000004 rx_available
20004944 l     O .bss	00000001 rx_head
20004945 l     O .bss	00000001 transmit_previous_timeout
20004946 l     O .bss	00000002 tx_available
20004960 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 digital.c
00009c38 l     F .text.itcm	00000024 digitalWrite.part.0
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 yield.cpp
20004a3c l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 atexit_arm.cc
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 cxa_atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mprec.c
200007d0 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 dtoa.c
0000c778 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 vfprintf.c
200007f0 l     O .data	00000010 zeroes.7258
20000840 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 impure.c
200008f8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001768 l     F .text.progmem	00000008 __startup_late_hook_veneer
60001770 l     F .text.progmem	00000008 __set_arm_clock_veneer
60001778 l     F .text.progmem	00000008 ____libc_init_array_veneer
60001780 l     F .text.progmem	00000008 __main_veneer
60001788 l     F .text.progmem	00000008 __pwm_init_veneer
60001790 l     F .text.progmem	00000008 __memset_veneer
60001798 l     F .text.progmem	00000008 __delay_veneer
600017a0 l     F .text.progmem	00000008 __startup_early_hook_veneer
600017a8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
0000eec0 l     F .text.itcm	00000008 ___init_veneer
0000510c g     F .text.itcm	00000068 MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0000aa08 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
00008a90 g     F .text.itcm	0000000c usb_serial_available
0000a9cc g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000ba74 g     F .text.itcm	000000ba strcpy
0000a908 g     F .text.itcm	0000007a .hidden __cmpdf2
00008460 g     F .text.itcm	00000002 startup_default_late_hook
000048dc g     F .text.itcm	00000088 SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
00009da0  w    F .text.itcm	000000a0 yield
200049ec g     O .bss	00000004 usb_timer1_callback
000027c4 g     F .text.itcm	000001e8 FatFile::write(void const*, unsigned int)
0000a908 g     F .text.itcm	0000007a .hidden __eqdf2
00003aa4  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
000007f0 g     F .text.itcm	000003d8 ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)
200012c0 g     O .bss	0000010c storage
60001658 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20004a5c g     O .bss	0000001c HardwareSerial::serial_event_handler_checks
0000a478 g     F .text.itcm	0000005a .hidden __floatdidf
20003820 g     O .bss	00000004 FsDateTime::callback
0000a05c g     F .text.itcm	00000020 Print::println()
000006e8 g     F .text.itcm	00000108 ExFatFile::seekSet(unsigned long long)
00003a78  w    F .text.itcm	00000004 SdSpiCard::errorCode() const
0000b62c g     F .text.itcm	00000002 __malloc_unlock
20003824 g     O .bss	00000004 FsVolume::m_cwv
00002098 g     F .text.itcm	000000c6 FatFile::open(FatFile*, char const*, int)
600014ac g     F .text.progmem	00000058 analog_init
0000bcbc g     F .text.itcm	0000004a _vdprintf_r
00007e4c g     F .text.itcm	00000002 SPIClass::setSCK(unsigned char)
200008b8 g     O .data	00000004 F_CPU_ACTUAL
0000a130 g     F .text.itcm	00000028 HardwareSerial::processSerialEvents()
0000b4c4 g     F .text.itcm	000000c6 memmove
00009f70 g     F .text.itcm	00000098 MillisTimer::runFromTimer()
0000c094 g     F .text.itcm	0000004c _Balloc
00002bd0 g     F .text.itcm	0000003a FatPartition::freeChain(unsigned long)
20004a54 g     O .bss	00000001 EventResponder::runningFromYield
00004e20 g     F .text.itcm	00000016 SdSpiArduinoDriver::receive()
00003c50 g     F .text.itcm	00000080 SdSpiCard::cardCommand(unsigned char, unsigned long)
00005630 g     F .text.itcm	000000d4 MTPStorage_SD::move(unsigned long, unsigned long)
0000a8f8 g     F .text.itcm	0000008a .hidden __gtdf2
00002e08 g     F .text.itcm	00000024 FatFile::lfnChecksum(unsigned char*)
0000ada8 g     F .text.itcm	0000000c __errno
000058a4 g     F .text.itcm	00000118 MTPStorage_SD::ScanDir(unsigned long)
60001000 g     O .text.progmem	00000020 ImageVectorTable
20004a40 g     O .bss	00000004 EventResponder::firstInterrupt
00009828 g     F .text.itcm	00000004 usb_transfer_status
0000621c g     F .text.itcm	000000ac MTPD::GetObjectHandles(unsigned long, unsigned long)
00003aa8  w    F .text.itcm	0000000e SdSpiCard::~SdSpiCard()
200008e6 g     O .data	00000001 usb_enable_serial_event_processing
000050e8  w    F .text.itcm	00000024 Print::println(__FlashStringHelper const*)
0000123c g     F .text.itcm	00000018 ExFatPartition::rootLength()
00003a7c  w    F .text.itcm	00000004 SdSpiCard::errorData() const
0000a040  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200002a4 g     O .data	00000280 digital_pin_to_info_PGM
20006304 g     O .bss	00000004 errno
00003e9c g     F .text.itcm	00000054 SdSpiCard::readOCR(unsigned long*)
00004e38 g     F .text.itcm	00000020 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000033d0 g     F .text.itcm	00000394 FatFile::open(FatFile*, fname_t*, int)
0000112c g     F .text.itcm	00000012 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000eed0 g       .text.itcm	00000000 _etext
00007b5c g     F .text.itcm	000000d4 _spi_dma_rxISR0()
200012a0 g       .bss	00000000 _sbss
00004ebc  w    F .text.itcm	00000006 sdCsInit(unsigned char)
0000a994 g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
00004360 g     F .text.itcm	0000000c SdioCard::errorData() const
000049ec g     F .text.itcm	000000a0 SdioCard::writeSector(unsigned long, unsigned char const*)
600017c0 g       *ABS*	00000000 _stextload
00000248 g     F .text.itcm	00000034 loop
000096e0 g     F .text.itcm	00000064 usb_config_rx
000060c8 g     F .text.itcm	00000154 MTPD::GetStorageInfo(unsigned long)
00000418 g     F .text.itcm	000000fc ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00004ac4 g     F .text.itcm	000000bc SdioCard::readData(unsigned char*)
00009f08 g     F .text.itcm	00000068 MillisTimer::addToActiveList()
000059f0 g     F .text.itcm	00000068 MTPStorage_SD::StartGetObjectHandles(unsigned long)
00003bac g     F .text.itcm	00000074 SdSpiCard::readData(unsigned char*, unsigned int)
20004a44 g     O .bss	00000004 EventResponder::lastInterrupt
000037ec g     F .text.itcm	00000028 FsBaseFile::close()
00008310 g     F .text.itcm	00000134 memcpy
0000a984 g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
00004fcc g     F .text.itcm	0000001c MTPStorage_SD::freeClusters()
00005af0 g     F .text.itcm	000000c4 Storage_init()
00001164 g     F .text.itcm	00000068 ExFatPartition::freeChain(unsigned long)
00005704 g     F .text.itcm	00000060 MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00002310 g     F .text.itcm	00000028 FatFile::peek()
0000d6d8 g     F .text.itcm	000016e4 _svfprintf_r
0000a408 g     F .text.itcm	00000022 .hidden __floatsidf
20004a24 g     O .bss	00000004 systick_millis_count
0000a900 g     F .text.itcm	00000082 .hidden __ltdf2
00004f88 g     F .text.itcm	00000020 MTPStorage_SD::clusterCount()
000018a0 g     F .text.itcm	000000ae ExFatFile::rename(ExFatFile*, char const*)
000082ec g     F .text.itcm	00000024 usb_mtp_available
0000739c g     F .text.itcm	0000074c MTPD::loop()
0000aa84 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20004a18 g     O .bss	00000001 usb_configuration
00003a70  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00004a8c g     F .text.itcm	00000038 SdioCard::syncDevice()
000047b4 g     F .text.itcm	000000bc SdioCard::writeData(unsigned char const*)
0000011c  w    F .text.itcm	0000005a StreamFile<FsBaseFile, unsigned long long>::available()
00002338 g     F .text.itcm	00000042 FatFile::readDirCache(bool)
60001658  w    O .text.progmem	00000018 usb_string_manufacturer_name
60001620 g     O .text.progmem	00000008 usb_string_mtp
0000ae04 g     F .text.itcm	00000010 malloc
20000024  w    O .data	00000024 vtable for FsFile
00007ae8  w    F .text.itcm	0000001c EventResponder::triggerEvent(int, void*)
200006e0 g     O .data	000000c8 __mprec_tens
600013c0 g     F .text.progmem	000000ec usb_init
00003814 g     F .text.itcm	00000088 FsBaseFile::operator=(FsBaseFile const&)
00003a90  w    F .text.itcm	00000004 SdSpiCard::type() const
20004a84 g     O .bss	00000004 __malloc_top_pad
20006300 g     O .bss	00000004 systick_safe_read
00003ab8 g     F .text.itcm	00000076 SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
00001950 g     F .text.itcm	000000e4 ExFatFile::truncate()
20000850 g     O .data	00000000 .hidden __dso_handle
0000a3e8 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000c078 g     F .text.itcm	0000001c _localeconv_r
00004dc8 g     F .text.itcm	00000058 SdSpiArduinoDriver::deactivate()
0000c210 g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
000081d4 g     F .text.itcm	0000006c usb_mtp_configure
600016e0 g     O .text.progmem	00000069 usb_config_descriptor_480
00002a58 g     F .text.itcm	0000000e FatCache::sync()
0000aab4 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00006d60 g     F .text.itcm	000001c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a164 g     F .text.itcm	00000000 .hidden __aeabi_drsub
00001cd8 g     F .text.itcm	00000034 FatFile::addCluster()
0000ba10 g     F .text.itcm	00000024 _sbrk_r
00003ef0 g     F .text.itcm	0000004a SdSpiCard::readRegister(unsigned char, void*)
0000443c g     F .text.itcm	00000020 SdioCard::type() const
0000845c g     F .text.itcm	00000002 startup_default_early_hook
60001034 g     F .text.progmem	00000268 ResetHandler
00008b10 g     F .text.itcm	00000020 usb_serial_getchar
20004ec0 g     O .bss	00000008 usb_cdc_line_coding
00009c5c g     F .text.itcm	0000000a digitalWrite
20004a4c g     O .bss	00000004 EventResponder::lastYield
000003f0 g     F .text.itcm	00000028 ExFatFile::openRoot(ExFatVolume*)
00000318  w    F .text.itcm	0000001c Print::write(char const*)
000000e4  w    F .text.itcm	00000038 StreamFile<FsBaseFile, unsigned long long>::read()
0000a9b8 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
20004a80 g     O .bss	00000004 __malloc_max_sbrked_mem
00009c68 g     F .text.itcm	00000080 pinMode
0000584c g     F .text.itcm	00000056 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
000041e8 g     F .text.itcm	00000042 SdSpiCard::writeStop()
0000a42c g     F .text.itcm	0000003a .hidden __extendsfdf2
0000a728 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000a170 g     F .text.itcm	00000276 .hidden __adddf3
0000655c g     F .text.itcm	00000090 MTPD::getObjectPropsSupported(unsigned long)
00005c8c g     F .text.itcm	000000cc MTPD::writestring(char const*)
000042ac g     F .text.itcm	00000032 SdSpiCard::writeData(unsigned char const*)
00002c0c g     F .text.itcm	000000ae FatPartition::freeClusterCount()
20280000 g       .bss.dma	00000000 _heap_end
0000a4d4 g     F .text.itcm	00000254 .hidden __aeabi_dmul
000040e4 g     F .text.itcm	00000050 SdSpiCard::writeStart(unsigned long)
20004a50 g     O .bss	00000004 EventResponder::firstYield
200005c8 g     O .data	00000004 _global_impure_ptr
00005004 g     F .text.itcm	00000018 MTPStorage_SD::write(char const*, unsigned long)
00000178  w    F .text.itcm	00000034 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000b630 g     F .text.itcm	000003de _realloc_r
0000adb4 g     F .text.itcm	00000050 __libc_init_array
00000ccc g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000436c g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00001680 g     F .text.itcm	000000e6 ExFatFile::addDirCluster()
00004258 g     F .text.itcm	00000052 SdSpiCard::writeData(unsigned char, unsigned char const*)
000052e4 g     F .text.itcm	0000003a MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)
200007a8 g     O .data	00000028 __mprec_bigtens
00008464  w    F .text.itcm	0000008c HardFault_HandlerC
0000a028  w    F .text.itcm	00000004 usb_serial_class::clear()
0000a3e8 g     F .text.itcm	0000001e .hidden __floatunsidf
000084f0 g     F .text.itcm	00000030 _sbrk
6001069c g       *ABS*	00000000 _sdataload
0000c4a4 g     F .text.itcm	00000042 __mcmp
20004a58 g     O .bss	00000004 MillisTimer::listWaiting
200008b0 g     O .data	00000004 __brkval
20004948 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001758 g     F .text.progmem	00000000 _init
00008854 g     F .text.itcm	00000002 usb_serial_reset
00001da0 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00008104 g     F .text.itcm	00000020 day()
60001674 g     O .text.progmem	00000069 usb_config_descriptor_12
00004d94 g     F .text.itcm	00000034 SdSpiArduinoDriver::begin(SdSpiConfig)
20006340 g       .bss	00000000 _ebss
00004964 g     F .text.itcm	00000088 SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00005e20 g     F .text.itcm	0000025c MTPD::WriteDescriptor()
20000858 g     O .data	00000004 propertyListNum
000000b8  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000029f8 g     F .text.itcm	0000005e FatCache::read(unsigned long, unsigned char)
0000c174 g     F .text.itcm	00000040 __hi0bits
0000aa34 g     F .text.itcm	0000004e .hidden __fixdfsi
00001768 g     F .text.itcm	0000005a ExFatFile::mkdir(ExFatFile*, ExName_t*)
20203070 g       .bss.dma	00000000 _heap_start
0000607c g     F .text.itcm	0000004a MTPD::WriteStorageIDs()
00000002 g       *ABS*	00000000 _itcm_block_count
20005000 g     O .bss	00000020 endpoint0_transfer_data
00008144 g     F .text.itcm	00000024 year()
0000a12c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
00009980 g     F .text.itcm	000002b8 pwm_init
0000a170 g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000a900 g     F .text.itcm	00000082 .hidden __ledf2
0000ba34 g     F .text.itcm	0000003e strcat
6000135c g     F .text.progmem	00000064 usb_pll_start
0000c354 g     F .text.itcm	000000a0 __pow5mult
6000102c g     O .text.progmem	00000008 vector_table
00002560 g     F .text.itcm	0000005c FatFile::rmdir()
0000a468 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00002b4c g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00000000  w      *UND*	00000000 __deregister_frame_info
20005020 g     O .bss	00000020 endpoint0_transfer_ack
20004ec8 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000097dc g     F .text.itcm	00000028 usb_transmit
0000a008 g     F .text.itcm	00000020 systick_isr
000037cc g     F .text.itcm	00000020 FatFile::getSFN(char*)
00004034 g     F .text.itcm	00000074 SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
200008e8 g     O .data	00000010 Serial
20004a78 g     O .bss	00000001 HardwareSerial::serial_event_handlers_active
0000a048  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000391c g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
0000845c  w    F .text.itcm	00000002 startup_early_hook
000012ec g     F .text.itcm	0000008e ExFatFile::addCluster()
00008a4c g     F .text.itcm	00000044 usb_serial_peekchar
0000a9f4 g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
0000b3c0 g     F .text.itcm	00000000 memchr
00002ae4 g     F .text.itcm	00000066 FatPartition::fatPut(unsigned long, unsigned long)
00008c60 g     F .text.itcm	000002c4 set_arm_clock
20004a1c g     O .bss	00000004 systick_cycle_count
200008d0 g     O .data	00000016 usb_string_serial_number_default
0000bea8 g     F .text.itcm	000001d0 _free_r
000047b0 g     F .text.itcm	00000004 SdioCard::readStop()
00000d48 g     F .text.itcm	00000060 FsCache::get(unsigned long, unsigned char)
0000a9e0 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000a038  w    F .text.itcm	00000004 usb_serial_class::flush()
0000a16c g     F .text.itcm	0000027a .hidden __aeabi_dsub
00002cbc g     F .text.itcm	0000011e FatPartition::init(BlockDeviceInterface*, unsigned char)
00001e74 g     F .text.itcm	0000015c FatFile::mkdir(FatFile*, fname_t*)
2000129c g     O .data	00000004 __malloc_sbrk_base
0000a030  w    F .text.itcm	00000004 usb_serial_class::read()
000031e8 g     F .text.itcm	00000128 FatFile::remove()
0000a468 g     F .text.itcm	0000006a .hidden __floatundidf
0000c3f4 g     F .text.itcm	000000ae __lshift
00001fd0 g     F .text.itcm	000000c8 FatFile::mkdir(FatFile*, char const*, bool)
000097ac g     F .text.itcm	0000002e usb_prepare_transfer
00001290 g     F .text.itcm	0000005a exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)
00008444 g     F .text.itcm	00000018 unused_interrupt_vector
00005284 g     F .text.itcm	0000005e MTPStorage_SD::GetNextObjectHandle()
0000edbc g     F .text.itcm	00000100 __ssprint_r
200049e0 g     O .bss	00000004 usb_timer0_callback
60001504 g     F .text.progmem	0000011c tempmon_init
00004ed0  w    F .text.itcm	00000002 SdFs::~SdFs()
0000c6b8 g     F .text.itcm	0000005e _vasnprintf_r
0000a050  w    F .text.itcm	0000000c serialEvent()
0000bd68 g     F .text.itcm	000000a4 __register_exitproc
00000bc8 g     F .text.itcm	00000104 ExFatFile::open(ExFatFile*, char const*, int)
0000bc1c g     F .text.itcm	000000a0 strncmp
000017c4 g     F .text.itcm	000000dc ExFatFile::mkdir(ExFatFile*, char const*, bool)
00008a9c g     F .text.itcm	00000074 usb_serial_flush_input
000011cc g     F .text.itcm	00000070 ExFatPartition::freeClusterCount()
00005380 g     F .text.itcm	0000006c MTPStorage_SD::ConstructFilename(int, char*, int)
0000c224 g     F .text.itcm	00000130 __multiply
00008b30 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
20004a88 g     O .bss	00000028 __malloc_current_mallinfo
20000254 g     O .data	00000044 SPIClass::spiclass_lpspi4_hardware
0000c5fc g     F .text.itcm	000000ba __d2b
0000442c  w    F .text.itcm	0000000e SdioCard::~SdioCard()
00000348 g     F .text.itcm	000000a8 ExFatFile::getName(char*, unsigned int)
00004ec8 g     F .text.itcm	00000004 MTPStorage_SD::readonly()
00004870 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00008288 g     F .text.itcm	00000064 usb_mtp_send
0000ad9c g     F .text.itcm	0000000c __cxa_atexit
00000514 g     F .text.itcm	000001a8 ExFatFile::read(void*, unsigned int)
0000a408 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00000e08 g     F .text.itcm	0000000e FsCache::sync()
2000085c g     O .data	00000050 SPI
0000b460 g     F .text.itcm	00000062 memcmp
2000059c  w    O .data	00000028 vtable for usb_serial_class
00004e58 g     F .text.itcm	00000012 SdSpiArduinoDriver::send(unsigned char)
00006f40 g     F .text.itcm	00000138 MTPD::GetObject(unsigned long)
00004ec4  w    F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20004a20 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
20004a48 g     O .bss	00000004 MillisTimer::listActive
0000ad98  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00001454 g     F .text.itcm	0000005a ExFatFile::rmdir()
000065ec g     F .text.itcm	00000772 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000a728 g     F .text.itcm	000001d0 .hidden __divdf3
00003f4c g     F .text.itcm	00000098 SdSpiCard::sectorCount()
20000e90 g     O .data	00000408 __malloc_av_
0000a4d4 g     F .text.itcm	00000254 .hidden __muldf3
00008bc0 g     F .text.itcm	000000a0 usb_serial_flush_output
0000b628 g     F .text.itcm	00000002 __malloc_lock
00002f64 g     F .text.itcm	00000284 FatFile::parsePathName(char const*, fname_t*, char const**)
20004c00 g     O .bss	000002c0 _VectorsRam
00004e6c g     F .text.itcm	0000004e SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000c718 g     F .text.itcm	0000005e _calloc_r
00007078 g     F .text.itcm	00000070 MTPD::read(char*, unsigned long)
00007c30 g     F .text.itcm	00000214 SPIClass::begin()
20003d38 g     O .bss	00000004 getTimePtr
00001620 g     F .text.itcm	0000005e ExFatFile::sync()
200049f0 g     O .bss	00000001 usb_high_speed
0000237c g     F .text.itcm	000001e2 FatFile::rename(FatFile*, char const*)
00004510 g     F .text.itcm	0000001c SdioCard::isBusy()
000040a8 g     F .text.itcm	0000003a SdSpiCard::readStop()
0000b58c g     F .text.itcm	0000009a memset
00009d90 g     F .text.itcm	00000010 main
00004ed0  w    F .text.itcm	00000002 SdFs::~SdFs()
20004a7c g     O .bss	00000004 __malloc_max_total_mem
00000e18 g     F .text.itcm	000000b2 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20203000 g     O .bss.dma	00000069 usb_descriptor_buffer
00008018 g     F .text.itcm	0000008c now()
00001a34 g     F .text.itcm	00000270 ExFatFile::write(void const*, unsigned int)
20000124 g     O .data	00000050 vtable for MTPStorage_SD
00007158 g     F .text.itcm	00000148 MTPD::SendObjectInfo(unsigned long, unsigned long)
00009ce8 g     F .text.itcm	00000058 usb_init_serialnumber
600017bc g       .text.progmem	00000000 __init_array_end
0000c8a0 g     F .text.itcm	00000e34 _dtoa_r
0000ae24 g     F .text.itcm	00000570 _malloc_r
0000bd20 g     F .text.itcm	0000001a __ascii_wctomb
0000a478 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20000114  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
00009e40 g     F .text.itcm	00000080 EventResponder::triggerEventNotImmediate()
00007e50 g     F .text.itcm	00000008 SPIClass::transfer(void const*, void*, unsigned int)
00000031 g       *ABS*	00000000 __rtc_localtime
000098f8 g     F .text.itcm	00000064 micros
000014b0 g     F .text.itcm	00000170 ExFatFile::syncDir()
0000be0c g     F .text.itcm	0000009c _malloc_trim_r
60001670 g     O .text.progmem	00000004 string0
00008b5c g     F .text.itcm	00000018 usb_serial_write
00008460  w    F .text.itcm	00000002 startup_late_hook
0000a034  w    F .text.itcm	00000004 usb_serial_class::available()
000070e8 g     F .text.itcm	00000044 MTPD::readstring(char*)
000027b8 g     F .text.itcm	0000000c FatFile::sync()
20006000 g     O .bss	00000300 endpoint_queue_head
60001628  w    O .text.progmem	0000002e usb_string_product_name
0000982c g     F .text.itcm	000000cc delay
0000a908 g     F .text.itcm	0000007a .hidden __nedf2
00004f70 g     F .text.itcm	00000016 MTPStorage_SD::CloseIndex()
0000eed0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00008124 g     F .text.itcm	00000020 month()
00003fe4 g     F .text.itcm	00000050 SdSpiCard::readStart(unsigned long)
00000cdc g     F .text.itcm	00000040 ExFatFile::openNext(ExFatFile*, int)
0000a08c g     F .text.itcm	0000001e Print::printf(char const*, ...)
00001e54 g     F .text.itcm	0000001e FatFile::close()
0000995c g     F .text.itcm	00000024 Panic_Temp_isr
00002a68 g     F .text.itcm	0000000c FatPartition::clusterStartSector(unsigned long) const
2000386c g     O .bss	000004b0 sd
000043b4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000cc  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000bd3c g     F .text.itcm	0000002c _write_r
00004670 g     F .text.itcm	000000d4 SdioCard::erase(unsigned long, unsigned long)
00007e44 g     F .text.itcm	00000002 SPIClass::setMOSI(unsigned char)
00008240 g     F .text.itcm	00000048 usb_mtp_recv
20000d20 g     O .data	00000004 _impure_ptr
000006bc g     F .text.itcm	0000002c ExFatFile::peek()
20000000  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00003310 g     F .text.itcm	000000be FatFile::lfnUniqueSfn(fname_t*)
00003a44 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
00004354 g     F .text.itcm	0000000c SdioCard::errorCode() const
00002160 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001ac  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600017b0 g       .text.progmem	00000000 __preinit_array_end
00004ed4 g     F .text.itcm	0000009c dateTime(unsigned short*, unsigned short*, unsigned char*)
00003aa4  w    F .text.itcm	00000002 SdSpiCard::~SdSpiCard()
000080c4 g     F .text.itcm	00000020 minute()
00000ecc g     F .text.itcm	000000ec ExFatPartition::init(BlockDeviceInterface*, unsigned char)
0000109c g     F .text.itcm	00000036 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000053ec g     F .text.itcm	00000188 MTPStorage_SD::DeleteObject(unsigned long)
00004134 g     F .text.itcm	000000b4 SdSpiCard::erase(unsigned long, unsigned long)
0000b394 g     F .text.itcm	0000002a __ascii_mbtowc
00003b6c g     F .text.itcm	0000003e SdSpiCard::isBusy()
20000064 g     O .data	00000058 vtable for SdSpiCard
00003f44  w    F .text.itcm	00000008 SdSpiCard::readCID(CID*)
000001ec g     F .text.itcm	0000005c setup
20000524 g     O .data	00000078 usb_descriptor_list
000044c4 g     F .text.itcm	00000020 SdioCard::status()
0000501c g     F .text.itcm	000000cc MTPStorage_SD::ResetIndex()
00006f28 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
0000217c g     F .text.itcm	00000192 FatFile::read(void*, unsigned int)
00002170 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20070000 g       .bss.dma	00000000 _estack
00003a6c g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
00003f3c  w    F .text.itcm	00000008 SdSpiCard::readCSD(csd_t*)
00008b74 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003c20 g     F .text.itcm	00000030 SdSpiCard::waitNotBusy(unsigned short)
0000a9a4 g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
00008858 g     F .text.itcm	00000108 usb_serial_configure
0000a07c  w    F .text.itcm	0000000e _write
200012a0 g       .data	00000000 _edata
00001140 g     F .text.itcm	00000024 ExFatPartition::fatPut(unsigned long, unsigned long)
000062c8 g     F .text.itcm	00000294 MTPD::GetObjectInfo(unsigned long)
000043b4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
0000422c g     F .text.itcm	0000002c SdSpiCard::syncDevice()
00001d0c g     F .text.itcm	00000094 FatFile::addDirCluster()
0000a03c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00009d40 g     F .text.itcm	0000004e ultoa
000080e4 g     F .text.itcm	00000020 second()
00003cd0 g     F .text.itcm	000001cc SdSpiCard::begin(SdSpiConfig)
00005a58  w    F .text.itcm	00000098 SdBase<FsVolume>::errorHalt(Print*)
0000389c g     F .text.itcm	00000080 FsBaseFile::open(FsVolume*, char const*, int)
00005208 g     F .text.itcm	0000007c MTPStorage_SD::ReadIndexRecord(unsigned long)
00009ec0 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001298 g     O .data	00000004 __malloc_trim_threshold
0000a02c  w    F .text.itcm	00000004 usb_serial_class::peek()
00000080  w    F .text.itcm	00000038 MTPStorage_SD::~MTPStorage_SD()
200013e0 g     O .bss	00002440 mtpd
0000c4e8 g     F .text.itcm	00000114 __mdiff
000043a4 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000aa34 g     F .text.itcm	0000004e .hidden __aeabi_d2iz
000010d4 g     F .text.itcm	00000058 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000080a4 g     F .text.itcm	00000020 hour()
000047b0 g     F .text.itcm	00000004 SdioCard::writeStop()
00003a94  w    F .text.itcm	00000010 SdSpiCard::writeSector(unsigned long, unsigned char const*)
00000334 g     F .text.itcm	00000014 ExFatFile::close()
200005dc g     O .data	00000101 _ctype_
00003a80  w    F .text.itcm	00000010 SdSpiCard::readSector(unsigned long, unsigned char*)
600017b0 g       .text.progmem	00000000 __init_array_start
0000ad98  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000aa08 g     F .text.itcm	0000002c .hidden __unorddf2
200008b4 g     O .data	00000004 F_BUS_ACTUAL
00000000 g       .text.itcm	00000000 _stext
0000bb40 g     F .text.itcm	000000dc strlen
00002e2c g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000a994 g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000a8f8 g     F .text.itcm	0000008a .hidden __gedf2
000025bc g     F .text.itcm	00000092 FatFile::seekSet(unsigned long)
00005764 g     F .text.itcm	000000e8 MTPStorage_SD::Create(unsigned long, bool, char const*)
60001628 g     O .text.progmem	0000002e usb_string_product_name_default
0000bd08 g     F .text.itcm	00000018 vdprintf
00004604 g     F .text.itcm	0000006c SdioCard::sectorCount()
0000397c g     F .text.itcm	000000c8 FsVolume::begin(BlockDeviceInterface*)
00002728 g     F .text.itcm	0000008e FatFile::openNext(FatFile*, int)
200000bc g     O .data	00000058 vtable for SdioCard
0000a42c g     F .text.itcm	0000003a .hidden __aeabi_f2d
00005338 g     F .text.itcm	00000048 MTPStorage_SD::close()
00002e5c g     F .text.itcm	00000108 FatFile::getName(char*, unsigned int)
6000129c g     F .text.progmem	000000c0 configure_cache
00000080  w    F .text.itcm	00000038 MTPStorage_SD::~MTPStorage_SD()
00005574 g     F .text.itcm	000000bc MTPStorage_SD::rename(unsigned long, char const*)
00004b80 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004c9c g     F .text.itcm	000000f8 SdSpiArduinoDriver::activate()
0000a16c g     F .text.itcm	0000027a .hidden __subdf3
600017b0 g       .text.progmem	00000000 __preinit_array_start
00009804 g     F .text.itcm	00000024 usb_receive
00000fb8 g     F .text.itcm	000000aa ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
00005320 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
0000c1b4 g     F .text.itcm	0000005a __lo0bits
00004ecc g     F .text.itcm	00000004 MTPStorage_SD::has_directories()
00001064 g     F .text.itcm	00000038 ExFatPartition::chainSize(unsigned long)
00002650 g     F .text.itcm	000000d6 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00011930 g       *ABS*	00000000 _flashimagelen
0000a158 g     F .text.itcm	0000000a __aeabi_atexit
00000000  w      *UND*	00000000 __register_frame_info
00004fa8 g     F .text.itcm	00000024 MTPStorage_SD::clusterSize()
0000137c g     F .text.itcm	000000d6 ExFatFile::remove()
00009f04 g     F .text.itcm	00000004 pendablesrvreq_isr
000072a0 g     F .text.itcm	000000fc MTPD::SendObject()
0000007c  w    F .text.itcm	00000004 Print::availableForWrite()
20000d24 g     O .data	0000016c __global_locale
00007e48 g     F .text.itcm	00000002 SPIClass::setMISO(unsigned char)
00000d3c g     F .text.itcm	0000000c FsCache::invalidate()
00008960 g     F .text.itcm	000000ec usb_serial_read
00007e58 g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
0000a0ac g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00009744 g     F .text.itcm	00000068 usb_config_tx
00002a74 g     F .text.itcm	00000070 FatPartition::fatGet(unsigned long, unsigned long*)
0000ae14 g     F .text.itcm	00000010 free
0000c0f4 g     F .text.itcm	00000080 __multadd
0000c0e0 g     F .text.itcm	00000012 _Bfree
200008d0  w    O .data	00000016 usb_string_serial_number
00001254 g     F .text.itcm	0000003c exFatHashName(char const*, unsigned int, unsigned short)
00004bec g     F .text.itcm	000000b0 SdioCard::readSector(unsigned long, unsigned char*)
00004388 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. @,..`........
60001010:	 ..`...`........

60001020 <BootData>:
60001020:	...`0.......

6000102c <vector_table>:
6000102c:	... 5..`

60001034 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001034:	ldr	r3, [pc, #464]	; (60001208 <ResetHandler+0x1d4>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001036:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	ldr	r2, [pc, #464]	; (6000120c <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	ldr	r0, [pc, #464]	; (60001210 <ResetHandler+0x1dc>)
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	ldr	r2, [pc, #464]	; (60001214 <ResetHandler+0x1e0>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	ldr	r2, [pc, #460]	; (60001218 <ResetHandler+0x1e4>)
6000104a:	ldr	r1, [pc, #464]	; (6000121c <ResetHandler+0x1e8>)
6000104c:	cmp	r2, r1
6000104e:	beq.n	60001070 <ResetHandler+0x3c>
	while (dest < dest_end) {
60001050:	ldr	r3, [pc, #460]	; (60001220 <ResetHandler+0x1ec>)
60001052:	cmp	r2, r3
60001054:	bcs.n	60001070 <ResetHandler+0x3c>
60001056:	mvns	r4, r2
60001058:	mov	r0, r1
6000105a:	add	r3, r4
6000105c:	bic.w	r3, r3, #3
60001060:	adds	r3, #4
60001062:	add	r3, r1
		*dest++ = *src++;
60001064:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001068:	cmp	r0, r3
		*dest++ = *src++;
6000106a:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	bne.n	60001064 <ResetHandler+0x30>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001070:	ldr	r2, [pc, #432]	; (60001224 <ResetHandler+0x1f0>)
60001072:	ldr	r1, [pc, #436]	; (60001228 <ResetHandler+0x1f4>)
60001074:	cmp	r2, r1
60001076:	beq.n	60001098 <ResetHandler+0x64>
	while (dest < dest_end) {
60001078:	ldr	r3, [pc, #432]	; (6000122c <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r3
6000107c:	bcs.n	60001098 <ResetHandler+0x64>
6000107e:	mvns	r4, r2
60001080:	mov	r0, r1
60001082:	add	r3, r4
60001084:	bic.w	r3, r3, #3
60001088:	adds	r3, #4
6000108a:	add	r3, r1
		*dest++ = *src++;
6000108c:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001090:	cmp	r0, r3
		*dest++ = *src++;
60001092:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	bne.n	6000108c <ResetHandler+0x58>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001098:	ldr	r2, [pc, #404]	; (60001230 <ResetHandler+0x1fc>)
6000109a:	ldr	r3, [pc, #408]	; (60001234 <ResetHandler+0x200>)
6000109c:	cmp	r2, r3
6000109e:	bcs.n	600010b8 <ResetHandler+0x84>
600010a0:	mvns	r0, r2
600010a2:	mov	r1, r2
		*dest++ = 0;
600010a4:	movs	r4, #0
600010a6:	add	r3, r0
600010a8:	bic.w	r3, r3, #3
600010ac:	adds	r3, #4
600010ae:	add	r3, r2
600010b0:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010b4:	cmp	r3, r1
600010b6:	bne.n	600010b0 <ResetHandler+0x7c>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010b8:	ldr	r2, [pc, #380]	; (60001238 <ResetHandler+0x204>)
600010ba:	mov.w	r1, #15728640	; 0xf00000
600010be:	ldr	r3, [pc, #380]	; (6000123c <ResetHandler+0x208>)
600010c0:	str	r1, [r2, #0]
600010c2:	add.w	r1, r3, #704	; 0x2c0
600010c6:	ldr	r2, [pc, #376]	; (60001240 <ResetHandler+0x20c>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010c8:	str.w	r2, [r3, #4]!
600010cc:	cmp	r1, r3
600010ce:	bne.n	600010c8 <ResetHandler+0x94>
600010d0:	ldr	r3, [pc, #368]	; (60001244 <ResetHandler+0x210>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d2:	movs	r1, #128	; 0x80
600010d4:	ldr	r2, [pc, #368]	; (60001248 <ResetHandler+0x214>)
600010d6:	strb.w	r1, [r3], #1
600010da:	cmp	r3, r2
600010dc:	bne.n	600010d6 <ResetHandler+0xa2>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010de:	ldr	r4, [pc, #364]	; (6000124c <ResetHandler+0x218>)
600010e0:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010e4:	ldr	r6, [pc, #360]	; (60001250 <ResetHandler+0x21c>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010e6:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010ea:	ldr.w	sl, [pc, #420]	; 60001290 <ResetHandler+0x25c>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010ee:	movs	r5, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f0:	ldr.w	r9, [pc, #416]	; 60001294 <ResetHandler+0x260>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010f4:	ldr.w	r8, [pc, #416]	; 60001298 <ResetHandler+0x264>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f8:	ldr	r3, [pc, #344]	; (60001254 <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010fa:	ldr	r1, [pc, #268]	; (60001208 <ResetHandler+0x1d4>)
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fc:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001100:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001104:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001108:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000110c:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001110:	ldr	r3, [r6, #28]
60001112:	bic.w	r3, r3, #127	; 0x7f
60001116:	orr.w	r3, r3, #64	; 0x40
6000111a:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
6000111c:	ldr	r3, [r6, #36]	; 0x24
6000111e:	bic.w	r3, r3, #127	; 0x7f
60001122:	orr.w	r3, r3, #64	; 0x40
60001126:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001128:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000112a:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
6000112c:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001130:	bl	6000129c <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001134:	ldr	r2, [pc, #288]	; (60001258 <ResetHandler+0x224>)
60001136:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001138:	ldr	r3, [pc, #288]	; (6000125c <ResetHandler+0x228>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000113a:	ldr	r1, [pc, #292]	; (60001260 <ResetHandler+0x22c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113c:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000113e:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001140:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001142:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001146:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000114a:	ldr	r1, [pc, #280]	; (60001264 <ResetHandler+0x230>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000114c:	ldr	r2, [pc, #280]	; (60001268 <ResetHandler+0x234>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000114e:	ldr	r0, [pc, #284]	; (6000126c <ResetHandler+0x238>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001150:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001156:	ldr	r2, [pc, #280]	; (60001270 <ResetHandler+0x23c>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001158:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
6000115c:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001160:	ldr	r0, [pc, #272]	; (60001274 <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001164:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r1, [pc, #272]	; (60001278 <ResetHandler+0x244>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001168:	orr.w	r3, r3, #1
6000116c:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116e:	ldr	r3, [r0, #0]
60001170:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001172:	bl	6000135c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001176:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000117a:	ldr	r0, [pc, #256]	; (6000127c <ResetHandler+0x248>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000117c:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001180:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001184:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001188:	bl	60001770 <__set_arm_clock_veneer>
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?
6000118c:	nop
6000118e:	nop
60001190:	nop
60001192:	nop

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001194:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001196:	ldr	r2, [pc, #232]	; (60001280 <ResetHandler+0x24c>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001198:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119c:	ldr	r3, [pc, #228]	; (60001284 <ResetHandler+0x250>)
#endif

	asm volatile("nop\n nop\n nop\n nop": : :"memory"); // why oh why?

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119e:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a0:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a2:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a6:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011aa:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ae:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b2:	ldr	r2, [r3, #56]	; 0x38
600011b4:	lsls	r2, r2, #31
600011b6:	bmi.n	600011ca <ResetHandler+0x196>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b8:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011bc:	ldr	r1, [pc, #200]	; (60001288 <ResetHandler+0x254>)
600011be:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c0:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c2:	ldr	r2, [r3, #56]	; 0x38
600011c4:	orr.w	r2, r2, #1
600011c8:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011ca:	ldr	r2, [pc, #184]	; (60001284 <ResetHandler+0x250>)
600011cc:	ldr	r4, [pc, #188]	; (6000128c <ResetHandler+0x258>)
600011ce:	ldr	r3, [r2, #8]
600011d0:	orr.w	r3, r3, #65537	; 0x10001
600011d4:	str	r3, [r2, #8]

	startup_early_hook();
600011d6:	bl	600017a0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011da:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011dc:	cmp	r3, #19
600011de:	bls.n	600011da <ResetHandler+0x1a6>
	usb_init();
600011e0:	bl	600013c0 <usb_init>
	analog_init();
600011e4:	bl	600014ac <analog_init>
	pwm_init();
600011e8:	bl	60001788 <__pwm_init_veneer>
	tempmon_init();
600011ec:	bl	60001504 <tempmon_init>

	startup_late_hook();
600011f0:	bl	60001768 <__startup_late_hook_veneer>
600011f4:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f6:	cmp.w	r3, #300	; 0x12c
600011fa:	bcc.n	600011f4 <ResetHandler+0x1c0>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fc:	bl	60001778 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001200:	bl	60001780 <__main_veneer>
60001204:	b.n	60001204 <ResetHandler+0x1d0>
60001206:	nop
60001208:	.word	0x400ac000
6000120c:	.word	0xaaaaaaaf
60001210:	.word	0x00200007
60001214:	.word	0x20070000
60001218:	.word	0x00000000
6000121c:	.word	0x600017c0
60001220:	.word	0x0000eed0
60001224:	.word	0x20000000
60001228:	.word	0x6001069c
6000122c:	.word	0x200012a0
60001230:	.word	0x200012a0
60001234:	.word	0x20006340
60001238:	.word	0xe000ed88
6000123c:	.word	0x20004bfc
60001240:	.word	0x00008445
60001244:	.word	0xe000e400
60001248:	.word	0xe000e4a0
6000124c:	.word	0x400d8000
60001250:	.word	0x400fc000
60001254:	.word	0xe000ed08
60001258:	.word	0xe000e014
6000125c:	.word	0xe000e018
60001260:	.word	0x00009f05
60001264:	.word	0xe000edfc
60001268:	.word	0x20200000
6000126c:	.word	0x0000a009
60001270:	.word	0xe0001000
60001274:	.word	0xe0001004
60001278:	.word	0x20004a1c
6000127c:	.word	0x179a7b00
60001280:	.word	0x40084000
60001284:	.word	0x400d4000
60001288:	.word	0x56c00000
6000128c:	.word	0x20004a24
60001290:	.word	0x20004c00
60001294:	.word	0x2018101b
60001298:	.word	0x13110d0c

6000129c <configure_cache>:
#define SIZE_64M	(SCB_MPU_RASR_SIZE(25) | SCB_MPU_RASR_ENABLE)
#define SIZE_256M	(SCB_MPU_RASR_SIZE(26) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000129c:	push	{r4, r5, r6, r7, lr}

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
6000129e:	ldr	r2, [pc, #116]	; (60001314 <configure_cache+0x78>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a0:	movs	r1, #0

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012a2:	ldr	r3, [pc, #116]	; (60001318 <configure_cache+0x7c>)

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012a4:	mov.w	lr, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a8:	ldr	r0, [pc, #112]	; (6000131c <configure_cache+0x80>)

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012aa:	movs	r4, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ac:	ldr	r7, [pc, #112]	; (60001320 <configure_cache+0x84>)

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ae:	ldr	r6, [pc, #116]	; (60001324 <configure_cache+0x88>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012b0:	ldr	r5, [pc, #116]	; (60001328 <configure_cache+0x8c>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b2:	str	r1, [r0, #0]

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
600012b4:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012b8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
600012ba:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012bc:	ldr	r7, [pc, #108]	; (6000132c <configure_cache+0x90>)

	SCB_MPU_RBAR = 0x00000000 | REGION(0); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012be:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c0:	ldr	r6, [pc, #108]	; (60001330 <configure_cache+0x94>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012c2:	ldr	r5, [pc, #112]	; (60001334 <configure_cache+0x98>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	SCB_MPU_RBAR = 0x00200000 | REGION(1); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
600012c4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012c6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012c8:	ldr	r7, [pc, #108]	; (60001338 <configure_cache+0x9c>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
600012ca:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012cc:	ldr	r6, [pc, #108]	; (6000133c <configure_cache+0xa0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012ce:	ldr	r5, [pc, #112]	; (60001340 <configure_cache+0xa4>)

	SCB_MPU_RBAR = 0x20000000 | REGION(2); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012d0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
600012d2:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012d4:	ldr	r7, [pc, #108]	; (60001344 <configure_cache+0xa8>)

	SCB_MPU_RBAR = 0x20200000 | REGION(3); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012d6:	str	r5, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012d8:	ldr	r6, [pc, #108]	; (60001348 <configure_cache+0xac>)

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012da:	ldr	r5, [pc, #112]	; (6000134c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(4); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
600012dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600012de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e0:	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
600012e2:	str	r5, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012e4:	ldr	r6, [pc, #108]	; (60001354 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012e6:	ldr	r5, [pc, #112]	; (60001358 <configure_cache+0xbc>)

	SCB_MPU_RBAR = 0x60000000 | REGION(5); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(6); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_256M;
600012e8:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(7); // FlexSPI2
600012ea:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | SIZE_16M;
600012ec:	str	r5, [r3, #0]

	// TODO: 32 byte sub-region at 0x00000000 with NOACCESS, to trap NULL pointer deref
	// TODO: protect access to power supply config
	// TODO: 32 byte sub-region at end of .bss section with NOACCESS, to trap stack overflow

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012ee:	str	r4, [r0, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
600012f0:	dsb	sy
	asm("isb");
600012f4:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600012f8:	str.w	r1, [r3, #432]	; 0x1b0

	asm("dsb");
600012fc:	dsb	sy
	asm("isb");
60001300:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001304:	ldr.w	r3, [r2, #-136]
60001308:	orr.w	r3, r3, #196608	; 0x30000
6000130c:	str.w	r3, [r2, #-136]
60001310:	pop	{r4, r5, r6, r7, pc}
60001312:	nop
60001314:	.word	0xe000ed9c
60001318:	.word	0xe000eda0
6000131c:	.word	0xe000ed94
60001320:	.word	0x03080025
60001324:	.word	0x00200011
60001328:	.word	0x07020021
6000132c:	.word	0x20000012
60001330:	.word	0x13080025
60001334:	.word	0x20200013
60001338:	.word	0x130b0027
6000133c:	.word	0x40000014
60001340:	.word	0x13100033
60001344:	.word	0x60000015
60001348:	.word	0x070b002f
6000134c:	.word	0x70000016
60001350:	.word	0x070b0035
60001354:	.word	0x70000017
60001358:	.word	0x030b002f

6000135c <usb_pll_start>:
}


FLASHMEM void usb_pll_start()
{
6000135c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000135e:	ldr	r2, [pc, #92]	; (600013bc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001360:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001362:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001366:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000136a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000136e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001372:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001376:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001378:	tst.w	r3, #2
6000137c:	beq.n	6000138c <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000137e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001380:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001382:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001384:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001386:	tst.w	r3, #2
6000138a:	bne.n	6000137e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
6000138c:	tst.w	r3, #8192	; 0x2000
60001390:	bne.n	60001396 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	str	r5, [r2, #20]
			continue;
60001394:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001396:	tst.w	r3, #4096	; 0x1000
6000139a:	bne.n	600013a0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000139c:	str	r6, [r2, #20]
			continue;
6000139e:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013a0:	cmp	r3, #0
600013a2:	bge.n	60001376 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013a4:	tst.w	r3, #65536	; 0x10000
600013a8:	beq.n	600013ae <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013aa:	str	r1, [r2, #24]
			continue;
600013ac:	b.n	60001376 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013ae:	lsls	r3, r3, #25
600013b0:	bmi.n	600013b6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013b2:	str	r7, [r2, #20]
			continue;
600013b4:	b.n	60001376 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013b6:	pop	{r4, r5, r6, r7}
600013b8:	bx	lr
600013ba:	nop
600013bc:	.word	0x400d8000

600013c0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c0:	ldr	r3, [pc, #192]	; (60001484 <usb_init+0xc4>)
600013c2:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
600013c6:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600013c8:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013cc:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600013d0:	bl	600017a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d4:	ldr	r1, [pc, #176]	; (60001488 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013d6:	ldr	r0, [pc, #180]	; (6000148c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013d8:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013dc:	ldr	r4, [pc, #176]	; (60001490 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013de:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013e2:	ldr	r3, [pc, #176]	; (60001494 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600013e4:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600013e8:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600013ec:	ldr	r2, [r4, #0]
600013ee:	ands	r3, r2
600013f0:	cbnz	r3, 600013fa <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600013f2:	ldr.w	r3, [r0, #424]	; 0x1a8
600013f6:	lsls	r2, r3, #30
600013f8:	beq.n	60001430 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600013fa:	ldr	r3, [pc, #144]	; (6000148c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600013fc:	mov.w	r1, #2147483648	; 0x80000000
60001400:	ldr	r2, [pc, #140]	; (60001490 <usb_init+0xd0>)
60001402:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001404:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001406:	ldr.w	r1, [r3, #320]	; 0x140
6000140a:	orr.w	r1, r1, #2
6000140e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001412:	ldr.w	r3, [r2, #320]	; 0x140
60001416:	lsls	r3, r3, #30
60001418:	bmi.n	60001412 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000141a:	mov.w	r0, #131072	; 0x20000
6000141e:	ldr	r1, [pc, #120]	; (60001498 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001420:	ldr	r3, [pc, #108]	; (60001490 <usb_init+0xd0>)
60001422:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001426:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001428:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000142a:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000142c:	bl	60001798 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001430:	ldr	r5, [pc, #104]	; (6000149c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001432:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001434:	ldr	r3, [pc, #88]	; (60001490 <usb_init+0xd0>)
60001436:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000143a:	ldr	r4, [pc, #80]	; (6000148c <usb_init+0xcc>)
6000143c:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000143e:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001440:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001442:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001444:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001446:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000144a:	mov.w	r2, #768	; 0x300
6000144e:	bl	60001790 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001452:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
60001456:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000145a:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000145e:	ldr	r2, [pc, #64]	; (600014a0 <usb_init+0xe0>)
60001460:	ldr	r1, [pc, #64]	; (600014a4 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001462:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001464:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001466:	str.w	r5, [r4, #344]	; 0x158
6000146a:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000146e:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001472:	ldr	r2, [pc, #52]	; (600014a8 <usb_init+0xe8>)
60001474:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001478:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000147a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000147c:	str.w	r3, [r4, #320]	; 0x140
60001480:	pop	{r4, r5, r6, pc}
60001482:	nop
60001484:	.word	0x400d8000
60001488:	.word	0x400fc000
6000148c:	.word	0x402e0000
60001490:	.word	0x400d9000
60001494:	.word	0x001e1c00
60001498:	.word	0xe000e28c
6000149c:	.word	0x20006000
600014a0:	.word	0x20004c00
600014a4:	.word	0x0000905d
600014a8:	.word	0xe000e10c

600014ac <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ac:	ldr	r3, [pc, #68]	; (600014f4 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ae:	ldr	r1, [pc, #72]	; (600014f8 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b0:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014b2:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014b4:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600014b8:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600014ba:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014bc:	movw	r5, #1719	; 0x6b7
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c0:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014c2:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600014c4:	orr.w	r0, r0, #768	; 0x300
600014c8:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014ca:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600014cc:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600014ce:	ldr	r3, [r2, #72]	; 0x48
600014d0:	lsls	r3, r3, #24
600014d2:	bmi.n	600014ce <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014d4:	ldr	r3, [pc, #36]	; (600014fc <analog_init+0x50>)
600014d6:	movw	r0, #1719	; 0x6b7
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014da:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014dc:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_HC_AIEN | ADC_CFG_ADHSC;
600014de:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600014e0:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
600014e2:	ldr	r3, [r2, #72]	; 0x48
600014e4:	ands.w	r3, r3, #128	; 0x80
600014e8:	bne.n	600014e2 <analog_init+0x36>
	calibrating = 0;
600014ea:	ldr	r2, [pc, #20]	; (60001500 <analog_init+0x54>)
600014ec:	strb	r3, [r2, #0]
}
600014ee:	pop	{r4, r5}
600014f0:	bx	lr
600014f2:	nop
600014f4:	.word	0x400fc000
600014f8:	.word	0x400c4000
600014fc:	.word	0x400c8000
60001500:	.word	0x20004a28

60001504 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001504:	ldr	r2, [pc, #236]	; (600015f4 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001506:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000150a:	ldr	r1, [pc, #236]	; (600015f8 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000150c:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000150e:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001510:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001512:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001516:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	ldr.w	lr, [pc, #256]	; 6000161c <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000151c:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
6000151e:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001522:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001526:	ldr	r7, [pc, #212]	; (600015fc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001528:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000152a:	ubfx	r4, r3, #8, #12
6000152e:	ldr	r6, [pc, #208]	; (60001600 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001530:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001534:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001538:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000153c:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001540:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001544:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001548:	vmov	s15, r4
6000154c:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001550:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001552:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001556:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000155a:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000155e:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001560:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001564:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001568:	ldr	r5, [pc, #152]	; (60001604 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000156a:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000156e:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001570:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001574:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001578:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000157a:	vdiv.f32	s11, s14, s13
6000157e:	ldr	r6, [pc, #136]	; (60001608 <tempmon_init+0x104>)
60001580:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001582:	ldr	r1, [pc, #136]	; (6000160c <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001584:	ldr	r4, [pc, #136]	; (60001610 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001586:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000158a:	vmov	s15, r3
6000158e:	ldr	r3, [pc, #132]	; (60001614 <tempmon_init+0x110>)
60001590:	str.w	r3, [r6, #320]	; 0x140
60001594:	vcvt.f32.u32	s15, s15
60001598:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000159c:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a0:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015a4:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a8:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015ac:	vmov	r3, s11
600015b0:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015b4:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015b8:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600015bc:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015be:	and.w	r1, r1, r5, lsl #16
600015c2:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015c6:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015ca:	orrs	r3, r1
600015cc:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015d0:	vmov	r3, s15
600015d4:	ldr.w	r1, [r2, #272]	; 0x110
600015d8:	ubfx	r3, r3, #0, #12
600015dc:	orrs	r3, r1
600015de:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015e2:	ldr	r3, [r2, #0]
600015e4:	orr.w	r3, r3, #2
600015e8:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015ea:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015ec:	ldr	r3, [pc, #40]	; (60001618 <tempmon_init+0x114>)
600015ee:	movs	r2, #1
600015f0:	str	r2, [r3, #0]
600015f2:	pop	{r4, r5, r6, r7, pc}
600015f4:	.word	0x400d8180
600015f8:	.word	0x401f4400
600015fc:	.word	0x20004a34
60001600:	.word	0x20004a38
60001604:	.word	0x20004a30
60001608:	.word	0x20004c00
6000160c:	.word	0x0fff0000
60001610:	.word	0xe000e440
60001614:	.word	0x0000995d
60001618:	.word	0xe000e108
6000161c:	.word	0x20004a2c

60001620 <usb_string_mtp>:
60001620:	..M.T.P.

60001628 <usb_string_product_name_default>:
60001628:	..T.e.e.n.s.y. .
60001638:	M.T.P. .D.i.s.k.
60001648:	/.S.e.r.i.a.l...

60001658 <usb_string_manufacturer_name_default>:
60001658:	..T.e.e.n.s.y.d.
60001668:	u.i.n.o.

60001670 <string0>:
60001670:	....

60001674 <usb_config_descriptor_12>:
60001674:	..i.....2.......
60001684:	...........$....
60001694:	$....$...$......
600016a4:	................
600016b4:	.@......@.......
600016c4:	........@......@
600016d4:	............

600016e0 <usb_config_descriptor_480>:
600016e0:	..i.....2.......
600016f0:	...........$....
60001700:	$....$...$......
60001710:	................
60001720:	................
60001730:	................
60001740:	............

6000174c <qualifier_descriptor>:
6000174c:	.......@....

60001758 <_init>:
60001758:	push	{r3, r4, r5, r6, r7, lr}
6000175a:	nop
6000175c:	pop	{r3, r4, r5, r6, r7}
6000175e:	pop	{r3}
60001760:	mov	lr, r3
60001762:	bx	lr
60001764:			; <UNDEFINED> instruction: 0xffffffff

60001768 <__startup_late_hook_veneer>:
60001768:	ldr.w	pc, [pc]	; 6000176c <__startup_late_hook_veneer+0x4>
6000176c:	.word	0x00008461

60001770 <__set_arm_clock_veneer>:
60001770:	ldr.w	pc, [pc]	; 60001774 <__set_arm_clock_veneer+0x4>
60001774:	.word	0x00008c61

60001778 <____libc_init_array_veneer>:
60001778:	ldr.w	pc, [pc]	; 6000177c <____libc_init_array_veneer+0x4>
6000177c:	.word	0x0000adb5

60001780 <__main_veneer>:
60001780:	ldr.w	pc, [pc]	; 60001784 <__main_veneer+0x4>
60001784:	.word	0x00009d91

60001788 <__pwm_init_veneer>:
60001788:	ldr.w	pc, [pc]	; 6000178c <__pwm_init_veneer+0x4>
6000178c:	.word	0x00009981

60001790 <__memset_veneer>:
60001790:	ldr.w	pc, [pc]	; 60001794 <__memset_veneer+0x4>
60001794:	.word	0x0000b58d

60001798 <__delay_veneer>:
60001798:	ldr.w	pc, [pc]	; 6000179c <__delay_veneer+0x4>
6000179c:	.word	0x0000982d

600017a0 <__startup_early_hook_veneer>:
600017a0:	ldr.w	pc, [pc]	; 600017a4 <__startup_early_hook_veneer+0x4>
600017a4:	.word	0x0000845d

600017a8 <__usb_init_serialnumber_veneer>:
600017a8:	ldr.w	pc, [pc]	; 600017ac <__usb_init_serialnumber_veneer+0x4>
600017ac:	.word	0x00009ce9

600017b0 <__init_array_start>:
600017b0:	.word	0x00000045
600017b4:	.word	0x0000027d
600017b8:	.word	0x00005bb5

600017bc <__init_array_end>:
600017bc:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
      20:	.word	0x4c05b510
		USB1_USBINTR = intr | USB_USBINTR_SRE;
      24:	ldrb	r3, [r4, #0]
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>
	}
	__enable_irq();
      28:	.word	0xb1134b04
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	.short	0xf3af
      30:	strh	r0, [r0, #0]
      32:	.short	0x2301
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      34:	strb	r3, [r4, #0]
      36:	.short	0xbd10
      38:	asrs	r0, r4, #10
      3a:	.short	0x2000
      3c:	movs	r0, r0
      3e:	.short	0x0000
}
      40:	cdp	0, 13, cr0, cr4, cr0, {0}

00000044 <frame_dummy>:
      44:	.word	0xb5104b08
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	.short	0x4908
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      5c:	cmp	r3, #0

    } else if (num >= 16) {
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      mode |= ADC_CFG_AVGS(1);
      64:	.word	0xbf004718
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r4, #10
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	movs	r0, #0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	cdp	0, 13, cr0, cr4, cr0, {0}
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	asrs	r0, r4, #10
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	movs	r0, #0
      78:	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	.word	0x47702000

00000080 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface 
      80:	push	{r3, r4, r5, lr}
      82:	mov	r4, r0
      84:	ldr	r3, [pc, #40]	; (b0 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      86:	ldr	r5, [pc, #44]	; (b4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
      88:	adds	r0, #180	; 0xb4
      8a:	str.w	r3, [r0, #-180]
      8e:	str.w	r5, [r4, #164]	; 0xa4
      92:	bl	37ec <FsBaseFile::close()>
      96:	.short	0x6565
      98:	add.w	r0, r4, #100	; 0x64
      9c:	.word	0xfba6f003
      a0:	str	r5, [r4, #4]
      a2:	.short	0xf104
      a4:	movs	r4, r2
      a6:	.short	0xf003
      a8:			; <UNDEFINED> instruction: 0xfba14620
      ac:	.word	0xbf00bd38
      b0:	lsls	r4, r5, #4
      b2:	movs	r0, #0
      b4:	.word	0x20000008

000000b8 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
      b8:	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      bc:	mov	r0, r3
      be:	b.w	27b8 <FatFile::sync()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      c6:	.short	0xf001
      c8:	hlt	0x002b
      ca:	bx	lr

000000cc <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  }
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
      cc:	.word	0xb1136c83
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
      d0:	mov	r0, r3
      d2:	b.w	2310 <FatFile::peek()>
      d6:	ldr	r0, [r0, #76]	; 0x4c
      d8:	cbz	r0, de <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      da:	b.w	6bc <ExFatFile::peek()>
    return BaseFile::peek();
  }
      de:	mov.w	r0, #4294967295
      e2:	bx	lr

000000e4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      e4:	ldr	r3, [r0, #72]	; 0x48
      e6:	.short	0xb500
      e8:	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
      ea:	.short	0xb163
      ec:	mov	r0, r3
      ee:	.short	0x2201
      f0:	add.w	r1, sp, #7
      f4:	.word	0xf842f002
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
      f8:	cmp	r0, #1
      fa:	.short	0xd10c
      fc:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     100:	.word	0xf85db003
     104:			; <UNDEFINED> instruction: 0xfb046cc0
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     108:	cbz	r0, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10a:	movs	r2, #1
     10c:	add.w	r1, sp, #7
     110:	bl	514 <ExFatFile::read(void*, unsigned int)>
     114:	b.n	f8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     116:	mov.w	r0, #4294967295
     11a:	b.n	100 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000011c <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     11c:	ldr	r2, [r0, #72]	; 0x48
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     11e:	cbz	r2, 13a <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  void fsetpos(const fspos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() {
    return isFile() ? fileSize() - curPosition() : 0;
     120:	ldrb	r3, [r2, #0]
     122:	.short	0xf003
     124:	lsls	r0, r1, #12
     126:	and.w	r0, r3, #255	; 0xff
     12a:	cbz	r3, 170 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     12c:	ldr	r3, [r2, #28]
     12e:	ldr	r0, [r2, #20]
     130:	.word	0xbf481a18
     134:	mvnmi.w	r0, #2147483648	; 0x80000000
     138:	.word	0x6cc14770
     13c:	cbz	r1, 172 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     13e:	ldrb.w	r3, [r1, #49]	; 0x31
     142:	and.w	r3, r3, #8
     146:	and.w	r0, r3, #255	; 0xff
     14a:	cbz	r3, 170 <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     14c:	ldrd	r2, r3, [r1, #16]
     150:	ldrd	r0, r1, [r1]
     154:	push	{r4, r5}
     156:	subs	r0, r2, r0
     158:	.word	0x0500f04f
     15c:	mvn.w	r4, #2147483648	; 0x80000000
     160:	.word	0x0101eb63
     164:	cmp	r5, r1
     166:	.short	0xbf08
     168:	cmpeq	r4, r0
     16a:	bcs.n	16e <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     16c:	.word	0xbc304620
    return BaseFile::available();
  }
     170:	bx	lr
     172:	.short	0x4608
     174:	bx	lr
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
     176:	.short	0xbf00

00000178 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     178:	push	{lr}
     17a:	ldr	r3, [r0, #72]	; 0x48
     17c:	sub	sp, #12
     17e:	.short	0xf88d
     180:	asrs	r7, r0, #32
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     182:	.short	0xb143
     184:	mov	r0, r3
     186:	movs	r2, #1
     188:	.word	0x0107f10d
     18c:	bl	27c4 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     190:	.word	0xf85db003
     194:			; <UNDEFINED> instruction: 0xfb046cc0
     198:	.word	0xd0f92800
     19c:	movs	r2, #1
     19e:	.short	0xf10d
     1a0:	lsls	r7, r0, #4
     1a2:	.short	0xf001
     1a4:	mcrr2	0, 0, fp, r7, cr3
     1a8:	ldr.w	pc, [sp], #4

000001ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1ac:	.word	0xb1136c83
     1b0:	mov	r0, r3
     1b2:	.short	0xf002
     1b4:	cbnz	r7, 1f8 <setup+0xc>
     1b6:	ldr	r0, [r0, #76]	; 0x4c
     1b8:	.word	0xf001b108
     1bc:	pop	{r0, r1, r3, r4, r5}
    return BaseFile::write(buffer, size);
  }
     1be:	.short	0x4770

000001c0 <logg(unsigned long, char const*) [clone .part.13]>:

  MTPStorage_SD storage;
  MTPD       mtpd(&storage);


void logg(uint32_t del, const char *txt)
     1c0:	push	{r4, lr}
     1c2:	.short	0x4604
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     1c4:	bl	bb40 <strlen>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1c8:	.word	0x46204601
     1cc:	bl	8b5c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     1d0:	.word	0xf0094803
     1d4:	vpmax.u8	d20, d3, d3
  {
    Serial.println(txt); 
#if USE_SDIO==1
    digitalWriteFast(13,!digitalReadFast(13));
#endif
    to=millis();
     1d8:	.word	0x68124b03
     1dc:	str	r2, [r3, #0]
     1de:	pop	{r4, pc}
     1e0:	.word	0x200008e8
     1e4:	ldr	r2, [pc, #144]	; (278 <loop+0x30>)
     1e6:	.short	0x2000
     1e8:	asrs	r4, r7, #10
     1ea:	.short	0x2000

000001ec <setup>:
  }
}

void setup()
{ 
     1ec:	push	{r4, r5, r6, lr}
     1ee:	.short	0x4910
  while(!Serial && millis()<3000); 
     1f0:	movw	r0, #2999	; 0xbb7
     1f4:	.word	0x4c104a0f
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1f8:	ldr	r6, [pc, #64]	; (23c <setup+0x50>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1fa:	.short	0x780b
     1fc:	cbz	r3, 228 <setup+0x3c>
     1fe:	ldrb	r3, [r4, #0]
     200:	.word	0xd51107db
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     204:	ldr	r3, [r2, #0]
     206:	.short	0x6835
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     208:	subs	r3, r3, r5
     20a:	.short	0x2b0e
     20c:	bls.n	228 <setup+0x3c>
  usb_mtp_configure();
     20e:	.short	0xf007
     210:	vaddl.u32	<illegal reg q15.5>, d1, d5
  Storage_init();
     214:	.word	0x2108fc6d
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     218:	ldr	r0, [pc, #36]	; (240 <setup+0x54>)
     21a:	bl	8b5c <usb_serial_write>
     21e:	.short	0x4809

#if USE_SDIO==1
  pinMode(13,OUTPUT);
#endif

}
     220:	ldmia.w	sp!, {r4, r5, r6, lr}
     224:	.word	0xbf1af009
     228:	ldr	r3, [r2, #0]
  }
}

void setup()
{ 
  while(!Serial && millis()<3000); 
     22a:	.short	0x4283
     22c:	bls.n	1fa <setup+0xe>
     22e:	.short	0xe7ee
     230:	ldr	r2, [pc, #96]	; (294 <_GLOBAL__sub_I_storage+0x18>)
     232:	.short	0x2000
     234:	ldr	r2, [pc, #144]	; (2c8 <_GLOBAL__sub_I_storage+0x4c>)
     236:	.short	0x2000
     238:	ldr	r1, [pc, #288]	; (35c <ExFatFile::getName(char*, unsigned int)+0x14>)
     23a:	movs	r0, #0
     23c:	ldr	r6, [pc, #800]	; (560 <ExFatFile::read(void*, unsigned int)+0x4c>)
     23e:	movs	r0, #0
     240:	lsls	r0, r1, #1
     242:	.short	0x2000
     244:	lsrs	r0, r5, #3
     246:	.short	0x2000

00000248 <loop>:
#endif

}

void loop()
{ 
     248:	push	{r3, lr}
  mtpd.loop();
     24a:	.short	0x4808
     24c:	bl	739c <MTPD::loop()>
     250:	.word	0x4a084b07
     254:	ldr	r3, [r3, #0]
  MTPD       mtpd(&storage);


void logg(uint32_t del, const char *txt)
{ static uint32_t to;
  if(millis()-to > del)
     256:	.short	0x6812
     258:	subs	r3, r3, r2
     25a:	.short	0xf5b3
     25c:	ldrb	r2, [r7, #29]
     25e:	.short	0xd800
     260:	pop	{r3, pc}
     262:	.short	0x4805
{ 
  mtpd.loop();

  logg(1000,"loop");
  //asm("wfi"); // may wait forever on T4.x
}
     264:	ldmia.w	sp!, {r3, lr}
     268:	.word	0xbfaaf7ff
     26c:	asrs	r0, r4, #15
     26e:	.short	0x2000
     270:	ldr	r2, [pc, #144]	; (304 <_GLOBAL__sub_I_storage+0x88>)
     272:	.short	0x2000
     274:	asrs	r4, r7, #10
     276:	.short	0x2000
     278:	lsls	r4, r2, #1
     27a:	.short	0x2000

0000027c <_GLOBAL__sub_I_storage>:
     27c:	push	{r3, r4, r5, r6, r7, lr}
     27e:	.short	0x4920
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     280:	movs	r5, #0
     282:	.short	0x4c20
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     284:	mov.w	r6, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     288:	.word	0xf06f4b1f
     28c:	lsls	r1, r0, #28
#endif

  #include "mtp.h"
  #include "usb1_mtp.h"

  MTPStorage_SD storage;
     28e:	ldr	r2, [pc, #124]	; (30c <_GLOBAL__sub_I_storage+0x90>)
     290:	mov	r0, r4
     292:	str	r1, [r4, #0]
     294:	str	r3, [r4, #4]
     296:	.short	0x491e
     298:	str	r3, [r4, #84]	; 0x54
     29a:	.short	0xf8c4
     29c:	adds	r0, #164	; 0xa4
     29e:	strb	r5, [r4, #8]
     2a0:	strb	r5, [r4, #16]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
     2a2:	.short	0x64e5
     2a4:	str	r5, [r4, #80]	; 0x50
     2a6:	.short	0xf884
     2a8:	str	r0, [r3, r1]
     2aa:	.short	0xf884
     2ac:	str	r0, [r4, r1]
     2ae:	.short	0xf8c4
     2b0:	str	r4, [r3, r2]
     2b2:	str.w	r5, [r4, #160]	; 0xa0
     2b6:	strb.w	r5, [r4, #168]	; 0xa8
     2ba:	.short	0xf884
     2bc:	str	r0, [r6, r2]
     2be:	.short	0xf8c4
     2c0:	str	r4, [r5, r3]
     2c2:	str.w	r5, [r4, #240]	; 0xf0
     2c6:	.short	0x60e6
     2c8:	str	r6, [r4, #92]	; 0x5c
     2ca:	.short	0xf8c4
     2cc:	str	r4, [r5, #8]
     2ce:	str.w	r7, [r4, #248]	; 0xf8
     2d2:	.short	0xf8c4
     2d4:	str	r4, [r6, r3]
     2d6:	.short	0xf8c4
     2d8:	str	r4, [r7, r3]
     2da:	.short	0xf884
     2dc:	str	r0, [r0, r4]
     2de:	strb.w	r5, [r4, #257]	; 0x101
     2e2:	.short	0xf009
     2e4:	vqrdmulh.s<illegal width 64>	d4, d9, d11
#include "Storage.h"

// MTP Responder.
class MTPD {
public:
  explicit MTPD(MTPStorageInterface* storage) : storage_(storage) {}
     2e8:	movw	r0, #9248	; 0x2420
     2ec:	.word	0x4124f242
     2f0:	movw	r2, #9256	; 0x2428
     2f4:	.word	0x501d601c
     2f8:	strb	r5, [r3, r1]
     2fa:	str	r5, [r3, r2]
     2fc:	.word	0xbf00bdf8
     300:	lsls	r4, r5, #4
     302:	.short	0x2000
     304:	asrs	r0, r0, #11
     306:	.short	0x2000
     308:	movs	r4, r5
     30a:	.short	0x2000
     30c:	lsrs	r0, r2, #1
     30e:	movs	r0, #0
     310:	lsls	r1, r0, #2
     312:	movs	r0, r0
     314:	asrs	r0, r4, #15
     316:	.short	0x2000

00000318 <Print::write(char const*)>:
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     318:	push	{r4, r5, r6, lr}
     31a:	.short	0x4604
     31c:	mov	r0, r1
     31e:	.short	0x460d
     320:	bl	bb40 <strlen>
     324:	.word	0x46026823
     328:	mov	r1, r5
     32a:	.short	0x4620
     32c:	ldr	r3, [r3, #4]
     32e:	.short	0xe8bd
     330:	eors	r0, r6
     332:	bx	r3

00000334 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
     334:	push	{r4, lr}
     336:	mov	r4, r0
  bool rtn = sync();
     338:	bl	1620 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
     33c:	movs	r3, #0
     33e:	.short	0xf884
     340:	adds	r0, #49	; 0x31
  m_flags = 0;
     342:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
     346:	pop	{r4, pc}

00000348 <ExFatFile::getName(char*, unsigned int)>:
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     348:	.word	0x43f0e92d
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     34c:	add.w	r3, r0, #36	; 0x24
void ExFatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
     350:	sub	sp, #20
     352:	.short	0x4606
     354:	mov	r8, r1
     356:	.short	0x4615
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     358:	add.w	r9, sp, #4
  size_t n = 0;
  if (!isOpen()) {
     35c:	.word	0x4031f890
  m_curCluster = pos->cluster;
}
//-----------------------------------------------------------------------------
size_t ExFatFile::getName(ExChar_t *name, size_t length) {
  DirName_t* dn;
  DirPos_t pos = m_dirPos;
     360:	ldmia.w	r3, {r0, r1, r2}
     364:	.word	0x0007e889
  size_t n = 0;
  if (!isOpen()) {
     368:	cmp	r4, #0
     36a:	beq.n	3de <ExFatFile::getName(char*, unsigned int)+0x96>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     36c:	ldrb.w	r3, [r6, #48]	; 0x30
     370:	cmp	r3, #1
     372:	bls.n	3ec <ExFatFile::getName(char*, unsigned int)+0xa4>
     374:	movs	r7, #1
     376:	movs	r4, #0
    if (m_vol->dirSeek(&pos, is == 1 ? 64: 32) != 1) {
     378:	cmp	r7, #1
     37a:	mov	r1, r9
     37c:	ldr	r0, [r6, #32]
     37e:	ite	eq
     380:	moveq	r2, #64	; 0x40
     382:	.short	0x2220
     384:	bl	10d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>	; unpredictable branch in IT block

     388:	.word	0xd1282801
      DBG_FAIL_MACRO;
      goto fail;
    }
    dn = reinterpret_cast<DirName_t*>
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
     38c:	movs	r2, #0
     38e:	.short	0x4649
     390:	ldr	r0, [r6, #32]
     392:	.short	0xf000
     394:	mcr2	3, 4, fp, cr3, cr0, {0}
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
     398:	.word	0x2bc17803
     39c:	bne.n	3de <ExFatFile::getName(char*, unsigned int)+0x96>
     39e:	.short	0xeb08
     3a0:	lsls	r4, r0, #4
     3a2:	.short	0x4622
     3a4:	add.w	lr, r0, #30
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
      if ((n + 1) >= length) {
     3a8:	.word	0x233f3401
     3ac:	cmp	r4, r5
     3ae:	.short	0xd20f
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
     3b0:	ldrh.w	r2, [r0, #2]!
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     3b4:	.word	0xbf982a7e
     3b8:	uxtbls	r3, r2
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     3ba:	.short	0x4570
     3bc:	mov	r2, r4
      if ((n + 1) >= length) {
        goto done;
      }
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
     3be:	.short	0xf801
     3c0:	subs	r3, #1
         (m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ));
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (uint8_t in = 0; in < 15; in++) {
     3c2:	bne.n	3a8 <ExFatFile::getName(char*, unsigned int)+0x60>
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     3c4:	.word	0xf8963701
     3c8:	adds	r0, #48	; 0x30
     3ca:	.short	0xb2ff
     3cc:	cmp	r3, r7
     3ce:	.short	0xd8d3
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     3d0:	movs	r3, #0
  return n;
     3d2:	.short	0x4610
      uint16_t c = getLe16(dn->unicode + 2*in);
      name[n++] = sizeof(ExChar_t) > 1 || c < 0X7F ? c : '?';
    }
  }
 done:
  name[n] = 0;
     3d4:	strb.w	r3, [r8, r2]
  return n;

 fail:
  *name = 0;
  return 0;
}
     3d8:	.word	0xe8bdb005
     3dc:	strh	r0, [r6, #30]
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
     3de:	.short	0x2300
  return 0;
     3e0:	mov	r0, r3
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
     3e2:	.short	0xf888
     3e4:	adds	r0, #0
  return 0;
}
     3e6:	.short	0xb005
     3e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  size_t n = 0;
  if (!isOpen()) {
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 1; is < m_setCount; is++) {
     3ec:	.word	0xe7ef2200

000003f0 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
     3f0:	ldrb.w	r2, [r0, #49]	; 0x31
     3f4:	.word	0x2000b10a
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
     3f8:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
     3fa:	push	{r3, r4, r5, lr}
     3fc:	.word	0x4611460d
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     400:	movs	r2, #56	; 0x38
     402:	.short	0x4604
     404:	bl	b58c <memset>
  m_attributes = FILE_ATTR_ROOT;
     408:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     40a:	.short	0x2001
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     40c:	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     40e:	.short	0xf884
     410:	adds	r0, #49	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     412:	.short	0xf884
     414:	movs	r3, r6
     416:	.short	0xbd38

00000418 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
     418:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
     41c:	.word	0x28207808
     420:	bne.n	42a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
     422:	.short	0xf811
     424:	lsrs	r1, r0, #28
     426:	.short	0x2820
     428:	beq.n	422 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
     42a:	.short	0x6051

  for (len = 0; ; len++) {
    c = path[len];
     42c:	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
     42e:	.short	0x282f
     430:	beq.n	4fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
     432:	.short	0x2800
     434:	beq.n	4fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     436:	.short	0x285c
     438:	beq.n	486 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
     43a:	sub.w	r4, r0, #34	; 0x22
     43e:	uxtb	r4, r4
     440:	cmp	r4, #26
     442:	bls.n	48c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
     444:	.word	0x26001c4d
     448:	ldr.w	lr, [pc, #196]	; 510 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
     44c:	.word	0x2c1ae003
     450:	lsr.w	r7, lr, r4
     454:	bls.n	49c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
     456:	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     45a:	.short	0x3601
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     45c:	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     460:	.word	0x2c0146a8
     464:	mov	r7, r6
     466:	bls.n	486 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
     468:	cmp	r0, #124	; 0x7c
     46a:	beq.n	486 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
     46c:	cmp.w	ip, #94	; 0x5e
     470:	.word	0xf815d809
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
     474:	lsrs	r1, r0, #12
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
     476:	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
     47a:	.short	0xb1a0
     47c:	cmp	r0, #47	; 0x2f
     47e:	.short	0xb2e4
     480:	beq.n	4a6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
     482:	cmp	r0, #92	; 0x5c
     484:	bne.n	44e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
     486:	movs	r0, #0
     488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     48c:	ldr	r5, [pc, #128]	; (510 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
     48e:	lsr.w	r4, r5, r4
     492:	lsls	r5, r4, #31
     494:	bpl.n	444 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
     496:	movs	r0, #0
     498:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     49c:	lsls	r4, r7, #31
     49e:	bpl.n	456 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
     4a0:	movs	r0, #0
     4a2:	.short	0xe8bd
     4a4:	strh	r0, [r6, #14]
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
     4a6:	.short	0x282f
     4a8:	beq.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
     4aa:	cmp	r0, #32
     4ac:	bne.n	4f6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
     4ae:	adds	r0, r6, #1
     4b0:	add	r0, r1
     4b2:	mov	r5, r0
     4b4:	ldrb.w	r4, [r0], #1
     4b8:	.word	0xd0fa2c20
     4bc:	cmp	r4, #47	; 0x2f
     4be:	beq.n	4b2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
     4c0:	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
     4c2:	.short	0xb19e
    c = path[len - 1];
     4c4:	add	r7, r1
     4c6:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
     4ca:	cmp	r3, #32
     4cc:	beq.n	4d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
     4ce:	cmp	r3, #46	; 0x2e
     4d0:	bne.n	4e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
     4d2:	subs	r3, r6, #1
     4d4:	add	r1, r3
      break;
    }
    len--;
     4d6:	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
     4d8:	cbz	r3, 4ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
     4da:	ldrb.w	r0, [r1, #-1]!
     4de:	subs	r3, #1
    if (c != '.' && c != ' ') {
     4e0:	cmp	r0, #46	; 0x2e
     4e2:	beq.n	4d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
     4e4:	cmp	r0, #32
     4e6:	.short	0xd0f6
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
     4e8:	cmp	r6, #255	; 0xff
     4ea:	bgt.n	486 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
     4ec:	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
     4ee:	str	r3, [r2, #0]
  return true;
     4f0:	movs	r0, #1
     4f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     4f6:	str.w	r8, [r3]
     4fa:	b.n	4c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
     4fc:	cmp	r0, #32
     4fe:	beq.n	504 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
     500:	cmp	r0, #47	; 0x2f
     502:	bne.n	50a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
     504:	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
     506:	mov	r6, r7
     508:	b.n	4ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
     50a:	str	r1, [r3, #0]
     50c:	.word	0xe7ee2300
     510:	lsls	r1, r0, #4
     512:	lsls	r0, r0, #20

00000514 <ExFatFile::read(void*, unsigned int)>:

 fail:
  return 0;
}
//-----------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
     514:	.word	0x4ff0e92d
     518:	ldrb.w	r3, [r0, #51]	; 0x33
     51c:	sub	sp, #12
     51e:	mov	r4, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
     520:	.word	0xf14007dd
     524:	strh	r1, [r6, #4]
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     526:	lsls	r0, r3, #25
     528:	mov	r5, r1
     52a:	mov	r6, r2
     52c:	bpl.w	69e <ExFatFile::read(void*, unsigned int)+0x18a>
    if ((m_curPosition + count) > m_validLength) {
     530:	ldrd	r0, r1, [r4]
     534:	ldrd	r2, r3, [r4, #16]
     538:	.word	0x0806eb10
     53c:	adc.w	r9, r1, #0
     540:	cmp	r3, r9
     542:	it	eq
     544:	cmpeq	r2, r8
     546:	bcc.w	6aa <ExFatFile::read(void*, unsigned int)+0x196>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     54a:	cmp	r6, #0
     54c:	beq.w	6ae <ExFatFile::read(void*, unsigned int)+0x19a>
     550:	mov	sl, r4
     552:	mov	r8, r6
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     554:	movw	r9, #511	; 0x1ff
     558:	ldrd	r2, r3, [sl], #24
     55c:	b.n	602 <ExFatFile::read(void*, unsigned int)+0xee>
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
     55e:	orrs	r3, r2
     560:	bne.n	640 <ExFatFile::read(void*, unsigned int)+0x12c>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
     562:	ldrb.w	r3, [r4, #49]	; 0x31
     566:	.short	0x065a
     568:	ite	mi
     56a:	ldrmi.w	r1, [r0, #1068]	; 0x42c
     56e:	ldrpl	r1, [r4, #28]
      } else if (isContiguous()) {
        m_curCluster++;
     570:	str	r1, [r4, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
     572:	subs	r1, #2
     574:	lsrs	r7, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
     576:	ldrb.w	ip, [r0, #1085]	; 0x43d
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     57a:	cmp	r8, r9
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
     57c:	ldr.w	r2, [r0, #1060]	; 0x424
     580:	lsl.w	lr, r1, ip
     584:	add.w	r1, r7, r2
     588:	.word	0xd9444471
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
     58c:	cmp.w	fp, #0
     590:	.word	0xf8d0d141
     594:	movs	r2, #20
                          || sector == m_vol->dataCacheSector()) {
     596:	cmp	r1, r2
     598:	beq.n	616 <ExFatFile::read(void*, unsigned int)+0x102>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
     59a:	cmp.w	r8, #1024	; 0x400
     59e:	bcc.n	64e <ExFatFile::read(void*, unsigned int)+0x13a>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
     5a0:	mov.w	lr, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
     5a4:	mov.w	r3, r8, lsr #9
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
     5a8:	lsl.w	ip, lr, ip
     5ac:	rsb	lr, r7, ip
     5b0:	mov	r7, r3
     5b2:	cmp	r3, lr
     5b4:	it	cs
     5b6:	movcs	r7, lr
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     5b8:	cmp	r1, r2
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     5ba:	mov.w	fp, r7, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
     5be:	bhi.n	5d8 <ExFatFile::read(void*, unsigned int)+0xc4>
     5c0:	adds	r3, r1, r7
     5c2:	cmp	r3, r2
     5c4:	bls.n	5d8 <ExFatFile::read(void*, unsigned int)+0xc4>
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
     5c6:	add.w	r0, r0, #524	; 0x20c
     5ca:	str	r1, [sp, #4]
     5cc:	bl	e08 <FsCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->dataCacheSync()) {
     5d0:	cmp	r0, #0
     5d2:	beq.n	688 <ExFatFile::read(void*, unsigned int)+0x174>
     5d4:	ldr	r0, [r4, #32]
     5d6:	ldr	r1, [sp, #4]
     5d8:	ldr.w	r0, [r0, #1080]	; 0x438
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
     5dc:	mov	r3, r7
     5de:	mov	r2, r5
     5e0:	ldr	r7, [r0, #0]
     5e2:	ldr	r7, [r7, #12]
     5e4:	blx	r7
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
     5e6:	cmp	r0, #0
     5e8:	beq.n	688 <ExFatFile::read(void*, unsigned int)+0x174>
     5ea:	mov	r0, fp
     5ec:	movs	r1, #0
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
     5ee:	add	r5, fp
    m_curPosition += n;
     5f0:	ldrd	r2, r3, [r4]
     5f4:	adds	r2, r2, r0
     5f6:	adcs	r3, r1
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     5f8:	subs.w	r8, r8, fp
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
     5fc:	strd	r2, r3, [r4]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
     600:	beq.n	6ae <ExFatFile::read(void*, unsigned int)+0x19a>
    clusterOffset = m_curPosition & m_vol->clusterMask();
     602:	ldr	r0, [r4, #32]
     604:	ldr.w	r7, [r0, #1072]	; 0x430
     608:	ands	r7, r2
    sectorOffset = clusterOffset & m_vol->sectorMask();
     60a:	ubfx	fp, r7, #0, #9
    if (clusterOffset == 0) {
     60e:	cmp	r7, #0
     610:	beq.n	55e <ExFatFile::read(void*, unsigned int)+0x4a>
     612:	ldr	r1, [r4, #24]
     614:	b.n	572 <ExFatFile::read(void*, unsigned int)+0x5e>
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     616:	add.w	r0, r0, #524	; 0x20c
     61a:	movs	r2, #0
     61c:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
     620:	cbz	r0, 688 <ExFatFile::read(void*, unsigned int)+0x174>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
     622:	rsb	r3, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
     626:	add.w	r1, r0, fp
     62a:	mov	r0, r5
     62c:	cmp	r3, r8
     62e:	it	cs
     630:	movcs	r3, r8
     632:	mov	fp, r3
     634:	mov	r2, r3
     636:	bl	8310 <memcpy>
     63a:	movs	r1, #0
     63c:	mov	r0, fp
     63e:	b.n	5ee <ExFatFile::read(void*, unsigned int)+0xda>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
     640:	ldrb.w	r3, [r4, #51]	; 0x33
     644:	lsls	r3, r3, #25
     646:	bpl.n	668 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster++;
     648:	ldr	r1, [r4, #24]
     64a:	adds	r1, #1
     64c:	b.n	570 <ExFatFile::read(void*, unsigned int)+0x5c>
     64e:	ldr.w	r0, [r0, #1080]	; 0x438
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
     652:	mov	r2, r5
     654:	ldr	r3, [r0, #0]
     656:	ldr	r3, [r3, #8]
     658:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
     65a:	cbz	r0, 688 <ExFatFile::read(void*, unsigned int)+0x174>
     65c:	mov.w	r0, #512	; 0x200
     660:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     662:	mov.w	fp, #512	; 0x200
     666:	b.n	5ee <ExFatFile::read(void*, unsigned int)+0xda>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
     668:	mov	r2, sl
     66a:	ldr	r1, [r4, #24]
     66c:	bl	112c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     670:	sxtb	r0, r0
        if (fg < 0) {
     672:	cmp	r0, #0
     674:	blt.n	688 <ExFatFile::read(void*, unsigned int)+0x174>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
     676:	beq.n	67e <ExFatFile::read(void*, unsigned int)+0x16a>
     678:	ldr	r0, [r4, #32]
     67a:	ldr	r1, [r4, #24]
     67c:	b.n	572 <ExFatFile::read(void*, unsigned int)+0x5e>
          // EOF if directory.
          if (isDir()) {
     67e:	ldrb.w	r3, [r4, #49]	; 0x31
     682:	tst.w	r3, #80	; 0x50
     686:	bne.n	6b2 <ExFatFile::read(void*, unsigned int)+0x19e>
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     688:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
     68c:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

fail:
  m_error |= READ_ERROR;
     690:	orr.w	r3, r3, #2
     694:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
     698:	add	sp, #12
     69a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
     69e:	ldrb.w	r3, [r4, #49]	; 0x31
     6a2:	lsls	r1, r3, #28
     6a4:	bmi.w	530 <ExFatFile::read(void*, unsigned int)+0x1c>
     6a8:	b.n	54a <ExFatFile::read(void*, unsigned int)+0x36>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
     6aa:	subs	r6, r2, r0
     6ac:	b.n	54a <ExFatFile::read(void*, unsigned int)+0x36>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
     6ae:	mov.w	r8, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
     6b2:	rsb	r0, r8, r6

fail:
  m_error |= READ_ERROR;
  return -1;
}
     6b6:	add	sp, #12
     6b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000006bc <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
     6bc:	push	{r4, r5, r6, r7, lr}
     6be:	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     6c0:	movs	r2, #1
     6c2:	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
     6c4:	ldr	r5, [r0, #24]
     6c6:	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
     6ca:	ldrd	r6, r7, [r0]
     6ce:	bl	514 <ExFatFile::read(void*, unsigned int)>
     6d2:	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
     6d4:	str	r5, [r4, #24]
     6d6:	ite	eq
     6d8:	ldrbeq.w	r0, [sp, #7]
     6dc:	movne.w	r0, #4294967295
//-----------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
     6e0:	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
     6e4:	add	sp, #12
     6e6:	pop	{r4, r5, r6, r7, pc}

000006e8 <ExFatFile::seekSet(unsigned long long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
     6e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6ec:	ldrb.w	lr, [r0, #49]	; 0x31
     6f0:	sub	sp, #20
     6f2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
     6f4:	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
     6f6:	cmp.w	lr, #0
     6fa:	beq.n	76a <ExFatFile::seekSet(unsigned long long)+0x82>
     6fc:	mov	r6, r2
     6fe:	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
     700:	ldrd	r0, r1, [r0]
     704:	cmp	r1, r3
     706:	it	eq
     708:	cmpeq	r0, r2
     70a:	beq.n	7d8 <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
     70c:	orrs.w	r3, r6, r7
     710:	bne.n	774 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
     712:	movs	r3, #0
     714:	str	r3, [r4, #24]
    }
  }

done:
  m_curPosition = pos;
  return true;
     716:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     718:	strd	r6, r7, [r4]
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
     71c:	add	sp, #20
     71e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     722:	adds.w	r2, r0, #4294967295
     726:	adc.w	r3, r1, #4294967295
     72a:	lsr.w	ip, r2, ip
     72e:	lsl.w	r8, r3, r8
     732:	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
     736:	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
     73a:	orr.w	ip, ip, r8
     73e:	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
     742:	beq.n	7dc <ExFatFile::seekSet(unsigned long long)+0xf4>
     744:	cmp	fp, ip
     746:	bcc.n	7dc <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
     748:	rsb	fp, ip, fp
     74c:	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     74e:	add.w	r8, r4, #24
     752:	mov	r5, fp
     754:	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     756:	cmp	r5, #0
     758:	beq.n	716 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
     75a:	ldr	r1, [r4, #24]
     75c:	subs	r5, #1
     75e:	ldr	r0, [r4, #32]
     760:	bl	112c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
     764:	cmp	r0, #0
     766:	bne.n	754 <ExFatFile::seekSet(unsigned long long)+0x6c>
     768:	mov	r5, r9
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
  return false;
     76a:	movs	r0, #0
done:
  m_curPosition = pos;
  return true;

fail:
  m_curCluster = tmp;
     76c:	str	r5, [r4, #24]
  return false;
}
     76e:	add	sp, #20
     770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
     774:	tst.w	lr, #8
     778:	bne.n	7ca <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     77a:	ldr	r3, [r4, #32]
     77c:	adds.w	r8, r6, #4294967295
     780:	ldrb.w	ip, [r3, #1085]	; 0x43d
     784:	adc.w	r9, r7, #4294967295
     788:	mov	sl, r8
     78a:	str	r3, [sp, #12]
     78c:	add.w	ip, ip, #9
     790:	mov	fp, r9
  if (isContiguous()) {
     792:	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     796:	uxtb.w	ip, ip
  if (isContiguous()) {
     79a:	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
     79e:	rsb	r8, ip, #32
     7a2:	lsr.w	r2, sl, ip
     7a6:	strd	sl, fp, [sp]
     7aa:	ldr	r3, [sp, #4]
     7ac:	sub.w	sl, ip, #32
     7b0:	lsl.w	fp, r3, r8
     7b4:	lsr.w	r3, r3, sl
     7b8:	orr.w	r2, r2, fp
     7bc:	orr.w	fp, r2, r3
  if (isContiguous()) {
     7c0:	beq.n	722 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
     7c2:	ldr	r3, [r4, #28]
     7c4:	add	r3, fp
     7c6:	str	r3, [r4, #24]
    goto done;
     7c8:	b.n	716 <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
     7ca:	ldrd	r2, r3, [r4, #16]
     7ce:	cmp	r3, r7
     7d0:	it	eq
     7d2:	cmpeq	r2, r6
     7d4:	bcc.n	76a <ExFatFile::seekSet(unsigned long long)+0x82>
     7d6:	b.n	77a <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
     7d8:	movs	r0, #1
     7da:	b.n	76e <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
     7dc:	tst.w	lr, #64	; 0x40
     7e0:	bne.n	7e8 <ExFatFile::seekSet(unsigned long long)+0x100>
     7e2:	ldr	r3, [r4, #28]
     7e4:	str	r3, [r4, #24]
     7e6:	b.n	74c <ExFatFile::seekSet(unsigned long long)+0x64>
     7e8:	ldr	r3, [sp, #12]
     7ea:	ldr.w	r3, [r3, #1068]	; 0x42c
     7ee:	b.n	7e4 <ExFatFile::seekSet(unsigned long long)+0xfc>

000007f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     7f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f4:	mov	sl, r3
     7f6:	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     7f8:	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
     7fc:	mov	r5, r0
     7fe:	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
     800:	cbnz	r3, 80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     802:	ldrb.w	r3, [r1, #49]	; 0x31
     806:	mov	r6, r1
     808:	tst.w	r3, #80	; 0x50
     80c:	bne.n	820 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
     80e:	movs	r3, #0
  m_flags = 0;
  return false;
     810:	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
     812:	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
     816:	strb.w	r3, [r5, #51]	; 0x33
  return false;
}
     81a:	add	sp, #76	; 0x4c
     81c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     820:	ldr	r3, [sp, #112]	; 0x70
     822:	and.w	r3, r3, #3
     826:	cmp	r3, #1
     828:	beq.n	838 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
     82a:	cmp	r3, #2
     82c:	beq.w	a42 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x252>
     830:	cmp	r3, #0
     832:	bne.n	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     834:	movs	r3, #1
     836:	b.n	83a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
     838:	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
     83a:	ldr	r2, [sp, #112]	; 0x70
     83c:	and.w	r2, r2, #8
     840:	orrs	r3, r2
     842:	str	r3, [sp, #4]
  if (name) {
     844:	ldr	r3, [sp, #0]
     846:	cmp	r3, #0
     848:	beq.w	a46 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x256>
    nameHash = exFatHashName(name, nameLength, 0);
     84c:	mov	r0, r3
     84e:	movs	r2, #0
     850:	mov	r1, sl
     852:	bl	1254 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
     856:	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
     85a:	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
     85c:	cbz	r3, 872 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
     85e:	ldrd	r2, r3, [r6]
     862:	orrs	r3, r2
     864:	beq.n	872 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
     866:	movs	r1, #0
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     868:	movs	r2, #0
     86a:	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
     86c:	str	r1, [r6, #24]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
     86e:	strd	r2, r3, [r6]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     872:	add.w	r3, sl, #14
     876:	ldr	r1, [pc, #736]	; (b58 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
     878:	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     87c:	smull	r2, r1, r1, r3
     880:	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
     882:	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
     884:	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
     886:	add	r3, r1
     888:	rsb	r3, r2, r3, asr #3
     88c:	uxtb	r3, r3
     88e:	str	r3, [sp, #12]
     890:	adds	r3, #2
     892:	uxtb.w	fp, r3

  while (1) {
    n = dir->read(buf, 32);
     896:	movs	r2, #32
     898:	add	r1, sp, #40	; 0x28
     89a:	mov	r0, r6
     89c:	bl	514 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     8a0:	cmp	r0, #0
     8a2:	beq.n	920 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
     8a4:	cmp	r0, #32
     8a6:	bne.n	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
     8a8:	ldrb.w	r3, [sp, #40]	; 0x28
     8ac:	lsls	r2, r3, #24
     8ae:	bmi.n	97e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
     8b0:	cmp	r4, #0
     8b2:	bne.n	978 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
     8b4:	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
     8b6:	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
     8b8:	subs	r2, #32
        freePos.cluster = dir->curCluster();
     8ba:	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
     8bc:	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
     8be:	adds	r4, #1
     8c0:	uxtb	r4, r4
      }
      if (!buf[0]) {
     8c2:	cbz	r3, 920 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
     8c4:	cmp	r3, #192	; 0xc0
     8c6:	beq.w	9f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x200>
     8ca:	cmp	r3, #193	; 0xc1
     8cc:	beq.n	994 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
     8ce:	cmp	r3, #133	; 0x85
     8d0:	bne.n	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
     8d2:	movs	r2, #56	; 0x38
     8d4:	movs	r1, #0
     8d6:	mov	r0, r5
     8d8:	bl	b58c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     8dc:	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
     8e0:	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
     8e4:	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     8e6:	mov	r0, r6
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
     8e8:	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
     8ec:	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
     8f0:	it	pl
     8f2:	orrpl.w	r2, r2, #8
     8f6:	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     8fa:	ldr	r3, [r6, #0]
     8fc:	ldr	r1, [r6, #32]
     8fe:	ldr	r2, [r6, #24]
     900:	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
     902:	str	r1, [r5, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     904:	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
     906:	str	r2, [r5, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     908:	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
     90a:	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
     90c:	ldrb.w	r3, [r6, #51]	; 0x33
     910:	ubfx	r3, r3, #6, #1
     914:	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
     918:	bl	514 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
     91c:	cmp	r0, #0
     91e:	bne.n	8a4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb4>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
     920:	ldr	r3, [sp, #112]	; 0x70
     922:	lsls	r1, r3, #22
     924:	bpl.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     928:	ldr	r3, [sp, #4]
     92a:	lsls	r2, r3, #30
     92c:	bpl.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     930:	ldr	r3, [sp, #0]
     932:	cmp	r3, #0
     934:	beq.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     938:	cmp	r4, fp
     93a:	bcc.n	956 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
     93c:	b.n	a4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
     93e:	cmp	r0, #32
     940:	bne.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
     944:	cbnz	r4, 950 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
     946:	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
     948:	ldr	r1, [r6, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
     94a:	subs	r2, #32
      freePos.cluster = dir->curCluster();
     94c:	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
     94e:	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     950:	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
     952:	cmp	fp, r4
     954:	bls.n	a4c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    n = dir->read(buf, 32);
     956:	movs	r2, #32
     958:	add	r1, sp, #40	; 0x28
     95a:	mov	r0, r6
     95c:	bl	514 <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
     960:	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
     962:	cmp	r0, #0
     964:	bne.n	93e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
     966:	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
     968:	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
     96a:	bl	1680 <ExFatFile::addDirCluster()>
     96e:	cmp	r0, #0
     970:	beq.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
     974:	str	r7, [r6, #24]
      continue;
     976:	b.n	952 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
     978:	cmp	r4, fp
     97a:	bcs.n	8c2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
     97c:	b.n	8be <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
     97e:	cmp.w	r9, #0
     982:	bne.n	8c4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
     984:	cmp	r4, fp
     986:	it	cc
     988:	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
     98a:	cmp	r3, #133	; 0x85
     98c:	bne.n	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        continue;
      }
      inSet = true;
     98e:	mov.w	r9, #1
     992:	b.n	8d2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
     994:	rsb	r8, r7, sl
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
     998:	mov	r2, r7
     99a:	ldr	r1, [sp, #0]
     99c:	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
     99e:	uxtb.w	r8, r8
     9a2:	cmp.w	r8, #15
     9a6:	it	cs
     9a8:	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
     9ac:	mov	r3, r8
     9ae:	bl	1290 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
     9b2:	cmp	r0, #0
     9b4:	beq.n	a30 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
     9b6:	add	r7, r8
     9b8:	uxtb	r7, r7

        if (nameOffset == nameLength) {
     9ba:	cmp	sl, r7
     9bc:	bne.w	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
     9c0:	ldr	r3, [sp, #112]	; 0x70
     9c2:	lsls	r3, r3, #20
     9c4:	bmi.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
     9c8:	ldr	r3, [sp, #112]	; 0x70
     9ca:	tst.w	r3, #17408	; 0x4400
     9ce:	bne.w	b12 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
     9d2:	ldrb.w	r3, [r5, #51]	; 0x33
     9d6:	lsls	r7, r3, #30
     9d8:	bmi.w	b12 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     9dc:	ldr	r3, [sp, #112]	; 0x70
     9de:	lsls	r3, r3, #21
     9e0:	bmi.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     9e4:	ldr	r3, [sp, #112]	; 0x70
     9e6:	lsls	r0, r3, #17
     9e8:	bmi.w	b5c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
     9ec:	movs	r0, #1
     9ee:	b.n	81a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     9f0:	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
     9f4:	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     9f6:	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
     9f8:	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
     9fc:	bpl.n	a06 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x216>
          m_flags |= FILE_FLAG_CONTIGUOUS;
     9fe:	orr.w	r3, r2, #64	; 0x40
     a02:	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
     a06:	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     a08:	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
     a0c:	str	r1, [r5, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
     a0e:	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     a12:	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
     a16:	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
     a18:	strd	r0, r1, [r5, #8]
        if (!name) {
     a1c:	cmp	r3, #0
     a1e:	beq.n	9c0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     a20:	ldrb.w	r3, [sp, #43]	; 0x2b
     a24:	cmp	r3, sl
     a26:	beq.n	a34 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x244>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
     a28:	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     a2c:	mov	r7, r9
     a2e:	b.n	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
     a30:	mov	r9, r0
     a32:	b.n	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
     a34:	ldrh.w	r3, [sp, #44]	; 0x2c
     a38:	ldr	r2, [sp, #8]
     a3a:	cmp	r3, r2
     a3c:	bne.n	a28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x238>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
     a3e:	movs	r7, #0
     a40:	b.n	896 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
     a42:	movs	r3, #3
     a44:	b.n	83a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
     a46:	ldr	r3, [sp, #0]
     a48:	str	r3, [sp, #8]
     a4a:	b.n	872 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a4c:	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
     a50:	movs	r1, #0
     a52:	movs	r2, #56	; 0x38
     a54:	mov	r0, r5
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a56:	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
     a5a:	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     a5c:	add.w	r8, sp, #28
     a60:	add.w	r4, r5, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
     a64:	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
     a68:	bl	b58c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     a6c:	ldr	r2, [sp, #12]
     a6e:	ldr	r3, [r6, #32]
     a70:	add.w	r6, sl, #30
     a74:	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
     a78:	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
     a7a:	str	r3, [r5, #32]
     a7c:	uxtb	r6, r6
  m_attributes = FILE_ATTR_FILE;
     a7e:	strb.w	r2, [r5, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     a82:	uxtb.w	r9, r9
     a86:	str.w	sl, [sp, #12]
     a8a:	ldr.w	sl, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
     a8e:	ldmia.w	r8, {r0, r1, r2}
     a92:	stmia.w	r4, {r0, r1, r2}
     a96:	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
     a98:	movs	r2, #1
     a9a:	mov	r1, r8
     a9c:	bl	109c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
     aa0:	mov	r4, r0
     aa2:	cmp	r0, #0
     aa4:	beq.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     aa8:	ldrsb.w	r3, [r0]
     aac:	cmp	r3, #0
     aae:	blt.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
     ab2:	movs	r2, #32
     ab4:	movs	r1, #0
     ab6:	bl	b58c <memset>
    if (i == 0) {
     aba:	cmp	r7, #0
     abc:	beq.n	b8e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39e>
        FsDateTime::callback(&date, &time, &ms10);
        dirFile->createTimeMs = ms10;
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
     abe:	cmp	r7, #1
     ac0:	beq.n	b6e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37e>
     ac2:	rsb	r3, r7, r7, lsl #4
     ac6:	cmp	r6, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
     ac8:	mov.w	r1, #193	; 0xc1
     acc:	mov	r2, r6
     ace:	sub.w	r3, r3, #30
     ad2:	it	cs
     ad4:	movcs	r2, #15
     ad6:	strb	r1, [r4, #0]
     ad8:	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     ada:	cbz	r2, af2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
     adc:	adds	r4, #2
     ade:	sxth	r2, r2
     ae0:	add	r3, sl
     ae2:	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
     ae6:	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
     aea:	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
     aee:	cmp	r2, r4
     af0:	bne.n	ae6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f6>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
     af2:	adds	r7, #1
     af4:	uxtb	r7, r7
     af6:	cmp	fp, r7
     af8:	bls.n	b4e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
     afa:	movs	r2, #32
     afc:	mov	r1, r8
     afe:	ldr	r0, [r5, #32]
     b00:	bl	10d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
     b04:	cmp	r0, #1
     b06:	bne.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b0a:	subs	r6, #15
     b0c:	ldr	r0, [r5, #32]
     b0e:	uxtb	r6, r6
     b10:	b.n	a98 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
     b12:	ldrb.w	r3, [r5, #49]	; 0x31
     b16:	tst.w	r3, #17
     b1a:	bne.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
     b1e:	ldr	r3, [sp, #112]	; 0x70
     b20:	lsls	r6, r3, #21
     b22:	bpl.w	9e4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
     b26:	ldrb.w	r3, [r5, #51]	; 0x33
     b2a:	lsls	r4, r3, #30
     b2c:	bpl.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     b30:	movs	r2, #0
     b32:	movs	r3, #0
     b34:	mov	r0, r5
     b36:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
     b3a:	cmp	r0, #0
     b3c:	beq.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b40:	mov	r0, r5
     b42:	bl	1950 <ExFatFile::truncate()>
     b46:	cmp	r0, #0
     b48:	beq.w	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
     b4c:	b.n	9ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
     b4e:	mov	r0, r5
     b50:	bl	1620 <ExFatFile::sync()>
     b54:	b.n	81a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
     b56:	nop
     b58:	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
     b5c:	mov	r0, r5
     b5e:	ldrd	r2, r3, [r5, #16]
     b62:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
     b66:	cmp	r0, #0
     b68:	bne.w	9ec <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
     b6c:	b.n	80e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     b6e:	ldr	r3, [sp, #4]
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
     b70:	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
     b72:	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     b74:	orn	r3, r3, #63	; 0x3f
        setLe16(dirFile->createTime, time);
        setLe16(dirFile->createDate, date);
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
     b78:	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
     b7a:	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
     b7c:	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
     b80:	ldrb.w	r3, [sp, #12]
     b84:	strb	r3, [r4, #3]
     b86:	ldrh.w	r3, [sp, #8]
     b8a:	strh	r3, [r4, #4]
     b8c:	b.n	af2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
     b8e:	movs	r3, #133	; 0x85
     b90:	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;
      if (FsDateTime::callback) {
     b92:	ldr	r3, [pc, #48]	; (bc4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d4>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
     b94:	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
     b98:	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
     b9c:	ldr	r3, [r3, #0]
     b9e:	cmp	r3, #0
     ba0:	beq.n	af2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
     ba2:	add.w	r2, sp, #23
     ba6:	add.w	r1, sp, #26
     baa:	add	r0, sp, #24
     bac:	blx	r3
        dirFile->createTimeMs = ms10;
     bae:	ldrb.w	r1, [sp, #23]
     bb2:	ldrh.w	r2, [sp, #26]
     bb6:	ldrh.w	r3, [sp, #24]
     bba:	strb	r1, [r4, #20]
     bbc:	strh	r2, [r4, #8]
     bbe:	strh	r3, [r4, #10]
     bc0:	b.n	af2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
     bc2:	nop
     bc4:	.word	0x20003820

00000bc8 <ExFatFile::open(ExFatFile*, char const*, int)>:
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
     bc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     bcc:	mov	r6, r0
     bce:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
     bd0:	movs	r0, #0
     bd2:	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
     bd4:	ldrb.w	r1, [r6, #49]	; 0x31
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
     bd8:	str	r2, [sp, #12]
     bda:	strb.w	r0, [sp, #73]	; 0x49
     bde:	strb.w	r0, [sp, #74]	; 0x4a
     be2:	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
     be6:	cbnz	r1, bf4 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
     be8:	mov	r9, r3
     bea:	ldrb.w	r3, [r5, #49]	; 0x31
     bee:	tst.w	r3, #80	; 0x50
     bf2:	bne.n	bfc <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
     bf4:	movs	r0, #0
}
     bf6:	add	sp, #84	; 0x54
     bf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
     bfc:	ldrb	r3, [r2, #0]
     bfe:	mov	r4, r2
     c00:	cmp	r3, #47	; 0x2f
     c02:	beq.n	c70 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
     c04:	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
     c08:	mov	r1, r4
     c0a:	add	r3, sp, #12
     c0c:	add	r2, sp, #16
     c0e:	mov	r0, r6
     c10:	bl	418 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
     c14:	cmp	r0, #0
     c16:	beq.n	bf4 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
     c18:	ldr	r3, [sp, #12]
     c1a:	ldrb	r3, [r3, #0]
     c1c:	cmp	r3, #0
     c1e:	beq.n	c9a <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
     c20:	ldrb.w	r3, [sp, #16]
     c24:	mov	r1, r5
     c26:	ldr	r2, [sp, #20]
     c28:	mov	r0, r6
     c2a:	str.w	r8, [sp]
     c2e:	bl	7f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
     c32:	cmp	r0, #0
     c34:	beq.n	bf4 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
     c36:	mov	r4, r6
     c38:	add	r7, sp, #24
     c3a:	add.w	lr, r6, #48	; 0x30
     c3e:	ldr	r0, [r4, #0]
     c40:	adds	r4, #16
     c42:	ldr.w	r1, [r4, #-12]
     c46:	mov	r5, r7
     c48:	ldr.w	r2, [r4, #-8]
     c4c:	adds	r7, #16
     c4e:	ldr.w	r3, [r4, #-4]
     c52:	cmp	r4, lr
     c54:	stmia	r5!, {r0, r1, r2, r3}
     c56:	bne.n	c3e <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
     c58:	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
     c5a:	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
     c5c:	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//-----------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
     c5e:	mov	r0, r6
     c60:	bl	1620 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
     c64:	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
     c68:	strb.w	r8, [r6, #51]	; 0x33
     c6c:	ldr	r4, [sp, #12]
     c6e:	b.n	c08 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
     c70:	adds	r4, #1
     c72:	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
     c74:	ldrb	r1, [r4, #0]
     c76:	cmp	r1, #47	; 0x2f
     c78:	beq.n	c70 <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
      path++;
    }
    if (*path == 0) {
     c7a:	cbz	r1, cb2 <ExFatFile::open(ExFatFile*, char const*, int)+0xea>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     c7c:	add	r0, sp, #24
     c7e:	movs	r2, #56	; 0x38
     c80:	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
     c82:	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
     c84:	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     c86:	bl	b58c <memset>
  m_attributes = FILE_ATTR_ROOT;
     c8a:	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     c8c:	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     c8e:	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     c90:	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     c94:	strb.w	r3, [sp, #75]	; 0x4b
     c98:	b.n	c04 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
     c9a:	ldrb.w	r3, [sp, #16]
     c9e:	mov	r1, r5
     ca0:	ldr	r2, [sp, #20]
     ca2:	mov	r0, r6
     ca4:	str.w	r9, [sp]
     ca8:	bl	7f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
}
     cac:	add	sp, #84	; 0x54
     cae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     cb2:	movs	r2, #56	; 0x38
     cb4:	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
     cb6:	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
     cb8:	bl	b58c <memset>
  m_attributes = FILE_ATTR_ROOT;
     cbc:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     cbe:	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
     cc0:	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
     cc2:	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
     cc6:	strb.w	r0, [r6, #51]	; 0x33
     cca:	b.n	bf6 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

00000ccc <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//-----------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
     ccc:	cbz	r1, cd6 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
     cce:	add.w	r1, r1, #1088	; 0x440
     cd2:	b.w	bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
     cd6:	mov	r0, r1
     cd8:	bx	lr
     cda:	nop

00000cdc <ExFatFile::openNext(ExFatFile*, int)>:
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     cdc:	ldrb.w	r3, [r0, #49]	; 0x31
     ce0:	cbnz	r3, cf8 <ExFatFile::openNext(ExFatFile*, int)+0x1c>
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
     ce2:	push	{r4, r5, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     ce4:	ldrb.w	r4, [r1, #49]	; 0x31
    DBG_FAIL_MACRO;
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
     ce8:	sub	sp, #12
     cea:	mov	r5, r1
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     cec:	ands.w	r4, r4, #80	; 0x50
     cf0:	bne.n	cfc <ExFatFile::openNext(ExFatFile*, int)+0x20>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     cf2:	mov	r0, r4
}
     cf4:	add	sp, #12
     cf6:	pop	{r4, r5, pc}
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     cf8:	movs	r0, #0
}
     cfa:	bx	lr
  }
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
     cfc:	ldrd	r4, r5, [r5]
     d00:	movs	r5, #0
     d02:	and.w	r4, r4, #31
     d06:	orrs	r4, r5
     d08:	beq.n	d10 <ExFatFile::openNext(ExFatFile*, int)+0x34>
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);

 fail:
  return false;
     d0a:	mov	r0, r3
}
     d0c:	add	sp, #12
     d0e:	pop	{r4, r5, pc}
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return openRootFile(dir, nullptr, 0, oflag);
     d10:	str	r2, [sp, #0]
     d12:	mov	r2, r3
     d14:	bl	7f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>

 fail:
  return false;
}
     d18:	add	sp, #12
     d1a:	pop	{r4, r5, pc}

00000d1c <FsCache::sync() [clone .part.2]>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
     d1c:	push	{r4, lr}
     d1e:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_cacheBuffer)) {
     d20:	ldr	r0, [r0, #4]
     d22:	ldr	r3, [r0, #0]
     d24:	add.w	r2, r4, #12
     d28:	ldr	r1, [r4, #8]
     d2a:	ldr	r3, [r3, #24]
     d2c:	blx	r3
     d2e:	cbz	r0, d38 <FsCache::sync() [clone .part.2]+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_status &= ~CACHE_STATUS_DIRTY;
     d30:	ldrb	r3, [r4, #0]
     d32:	bic.w	r3, r3, #1
     d36:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
     d38:	pop	{r4, pc}
     d3a:	nop

00000d3c <FsCache::invalidate()>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     d3c:	movs	r2, #0
  m_sector = 0XFFFFFFFF;
     d3e:	mov.w	r3, #4294967295
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     d42:	strb	r2, [r0, #0]
  m_sector = 0XFFFFFFFF;
     d44:	str	r3, [r0, #8]
     d46:	bx	lr

00000d48 <FsCache::get(unsigned long, unsigned char)>:
}
//-----------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
     d48:	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
     d4a:	ldr	r3, [r0, #4]
     d4c:	cbz	r3, d8e <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
     d4e:	ldr	r3, [r0, #8]
     d50:	mov	r4, r0
     d52:	mov	r5, r2
     d54:	mov	r7, r1
     d56:	cmp	r3, r1
     d58:	beq.n	d78 <FsCache::get(unsigned long, unsigned char)+0x30>
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
     d5a:	ldrb	r3, [r0, #0]
     d5c:	lsls	r2, r3, #31
     d5e:	bmi.n	d86 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
     d60:	lsls	r3, r5, #30
     d62:	bpl.n	d92 <FsCache::get(unsigned long, unsigned char)+0x4a>
     d64:	add.w	r6, r4, #12
     d68:	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
     d6a:	and.w	r5, r5, #1
     d6e:	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
     d70:	str	r7, [r4, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
     d72:	orrs	r5, r2
     d74:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
     d76:	pop	{r3, r4, r5, r6, r7, pc}
     d78:	ldrsb.w	r2, [r0], #12
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
     d7c:	and.w	r5, r5, #1
     d80:	orrs	r5, r2
     d82:	strb	r5, [r4, #0]
  return m_cacheBuffer;

fail:
  return nullptr;
}
     d84:	pop	{r3, r4, r5, r6, r7, pc}
     d86:	bl	d1c <FsCache::sync() [clone .part.2]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
     d8a:	cmp	r0, #0
     d8c:	bne.n	d60 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_cacheBuffer;

fail:
  return nullptr;
     d8e:	movs	r0, #0
     d90:	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_cacheBuffer)) {
     d92:	ldr	r0, [r4, #4]
     d94:	add.w	r6, r4, #12
     d98:	mov	r1, r7
     d9a:	ldr	r3, [r0, #0]
     d9c:	mov	r2, r6
     d9e:	ldr	r3, [r3, #8]
     da0:	blx	r3
     da2:	cmp	r0, #0
     da4:	bne.n	d68 <FsCache::get(unsigned long, unsigned char)+0x20>
     da6:	b.n	d8e <FsCache::get(unsigned long, unsigned char)+0x46>

00000da8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//-----------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
     da8:	push	{r3, r4, r5, lr}
     daa:	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     dac:	ldr.w	r1, [r0, #1052]	; 0x41c
     db0:	mov	r5, r2
     db2:	add.w	r0, r0, #524	; 0x20c
     db6:	movs	r2, #0
     db8:	add.w	r1, r1, r4, lsr #7
     dbc:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
     dc0:	cbz	r0, dd4 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
     dc2:	lsls	r4, r4, #2
     dc4:	ubfx	r4, r4, #0, #9
     dc8:	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
     dca:	adds	r2, r3, #1
     dcc:	beq.n	dd8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
     dce:	str	r3, [r5, #0]
  return 1;
     dd0:	movs	r0, #1
     dd2:	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
     dd4:	movs	r0, #255	; 0xff
     dd6:	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
     dd8:	movs	r0, #0
  }
  *value = next;
  return 1;
}
     dda:	pop	{r3, r4, r5, pc}

00000ddc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
     ddc:	push	{r3, r4, r5, lr}
     dde:	mov	r4, r1
     de0:	ldr.w	r1, [r0, #1052]	; 0x41c
     de4:	mov	r5, r2
     de6:	add.w	r0, r0, #524	; 0x20c
     dea:	movs	r2, #1
     dec:	add.w	r1, r1, r4, lsr #7
     df0:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
     df4:	mov	r3, r0
     df6:	cbz	r0, e04 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
     df8:	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
     dfa:	movs	r0, #1
     dfc:	ubfx	r4, r4, #0, #9
     e00:	str	r5, [r3, r4]
     e02:	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
     e04:	pop	{r3, r4, r5, pc}
     e06:	nop

00000e08 <FsCache::sync()>:
fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
     e08:	ldrb	r3, [r0, #0]
     e0a:	lsls	r3, r3, #31
     e0c:	bmi.n	e12 <FsCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
     e0e:	movs	r0, #1
     e10:	bx	lr
     e12:	b.w	d1c <FsCache::sync() [clone .part.2]>
     e16:	nop

00000e18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
 fail:
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
     e18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e1c:	mov	r8, r0
     e1e:	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
     e20:	mov	fp, r1
     e22:	cmp	r1, #0
     e24:	beq.n	eae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
     e26:	subs	r7, r1, #2
  if (start >= m_clusterCount) {
     e28:	ldr.w	r3, [r8, #1064]	; 0x428
     e2c:	cmp	r7, r3
     e2e:	bcs.n	ea6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
     e30:	and.w	r5, r7, #7
     e34:	movs	r3, #1
     e36:	ubfx	sl, r7, #3, #9
     e3a:	lsl.w	r5, r3, r5
     e3e:	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
     e40:	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
     e42:	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
     e44:	ldr.w	r1, [r8, #1060]	; 0x424
     e48:	movs	r2, #0
     e4a:	mov	r0, r8
     e4c:	add.w	r1, r1, r4, lsr #12
     e50:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
     e54:	cbz	r0, e88 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
     e56:	ldrb.w	r1, [r0, sl]
     e5a:	b.n	e72 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
     e5c:	cmp	r2, r9
     e5e:	beq.n	eb4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     e60:	cmp	r7, r4
     e62:	beq.n	e86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
     e64:	ldr.w	r2, [r8, #1064]	; 0x428
     e68:	cmp	r4, r2
     e6a:	bcs.n	e9a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
     e6c:	ands.w	r5, r3, #255	; 0xff
     e70:	beq.n	e8c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
     e72:	adds	r4, #1
        if (!(mask & cache[i])) {
     e74:	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
     e76:	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
     e7a:	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
     e7e:	beq.n	e5c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     e80:	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
     e82:	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
     e84:	bne.n	e64 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
     e86:	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
     e88:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e8c:	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
     e90:	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
     e92:	cmp.w	sl, #512	; 0x200
     e96:	bne.n	e56 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
     e98:	b.n	e9e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
     e9a:	movs	r6, #0
     e9c:	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
     e9e:	mov.w	sl, #0
     ea2:	movs	r5, #1
     ea4:	b.n	e44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
     ea6:	movs	r7, #0
     ea8:	movs	r5, #1
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
     eaa:	mov	sl, r7
     eac:	b.n	e40 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
  return false;
}
//-----------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
     eae:	ldr.w	r7, [r0, #1048]	; 0x418
     eb2:	b.n	e28 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
     eb4:	cmp.w	fp, #0
     eb8:	bne.n	ec4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
     eba:	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
     ebe:	it	eq
     ec0:	streq.w	r6, [r8, #1048]	; 0x418
            }
            return bgnAlloc + 2;
     ec4:	adds	r0, r6, #2
     ec6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     eca:	nop

00000ecc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
     ed0:	movs	r3, #0

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     ed2:	mov	r4, r0
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
  m_sector = 0XFFFFFFFF;
     ed4:	mov.w	r6, #4294967295
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     ed8:	add.w	r7, r0, #524	; 0x20c

fail:
  return false;
}
//=============================================================================
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
     edc:	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
     ede:	str.w	r1, [r0, #1080]	; 0x438
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
     ee2:	str	r1, [r0, #4]
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     ee4:	mov	r2, r3
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this partition.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
     ee6:	str.w	r1, [r4, #528]	; 0x210
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
     eea:	mov	r0, r7
     eec:	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
     eee:	strb.w	r3, [r4, #1084]	; 0x43c
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//-----------------------------------------------------------------------------
void FsCache::invalidate() {
  m_status = 0;
     ef2:	strb	r3, [r4, #0]
     ef4:	strb.w	r3, [r4, #524]	; 0x20c
  m_sector = 0XFFFFFFFF;
     ef8:	str	r6, [r4, #8]
     efa:	str.w	r6, [r4, #532]	; 0x214
     efe:	bl	d48 <FsCache::get(unsigned long, unsigned char)>

  m_fatType = 0;
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
     f02:	cmp	r5, #4
     f04:	bhi.n	f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
     f06:	mov	r6, r0
     f08:	cbz	r0, f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
     f0a:	cbnz	r5, f28 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
     f0c:	movs	r2, #5
     f0e:	ldr	r1, [pc, #164]	; (fb4 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>)
     f10:	adds	r0, r6, #3
     f12:	bl	bc1c <strncmp>
     f16:	mov	r3, r0
     f18:	cbnz	r0, f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
     f1a:	ldrb.w	r2, [r6, #108]	; 0x6c
     f1e:	cmp	r2, #9
     f20:	beq.n	f58 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
     f22:	movs	r0, #0
     f24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
     f28:	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
     f2a:	add.w	r3, r0, r3, lsl #4
     f2e:	ldrb.w	r2, [r3, #446]	; 0x1be
     f32:	ands.w	r2, r2, #127	; 0x7f
     f36:	bne.n	f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
     f38:	ldrb.w	r3, [r3, #450]	; 0x1c2
     f3c:	cmp	r3, #0
     f3e:	beq.n	f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
     f40:	add.w	r5, r0, r5, lsl #4
     f44:	mov	r0, r7
     f46:	ldr.w	r5, [r5, #438]	; 0x1b6
     f4a:	mov	r1, r5
     f4c:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
     f50:	mov	r6, r0
     f52:	cmp	r0, #0
     f54:	bne.n	f0c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
     f56:	b.n	f22 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f58:	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     f5a:	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     f5e:	mov	r1, r0
     f60:	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f62:	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     f66:	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
     f68:	str.w	lr, [r4, #1052]	; 0x41c
  m_fatLength = getLe32(bpb->fatLength);
     f6c:	ldr	r7, [r6, #84]	; 0x54
     f6e:	str.w	r7, [r4, #1056]	; 0x420
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
     f72:	ldr	r7, [r6, #88]	; 0x58
     f74:	add	r5, r7
     f76:	str.w	r5, [r4, #1060]	; 0x424
     f7a:	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
     f7c:	str.w	r5, [r4, #1064]	; 0x428
     f80:	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
     f82:	str.w	r5, [r4, #1068]	; 0x42c
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
     f86:	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
     f8a:	str.w	r3, [r4, #1048]	; 0x418
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     f8e:	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
     f92:	strb.w	r5, [r4, #1085]	; 0x43d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     f96:	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
     f9a:	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
     f9c:	str.w	r3, [r4, #1076]	; 0x434
  m_clusterMask = m_bytesPerCluster - 1;
     fa0:	str.w	r5, [r4, #1072]	; 0x430
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
     fa4:	bl	e18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
     fa8:	movs	r3, #64	; 0x40
  return true;
     faa:	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
     fac:	strb.w	r3, [r4, #1084]	; 0x43c
  return true;
     fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fb4:	.word	0x2000005c

00000fb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
     fb8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
     fbc:	subs	r1, #2
  }
  return 0;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
     fbe:	mov	r5, r2
     fc0:	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
     fc2:	ldr.w	r2, [r0, #1064]	; 0x428
     fc6:	adds	r3, r1, r5
     fc8:	cmp	r3, r2
     fca:	bhi.n	103e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
     fcc:	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
     fce:	cmp.w	sl, #0
     fd2:	bne.n	1044 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
     fd4:	ldr.w	r3, [r0, #1048]	; 0x418
     fd8:	cmp	r1, r3
      m_bitmapStart = start;
     fda:	it	cc
     fdc:	strcc.w	r1, [r0, #1048]	; 0x418
    }
  }
  mask = 1 << (start & 7);
     fe0:	and.w	r4, r1, #7
     fe4:	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
     fe6:	ldr.w	r3, [r8, #1060]	; 0x424
  i = (start >> 3) & m_sectorMask;
     fea:	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
     fee:	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
     ff2:	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
     ff6:	uxtb	r4, r4
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
     ff8:	movs	r2, #1
     ffa:	mov	r1, r9
     ffc:	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
     ffe:	add	r9, r2
    1000:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    1004:	cbz	r0, 103e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    1006:	adds	r7, r0, r6
    1008:	add.w	r0, r0, #512	; 0x200
    100c:	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    1010:	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    1012:	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    1016:	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    101a:	ite	ne
    101c:	movne	r6, #1
    101e:	moveq	r6, #0
    1020:	cmp	r6, sl
    1022:	beq.n	103e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    1024:	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    1026:	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    102a:	beq.n	105c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    102c:	ands.w	r4, r4, #255	; 0xff
    1030:	bne.n	1010 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    1032:	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    1034:	mov	r6, r4
    1036:	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    103a:	bne.n	100c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    103c:	b.n	ff8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    103e:	movs	r0, #0
    1040:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    1044:	ldr.w	r0, [r0, #1048]	; 0x418
    1048:	cmp	r3, r0
    104a:	bls.n	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    104c:	cmp	r1, r0
    104e:	bhi.n	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    1050:	cmp	r3, r2
    1052:	it	cs
    1054:	movcs	r3, #0
    1056:	str.w	r3, [r8, #1048]	; 0x418
    105a:	b.n	fe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    105c:	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    105e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1062:	nop

00001064 <ExFatPartition::chainSize(unsigned long)>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    1064:	push	{r4, r5, r6, lr}
    1066:	sub	sp, #8
    1068:	mov	r5, r0
  uint32_t n = 0;
    106a:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    106c:	add	r6, sp, #8
    106e:	str.w	r1, [r6, #-4]!
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1072:	ldr.w	r3, [r5, #1064]	; 0x428
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    1076:	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1078:	adds	r3, #1
    107a:	cmp	r1, r3
    107c:	bls.n	1084 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    107e:	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    1080:	add	sp, #8
    1082:	pop	{r4, r5, r6, pc}
    1084:	mov	r2, r6
    1086:	mov	r0, r5
    1088:	bl	da8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    108c:	adds	r4, #1
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    108e:	sxtb	r0, r0
    if (status < 0) return 0;
    1090:	cmp	r0, #0
    1092:	blt.n	107e <ExFatPartition::chainSize(unsigned long)+0x1a>
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    1094:	bne.n	1072 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    1096:	mov	r0, r4
  } while (status);
  return n;
}
    1098:	add	sp, #8
    109a:	pop	{r4, r5, r6, pc}

0000109c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//-----------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    109c:	push	{r4, r5, r6, lr}
    109e:	mov	r6, r1
    10a0:	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    10a2:	ldr.w	r5, [r0, #1072]	; 0x430
    10a6:	add.w	r0, r0, #524	; 0x20c
    10aa:	ldr	r1, [r1, #4]
    10ac:	ldr	r3, [r6, #0]
    10ae:	ands	r1, r5
    10b0:	ldr.w	r5, [r4, #1060]	; 0x424
    10b4:	subs	r3, #2
    10b6:	ldrb.w	r4, [r4, #1085]	; 0x43d
    10ba:	add.w	r1, r5, r1, lsr #9
    10be:	lsls	r3, r4
    10c0:	add	r1, r3
    10c2:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    10c6:	cbz	r0, 10d0 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    10c8:	ldr	r3, [r6, #4]
    10ca:	ubfx	r3, r3, #0, #9
    10ce:	add	r0, r3
}
    10d0:	pop	{r4, r5, r6, pc}
    10d2:	nop

000010d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    10d4:	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    10d6:	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    10d8:	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    10da:	ldr.w	r3, [r0, #1072]	; 0x430
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    10de:	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    10e0:	adds	r1, r4, r2
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    10e2:	ands	r4, r3
  pos->position += offset;
    10e4:	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    10e6:	ldrb.w	r3, [r0, #1085]	; 0x43d
}
//-----------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    10ea:	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    10ec:	adds	r3, #9
    10ee:	uxtb	r3, r3
    10f0:	lsr.w	r4, r2, r3
  while (tmp--) {
    10f4:	cbz	r4, 1106 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    10f6:	ldrb	r3, [r5, #8]
    10f8:	cbz	r3, 110a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    10fa:	ldr	r3, [r5, #0]
    10fc:	adds	r3, #1
    10fe:	str	r3, [r5, #0]
    1100:	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    1102:	cmp	r4, #0
    1104:	bne.n	10f6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    1106:	movs	r0, #1
    1108:	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    110a:	ldr.w	r3, [r6, #1064]	; 0x428
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    110e:	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    1110:	adds	r3, #1
    1112:	cmp	r1, r3
    1114:	bls.n	111c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    1116:	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    111a:	pop	{r4, r5, r6, pc}
    111c:	mov	r2, r5
    111e:	mov	r0, r6
    1120:	bl	da8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    1124:	sxtb	r0, r0
      if (status != 1) {
    1126:	cmp	r0, #1
    1128:	beq.n	1100 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    112a:	pop	{r4, r5, r6, pc}

0000112c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    112c:	ldr.w	r3, [r0, #1064]	; 0x428
    1130:	adds	r3, #1
    1132:	cmp	r3, r1
    1134:	bcs.n	113a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    1136:	movs	r0, #255	; 0xff
    1138:	bx	lr
    113a:	b.w	da8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    113e:	nop

00001140 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1140:	cmp	r1, #1
    1142:	bls.n	1160 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    1144:	ldr.w	r3, [r0, #1064]	; 0x428
    1148:	adds	r3, #1
    114a:	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    114c:	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    114e:	bls.n	1158 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    1150:	movs	r0, #0
    1152:	ldr.w	r4, [sp], #4
    1156:	bx	lr
    1158:	ldr.w	r4, [sp], #4
    115c:	b.w	ddc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    1160:	movs	r0, #0
    1162:	bx	lr

00001164 <ExFatPartition::freeChain(unsigned long)>:
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    1164:	push	{r4, r5, r6, r7, lr}
    1166:	mov	r4, r1
    1168:	sub	sp, #12
    116a:	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    116c:	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    116e:	ldr.w	r3, [r5, #1064]	; 0x428
    1172:	adds	r3, #1
    1174:	cmp	r4, r3
    1176:	bls.n	117e <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    1178:	movs	r0, #0
}
    117a:	add	sp, #12
    117c:	pop	{r4, r5, r6, r7, pc}
    117e:	mov	r1, r4
    1180:	add	r2, sp, #4
    1182:	mov	r0, r5
    1184:	bl	da8 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1188:	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    118a:	sxtb	r6, r0
    118c:	mov	r1, r4
    118e:	mov	r0, r5
}
//-----------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    1190:	bls.n	1178 <ExFatPartition::freeChain(unsigned long)+0x14>
    1192:	lsrs	r2, r6, #31
    1194:	bne.n	1178 <ExFatPartition::freeChain(unsigned long)+0x14>
    1196:	ldr.w	r3, [r5, #1064]	; 0x428
    119a:	adds	r3, #1
    119c:	cmp	r4, r3
    119e:	bhi.n	1178 <ExFatPartition::freeChain(unsigned long)+0x14>
    11a0:	bl	ddc <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11a4:	mov	r1, r7
    11a6:	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    11a8:	cmp	r0, #0
    11aa:	beq.n	1178 <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    11ac:	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11ae:	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    11b0:	ldr	r4, [sp, #4]
    11b2:	cbz	r6, 11b8 <ExFatPartition::freeChain(unsigned long)+0x54>
    11b4:	cmp	r2, r4
    11b6:	beq.n	116e <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    11b8:	subs	r2, r2, r7
    11ba:	bl	fb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    11be:	cmp	r0, #0
    11c0:	beq.n	1178 <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    11c2:	ldr	r4, [sp, #4]
//-----------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    11c4:	cmp	r6, #0
    11c6:	beq.n	117a <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    11c8:	mov	r7, r4
    11ca:	b.n	116e <ExFatPartition::freeChain(unsigned long)+0xa>

000011cc <ExFatPartition::freeClusterCount()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    11cc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    11d0:	movs	r4, #0

 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    11d2:	mov	r8, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    11d4:	ldr.w	r6, [r0, #1060]	; 0x424
    11d8:	add.w	r7, r0, #524	; 0x20c
 fail:
  return false;
}
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
  uint32_t nc = 0;
    11dc:	mov	r5, r4
    11de:	mov	r1, r6
    11e0:	movs	r2, #0
    11e2:	mov	r0, r7
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
  uint8_t* cache;

  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    11e4:	adds	r6, #1
    11e6:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    11ea:	cbz	r0, 1238 <ExFatPartition::freeClusterCount()+0x6c>
    11ec:	add.w	lr, r0, #4294967295
    11f0:	ldr.w	ip, [r8, #1064]	; 0x428
    11f4:	add.w	r9, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    11f8:	ldrb.w	r0, [lr, #1]!
    11fc:	cmp	r0, #255	; 0xff
    11fe:	beq.n	1228 <ExFatPartition::freeClusterCount()+0x5c>
        usedCount+= 8;
      } else if (cache[i]) {
    1200:	cbz	r0, 1216 <ExFatPartition::freeClusterCount()+0x4a>
    1202:	movs	r2, #8
    1204:	movs	r3, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
          if ((mask & cache[i])) {
    1206:	tst	r0, r3
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1208:	mov.w	r1, r3, lsl #1
          if ((mask & cache[i])) {
            usedCount++;
    120c:	it	ne
    120e:	addne	r4, #1
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    1210:	subs	r2, #1
    1212:	uxtb	r3, r1
    1214:	bne.n	1206 <ExFatPartition::freeClusterCount()+0x3a>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    1216:	adds	r5, #8
      if (nc >= m_clusterCount) {
    1218:	cmp	ip, r5
    121a:	bls.n	1230 <ExFatPartition::freeClusterCount()+0x64>
  while (true) {
    cache = dataCacheGet(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    121c:	cmp	r5, r9
    121e:	beq.n	11de <ExFatPartition::freeClusterCount()+0x12>
      if (cache[i] == 0XFF) {
    1220:	ldrb.w	r0, [lr, #1]!
    1224:	cmp	r0, #255	; 0xff
    1226:	bne.n	1200 <ExFatPartition::freeClusterCount()+0x34>
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    1228:	adds	r5, #8
    if (!cache) {
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
    122a:	adds	r4, #8
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    122c:	cmp	ip, r5
    122e:	bhi.n	121c <ExFatPartition::freeClusterCount()+0x50>
        return m_clusterCount - usedCount;
    1230:	rsb	r0, r4, ip
    1234:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
    }
  }
}
    1238:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000123c <ExFatPartition::rootLength()>:
//-----------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    123c:	push	{r4, lr}
    123e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    1240:	ldr.w	r1, [r0, #1068]	; 0x42c
    1244:	bl	1064 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    1248:	ldrb.w	r3, [r4, #1085]	; 0x43d
    124c:	adds	r3, #9
    124e:	uxtb	r3, r3
}
    1250:	lsls	r0, r3
    1252:	pop	{r4, pc}

00001254 <exFatHashName(char const*, unsigned int, unsigned short)>:
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    1254:	cbz	r1, 128c <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    1256:	add	r1, r0
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    1258:	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    125a:	ldrb.w	r4, [r0], #1
    125e:	lsls	r3, r2, #15
    1260:	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    1264:	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    1268:	sub.w	r5, r4, #32
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    126c:	cmp	r3, #25
      c -= 'a' - 'A';
    126e:	it	ls
    1270:	uxtbls	r4, r5
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    1272:	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    1274:	uxtah	r2, r4, r2
    1278:	uxth	r2, r2
    127a:	mov.w	r3, r2, lsl #15
    127e:	orr.w	r2, r3, r2, lsr #1
    1282:	uxth	r2, r2
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
}
//-----------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    1284:	bne.n	125a <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    1286:	mov	r0, r2
    1288:	pop	{r4, r5}
    128a:	bx	lr
    128c:	mov	r0, r2
    128e:	bx	lr

00001290 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    1290:	cbz	r3, 12e6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return hash;
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    1292:	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    1294:	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    1296:	cmp	r4, #126	; 0x7e
    1298:	bhi.n	12da <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    129a:	add	r3, r2
    129c:	adds	r0, #2
    129e:	add	r2, r1
    12a0:	add	r1, r3
    12a2:	ldrb.w	r3, [r2], #1
    12a6:	uxtb	r4, r4
  }
  return true;
}
//-----------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    12a8:	sub.w	r6, r3, #97	; 0x61
    12ac:	sub.w	r5, r4, #97	; 0x61
    12b0:	cmp	r6, #25
    12b2:	ite	ls
    12b4:	movls	r6, #32
    12b6:	movhi	r6, #0
    12b8:	cmp	r5, #25
    12ba:	sub.w	r3, r3, r6
    12be:	ite	ls
    12c0:	movls	r5, #32
    12c2:	movhi	r5, #0
    12c4:	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    12c6:	subs	r4, r4, r5
    12c8:	uxtb	r4, r4
    12ca:	cmp	r4, r3
    12cc:	bne.n	12da <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//-----------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    12ce:	cmp	r2, r1
    12d0:	beq.n	12e0 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    12d2:	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    12d6:	cmp	r4, #126	; 0x7e
    12d8:	bls.n	12a2 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    12da:	movs	r0, #0
    }
  }
  return true;
}
    12dc:	pop	{r4, r5, r6}
    12de:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    12e0:	movs	r0, #1
}
    12e2:	pop	{r4, r5, r6}
    12e4:	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    12e6:	movs	r0, #1
}
    12e8:	bx	lr
    12ea:	nop

000012ec <ExFatFile::addCluster()>:
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    12ec:	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    12ee:	push	{r3, r4, r5, r6, r7, lr}
    12f0:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    12f2:	ldr	r0, [r0, #32]
    12f4:	cbz	r1, 12f8 <ExFatFile::addCluster()+0xc>
    12f6:	adds	r1, #1
    12f8:	movs	r2, #1
    12fa:	bl	e18 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    12fe:	cmp	r0, #1
  }
  return checksum;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    1300:	mov	r6, r0
  if (find < 2) {
    1302:	bls.n	1362 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    1304:	movs	r3, #1
    1306:	mov	r1, r0
    1308:	ldr	r0, [r4, #32]
    130a:	mov	r2, r3
    130c:	bl	fb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    1310:	mov	r7, r0
    1312:	cbz	r0, 1362 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    1314:	ldr	r3, [r4, #24]
    1316:	cbz	r3, 1368 <ExFatFile::addCluster()+0x7c>
    1318:	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    131c:	lsls	r1, r2, #25
    131e:	bpl.n	1346 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    1320:	adds	r1, r3, #1
    1322:	cmp	r6, r1
    1324:	beq.n	1374 <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    1326:	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    132a:	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    132c:	strb.w	r2, [r4, #51]	; 0x33
    1330:	b.n	133e <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    1332:	ldr	r0, [r4, #32]
    1334:	bl	1140 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1338:	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    133a:	cbz	r0, 1362 <ExFatFile::addCluster()+0x76>
    133c:	ldr	r3, [r4, #24]
    133e:	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1340:	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    1342:	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    1344:	bcc.n	1332 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    1346:	mov.w	r2, #4294967295
    134a:	mov	r1, r6
    134c:	ldr	r0, [r4, #32]
    134e:	bl	1140 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1352:	cbz	r0, 1362 <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    1354:	ldr	r1, [r4, #24]
    1356:	cbz	r1, 1374 <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    1358:	mov	r2, r6
    135a:	ldr	r0, [r4, #32]
    135c:	bl	1140 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1360:	cbnz	r0, 1374 <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    1362:	movs	r7, #0
}
    1364:	mov	r0, r7
    1366:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    1368:	ldrb.w	r3, [r4, #51]	; 0x33
    136c:	orr.w	r3, r3, #64	; 0x40
    1370:	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    1374:	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    1376:	mov	r0, r7
    1378:	pop	{r3, r4, r5, r6, r7, pc}
    137a:	nop

0000137c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    137c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  DirPos_t pos = m_dirPos;
    1380:	add.w	r3, r0, #36	; 0x24

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    1384:	sub	sp, #20
    1386:	ldrb.w	r4, [r0, #51]	; 0x33
    138a:	mov	r5, r0
  DirPos_t pos = m_dirPos;
    138c:	add	r6, sp, #4
    138e:	ldmia.w	r3, {r0, r1, r2}
    1392:	stmia.w	r6, {r0, r1, r2}
  uint8_t* cache;
  if (!isWritable()) {
    1396:	lsls	r2, r4, #30
    1398:	bpl.n	13d2 <ExFatFile::remove()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    139a:	ldr	r1, [r5, #28]
    139c:	cbnz	r1, 13da <ExFatFile::remove()+0x5e>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    139e:	movs	r4, #0
  for (uint8_t i = 0; i <= m_setCount; i++) {
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    13a0:	movs	r2, #1
    13a2:	mov	r1, r6
    13a4:	ldr	r0, [r5, #32]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13a6:	adds	r4, #1
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_WRITE);
    13a8:	bl	109c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    13ac:	cbz	r0, 13d2 <ExFatFile::remove()+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    13ae:	ldrb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13b0:	uxtb	r4, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    13b2:	and.w	r3, r3, #127	; 0x7f
    13b6:	strb	r3, [r0, #0]
        goto fail;
      }
    }
  }

  for (uint8_t i = 0; i <= m_setCount; i++) {
    13b8:	ldrb.w	r3, [r5, #48]	; 0x30
    13bc:	cmp	r3, r4
    13be:	bcc.n	1424 <ExFatFile::remove()+0xa8>
    if (i && m_vol->dirSeek(&pos, 32) != 1) {
    13c0:	cmp	r4, #0
    13c2:	beq.n	13a0 <ExFatFile::remove()+0x24>
    13c4:	movs	r2, #32
    13c6:	mov	r1, r6
    13c8:	ldr	r0, [r5, #32]
    13ca:	bl	10d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    13ce:	cmp	r0, #1
    13d0:	beq.n	13a0 <ExFatFile::remove()+0x24>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    13d2:	movs	r0, #0
}
    13d4:	add	sp, #20
    13d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    13da:	lsls	r3, r4, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    13dc:	ldr	r0, [r5, #32]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    if (isContiguous()) {
    13de:	bpl.n	141a <ExFatFile::remove()+0x9e>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    13e0:	ldrb.w	r2, [r0, #1085]	; 0x43d
    13e4:	movs	r3, #0
    13e6:	ldrd	r8, r9, [r5, #8]
    13ea:	adds	r2, #9
    13ec:	adds.w	r8, r8, #4294967295
    13f0:	uxtb	r2, r2
    13f2:	adc.w	r9, r9, #4294967295
    13f6:	rsb	r7, r2, #32
    13fa:	sub.w	r4, r2, #32
    13fe:	lsr.w	r2, r8, r2
    1402:	lsl.w	r7, r9, r7
    1406:	lsr.w	r4, r9, r4
    140a:	orrs	r2, r7
    140c:	orrs	r2, r4
    140e:	adds	r2, #1
    1410:	bl	fb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    1414:	cmp	r0, #0
    1416:	bne.n	139e <ExFatFile::remove()+0x22>
    1418:	b.n	13d2 <ExFatFile::remove()+0x56>
        DBG_FAIL_MACRO;
        goto fail;
      }
    } else {
      if (!m_vol->freeChain(m_firstCluster)) {
    141a:	bl	1164 <ExFatPartition::freeChain(unsigned long)>
    141e:	cmp	r0, #0
    1420:	bne.n	139e <ExFatFile::remove()+0x22>
    1422:	b.n	13d2 <ExFatFile::remove()+0x56>
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    1424:	movs	r3, #0
  m_flags = 0;

  // Write entry to device.
  return m_vol->cacheSync();
    1426:	ldr	r4, [r5, #32]
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    1428:	strb.w	r3, [r5, #49]	; 0x31
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    142c:	mov	r0, r4
  m_flags = 0;
    142e:	strb.w	r3, [r5, #51]	; 0x33
    1432:	bl	e08 <FsCache::sync()>
    1436:	cmp	r0, #0
    1438:	beq.n	13d2 <ExFatFile::remove()+0x56>
    143a:	add.w	r0, r4, #524	; 0x20c
    143e:	bl	e08 <FsCache::sync()>
    1442:	cmp	r0, #0
    1444:	beq.n	13d2 <ExFatFile::remove()+0x56>
    1446:	ldr.w	r0, [r4, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    144a:	ldr	r3, [r0, #0]
    144c:	ldr	r3, [r3, #20]
    144e:	blx	r3
    1450:	b.n	13d4 <ExFatFile::remove()+0x58>
    1452:	nop

00001454 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[32];
  // must be open subdirectory
  if (!isSubDir()) {
    1454:	ldrb.w	r3, [r0, #49]	; 0x31
    1458:	lsls	r1, r3, #27
    145a:	bmi.n	1460 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    145c:	movs	r0, #0
}
    145e:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    1460:	push	{r4, lr}
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    1462:	movs	r2, #0
    1464:	sub	sp, #32
    1466:	movs	r3, #0
    1468:	mov	r4, r0
    146a:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
    146e:	b.n	147e <ExFatFile::rmdir()+0x2a>
  while (1) {
    n = read(dir, 32);
    if (n == 0) {
      break;
    }
    if (n != 32 || dir[0] & 0X80) {
    1470:	cmp	r0, #32
    1472:	bne.n	14a8 <ExFatFile::rmdir()+0x54>
    1474:	ldrb.w	r3, [sp]
    1478:	lsls	r2, r3, #24
    147a:	bmi.n	14a8 <ExFatFile::rmdir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (dir[0] == 0) {
    147c:	cbz	r3, 148c <ExFatFile::rmdir()+0x38>
  }
  rewind();

  // make sure directory is empty
  while (1) {
    n = read(dir, 32);
    147e:	movs	r2, #32
    1480:	mov	r1, sp
    1482:	mov	r0, r4
    1484:	bl	514 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    1488:	cmp	r0, #0
    148a:	bne.n	1470 <ExFatFile::rmdir()+0x1c>
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    148c:	ldrb.w	r3, [r4, #51]	; 0x33
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    1490:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    1492:	mov	r0, r4
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    1494:	orr.w	r3, r3, #2
    if (dir[0] == 0) {
      break;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    1498:	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    149c:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    14a0:	bl	137c <ExFatFile::remove()>

fail:
  return false;
}
    14a4:	add	sp, #32
    14a6:	pop	{r4, pc}
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
    14a8:	movs	r0, #0
}
    14aa:	add	sp, #32
    14ac:	pop	{r4, pc}
    14ae:	nop

000014b0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14b4:	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14b6:	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14b8:	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    14bc:	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14be:	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    14c2:	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    14c4:	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    14c6:	ldmia.w	fp, {r0, r1, r2}
    14ca:	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    14ce:	movs	r2, #0
    14d0:	mov	r1, r8
    14d2:	ldr	r0, [r6, #32]
    14d4:	uxtb.w	r9, r7
    14d8:	bl	109c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    14dc:	mov	r5, r0
    14de:	cbz	r0, 14ee <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    14e0:	ldrb	r2, [r0, #0]
    14e2:	cmp	r2, #192	; 0xc0
    14e4:	beq.n	15a2 <ExFatFile::syncDir()+0xf2>
    14e6:	cmp	r2, #193	; 0xc1
    14e8:	beq.n	1502 <ExFatFile::syncDir()+0x52>
    14ea:	cmp	r2, #133	; 0x85
    14ec:	beq.n	1556 <ExFatFile::syncDir()+0xa6>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    14ee:	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    14f2:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    14f4:	orr.w	r3, r3, #1
    14f8:	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    14fc:	add	sp, #28
    14fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1502:	mov	r3, r2
    1504:	lsls	r1, r4, #15
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    1506:	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    150a:	movs	r2, #0
    150c:	orr.w	r4, r1, r4, lsr #1
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    1510:	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1514:	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1516:	uxtah	r4, r3, r4
}
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    151a:	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    151c:	uxth	r4, r4
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    151e:	add	r2, r1
    1520:	lsls	r3, r4, #15
    1522:	movs	r1, #3
    1524:	cmp	r2, #31
    1526:	orr.w	r3, r3, r4, lsr #1
    152a:	bhi.n	1540 <ExFatFile::syncDir()+0x90>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    152c:	ldrb	r4, [r5, r2]
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    152e:	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    1530:	uxtah	r3, r4, r3
    1534:	uxth	r4, r3
//=============================================================================
#else  // READ_ONLY
//-----------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    1536:	bne.n	153c <ExFatFile::syncDir()+0x8c>
    1538:	cmp	r0, #0
    153a:	bne.n	151e <ExFatFile::syncDir()+0x6e>
    153c:	movs	r1, #1
    153e:	b.n	151e <ExFatFile::syncDir()+0x6e>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    1540:	cmp	sl, r9
    1542:	beq.n	15de <ExFatFile::syncDir()+0x12e>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    1544:	movs	r2, #32
    1546:	mov	r1, r8
    1548:	ldr	r0, [r6, #32]
    154a:	adds	r7, #1
    154c:	bl	10d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    1550:	cmp	r0, #1
    1552:	beq.n	14ce <ExFatFile::syncDir()+0x1e>
    1554:	b.n	14ee <ExFatFile::syncDir()+0x3e>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    1556:	ldrb.w	r1, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    155a:	ldr	r3, [pc, #192]	; (161c <ExFatFile::syncDir()+0x16c>)
    155c:	and.w	r1, r1, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    1560:	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    1564:	ldr	r3, [r3, #0]
    1566:	strh	r1, [r0, #4]
    1568:	cmp	r3, #0
    156a:	beq.n	1502 <ExFatFile::syncDir()+0x52>
          m_vol->dataCacheDirty();
    156c:	ldr.w	ip, [r6, #32]
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    1570:	add.w	r2, sp, #7
    1574:	add.w	r1, sp, #10
    1578:	add	r0, sp, #8
    invalidate();
    return m_cacheBuffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    157a:	ldrb.w	lr, [ip, #524]	; 0x20c
    157e:	orr.w	lr, lr, #1
    1582:	strb.w	lr, [ip, #524]	; 0x20c
    1586:	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
    1588:	ldrh.w	r3, [sp, #8]
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    158c:	ldrh.w	r2, [sp, #10]
        if (FsDateTime::callback) {
          m_vol->dataCacheDirty();
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    1590:	ldrb.w	r1, [sp, #7]
    1594:	strh	r3, [r5, #14]
    1596:	strh	r3, [r5, #18]
    1598:	strb	r1, [r5, #21]
    159a:	strh	r2, [r5, #12]
    159c:	strh	r2, [r5, #16]
    159e:	ldrb	r3, [r5, #0]
    15a0:	b.n	1504 <ExFatFile::syncDir()+0x54>
        }
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    15a2:	ldrb.w	r3, [r6, #51]	; 0x33
    15a6:	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    15aa:	ldrb	r3, [r0, #1]
    15ac:	ite	ne
    15ae:	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    15b2:	biceq.w	r3, r3, #2
    15b6:	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    15b8:	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    15ba:	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    15bc:	ldrd	r2, r3, [r6, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    15c0:	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    15c2:	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    15c6:	ldrd	r2, r3, [r6, #8]
    15ca:	strd	r2, r3, [r5, #24]
    15ce:	ldrb.w	r3, [r0, #524]	; 0x20c
    15d2:	orr.w	r3, r3, #1
    15d6:	strb.w	r3, [r0, #524]	; 0x20c
    15da:	ldrb	r3, [r5, #0]
    15dc:	b.n	1504 <ExFatFile::syncDir()+0x54>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t *>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    15de:	mov	r1, fp
    15e0:	movs	r2, #1
    15e2:	ldr	r0, [r6, #32]
    15e4:	bl	109c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    15e8:	cmp	r0, #0
    15ea:	beq.n	14ee <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    15ec:	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    15ee:	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    15f0:	mov	r0, r5
    15f2:	bl	e08 <FsCache::sync()>
    15f6:	cmp	r0, #0
    15f8:	beq.w	14ee <ExFatFile::syncDir()+0x3e>
    15fc:	add.w	r0, r5, #524	; 0x20c
    1600:	bl	e08 <FsCache::sync()>
    1604:	cmp	r0, #0
    1606:	beq.w	14ee <ExFatFile::syncDir()+0x3e>
    160a:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    160e:	ldr	r3, [r0, #0]
    1610:	ldr	r3, [r3, #20]
    1612:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1614:	cmp	r0, #0
    1616:	beq.w	14ee <ExFatFile::syncDir()+0x3e>
    161a:	b.n	14fc <ExFatFile::syncDir()+0x4c>
    161c:	.word	0x20003820

00001620 <ExFatFile::sync()>:
fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    1620:	ldrb.w	r2, [r0, #49]	; 0x31
    1624:	cbz	r2, 164c <ExFatFile::sync()+0x2c>

fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
    1626:	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1628:	ldrb.w	r2, [r0, #51]	; 0x33
    162c:	lsls	r1, r2, #24
    162e:	bmi.n	1650 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    1630:	ldr	r5, [r0, #32]
    1632:	mov	r4, r0
    1634:	mov	r0, r5
    1636:	bl	e08 <FsCache::sync()>
    163a:	cbnz	r0, 1660 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    163c:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    1640:	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    1642:	orr.w	r3, r3, #1
    1646:	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    164a:	pop	{r3, r4, r5, pc}
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    164c:	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    164e:	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    1650:	and.w	r2, r2, #127	; 0x7f
    1654:	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    1658:	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    165c:	b.w	14b0 <ExFatFile::syncDir()>
    1660:	add.w	r0, r5, #524	; 0x20c
    1664:	bl	e08 <FsCache::sync()>
    1668:	cmp	r0, #0
    166a:	beq.n	163c <ExFatFile::sync()+0x1c>
    166c:	ldr.w	r0, [r5, #1080]	; 0x438
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1670:	ldr	r3, [r0, #0]
    1672:	ldr	r3, [r3, #20]
    1674:	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    1676:	cmp	r0, #0
    1678:	beq.n	163c <ExFatFile::sync()+0x1c>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    167a:	movs	r0, #1
    167c:	pop	{r3, r4, r5, pc}
    167e:	nop

00001680 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    1680:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    1684:	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    1688:	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    168a:	lsls	r1, r3, #25
    168c:	bmi.n	1752 <ExFatFile::addDirCluster()+0xd2>
    168e:	ldr	r0, [r0, #8]
    1690:	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    1692:	ldr.w	r3, [r3, #1076]	; 0x434
    1696:	add	r0, r3
    1698:	cmp.w	r0, #67108864	; 0x4000000
    169c:	bcc.n	16a4 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    169e:	movs	r0, #0
    16a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    16a4:	mov	r0, r4
    16a6:	bl	12ec <ExFatFile::addCluster()>
    16aa:	cmp	r0, #0
    16ac:	beq.n	169e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    16ae:	ldr	r6, [r4, #32]
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    16b0:	ldrb.w	r3, [r6, #524]	; 0x20c

  /** Clear the cache and returns a pointer to the cache.  Not for normal apps.
   * \return A pointer to the cache buffer or zero if an error occurs.
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
    16b4:	add.w	r5, r6, #524	; 0x20c
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    16b8:	lsls	r2, r3, #31
    16ba:	bmi.n	175a <ExFatFile::addDirCluster()+0xda>
      return nullptr;
    }
    invalidate();
    return m_cacheBuffer;
    16bc:	add.w	r6, r6, #536	; 0x218
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    16c0:	mov	r0, r5
    16c2:	bl	d3c <FsCache::invalidate()>
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    16c6:	mov.w	r2, #512	; 0x200
    16ca:	movs	r1, #0
    16cc:	mov	r0, r6
    16ce:	bl	b58c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    16d2:	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    16d4:	ldr	r3, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    16d6:	movs	r7, #1
    16d8:	ldrb.w	r1, [r2, #1085]	; 0x43d
    16dc:	sub.w	r8, r3, #2
    16e0:	ldr.w	r3, [r2, #1060]	; 0x424
    16e4:	lsl.w	r8, r8, r1
    16e8:	add	r8, r3
    16ea:	lsls.w	r3, r7, r1
    16ee:	beq.n	1716 <ExFatFile::addDirCluster()+0x96>
    16f0:	movs	r5, #0
    16f2:	ldr.w	r0, [r2, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    16f6:	add.w	r1, r8, r5
    16fa:	mov	r2, r6
    16fc:	adds	r5, #1
    16fe:	ldr	r3, [r0, #0]
    1700:	ldr	r3, [r3, #24]
    1702:	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    1704:	cmp	r0, #0
    1706:	beq.n	169e <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    1708:	ldr	r2, [r4, #32]
    170a:	ldrb.w	r3, [r2, #1085]	; 0x43d
    170e:	lsl.w	r3, r7, r3
    1712:	cmp	r3, r5
    1714:	bhi.n	16f2 <ExFatFile::addDirCluster()+0x72>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    1716:	ldrb.w	r3, [r4, #49]	; 0x31
    171a:	lsls	r3, r3, #25
    171c:	bmi.n	1748 <ExFatFile::addDirCluster()+0xc8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    171e:	ldrb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    1722:	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1724:	orn	r3, r3, #127	; 0x7f
    1728:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    172c:	ldr.w	r6, [r2, #1076]	; 0x434
    1730:	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    1734:	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1738:	adds	r2, r2, r6
    173a:	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    173c:	adds	r0, r0, r6
    173e:	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    1740:	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    1744:	strd	r0, r1, [r4, #16]
  }
  return sync();
    1748:	mov	r0, r4

 fail:
  return false;
}
    174a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    174e:	b.w	1620 <ExFatFile::sync()>
  return false;
}
//-----------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    1752:	ldr	r0, [r0, #32]
    1754:	bl	123c <ExFatPartition::rootLength()>
    1758:	b.n	1690 <ExFatFile::addDirCluster()+0x10>
  uint8_t* cacheBuffer() {
    return m_cacheBuffer;
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    175a:	mov	r0, r5
    175c:	bl	e08 <FsCache::sync()>
    1760:	cmp	r0, #0
    1762:	bne.n	16bc <ExFatFile::addDirCluster()+0x3c>
    1764:	b.n	169e <ExFatFile::addDirCluster()+0x1e>
    1766:	nop

00001768 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
  if (!parent->isDir()) {
    1768:	ldrb.w	r3, [r1, #49]	; 0x31
    176c:	tst.w	r3, #80	; 0x50
    1770:	bne.n	1776 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    1772:	movs	r0, #0
    1774:	bx	lr

fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    1776:	push	{r4, r5, lr}
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    1778:	movw	r5, #2562	; 0xa02
    177c:	sub	sp, #12
    177e:	ldrb	r3, [r2, #0]
    1780:	mov	r4, r0
    1782:	ldr	r2, [r2, #4]
    1784:	str	r5, [sp, #0]
    1786:	bl	7f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    178a:	cbnz	r0, 1792 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x2a>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();

fail:
  return false;
}
    178c:	movs	r0, #0
    178e:	add	sp, #12
    1790:	pop	{r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    1792:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1794:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory

  m_attributes = FILE_ATTR_SUBDIR;
    1796:	strb.w	r3, [r4, #49]	; 0x31

  // allocate and zero first cluster
  if (!addDirCluster()) {
    179a:	bl	1680 <ExFatFile::addDirCluster()>
    179e:	cmp	r0, #0
    17a0:	beq.n	178c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x24>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    17a2:	ldr	r1, [r4, #24]
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    17a4:	movs	r2, #0
    17a6:	movs	r3, #0
    17a8:	mov	r0, r4
    17aa:	str	r1, [r4, #28]
    17ac:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    17b0:	movs	r3, #193	; 0xc1
  return sync();
    17b2:	mov	r0, r4
  }
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    17b4:	strb.w	r3, [r4, #51]	; 0x33
  return sync();

fail:
  return false;
}
    17b8:	add	sp, #12
    17ba:	ldmia.w	sp!, {r4, r5, lr}
  m_firstCluster = m_curCluster;

  // Set to start of dir
  rewind();
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
  return sync();
    17be:	b.w	1620 <ExFatFile::sync()>
    17c2:	nop

000017c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    17c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17c8:	mov	r6, r0
    17ca:	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    17cc:	movs	r0, #0
    17ce:	mov	r4, r1
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    17d0:	ldrb.w	r1, [r6, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::mkdir(ExFatFile* parent, const ExChar_t* path, bool pFlag) {
    17d4:	str	r2, [sp, #12]
    17d6:	strb.w	r0, [sp, #73]	; 0x49
    17da:	strb.w	r0, [sp, #74]	; 0x4a
    17de:	strb.w	r0, [sp, #75]	; 0x4b
  ExName_t fname;
  ExFatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    17e2:	cbnz	r1, 17f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    17e4:	mov	r9, r3
    17e6:	ldrb.w	r3, [r4, #49]	; 0x31
    17ea:	tst.w	r3, #80	; 0x50
    17ee:	bne.n	17f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    17f0:	movs	r0, #0
}
    17f2:	add	sp, #84	; 0x54
    17f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    17f8:	ldrb	r3, [r2, #0]
    17fa:	mov	r1, r2
    17fc:	cmp	r3, #47	; 0x2f
    17fe:	beq.n	1874 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
  uint8_t setCount() {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    1800:	mov.w	r8, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    1804:	add	r3, sp, #12
    1806:	add	r2, sp, #16
    1808:	mov	r0, r6
    180a:	bl	418 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    180e:	cmp	r0, #0
    1810:	beq.n	17f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    1812:	ldr	r3, [sp, #12]
    1814:	ldrb	r3, [r3, #0]
    1816:	cmp	r3, #0
    1818:	beq.n	1890 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    181a:	ldrb.w	r3, [sp, #16]
    181e:	mov	r1, r4
    1820:	ldr	r2, [sp, #20]
    1822:	mov	r0, r6
    1824:	str.w	r8, [sp]
    1828:	bl	7f0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    182c:	cbnz	r0, 1842 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x7e>
      if (!pFlag || !mkdir(parent, &fname)) {
    182e:	cmp.w	r9, #0
    1832:	beq.n	17f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
    1834:	mov	r1, r4
    1836:	add	r2, sp, #16
    1838:	mov	r0, r6
    183a:	bl	1768 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    183e:	cmp	r0, #0
    1840:	beq.n	17f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    1842:	mov	r4, r6
    1844:	add	r7, sp, #24
    1846:	add.w	lr, r6, #48	; 0x30
    184a:	ldr	r0, [r4, #0]
    184c:	adds	r4, #16
    184e:	ldr.w	r1, [r4, #-12]
    1852:	mov	r5, r7
    1854:	ldr.w	r2, [r4, #-8]
    1858:	adds	r7, #16
    185a:	ldr.w	r3, [r4, #-4]
    185e:	cmp	r4, lr
    1860:	stmia	r5!, {r0, r1, r2, r3}
    1862:	bne.n	184a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x86>
    1864:	ldr	r0, [r4, #0]
    parent = &tmpDir;
    1866:	add	r4, sp, #24
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    1868:	str	r0, [r7, #0]
    parent = &tmpDir;
    close();
    186a:	mov	r0, r6
    186c:	bl	334 <ExFatFile::close()>
    1870:	ldr	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    1872:	b.n	1804 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    1874:	adds	r1, #1
    1876:	str	r1, [sp, #12]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    1878:	ldrb	r3, [r1, #0]
    187a:	cmp	r3, #47	; 0x2f
    187c:	beq.n	1874 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb0>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    187e:	ldr	r1, [r4, #32]
    1880:	add	r0, sp, #24
    1882:	bl	3f0 <ExFatFile::openRoot(ExFatVolume*)>
    1886:	cmp	r0, #0
    1888:	beq.n	17f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    188a:	add	r4, sp, #24
    188c:	ldr	r1, [sp, #12]
    188e:	b.n	1800 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    1890:	add	r2, sp, #16
    1892:	mov	r1, r4
    1894:	mov	r0, r6
    1896:	bl	1768 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>

fail:
  return false;
}
    189a:	add	sp, #84	; 0x54
    189c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000018a0 <ExFatFile::rename(ExFatFile*, char const*)>:
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    18a0:	push	{r4, r5, r6, r7, lr}
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    18a2:	ldrb.w	r4, [r0, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::rename(const ExChar_t* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool ExFatFile::rename(ExFatFile* dirFile, const ExChar_t* newPath) {
    18a6:	sub	sp, #116	; 0x74
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    18a8:	movs	r3, #0
  ExFatFile file;
  ExFatFile oldFile;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    18aa:	tst.w	r4, #24
    18ae:	strb.w	r3, [sp, #49]	; 0x31
    18b2:	strb.w	r3, [sp, #50]	; 0x32
    18b6:	strb.w	r3, [sp, #51]	; 0x33
    18ba:	strb.w	r3, [sp, #105]	; 0x69
    18be:	strb.w	r3, [sp, #106]	; 0x6a
    18c2:	strb.w	r3, [sp, #107]	; 0x6b
    18c6:	beq.n	18d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    18c8:	ldr	r3, [r1, #32]
    18ca:	ldr	r4, [r0, #32]
    18cc:	cmp	r4, r3
    18ce:	beq.n	18d6 <ExFatFile::rename(ExFatFile*, char const*)+0x36>
  oldFile.m_flags = FILE_FLAG_WRITE;
  oldFile.m_attributes = FILE_ATTR_FILE;
  return oldFile.remove();

fail:
  return false;
    18d0:	movs	r0, #0
}
    18d2:	add	sp, #116	; 0x74
    18d4:	pop	{r4, r5, r6, r7, pc}
    18d6:	mov	r4, r0
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    18d8:	movw	r3, #2561	; 0xa01
    18dc:	mov	r0, sp
    18de:	bl	bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
    18e2:	cmp	r0, #0
    18e4:	beq.n	18d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    18e6:	mov	r5, r4
    18e8:	add.w	lr, r4, #48	; 0x30
    18ec:	add	r7, sp, #56	; 0x38
    18ee:	ldr	r0, [r5, #0]
    18f0:	adds	r5, #16
    18f2:	ldr.w	r1, [r5, #-12]
    18f6:	mov	r6, r7
    18f8:	ldr.w	r2, [r5, #-8]
    18fc:	adds	r7, #16
    18fe:	ldr.w	r3, [r5, #-4]
    1902:	cmp	r5, lr
    1904:	stmia	r6!, {r0, r1, r2, r3}
    1906:	bne.n	18ee <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    1908:	ldr	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    190a:	add	r2, sp, #36	; 0x24
    190c:	add.w	r3, r4, #36	; 0x24
  }
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
    1910:	str	r0, [r7, #0]
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    1912:	ldrb.w	r5, [sp, #48]	; 0x30
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
    1916:	ldmia	r2, {r0, r1, r2}
    1918:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    191c:	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    1920:	mov	r0, r4
    DBG_FAIL_MACRO;
    goto fail;
  }
  oldFile = *this;
  m_dirPos = file.m_dirPos;
  m_setCount = file.m_setCount;
    1922:	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1926:	orn	r3, r3, #127	; 0x7f
    192a:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    192e:	bl	1620 <ExFatFile::sync()>
    1932:	cmp	r0, #0
    1934:	beq.n	18d0 <ExFatFile::rename(ExFatFile*, char const*)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    1936:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    1938:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    193a:	movs	r3, #8
  return oldFile.remove();
    193c:	add	r0, sp, #56	; 0x38
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    193e:	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    1940:	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    1944:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    1948:	bl	137c <ExFatFile::remove()>
    194c:	b.n	18d2 <ExFatFile::rename(ExFatFile*, char const*)+0x32>
    194e:	nop

00001950 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    1950:	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    1954:	lsls	r2, r3, #30
    1956:	bpl.n	198a <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    1958:	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    195a:	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    195c:	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    195e:	cbz	r5, 1984 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    1960:	and.w	r3, r3, #64	; 0x40
    1964:	mov	r4, r0
    1966:	and.w	r6, r3, #255	; 0xff
    196a:	cbnz	r3, 198e <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    196c:	ldr	r1, [r0, #24]
    196e:	cmp	r1, #0
    1970:	bne.n	19f8 <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    1972:	str	r5, [sp, #4]
      m_firstCluster = 0;
    1974:	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    1976:	mov	r1, r5
    1978:	ldr	r0, [r4, #32]
    197a:	bl	1164 <ExFatPartition::freeChain(unsigned long)>
    197e:	cbnz	r0, 19d0 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    1980:	movs	r0, #0
    1982:	b.n	1986 <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    1984:	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    1986:	add	sp, #12
    1988:	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    198a:	movs	r0, #0
}
    198c:	bx	lr
    198e:	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    1990:	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    1992:	ldrb.w	r2, [r0, #1085]	; 0x43d
    1996:	ldrd	r6, r7, [r4, #8]
    199a:	adds	r2, #9
    199c:	adds.w	r6, r6, #4294967295
    19a0:	uxtb	r2, r2
    19a2:	adc.w	r7, r7, #4294967295
    19a6:	rsb	lr, r2, #32
    19aa:	sub.w	r3, r2, #32
    19ae:	lsr.w	r2, r6, r2
    19b2:	lsl.w	lr, r7, lr
    19b6:	lsr.w	r3, r7, r3
    19ba:	orr.w	r2, r2, lr
    19be:	orrs	r2, r3
    19c0:	adds	r2, #1
    if (m_curCluster) {
    19c2:	cbz	r1, 19f2 <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    19c4:	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    19c6:	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    19c8:	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    19ca:	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    19cc:	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    19ce:	cbnz	r2, 1a14 <ExFatFile::truncate()+0xc4>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    19d0:	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    19d4:	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    19d6:	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    19da:	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    19de:	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    19e2:	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    19e6:	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    19ea:	bl	1620 <ExFatFile::sync()>

 fail:
  return false;
}
    19ee:	add	sp, #12
    19f0:	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    19f2:	str	r5, [sp, #4]
      m_firstCluster = 0;
    19f4:	str	r1, [r4, #28]
    19f6:	b.n	19ce <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    19f8:	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    19fa:	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    19fc:	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    1a00:	bl	112c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    1a04:	sxtb	r0, r0
      if (fg < 0) {
    1a06:	cmp	r0, #0
    1a08:	blt.n	1980 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    1a0a:	bne.n	1a22 <ExFatFile::truncate()+0xd2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    1a0c:	ldr	r5, [sp, #4]
    1a0e:	cmp	r5, #0
    1a10:	beq.n	19d0 <ExFatFile::truncate()+0x80>
    1a12:	b.n	1976 <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    1a14:	movs	r3, #0
    1a16:	ldr	r1, [sp, #4]
    1a18:	bl	fb8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    1a1c:	cmp	r0, #0
    1a1e:	bne.n	19d0 <ExFatFile::truncate()+0x80>
    1a20:	b.n	1980 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    1a22:	mov.w	r2, #4294967295
    1a26:	ldr	r1, [r4, #24]
    1a28:	ldr	r0, [r4, #32]
    1a2a:	bl	1140 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    1a2e:	cmp	r0, #0
    1a30:	bne.n	1a0c <ExFatFile::truncate()+0xbc>
    1a32:	b.n	1980 <ExFatFile::truncate()+0x30>

00001a34 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    1a34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a38:	ldrb.w	r3, [r0, #51]	; 0x33
    1a3c:	sub	sp, #20
    1a3e:	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    1a40:	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    1a42:	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    1a44:	bmi.n	1a5c <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    1a46:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    1a4a:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    1a4e:	orr.w	r3, r3, #1
    1a52:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    1a56:	add	sp, #20
    1a58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    1a5c:	lsls	r2, r3, #28
    1a5e:	mov	r8, r1
    1a60:	bmi.w	1c70 <ExFatFile::write(void const*, unsigned int)+0x23c>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    1a64:	ldr	r3, [sp, #4]
    1a66:	cmp	r3, #0
    1a68:	beq.w	1c98 <ExFatFile::write(void const*, unsigned int)+0x264>
    1a6c:	mov	r1, r4
    1a6e:	ldr	r5, [sp, #4]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    1a70:	mov.w	sl, #1
    1a74:	mov	r9, r8
    1a76:	ldrd	r2, r3, [r1], #24
    1a7a:	mov	fp, r2
    1a7c:	str	r1, [sp, #12]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1a7e:	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    1a80:	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    1a82:	ldr.w	r6, [r0, #1072]	; 0x430
    1a86:	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    1a8a:	ubfx	r8, r6, #0, #9
    if (clusterOffset == 0) {
    1a8e:	cbnz	r6, 1ae6 <ExFatFile::write(void const*, unsigned int)+0xb2>
      // start of new cluster
      if (m_curCluster != 0) {
    1a90:	cmp	r1, #0
    1a92:	beq.w	1c0a <ExFatFile::write(void const*, unsigned int)+0x1d6>
        int fg;

        if (isContiguous()) {
    1a96:	ldrb.w	r3, [r4, #51]	; 0x33
    1a9a:	lsls	r3, r3, #25
    1a9c:	bpl.w	1c3e <ExFatFile::write(void const*, unsigned int)+0x20a>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    1aa0:	ldrb.w	r2, [r0, #1085]	; 0x43d
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    1aa4:	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    1aa6:	adds	r2, #9
    1aa8:	ldrd	fp, ip, [r4, #8]
    1aac:	uxtb	r2, r2
    1aae:	adds.w	fp, fp, #4294967295
    1ab2:	rsb	lr, r2, #32
    1ab6:	sub.w	r7, r2, #32
    1aba:	adc.w	ip, ip, #4294967295
    1abe:	lsr.w	r2, fp, r2
    1ac2:	lsl.w	lr, ip, lr
    1ac6:	lsr.w	r7, ip, r7
    1aca:	orr.w	r2, r2, lr
    1ace:	orrs	r2, r7
    1ad0:	add	r2, r3
    1ad2:	cmp	r1, r2
    1ad4:	bcc.w	1c38 <ExFatFile::write(void const*, unsigned int)+0x204>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    1ad8:	mov	r0, r4
    1ada:	bl	12ec <ExFatFile::addCluster()>
    1ade:	cmp	r0, #0
    1ae0:	beq.n	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
    1ae2:	ldr	r0, [r4, #32]
    1ae4:	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    1ae6:	lsrs	r6, r6, #9
    1ae8:	subs	r1, #2
    1aea:	ldr.w	r7, [r0, #1060]	; 0x424
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    1aee:	ldrb.w	r3, [r0, #1085]	; 0x43d
    1af2:	add	r7, r6
    1af4:	lsls	r1, r3
    1af6:	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    1af8:	cmp.w	r8, #0
    1afc:	bne.n	1bb2 <ExFatFile::write(void const*, unsigned int)+0x17e>
    1afe:	cmp.w	r5, #512	; 0x200
    1b02:	bcc.n	1bb2 <ExFatFile::write(void const*, unsigned int)+0x17e>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    1b04:	cmp.w	r5, #1024	; 0x400
    1b08:	bcc.w	1c12 <ExFatFile::write(void const*, unsigned int)+0x1de>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1b0c:	lsl.w	r2, sl, r3
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    1b10:	lsrs	r7, r5, #9
    1b12:	ldr.w	r3, [r0, #532]	; 0x214
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    1b16:	subs	r2, r2, r6
    1b18:	mov	r6, r7
    1b1a:	cmp	r7, r2
    1b1c:	it	cs
    1b1e:	movcs	r6, r2
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    1b20:	cmp	r1, r3
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    1b22:	mov.w	r7, r6, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->dataCacheSector()
          && m_vol->dataCacheSector() < (sector + ns)) {
    1b26:	bhi.n	1b3c <ExFatFile::write(void const*, unsigned int)+0x108>
    1b28:	adds	r2, r6, r1
    1b2a:	cmp	r2, r3
    1b2c:	bls.n	1b3c <ExFatFile::write(void const*, unsigned int)+0x108>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    1b2e:	add.w	r0, r0, #524	; 0x20c
    1b32:	str	r1, [sp, #8]
    1b34:	bl	d3c <FsCache::invalidate()>
    1b38:	ldr	r0, [r4, #32]
    1b3a:	ldr	r1, [sp, #8]
    1b3c:	ldr.w	r0, [r0, #1080]	; 0x438
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t count) {
    return m_blockDev->readSectors(sector, dst, count);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t count) {
    return m_blockDev->writeSectors(sector, src, count);
    1b40:	mov	r3, r6
    1b42:	mov	r2, r9
    1b44:	ldr	r6, [r0, #0]
    1b46:	ldr	r6, [r6, #28]
    1b48:	blx	r6
        // Invalidate cache if cache sector is in the range.
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, ns)) {
    1b4a:	cmp	r0, #0
    1b4c:	beq.w	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
    1b50:	mov	r0, r7
    1b52:	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    1b54:	add	r9, r7
    toWrite -= n;
    1b56:	subs	r5, r5, r7
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b58:	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b5c:	ldrd	r6, r7, [r4, #16]
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b60:	adds.w	fp, r2, r0
    1b64:	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b68:	cmp	r7, ip
    1b6a:	it	eq
    1b6c:	cmpeq	r6, fp
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    1b6e:	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    1b72:	bcs.n	1b84 <ExFatFile::write(void const*, unsigned int)+0x150>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    1b74:	ldrb.w	r1, [r4, #51]	; 0x33
    1b78:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    1b7c:	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    1b80:	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    1b84:	cmp	r5, #0
    1b86:	bne.w	1a7e <ExFatFile::write(void const*, unsigned int)+0x4a>
    1b8a:	mov	r2, fp
    1b8c:	mov	r3, ip
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    1b8e:	ldrd	r0, r1, [r4, #8]
    1b92:	cmp	r1, r3
    1b94:	it	eq
    1b96:	cmpeq	r0, r2
    1b98:	bcc.n	1c80 <ExFatFile::write(void const*, unsigned int)+0x24c>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    1b9a:	ldr	r3, [pc, #260]	; (1ca0 <ExFatFile::write(void const*, unsigned int)+0x26c>)
    1b9c:	ldr	r3, [r3, #0]
    1b9e:	cmp	r3, #0
    1ba0:	beq.n	1c94 <ExFatFile::write(void const*, unsigned int)+0x260>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1ba2:	ldrb.w	r3, [r4, #51]	; 0x33
    1ba6:	ldr	r0, [sp, #4]
    1ba8:	orn	r3, r3, #127	; 0x7f
    1bac:	strb.w	r3, [r4, #51]	; 0x33
    1bb0:	b.n	1a56 <ExFatFile::write(void const*, unsigned int)+0x22>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    1bb2:	cmp.w	r8, #0
    1bb6:	bne.n	1c06 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    1bb8:	ldrd	r2, r3, [r4, #16]
    1bbc:	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    1bc0:	cmp	r7, r3
    1bc2:	it	eq
    1bc4:	cmpeq	r6, r2
    1bc6:	ite	cc
    1bc8:	movcc	r2, #1
    1bca:	movcs	r2, #3
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    1bcc:	add.w	r0, r0, #524	; 0x20c
    1bd0:	bl	d48 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    1bd4:	cmp	r0, #0
    1bd6:	beq.w	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    1bda:	rsb	r7, r8, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    1bde:	add	r0, r8
    1be0:	mov	r1, r9
    1be2:	cmp	r7, r5
    1be4:	it	cs
    1be6:	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    1be8:	add	r8, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    1bea:	mov	r2, r7
    1bec:	bl	8310 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    1bf0:	cmp.w	r8, #512	; 0x200
    1bf4:	bne.n	1b50 <ExFatFile::write(void const*, unsigned int)+0x11c>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    1bf6:	ldr	r0, [r4, #32]
    1bf8:	add.w	r0, r0, #524	; 0x20c
    1bfc:	bl	e08 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    1c00:	cmp	r0, #0
    1c02:	bne.n	1b50 <ExFatFile::write(void const*, unsigned int)+0x11c>
    1c04:	b.n	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    1c06:	movs	r2, #1
    1c08:	b.n	1bcc <ExFatFile::write(void const*, unsigned int)+0x198>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    1c0a:	ldr	r1, [r4, #28]
    1c0c:	cbz	r1, 1c4c <ExFatFile::write(void const*, unsigned int)+0x218>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    1c0e:	str	r1, [r4, #24]
    1c10:	b.n	1ae6 <ExFatFile::write(void const*, unsigned int)+0xb2>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->dataCacheSector() == sector) {
    1c12:	ldr.w	r3, [r0, #532]	; 0x214
    1c16:	cmp	r1, r3
    1c18:	beq.n	1c60 <ExFatFile::write(void const*, unsigned int)+0x22c>
    1c1a:	ldr.w	r0, [r0, #1080]	; 0x438
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    1c1e:	mov	r2, r9
    1c20:	ldr	r3, [r0, #0]
    1c22:	ldr	r3, [r3, #24]
    1c24:	blx	r3
        m_vol->dataCacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    1c26:	cmp	r0, #0
    1c28:	beq.w	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
    1c2c:	mov.w	r0, #512	; 0x200
    1c30:	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    1c32:	mov.w	r7, #512	; 0x200
    1c36:	b.n	1b54 <ExFatFile::write(void const*, unsigned int)+0x120>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    1c38:	adds	r1, #1
    1c3a:	str	r1, [r4, #24]
    1c3c:	b.n	1ae6 <ExFatFile::write(void const*, unsigned int)+0xb2>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    1c3e:	ldr	r2, [sp, #12]
    1c40:	bl	112c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    1c44:	cmp	r0, #0
    1c46:	bne.w	1ae2 <ExFatFile::write(void const*, unsigned int)+0xae>
    1c4a:	b.n	1ad8 <ExFatFile::write(void const*, unsigned int)+0xa4>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    1c4c:	mov	r0, r4
    1c4e:	bl	12ec <ExFatFile::addCluster()>
    1c52:	cmp	r0, #0
    1c54:	beq.w	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    1c58:	ldr	r1, [r4, #24]
    1c5a:	ldr	r0, [r4, #32]
    1c5c:	str	r1, [r4, #28]
    1c5e:	b.n	1ae6 <ExFatFile::write(void const*, unsigned int)+0xb2>
#else  // USE_EXFAT_BITMAP_CACHE
    return m_dataCache.sync() && syncDevice();
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
    1c60:	add.w	r0, r0, #524	; 0x20c
    1c64:	str	r1, [sp, #8]
    1c66:	bl	d3c <FsCache::invalidate()>
    1c6a:	ldr	r0, [r4, #32]
    1c6c:	ldr	r1, [sp, #8]
    1c6e:	b.n	1c1a <ExFatFile::write(void const*, unsigned int)+0x1e6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    1c70:	ldrd	r2, r3, [r0, #16]
    1c74:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
    1c78:	cmp	r0, #0
    1c7a:	beq.w	1a46 <ExFatFile::write(void const*, unsigned int)+0x12>
    1c7e:	b.n	1a64 <ExFatFile::write(void const*, unsigned int)+0x30>
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1c80:	ldrb.w	r1, [r4, #51]	; 0x33
    1c84:	ldr	r0, [sp, #4]
    1c86:	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    }
  }

  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    1c8a:	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entr
    m_flags |= FILE_FLAG_DIR_DIRTY;
    1c8e:	strb.w	r1, [r4, #51]	; 0x33
    1c92:	b.n	1a56 <ExFatFile::write(void const*, unsigned int)+0x22>
    1c94:	ldr	r0, [sp, #4]
    1c96:	b.n	1a56 <ExFatFile::write(void const*, unsigned int)+0x22>
    1c98:	ldrd	r2, r3, [r4]
    1c9c:	b.n	1b8e <ExFatFile::write(void const*, unsigned int)+0x15a>
    1c9e:	nop
    1ca0:	.word	0x20003820

00001ca4 <FatFile::openRoot(FatVolume*) [clone .part.36]>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    1ca4:	push	{r3, r4, r5, lr}
    1ca6:	mov	r5, r1
    1ca8:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    1caa:	movs	r2, #36	; 0x24
    1cac:	movs	r1, #0
    1cae:	bl	b58c <memset>

  m_vol = vol;
    1cb2:	str	r5, [r4, #8]
  switch (vol->fatType()) {
    1cb4:	ldrb	r3, [r5, #7]
    1cb6:	cmp	r3, #16
    1cb8:	beq.n	1ccc <FatFile::openRoot(FatVolume*) [clone .part.36]+0x28>
    1cba:	cmp	r3, #32
    1cbc:	bne.n	1cc8 <FatFile::openRoot(FatVolume*) [clone .part.36]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    1cbe:	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cc0:	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    1cc2:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cc4:	strb	r0, [r4, #2]
    1cc6:	pop	{r3, r4, r5, pc}
  return true;

fail:
  return false;
    1cc8:	movs	r0, #0
}
    1cca:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    1ccc:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cce:	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    1cd0:	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    1cd2:	strb	r0, [r4, #2]
    1cd4:	pop	{r3, r4, r5, pc}
    1cd6:	nop

00001cd8 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    1cd8:	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    1cda:	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    1cdc:	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    1ce0:	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    1ce2:	ldr	r0, [r0, #8]
    1ce4:	mov	r1, r5
    1ce6:	bl	2b4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    1cea:	cbz	r0, 1d02 <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    1cec:	cbz	r5, 1d04 <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    1cee:	ldr	r3, [r4, #16]
    1cf0:	adds	r5, #1
    1cf2:	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    1cf4:	ldrb	r3, [r4, #2]
    1cf6:	it	ne
    1cf8:	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    1cfc:	orn	r3, r3, #127	; 0x7f
    1d00:	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    1d02:	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    1d04:	ldrb	r3, [r4, #2]
    1d06:	orr.w	r3, r3, #64	; 0x40
    1d0a:	b.n	1cfc <FatFile::addCluster()+0x24>

00001d0c <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    1d0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    1d10:	ldrb	r3, [r0, #0]
    1d12:	and.w	r3, r3, #32
    1d16:	cbnz	r3, 1d24 <FatFile::addDirCluster()+0x18>
    1d18:	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    1d1c:	ldr	r1, [r0, #20]
    1d1e:	ldr	r3, [pc, #124]	; (1d9c <FatFile::addDirCluster()+0x90>)
    1d20:	cmp	r1, r3
    1d22:	bls.n	1d2c <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

fail:
  return false;
    1d24:	movs	r6, #0
}
    1d26:	mov	r0, r6
    1d28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d2c:	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    1d2e:	bl	1cd8 <FatFile::addCluster()>
    1d32:	mov	r6, r0
    1d34:	cmp	r0, #0
    1d36:	beq.n	1d24 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    1d38:	ldr	r1, [r5, #16]
    1d3a:	ldr	r0, [r5, #8]
    1d3c:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
    1d40:	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1d42:	ldr	r0, [r5, #8]
    1d44:	movs	r2, #5
    1d46:	mov	r1, r7
    1d48:	adds	r0, #36	; 0x24
    1d4a:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    1d4e:	mov	r8, r0
    1d50:	cmp	r0, #0
    1d52:	beq.n	1d24 <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    1d54:	mov.w	r2, #512	; 0x200
    1d58:	mov	r1, r4
    1d5a:	bl	b58c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    1d5e:	ldr	r3, [r5, #8]
    1d60:	ldrb	r2, [r3, #4]
    1d62:	cmp	r2, #1
    1d64:	bls.n	1d88 <FatFile::addDirCluster()+0x7c>
    1d66:	movs	r4, #1
    1d68:	b.n	1d74 <FatFile::addDirCluster()+0x68>
    1d6a:	ldr	r3, [r5, #8]
    1d6c:	uxtb	r4, r4
    1d6e:	ldrb	r2, [r3, #4]
    1d70:	cmp	r2, r4
    1d72:	bls.n	1d88 <FatFile::addDirCluster()+0x7c>
    1d74:	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    1d76:	adds	r1, r4, r7
    1d78:	mov	r2, r8
    1d7a:	adds	r4, #1
    1d7c:	ldr	r3, [r0, #0]
    1d7e:	ldr	r3, [r3, #24]
    1d80:	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    1d82:	cmp	r0, #0
    1d84:	bne.n	1d6a <FatFile::addDirCluster()+0x5e>
    1d86:	b.n	1d24 <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    1d88:	ldrb	r3, [r3, #6]
    1d8a:	mov.w	r2, #512	; 0x200
    1d8e:	ldr	r1, [r5, #20]
    1d90:	lsl.w	r3, r2, r3
    1d94:	uxtah	r3, r1, r3
    1d98:	str	r3, [r5, #20]
    1d9a:	b.n	1d26 <FatFile::addDirCluster()+0x1a>
    1d9c:	.word	0x001ffdff

00001da0 <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    1da0:	push	{r4, lr}
    1da2:	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1da4:	ldr	r0, [r0, #8]
    1da6:	mov	r2, r1
    1da8:	adds	r0, #36	; 0x24
    1daa:	ldr	r1, [r4, #24]
    1dac:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    1db0:	cbz	r0, 1dbc <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    1db2:	ldrh	r3, [r4, #4]
    1db4:	and.w	r3, r3, #15
    1db8:	add.w	r0, r0, r3, lsl #5

fail:
  return nullptr;
}
    1dbc:	pop	{r4, pc}
    1dbe:	nop

00001dc0 <FatFile::sync() [clone .part.40]>:
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    1dc0:	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1dc2:	ldrsb.w	r3, [r0, #2]
fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    1dc6:	sub	sp, #12
    1dc8:	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    1dca:	cmp	r3, #0
    1dcc:	blt.n	1e02 <FatFile::sync() [clone .part.40]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    1dce:	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1dd0:	add.w	r0, r5, #36	; 0x24
    1dd4:	bl	2a58 <FatCache::sync()>
    1dd8:	cbnz	r0, 1de8 <FatFile::sync() [clone .part.40]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    1dda:	ldrb	r3, [r4, #1]
  return false;
    1ddc:	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
    1dde:	orr.w	r3, r3, #1
    1de2:	strb	r3, [r4, #1]
  return false;
}
    1de4:	add	sp, #12
    1de6:	pop	{r4, r5, pc}
    1de8:	add.w	r0, r5, #560	; 0x230
    1dec:	bl	2a58 <FatCache::sync()>
    1df0:	cmp	r0, #0
    1df2:	beq.n	1dda <FatFile::sync() [clone .part.40]+0x1a>
    1df4:	ldr	r0, [r5, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1df6:	ldr	r3, [r0, #0]
    1df8:	ldr	r3, [r3, #20]
    1dfa:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1dfc:	cmp	r0, #0
    1dfe:	beq.n	1dda <FatFile::sync() [clone .part.40]+0x1a>
    1e00:	b.n	1de4 <FatFile::sync() [clone .part.40]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    1e02:	movs	r1, #1
    1e04:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    1e08:	mov	r5, r0
    1e0a:	cmp	r0, #0
    1e0c:	beq.n	1dda <FatFile::sync() [clone .part.40]+0x1a>
    1e0e:	ldrb	r3, [r0, #0]
    1e10:	cmp	r3, #229	; 0xe5
    1e12:	beq.n	1dda <FatFile::sync() [clone .part.40]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    1e14:	ldrb	r3, [r4, #0]
    1e16:	lsls	r3, r3, #28
    1e18:	bpl.n	1e1e <FatFile::sync() [clone .part.40]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    1e1a:	ldr	r3, [r4, #28]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    1e1c:	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    1e1e:	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    1e20:	ldr	r1, [pc, #44]	; (1e50 <FatFile::sync() [clone .part.40]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    1e22:	lsrs	r2, r3, #16
    1e24:	strh	r3, [r5, #26]
    1e26:	ldr	r3, [r1, #0]
    1e28:	strh	r2, [r5, #20]
    1e2a:	cbz	r3, 1e46 <FatFile::sync() [clone .part.40]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    1e2c:	add.w	r2, sp, #3
    1e30:	add.w	r1, sp, #6
    1e34:	add	r0, sp, #4
    1e36:	blx	r3
      setLe16(dir->modifyDate, date);
    1e38:	ldrh.w	r3, [sp, #4]
    1e3c:	ldrh.w	r2, [sp, #6]
    1e40:	strh	r3, [r5, #24]
    1e42:	strh	r3, [r5, #18]
    1e44:	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    1e46:	ldrb	r3, [r4, #2]
    1e48:	and.w	r3, r3, #127	; 0x7f
    1e4c:	strb	r3, [r4, #2]
    1e4e:	b.n	1dce <FatFile::sync() [clone .part.40]+0xe>
    1e50:	.word	0x20003820

00001e54 <FatFile::close()>:

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    1e54:	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    1e56:	ldrb	r3, [r0, #0]

fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    1e58:	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    1e5a:	cbnz	r3, 1e66 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e5c:	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    1e5e:	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e60:	strb	r3, [r4, #0]
  m_flags = 0;
    1e62:	strb	r3, [r4, #2]
  return rtn;
}
    1e64:	pop	{r4, pc}
    1e66:	bl	1dc0 <FatFile::sync() [clone .part.40]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    1e6a:	movs	r3, #0
    1e6c:	strb	r3, [r4, #0]
  m_flags = 0;
    1e6e:	strb	r3, [r4, #2]
  return rtn;
}
    1e70:	pop	{r4, pc}
    1e72:	nop

00001e74 <FatFile::mkdir(FatFile*, fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    1e74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    1e78:	ldrb	r5, [r1, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
    1e7a:	sub	sp, #32
  uint32_t sector;
  DirFat_t dot;
  DirFat_t* dir;
  cache_t* pc;

  if (!parent->isDir()) {
    1e7c:	tst.w	r5, #112	; 0x70
    1e80:	bne.n	1e8a <FatFile::mkdir(FatFile*, fname_t*)+0x16>
  // write first sector
  return m_vol->cacheSync();

fail:
  return false;
}
    1e82:	movs	r0, #0
    1e84:	add	sp, #32
    1e86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // create a normal file
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    1e8a:	movw	r3, #2562	; 0xa02
    1e8e:	mov	r4, r0
    1e90:	mov	r5, r1
    1e92:	bl	33d0 <FatFile::open(FatFile*, fname_t*, int)>
    1e96:	cmp	r0, #0
    1e98:	beq.n	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    1e9a:	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    1e9c:	movs	r3, #16

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1e9e:	mov	r0, r4
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // convert file to directory
  m_flags = FILE_FLAG_READ;
    1ea0:	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    1ea2:	strb	r3, [r4, #0]

  // allocate and zero first cluster
  if (!addDirCluster()) {
    1ea4:	bl	1d0c <FatFile::addDirCluster()>
    1ea8:	cmp	r0, #0
    1eaa:	beq.n	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    1eac:	ldr	r2, [r4, #16]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    1eae:	ldrb	r3, [r4, #0]
  // allocate and zero first cluster
  if (!addDirCluster()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_firstCluster = m_curCluster;
    1eb0:	str	r2, [r4, #32]
bool FatFile::seekSet(uint32_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    1eb2:	cmp	r3, #0
    1eb4:	bne.n	1fb0 <FatFile::mkdir(FatFile*, fname_t*)+0x13c>
  if (!sync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // cache entry - should already be in cache due to sync() call
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    1eb6:	movs	r1, #1
    1eb8:	mov	r0, r4
    1eba:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    1ebe:	mov	r7, r0
    1ec0:	cmp	r0, #0
    1ec2:	beq.n	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    1ec4:	movs	r3, #16

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1ec6:	ldr	r0, [r0, #0]
    1ec8:	ldr	r1, [r7, #4]
    1eca:	mov	lr, sp
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    1ecc:	strb	r3, [r7, #11]

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
    1ece:	mov.w	ip, #46	; 0x2e
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1ed2:	ldr	r2, [r7, #8]
  dot.name[0] = '.';
    1ed4:	add	r6, sp, #32
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1ed6:	ldr	r3, [r7, #12]
    1ed8:	ldrh.w	r8, [r7, #20]
    1edc:	stmia.w	lr!, {r0, r1, r2, r3}
    1ee0:	ldr	r2, [r7, #24]
    1ee2:	ldr	r3, [r7, #28]
    1ee4:	ldr	r0, [r7, #16]
    1ee6:	ldr	r1, [r7, #20]
  dot.name[0] = '.';
    1ee8:	strb.w	ip, [r6, #-32]!
    1eec:	add.w	ip, sp, #10
  }
  // change directory entry  attribute
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
    1ef0:	ldrh	r7, [r7, #26]
    1ef2:	stmia.w	lr!, {r0, r1, r2, r3}
    1ef6:	mov	r3, r6
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    dot.name[i] = ' ';
    1ef8:	movs	r2, #32
    1efa:	strb.w	r2, [r3, #1]!
  dir->attributes = FAT_ATTRIB_DIRECTORY;

  // make entry for '.'
  memcpy(&dot, dir, sizeof(dot));
  dot.name[0] = '.';
  for (uint8_t i = 1; i < 11; i++) {
    1efe:	cmp	ip, r3
    1f00:	bne.n	1efa <FatFile::mkdir(FatFile*, fname_t*)+0x86>
    dot.name[i] = ' ';
  }

  // cache sector for '.'  and '..'
  sector = m_vol->clusterStartSector(m_firstCluster);
    1f02:	ldr	r1, [r4, #32]
    1f04:	ldr	r0, [r4, #8]
    1f06:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    1f0a:	ldr	r3, [r4, #8]
    1f0c:	mov	r1, r0
    1f0e:	movs	r2, #1
    1f10:	add.w	r0, r3, #36	; 0x24
    1f14:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
  if (!pc) {
    1f18:	mov	lr, r0
    1f1a:	cmp	r0, #0
    1f1c:	beq.n	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f1e:	strh.w	r8, [sp, #20]
  // make entry for '..'
  dot.name[1] = '.';
    1f22:	mov.w	r8, #46	; 0x2e
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f26:	strh.w	r7, [sp, #26]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    1f2a:	mov	r7, r6
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f2c:	ldmia	r6!, {r0, r1, r2, r3}
    1f2e:	str.w	r0, [lr]
    1f32:	str.w	r1, [lr, #4]
    1f36:	str.w	r2, [lr, #8]
    1f3a:	str.w	r3, [lr, #12]
  // make entry for '..'
  dot.name[1] = '.';
    1f3e:	strb.w	r8, [sp, #1]
  if (!pc) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy '.' to sector
  memcpy(&pc->dir[0], &dot, sizeof(dot));
    1f42:	ldmia	r6!, {r0, r1, r2, r3}
    1f44:	str.w	r0, [lr, #16]
    1f48:	str.w	r1, [lr, #20]
    1f4c:	str.w	r2, [lr, #24]
    1f50:	str.w	r3, [lr, #28]
  // make entry for '..'
  dot.name[1] = '.';
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    1f54:	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
  // copy '..' to sector
  memcpy(&pc->dir[1], &dot, sizeof(dot));
    1f56:	lsrs	r2, r3, #16
    1f58:	strh.w	r3, [sp, #26]
    1f5c:	strh.w	r2, [sp, #20]
    1f60:	ldmia	r7!, {r0, r1, r2, r3}
    1f62:	str.w	r0, [lr, #32]
    1f66:	str.w	r1, [lr, #36]	; 0x24
    1f6a:	str.w	r2, [lr, #40]	; 0x28
    1f6e:	str.w	r3, [lr, #44]	; 0x2c
    1f72:	ldmia	r7!, {r0, r1, r2, r3}
    1f74:	str.w	r0, [lr, #48]	; 0x30
    1f78:	str.w	r1, [lr, #52]	; 0x34
    1f7c:	str.w	r2, [lr, #56]	; 0x38
    1f80:	str.w	r3, [lr, #60]	; 0x3c
  // write first sector
  return m_vol->cacheSync();
    1f84:	ldr	r4, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    1f86:	add.w	r0, r4, #36	; 0x24
    1f8a:	bl	2a58 <FatCache::sync()>
    1f8e:	cmp	r0, #0
    1f90:	beq.w	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1f94:	add.w	r0, r4, #560	; 0x230
    1f98:	bl	2a58 <FatCache::sync()>
    1f9c:	cmp	r0, #0
    1f9e:	beq.w	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1fa2:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    1fa4:	ldr	r3, [r0, #0]
    1fa6:	ldr	r3, [r3, #20]

fail:
  return false;
}
    1fa8:	add	sp, #32
    1faa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1fae:	bx	r3
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    1fb0:	ldr	r3, [r4, #20]
    1fb2:	cbz	r3, 1fc2 <FatFile::mkdir(FatFile*, fname_t*)+0x14e>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fb4:	ldrb	r3, [r4, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    1fb6:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fb8:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    1fbc:	str	r2, [r4, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    1fbe:	str	r2, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    1fc0:	strb	r3, [r4, #2]
    1fc2:	mov	r0, r4
    1fc4:	bl	1dc0 <FatFile::sync() [clone .part.40]>
  }
  m_firstCluster = m_curCluster;
  // Set to start of dir
  rewind();
  // force entry to device
  if (!sync()) {
    1fc8:	cmp	r0, #0
    1fca:	beq.w	1e82 <FatFile::mkdir(FatFile*, fname_t*)+0xe>
    1fce:	b.n	1eb6 <FatFile::mkdir(FatFile*, fname_t*)+0x42>

00001fd0 <FatFile::mkdir(FatFile*, char const*, bool)>:
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    1fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fd4:	mov	r6, r0
    1fd6:	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    1fd8:	movs	r0, #0
    1fda:	mov	r4, r1
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    1fdc:	ldrb	r1, [r6, #0]
void FatFile::fsetpos(const fspos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    1fde:	str	r2, [sp, #4]
    1fe0:	strb.w	r0, [sp, #36]	; 0x24
    1fe4:	strb.w	r0, [sp, #37]	; 0x25
    1fe8:	strb.w	r0, [sp, #38]	; 0x26
  fname_t fname;
  FatFile tmpDir;

  if (isOpen() || !parent->isDir()) {
    1fec:	cbnz	r1, 1ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    1fee:	mov	r8, r3
    1ff0:	ldrb	r3, [r4, #0]
    1ff2:	tst.w	r3, #112	; 0x70
    1ff6:	bne.n	2000 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
    close();
  }
  return mkdir(parent, &fname);

fail:
  return false;
    1ff8:	movs	r0, #0
}
    1ffa:	add	sp, #72	; 0x48
    1ffc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    2000:	ldrb	r3, [r2, #0]
    2002:	mov	r0, r2
    2004:	cmp	r3, #47	; 0x2f
    2006:	beq.n	2064 <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2008:	movs	r7, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    200a:	add	r2, sp, #4
    200c:	add	r1, sp, #12
    200e:	bl	2f64 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (!*path) {
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2012:	add	r2, sp, #12
    2014:	mov	r1, r4
    2016:	movs	r3, #0
      goto fail;
    }
    parent = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    2018:	cmp	r0, #0
    201a:	beq.n	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    201c:	ldr	r5, [sp, #4]
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    201e:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!*path) {
    2020:	ldrb	r5, [r5, #0]
    2022:	cmp	r5, #0
    2024:	beq.n	2088 <FatFile::mkdir(FatFile*, char const*, bool)+0xb8>
      break;
    }
    if (!open(parent, &fname, O_RDONLY)) {
    2026:	bl	33d0 <FatFile::open(FatFile*, fname_t*, int)>
    202a:	cbnz	r0, 2040 <FatFile::mkdir(FatFile*, char const*, bool)+0x70>
      if (!pFlag || !mkdir(parent, &fname)) {
    202c:	cmp.w	r8, #0
    2030:	beq.n	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
    2032:	mov	r1, r4
    2034:	add	r2, sp, #12
    2036:	mov	r0, r6
    2038:	bl	1e74 <FatFile::mkdir(FatFile*, fname_t*)>
    203c:	cmp	r0, #0
    203e:	beq.n	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2040:	mov	r5, r6
    2042:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2044:	ldrb.w	lr, [r6]
      if (!pFlag || !mkdir(parent, &fname)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    2048:	ldmia	r5!, {r0, r1, r2, r3}
    204a:	stmia	r4!, {r0, r1, r2, r3}
    204c:	ldmia	r5!, {r0, r1, r2, r3}
    204e:	ldr	r5, [r5, #0]
    2050:	stmia	r4!, {r0, r1, r2, r3}
    2052:	str	r5, [r4, #0]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2054:	cmp.w	lr, #0
    2058:	bne.n	2080 <FatFile::mkdir(FatFile*, char const*, bool)+0xb0>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    205a:	strb	r7, [r6, #0]
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    tmpDir = *this;
    parent = &tmpDir;
    205c:	add	r4, sp, #36	; 0x24
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    205e:	strb	r7, [r6, #2]
    2060:	ldr	r0, [sp, #4]
    2062:	b.n	200a <FatFile::mkdir(FatFile*, char const*, bool)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    2064:	adds	r0, #1
    2066:	str	r0, [sp, #4]
  if (isOpen() || !parent->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2068:	ldrb	r3, [r0, #0]
    206a:	cmp	r3, #47	; 0x2f
    206c:	beq.n	2064 <FatFile::mkdir(FatFile*, char const*, bool)+0x94>
    206e:	ldr	r1, [r4, #8]
    2070:	add	r0, sp, #36	; 0x24
    2072:	bl	1ca4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      path++;
    }
    if (!tmpDir.openRoot(parent->m_vol)) {
    2076:	cmp	r0, #0
    2078:	beq.n	1ff8 <FatFile::mkdir(FatFile*, char const*, bool)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    parent = &tmpDir;
    207a:	add	r4, sp, #36	; 0x24
    207c:	ldr	r0, [sp, #4]
    207e:	b.n	2008 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    2080:	mov	r0, r6
    2082:	bl	1dc0 <FatFile::sync() [clone .part.40]>
    2086:	b.n	205a <FatFile::mkdir(FatFile*, char const*, bool)+0x8a>
    }
    tmpDir = *this;
    parent = &tmpDir;
    close();
  }
  return mkdir(parent, &fname);
    2088:	add	r2, sp, #12
    208a:	mov	r1, r4
    208c:	mov	r0, r6
    208e:	bl	1e74 <FatFile::mkdir(FatFile*, fname_t*)>

fail:
  return false;
}
    2092:	add	sp, #72	; 0x48
    2094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002098 <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    2098:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    209c:	mov	r6, r0
    209e:	sub	sp, #72	; 0x48
    20a0:	movs	r0, #0
    20a2:	mov	r5, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    20a4:	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    20a6:	str	r2, [sp, #4]
    20a8:	strb.w	r0, [sp, #36]	; 0x24
    20ac:	strb.w	r0, [sp, #37]	; 0x25
    20b0:	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    20b4:	cbnz	r1, 20c0 <FatFile::open(FatFile*, char const*, int)+0x28>
    20b6:	mov	r8, r3
    20b8:	ldrb	r3, [r5, #0]
    20ba:	tst.w	r3, #112	; 0x70
    20be:	bne.n	20c8 <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
    20c0:	movs	r0, #0
}
    20c2:	add	sp, #72	; 0x48
    20c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    20c8:	ldrb	r3, [r2, #0]
    20ca:	mov	r0, r2
    20cc:	cmp	r3, #47	; 0x2f
    20ce:	beq.n	2124 <FatFile::open(FatFile*, char const*, int)+0x8c>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20d0:	movs	r7, #0
    20d2:	b.n	20da <FatFile::open(FatFile*, char const*, int)+0x42>
    20d4:	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    20d6:	strb	r7, [r6, #0]
  m_flags = 0;
    20d8:	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    20da:	add	r2, sp, #4
    20dc:	add	r1, sp, #12
    20de:	bl	2f64 <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20e2:	add	r2, sp, #12
    20e4:	mov	r1, r5
    20e6:	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    20e8:	cmp	r0, #0
    20ea:	beq.n	20c0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    20ec:	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20ee:	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    20f0:	ldrb	r4, [r4, #0]
    20f2:	cbz	r4, 2142 <FatFile::open(FatFile*, char const*, int)+0xaa>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20f4:	bl	33d0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    20f8:	mov	r5, r6
    20fa:	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    20fc:	cmp	r0, #0
    20fe:	beq.n	20c0 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2100:	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2104:	ldmia	r5!, {r0, r1, r2, r3}
    2106:	stmia	r4!, {r0, r1, r2, r3}
    2108:	ldmia	r5!, {r0, r1, r2, r3}
    210a:	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    210e:	add	r5, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    2110:	stmia	r4!, {r0, r1, r2, r3}
    2112:	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    2116:	cmp.w	lr, #0
    211a:	beq.n	20d4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    211c:	mov	r0, r6
    211e:	bl	1dc0 <FatFile::sync() [clone .part.40]>
    2122:	b.n	20d4 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    2124:	adds	r0, #1
    2126:	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    2128:	ldrb	r3, [r0, #0]
    212a:	cmp	r3, #47	; 0x2f
    212c:	beq.n	2124 <FatFile::open(FatFile*, char const*, int)+0x8c>
      path++;
    }
    if (*path == 0) {
    212e:	cbz	r3, 2154 <FatFile::open(FatFile*, char const*, int)+0xbc>
    2130:	ldr	r1, [r5, #8]
    2132:	add	r0, sp, #36	; 0x24
    2134:	bl	1ca4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    2138:	cmp	r0, #0
    213a:	beq.n	20c0 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    213c:	add	r5, sp, #36	; 0x24
    213e:	ldr	r0, [sp, #4]
    2140:	b.n	20d0 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    2142:	mov	r3, r8
    2144:	add	r2, sp, #12
    2146:	mov	r1, r5
    2148:	mov	r0, r6
    214a:	bl	33d0 <FatFile::open(FatFile*, fname_t*, int)>

fail:
  return false;
}
    214e:	add	sp, #72	; 0x48
    2150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2154:	ldr	r1, [r5, #8]
    2156:	mov	r0, r6
    2158:	bl	1ca4 <FatFile::openRoot(FatVolume*) [clone .part.36]>
    215c:	b.n	20c2 <FatFile::open(FatFile*, char const*, int)+0x2a>
    215e:	nop

00002160 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    2160:	cbz	r1, 216a <FatFile::open(FatVolume*, char const*, int)+0xa>
    2162:	addw	r1, r1, #1084	; 0x43c
    2166:	b.w	2098 <FatFile::open(FatFile*, char const*, int)>
}
    216a:	mov	r0, r1
    216c:	bx	lr
    216e:	nop

00002170 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    2170:	ldrb	r3, [r0, #0]
    2172:	cbz	r3, 2178 <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

fail:
  return false;
}
    2174:	movs	r0, #0
    2176:	bx	lr
    2178:	b.w	1ca4 <FatFile::openRoot(FatVolume*) [clone .part.36]>

0000217c <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    217c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    2180:	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    2182:	sub	sp, #12
    2184:	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    2186:	lsls	r7, r3, #31
    2188:	bpl.w	22a4 <FatFile::read(void*, unsigned int)+0x128>
    218c:	mov	r7, r1
    218e:	ldrb	r1, [r0, #0]
    2190:	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    2192:	lsls	r6, r1, #28
    2194:	bmi.w	22b6 <FatFile::read(void*, unsigned int)+0x13a>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    2198:	lsls	r4, r1, #26
    219a:	bpl.n	21ae <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    219c:	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    219e:	ldr	r3, [r0, #20]
    21a0:	ldrh	r2, [r2, #8]
    21a2:	rsb	r3, r3, r2, lsl #5
    21a6:	uxth	r3, r3
    21a8:	cmp	r9, r3
    21aa:	it	cs
    21ac:	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    21ae:	cmp.w	r9, #0
    21b2:	beq.w	2302 <FatFile::read(void*, unsigned int)+0x186>
    21b6:	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    21b8:	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    21ba:	mov	r6, r9
    21bc:	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    21c0:	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    21c4:	ldr	r2, [r5, #8]
    21c6:	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    21ca:	bpl.n	224a <FatFile::read(void*, unsigned int)+0xce>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    21cc:	ldr	r1, [r2, #32]
    21ce:	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    21d2:	cmp	r4, #0
    21d4:	bne.n	2278 <FatFile::read(void*, unsigned int)+0xfc>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    21d6:	cmp.w	r6, #512	; 0x200
    21da:	bcc.n	2278 <FatFile::read(void*, unsigned int)+0xfc>
    21dc:	ldr	r3, [r2, #44]	; 0x2c
        || sector == m_vol->cacheSectorNumber()) {
    21de:	cmp	r1, r3
    21e0:	beq.n	2278 <FatFile::read(void*, unsigned int)+0xfc>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    21e2:	cmp.w	r6, #1024	; 0x400
    21e6:	bcc.n	22d8 <FatFile::read(void*, unsigned int)+0x15c>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    21e8:	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    21ea:	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    21ee:	lsls	r0, r0, #26
    21f0:	bmi.n	21fe <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    21f2:	ldrb	r0, [r2, #4]
    21f4:	rsb	r0, r8, r0
    21f8:	cmp	fp, r0
    21fa:	it	cs
    21fc:	movcs	fp, r0
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    21fe:	cmp	r1, r3
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    2200:	mov.w	r4, fp, lsl #9
      // Check for cache sector in read range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + ns)) {
    2204:	bhi.n	221e <FatFile::read(void*, unsigned int)+0xa2>
    2206:	add	r3, fp
    2208:	cmp	r1, r3
    220a:	bcs.n	221e <FatFile::read(void*, unsigned int)+0xa2>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    220c:	add.w	r0, r2, #36	; 0x24
    2210:	str	r1, [sp, #4]
    2212:	bl	2a58 <FatCache::sync()>
        // Flush cache if cache sector is in the range.
        if (!m_vol->cacheSyncData()) {
    2216:	cmp	r0, #0
    2218:	beq.n	22a4 <FatFile::read(void*, unsigned int)+0x128>
    221a:	ldr	r2, [r5, #8]
    221c:	ldr	r1, [sp, #4]
    221e:	ldr	r0, [r2, #0]
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
  }
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
    2220:	mov	r3, fp
    2222:	mov	r2, r7
    2224:	ldr.w	lr, [r0]
    2228:	ldr.w	fp, [lr, #12]
    222c:	blx	fp
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readSectors(sector, dst, ns)) {
    222e:	cmp	r0, #0
    2230:	beq.n	22a4 <FatFile::read(void*, unsigned int)+0x128>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    2232:	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    2234:	subs	r6, r6, r4
      if (!m_vol->readSector(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    2236:	add	r7, r4
    m_curPosition += n;
    2238:	add	r3, r4
    223a:	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    223c:	beq.n	2302 <FatFile::read(void*, unsigned int)+0x186>
    223e:	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    2240:	ubfx	r4, r3, #0, #9
    2244:	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    2246:	lsls	r0, r1, #26
    2248:	bmi.n	21cc <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    224a:	ldrb.w	r8, [r2, #5]
    224e:	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    2252:	cmp	r4, #0
    2254:	bne.n	22d4 <FatFile::read(void*, unsigned int)+0x158>
    2256:	cmp.w	r8, #0
    225a:	bne.n	22d4 <FatFile::read(void*, unsigned int)+0x158>
        // start of new cluster
        if (m_curPosition == 0) {
    225c:	cbnz	r3, 22c4 <FatFile::read(void*, unsigned int)+0x148>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    225e:	lsls	r0, r1, #25
    2260:	ite	mi
    2262:	ldrmi	r1, [r2, #32]
    2264:	ldrpl	r1, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    2266:	str	r1, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    2268:	mov	r0, r2
    226a:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
    226e:	ldr	r2, [r5, #8]
    2270:	add.w	r1, r8, r0
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    2274:	cmp	r4, #0
    2276:	beq.n	21d6 <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2278:	add.w	r0, r2, #36	; 0x24
    227c:	movs	r2, #0
    227e:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
      if (!pc) {
    2282:	cbz	r0, 22a4 <FatFile::read(void*, unsigned int)+0x128>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    2284:	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    2288:	adds	r1, r0, r4
    228a:	mov	r0, r7
    228c:	cmp	r3, r6
    228e:	it	cs
    2290:	movcs	r3, r6
    2292:	mov	r2, r3
    2294:	mov	r4, r3
    2296:	bl	8310 <memcpy>
    229a:	b.n	2232 <FatFile::read(void*, unsigned int)+0xb6>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    229c:	ldrb	r3, [r5, #0]
    229e:	tst.w	r3, #112	; 0x70
    22a2:	bne.n	2304 <FatFile::read(void*, unsigned int)+0x188>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    22a4:	ldrb	r3, [r5, #1]
  return -1;
    22a6:	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
    22aa:	orr.w	r3, r3, #2
    22ae:	strb	r3, [r5, #1]
  return -1;
}
    22b0:	add	sp, #12
    22b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    22b6:	ldr	r3, [r0, #28]
    22b8:	ldr	r2, [r0, #20]
    22ba:	subs	r3, r3, r2
    22bc:	cmp	r9, r3
    22be:	it	cs
    22c0:	movcs	r9, r3
    22c2:	b.n	21ae <FatFile::read(void*, unsigned int)+0x32>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    22c4:	lsls	r1, r1, #28
    22c6:	bpl.n	22ec <FatFile::read(void*, unsigned int)+0x170>
    22c8:	ldrb	r3, [r5, #2]
    22ca:	lsls	r3, r3, #25
    22cc:	bpl.n	22ec <FatFile::read(void*, unsigned int)+0x170>
          m_curCluster++;
    22ce:	ldr	r1, [r5, #16]
    22d0:	adds	r1, #1
    22d2:	b.n	2266 <FatFile::read(void*, unsigned int)+0xea>
    22d4:	ldr	r1, [r5, #16]
    22d6:	b.n	2268 <FatFile::read(void*, unsigned int)+0xec>
    22d8:	ldr	r0, [r2, #0]
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    22da:	mov	r2, r7
    22dc:	ldr	r3, [r0, #0]
    22de:	ldr	r3, [r3, #8]
    22e0:	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->readSector(sector, dst)) {
    22e2:	cmp	r0, #0
    22e4:	beq.n	22a4 <FatFile::read(void*, unsigned int)+0x128>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    22e6:	mov.w	r4, #512	; 0x200
    22ea:	b.n	2232 <FatFile::read(void*, unsigned int)+0xb6>
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    22ec:	mov	r0, r2
    22ee:	ldr	r1, [r5, #16]
    22f0:	mov	r2, sl
    22f2:	bl	2a74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    22f6:	cmp	r0, #0
    22f8:	blt.n	22a4 <FatFile::read(void*, unsigned int)+0x128>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    22fa:	beq.n	229c <FatFile::read(void*, unsigned int)+0x120>
    22fc:	ldr	r2, [r5, #8]
    22fe:	ldr	r1, [r5, #16]
    2300:	b.n	2268 <FatFile::read(void*, unsigned int)+0xec>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    2302:	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    2304:	rsb	r0, r6, r9

fail:
  m_error |= READ_ERROR;
  return -1;
}
    2308:	add	sp, #12
    230a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    230e:	nop

00002310 <FatFile::peek()>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    2310:	push	{r4, r5, r6, lr}
    2312:	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2314:	movs	r2, #1
    2316:	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    2318:	ldr	r6, [r0, #20]
    231a:	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    231e:	ldr	r5, [r0, #16]
    2320:	bl	217c <FatFile::read(void*, unsigned int)>
    2324:	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    2326:	str	r6, [r4, #20]
    2328:	ite	eq
    232a:	ldrbeq.w	r0, [sp, #7]
    232e:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    2332:	str	r5, [r4, #16]
  return c;
}
    2334:	add	sp, #8
    2336:	pop	{r4, r5, r6, pc}

00002338 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    2338:	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    233a:	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    233c:	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    2340:	sub	sp, #12
    2342:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    2344:	clz	r2, r5
    2348:	lsrs	r2, r2, #5
    234a:	cmp	r2, r1
    234c:	bcs.n	235e <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    234e:	adds	r3, #32
    2350:	str	r3, [r0, #20]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    2352:	ldr	r0, [r4, #8]
    2354:	adds	r0, #48	; 0x30
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    2356:	add.w	r0, r0, r5, lsl #5

fail:
  return nullptr;
}
    235a:	add	sp, #12
    235c:	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    235e:	movs	r2, #1
    2360:	add.w	r1, sp, #7
    2364:	bl	217c <FatFile::read(void*, unsigned int)>
    2368:	sxtb	r0, r0
    if  (n != 1) {
    236a:	cmp	r0, #1
    236c:	bne.n	2376 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    236e:	ldr	r3, [r4, #20]
    2370:	adds	r3, #31
    2372:	str	r3, [r4, #20]
    2374:	b.n	2352 <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

fail:
  return nullptr;
    2376:	movs	r0, #0
    2378:	b.n	235a <FatFile::readDirCache(bool)+0x22>
    237a:	nop

0000237c <FatFile::rename(FatFile*, char const*)>:
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    237c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    2380:	ldrb	r5, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::rename(const char* newPath) {
  return rename(m_vol->vwd(), newPath);
}
//------------------------------------------------------------------------------
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    2382:	sub	sp, #108	; 0x6c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    2384:	movs	r4, #0
  FatFile oldFile;
  cache_t* pc;
  DirFat_t* dir;

  // Must be an open file or subdirectory.
  if (!(isFile() || isSubDir())) {
    2386:	tst.w	r5, #24
    238a:	strb.w	r4, [sp, #32]
    238e:	strb.w	r4, [sp, #33]	; 0x21
    2392:	strb.w	r4, [sp, #34]	; 0x22
    2396:	strb.w	r4, [sp, #68]	; 0x44
    239a:	strb.w	r4, [sp, #69]	; 0x45
    239e:	strb.w	r4, [sp, #70]	; 0x46
    23a2:	beq.n	23ae <FatFile::rename(FatFile*, char const*)+0x32>
  if (!USE_LONG_FILE_NAMES && isLFN()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Can't move file to new volume.
  if (m_vol != dirFile->m_vol) {
    23a4:	ldr	r6, [r0, #8]
    23a6:	mov	r3, r0
    23a8:	ldr	r5, [r1, #8]
    23aa:	cmp	r6, r5
    23ac:	beq.n	23b6 <FatFile::rename(FatFile*, char const*)+0x3a>
    goto fail;
  }
  return m_vol->cacheSync();

fail:
  return false;
    23ae:	movs	r0, #0
}
    23b0:	add	sp, #108	; 0x6c
    23b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    23b6:	mov	r5, r3
    23b8:	mov	r8, r2
    23ba:	mov	r6, r1
    23bc:	bl	1dc0 <FatFile::sync() [clone .part.40]>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    23c0:	mov	lr, r5
    23c2:	add	r7, sp, #68	; 0x44
    23c4:	ldmia.w	lr!, {r0, r1, r2, r3}
    23c8:	stmia	r7!, {r0, r1, r2, r3}
    23ca:	ldmia.w	lr!, {r0, r1, r2, r3}
    23ce:	ldr.w	lr, [lr]
    23d2:	stmia	r7!, {r0, r1, r2, r3}
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    23d4:	mov	r1, r4
    23d6:	mov	r0, r5
    DBG_FAIL_MACRO;
    goto fail;
  }
  // sync() and cache directory entry
  sync();
  oldFile = *this;
    23d8:	str.w	lr, [r7]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
    23dc:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    23e0:	mov	lr, r0
    23e2:	cmp	r0, #0
    23e4:	beq.n	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    23e6:	ldr	r0, [r0, #0]
    23e8:	mov	r7, sp
    23ea:	ldr.w	r1, [lr, #4]
    23ee:	ldr.w	r2, [lr, #8]
    23f2:	ldr.w	r3, [lr, #12]
  // make directory entry for new path
  if (isFile()) {
    23f6:	ldrb.w	ip, [r5]
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    23fa:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    23fc:	and.w	ip, ip, #8
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    2400:	ldr.w	r0, [lr, #16]
    2404:	ldr.w	r1, [lr, #20]
    2408:	ldr.w	r2, [lr, #24]
  // make directory entry for new path
  if (isFile()) {
    240c:	and.w	r9, ip, #255	; 0xff
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // save directory entry
  memcpy(&entry, dir, sizeof(entry));
    2410:	ldr.w	r3, [lr, #28]
    2414:	stmia	r7!, {r0, r1, r2, r3}
  // make directory entry for new path
  if (isFile()) {
    2416:	cmp.w	ip, #0
    241a:	beq.w	2548 <FatFile::rename(FatFile*, char const*)+0x1cc>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    241e:	mov	r2, r8
    2420:	mov	r1, r6
    2422:	movw	r3, #2561	; 0xa01
    2426:	add	r0, sp, #32
    2428:	bl	2098 <FatFile::open(FatFile*, char const*, int)>
    242c:	cmp	r0, #0
    242e:	beq.n	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    2430:	ldr	r2, [sp, #56]	; 0x38
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
  m_dirCluster = file.m_dirCluster;
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    2432:	movs	r6, #0
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    2434:	ldrh.w	r3, [sp, #36]	; 0x24
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    2438:	movs	r1, #1
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
    243a:	str	r2, [r5, #24]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
  file.m_flags = 0;

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    243c:	mov	r0, r5
    dirCluster = file.m_firstCluster;
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
    243e:	strh	r3, [r5, #4]
  m_lfnOrd = file.m_lfnOrd;
    2440:	ldrb.w	r2, [sp, #35]	; 0x23
  m_dirCluster = file.m_dirCluster;
    2444:	ldr	r3, [sp, #44]	; 0x2c
  }
  // change to new directory entry

  m_dirSector = file.m_dirSector;
  m_dirIndex = file.m_dirIndex;
  m_lfnOrd = file.m_lfnOrd;
    2446:	strb	r2, [r5, #3]
  m_dirCluster = file.m_dirCluster;
    2448:	str	r3, [r5, #12]
  // mark closed to avoid possible destructor close call
  file.m_attributes = FILE_ATTR_CLOSED;
    244a:	strb.w	r6, [sp, #32]
  file.m_flags = 0;
    244e:	strb.w	r6, [sp, #34]	; 0x22

  // cache new directory entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    2452:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    2456:	cmp	r0, #0
    2458:	beq.n	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    245a:	add	r3, sp, #104	; 0x68
  dir->attributes = entry.attributes;
    245c:	ldrb.w	r2, [sp, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    2460:	ldr.w	r7, [r3, #-91]!
  dir->attributes = entry.attributes;
    2464:	strb	r2, [r0, #11]
    DBG_FAIL_MACRO;
    goto fail;
  }
  // copy all but name and name flags to new directory entry
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
         sizeof(entry) - sizeof(dir->name) - 2);
    2466:	ldr.w	lr, [r3, #4]
    246a:	str.w	r7, [r0, #13]
    246e:	ldr	r7, [r3, #8]
    2470:	str.w	lr, [r0, #17]
    2474:	str.w	r7, [r0, #21]
    2478:	ldr.w	lr, [r3, #12]
    247c:	ldrh	r7, [r3, #16]
    247e:	ldrb	r3, [r3, #18]
    2480:	str.w	lr, [r0, #25]
    2484:	strh.w	r7, [r0, #29]
    2488:	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;

  // update dot dot if directory
  if (dirCluster) {
    248a:	cmp	r4, #0
    248c:	beq.n	2504 <FatFile::rename(FatFile*, char const*)+0x188>
    // get new dot dot
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    248e:	mov	r1, r4
    2490:	ldr	r0, [r5, #8]
    2492:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2496:	ldr	r3, [r5, #8]
    2498:	mov	r1, r0
    249a:	mov	r2, r6
    249c:	add.w	r0, r3, #36	; 0x24
    24a0:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    24a4:	cmp	r0, #0
    24a6:	beq.n	23ae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&entry, &pc->dir[1], sizeof(entry));
    24a8:	mov	r6, r0
    24aa:	mov	r7, sp
    24ac:	ldr.w	r0, [r6, #32]!
    24b0:	ldr	r1, [r6, #4]
    24b2:	ldr	r2, [r6, #8]
    24b4:	ldr	r3, [r6, #12]
    24b6:	stmia	r7!, {r0, r1, r2, r3}
    24b8:	ldr	r0, [r6, #16]
    24ba:	ldr	r1, [r6, #20]
    24bc:	ldr	r2, [r6, #24]
    24be:	ldr	r3, [r6, #28]
    24c0:	stmia	r7!, {r0, r1, r2, r3}

    // free unused cluster
    if (!m_vol->freeChain(dirCluster)) {
    24c2:	mov	r1, r4
    24c4:	ldr	r0, [r5, #8]
    24c6:	bl	2bd0 <FatPartition::freeChain(unsigned long)>
    24ca:	cmp	r0, #0
    24cc:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // store new dot dot
    sector = m_vol->clusterStartSector(m_firstCluster);
    24d0:	ldr	r1, [r5, #32]
    24d2:	ldr	r0, [r5, #8]
    24d4:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
    24d8:	ldr	r3, [r5, #8]
    24da:	mov	r1, r0
    24dc:	movs	r2, #1
    24de:	add.w	r0, r3, #36	; 0x24
    24e2:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
    pc = m_vol->cacheFetchData(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    24e6:	mov	r7, r0
    24e8:	cmp	r0, #0
    24ea:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
    24ee:	mov	r4, sp
    24f0:	ldmia	r4!, {r0, r1, r2, r3}
    24f2:	str	r0, [r7, #32]
    24f4:	str	r1, [r7, #36]	; 0x24
    24f6:	str	r2, [r7, #40]	; 0x28
    24f8:	str	r3, [r7, #44]	; 0x2c
    24fa:	ldmia	r4!, {r0, r1, r2, r3}
    24fc:	str	r0, [r7, #48]	; 0x30
    24fe:	str	r1, [r7, #52]	; 0x34
    2500:	str	r2, [r7, #56]	; 0x38
    2502:	str	r3, [r7, #60]	; 0x3c
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    2504:	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    2506:	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    2508:	movs	r3, #8
  if (!oldFile.remove()) {
    250a:	add	r0, sp, #68	; 0x44
      goto fail;
    }
    memcpy(&pc->dir[1], &entry, sizeof(entry));
  }
  // Remove old directory entry;
  oldFile.m_firstCluster = 0;
    250c:	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    250e:	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    2512:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    2516:	bl	31e8 <FatFile::remove()>
    251a:	cmp	r0, #0
    251c:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return m_vol->cacheSync();
    2520:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    2522:	add.w	r0, r4, #36	; 0x24
    2526:	bl	2a58 <FatCache::sync()>
    252a:	cmp	r0, #0
    252c:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    2530:	add.w	r0, r4, #560	; 0x230
    2534:	bl	2a58 <FatCache::sync()>
    2538:	cmp	r0, #0
    253a:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
    253e:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    2540:	ldr	r3, [r0, #0]
    2542:	ldr	r3, [r3, #20]
    2544:	blx	r3
    2546:	b.n	23b0 <FatFile::rename(FatFile*, char const*)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // don't create missing path prefix components
    if (!file.mkdir(dirFile, newPath, false)) {
    2548:	mov	r3, r9
    254a:	mov	r2, r8
    254c:	mov	r1, r6
    254e:	add	r0, sp, #32
    2550:	bl	1fd0 <FatFile::mkdir(FatFile*, char const*, bool)>
    2554:	cmp	r0, #0
    2556:	beq.w	23ae <FatFile::rename(FatFile*, char const*)+0x32>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // save cluster containing new dot dot
    dirCluster = file.m_firstCluster;
    255a:	ldr	r4, [sp, #64]	; 0x40
    255c:	b.n	2430 <FatFile::rename(FatFile*, char const*)+0xb4>
    255e:	nop

00002560 <FatFile::rmdir()>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
  // must be open subdirectory
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    2560:	ldrb	r3, [r0, #0]
    2562:	lsls	r2, r3, #27
    2564:	bpl.n	259c <FatFile::rmdir()+0x3c>
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    2566:	ldr	r3, [r0, #20]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::rmdir() {
    2568:	push	{r4, lr}
    256a:	mov	r4, r0
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    256c:	cbz	r3, 257c <FatFile::rmdir()+0x1c>
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    256e:	ldrb	r3, [r0, #2]
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2570:	movs	r2, #0
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    2572:	bic.w	r3, r3, #32
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    2576:	str	r2, [r0, #16]
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    2578:	str	r2, [r0, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    257a:	strb	r3, [r0, #2]
  }
  rewind();

  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    257c:	movs	r1, #1
    257e:	mov	r0, r4
    2580:	bl	2338 <FatFile::readDirCache(bool)>
    if (!dir) {
    2584:	cbz	r0, 25a0 <FatFile::rmdir()+0x40>
      }
      DBG_FAIL_MACRO;
      goto fail;
    }
    // done if past last used entry
    if (dir->name[0] == FAT_NAME_FREE) {
    2586:	ldrb	r3, [r0, #0]
    2588:	cbz	r3, 25a6 <FatFile::rmdir()+0x46>
      break;
    }
    // skip empty slot, '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    258a:	cmp	r3, #229	; 0xe5
    258c:	beq.n	257c <FatFile::rmdir()+0x1c>
    258e:	cmp	r3, #46	; 0x2e
    2590:	beq.n	257c <FatFile::rmdir()+0x1c>
      continue;
    }
    // error not empty
    if (isFileOrSubdir(dir)) {
    2592:	ldrb	r3, [r0, #11]
    2594:	lsls	r3, r3, #28
    2596:	bmi.n	257c <FatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
  return remove();

fail:
  return false;
}
    2598:	movs	r0, #0
    259a:	pop	{r4, pc}
    259c:	movs	r0, #0
    259e:	bx	lr
  // make sure directory is empty
  while (1) {
    DirFat_t* dir = readDirCache(true);
    if (!dir) {
      // EOF if no error.
      if (!getError()) {
    25a0:	ldrb	r3, [r4, #1]
    25a2:	cmp	r3, #0
    25a4:	bne.n	2598 <FatFile::rmdir()+0x38>
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    25a6:	ldrb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    25a8:	movs	r2, #8
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    25aa:	mov	r0, r4
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
    25ac:	orr.w	r3, r3, #2
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
    25b0:	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    25b2:	strb	r3, [r4, #2]
  return remove();

fail:
  return false;
}
    25b4:	ldmia.w	sp!, {r4, lr}
    }
  }
  // convert empty directory to normal file for remove
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();
    25b8:	b.w	31e8 <FatFile::remove()>

000025bc <FatFile::seekSet(unsigned long)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    25bc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25c0:	ldrb	r3, [r0, #0]
    25c2:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    25c4:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    25c6:	cbz	r3, 25f6 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    25c8:	ldr	r2, [r0, #20]
    25ca:	mov	r6, r1
    25cc:	cmp	r2, r1
    25ce:	beq.n	263a <FatFile::seekSet(unsigned long)+0x7e>
    return true;
  }
  if (pos == 0) {
    25d0:	cbnz	r1, 25e4 <FatFile::seekSet(unsigned long)+0x28>
    // set position to start of file
    m_curCluster = 0;
    25d2:	str	r1, [r4, #16]
    }
  }

done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    25d4:	ldrb	r3, [r4, #2]
  return true;
    25d6:	movs	r0, #1
      goto fail;
    }
  }

done:
  m_curPosition = pos;
    25d8:	str	r6, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    25da:	bic.w	r3, r3, #32
    25de:	strb	r3, [r4, #2]
  return true;
    25e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    25e4:	lsls	r0, r3, #28
    25e6:	bmi.n	25fe <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    25e8:	lsls	r1, r3, #26
    25ea:	bpl.n	2604 <FatFile::seekSet(unsigned long)+0x48>
    25ec:	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    25ee:	ldrh	r3, [r3, #8]
    25f0:	cmp.w	r6, r3, lsl #5
    25f4:	bls.n	25d4 <FatFile::seekSet(unsigned long)+0x18>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

fail:
  m_curCluster = tmp;
    25f6:	str	r7, [r4, #16]
  return false;
    25f8:	movs	r0, #0
    25fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    25fe:	ldr	r1, [r4, #28]
    2600:	cmp	r6, r1
    2602:	bhi.n	25f6 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    2604:	ldr.w	lr, [r4, #8]
    2608:	subs	r0, r2, #1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    260a:	subs	r5, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    260c:	ldrb.w	r1, [lr, #6]
    2610:	adds	r1, #9
    2612:	uxtb	r1, r1
    2614:	lsrs	r0, r1
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    2616:	lsrs	r5, r1

  if (nNew < nCur || m_curPosition == 0) {
    2618:	cbz	r2, 2640 <FatFile::seekSet(unsigned long)+0x84>
    261a:	cmp	r0, r5
    261c:	bhi.n	2640 <FatFile::seekSet(unsigned long)+0x84>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    261e:	subs	r5, r5, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    2620:	add.w	r8, r4, #16
    2624:	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2626:	cmp	r5, #0
    2628:	beq.n	25d4 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    262a:	ldr	r1, [r4, #16]
    262c:	subs	r5, #1
    262e:	ldr	r0, [r4, #8]
    2630:	bl	2a74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    2634:	cmp	r0, #0
    2636:	bgt.n	2624 <FatFile::seekSet(unsigned long)+0x68>
    2638:	b.n	25f6 <FatFile::seekSet(unsigned long)+0x3a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    263a:	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
    263c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    2640:	lsls	r3, r3, #25
    2642:	ite	mi
    2644:	ldrmi.w	r3, [lr, #32]
    2648:	ldrpl	r3, [r4, #32]
    264a:	str	r3, [r4, #16]
    264c:	b.n	2620 <FatFile::seekSet(unsigned long)+0x64>
    264e:	nop

00002650 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    2650:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2654:	mov	r5, r1
    2656:	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    2658:	movs	r1, #0
    265a:	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    265c:	mov	r4, r0
    265e:	mov	r7, r3
    2660:	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    2664:	bl	b58c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    2668:	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    266a:	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    266e:	ldr	r1, [r5, #32]
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  /** \return Cache sector address. */
  cache_t* buffer() {
    return &m_buffer;
    2670:	add.w	r2, r0, #48	; 0x30
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    2674:	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    2676:	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    2678:	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    267c:	strh.w	r8, [r4, #4]
    2680:	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    2682:	lsls	r5, r1, #28
    2684:	bmi.n	26aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    2686:	and.w	r1, r1, #23
    268a:	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    268c:	ldrb	r3, [r2, #11]
    268e:	tst.w	r3, #24
    2692:	bne.n	269a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    2694:	orr.w	r1, r1, #8
    2698:	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    269a:	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    269e:	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    26a0:	cmp	r3, #1
    26a2:	beq.n	26b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    26a4:	cmp	r3, #2
    26a6:	beq.n	26fe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    26a8:	cbz	r3, 26f4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
    26aa:	movs	r3, #0
    26ac:	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    26ae:	mov	r0, r3
  }
  return true;

fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    26b0:	strb	r3, [r4, #2]
  return false;
    26b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    26b6:	movs	r3, #2
    26b8:	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    26ba:	ldrb	r1, [r4, #0]
    26bc:	tst.w	r1, #17
    26c0:	bne.n	26aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    26c2:	sxtb	r1, r3
    26c4:	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    26c8:	and.w	r3, r7, #8
    26cc:	orrs	r3, r1
    26ce:	uxtb	r3, r3
    26d0:	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    26d2:	ldrh.w	lr, [r2, #20]
    26d6:	ldrh	r1, [r2, #26]
    26d8:	ldr	r6, [r0, #44]	; 0x2c
    26da:	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    26de:	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    26e0:	cbz	r5, 2704 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    26e2:	cbnz	r1, 271a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    26e4:	orn	r3, r3, #127	; 0x7f
    26e8:	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    26ea:	lsls	r3, r7, #17
    26ec:	bmi.n	270c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    26ee:	movs	r0, #1
    26f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    26f4:	ands.w	r5, r7, #1024	; 0x400
    26f8:	bne.n	26aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    26fa:	movs	r1, #1
    26fc:	b.n	26c8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    26fe:	movs	r3, #3
    2700:	strb	r3, [r4, #2]
      break;
    2702:	b.n	26ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    2704:	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2706:	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    2708:	str	r3, [r4, #28]
    270a:	b.n	26ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    270c:	ldr	r1, [r4, #28]
    270e:	mov	r0, r4
    2710:	bl	25bc <FatFile::seekSet(unsigned long)>
    2714:	cmp	r0, #0
    2716:	bne.n	26ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    2718:	b.n	26aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    271a:	bl	2bd0 <FatPartition::freeChain(unsigned long)>
    271e:	cmp	r0, #0
    2720:	beq.n	26aa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    2722:	ldrb	r3, [r4, #2]
    2724:	b.n	26e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    2726:	nop

00002728 <FatFile::openNext(FatFile*, int)>:
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2728:	ldrb	r3, [r0, #0]
    272a:	cbnz	r3, 2734 <FatFile::openNext(FatFile*, int)+0xc>
    272c:	ldrb	r3, [r1, #0]
    272e:	tst.w	r3, #112	; 0x70
    2732:	bne.n	2738 <FatFile::openNext(FatFile*, int)+0x10>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    2734:	movs	r0, #0
}
    2736:	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    2738:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    273c:	ldr	r6, [r1, #20]
    273e:	sub	sp, #8
  DirLfn_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    2740:	ands.w	r7, r6, #31
    2744:	bne.n	278a <FatFile::openNext(FatFile*, int)+0x62>
    2746:	mov	r9, r2
    2748:	mov	r5, r1
    274a:	mov	r8, r0
    274c:	mov	sl, r7
    274e:	b.n	276c <FatFile::openNext(FatFile*, int)+0x44>
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    2750:	sub.w	r2, r3, #229	; 0xe5
    2754:	clz	r2, r2
    2758:	lsrs	r2, r2, #5
    275a:	cbnz	r2, 277e <FatFile::openNext(FatFile*, int)+0x56>
    275c:	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
    275e:	tst.w	r1, #8
    2762:	beq.n	27a0 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
    2764:	cmp	r1, #15
    2766:	beq.n	2792 <FatFile::openNext(FatFile*, int)+0x6a>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
        lfnOrd = ldir->order & 0X1F;
        checksum = ldir->checksum;
      }
    } else {
      lfnOrd = 0;
    2768:	mov	r7, r2
    276a:	ldr	r6, [r5, #20]
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    DirFat_t* dir = dirFile->readDirCache();
    276c:	movs	r1, #0
    276e:	mov	r0, r5
    2770:	bl	2338 <FatFile::readDirCache(bool)>
    if (!dir) {
    2774:	cbz	r0, 278a <FatFile::openNext(FatFile*, int)+0x62>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == FAT_NAME_FREE) {
    2776:	ldrb	r3, [r0, #0]
    2778:	cbz	r3, 278a <FatFile::openNext(FatFile*, int)+0x62>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    277a:	cmp	r3, #46	; 0x2e
    277c:	bne.n	2750 <FatFile::openNext(FatFile*, int)+0x28>
      lfnOrd = 0;
    277e:	movs	r7, #0
    2780:	b.n	276a <FatFile::openNext(FatFile*, int)+0x42>
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    2782:	bl	2e08 <FatFile::lfnChecksum(unsigned char*)>
    2786:	cmp	r0, sl
    2788:	beq.n	27a4 <FatFile::openNext(FatFile*, int)+0x7c>
      lfnOrd = 0;
    }
  }

fail:
  return false;
    278a:	movs	r0, #0
}
    278c:	add	sp, #8
    278e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        goto fail;
      }
      return true;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    2792:	lsls	r2, r3, #25
    2794:	bpl.n	276a <FatFile::openNext(FatFile*, int)+0x42>
        lfnOrd = ldir->order & 0X1F;
    2796:	and.w	r7, r3, #31
        checksum = ldir->checksum;
    279a:	ldrb.w	sl, [r0, #13]
    279e:	b.n	276a <FatFile::openNext(FatFile*, int)+0x42>
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
      lfnOrd = 0;
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    27a0:	cmp	r7, #0
    27a2:	bne.n	2782 <FatFile::openNext(FatFile*, int)+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    27a4:	str	r7, [sp, #0]
    27a6:	mov	r3, r9
    27a8:	ubfx	r2, r6, #5, #16
    27ac:	mov	r1, r5
    27ae:	mov	r0, r8
    27b0:	bl	2650 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    27b4:	b.n	278c <FatFile::openNext(FatFile*, int)+0x64>
    27b6:	nop

000027b8 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    27b8:	ldrb	r3, [r0, #0]
    27ba:	cbz	r3, 27c0 <FatFile::sync()+0x8>
    27bc:	b.w	1dc0 <FatFile::sync() [clone .part.40]>
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
    27c0:	movs	r0, #1
    27c2:	bx	lr

000027c4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    27c4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27c8:	ldrb	r3, [r0, #2]
    27ca:	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    27cc:	lsls	r5, r3, #30
    27ce:	bmi.n	27e0 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    27d0:	ldrb	r3, [r4, #1]
  return -1;
    27d2:	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
    27d6:	orr.w	r3, r3, #1
    27da:	strb	r3, [r4, #1]
  return -1;
    27dc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27e0:	mov	r9, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    27e2:	lsls	r2, r3, #28
    27e4:	mov	r8, r1
    27e6:	bmi.w	2974 <FatFile::write(void const*, unsigned int)+0x1b0>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    27ea:	ldr	r2, [r4, #20]
    27ec:	mvns	r3, r2
    27ee:	cmp	r9, r3
    27f0:	bhi.n	27d0 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    27f2:	cmp.w	r9, #0
    27f6:	beq.n	2880 <FatFile::write(void const*, unsigned int)+0xbc>
    27f8:	mov	r6, r9
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    27fa:	mov.w	fp, #0
    m_lbn = 0XFFFFFFFF;
    27fe:	mov.w	sl, #4294967295
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    2802:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    2804:	ubfx	r7, r2, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    2808:	ldr	r1, [r4, #16]
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    280a:	ldrb	r5, [r0, #5]
    goto fail;
  }
  while (nToWrite) {
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    280c:	ands.w	r5, r5, r2, lsr #9
    2810:	bne.n	28fc <FatFile::write(void const*, unsigned int)+0x138>
    2812:	cmp	r7, #0
    2814:	bne.n	28fc <FatFile::write(void const*, unsigned int)+0x138>
      // start of new cluster
      if (m_curCluster != 0) {
    2816:	cmp	r1, #0
    2818:	beq.n	28a0 <FatFile::write(void const*, unsigned int)+0xdc>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    281a:	ldrb	r3, [r4, #2]
    281c:	lsls	r3, r3, #25
    281e:	bpl.n	2916 <FatFile::write(void const*, unsigned int)+0x152>
    2820:	ldr	r3, [r4, #28]
    2822:	cmp	r3, r2
    2824:	bls.n	2916 <FatFile::write(void const*, unsigned int)+0x152>
          m_curCluster++;
    2826:	adds	r1, #1
    2828:	str	r1, [r4, #16]
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    282a:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    282e:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    2830:	cmp.w	r6, #512	; 0x200
    2834:	bcc.w	2982 <FatFile::write(void const*, unsigned int)+0x1be>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    2838:	cmp.w	r6, #1024	; 0x400
    283c:	ldr	r2, [r4, #8]
    283e:	bcc.n	2938 <FatFile::write(void const*, unsigned int)+0x174>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    2840:	ldrb	r7, [r2, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    2842:	lsrs	r3, r6, #9
    2844:	ldr	r0, [r2, #44]	; 0x2c
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    2846:	subs	r5, r7, r5
    2848:	cmp	r3, r5
    284a:	it	cs
    284c:	movcs	r3, r5
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    284e:	cmp	r0, r1
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    2850:	mov.w	r5, r3, lsl #9
      // Check for cache sector in write range.
      if (sector <= m_vol->cacheSectorNumber()
          && sector < (m_vol->cacheSectorNumber() + nSector)) {
    2854:	bcc.n	2866 <FatFile::write(void const*, unsigned int)+0xa2>
    2856:	add	r0, r3
    2858:	cmp	r0, r1
    285a:	bls.n	2866 <FatFile::write(void const*, unsigned int)+0xa2>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    285c:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    2860:	str.w	sl, [r2, #44]	; 0x2c
    2864:	ldr	r2, [r4, #8]
    2866:	ldr	r0, [r2, #0]
#if USE_MULTI_SECTOR_IO
  bool readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    return m_blockDev->readSectors(sector, dst, ns);
  }
  bool writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    return m_blockDev->writeSectors(sector, src, ns);
    2868:	mov	r2, r8
    286a:	ldr	r7, [r0, #0]
    286c:	ldr	r7, [r7, #28]
    286e:	blx	r7
        // Invalidate cache if cache sector is in the range.
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSectors(sector, src, nSector)) {
    2870:	cmp	r0, #0
    2872:	beq.n	27d0 <FatFile::write(void const*, unsigned int)+0xc>
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    2874:	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    2876:	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    2878:	add	r8, r5
      if (!m_vol->writeSector(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    287a:	add	r2, r5
    287c:	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    287e:	bne.n	2802 <FatFile::write(void const*, unsigned int)+0x3e>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    2880:	ldr	r3, [r4, #28]
    2882:	cmp	r3, r2
    2884:	bcc.w	2992 <FatFile::write(void const*, unsigned int)+0x1ce>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    2888:	ldr	r3, [pc, #284]	; (29a8 <FatFile::write(void const*, unsigned int)+0x1e4>)
    288a:	ldr	r3, [r3, #0]
    288c:	cmp	r3, #0
    288e:	beq.w	29a2 <FatFile::write(void const*, unsigned int)+0x1de>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2892:	ldrb	r3, [r4, #2]
    2894:	mov	r0, r9
    2896:	orn	r3, r3, #127	; 0x7f
    289a:	strb	r3, [r4, #2]
    289c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    28a0:	ldr	r1, [r4, #32]
    28a2:	cmp	r1, #0
    28a4:	beq.n	2954 <FatFile::write(void const*, unsigned int)+0x190>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    28a6:	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    28a8:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    28ac:	cmp.w	r6, #512	; 0x200
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    28b0:	mov	r1, r0
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    28b2:	bcs.n	2838 <FatFile::write(void const*, unsigned int)+0x74>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    28b4:	rsb	r5, r7, #512	; 0x200
    28b8:	ldr	r0, [r4, #8]
    28ba:	cmp	r5, r6
    28bc:	it	cs
    28be:	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    28c0:	ldr	r2, [r4, #20]
    28c2:	ldr	r3, [r4, #28]
    28c4:	cmp	r2, r3
    28c6:	bcs.n	28ce <FatFile::write(void const*, unsigned int)+0x10a>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    28c8:	ldrb	r3, [r4, #2]
    28ca:	lsls	r3, r3, #26
    28cc:	bpl.n	2912 <FatFile::write(void const*, unsigned int)+0x14e>
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
    28ce:	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    28d0:	adds	r0, #36	; 0x24
    28d2:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    28d6:	cmp	r0, #0
    28d8:	beq.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    28dc:	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    28de:	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    28e0:	mov	r2, r5
    28e2:	mov	r1, r8
    28e4:	bl	8310 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    28e8:	cmp.w	r7, #512	; 0x200
    28ec:	bne.n	2874 <FatFile::write(void const*, unsigned int)+0xb0>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    28ee:	ldr	r0, [r4, #8]
    28f0:	adds	r0, #36	; 0x24
    28f2:	bl	2a58 <FatCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    28f6:	cmp	r0, #0
    28f8:	bne.n	2874 <FatFile::write(void const*, unsigned int)+0xb0>
    28fa:	b.n	27d0 <FatFile::write(void const*, unsigned int)+0xc>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    28fc:	bl	2a68 <FatPartition::clusterStartSector(unsigned long) const>
                      + sectorOfCluster;
    2900:	adds	r1, r5, r0

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    2902:	cmp	r7, #0
    2904:	beq.n	2830 <FatFile::write(void const*, unsigned int)+0x6c>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    2906:	rsb	r5, r7, #512	; 0x200
    290a:	ldr	r0, [r4, #8]
    290c:	cmp	r5, r6
    290e:	it	cs
    2910:	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FatCache::CACHE_FOR_WRITE;
    2912:	movs	r2, #1
    2914:	b.n	28d0 <FatFile::write(void const*, unsigned int)+0x10c>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    2916:	add.w	r2, r4, #16
    291a:	bl	2a74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    291e:	cmp	r0, #0
    2920:	blt.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    2924:	bne.n	2932 <FatFile::write(void const*, unsigned int)+0x16e>
          // add cluster if at end of chain
          if (!addCluster()) {
    2926:	mov	r0, r4
    2928:	bl	1cd8 <FatFile::addCluster()>
    292c:	cmp	r0, #0
    292e:	beq.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
    2932:	ldr	r0, [r4, #8]
    2934:	ldr	r1, [r4, #16]
    2936:	b.n	28a8 <FatFile::write(void const*, unsigned int)+0xe4>
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (m_vol->cacheSectorNumber() == sector) {
    2938:	ldr	r3, [r2, #44]	; 0x2c
    293a:	cmp	r3, r1
    293c:	beq.n	2968 <FatFile::write(void const*, unsigned int)+0x1a4>
    293e:	ldr	r0, [r2, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    2940:	mov	r2, r8
    2942:	ldr	r3, [r0, #0]
    2944:	ldr	r3, [r3, #24]
    2946:	blx	r3
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeSector(sector, src)) {
    2948:	cmp	r0, #0
    294a:	beq.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    294e:	mov.w	r5, #512	; 0x200
    2952:	b.n	2874 <FatFile::write(void const*, unsigned int)+0xb0>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    2954:	mov	r0, r4
    2956:	bl	1cd8 <FatFile::addCluster()>
    295a:	cmp	r0, #0
    295c:	beq.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    2960:	ldr	r1, [r4, #16]
    2962:	ldr	r0, [r4, #8]
    2964:	str	r1, [r4, #32]
    2966:	b.n	28a8 <FatFile::write(void const*, unsigned int)+0xe4>
    m_part = vol;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2968:	strb.w	fp, [r2, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
    296c:	str.w	sl, [r2, #44]	; 0x2c
    2970:	ldr	r2, [r4, #8]
    2972:	b.n	293e <FatFile::write(void const*, unsigned int)+0x17a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    2974:	ldr	r1, [r0, #28]
    2976:	bl	25bc <FatFile::seekSet(unsigned long)>
    297a:	cmp	r0, #0
    297c:	beq.w	27d0 <FatFile::write(void const*, unsigned int)+0xc>
    2980:	b.n	27ea <FatFile::write(void const*, unsigned int)+0x26>
    2982:	cmp.w	r6, #512	; 0x200
    2986:	mov	r5, r6
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    2988:	ldr	r0, [r4, #8]
    298a:	it	cs
    298c:	movcs.w	r5, #512	; 0x200
    2990:	b.n	28c0 <FatFile::write(void const*, unsigned int)+0xfc>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2992:	ldrb	r3, [r4, #2]
    2994:	mov	r0, r9
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    2996:	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    2998:	orn	r3, r3, #127	; 0x7f
    299c:	strb	r3, [r4, #2]
    299e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29a2:	mov	r0, r9
    29a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    29a8:	.word	0x20003820

000029ac <FatCache::sync() [clone .part.8]>:
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    29ac:	ldr	r3, [r0, #4]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    29ae:	ldr	r1, [r0, #8]
    29b0:	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    29b2:	add.w	r6, r0, #12
fail:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
    29b6:	mov	r4, r0
    29b8:	ldr	r0, [r3, #0]
    29ba:	mov	r2, r6
    29bc:	ldr	r3, [r0, #0]
    29be:	ldr	r3, [r3, #24]
    29c0:	blx	r3
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_part->writeSector(m_lbn, m_buffer.data)) {
    29c2:	cbz	r0, 29d6 <FatCache::sync() [clone .part.8]+0x2a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    29c4:	ldrb	r3, [r4, #0]
    29c6:	mov	r5, r0
    29c8:	lsls	r2, r3, #30
    29ca:	bmi.n	29dc <FatCache::sync() [clone .part.8]+0x30>
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    29cc:	bic.w	r3, r3, #1
  }
  return true;

fail:
  return false;
}
    29d0:	mov	r0, r5
      if (!m_part->writeSector(sector, m_buffer.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    29d2:	strb	r3, [r4, #0]
  }
  return true;

fail:
  return false;
}
    29d4:	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
    29d6:	movs	r5, #0
}
    29d8:	mov	r0, r5
    29da:	pop	{r4, r5, r6, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_lbn + m_part->sectorsPerFat();
    29dc:	ldr	r3, [r4, #4]
    29de:	mov	r2, r6
    29e0:	ldr	r1, [r4, #8]
    29e2:	ldr	r0, [r3, #0]
    29e4:	ldr	r6, [r3, #16]
    29e6:	ldr	r3, [r0, #0]
    29e8:	add	r1, r6
    29ea:	ldr	r3, [r3, #24]
    29ec:	blx	r3
      if (!m_part->writeSector(sector, m_buffer.data)) {
    29ee:	cmp	r0, #0
    29f0:	beq.n	29d6 <FatCache::sync() [clone .part.8]+0x2a>
    29f2:	ldrb	r3, [r4, #0]
    29f4:	b.n	29cc <FatCache::sync() [clone .part.8]+0x20>
    29f6:	nop

000029f8 <FatCache::read(unsigned long, unsigned char)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    29f8:	push	{r3, r4, r5, r6, r7, lr}
  if (m_lbn != sector) {
    29fa:	ldr	r3, [r0, #8]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
    29fc:	mov	r6, r0
    29fe:	mov	r4, r2
  if (m_lbn != sector) {
    2a00:	cmp	r3, r1
    2a02:	beq.n	2a24 <FatCache::read(unsigned long, unsigned char)+0x2c>

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    2a04:	ldrb	r3, [r0, #0]
    2a06:	mov	r7, r1
    2a08:	lsls	r2, r3, #31
    2a0a:	bmi.n	2a32 <FatCache::read(unsigned long, unsigned char)+0x3a>
  if (m_lbn != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    2a0c:	lsls	r3, r4, #29
    2a0e:	bpl.n	2a3e <FatCache::read(unsigned long, unsigned char)+0x46>
    2a10:	add.w	r5, r6, #12
    2a14:	movs	r3, #0
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a16:	and.w	r4, r4, #3
    2a1a:	mov	r0, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_lbn = sector;
    2a1c:	str	r7, [r6, #8]
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a1e:	orrs	r4, r3
    2a20:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    2a22:	pop	{r3, r4, r5, r6, r7, pc}
    2a24:	ldrsb.w	r3, [r0], #12
      }
    }
    m_status = 0;
    m_lbn = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    2a28:	and.w	r4, r4, #3
    2a2c:	orrs	r4, r3
    2a2e:	strb	r4, [r6, #0]
  return &m_buffer;

fail:

  return nullptr;
}
    2a30:	pop	{r3, r4, r5, r6, r7, pc}
    2a32:	bl	29ac <FatCache::sync() [clone .part.8]>
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t sector, uint8_t option) {
  if (m_lbn != sector) {
    if (!sync()) {
    2a36:	cmp	r0, #0
    2a38:	bne.n	2a0c <FatCache::read(unsigned long, unsigned char)+0x14>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_buffer;

fail:

  return nullptr;
    2a3a:	movs	r0, #0
    2a3c:	pop	{r3, r4, r5, r6, r7, pc}
    2a3e:	ldr	r3, [r6, #4]
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_part->readSector(sector, m_buffer.data)) {
    2a40:	add.w	r5, r6, #12
  uint32_t m_lastCluster;             // Last cluster number in FAT.
  uint32_t m_rootDirStart;            // Start sector FAT16, cluster FAT32.
  //----------------------------------------------------------------------------
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
    2a44:	mov	r1, r7
    2a46:	ldr	r0, [r3, #0]
    2a48:	mov	r2, r5
    2a4a:	ldr	r3, [r0, #0]
    2a4c:	ldr	r3, [r3, #8]
    2a4e:	blx	r3
    2a50:	cmp	r0, #0
    2a52:	bne.n	2a14 <FatCache::read(unsigned long, unsigned char)+0x1c>
    2a54:	b.n	2a3a <FatCache::read(unsigned long, unsigned char)+0x42>
    2a56:	nop

00002a58 <FatCache::sync()>:

  return nullptr;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    2a58:	ldrb	r3, [r0, #0]
    2a5a:	lsls	r3, r3, #31
    2a5c:	bmi.n	2a62 <FatCache::sync()+0xa>
  }
  return true;

fail:
  return false;
}
    2a5e:	movs	r0, #1
    2a60:	bx	lr
    2a62:	b.w	29ac <FatCache::sync() [clone .part.8]>
    2a66:	nop

00002a68 <FatPartition::clusterStartSector(unsigned long) const>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    2a68:	ldrb	r3, [r0, #6]
    2a6a:	subs	r1, #2
    2a6c:	ldr	r0, [r0, #20]
    2a6e:	lsls	r1, r3
}
    2a70:	add	r0, r1
    2a72:	bx	lr

00002a74 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2a74:	cmp	r1, #1
    2a76:	bls.n	2ade <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
    2a78:	ldr	r3, [r0, #28]
    2a7a:	cmp	r1, r3
    2a7c:	bhi.n	2ade <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
uint32_t FatPartition::clusterStartSector(uint32_t cluster) const {
  return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    2a7e:	push	{r4, r5, r6, lr}
    2a80:	ldrb	r3, [r0, #7]
    2a82:	mov	r6, r2
    2a84:	mov	r5, r0
    2a86:	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    2a88:	cmp	r3, #32
    2a8a:	beq.n	2ac0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    2a8c:	cmp	r3, #16
    2a8e:	bne.n	2aba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    2a90:	ldr	r3, [r0, #24]
    2a92:	ubfx	r1, r1, #8, #8
    2a96:	movs	r2, #2
    2a98:	add.w	r0, r0, #560	; 0x230
    2a9c:	add	r1, r3
    2a9e:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    2aa2:	cbz	r0, 2aba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2aa4:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    2aa6:	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    2aaa:	ldr	r2, [r5, #28]
    2aac:	cmp	r3, r2
    2aae:	bhi.n	2ab6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    2ab0:	str	r3, [r6, #0]
  return 1;
    2ab2:	movs	r0, #1
    2ab4:	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    2ab6:	movs	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
    2ab8:	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

fail:
  return -1;
    2aba:	mov.w	r0, #4294967295
    2abe:	pop	{r4, r5, r6, pc}
    2ac0:	ldr	r1, [r0, #24]
    2ac2:	movs	r2, #2
    2ac4:	add.w	r0, r0, #560	; 0x230
    2ac8:	add.w	r1, r1, r4, lsr #7
    2acc:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_READ);
    if (!pc) {
    2ad0:	cmp	r0, #0
    2ad2:	beq.n	2aba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2ad4:	and.w	r1, r4, #127	; 0x7f
    2ad8:	ldr.w	r3, [r0, r1, lsl #2]
    2adc:	b.n	2aaa <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

fail:
  return -1;
    2ade:	mov.w	r0, #4294967295
}
    2ae2:	bx	lr

00002ae4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2ae4:	cmp	r1, #1
    2ae6:	bls.n	2b24 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    2ae8:	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    2aea:	ldr	r3, [r0, #28]
    2aec:	cmp	r1, r3
    2aee:	bhi.n	2afe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    2af0:	ldrb	r3, [r0, #7]
    2af2:	mov	r5, r2
    2af4:	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    2af6:	cmp	r3, #32
    2af8:	beq.n	2b28 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    2afa:	cmp	r3, #16
    2afc:	beq.n	2b02 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    2afe:	movs	r0, #0
    2b00:	pop	{r3, r4, r5, pc}
    2b02:	ldr	r3, [r0, #24]
    2b04:	ubfx	r1, r1, #8, #8
    2b08:	add.w	r0, r0, #560	; 0x230
    2b0c:	movs	r2, #3
    2b0e:	add	r1, r3
    2b10:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    2b14:	mov	r3, r0
    2b16:	cmp	r0, #0
    2b18:	beq.n	2afe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    2b1a:	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    2b1c:	movs	r0, #1
    2b1e:	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

fail:
  return false;
}
    2b22:	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
    2b24:	movs	r0, #0
}
    2b26:	bx	lr
    2b28:	ldr	r1, [r0, #24]
    2b2a:	movs	r2, #3
    2b2c:	add.w	r0, r0, #560	; 0x230
    2b30:	add.w	r1, r1, r4, lsr #7
    2b34:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
    2b38:	mov	r3, r0
    2b3a:	cmp	r0, #0
    2b3c:	beq.n	2afe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    2b3e:	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    2b42:	movs	r0, #1
    2b44:	str.w	r5, [r3, r1, lsl #2]
    2b48:	pop	{r3, r4, r5, pc}
    2b4a:	nop

00002b4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b50:	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b52:	sub	sp, #8
    2b54:	mov	r5, r0
    2b56:	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b58:	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    2b5a:	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    2b5c:	bcs.n	2bca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    2b5e:	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    2b60:	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    2b62:	adds	r4, #1
    2b64:	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b66:	add	r2, sp, #4
    2b68:	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2b6a:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b6c:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2b6e:	bls.n	2b82 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    2b70:	cbnz	r6, 2bc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    2b72:	ldr	r4, [r5, #12]
      setStart = true;
    2b74:	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b76:	add	r2, sp, #4
    2b78:	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    2b7a:	adds	r4, #1
    if (find > m_lastCluster) {
    2b7c:	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b7e:	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    2b80:	bhi.n	2b70 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    2b82:	cmp	r7, r4
    2b84:	beq.n	2bc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    2b86:	bl	2a74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    2b8a:	cmp	r0, #0
    2b8c:	blt.n	2bc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    2b8e:	beq.n	2b62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    2b90:	ldr	r3, [sp, #4]
    2b92:	cmp	r3, #0
    2b94:	bne.n	2b62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    2b96:	cbz	r6, 2b9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    2b98:	str	r4, [r5, #12]
  }
  uint32_t clusterStartSector(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2b9a:	mvn.w	r2, #4026531840	; 0xf0000000
    2b9e:	mov	r1, r4
    2ba0:	mov	r0, r5
    2ba2:	bl	2ae4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    2ba6:	mov	r6, r0
    2ba8:	cbz	r0, 2bc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    2baa:	cbnz	r7, 2bb2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    2bac:	str.w	r4, [r8]
  return true;
    2bb0:	b.n	2bc2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    2bb2:	mov	r1, r7
    2bb4:	mov	r0, r5
    2bb6:	mov	r2, r4
    2bb8:	bl	2ae4 <FatPartition::fatPut(unsigned long, unsigned long)>
    2bbc:	cmp	r0, #0
    2bbe:	bne.n	2bac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
    2bc0:	movs	r6, #0
}
    2bc2:	mov	r0, r6
    2bc4:	add	sp, #8
    2bc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    2bca:	movs	r6, #1
    2bcc:	b.n	2b62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    2bce:	nop

00002bd0 <FatPartition::freeChain(unsigned long)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    2bd0:	push	{r4, r5, r6, lr}
    2bd2:	mov	r5, r0
    2bd4:	sub	sp, #8
    2bd6:	mov	r4, r1
    2bd8:	b.n	2bee <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2bda:	bl	2ae4 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    2bde:	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2be0:	cbz	r0, 2c04 <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    2be2:	ldr	r3, [r5, #12]
    2be4:	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    2be6:	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    2be8:	it	cc
    2bea:	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    2bec:	cbz	r6, 2c06 <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    2bee:	add	r2, sp, #4
    2bf0:	mov	r1, r4
    2bf2:	mov	r0, r5
    2bf4:	bl	2a74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    2bf8:	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    2bfa:	mov	r1, r4
    2bfc:	mov.w	r2, #0
    2c00:	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    2c02:	bge.n	2bda <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

fail:
  return false;
    2c04:	movs	r0, #0
}
    2c06:	add	sp, #8
    2c08:	pop	{r4, r5, r6, pc}
    2c0a:	nop

00002c0c <FatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    2c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c10:	ldrb	r3, [r0, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    2c12:	ldr	r2, [r0, #28]
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    2c14:	cmp	r3, #32
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
  uint32_t free = 0;
  uint32_t sector;
  uint32_t todo = m_lastCluster + 1;
    2c16:	add.w	r8, r2, #1
      }
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    2c1a:	beq.n	2c28 <FatPartition::freeClusterCount()+0x1c>
    2c1c:	cmp	r3, #16
    2c1e:	beq.n	2c28 <FatPartition::freeClusterCount()+0x1c>
  }
  setFreeClusterCount(free);
  return free;

fail:
  return -1;
    2c20:	mov.w	r0, #4294967295
    2c24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (fg && c == 0) {
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    2c28:	ldr	r5, [r0, #24]
    while (todo) {
    2c2a:	cmp.w	r8, #0
    2c2e:	beq.n	2cac <FatPartition::freeClusterCount()+0xa0>
    2c30:	mov	r6, r0
    2c32:	add.w	r7, r0, #560	; 0x230
    2c36:	movs	r4, #0
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
    2c38:	mov	r1, r5
    2c3a:	movs	r2, #2
    2c3c:	mov	r0, r7
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
    2c3e:	adds	r5, #1
    2c40:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
      if (!pc) {
    2c44:	cmp	r0, #0
    2c46:	beq.n	2c20 <FatPartition::freeClusterCount()+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2c48:	ldrb	r3, [r6, #7]
    2c4a:	cmp	r3, #16
    2c4c:	beq.n	2c7a <FatPartition::freeClusterCount()+0x6e>
      if (todo < n) {
    2c4e:	cmp.w	r8, #127	; 0x7f
    2c52:	bls.n	2ca4 <FatPartition::freeClusterCount()+0x98>
    2c54:	movs	r1, #128	; 0x80
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2c56:	mov	r2, r1
    2c58:	subs	r2, #1
    2c5a:	subs	r3, r0, #4
    2c5c:	uxth	r2, r2
    2c5e:	add.w	r0, r0, r2, lsl #2
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat32[i] == 0) {
    2c62:	ldr.w	r2, [r3, #4]!
    2c66:	cbnz	r2, 2c6a <FatPartition::freeClusterCount()+0x5e>
            free++;
    2c68:	adds	r4, #1
          if (pc->fat16[i] == 0) {
            free++;
          }
        }
      } else {
        for (uint16_t i = 0; i < n; i++) {
    2c6a:	cmp	r3, r0
    2c6c:	bne.n	2c62 <FatPartition::freeClusterCount()+0x56>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2c6e:	subs.w	r8, r8, r1
    2c72:	bne.n	2c38 <FatPartition::freeClusterCount()+0x2c>
    2c74:	mov	r0, r4
    2c76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    2c7a:	cmp.w	r8, #255	; 0xff
    2c7e:	bhi.n	2cb2 <FatPartition::freeClusterCount()+0xa6>
        n = todo;
    2c80:	uxth.w	r3, r8
    2c84:	mov	r1, r8
    2c86:	subs	r2, r3, #1
    2c88:	subs	r3, r0, #2
    2c8a:	uxth	r2, r2
    2c8c:	add.w	r0, r0, r2, lsl #1
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
          if (pc->fat16[i] == 0) {
    2c90:	ldrh.w	r2, [r3, #2]!
    2c94:	cbnz	r2, 2c98 <FatPartition::freeClusterCount()+0x8c>
            free++;
    2c96:	adds	r4, #1
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
      }
      if (fatType() == 16) {
        for (uint16_t i = 0; i < n; i++) {
    2c98:	cmp	r0, r3
    2c9a:	bne.n	2c90 <FatPartition::freeClusterCount()+0x84>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2c9c:	subs.w	r8, r8, r1
    2ca0:	bne.n	2c38 <FatPartition::freeClusterCount()+0x2c>
    2ca2:	b.n	2c74 <FatPartition::freeClusterCount()+0x68>
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
        n = todo;
    2ca4:	uxth.w	r2, r8
    2ca8:	mov	r1, r8
    2caa:	b.n	2c58 <FatPartition::freeClusterCount()+0x4c>
        free++;
      }
    }
  } else if (fatType() == 16 || fatType() == 32) {
    sector = m_fatStartSector;
    while (todo) {
    2cac:	mov	r0, r8
    // invalid FAT type
    DBG_FAIL_MACRO;
    goto fail;
  }
  setFreeClusterCount(free);
  return free;
    2cae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
      if (todo < n) {
    2cb2:	mov.w	r1, #256	; 0x100
      cache_t* pc = cacheFetchFat(sector++, FatCache::CACHE_FOR_READ);
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      n =  fatType() == 16 ? m_bytesPerSector/2 : m_bytesPerSector/4;
    2cb6:	mov	r3, r1
    2cb8:	b.n	2c86 <FatPartition::freeClusterCount()+0x7a>
    2cba:	nop

00002cbc <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    2cbc:	push	{r3, r4, r5, r6, r7, lr}
    2cbe:	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    2cc0:	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
    2cc2:	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    2cc6:	movs	r5, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    2cc8:	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2cca:	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] vol FatPartition that owns this FatCache.
   */
  void init(FatPartition *vol) {
    m_part = vol;
    2ccc:	str	r4, [r4, #40]	; 0x28
    2cce:	str.w	r4, [r4, #564]	; 0x234
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    2cd2:	str	r5, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    2cd4:	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    2cd6:	strb.w	r3, [r4, #36]	; 0x24
    2cda:	strb.w	r3, [r4, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
    2cde:	str	r0, [r4, #44]	; 0x2c
    2ce0:	str.w	r0, [r4, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2ce4:	cbz	r2, 2d1e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    2ce6:	cmp	r2, #4
    2ce8:	bls.n	2cee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2cea:	movs	r0, #0
    2cec:	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return m_cache.read(sector, options);
    2cee:	add.w	r5, r4, #36	; 0x24
    2cf2:	mov	r2, r3
    2cf4:	mov	r1, r3
    2cf6:	mov	r0, r5
    2cf8:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FatCache::CACHE_FOR_READ));
    MbrPart_t *mp = mbr->part + part - 1;
    2cfc:	mvn.w	r3, #4026531840	; 0xf0000000
    2d00:	add.w	r1, r0, #446	; 0x1be
    2d04:	add	r3, r6
    2d06:	lsls	r3, r3, #4
    2d08:	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    2d0a:	cmp	r0, #0
    2d0c:	beq.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d0e:	ldrb	r0, [r2, #4]
    2d10:	cmp	r0, #0
    2d12:	beq.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d14:	ldrb	r3, [r1, r3]
    2d16:	lsls	r3, r3, #25
    2d18:	bne.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2d1a:	ldr	r6, [r2, #8]
    2d1c:	b.n	2d22 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    2d1e:	add.w	r5, r4, #36	; 0x24
    2d22:	mov	r0, r5
    2d24:	movs	r2, #0
    2d26:	mov	r1, r6
    2d28:	bl	29f8 <FatCache::read(unsigned long, unsigned char)>
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FatCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    2d2c:	cmp	r0, #0
    2d2e:	beq.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d30:	ldrb	r3, [r0, #16]
    2d32:	cmp	r3, #2
    2d34:	bne.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    2d36:	ldrh.w	r3, [r0, #11]
    2d3a:	cmp.w	r3, #512	; 0x200
    2d3e:	bne.n	2cea <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    2d40:	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    2d42:	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    2d44:	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    2d46:	cmp	r2, #1

  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    2d48:	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    2d4a:	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    2d4c:	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    2d4e:	beq.n	2d70 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    2d50:	movs	r5, #1
    2d52:	mov	r1, r5
    2d54:	b.n	2d58 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    2d56:	mov	r5, r3
    2d58:	lsls	r1, r1, #1
    2d5a:	adds	r3, r5, #1
    2d5c:	uxtb	r1, r1
    2d5e:	uxtb	r3, r3
    2d60:	cmp	r2, r1
    2d62:	beq.n	2d6e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    2d64:	cmp	r3, #9
    2d66:	bne.n	2d56 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    2d68:	strb	r5, [r4, #6]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2d6a:	movs	r0, #0
    2d6c:	pop	{r3, r4, r5, r6, r7, pc}
    2d6e:	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    2d70:	ldrh	r3, [r0, #22]
    2d72:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    2d74:	cbnz	r3, 2d7a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    2d76:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    2d78:	str	r3, [r4, #16]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    2d7a:	ldrh	r2, [r0, #14]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2d7c:	ldrh.w	r7, [r0, #17]
    2d80:	add	r2, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2d82:	lsls	r1, r7, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    2d84:	strh	r7, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    2d86:	add.w	r3, r2, r3, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    2d8a:	str	r2, [r4, #24]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2d8c:	addw	r1, r1, #511	; 0x1ff
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    2d90:	ldrh.w	r2, [r0, #19]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    2d94:	str	r3, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    2d96:	add.w	r3, r3, r1, asr #9
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    2d9a:	str	r3, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    2d9c:	cbz	r2, 2dc6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10a>
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    2d9e:	subs	r3, r6, r3
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2da0:	movw	r1, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    2da4:	add	r3, r2

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    2da6:	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    2daa:	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2dac:	cmp	r5, r1
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    2dae:	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    2db0:	bls.n	2dd2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x116>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    2db2:	movw	r3, #65524	; 0xfff4
    2db6:	cmp	r5, r3
    2db8:	bls.n	2dca <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x10e>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    2dba:	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    2dbc:	movs	r3, #32
  }
  return true;
    2dbe:	movs	r0, #1
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    2dc0:	str	r2, [r4, #32]
    m_fatType = 32;
    2dc2:	strb	r3, [r4, #7]
    2dc4:	pop	{r3, r4, r5, r6, r7, pc}
    2dc6:	ldr	r2, [r0, #32]
    2dc8:	b.n	2d9e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    2dca:	movs	r3, #16
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
  }
  return true;
    2dcc:	movs	r0, #1
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    2dce:	strb	r3, [r4, #7]
    2dd0:	pop	{r3, r4, r5, r6, r7, pc}

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    2dd2:	movs	r3, #12
    m_fatType = 32;
  }
  return true;

fail:
  return false;
    2dd4:	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    2dd6:	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    2dd8:	pop	{r3, r4, r5, r6, r7, pc}
    2dda:	nop

00002ddc <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    2ddc:	cmp	r1, #4
    2dde:	bls.n	2df8 <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    2de0:	cmp	r1, #10
    2de2:	bls.n	2df0 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    2de4:	cmp	r1, #12
    2de6:	bhi.n	2e02 <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    2de8:	add.w	r1, r0, r1, lsl #1
    2dec:	ldrh	r0, [r1, #6]
    2dee:	bx	lr
    2df0:	add.w	r1, r0, r1, lsl #1
    2df4:	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    2df6:	bx	lr
    2df8:	add.w	r1, r0, r1, lsl #1
    2dfc:	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t *ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    2e00:	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    2e02:	movs	r0, #0
}
    2e04:	bx	lr
    2e06:	nop

00002e08 <FatFile::lfnChecksum(unsigned char*)>:
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
    2e08:	push	{r4}
    2e0a:	mov	r4, r0
  uint8_t sum = 0;
    2e0c:	movs	r0, #0
    2e0e:	subs	r2, r4, #1
    2e10:	adds	r4, #10
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    2e12:	lsrs	r3, r0, #1
    2e14:	ldrb.w	r1, [r2, #1]!
    2e18:	orr.w	r0, r3, r0, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    2e1c:	cmp	r4, r2
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    2e1e:	uxtab	r0, r1, r0
    2e22:	uxtb	r0, r0
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    2e24:	bne.n	2e12 <FatFile::lfnChecksum(unsigned char*)+0xa>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
    2e26:	ldr.w	r4, [sp], #4
    2e2a:	bx	lr

00002e2c <FatFile::openCluster(FatFile*)>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
    2e2c:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    2e2e:	ldr	r3, [r1, #12]
    2e30:	cbz	r3, 2e50 <FatFile::openCluster(FatFile*)+0x24>
    2e32:	mov	r4, r1
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
    2e34:	movs	r2, #36	; 0x24
    2e36:	movs	r1, #0
    2e38:	mov	r5, r0
    2e3a:	bl	b58c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    2e3e:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    2e40:	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
    2e42:	strb	r3, [r5, #0]
  m_flags = FILE_FLAG_READ;
    2e44:	strb	r0, [r5, #2]
  m_vol = file->m_vol;
    2e46:	ldr	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    2e48:	ldr	r3, [r4, #12]
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
    2e4a:	str	r2, [r5, #8]
  m_firstCluster = file->m_dirCluster;
    2e4c:	str	r3, [r5, #32]
  return true;
}
    2e4e:	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    2e50:	ldr	r1, [r1, #8]
  m_attributes = FILE_ATTR_SUBDIR;
  m_flags = FILE_FLAG_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
    2e52:	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
    2e56:	b.w	2170 <FatFile::openRoot(FatVolume*)>
    2e5a:	nop

00002e5c <FatFile::getName(char*, unsigned int)>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    2e5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e60:	movs	r3, #0
    2e62:	sub	sp, #52	; 0x34
    2e64:	mov	r5, r2
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    2e66:	ldrb	r2, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
    2e68:	mov	r9, r1
    2e6a:	strb.w	r3, [sp, #12]
    2e6e:	strb.w	r3, [sp, #13]
    2e72:	strb.w	r3, [sp, #14]
  FatFile dirFile;
  DirLfn_t* ldir;
  if (!isOpen() || size < 13) {
    2e76:	cmp	r2, #0
    2e78:	beq.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
    2e7a:	cmp	r5, #12
    2e7c:	ite	hi
    2e7e:	movhi	r4, #0
    2e80:	movls	r4, #1
    2e82:	cmp	r4, #0
    2e84:	bne.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    2e86:	ldrb	r3, [r0, #3]
    2e88:	mov	r8, r0
    2e8a:	cmp	r3, #0
    2e8c:	beq.n	2f52 <FatFile::getName(char*, unsigned int)+0xf6>
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
    2e8e:	mov	r1, r8
    2e90:	add	r0, sp, #12
    2e92:	bl	2e2c <FatFile::openCluster(FatFile*)>
    2e96:	cmp	r0, #0
    2e98:	beq.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    2e9a:	ldrb.w	r3, [r8, #3]
    2e9e:	cmp	r3, #0
    2ea0:	beq.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
    2ea2:	movs	r6, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    2ea4:	str	r4, [sp, #4]
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    2ea6:	ldrh.w	r1, [r8, #4]
    2eaa:	add	r0, sp, #12
    2eac:	subs	r1, r1, r6
    2eae:	lsls	r1, r1, #5
    2eb0:	bl	25bc <FatFile::seekSet(unsigned long)>
    2eb4:	mov	r7, r0
    2eb6:	cmp	r0, #0
    2eb8:	beq.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    2eba:	movs	r1, #0
    2ebc:	add	r0, sp, #12
    2ebe:	bl	2338 <FatFile::readDirCache(bool)>
    if (!ldir) {
    2ec2:	mov	sl, r0
    2ec4:	cmp	r0, #0
    2ec6:	beq.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME) {
    2ec8:	ldrb	r3, [r0, #11]
    2eca:	cmp	r3, #15
    2ecc:	bne.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (order != (ldir->order & 0X1F)) {
    2ece:	ldrb	r3, [r0, #0]
    2ed0:	and.w	r3, r3, #31
    2ed4:	cmp	r6, r3
    2ed6:	bne.n	2f44 <FatFile::getName(char*, unsigned int)+0xe8>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
    2ed8:	subs	r3, r6, #1
    2eda:	add.w	r4, r3, r3, lsl #1
    2ede:	add.w	r4, r3, r4, lsl #2
    2ee2:	mov	r3, r4
    2ee4:	add.w	r2, r9, r4
    2ee8:	add.w	fp, r4, #13
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    2eec:	subs	r1, r3, r4
    2eee:	mov	r0, sl
    2ef0:	uxtb	r1, r1
    2ef2:	bl	2ddc <lfnGetChar(DirLfn_t*, unsigned char)>
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2ef6:	movs	r1, #63	; 0x3f
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    2ef8:	cbz	r0, 2f60 <FatFile::getName(char*, unsigned int)+0x104>
    2efa:	cmp	r5, r3
    2efc:	bls.n	2f60 <FatFile::getName(char*, unsigned int)+0x104>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2efe:	cmp	r0, #126	; 0x7e
    2f00:	add.w	r3, r3, #1
    2f04:	it	ls
    2f06:	uxtbls	r1, r0
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    2f08:	cmp	fp, r3
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
    2f0a:	strb.w	r1, [r2], #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    2f0e:	bne.n	2eec <FatFile::getName(char*, unsigned int)+0x90>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->order & FAT_ORDER_LAST_LONG_ENTRY)) {
    2f10:	cmp	r5, fp
    2f12:	bls.n	2f24 <FatFile::getName(char*, unsigned int)+0xc8>
    2f14:	ldrb.w	r3, [sl]
    2f18:	lsls	r2, r3, #25
    2f1a:	bpl.n	2f24 <FatFile::getName(char*, unsigned int)+0xc8>
    name[k] = 0;
    2f1c:	ldrb.w	r3, [sp, #4]
    2f20:	strb.w	r3, [r9, fp]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
    2f24:	add.w	r3, r9, r5
    2f28:	ldrb.w	r2, [sp, #4]
    2f2c:	strb.w	r2, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    2f30:	ldrb.w	r3, [sl]
    2f34:	lsls	r3, r3, #25
    2f36:	bmi.n	2f4a <FatFile::getName(char*, unsigned int)+0xee>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    2f38:	adds	r6, #1
    2f3a:	ldrb.w	r3, [r8, #3]
    2f3e:	uxtb	r6, r6
    2f40:	cmp	r3, r6
    2f42:	bcs.n	2ea6 <FatFile::getName(char*, unsigned int)+0x4a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
    2f44:	movs	r7, #0
    2f46:	strb.w	r7, [r9]
  return false;
}
    2f4a:	mov	r0, r7
    2f4c:	add	sp, #52	; 0x34
    2f4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
    2f52:	bl	37cc <FatFile::getSFN(char*)>
    2f56:	mov	r7, r0
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
    2f58:	mov	r0, r7
    2f5a:	add	sp, #52	; 0x34
    2f5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static bool lfnGetName(DirLfn_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
    2f60:	mov	fp, r3
    2f62:	b.n	2f10 <FatFile::getName(char*, unsigned int)+0xb4>

00002f64 <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    2f64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    2f68:	ldrb	r3, [r0, #0]
    2f6a:	cmp	r3, #32
    2f6c:	bne.n	2f76 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    2f6e:	ldrb.w	r3, [r0, #1]!
    2f72:	cmp	r3, #32
    2f74:	beq.n	2f6e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    2f76:	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    2f78:	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    2f7a:	cmp	r3, #47	; 0x2f
    2f7c:	beq.w	31c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
    2f80:	cmp	r3, #0
    2f82:	beq.w	31c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2f86:	cmp	r3, #92	; 0x5c
    2f88:	beq.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    2f8a:	sub.w	r4, r3, #34	; 0x22
    2f8e:	uxtb	r4, r4
    2f90:	cmp	r4, #26
    2f92:	bls.n	2fdc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x78>
    2f94:	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    2f96:	movs	r5, #0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2f98:	ldr.w	lr, [pc, #584]	; 31e4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>
    2f9c:	b.n	2fa6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    2f9e:	cmp	r4, #26
    2fa0:	lsr.w	r7, lr, r4
    2fa4:	bls.n	2fec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x88>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fa6:	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    2faa:	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    2fac:	sub.w	ip, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fb0:	mov	r8, r6
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fb2:	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fb4:	mov	r7, r5
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    2fb6:	bls.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    2fb8:	cmp	r3, #124	; 0x7c
    2fba:	beq.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    2fbc:	cmp.w	ip, #94	; 0x5e
    2fc0:	bhi.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    2fc2:	ldrb.w	r3, [r6], #1
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fc6:	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    2fca:	cmp	r3, #47	; 0x2f
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fcc:	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    2fce:	beq.n	2ff6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    2fd0:	cbz	r3, 2ff6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fd2:	cmp	r3, #92	; 0x5c
    2fd4:	bne.n	2f9e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x3a>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    2fd6:	movs	r0, #0
    2fd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fdc:	ldr	r5, [pc, #516]	; (31e4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>)
    2fde:	lsr.w	r4, r5, r4
    2fe2:	lsls	r5, r4, #31
    2fe4:	bpl.n	2f94 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x30>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    2fe6:	movs	r0, #0
    2fe8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    2fec:	lsls	r4, r7, #31
    2fee:	bpl.n	2fa6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
  
 fail:
  return false;
    2ff0:	movs	r0, #0
    2ff2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    2ff6:	cmp	r3, #32
    2ff8:	beq.n	3000 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
    2ffa:	cmp	r3, #47	; 0x2f
    2ffc:	bne.w	31be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x25a>
    3000:	adds	r3, r5, #1
    3002:	add	r3, r0
    3004:	mov	r6, r3
    3006:	ldrb.w	r4, [r3], #1
    300a:	cmp	r4, #32
    300c:	beq.n	3004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
    300e:	cmp	r4, #47	; 0x2f
    3010:	beq.n	3004 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  *ptr = &path[end];
    3012:	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    3014:	cbz	r5, 3044 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    3016:	add	r7, r0
    3018:	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    301c:	cmp	r3, #32
    301e:	beq.n	3024 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    3020:	cmp	r3, #46	; 0x2e
    3022:	bne.n	303a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    3024:	subs	r3, r5, #1
    3026:	adds	r4, r0, r3
      break;
    }
    len--;
    3028:	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    302a:	cbz	r3, 3044 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    302c:	ldrb.w	r2, [r4, #-1]!
    3030:	subs	r3, #1
    if (c != '.' && c != ' ') {
    3032:	cmp	r2, #46	; 0x2e
    3034:	beq.n	3028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
    3036:	cmp	r2, #32
    3038:	beq.n	3028 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    303a:	cmp	r5, #255	; 0xff
    303c:	bgt.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    303e:	mov	r7, r5
    3040:	subs	r4, r5, #1
    3042:	b.n	304a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    3044:	mov.w	r4, #4294967295
    3048:	mov	r7, r5
    304a:	add.w	r3, r1, #12
    304e:	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3052:	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    3054:	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    3056:	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    305a:	cmp	r3, r6
    305c:	bne.n	3056 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    305e:	ldrb	r3, [r0, #0]
    3060:	cmp	r3, #46	; 0x2e
    3062:	beq.n	306a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
    3064:	cmp	r3, #32
    3066:	bne.w	31b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    306a:	mov	r6, r0
    306c:	movs	r3, #0
    306e:	ldrb.w	r2, [r6, #1]!
    3072:	adds	r3, #1
    3074:	cmp	r2, #46	; 0x2e
    3076:	beq.n	306e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    3078:	cmp	r2, #32
    307a:	beq.n	306e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    307c:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    3080:	adds	r2, r4, #1
    3082:	beq.n	309c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    3084:	ldrb	r6, [r0, r4]
    3086:	adds	r2, r0, r4
    3088:	cmp	r6, #46	; 0x2e
    308a:	bne.n	3096 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
    308c:	b.n	309c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    308e:	ldrb.w	r6, [r2, #-1]!
    3092:	cmp	r6, #46	; 0x2e
    3094:	beq.n	309c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    3096:	adds.w	r4, r4, #4294967295
    309a:	bcs.n	308e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  for (; si < len; si++) {
    309c:	cmp	r5, r3
    309e:	mov.w	r9, #0
    30a2:	ble.w	31de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    30a6:	mov.w	ip, #7
    30aa:	mov.w	r8, #8
    30ae:	mov	r6, r9
    30b0:	mov	sl, r9
    c = path[si];
    30b2:	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    30b4:	cmp	r2, #32
    30b6:	beq.n	30c0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15c>
    30b8:	cmp	r2, #46	; 0x2e
    30ba:	bne.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
    30bc:	cmp	r4, r3
    30be:	beq.n	30ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      is83 = false;
    30c0:	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    30c4:	adds	r3, #1
    30c6:	cmp	r3, r5
    30c8:	blt.n	30b2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    30ca:	ldrb	r3, [r1, #13]
    30cc:	cmp	r3, #32
    30ce:	beq.n	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    30d0:	cmp.w	lr, #0
    30d4:	beq.n	3186 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    30d6:	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    30da:	mov.w	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    30de:	it	ne
    30e0:	movne.w	r9, #2
    30e4:	strb.w	r9, [r1]
    30e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    30ec:	cmp	r2, #34	; 0x22
    30ee:	beq.n	3100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    30f0:	cmp	r2, #124	; 0x7c
    30f2:	beq.n	3100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    30f4:	sub.w	r7, r2, #42	; 0x2a
    30f8:	cmp	r7, #5
    30fa:	bhi.n	3126 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    30fc:	cmp	r2, #45	; 0x2d
    30fe:	beq.n	3126 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    3100:	cmp	r4, r3
    3102:	beq.n	313e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1da>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    3104:	cmp	r6, ip
    3106:	ite	ls
    3108:	movls	r2, #0
    310a:	movhi	r2, #1
    310c:	cbnz	r2, 3178 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x214>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    310e:	mov	lr, r2
      c = '_';
    3110:	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    3112:	adds	r7, r6, #1
    3114:	add.w	fp, r1, r6
    3118:	uxtb	r6, r7
    311a:	strb.w	r2, [fp, #13]
      if (i < 7) {
    311e:	cmp	r6, #6
    3120:	bhi.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
        fname->seqPos = i;
    3122:	strb	r6, [r1, #12]
    3124:	b.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    3126:	sub.w	r7, r2, #58	; 0x3a
    312a:	cmp	r7, #5
    312c:	bls.n	3100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    312e:	sub.w	r7, r2, #91	; 0x5b
    3132:	cmp	r7, #2
    3134:	bls.n	3100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    3136:	sub.w	r7, r2, #33	; 0x21
    313a:	cmp	r7, #93	; 0x5d
    313c:	bhi.n	3100 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    313e:	cmp	r4, r3
    3140:	beq.n	3158 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    3142:	cmp	r6, ip
    3144:	bhi.n	3158 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    3146:	sub.w	r7, r2, #97	; 0x61
    314a:	cmp	r7, #25
    314c:	bhi.n	31a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
        c += 'A' - 'a';
    314e:	subs	r2, #32
        lc |= bit;
    3150:	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    3154:	uxtb	r2, r2
    3156:	b.n	3112 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    3158:	cmp.w	ip, #10
    315c:	beq.n	317e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    315e:	cmp	r4, r3
    3160:	beq.n	319a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    3162:	cmp	r4, r3
    3164:	blt.n	317e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    3166:	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    3168:	mov.w	ip, #10
      i = 8;    // Place for extension.
    316c:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    316e:	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    3172:	mov.w	lr, #0
    3176:	b.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    3178:	cmp.w	ip, #10
    317c:	bne.n	3162 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    317e:	ldrb	r3, [r1, #13]
    3180:	cmp	r3, #32
    3182:	beq.w	2fd6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    3186:	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3188:	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    318a:	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    318c:	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    318e:	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    3190:	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    3192:	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    3194:	strb	r2, [r3, #14]
    3196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    319a:	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    319c:	mov.w	ip, #10
      i = 8;    // Place for extension.
    31a0:	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    31a2:	mov.w	r8, #16
    31a6:	b.n	30c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    31a8:	sub.w	r7, r2, #65	; 0x41
    31ac:	cmp	r7, #25
    31ae:	bhi.n	3112 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
        uc |= bit;
    31b0:	orr.w	sl, r8, sl
    31b4:	b.n	3112 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    31b6:	mov.w	lr, #1
    31ba:	movs	r3, #0
    31bc:	b.n	3080 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    31be:	str.w	r8, [r2]
    31c2:	b.n	3016 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    31c4:	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    31c6:	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    31ca:	beq.n	31d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26c>
    31cc:	cmp	r3, #32
    31ce:	bne.n	31d4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x270>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    31d0:	mov	r5, r7
    31d2:	b.n	3000 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    31d4:	str	r0, [r2, #0]
    31d6:	mov.w	r4, #4294967295
    31da:	mov	r5, r7
    31dc:	b.n	304a <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    31de:	mov	sl, r9
    31e0:	b.n	30ca <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    31e2:	nop
    31e4:	.word	0x05000101

000031e8 <FatFile::remove()>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    31e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    31ec:	ldrb	r2, [r0, #2]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
    31ee:	sub	sp, #40	; 0x28
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    31f0:	movs	r3, #0
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    31f2:	lsls	r2, r2, #30
    31f4:	strb.w	r3, [sp, #4]
    31f8:	strb.w	r3, [sp, #5]
    31fc:	strb.w	r3, [sp, #6]
    3200:	bpl.n	3248 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    3202:	ldr	r1, [r0, #32]
    3204:	mov	r5, r0
    3206:	cbnz	r1, 3252 <FatFile::remove()+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    3208:	movs	r1, #1
    320a:	mov	r0, r5
    320c:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3210:	cbz	r0, 3248 <FatFile::remove()+0x60>
    3212:	subs	r1, r0, #1
    3214:	add.w	r7, r0, #10
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    3218:	movs	r4, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    321a:	lsrs	r2, r4, #1
    321c:	ldrb.w	r6, [r1, #1]!
    3220:	orr.w	r3, r2, r4, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3224:	cmp	r7, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3226:	uxtab	r3, r6, r3
    322a:	uxtb	r4, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    322c:	bne.n	321a <FatFile::remove()+0x32>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    322e:	mov.w	r8, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    3232:	movs	r3, #0
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    3234:	strb.w	r8, [r0]
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    3238:	ldr	r6, [r5, #8]

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    323a:	strb	r3, [r5, #0]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    323c:	add.w	r0, r6, #36	; 0x24
  m_flags = 0;
    3240:	strb	r3, [r5, #2]
    3242:	bl	2a58 <FatCache::sync()>
    3246:	cbnz	r0, 325e <FatFile::remove()+0x76>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
    3248:	movs	r6, #0
}
    324a:	mov	r0, r6
    324c:	add	sp, #40	; 0x28
    324e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    3252:	ldr	r0, [r0, #8]
    3254:	bl	2bd0 <FatPartition::freeChain(unsigned long)>
    3258:	cmp	r0, #0
    325a:	bne.n	3208 <FatFile::remove()+0x20>
    325c:	b.n	3248 <FatFile::remove()+0x60>
    325e:	add.w	r0, r6, #560	; 0x230
    3262:	bl	2a58 <FatCache::sync()>
    3266:	cmp	r0, #0
    3268:	beq.n	3248 <FatFile::remove()+0x60>
    326a:	ldr	r0, [r6, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    326c:	ldr	r3, [r0, #0]
    326e:	ldr	r3, [r3, #20]
    3270:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    3272:	mov	r6, r0
    3274:	cmp	r0, #0
    3276:	beq.n	3248 <FatFile::remove()+0x60>
  // Write entry to device.
  if (!m_vol->cacheSync()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
    3278:	ldrb	r3, [r5, #3]
    327a:	cmp	r3, #0
    327c:	beq.n	324a <FatFile::remove()+0x62>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
    327e:	mov	r1, r5
    3280:	add	r0, sp, #4
    3282:	bl	2e2c <FatFile::openCluster(FatFile*)>
    3286:	cmp	r0, #0
    3288:	beq.n	3248 <FatFile::remove()+0x60>
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    328a:	ldrb	r3, [r5, #3]
    328c:	cmp	r3, #0
    328e:	beq.n	3248 <FatFile::remove()+0x60>
    3290:	movs	r7, #1
    3292:	b.n	32d4 <FatFile::remove()+0xec>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    3294:	add	r0, sp, #4
    3296:	bl	2338 <FatFile::readDirCache(bool)>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    329a:	adds	r3, r7, #1
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
    329c:	cmp	r0, #0
    329e:	beq.n	3248 <FatFile::remove()+0x60>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32a0:	ldrb	r2, [r0, #11]
    32a2:	cmp	r2, #15
    32a4:	bne.n	3248 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    32a6:	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32a8:	and.w	r1, r2, #31
    32ac:	cmp	r7, r1
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32ae:	uxtb	r7, r3
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    32b0:	bne.n	3248 <FatFile::remove()+0x60>
        order != (ldir->order & 0X1F) ||
    32b2:	ldrb	r3, [r0, #13]
    32b4:	cmp	r3, r4
    32b6:	bne.n	3248 <FatFile::remove()+0x60>
        checksum != ldir->checksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    32b8:	strb.w	r8, [r0]
    m_vol->cacheDirty();
    32bc:	ldr	r1, [r5, #8]
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    32be:	ldrb.w	r3, [r1, #36]	; 0x24
    32c2:	orr.w	r3, r3, #1
    32c6:	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
    32ca:	lsls	r3, r2, #25
    32cc:	bmi.n	32e8 <FatFile::remove()+0x100>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    32ce:	ldrb	r3, [r5, #3]
    32d0:	cmp	r3, r7
    32d2:	bcc.n	3248 <FatFile::remove()+0x60>
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    32d4:	ldrh	r1, [r5, #4]
    32d6:	add	r0, sp, #4
    32d8:	subs	r1, r1, r7
    32da:	lsls	r1, r1, #5
    32dc:	bl	25bc <FatFile::seekSet(unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.readDirCache());
    32e0:	movs	r1, #0
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - order))) {
    32e2:	cmp	r0, #0
    32e4:	bne.n	3294 <FatFile::remove()+0xac>
    32e6:	b.n	3248 <FatFile::remove()+0x60>
    }
    last = ldir->order & FAT_ORDER_LAST_LONG_ENTRY;
    ldir->order = FAT_NAME_DELETED;
    m_vol->cacheDirty();
    if (last) {
      if (!m_vol->cacheSync()) {
    32e8:	ldr	r4, [r5, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    32ea:	add.w	r0, r4, #36	; 0x24
    32ee:	bl	2a58 <FatCache::sync()>
    32f2:	cmp	r0, #0
    32f4:	beq.n	3248 <FatFile::remove()+0x60>
    32f6:	add.w	r0, r4, #560	; 0x230
    32fa:	bl	2a58 <FatCache::sync()>
    32fe:	cmp	r0, #0
    3300:	beq.n	3248 <FatFile::remove()+0x60>
    3302:	ldr	r0, [r4, #0]
  // sector I/O functions.
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    3304:	ldr	r3, [r0, #0]
    3306:	ldr	r3, [r3, #20]
    3308:	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    return m_fatCache.read(sector,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    330a:	cmp	r0, #0
    330c:	beq.n	3248 <FatFile::remove()+0x60>
    330e:	b.n	324a <FatFile::remove()+0x62>

00003310 <FatFile::lfnUniqueSfn(fname_t*)>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    3310:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3314:	mov	r6, r1
    3316:	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    3318:	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    331c:	mov.w	r9, #126	; 0x7e
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
    3320:	ldrb	r7, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3322:	add.w	r5, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    3326:	ldr	r0, [r6, #4]
    3328:	ldr	r1, [r6, #8]
    332a:	add.w	r3, r8, r0
    332e:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    3330:	cbz	r0, 3346 <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    3332:	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    3334:	ldrb.w	r2, [r1], #1
    3338:	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    333c:	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    333e:	eor.w	r3, r3, r2
    3342:	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    3344:	bne.n	3334 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    3346:	cmp	r7, #3
    3348:	it	cs
    334a:	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    334c:	adds	r2, r7, #4
    334e:	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    3350:	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    3354:	add.w	lr, r2, #4294967295
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    3358:	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    335a:	cmp	r1, #9
    335c:	add.w	r0, r1, #55	; 0x37
    3360:	it	ls
    3362:	addls.w	r0, r1, #48	; 0x30
    3366:	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    3368:	uxtb.w	r2, lr
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    336c:	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    336e:	cmp	r7, r2
    3370:	bcc.n	3350 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    3372:	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool remove(const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    3374:	movs	r1, #0
    3376:	mov	r0, r4
    3378:	strb.w	r9, [r3, #13]
    337c:	bl	25bc <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    3380:	movs	r1, #1
    3382:	mov	r0, r4
    3384:	bl	2338 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3388:	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    338a:	mov	r3, r0
    338c:	cbz	r0, 33bc <FatFile::lfnUniqueSfn(fname_t*)+0xac>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    338e:	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    3392:	mov	r1, r0
    3394:	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    3396:	cmp.w	lr, #0
    339a:	beq.n	33c8 <FatFile::lfnUniqueSfn(fname_t*)+0xb8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    339c:	ldrb	r3, [r3, #11]
    339e:	lsls	r3, r3, #28
    33a0:	bmi.n	3380 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    33a2:	bl	b460 <memcmp>
    33a6:	cmp	r0, #0
    33a8:	bne.n	3380 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    33aa:	add.w	r8, r8, #1
    33ae:	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    33b2:	cmp.w	r8, #100	; 0x64
    33b6:	bne.n	3326 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
fail:
  return false;

done:
  return true;
}
    33b8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    33bc:	ldrb	r0, [r4, #1]
    33be:	clz	r0, r0
    33c2:	lsrs	r0, r0, #5
    33c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

fail:
  return false;

done:
  return true;
    33c8:	movs	r0, #1
    33ca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    33ce:	nop

000033d0 <FatFile::open(FatFile*, fname_t*, int)>:
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    33d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    33d4:	ldrb	r4, [r1, #0]
  
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    33d6:	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    33d8:	tst.w	r4, #112	; 0x70
    33dc:	beq.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    33de:	ldrb	r4, [r0, #0]
    33e0:	cbz	r4, 33ea <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
    33e2:	movs	r0, #0
}
    33e4:	add	sp, #52	; 0x34
    33e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    33ea:	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    33ec:	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    33f0:	lsls	r4, r4, #30
    33f2:	bne.n	3486 <FatFile::open(FatFile*, fname_t*, int)+0xb6>
    33f4:	movs	r7, #1
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    33f6:	mov.w	r9, #0
    33fa:	mov	r6, r1
    33fc:	str	r3, [sp, #28]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    33fe:	add.w	r3, r2, #13
    3402:	str	r0, [sp, #36]	; 0x24
    3404:	mov	r1, r9
    3406:	mov	r0, r6
    3408:	mov	fp, r2
    340a:	str	r3, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    340c:	mov	r4, r9
  uint8_t order = 0;
  uint8_t checksum = 0;
    340e:	str.w	r9, [sp, #24]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    3412:	mov	r8, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    3414:	str.w	r9, [sp, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    3418:	str.w	r9, [sp, #20]
    341c:	bl	25bc <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    3420:	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    3422:	movs	r1, #1
    3424:	mov	r0, r6
    3426:	bl	2338 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    342a:	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    342e:	mov	r3, r0
    3430:	cmp	r0, #0
    3432:	beq.w	359e <FatFile::open(FatFile*, fname_t*, int)+0x1ce>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    3436:	ldrb	r2, [r0, #0]
    3438:	sub.w	r1, r2, #229	; 0xe5
    343c:	clz	r1, r1
    3440:	lsrs	r1, r1, #5
    3442:	cmp	r2, #0
    3444:	beq.n	34b2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
    3446:	cmp	r1, #0
    3448:	bne.n	34b2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    344a:	cmp	r4, r7
    344c:	it	cc
    344e:	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    3450:	cmp	r2, #46	; 0x2e
    3452:	beq.n	34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    3454:	cbnz	r1, 34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    3456:	ldrb	r0, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    3458:	cmp	r0, #15
    345a:	beq.n	3518 <FatFile::open(FatFile*, fname_t*, int)+0x148>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    345c:	lsls	r2, r0, #28
    345e:	bmi.n	34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (lfnOrd) {
    3460:	cmp.w	r8, #0
    3464:	bne.w	3720 <FatFile::open(FatFile*, fname_t*, int)+0x350>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    3468:	mov	r0, r3
    346a:	movs	r2, #11
    346c:	ldr	r1, [sp, #16]
    346e:	bl	b460 <memcmp>
    3472:	cmp	r0, #0
    3474:	bne.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    3476:	ldrb.w	r3, [fp]
    347a:	lsls	r0, r3, #31
    347c:	bpl.w	374a <FatFile::open(FatFile*, fname_t*, int)+0x37a>
          goto found;
        }
        fnameFound = true;
    3480:	movs	r3, #1
    3482:	str	r3, [sp, #20]
    3484:	b.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    3486:	add.w	r4, sl, #12
    348a:	ldr	r7, [pc, #720]	; (375c <FatFile::open(FatFile*, fname_t*, int)+0x38c>)
    348c:	umull	r4, r7, r7, r4
    3490:	lsrs	r7, r7, #2
    3492:	adds	r7, #1
    3494:	uxtb	r7, r7
    3496:	b.n	33f6 <FatFile::open(FatFile*, fname_t*, int)+0x26>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    3498:	ldr	r0, [sp, #12]
    349a:	subs	r0, #1
    349c:	uxtb	r0, r0
    349e:	cmp	r2, r0
    34a0:	str	r0, [sp, #12]
    34a2:	bne.n	34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    34a4:	ldrb	r2, [r3, #13]
    34a6:	ldr	r0, [sp, #24]
    34a8:	cmp	r0, r2
    34aa:	beq.n	3530 <FatFile::open(FatFile*, fname_t*, int)+0x160>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    34ac:	mov.w	r8, #0
    34b0:	b.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    34b2:	cmp	r4, #0
    34b4:	it	eq
    34b6:	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    34b8:	cmp	r4, r7
    34ba:	bcs.n	34c0 <FatFile::open(FatFile*, fname_t*, int)+0xf0>
        freeFound++;
    34bc:	adds	r4, #1
    34be:	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    34c0:	cmp	r2, #0
    34c2:	bne.n	3450 <FatFile::open(FatFile*, fname_t*, int)+0x80>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    34c4:	ldr	r2, [sp, #28]
    34c6:	mov	r3, r2
    34c8:	lsls	r2, r3, #22
    34ca:	bpl.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    34cc:	and.w	r3, r3, #3
    34d0:	subs	r3, #1
    34d2:	cmp	r3, #1
    34d4:	bhi.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    34d6:	cmp	r4, #0
    34d8:	it	eq
    34da:	moveq	r9, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    34dc:	cmp	r4, r7
    34de:	bcc.n	34e8 <FatFile::open(FatFile*, fname_t*, int)+0x118>
    34e0:	b.n	35b8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    34e2:	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    34e4:	cmp	r7, r4
    34e6:	bls.n	35b8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    dir = dirFile->readDirCache();
    34e8:	movs	r1, #0
    34ea:	mov	r0, r6
    34ec:	bl	2338 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    34f0:	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    34f2:	cmp	r0, #0
    34f4:	bne.n	34e2 <FatFile::open(FatFile*, fname_t*, int)+0x112>
      if (dirFile->getError()) {
    34f6:	ldrb	r3, [r6, #1]
    34f8:	cbz	r3, 3506 <FatFile::open(FatFile*, fname_t*, int)+0x136>
    34fa:	b.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    34fc:	ldr	r3, [r6, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    34fe:	uxtb	r4, r4
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    3500:	ldrb	r3, [r3, #4]
    3502:	cmp	r3, #1
    3504:	bhi.n	35b8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    3506:	cmp	r7, r4
    3508:	bls.n	35b8 <FatFile::open(FatFile*, fname_t*, int)+0x1e8>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    350a:	mov	r0, r6
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    350c:	adds	r4, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    350e:	bl	1d0c <FatFile::addDirCluster()>
    3512:	cmp	r0, #0
    3514:	bne.n	34fc <FatFile::open(FatFile*, fname_t*, int)+0x12c>
    3516:	b.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    3518:	cmp.w	r8, #0
    351c:	bne.n	3498 <FatFile::open(FatFile*, fname_t*, int)+0xc8>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    351e:	lsls	r1, r2, #25
    3520:	bpl.w	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    3524:	and.w	r8, r2, #31
        checksum = ldir->checksum;
    3528:	ldrb	r2, [r3, #13]
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = order = ldir->order & 0X1F;
    352a:	str.w	r8, [sp, #12]
        checksum = ldir->checksum;
    352e:	str	r2, [sp, #24]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    3530:	ldr	r2, [sp, #12]
    3532:	subs	r2, #1
    3534:	add.w	r5, r2, r2, lsl #1
    3538:	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    353c:	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    353e:	mov	r2, r5
      if (k >= len) {
    3540:	bls.n	34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    3542:	add.w	r1, r5, #13
    3546:	str.w	r8, [sp, #32]
    354a:	mov	r8, r1
    354c:	b.n	357a <FatFile::open(FatFile*, fname_t*, int)+0x1aa>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    354e:	cmp.w	ip, #25
    3552:	add.w	r0, r1, #32
    3556:	it	ls
    3558:	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    355a:	ldr.w	r0, [fp, #8]
    355e:	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    3560:	sub.w	r0, r2, #65	; 0x41
    3564:	add.w	ip, r2, #32
    3568:	cmp	r0, #25
    356a:	it	ls
    356c:	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3570:	cmp	r2, r1
    3572:	bne.n	34ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    3574:	cmp	lr, r8
    3576:	mov	r2, lr
    3578:	beq.n	35b2 <FatFile::open(FatFile*, fname_t*, int)+0x1e2>
        uint16_t u = lfnGetChar(ldir, i);
    357a:	subs	r1, r2, r5
    357c:	mov	r0, r3
    357e:	uxtb	r1, r1
    3580:	bl	2ddc <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    3584:	cmp	sl, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3586:	add.w	lr, r2, #1
    358a:	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    358c:	beq.w	3712 <FatFile::open(FatFile*, fname_t*, int)+0x342>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3590:	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    3592:	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    3596:	bls.n	354e <FatFile::open(FatFile*, fname_t*, int)+0x17e>
          // Not found.
          lfnOrd = 0;
    3598:	mov.w	r8, #0
    359c:	b.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    359e:	ldrb	r3, [r6, #1]
    35a0:	cmp	r3, #0
    35a2:	bne.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    35a6:	ldr	r2, [sp, #28]
    35a8:	mov	r3, r2
    35aa:	lsls	r2, r3, #22
    35ac:	bpl.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    35b0:	b.n	34cc <FatFile::open(FatFile*, fname_t*, int)+0xfc>
    35b2:	ldr.w	r8, [sp, #32]
    35b6:	b.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    35b8:	ldr	r3, [sp, #20]
    35ba:	cbz	r3, 35ca <FatFile::open(FatFile*, fname_t*, int)+0x1fa>
    if (!dirFile->lfnUniqueSfn(fname)) {
    35bc:	mov	r1, fp
    35be:	mov	r0, r6
    35c0:	bl	3310 <FatFile::lfnUniqueSfn(fname_t*)>
    35c4:	cmp	r0, #0
    35c6:	beq.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    35ca:	mov.w	r1, r9, lsl #5
    35ce:	mov	r0, r6
    35d0:	bl	25bc <FatFile::seekSet(unsigned long)>
    35d4:	cmp	r0, #0
    35d6:	beq.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    35da:	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    35dc:	ands.w	r8, r7, #255	; 0xff
    35e0:	beq.n	368c <FatFile::open(FatFile*, fname_t*, int)+0x2bc>
    35e2:	mov	r7, r8
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    35e4:	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    35e6:	movs	r5, #15
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    35e8:	movs	r1, #0
    35ea:	mov	r0, r6
    35ec:	bl	2338 <FatFile::readDirCache(bool)>
    if (!ldir) {
    35f0:	cmp	r0, #0
    35f2:	beq.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    35f6:	ldr	r2, [r6, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    35f8:	cmp	r7, r8
  cache_t* buffer() {
    return &m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    35fa:	ldrb.w	r3, [r2, #36]	; 0x24
    35fe:	orr.w	r3, r3, #1
    3602:	strb.w	r3, [r2, #36]	; 0x24
    3606:	beq.w	3752 <FatFile::open(FatFile*, fname_t*, int)+0x382>
    360a:	mov	r1, r7
    360c:	add.w	lr, fp, #12
    3610:	add.w	ip, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    3614:	movs	r3, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3616:	strb	r1, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    3618:	strb	r5, [r0, #11]
    ldir->mustBeZero1 = 0;
    361a:	strb	r4, [r0, #12]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    361c:	lsrs	r2, r3, #1
    361e:	ldrb.w	r9, [lr, #1]!
    3622:	orr.w	r3, r2, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3626:	cmp	lr, ip
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    3628:	uxtab	r3, r9, r3
    362c:	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    362e:	bne.n	361c <FatFile::open(FatFile*, fname_t*, int)+0x24c>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    3630:	and.w	r1, r1, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    3634:	strb	r3, [r0, #13]
    3636:	add.w	lr, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    363a:	ldr.w	ip, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    363e:	subs	r1, #1
  for (uint8_t i = 0; i < 13; i++, k++) {
    3640:	movs	r3, #0
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    3642:	strh	r4, [r0, #26]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    3644:	add.w	r2, r1, r1, lsl #1
    3648:	add.w	r2, r1, r2, lsl #2
    364c:	b.n	3668 <FatFile::open(FatFile*, fname_t*, int)+0x298>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    364e:	cmp	r3, #10
    3650:	ite	ls
    3652:	strhls.w	r1, [lr]
    3656:	strhhi.w	r1, [lr, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    365a:	adds	r3, #1
    365c:	adds	r2, #1
    365e:	add.w	lr, lr, #2
    3662:	uxtb	r3, r3
    3664:	cmp	r3, #13
    3666:	beq.n	3684 <FatFile::open(FatFile*, fname_t*, int)+0x2b4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    3668:	cmp	sl, r2
    366a:	ite	ne
    366c:	movne.w	r1, #4294967295
    3670:	moveq	r1, #0
    3672:	ite	hi
    3674:	ldrbhi.w	r1, [ip, r2]
    3678:	uxthls	r1, r1
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t *ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    367a:	cmp	r3, #4
    367c:	bhi.n	364e <FatFile::open(FatFile*, fname_t*, int)+0x27e>
    367e:	strh.w	r1, [lr, #-3]
    3682:	b.n	365a <FatFile::open(FatFile*, fname_t*, int)+0x28a>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    3684:	subs	r7, #1
    3686:	ands.w	r7, r7, #255	; 0xff
    368a:	bne.n	35e8 <FatFile::open(FatFile*, fname_t*, int)+0x218>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    368c:	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    368e:	movs	r1, #0
    3690:	mov	r0, r6
    3692:	bl	2338 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    3696:	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    369a:	mov	r4, r0
    369c:	cmp	r0, #0
    369e:	beq.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    36a2:	movs	r2, #32
    36a4:	movs	r1, #0
    36a6:	bl	b58c <memset>
  memcpy(dir->name, fname->sfn, 11);
    36aa:	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // set timestamps
  if (FsDateTime::callback) {
    36ac:	ldr	r2, [pc, #176]	; (3760 <FatFile::open(FatFile*, fname_t*, int)+0x390>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    36ae:	ldr.w	r0, [r3, #13]!
    36b2:	ldr	r1, [r3, #4]
    36b4:	str	r0, [r4, #0]
    36b6:	str	r1, [r4, #4]
    36b8:	ldrh	r1, [r3, #8]
    36ba:	ldrb	r3, [r3, #10]
    36bc:	strh	r1, [r4, #8]
    36be:	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    36c0:	ldrb.w	r3, [fp]

  // set timestamps
  if (FsDateTime::callback) {
    36c4:	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    36c6:	and.w	r3, r3, #24
    36ca:	strb	r3, [r4, #12]

  // set timestamps
  if (FsDateTime::callback) {
    36cc:	cbz	r7, 36f2 <FatFile::open(FatFile*, fname_t*, int)+0x322>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    36ce:	add.w	r2, sp, #43	; 0x2b
    36d2:	add.w	r1, sp, #46	; 0x2e
    36d6:	add	r0, sp, #44	; 0x2c
    36d8:	blx	r7
    dir->createTimeMs = ms10;
    setLe16(dir->createDate, date);
    36da:	ldrh.w	r3, [sp, #44]	; 0x2c
    setLe16(dir->createTime, time);
    36de:	ldrh.w	r2, [sp, #46]	; 0x2e

  // set timestamps
  if (FsDateTime::callback) {
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    dir->createTimeMs = ms10;
    36e2:	ldrb.w	r1, [sp, #43]	; 0x2b
    36e6:	strh	r3, [r4, #16]
    36e8:	strb	r1, [r4, #13]
    36ea:	strh	r3, [r4, #18]
    36ec:	strh	r3, [r4, #24]
    36ee:	strh	r2, [r4, #14]
    36f0:	strh	r2, [r4, #22]
    setLe16(dir->accessDate, date);
    setLe16(dir->modifyDate, date);
    setLe16(dir->modifyTime, time);;
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    36f2:	ldr	r2, [r6, #8]
    36f4:	ldrb.w	r3, [r2, #36]	; 0x24
    36f8:	orr.w	r3, r3, #1
    36fc:	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    3700:	str.w	r8, [sp]
    3704:	mov	r2, r5
    3706:	ldr	r3, [sp, #28]
    3708:	mov	r1, r6
    370a:	ldr	r0, [sp, #36]	; 0x24
    370c:	bl	2650 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    3710:	b.n	33e4 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    3712:	cmp	r0, #0
    3714:	ldr.w	r8, [sp, #32]
    3718:	it	ne
    371a:	movne.w	r8, #0
    371e:	b.n	3420 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    3720:	ldr	r2, [sp, #12]
    3722:	cmp	r2, #1
    3724:	bne.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    3728:	subs	r4, r3, #1
    372a:	mov	r2, r1
    372c:	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    372e:	lsrs	r0, r2, #1
    3730:	ldrb.w	r1, [r4, #1]!
    3734:	orr.w	r2, r0, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3738:	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    373a:	uxtab	r2, r1, r2
    373e:	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    3740:	bne.n	372e <FatFile::open(FatFile*, fname_t*, int)+0x35e>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    3742:	ldr	r3, [sp, #24]
    3744:	cmp	r3, r2
    3746:	bne.w	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    374a:	ldr	r3, [sp, #28]
    374c:	lsls	r1, r3, #20
    374e:	bpl.n	3700 <FatFile::open(FatFile*, fname_t*, int)+0x330>
    3750:	b.n	33e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    3752:	orr.w	r1, r7, #64	; 0x40
    3756:	uxtb	r1, r1
    3758:	b.n	360c <FatFile::open(FatFile*, fname_t*, int)+0x23c>
    375a:	nop
    375c:	.word	0x4ec4ec4f
    3760:	.word	0x20003820

00003764 <FatFile::getSFN(char*) [clone .part.2]>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    3764:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3768:	mov	r7, r1
    name[0] = '/';
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
    376a:	movs	r1, #0
    376c:	bl	1da0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    3770:	cbz	r0, 37b6 <FatFile::getSFN(char*) [clone .part.2]+0x52>
    3772:	movs	r2, #0
    3774:	subs	r5, r0, #1
    3776:	mov.w	ip, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    377a:	mov.w	r8, #46	; 0x2e
    name[1] = '\0';
    return true;
  }
  // cache entry
  dir = reinterpret_cast<DirFat_t*>(cacheDirEntry(FatCache::CACHE_FOR_READ));
  if (!dir) {
    377e:	mov	r4, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
    3780:	ldrb.w	r3, [r5, #1]!
    3784:	cmp	r3, #32
    3786:	beq.n	37aa <FatFile::getSFN(char*) [clone .part.2]+0x46>
      continue;
    }
    if (i == 8) {
    3788:	cmp	r2, #8
    378a:	beq.n	37ba <FatFile::getSFN(char*) [clone .part.2]+0x56>
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    378c:	sub.w	r1, r3, #65	; 0x41
      c += 'a' - 'A';
    }
    name[j++] = c;
    3790:	adds	r6, r4, #1
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    3792:	cmp	r1, #25
    3794:	bhi.n	37a6 <FatFile::getSFN(char*) [clone .part.2]+0x42>
    3796:	ldrb	r1, [r0, #12]
      c += 'a' - 'A';
    3798:	add.w	lr, r3, #32
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    379c:	tst.w	ip, r1
      c += 'a' - 'A';
    37a0:	it	ne
    37a2:	uxtbne.w	r3, lr
    }
    name[j++] = c;
    37a6:	strb	r3, [r7, r4]
    37a8:	uxtb	r4, r6
    37aa:	adds	r2, #1
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  for (uint8_t i = 0; i < 11; i++) {
    37ac:	cmp	r2, #11
    37ae:	bne.n	3780 <FatFile::getSFN(char*) [clone .part.2]+0x1c>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    37b0:	movs	r3, #0
  return true;
    37b2:	movs	r0, #1
    if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
    37b4:	strb	r3, [r7, r4]
  return true;

fail:
  return false;
}
    37b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
      name[j++] = '.';
    37ba:	adds	r1, r4, #1
    37bc:	strb.w	r8, [r7, r4]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = FAT_CASE_LC_EXT;
    37c0:	mov.w	ip, #16
    37c4:	ldrb	r3, [r5, #0]
      name[j++] = '.';
    37c6:	uxtb	r4, r1
    37c8:	b.n	378c <FatFile::getSFN(char*) [clone .part.2]+0x28>
    37ca:	nop

000037cc <FatFile::getSFN(char*)>:
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
    37cc:	ldrb	r3, [r0, #0]
    37ce:	mov	r2, r1
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  DirFat_t *dir;

  if (!isOpen()) {
    37d0:	cbz	r3, 37e8 <FatFile::getSFN(char*)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    37d2:	tst.w	r3, #96	; 0x60
    37d6:	beq.n	37e4 <FatFile::getSFN(char*)+0x18>
    name[0] = '/';
    37d8:	movs	r1, #47	; 0x2f
    name[1] = '\0';
    37da:	movs	r3, #0
    return true;
    37dc:	movs	r0, #1
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    name[0] = '/';
    37de:	strb	r1, [r2, #0]
    name[1] = '\0';
    37e0:	strb	r3, [r2, #1]
    return true;
    37e2:	bx	lr
    37e4:	b.w	3764 <FatFile::getSFN(char*) [clone .part.2]>
  }
  name[j] = 0;
  return true;

fail:
  return false;
    37e8:	mov	r0, r3
}
    37ea:	bx	lr

000037ec <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    37ec:	push	{r4, lr}
    37ee:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    37f0:	ldr	r0, [r0, #56]	; 0x38
    37f2:	cbz	r0, 3800 <FsBaseFile::close()+0x14>
    37f4:	bl	1e54 <FatFile::close()>
    37f8:	cbz	r0, 3800 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    37fa:	movs	r3, #0
    37fc:	str	r3, [r4, #56]	; 0x38
    return true;
    37fe:	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    3800:	ldr	r0, [r4, #60]	; 0x3c
    3802:	cbz	r0, 3810 <FsBaseFile::close()+0x24>
    3804:	bl	334 <ExFatFile::close()>
    3808:	cbz	r0, 3810 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    380a:	movs	r3, #0
    380c:	str	r3, [r4, #60]	; 0x3c
    380e:	pop	{r4, pc}
    return true;
  }
  return false;
    3810:	movs	r0, #0
}
    3812:	pop	{r4, pc}

00003814 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    3814:	cmp	r0, r1
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    3816:	push	{r3, r4, r5, r6, r7, lr}
    3818:	mov	r6, r0
  if (this == &from) return *this;
    381a:	beq.n	3848 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    381c:	mov	r5, r1
  close();
    381e:	bl	37ec <FsBaseFile::close()>
  if (from.m_fFile) {
    3822:	ldr	r4, [r5, #56]	; 0x38
    3824:	cbz	r4, 384c <FsBaseFile::operator=(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
    3826:	mov	r1, r6
    3828:	movs	r0, #36	; 0x24
    382a:	bl	3a6c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attributes(FILE_ATTR_CLOSED), m_error(0), m_flags(0) {}
    382e:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    3830:	mov	r4, r0
    3832:	strb	r3, [r0, #0]
    3834:	strb	r3, [r0, #1]
    3836:	strb	r3, [r0, #2]
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    3838:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    383a:	ldr	r5, [r5, #56]	; 0x38
    383c:	ldmia	r5!, {r0, r1, r2, r3}
    383e:	stmia	r4!, {r0, r1, r2, r3}
    3840:	ldmia	r5!, {r0, r1, r2, r3}
    3842:	stmia	r4!, {r0, r1, r2, r3}
    3844:	ldr	r3, [r5, #0]
    3846:	str	r3, [r4, #0]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
    3848:	mov	r0, r6
    384a:	pop	{r3, r4, r5, r6, r7, pc}
  if (this == &from) return *this;
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    384c:	ldr	r3, [r5, #60]	; 0x3c
    384e:	cmp	r3, #0
    3850:	beq.n	3848 <FsBaseFile::operator=(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
    3852:	mov	r1, r6
    3854:	movs	r0, #56	; 0x38
    3856:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    385a:	strb.w	r4, [r0, #49]	; 0x31
    385e:	strb.w	r4, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
    3862:	mov	r2, r0
    3864:	strb.w	r4, [r0, #51]	; 0x33
  close();
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    3868:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    386a:	ldr	r3, [r5, #60]	; 0x3c
    386c:	add.w	r1, r3, #48	; 0x30
    3870:	ldr	r7, [r3, #0]
    3872:	adds	r3, #16
    3874:	ldr.w	r5, [r3, #-12]
    3878:	adds	r2, #16
    387a:	ldr.w	r4, [r3, #-8]
    387e:	ldr.w	r0, [r3, #-4]
    3882:	cmp	r3, r1
    3884:	str.w	r7, [r2, #-16]
    3888:	str.w	r5, [r2, #-12]
    388c:	str.w	r4, [r2, #-8]
    3890:	str.w	r0, [r2, #-4]
    3894:	bne.n	3870 <FsBaseFile::operator=(FsBaseFile const&)+0x5c>
    3896:	ldr	r3, [r3, #0]
    3898:	str	r3, [r2, #0]
    389a:	b.n	3848 <FsBaseFile::operator=(FsBaseFile const&)+0x34>

0000389c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    389c:	cbz	r1, 3912 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    389e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a2:	mov	r4, r1
    38a4:	mov	r5, r0
    38a6:	mov	r8, r3
    38a8:	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    38aa:	bl	37ec <FsBaseFile::close()>
  if (vol->m_fVol) {
    38ae:	ldr.w	r6, [r4, #1144]	; 0x478
    38b2:	cbz	r6, 38e0 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
    38b4:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    38b6:	mov	r1, r5
    38b8:	movs	r0, #36	; 0x24
    38ba:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    38be:	mov	r3, r8
    38c0:	strb	r6, [r0, #0]
    38c2:	mov	r2, r7
    38c4:	strb	r6, [r0, #1]
    38c6:	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    38c8:	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    38ca:	ldr.w	r1, [r4, #1144]	; 0x478
    38ce:	bl	2160 <FatFile::open(FatVolume*, char const*, int)>
    38d2:	cbz	r0, 38da <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    38d4:	movs	r0, #1
    38d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    38da:	str	r0, [r5, #56]	; 0x38
    return false;
    38dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    38e0:	ldr.w	r3, [r4, #1148]	; 0x47c
    38e4:	cbz	r3, 3916 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    38e6:	mov	r1, r5
    38e8:	movs	r0, #56	; 0x38
    38ea:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    38ee:	mov	r3, r8
    38f0:	strb.w	r6, [r0, #49]	; 0x31
    38f4:	mov	r2, r7
    38f6:	strb.w	r6, [r0, #50]	; 0x32
    38fa:	strb.w	r6, [r0, #51]	; 0x33
      return true;
    }
    m_fFile = nullptr;
    return false;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    38fe:	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    3900:	ldr.w	r1, [r4, #1148]	; 0x47c
    3904:	bl	ccc <ExFatFile::open(ExFatVolume*, char const*, int)>
    3908:	cmp	r0, #0
    390a:	bne.n	38d4 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    390c:	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    390e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    3912:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    3914:	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    3916:	movs	r0, #0
    3918:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000391c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    391c:	push	{r3, r4, r5, r6, r7, lr}
    391e:	mov	r5, r1
    3920:	mov	r7, r2
    3922:	mov	r4, r0
  close();
    3924:	bl	37ec <FsBaseFile::close()>
  if (dir->m_fFile) {
    3928:	ldr	r6, [r5, #56]	; 0x38
    392a:	cbz	r6, 3950 <FsBaseFile::openNext(FsBaseFile*, int)+0x34>
    m_fFile = new (m_fileMem) FatFile;
    392c:	mov	r1, r4
    392e:	movs	r0, #36	; 0x24
    3930:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    3934:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    3936:	mov	r2, r7
    3938:	strb	r1, [r0, #0]
    393a:	strb	r1, [r0, #1]
    393c:	strb	r1, [r0, #2]
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
  close();
  if (dir->m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    393e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    3940:	ldr	r1, [r5, #56]	; 0x38
    3942:	bl	2728 <FatFile::openNext(FatFile*, int)>
    3946:	cbz	r0, 394c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
      return true;
    3948:	movs	r0, #1
    394a:	pop	{r3, r4, r5, r6, r7, pc}
    }
    m_fFile = nullptr;
    394c:	str	r0, [r4, #56]	; 0x38
    394e:	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    3950:	ldr	r0, [r5, #60]	; 0x3c
    3952:	cbz	r0, 3978 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    3954:	mov	r1, r4
    3956:	movs	r0, #56	; 0x38
    3958:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    395c:	mov	r2, r7
    395e:	strb.w	r6, [r0, #49]	; 0x31
    3962:	strb.w	r6, [r0, #50]	; 0x32
    3966:	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (dir->m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    396a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    396c:	ldr	r1, [r5, #60]	; 0x3c
    396e:	bl	cdc <ExFatFile::openNext(ExFatFile*, int)>
    3972:	cmp	r0, #0
    3974:	bne.n	3948 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
      return true;
    }
    m_xFile = nullptr;
    3976:	str	r0, [r4, #60]	; 0x3c
  }
  return false;
}
    3978:	pop	{r3, r4, r5, r6, r7, pc}
    397a:	nop

0000397c <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    397c:	push	{r4, r5, r6, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    397e:	movs	r6, #0
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    3980:	mov	r5, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    3982:	mov.w	r0, #1144	; 0x478
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    3986:	str.w	r1, [r5, #1152]	; 0x480
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    398a:	mov	r1, r5
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    398c:	str.w	r6, [r5, #1144]	; 0x478
  m_xVol = new (m_volMem) ExFatVolume;
    3990:	bl	3a6c <operator new(unsigned int, unsigned long*)>
    3994:	mov	r4, r0
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    3996:	str	r6, [r0, #4]
    invalidate();
    3998:	bl	d3c <FsCache::invalidate()>
    399c:	add.w	r0, r4, #524	; 0x20c
  static const uint8_t CACHE_FOR_WRITE = CACHE_STATUS_DIRTY;
  /** Reserve cache sector for write - do not read from sector device. */
  static const uint8_t CACHE_RESERVE_FOR_WRITE
    = CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;

  FsCache() : m_blockDev(nullptr) {
    39a0:	str.w	r6, [r4, #528]	; 0x210
    invalidate();
    39a4:	bl	d3c <FsCache::invalidate()>
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() : m_fatType(0) {}
    39a8:	strb.w	r6, [r4, #1084]	; 0x43c
    39ac:	strb.w	r6, [r4, #1137]	; 0x471
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    39b0:	mov	r0, r4
    39b2:	strb.w	r6, [r4, #1138]	; 0x472
    39b6:	movs	r2, #1
    39b8:	strb.w	r6, [r4, #1139]	; 0x473
    39bc:	str.w	r4, [r5, #1148]	; 0x47c
    39c0:	ldr.w	r1, [r5, #1152]	; 0x480
    39c4:	bl	ecc <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    39c8:	cbnz	r0, 3a08 <FsVolume::begin(BlockDeviceInterface*)+0x8c>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    39ca:	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    39cc:	mov	r1, r5
    39ce:	mov.w	r0, #1120	; 0x460
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    39d2:	str.w	r6, [r5, #1148]	; 0x47c
  m_fVol = new (m_volMem) FatVolume;
    39d6:	bl	3a6c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    39da:	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() : m_fatType(0) {}
    39dc:	strb	r6, [r0, #7]
    39de:	mov	r4, r0
    39e0:	strb.w	r6, [r0, #1084]	; 0x43c
    39e4:	strb.w	r6, [r0, #1085]	; 0x43d
    39e8:	strb.w	r6, [r0, #1086]	; 0x43e
    39ec:	str.w	r0, [r5, #1144]	; 0x478
    39f0:	ldr.w	r1, [r5, #1152]	; 0x480
    39f4:	bl	2cbc <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    39f8:	cbnz	r0, 3a26 <FsVolume::begin(BlockDeviceInterface*)+0xaa>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    39fa:	movs	r3, #0
    39fc:	ldr	r2, [pc, #64]	; (3a40 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  m_fVol = nullptr;
  return false;
    39fe:	mov	r0, r3
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    3a00:	str	r3, [r2, #0]
  m_fVol = nullptr;
    3a02:	str.w	r3, [r5, #1144]	; 0x478
  return false;
    3a06:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    3a08:	add.w	r6, r4, #1088	; 0x440
    3a0c:	mov	r0, r6
    3a0e:	bl	334 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    3a12:	mov	r1, r4
    3a14:	mov	r0, r6
    3a16:	bl	3f0 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    3a1a:	cmp	r0, #0
    3a1c:	beq.n	39ca <FsVolume::begin(BlockDeviceInterface*)+0x4e>

 done:
  m_cwv = this;
    3a1e:	ldr	r3, [pc, #32]	; (3a40 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
  return true;
    3a20:	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    3a22:	str	r5, [r3, #0]
  return true;
    3a24:	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    3a26:	addw	r6, r4, #1084	; 0x43c
    3a2a:	mov	r0, r6
    3a2c:	bl	1e54 <FatFile::close()>
    return m_vwd.openRoot(this);
    3a30:	mov	r1, r4
    3a32:	mov	r0, r6
    3a34:	bl	2170 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    3a38:	cmp	r0, #0
    3a3a:	bne.n	3a1e <FsVolume::begin(BlockDeviceInterface*)+0xa2>
    3a3c:	b.n	39fa <FsVolume::begin(BlockDeviceInterface*)+0x7e>
    3a3e:	nop
    3a40:	.word	0x20003824

00003a44 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    3a44:	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    3a46:	movs	r5, #0
    3a48:	mov.w	r7, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3a4c:	ldr	r6, [pc, #24]	; (3a68 <FsVolume::open(char const*, int)+0x24>)
    3a4e:	mov	r4, r0
    3a50:	str	r7, [r0, #8]
    3a52:	strb	r5, [r0, #4]
    3a54:	strb	r5, [r0, #12]
 * \class FsBaseFile
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}
    3a56:	str	r5, [r0, #72]	; 0x48
    3a58:	str	r5, [r0, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3a5a:	str.w	r6, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    3a5e:	bl	389c <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    3a62:	mov	r0, r4
    3a64:	pop	{r3, r4, r5, r6, r7, pc}
    3a66:	nop
    3a68:	.word	0x2000002c

00003a6c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    3a6c:	mov	r0, r1
    3a6e:	bx	lr

00003a70 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    3a70:	mov.w	r0, #4294967295
    3a74:	bx	lr
    3a76:	nop

00003a78 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    3a78:	ldrb	r0, [r0, #23]
    3a7a:	bx	lr

00003a7c <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    3a7c:	ldrb	r0, [r0, #25]
    3a7e:	bx	lr

00003a80 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    3a80:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    3a82:	ldr	r4, [r0, #0]
    3a84:	movs	r3, #1
    3a86:	ldr	r4, [r4, #12]
    3a88:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    3a8a:	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    3a8e:	bx	ip

00003a90 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    3a90:	ldrb	r0, [r0, #26]
    3a92:	bx	lr

00003a94 <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    3a94:	push	{r4}
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    3a96:	ldr	r4, [r0, #0]
    3a98:	movs	r3, #1
    3a9a:	ldr	r4, [r4, #28]
    3a9c:	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return writeSingle(sector, src);
#endif  // ENABLE_DEDICATED_SPI
  }
    3a9e:	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
#if ENABLE_DEDICATED_SPI
    return writeSectors(sector, src, 1);
    3aa2:	bx	ip

00003aa4 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    3aa4:	bx	lr
    3aa6:	nop

00003aa8 <SdSpiCard::~SdSpiCard()>:
    3aa8:	push	{r4, lr}
    3aaa:	mov	r4, r0
    3aac:	movs	r1, #28
    3aae:	bl	a12c <operator delete(void*, unsigned int)>
    3ab2:	mov	r0, r4
    3ab4:	pop	{r4, pc}
    3ab6:	nop

00003ab8 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3ab8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3abc:	mov	r7, r3
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3abe:	ldrb	r3, [r0, #20]
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3ac0:	mov	r4, r0
    3ac2:	mov	r6, r1
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3ac4:	cmp	r3, #2
  m_curState = IDLE_STATE;
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    3ac6:	mov	r5, r2
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3ac8:	beq.n	3ada <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x22>
    if (!syncDevice()) {
    3aca:	ldr	r3, [r4, #0]
    3acc:	mov	r0, r4
    3ace:	ldr	r3, [r3, #20]
    3ad0:	blx	r3
    3ad2:	cbnz	r0, 3b0c <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
      return false;
    3ad4:	movs	r0, #0
    3ad6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    3ada:	ldr	r3, [r0, #16]
    3adc:	cmp	r3, r1
    3ade:	bne.n	3aca <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3ae0:	cbz	r7, 3afc <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    3ae2:	movs	r6, #0
    if (!writeData(src)) {
    3ae4:	ldr	r3, [r4, #0]
    3ae6:	mov	r1, r5
    3ae8:	mov	r0, r4
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3aea:	adds	r6, #1
    if (!writeData(src)) {
    3aec:	ldr	r3, [r3, #68]	; 0x44
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3aee:	add.w	r5, r5, #512	; 0x200
    if (!writeData(src)) {
    3af2:	blx	r3
    3af4:	cmp	r0, #0
    3af6:	beq.n	3ad4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    3af8:	cmp	r7, r6
    3afa:	bne.n	3ae4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    3afc:	ldr	r3, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    3afe:	ldrb	r2, [r4, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
    3b00:	add	r7, r3
    3b02:	str	r7, [r4, #16]
  return m_sharedSpi ? syncDevice() : true;
    3b04:	cbnz	r2, 3b22 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x6a>
    3b06:	movs	r0, #1
    3b08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  #if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!syncDevice()) {
      return false;
    }
    if (!writeStart(sector)) {
    3b0c:	ldr	r3, [r4, #0]
    3b0e:	mov	r1, r6
    3b10:	mov	r0, r4
    3b12:	ldr	r3, [r3, #72]	; 0x48
    3b14:	blx	r3
    3b16:	cmp	r0, #0
    3b18:	beq.n	3ad4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    3b1a:	movs	r3, #2
      return false;
    }
    if (!writeStart(sector)) {
      return false;
    }
    m_curSector = sector;
    3b1c:	str	r6, [r4, #16]
    m_curState = WRITE_STATE;
    3b1e:	strb	r3, [r4, #20]
    3b20:	b.n	3ae0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x28>
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3b22:	ldr	r3, [r4, #0]
    3b24:	mov	r0, r4
    3b26:	ldr	r3, [r3, #20]

 fail:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
    3b28:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    3b2c:	bx	r3
    3b2e:	nop

00003b30 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    3b30:	push	{r4, lr}
    3b32:	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    3b34:	adds	r0, #4
    3b36:	bl	4c9c <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    3b3a:	movs	r1, #0
    3b3c:	ldrb	r0, [r4, #22]
    3b3e:	bl	4ec4 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    3b42:	movs	r3, #1
    3b44:	strb	r3, [r4, #24]
    3b46:	pop	{r4, pc}

00003b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    3b48:	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3b4a:	adds	r5, r0, #4
    3b4c:	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    3b4e:	movs	r1, #1
    3b50:	ldrb	r0, [r0, #22]
    3b52:	bl	4ec4 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3b56:	movs	r1, #255	; 0xff
    3b58:	mov	r0, r5
    3b5a:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    3b5e:	mov	r0, r5
    3b60:	bl	4dc8 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    3b64:	movs	r3, #0
    3b66:	strb	r3, [r4, #24]
    3b68:	pop	{r3, r4, r5, pc}
    3b6a:	nop

00003b6c <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3b6c:	push	{r3, r4, r5, r6, r7, lr}
  bool rtn = true;
  bool spiActive = m_spiActive;
    3b6e:	ldrb	r7, [r0, #24]
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3b70:	mov	r6, r0
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    3b72:	cbnz	r7, 3b78 <SdSpiCard::isBusy()+0xc>
    3b74:	bl	3b30 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    3b78:	adds	r5, r6, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    3b7a:	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3b7c:	mov	r0, r5
    3b7e:	bl	4e20 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    3b82:	cmp	r0, #255	; 0xff
    3b84:	add.w	r3, r4, #4294967295
    3b88:	beq.n	3ba6 <SdSpiCard::isBusy()+0x3a>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    3b8a:	ands.w	r4, r3, #255	; 0xff
    3b8e:	bne.n	3b7c <SdSpiCard::isBusy()+0x10>
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
  bool rtn = true;
    3b90:	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    3b92:	cbnz	r7, 3b98 <SdSpiCard::isBusy()+0x2c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3b94:	ldrb	r3, [r6, #24]
    3b96:	cbnz	r3, 3b9c <SdSpiCard::isBusy()+0x30>
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
}
    3b98:	mov	r0, r4
    3b9a:	pop	{r3, r4, r5, r6, r7, pc}
    3b9c:	mov	r0, r6
    3b9e:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3ba2:	mov	r0, r4
    3ba4:	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    3ba6:	movs	r4, #0
    3ba8:	b.n	3b92 <SdSpiCard::isBusy()+0x26>
    3baa:	nop

00003bac <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    3bac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3bb0:	ldr	r6, [pc, #104]	; (3c1c <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    3bb2:	mov	r4, r0
    3bb4:	mov	r8, r1
    3bb6:	mov	r9, r2
    3bb8:	ldr	r5, [r6, #0]
    3bba:	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    3bbc:	uxth	r5, r5
    3bbe:	b.n	3bcc <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    3bc0:	ldr	r3, [r6, #0]
    3bc2:	uxth	r3, r3
    3bc4:	subs	r3, r3, r5
    3bc6:	cmp.w	r3, #300	; 0x12c
    3bca:	bgt.n	3bf0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    3bcc:	mov	r0, r7
    3bce:	bl	4e20 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    3bd2:	cmp	r0, #255	; 0xff
    3bd4:	strb	r0, [r4, #25]
    3bd6:	beq.n	3bc0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    3bd8:	cmp	r0, #254	; 0xfe
    3bda:	beq.n	3bf6 <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3bdc:	movs	r3, #24
    3bde:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3be0:	ldrb	r0, [r4, #24]
    3be2:	cbz	r0, 3bec <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    3be4:	mov	r0, r4
    3be6:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
  return false;
    3bea:	movs	r0, #0
}
    3bec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3bf0:	movs	r3, #29
    3bf2:	strb	r3, [r4, #23]
    3bf4:	b.n	3be0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    3bf6:	mov	r2, r9
    3bf8:	mov	r1, r8
    3bfa:	mov	r0, r7
    3bfc:	bl	4e38 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    3c00:	strb	r0, [r4, #25]
    3c02:	cbz	r0, 3c0a <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3c04:	movs	r3, #36	; 0x24
    3c06:	strb	r3, [r4, #23]
    3c08:	b.n	3be0 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3c0a:	mov	r0, r7
    3c0c:	bl	4e20 <SdSpiArduinoDriver::receive()>
    3c10:	mov	r0, r7
    3c12:	bl	4e20 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    3c16:	movs	r0, #1
    3c18:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3c1c:	.word	0x20004a24

00003c20 <SdSpiCard::waitNotBusy(unsigned short)>:
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    3c20:	push	{r3, r4, r5, r6, r7, lr}
    3c22:	ldr	r5, [pc, #40]	; (3c4c <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    3c24:	mov	r7, r1
    3c26:	adds	r6, r0, #4
    3c28:	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    3c2a:	uxth	r4, r4
    3c2c:	b.n	3c38 <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    3c2e:	ldr	r3, [r5, #0]
    3c30:	uxth	r3, r3
    3c32:	subs	r3, r3, r4
    3c34:	cmp	r3, r7
    3c36:	bgt.n	3c46 <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    3c38:	mov	r0, r6
    3c3a:	bl	4e20 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    3c3e:	cmp	r0, #255	; 0xff
    3c40:	bne.n	3c2e <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    3c42:	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    3c44:	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    3c46:	movs	r0, #0
    3c48:	pop	{r3, r4, r5, r6, r7, pc}
    3c4a:	nop
    3c4c:	.word	0x20004a24

00003c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    3c50:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // select card
  if (!m_spiActive) {
    3c54:	ldrb	r3, [r0, #24]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    3c56:	sub	sp, #8
    3c58:	mov	r6, r0
    3c5a:	mov	r8, r1
    3c5c:	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
    3c5e:	cbnz	r3, 3c64 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x14>
    3c60:	bl	3b30 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    3c64:	cmp.w	r8, #0
    3c68:	bne.n	3cc4 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3c6a:	adds	r5, r6, #4
    3c6c:	orr.w	r1, r8, #64	; 0x40
    3c70:	add	r7, sp, #4
    3c72:	add	r4, sp, #8
    3c74:	mov	r0, r5
    3c76:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
    3c7a:	ldrb.w	r1, [r4, #-1]!
    3c7e:	mov	r0, r5
    3c80:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    3c84:	cmp	r4, r7
    3c86:	bne.n	3c7a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2a>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    3c88:	cmp.w	r8, #0
    3c8c:	mov	r0, r5
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3c8e:	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3c92:	ite	eq
    3c94:	moveq	r1, #149	; 0x95
    3c96:	movne	r1, #135	; 0x87
    3c98:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3c9c:	mov	r0, r5
    3c9e:	bl	4e20 <SdSpiArduinoDriver::receive()>
    3ca2:	mov	r0, r5
    3ca4:	bl	4e20 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    3ca8:	strb	r0, [r6, #25]
    3caa:	uxtb	r3, r4
    3cac:	adds	r4, #1
    3cae:	lsrs	r2, r0, #7
    3cb0:	cmp	r3, #9
    3cb2:	ite	hi
    3cb4:	movhi	r3, #0
    3cb6:	andls.w	r3, r2, #1
    3cba:	cmp	r3, #0
    3cbc:	bne.n	3ca2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x52>
  }
  return m_status;
}
    3cbe:	add	sp, #8
    3cc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    3cc4:	mov.w	r1, #300	; 0x12c
    3cc8:	mov	r0, r6
    3cca:	bl	3c20 <SdSpiCard::waitNotBusy(unsigned short)>
    3cce:	b.n	3c6a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>

00003cd0 <SdSpiCard::begin(SdSpiConfig)>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    3cd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd4:	sub	sp, #36	; 0x24
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    3cd6:	mov.w	sl, #0
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    3cda:	mov	r6, r0
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    3cdc:	adds	r4, r0, #4
    3cde:	add	r7, sp, #4
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
    3ce0:	strb.w	sl, [r0, #23]
  m_type = 0;
    3ce4:	strb.w	sl, [r0, #26]
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    3ce8:	movs	r5, #10
    3cea:	ldr.w	r9, [pc, #428]	; 3e98 <SdSpiCard::begin(SdSpiConfig)+0x1c8>
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiConfig spiConfig) {
    3cee:	stmia.w	r7, {r1, r2, r3}
    3cf2:	ldrb.w	r0, [sp, #4]
    3cf6:	ldr	r3, [sp, #8]
  SdMillis_t t0 = SysCall::curTimeMS();
  m_errorCode = SD_CARD_ERROR_NONE;
  m_type = 0;
  m_csPin = spiConfig.csPin;
    3cf8:	strb	r0, [r6, #22]
    3cfa:	str	r3, [sp, #0]
    3cfc:	ldrb.w	r8, [sp, #5]
    3d00:	ldr.w	fp, [r9]
  if (!m_spiDriverPtr) {
    error(SD_CARD_ERROR_INVALID_CARD_CONFIG);
    goto fail;
  }
#endif  // SPI_DRIVER_SELECT
  sdCsInit(m_csPin);
    3d04:	bl	4ebc <sdCsInit(unsigned char)>
    3d08:	ldrb	r0, [r6, #22]
    3d0a:	movs	r1, #1
    3d0c:	bl	4ec4 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    3d10:	ldr	r1, [pc, #380]	; (3e90 <SdSpiCard::begin(SdSpiConfig)+0x1c0>)
    3d12:	movs	r2, #7
    3d14:	add	r3, sp, #20
    3d16:	str	r1, [r6, #8]
    3d18:	str	r2, [r6, #12]
    3d1a:	ldmia.w	r7, {r0, r1, r2}
    3d1e:	stmia.w	r3, {r0, r1, r2}
#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
    3d22:	mov	r0, r4
    3d24:	ldmia	r3, {r1, r2, r3}
    3d26:	bl	4d94 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    3d2a:	mvn.w	r3, r8
    3d2e:	mov	r0, r6
  m_spiActive = false;
    3d30:	strb.w	sl, [r6, #24]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    3d34:	ubfx	r3, r3, #7, #1
  m_spiActive = false;
  m_curState = IDLE_STATE;
    3d38:	strb.w	sl, [r6, #20]
  spiUnselect();
  spiSetSckSpeed(1000UL*SD_MAX_INIT_RATE_KHZ);
  spiBegin(spiConfig);
  uint32_t arg;
#if ENABLE_DEDICATED_SPI
  m_sharedSpi = !(spiConfig.options & DEDICATED_SPI);
    3d3c:	strb	r3, [r6, #21]
    3d3e:	bl	3b30 <SdSpiCard::spiStart() [clone .part.6] [clone .constprop.23]>
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    3d42:	ldrb	r0, [r6, #22]
    3d44:	movs	r1, #1
    3d46:	bl	4ec4 <sdCsWrite(unsigned char, bool)>
    3d4a:	subs	r5, #1
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3d4c:	movs	r1, #255	; 0xff
    3d4e:	mov	r0, r4
    3d50:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>

  spiStart();

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
    3d54:	ands.w	r5, r5, #255	; 0xff
    3d58:	bne.n	3d4a <SdSpiCard::begin(SdSpiConfig)+0x7a>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    3d5a:	mov	r1, r5
    3d5c:	ldrb	r0, [r6, #22]
    3d5e:	movs	r7, #10
    3d60:	bl	4ec4 <sdCsWrite(unsigned char, bool)>
  spiSelect();
  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    3d64:	movs	r2, #0
    3d66:	mov	r0, r6
    3d68:	mov	r1, r2
    3d6a:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3d6e:	cmp	r0, #1
    3d70:	mov	r5, r0
    3d72:	beq.n	3daa <SdSpiCard::begin(SdSpiConfig)+0xda>
    3d74:	subs	r3, r7, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
    3d76:	ands.w	r7, r3, #255	; 0xff
    3d7a:	beq.n	3d94 <SdSpiCard::begin(SdSpiConfig)+0xc4>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    3d7c:	movs	r1, #253	; 0xfd
    3d7e:	mov	r0, r4
    3d80:	mov.w	r5, #520	; 0x208
    3d84:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3d88:	mov	r0, r4
    3d8a:	bl	4e20 <SdSpiArduinoDriver::receive()>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
    3d8e:	subs	r5, #1
    3d90:	bne.n	3d88 <SdSpiCard::begin(SdSpiConfig)+0xb8>
    3d92:	b.n	3d64 <SdSpiCard::begin(SdSpiConfig)+0x94>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3d94:	movs	r3, #1
    3d96:	strb	r3, [r6, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3d98:	ldrb	r0, [r6, #24]
    3d9a:	cbz	r0, 3da4 <SdSpiCard::begin(SdSpiConfig)+0xd4>
    3d9c:	mov	r0, r6
    3d9e:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiSetSckSpeed(spiConfig.maxSck);
  return true;

fail:
  spiStop();
  return false;
    3da2:	movs	r0, #0
}
    3da4:	add	sp, #36	; 0x24
    3da6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    goto fail;
  }
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    3daa:	mov.w	r2, #426	; 0x1aa
    3dae:	movs	r1, #8
    3db0:	mov	r0, r6
    3db2:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3db6:	lsls	r3, r0, #29
    3db8:	bmi.n	3dda <SdSpiCard::begin(SdSpiConfig)+0x10a>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    3dba:	movs	r3, #2
    3dbc:	movs	r5, #4
    3dbe:	strb	r3, [r6, #26]
    3dc0:	subs	r5, #1
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3dc2:	mov	r0, r4
    3dc4:	bl	4e20 <SdSpiArduinoDriver::receive()>
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
    3dc8:	strb	r0, [r6, #25]
#endif  // USE_SD_CRC

  // check SD version
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    type(SD_CARD_TYPE_SD2);
    for (uint8_t i = 0; i < 4; i++) {
    3dca:	ands.w	r5, r5, #255	; 0xff
    3dce:	bne.n	3dc0 <SdSpiCard::begin(SdSpiConfig)+0xf0>
      m_status = spiReceive();
    }
    if (m_status != 0XAA) {
    3dd0:	cmp	r0, #170	; 0xaa
    3dd2:	beq.n	3ddc <SdSpiCard::begin(SdSpiConfig)+0x10c>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3dd4:	movs	r3, #6
    3dd6:	strb	r3, [r6, #23]
    3dd8:	b.n	3d98 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    3dda:	strb	r5, [r6, #26]
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    3ddc:	ldr	r3, [r6, #0]
    3dde:	ldr	r7, [pc, #180]	; (3e94 <SdSpiCard::begin(SdSpiConfig)+0x1c4>)
    3de0:	ldr	r3, [r3, #64]	; 0x40
    3de2:	cmp	r3, r7
    3de4:	bne.n	3e46 <SdSpiCard::begin(SdSpiConfig)+0x176>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    3de6:	ldrb	r0, [r6, #26]
    3de8:	cmp	r0, #2
    3dea:	ite	eq
    3dec:	moveq.w	r5, #1073741824	; 0x40000000
    3df0:	movne	r5, #0
    3df2:	b.n	3e02 <SdSpiCard::begin(SdSpiConfig)+0x132>
    3df4:	ldr.w	r3, [r9]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
    3df8:	uxth	r3, r3
    3dfa:	subs	r3, r3, r2
    3dfc:	cmp.w	r3, #2000	; 0x7d0
    3e00:	bgt.n	3e4c <SdSpiCard::begin(SdSpiConfig)+0x17c>
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    3e02:	movs	r2, #0
    3e04:	movs	r1, #55	; 0x37
    3e06:	mov	r0, r6
    3e08:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    3e0c:	mov	r2, r5
    3e0e:	movs	r1, #41	; 0x29
    3e10:	mov	r0, r6
    3e12:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3e16:	uxth.w	r2, fp
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    3e1a:	cmp	r0, #0
    3e1c:	bne.n	3df4 <SdSpiCard::begin(SdSpiConfig)+0x124>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    3e1e:	ldr	r3, [r6, #0]
    3e20:	ldr	r3, [r3, #64]	; 0x40
    3e22:	cmp	r3, r7
    3e24:	bne.n	3e52 <SdSpiCard::begin(SdSpiConfig)+0x182>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    3e26:	ldrb	r0, [r6, #26]
    3e28:	cmp	r0, #2
    3e2a:	beq.n	3e58 <SdSpiCard::begin(SdSpiConfig)+0x188>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3e2c:	ldrb	r3, [r6, #24]
    3e2e:	cbz	r3, 3e36 <SdSpiCard::begin(SdSpiConfig)+0x166>
    3e30:	mov	r0, r6
    3e32:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3e36:	movs	r3, #7
    3e38:	ldr	r2, [sp, #0]
      spiReceive();
    }
  }
  spiStop();
  spiSetSckSpeed(spiConfig.maxSck);
  return true;
    3e3a:	movs	r0, #1
    3e3c:	str	r2, [r6, #8]
    3e3e:	str	r3, [r6, #12]

fail:
  spiStop();
  return false;
}
    3e40:	add	sp, #36	; 0x24
    3e42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
  } else {
    type(SD_CARD_TYPE_SD1);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    3e46:	mov	r0, r6
    3e48:	blx	r3
    3e4a:	b.n	3de8 <SdSpiCard::begin(SdSpiConfig)+0x118>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3e4c:	movs	r3, #23
    3e4e:	strb	r3, [r6, #23]
    3e50:	b.n	3d98 <SdSpiCard::begin(SdSpiConfig)+0xc8>
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);

  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    3e52:	mov	r0, r6
    3e54:	blx	r3
    3e56:	b.n	3e28 <SdSpiCard::begin(SdSpiConfig)+0x158>
    if (cardCommand(CMD58, 0)) {
    3e58:	movs	r2, #0
    3e5a:	movs	r1, #58	; 0x3a
    3e5c:	mov	r0, r6
    3e5e:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3e62:	cbz	r0, 3e6a <SdSpiCard::begin(SdSpiConfig)+0x19a>
    3e64:	movs	r3, #18
    3e66:	strb	r3, [r6, #23]
    3e68:	b.n	3d98 <SdSpiCard::begin(SdSpiConfig)+0xc8>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3e6a:	mov	r0, r4
    3e6c:	bl	4e20 <SdSpiArduinoDriver::receive()>
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
    3e70:	and.w	r0, r0, #192	; 0xc0
    3e74:	cmp	r0, #192	; 0xc0
    3e76:	bne.n	3e7c <SdSpiCard::begin(SdSpiConfig)+0x1ac>
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
  }
  void type(uint8_t value) {
    m_type = value;
    3e78:	movs	r3, #3
    3e7a:	strb	r3, [r6, #26]
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    3e7c:	mov	r0, r4
    3e7e:	bl	4e20 <SdSpiArduinoDriver::receive()>
    3e82:	mov	r0, r4
    3e84:	bl	4e20 <SdSpiArduinoDriver::receive()>
    3e88:	mov	r0, r4
    3e8a:	bl	4e20 <SdSpiArduinoDriver::receive()>
    3e8e:	b.n	3e2c <SdSpiCard::begin(SdSpiConfig)+0x15c>
    3e90:	.word	0x00061a80
    3e94:	.word	0x00003a91
    3e98:	.word	0x20004a24

00003e9c <SdSpiCard::readOCR(unsigned long*)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    3e9c:	push	{r3, r4, r5, r6, r7, lr}
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    3e9e:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    3ea0:	mov	r5, r0
    3ea2:	mov	r6, r1
  uint8_t *p = reinterpret_cast<uint8_t*>(ocr);
  syncDevice();
    3ea4:	ldr	r3, [r3, #20]
    3ea6:	blx	r3
  if (cardCommand(CMD58, 0)) {
    3ea8:	mov	r0, r5
    3eaa:	movs	r2, #0
    3eac:	movs	r1, #58	; 0x3a
    3eae:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3eb2:	cbnz	r0, 3ed0 <SdSpiCard::readOCR(unsigned long*)+0x34>
    3eb4:	adds	r7, r5, #4
    3eb6:	adds	r4, r6, #4
    3eb8:	mov	r0, r7
    3eba:	bl	4e20 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    3ebe:	strb.w	r0, [r4, #-1]!
  syncDevice();
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    3ec2:	cmp	r6, r4
    3ec4:	bne.n	3eb8 <SdSpiCard::readOCR(unsigned long*)+0x1c>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3ec6:	ldrb	r4, [r5, #24]
    3ec8:	cbnz	r4, 3ee6 <SdSpiCard::readOCR(unsigned long*)+0x4a>
    3eca:	movs	r4, #1
  return true;

fail:
  spiStop();
  return false;
}
    3ecc:	mov	r0, r4
    3ece:	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    3ed0:	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3ed2:	ldrb	r4, [r5, #24]
    3ed4:	strb	r3, [r5, #23]
    3ed6:	cmp	r4, #0
    3ed8:	beq.n	3ecc <SdSpiCard::readOCR(unsigned long*)+0x30>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    3eda:	movs	r4, #0
    3edc:	mov	r0, r5
    3ede:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    3ee2:	mov	r0, r4
    3ee4:	pop	{r3, r4, r5, r6, r7, pc}
    3ee6:	mov	r0, r5
    3ee8:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3eec:	mov	r0, r4
    3eee:	pop	{r3, r4, r5, r6, r7, pc}

00003ef0 <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3ef0:	ldr	r3, [r0, #0]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    3ef2:	push	{r4, r5, r6, lr}
    3ef4:	mov	r4, r0
    3ef6:	mov	r5, r1
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3ef8:	ldr	r3, [r3, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    3efa:	mov	r6, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  syncDevice();
    3efc:	blx	r3
  if (cardCommand(cmd, 0)) {
    3efe:	mov	r1, r5
    3f00:	mov	r0, r4
    3f02:	movs	r2, #0
    3f04:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    3f08:	cbz	r0, 3f1c <SdSpiCard::readRegister(unsigned char, void*)+0x2c>
    3f0a:	movs	r3, #27
    3f0c:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3f0e:	ldrb	r0, [r4, #24]
    3f10:	cbz	r0, 3f1a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    3f12:	mov	r0, r4
    3f14:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    3f18:	movs	r0, #0
}
    3f1a:	pop	{r4, r5, r6, pc}
  syncDevice();
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    3f1c:	mov	r1, r6
    3f1e:	movs	r2, #16
    3f20:	mov	r0, r4
    3f22:	bl	3bac <SdSpiCard::readData(unsigned char*, unsigned int)>
    3f26:	cmp	r0, #0
    3f28:	beq.n	3f0e <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    3f2a:	ldrb	r5, [r4, #24]
    3f2c:	cmp	r5, #0
    3f2e:	beq.n	3f1a <SdSpiCard::readRegister(unsigned char, void*)+0x2a>
    3f30:	mov	r0, r4
    3f32:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    3f36:	mov	r0, r5
    3f38:	pop	{r4, r5, r6, pc}
    3f3a:	nop

00003f3c <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    3f3c:	mov	r2, r1
    3f3e:	movs	r1, #9
    3f40:	b.w	3ef0 <SdSpiCard::readRegister(unsigned char, void*)>

00003f44 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    3f44:	mov	r2, r1
    3f46:	movs	r1, #10
    3f48:	b.w	3ef0 <SdSpiCard::readRegister(unsigned char, void*)>

00003f4c <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3f4c:	ldr	r3, [r0, #0]
    3f4e:	ldr	r2, [pc, #144]	; (3fe0 <SdSpiCard::sectorCount()+0x94>)
    3f50:	ldr	r3, [r3, #52]	; 0x34
    3f52:	cmp	r3, r2
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    3f54:	push	{r4, r5, lr}
    3f56:	sub	sp, #20
    3f58:	bne.n	3fba <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    3f5a:	mov	r2, sp
    3f5c:	movs	r1, #9
    3f5e:	bl	3ef0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3f62:	cbz	r0, 3f74 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    3f64:	ldrb.w	r3, [sp]
    3f68:	ands.w	r3, r3, #192	; 0xc0
    3f6c:	beq.n	3f78 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    3f6e:	cmp	r3, #64	; 0x40
    3f70:	beq.n	3fc0 <SdSpiCard::sectorCount()+0x74>
    3f72:	movs	r0, #0
}
    3f74:	add	sp, #20
    3f76:	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    3f78:	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    3f7c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3f80:	ldrb.w	r2, [sp, #7]
    3f84:	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    3f88:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3f8c:	and.w	r3, r3, #3
    3f90:	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    3f92:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3f96:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    3f98:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    3f9c:	orr.w	r0, r4, r0, lsr #7
    3fa0:	and.w	r1, r1, #15
    3fa4:	orr.w	r3, r2, r3, lsl #10
    3fa8:	add	r0, r1
    3faa:	orr.w	r3, r3, r5, lsr #6
    3fae:	subs	r0, #7
    3fb0:	adds	r3, #1
    3fb2:	lsl.w	r0, r3, r0
    3fb6:	add	sp, #20
    3fb8:	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    3fba:	mov	r1, sp
    3fbc:	blx	r3
    3fbe:	b.n	3f62 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    3fc0:	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    3fc4:	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    3fc8:	adds	r2, r3, #1
    3fca:	ldrb.w	r0, [sp, #8]
    3fce:	and.w	r3, r1, #63	; 0x3f
    3fd2:	add.w	r3, r2, r3, lsl #16
    3fd6:	add.w	r0, r3, r0, lsl #8
    3fda:	lsls	r0, r0, #10
}
    3fdc:	add	sp, #20
    3fde:	pop	{r4, r5, pc}
    3fe0:	.word	0x00003f3d

00003fe4 <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    3fe4:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    3fe6:	mov	r2, r1
    3fe8:	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    3fea:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    3fec:	sub	sp, #12
    3fee:	ldr	r5, [pc, #64]	; (4030 <SdSpiCard::readStart(unsigned long)+0x4c>)
    3ff0:	mov	r4, r0
    3ff2:	cmp	r3, r5
    3ff4:	bne.n	4028 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    3ff6:	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    3ff8:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    3ffa:	mov.w	r1, #18
    3ffe:	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    4000:	it	ne
    4002:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    4004:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4008:	cbz	r0, 4022 <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    400a:	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    400c:	ldrb	r0, [r4, #24]
    400e:	strb	r3, [r4, #23]
    4010:	cbnz	r0, 4016 <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    4012:	add	sp, #12
    4014:	pop	{r4, r5, pc}
    4016:	mov	r0, r4
    4018:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    401c:	movs	r0, #0
    401e:	add	sp, #12
    4020:	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    4022:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    4024:	add	sp, #12
    4026:	pop	{r4, r5, pc}
    4028:	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    402a:	blx	r3
    402c:	ldr	r2, [sp, #4]
    402e:	b.n	3ff8 <SdSpiCard::readStart(unsigned long)+0x14>
    4030:	.word	0x00003a91

00004034 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    4034:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4038:	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    403a:	ldrb	r3, [r0, #20]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    403c:	mov	r6, r0
    403e:	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4040:	cmp	r3, #1
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    4042:	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4044:	beq.n	4056 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!syncDevice()) {
    4046:	ldr	r3, [r6, #0]
    4048:	mov	r0, r6
    404a:	ldr	r3, [r3, #20]
    404c:	blx	r3
    404e:	cbnz	r0, 4088 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x54>
      return false;
    4050:	movs	r0, #0
    4052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    4056:	ldr	r3, [r0, #16]
    4058:	cmp	r3, r1
    405a:	bne.n	4046 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    405c:	cbz	r7, 4078 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    405e:	movs	r5, #0
    if (!readData(dst, 512)) {
    4060:	mov.w	r2, #512	; 0x200
    4064:	mov	r1, r4
    4066:	mov	r0, r6
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4068:	adds	r5, #1
    406a:	add	r4, r2
    if (!readData(dst, 512)) {
    406c:	bl	3bac <SdSpiCard::readData(unsigned char*, unsigned int)>
    4070:	cmp	r0, #0
    4072:	beq.n	4050 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    4074:	cmp	r7, r5
    4076:	bne.n	4060 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    4078:	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    407a:	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
    407c:	add	r7, r3
    407e:	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    4080:	cbnz	r2, 409c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x68>
    4082:	movs	r0, #1
    4084:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!syncDevice()) {
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
    4088:	mov	r1, r5
    408a:	mov	r0, r6
    408c:	bl	3fe4 <SdSpiCard::readStart(unsigned long)>
    4090:	cmp	r0, #0
    4092:	beq.n	4050 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1c>
      return false;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    4094:	movs	r3, #1
      return false;
    }
    if (!SdSpiCard::readStart(sector)) {
      return false;
    }
    m_curSector = sector;
    4096:	str	r5, [r6, #16]
    m_curState = READ_STATE;
    4098:	strb	r3, [r6, #20]
    409a:	b.n	405c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    409c:	ldr	r3, [r6, #0]
    409e:	mov	r0, r6
    40a0:	ldr	r3, [r3, #20]
      return false;
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
    40a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      return false;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    40a6:	bx	r3

000040a8 <SdSpiCard::readStop()>:
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    40a8:	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    40aa:	movs	r2, #0
    40ac:	movs	r1, #12
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}

//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    40ae:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    40b0:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    40b4:	cbz	r0, 40c2 <SdSpiCard::readStop()+0x1a>
    40b6:	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    40b8:	ldrb	r4, [r5, #24]
    40ba:	strb	r3, [r5, #23]
    40bc:	cbnz	r4, 40d6 <SdSpiCard::readStop()+0x2e>
  return true;

fail:
  spiStop();
  return false;
}
    40be:	mov	r0, r4
    40c0:	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    40c2:	ldrb	r4, [r5, #24]
    40c4:	cbnz	r4, 40cc <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    40c6:	movs	r4, #1

fail:
  spiStop();
  return false;
}
    40c8:	mov	r0, r4
    40ca:	pop	{r3, r4, r5, pc}
    40cc:	mov	r0, r5
    40ce:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    40d2:	mov	r0, r4
    40d4:	pop	{r3, r4, r5, pc}
    40d6:	movs	r4, #0
    40d8:	mov	r0, r5
    40da:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    40de:	mov	r0, r4
    40e0:	pop	{r3, r4, r5, pc}
    40e2:	nop

000040e4 <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    40e4:	ldr	r3, [r0, #0]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    40e6:	mov	r2, r1
    40e8:	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    40ea:	ldr	r3, [r3, #64]	; 0x40
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    40ec:	sub	sp, #12
    40ee:	ldr	r5, [pc, #64]	; (4130 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    40f0:	mov	r4, r0
    40f2:	cmp	r3, r5
    40f4:	bne.n	4128 <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    40f6:	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    40f8:	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    40fa:	mov.w	r1, #25
    40fe:	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    4100:	it	ne
    4102:	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    4104:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    4108:	cbz	r0, 4122 <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    410a:	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    410c:	ldrb	r0, [r4, #24]
    410e:	strb	r3, [r4, #23]
    4110:	cbnz	r0, 4116 <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

fail:
  spiStop();
  return false;
}
    4112:	add	sp, #12
    4114:	pop	{r4, r5, pc}
    4116:	mov	r0, r4
    4118:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    411c:	movs	r0, #0
    411e:	add	sp, #12
    4120:	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    4122:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    4124:	add	sp, #12
    4126:	pop	{r4, r5, pc}
    4128:	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    412a:	blx	r3
    412c:	ldr	r2, [sp, #4]
    412e:	b.n	40f8 <SdSpiCard::writeStart(unsigned long)+0x14>
    4130:	.word	0x00003a91

00004134 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    4134:	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4136:	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    4138:	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    413a:	sub	sp, #20
    413c:	ldr	r7, [pc, #164]	; (41e4 <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    413e:	mov	r4, r0
    4140:	mov	r5, r1
    4142:	mov	r6, r2
    4144:	cmp	r3, r7
    4146:	bne.n	41a0 <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    4148:	mov	r2, sp
    414a:	movs	r1, #9
    414c:	bl	3ef0 <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    4150:	cbz	r0, 4174 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    4152:	ldrb.w	r3, [sp, #10]
    4156:	lsls	r2, r3, #25
    4158:	bpl.n	4184 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    415a:	ldrb	r3, [r4, #26]
    415c:	cmp	r3, #3
    415e:	beq.n	4164 <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    4160:	lsls	r5, r5, #9
    lastSector <<= 9;
    4162:	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    4164:	mov	r2, r5
    4166:	movs	r1, #32
    4168:	mov	r0, r4
    416a:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    416e:	cbz	r0, 41a6 <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4170:	movs	r3, #37	; 0x25
    4172:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4174:	ldrb	r0, [r4, #24]
    4176:	cbz	r0, 4180 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    4178:	mov	r0, r4
    417a:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  spiStop();
  return true;

fail:
  spiStop();
  return false;
    417e:	movs	r0, #0
}
    4180:	add	sp, #20
    4182:	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    4184:	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    4188:	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    418c:	adds	r2, r6, #1
    418e:	lsls	r3, r3, #1
    4190:	orrs	r2, r5
    4192:	orr.w	r3, r3, r1, lsr #7
    4196:	tst	r3, r2
    4198:	beq.n	415a <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    419a:	movs	r3, #38	; 0x26
    419c:	strb	r3, [r4, #23]
    419e:	b.n	4174 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    41a0:	mov	r1, sp
    41a2:	blx	r3
    41a4:	b.n	4150 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    41a6:	mov	r2, r6
    41a8:	movs	r1, #33	; 0x21
    41aa:	mov	r0, r4
    41ac:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    41b0:	cmp	r0, #0
    41b2:	bne.n	4170 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    41b4:	mov	r2, r0
    41b6:	movs	r1, #38	; 0x26
    41b8:	mov	r0, r4
    41ba:	bl	3c50 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    41be:	cmp	r0, #0
    41c0:	bne.n	4170 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    41c2:	movw	r1, #10000	; 0x2710
    41c6:	mov	r0, r4
    41c8:	bl	3c20 <SdSpiCard::waitNotBusy(unsigned short)>
    41cc:	cbnz	r0, 41d4 <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    41ce:	movs	r3, #39	; 0x27
    41d0:	strb	r3, [r4, #23]
    41d2:	b.n	4174 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    41d4:	ldrb	r5, [r4, #24]
    41d6:	cmp	r5, #0
    41d8:	beq.n	4180 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    41da:	mov	r0, r4
    41dc:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    41e0:	mov	r0, r5
    41e2:	b.n	4180 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    41e4:	.word	0x00003f3d

000041e8 <SdSpiCard::writeStop()>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    41e8:	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    41ea:	mov.w	r1, #600	; 0x258
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    41ee:	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    41f0:	bl	3c20 <SdSpiCard::waitNotBusy(unsigned short)>
    41f4:	mov	r6, r0
    41f6:	cbnz	r0, 4210 <SdSpiCard::writeStop()+0x28>
    41f8:	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    41fa:	ldrb	r4, [r5, #24]
    41fc:	strb	r3, [r5, #23]
    41fe:	cbnz	r4, 4204 <SdSpiCard::writeStop()+0x1c>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    4200:	mov	r0, r4
    4202:	pop	{r4, r5, r6, pc}
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    4204:	mov	r4, r6
    4206:	mov	r0, r5
    4208:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
}
    420c:	mov	r0, r4
    420e:	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    4210:	movs	r1, #253	; 0xfd
    4212:	adds	r0, r5, #4
    4214:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4218:	ldrb	r4, [r5, #24]
    421a:	cbnz	r4, 4222 <SdSpiCard::writeStop()+0x3a>
    421c:	mov	r4, r6

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    421e:	mov	r0, r4
    4220:	pop	{r4, r5, r6, pc}
    4222:	mov	r0, r5
    4224:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
    4228:	b.n	4200 <SdSpiCard::writeStop()+0x18>
    422a:	nop

0000422c <SdSpiCard::syncDevice()>:
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    422c:	push	{r4, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    422e:	ldrb	r3, [r0, #20]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
    4230:	mov	r4, r0
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    4232:	cmp	r3, #1
    4234:	beq.n	4242 <SdSpiCard::syncDevice()+0x16>
    if (!SdSpiCard::readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    4236:	cmp	r3, #2
    4238:	beq.n	424e <SdSpiCard::syncDevice()+0x22>
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    423a:	movs	r3, #0
#endif  // ENABLE_DEDICATED_SPI
  return true;
    423c:	movs	r0, #1
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
      return false;
    }
  }
  m_curState = IDLE_STATE;
    423e:	strb	r3, [r4, #20]
#endif  // ENABLE_DEDICATED_SPI
  return true;
    4240:	pop	{r4, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    if (!SdSpiCard::readStop()) {
    4242:	bl	40a8 <SdSpiCard::readStop()>
    4246:	cmp	r0, #0
    4248:	bne.n	423a <SdSpiCard::syncDevice()+0xe>
      return false;
    424a:	movs	r0, #0
    424c:	pop	{r4, pc}
    }
  } else if (m_curState == WRITE_STATE) {
    if (!SdSpiCard::writeStop()) {
    424e:	bl	41e8 <SdSpiCard::writeStop()>
    4252:	cmp	r0, #0
    4254:	bne.n	423a <SdSpiCard::syncDevice()+0xe>
    4256:	b.n	424a <SdSpiCard::syncDevice()+0x1e>

00004258 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    4258:	push	{r4, r5, r6, lr}
    425a:	adds	r4, r0, #4
    425c:	mov	r6, r2
    425e:	mov	r5, r0
    4260:	mov	r0, r4
    4262:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    4266:	mov.w	r2, #512	; 0x200
    426a:	mov	r1, r6
    426c:	mov	r0, r4
    426e:	bl	4e6c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    4272:	mov	r0, r4
    4274:	movs	r1, #255	; 0xff
    4276:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
    427a:	mov	r0, r4
    427c:	movs	r1, #255	; 0xff
    427e:	bl	4e58 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    4282:	mov	r0, r4
    4284:	bl	4e20 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    4288:	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    428c:	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    428e:	cmp	r3, #5
    4290:	beq.n	42a6 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    4292:	movs	r3, #31
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    4294:	ldrb	r0, [r5, #24]
    4296:	strb	r3, [r5, #23]
    4298:	cbnz	r0, 429c <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

fail:
  spiStop();
  return false;
}
    429a:	pop	{r4, r5, r6, pc}
    429c:	mov	r0, r5
    429e:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    42a2:	movs	r0, #0
    42a4:	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    42a6:	movs	r0, #1

fail:
  spiStop();
  return false;
}
    42a8:	pop	{r4, r5, r6, pc}
    42aa:	nop

000042ac <SdSpiCard::writeData(unsigned char const*)>:
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    42ac:	push	{r3, r4, r5, lr}
    42ae:	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    42b0:	mov.w	r1, #600	; 0x258
  spiStop();
  return false;
#endif  // ENABLE_DEDICATED_SPI
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    42b4:	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    42b6:	bl	3c20 <SdSpiCard::waitNotBusy(unsigned short)>
    42ba:	cbnz	r0, 42ce <SdSpiCard::writeData(unsigned char const*)+0x22>
    42bc:	movs	r3, #35	; 0x23
    42be:	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    42c0:	ldrb	r0, [r4, #24]
    42c2:	cbz	r0, 42cc <SdSpiCard::writeData(unsigned char const*)+0x20>
    42c4:	mov	r0, r4
    42c6:	bl	3b48 <SdSpiCard::spiStop() [clone .part.7] [clone .constprop.26]>
  }
  return true;

fail:
  spiStop();
  return false;
    42ca:	movs	r0, #0
}
    42cc:	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    42ce:	mov	r2, r5
    42d0:	movs	r1, #252	; 0xfc
    42d2:	mov	r0, r4
    42d4:	bl	4258 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    42d8:	cmp	r0, #0
    42da:	beq.n	42c0 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

fail:
  spiStop();
  return false;
}
    42dc:	pop	{r3, r4, r5, pc}
    42de:	nop

000042e0 <isBusyCommandComplete()>:
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    42e0:	ldr	r3, [pc, #12]	; (42f0 <isBusyCommandComplete()+0x10>)
    42e2:	ldr	r0, [pc, #16]	; (42f4 <isBusyCommandComplete()+0x14>)
    42e4:	ldr	r3, [r3, #48]	; 0x30
    42e6:	ands	r0, r3
}
    42e8:	clz	r0, r0
    42ec:	lsrs	r0, r0, #5
    42ee:	bx	lr
    42f0:	.word	0x402c0000
    42f4:	.word	0x000f0001

000042f8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    42f8:	ldr	r3, [pc, #8]	; (4304 <isBusyCommandInhibit()+0xc>)
    42fa:	ldr	r0, [r3, #36]	; 0x24
}
    42fc:	and.w	r0, r0, #1
    4300:	bx	lr
    4302:	nop
    4304:	.word	0x402c0000

00004308 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    4308:	ldr	r3, [pc, #4]	; (4310 <isBusyDMA()+0x8>)
    430a:	ldrb	r0, [r3, #0]
}
    430c:	bx	lr
    430e:	nop
    4310:	.word	0x20003864

00004314 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    4314:	ldr	r3, [pc, #12]	; (4324 <isBusyFifoRead()+0x10>)
    4316:	ldr	r0, [r3, #36]	; 0x24
    4318:	eor.w	r0, r0, #2048	; 0x800
}
    431c:	ubfx	r0, r0, #11, #1
    4320:	bx	lr
    4322:	nop
    4324:	.word	0x402c0000

00004328 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    4328:	ldr	r3, [pc, #12]	; (4338 <isBusyFifoWrite()+0x10>)
    432a:	ldr	r0, [r3, #36]	; 0x24
    432c:	eor.w	r0, r0, #1024	; 0x400
}
    4330:	ubfx	r0, r0, #10, #1
    4334:	bx	lr
    4336:	nop
    4338:	.word	0x402c0000

0000433c <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    433c:	ldr	r3, [pc, #12]	; (434c <isBusyTransferComplete()+0x10>)
    433e:	ldr	r0, [pc, #16]	; (4350 <isBusyTransferComplete()+0x14>)
    4340:	ldr	r3, [r3, #48]	; 0x30
    4342:	ands	r0, r3
}
    4344:	clz	r0, r0
    4348:	lsrs	r0, r0, #5
    434a:	bx	lr
    434c:	.word	0x402c0000
    4350:	.word	0x117f0002

00004354 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    4354:	ldr	r3, [pc, #4]	; (435c <SdioCard::errorCode() const+0x8>)
}
    4356:	ldrb	r0, [r3, #0]
    4358:	bx	lr
    435a:	nop
    435c:	.word	0x20000854

00004360 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    4360:	ldr	r3, [pc, #4]	; (4368 <SdioCard::errorData() const+0x8>)
    4362:	ldr	r0, [r3, #0]
}
    4364:	bx	lr
    4366:	nop
    4368:	.word	0x2000384c

0000436c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    436c:	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    436e:	ldr	r4, [pc, #20]	; (4384 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    4370:	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    4372:	ldmia	r4!, {r0, r1, r2, r3}
    4374:	str	r0, [r5, #0]
  return true;
}
    4376:	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    4378:	str	r1, [r5, #4]
    437a:	str	r2, [r5, #8]
    437c:	str	r3, [r5, #12]
  return true;
}
    437e:	pop	{r4, r5}
    4380:	bx	lr
    4382:	nop
    4384:	.word	0x2000382c

00004388 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    4388:	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    438a:	ldr	r4, [pc, #20]	; (43a0 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    438c:	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    438e:	ldmia	r4!, {r0, r1, r2, r3}
    4390:	str	r0, [r5, #0]
  return true;
}
    4392:	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    4394:	str	r1, [r5, #4]
    4396:	str	r2, [r5, #8]
    4398:	str	r3, [r5, #12]
  return true;
}
    439a:	pop	{r4, r5}
    439c:	bx	lr
    439e:	nop
    43a0:	.word	0x20003854

000043a4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    43a4:	ldr	r3, [pc, #8]	; (43b0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    43a6:	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    43a8:	ldr	r3, [r3, #0]
    43aa:	str	r3, [r1, #0]
  return true;
}
    43ac:	bx	lr
    43ae:	nop
    43b0:	.word	0x20003844

000043b4 <SdioCard::~SdioCard()>:
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    43b4:	bx	lr
    43b6:	nop

000043b8 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    43b8:	push	{r3, r4, r5, r6, r7, lr}
    43ba:	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    43bc:	ldr	r7, [pc, #28]	; (43dc <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    43be:	bl	98f8 <micros>
    43c2:	mov	r6, r0
    43c4:	b.n	43d0 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    43c6:	bl	98f8 <micros>
    43ca:	subs	r0, r0, r6
    43cc:	cmp	r0, r7
    43ce:	bhi.n	43d8 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    43d0:	blx	r5
    43d2:	mov	r4, r0
    43d4:	cmp	r0, #0
    43d6:	bne.n	43c6 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    43d8:	mov	r0, r4
    43da:	pop	{r3, r4, r5, r6, r7, pc}
    43dc:	.word	0x000f4240

000043e0 <yieldTimeout(bool (*)())>:
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    43e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    43e4:	ldr.w	r8, [pc, #64]	; 4428 <yieldTimeout(bool (*)())+0x48>
  SDHC_PROCTL = proctl;
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    43e8:	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    43ea:	ldr	r7, [pc, #56]	; (4424 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    43ec:	str.w	r0, [r8]
  uint32_t m = micros();
    43f0:	bl	98f8 <micros>
    43f4:	mov	r6, r0
    43f6:	b.n	4406 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    43f8:	bl	98f8 <micros>
    43fc:	subs	r0, r0, r6
    43fe:	cmp	r0, r7
    4400:	bhi.n	4418 <yieldTimeout(bool (*)())+0x38>
  Particle.process();
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    4402:	bl	9da0 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    4406:	blx	r5
    4408:	mov	r4, r0
    440a:	cmp	r0, #0
    440c:	bne.n	43f8 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    440e:	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    4412:	mov	r0, r4
    4414:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    4418:	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    441a:	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    441c:	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    4420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4424:	.word	0x000f4240
    4428:	.word	0x2000383c

0000442c <SdioCard::~SdioCard()>:
    442c:	push	{r4, lr}
    442e:	mov	r4, r0
    4430:	movs	r1, #12
    4432:	bl	a12c <operator delete(void*, unsigned int)>
    4436:	mov	r0, r4
    4438:	pop	{r4, pc}
    443a:	nop

0000443c <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    443c:	ldr	r3, [pc, #20]	; (4454 <SdioCard::type() const+0x18>)
    443e:	ldrb	r3, [r3, #0]
    4440:	cbz	r3, 4450 <SdioCard::type() const+0x14>
    4442:	ldr	r3, [pc, #20]	; (4458 <SdioCard::type() const+0x1c>)
    4444:	ldrb	r3, [r3, #0]
    4446:	cmp	r3, #0
    4448:	ite	ne
    444a:	movne	r0, #3
    444c:	moveq	r0, #2
    444e:	bx	lr
    4450:	movs	r0, #1
}
    4452:	bx	lr
    4454:	.word	0x20003828
    4458:	.word	0x20003840

0000445c <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    445c:	push	{r3, r4, r5, lr}
    445e:	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    4460:	ldr	r0, [pc, #80]	; (44b4 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    4462:	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    4464:	bl	43b8 <waitTimeout(bool (*)())>
    4468:	cbnz	r0, 44ae <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    446a:	ldr	r3, [pc, #76]	; (44b8 <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    446c:	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    446e:	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    4470:	bpl.n	4482 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    4472:	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    4474:	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    4476:	bic.w	r1, r1, #255	; 0xff
    447a:	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    447c:	ldr	r1, [r3, #72]	; 0x48
    447e:	orrs	r2, r1
    4480:	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    4482:	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    4486:	ldr	r5, [pc, #48]	; (44b8 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    4488:	ldr	r0, [pc, #48]	; (44bc <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    448a:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    448c:	bl	43b8 <waitTimeout(bool (*)())>
    4490:	cbnz	r0, 44ae <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    4492:	ldr	r2, [r5, #48]	; 0x30
    4494:	ldr	r3, [pc, #40]	; (44c0 <cardCommand(unsigned long, unsigned long)+0x64>)
    4496:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4498:	ldr	r2, [r3, #0]
    449a:	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    449c:	ldr	r2, [r3, #0]
    449e:	lsls	r2, r2, #31
    44a0:	bpl.n	44ae <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    44a2:	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    44a4:	tst.w	r3, #983040	; 0xf0000
    44a8:	bne.n	44ae <cardCommand(unsigned long, unsigned long)+0x52>
    44aa:	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    44ac:	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    44ae:	movs	r0, #0
    44b0:	pop	{r3, r4, r5, pc}
    44b2:	nop
    44b4:	.word	0x000042f9
    44b8:	.word	0x402c0000
    44bc:	.word	0x000042e1
    44c0:	.word	0x2000384c

000044c4 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    44c4:	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    44c6:	ldr	r3, [pc, #16]	; (44d8 <SdioCard::status()+0x14>)
    44c8:	ldr	r0, [pc, #16]	; (44dc <SdioCard::status()+0x18>)
    44ca:	ldr	r1, [r3, #0]
    44cc:	bl	445c <cardCommand(unsigned long, unsigned long)>
    44d0:	cbz	r0, 44d6 <SdioCard::status()+0x12>
    44d2:	ldr	r3, [pc, #12]	; (44e0 <SdioCard::status()+0x1c>)
    44d4:	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    44d6:	pop	{r3, pc}
    44d8:	.word	0x20003848
    44dc:	.word	0x0d1a0000
    44e0:	.word	0x402c0000

000044e4 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    44e4:	push	{r3, lr}
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    44e6:	ldr	r3, [pc, #28]	; (4504 <isBusyCMD13()+0x20>)
    44e8:	ldr	r0, [pc, #28]	; (4508 <isBusyCMD13()+0x24>)
    44ea:	ldr	r1, [r3, #0]
    44ec:	bl	445c <cardCommand(unsigned long, unsigned long)>
    44f0:	cbz	r0, 4500 <isBusyCMD13()+0x1c>
    // Caller will timeout.
    return true;
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
    44f2:	ldr	r3, [pc, #24]	; (450c <isBusyCMD13()+0x28>)
    44f4:	ldr	r0, [r3, #16]
    44f6:	eor.w	r0, r0, #256	; 0x100
    44fa:	ubfx	r0, r0, #8, #1
    44fe:	pop	{r3, pc}
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  if (!cardCommand(CMD13_XFERTYP, m_rca)) {
    // Caller will timeout.
    return true;
    4500:	movs	r0, #1
  }
  return !(SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA);
}
    4502:	pop	{r3, pc}
    4504:	.word	0x20003848
    4508:	.word	0x0d1a0000
    450c:	.word	0x402c0000

00004510 <SdioCard::isBusy()>:
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    4510:	ldr	r3, [pc, #16]	; (4524 <SdioCard::isBusy()+0x14>)
    4512:	ldr	r3, [r3, #0]
    4514:	cbz	r3, 4518 <SdioCard::isBusy()+0x8>
    4516:	bx	r3
    4518:	ldr	r3, [pc, #12]	; (4528 <SdioCard::isBusy()+0x18>)
    451a:	ldrb	r0, [r3, #0]
    451c:	cbnz	r0, 4520 <SdioCard::isBusy()+0x10>
}
    451e:	bx	lr
uint32_t SdioCard::errorLine() const {
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    4520:	b.w	44e4 <isBusyCMD13()>
    4524:	.word	0x2000383c
    4528:	.word	0x20003850

0000452c <waitDmaStatus() [clone .part.7]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    452c:	ldr	r3, [pc, #20]	; (4544 <waitDmaStatus() [clone .part.7]+0x18>)
    452e:	ldr	r0, [r3, #0]
    4530:	ands.w	r0, r0, #2
    4534:	beq.n	4542 <waitDmaStatus() [clone .part.7]+0x16>
    4536:	ldr	r3, [r3, #0]
    4538:	ldr	r0, [pc, #12]	; (4548 <waitDmaStatus() [clone .part.7]+0x1c>)
    453a:	ands	r0, r3
    453c:	clz	r0, r0
    4540:	lsrs	r0, r0, #5
}
    4542:	bx	lr
    4544:	.word	0x2000384c
    4548:	.word	0x117f0000

0000454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    454c:	push	{r3, r4, r5, r6, r7, lr}
    454e:	ands.w	r4, r2, #3
    4552:	it	ne
    4554:	movne	r4, #1
    4556:	cmp	r3, #0
    4558:	it	eq
    455a:	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    455e:	cbz	r4, 4572 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4560:	ldr	r1, [pc, #120]	; (45dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    4562:	movs	r0, #36	; 0x24
  m_errorLine = line;
    4564:	ldr	r3, [pc, #120]	; (45e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    4566:	mov.w	r2, #470	; 0x1d6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    456a:	strb	r0, [r1, #0]
  m_errorLine = line;
    456c:	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    456e:	movs	r0, #0
    4570:	pop	{r3, r4, r5, r6, r7, pc}
    4572:	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    4574:	ldr	r0, [pc, #108]	; (45e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    4576:	mov	r5, r3
    4578:	mov	r7, r1
    457a:	mov	r4, r2
    457c:	bl	43e0 <yieldTimeout(bool (*)())>
    4580:	cbnz	r0, 45c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    4582:	lsls	r3, r5, #16
    4584:	ldr	r2, [pc, #96]	; (45e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    4586:	ldr	r5, [pc, #100]	; (45ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    4588:	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    458c:	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    458e:	ldr	r1, [pc, #96]	; (45f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    4590:	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    4594:	ldr	r3, [pc, #92]	; (45f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    4596:	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    459a:	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    459c:	ldr	r5, [pc, #88]	; (45f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    459e:	ldr	r1, [pc, #92]	; (45fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    45a0:	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    45a2:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    45a4:	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    45a6:	ldrb	r3, [r1, #0]
    45a8:	cbnz	r3, 45d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    45aa:	lsls	r1, r7, #9
    45ac:	mov	r0, r6
    45ae:	bl	445c <cardCommand(unsigned long, unsigned long)>
    45b2:	cmp	r0, #0
    45b4:	beq.n	456e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    45b6:	ldr	r0, [pc, #72]	; (4600 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    45b8:	bl	43e0 <yieldTimeout(bool (*)())>
    45bc:	cmp	r0, #0
    45be:	bne.n	456e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    45c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    45c4:	b.w	452c <waitDmaStatus() [clone .part.7]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    45c8:	ldr	r1, [pc, #16]	; (45dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    45ca:	movs	r0, #10
  m_errorLine = line;
    45cc:	ldr	r3, [pc, #16]	; (45e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    45ce:	movw	r2, #473	; 0x1d9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    45d2:	strb	r0, [r1, #0]
  m_errorLine = line;
    45d4:	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    45d6:	b.n	456e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    45d8:	mov	r1, r7
    45da:	b.n	45ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    45dc:	.word	0x20000854
    45e0:	.word	0x20003868
    45e4:	.word	0x000044e5
    45e8:	.word	0x1fff0000
    45ec:	.word	0x20003864
    45f0:	.word	0x2000384c
    45f4:	.word	0x402c0000
    45f8:	.word	0x117f0002
    45fc:	.word	0x20003840
    4600:	.word	0x00004309

00004604 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    4604:	ldr	r1, [pc, #100]	; (466c <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    4606:	push	{r4, r5, r6}
    4608:	ldrb	r3, [r1, #0]
    460a:	ands.w	r3, r3, #192	; 0xc0
    460e:	beq.n	4634 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    4610:	cmp	r3, #64	; 0x40
    4612:	beq.n	461a <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    4614:	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    4616:	pop	{r4, r5, r6}
    4618:	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    461a:	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    461c:	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    461e:	adds	r2, r3, #1
    4620:	ldrb	r0, [r1, #8]
    4622:	and.w	r3, r4, #63	; 0x3f
    4626:	add.w	r3, r2, r3, lsl #16
    462a:	add.w	r0, r3, r0, lsl #8
    462e:	pop	{r4, r5, r6}
    4630:	lsls	r0, r0, #10
    4632:	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    4634:	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    4636:	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4638:	ldrb	r2, [r1, #7]
    463a:	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    463e:	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4640:	and.w	r3, r3, #3
    4644:	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    4646:	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    4648:	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    464a:	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    464c:	orr.w	r0, r5, r0, lsr #7
    4650:	and.w	r1, r4, #15
    4654:	orr.w	r3, r2, r3, lsl #10
    4658:	add	r0, r1
    465a:	orr.w	r3, r3, r6, lsr #6
    465e:	subs	r0, #7
    4660:	adds	r3, #1
    4662:	pop	{r4, r5, r6}
    4664:	lsl.w	r0, r3, r0
    4668:	bx	lr
    466a:	nop
    466c:	.word	0x20003854

00004670 <SdioCard::erase(unsigned long, unsigned long)>:
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    4670:	ldr	r0, [pc, #176]	; (4724 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4672:	push	{r3, r4, r5, lr}
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    4674:	ldrb	r3, [r0, #10]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    4676:	mov	r5, r2
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    4678:	and.w	r2, r3, #64	; 0x40
    467c:	cbnz	r2, 4696 <SdioCard::erase(unsigned long, unsigned long)+0x26>
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    467e:	and.w	r3, r3, #63	; 0x3f
    4682:	and.w	r4, r2, #255	; 0xff
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    4686:	ldrb	r2, [r0, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    4688:	adds	r0, r5, #1
    468a:	lsls	r3, r3, #1
    468c:	orrs	r0, r1
    468e:	orr.w	r3, r3, r2, lsr #7
    4692:	tst	r3, r0
    4694:	bne.n	46da <SdioCard::erase(unsigned long, unsigned long)+0x6a>
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    4696:	ldr	r3, [pc, #144]	; (4728 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    4698:	ldrb	r3, [r3, #0]
    469a:	cbnz	r3, 46a0 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    469c:	lsls	r1, r1, #9
    lastSector <<= 9;
    469e:	lsls	r5, r5, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    46a0:	ldr	r0, [pc, #136]	; (472c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    46a2:	bl	445c <cardCommand(unsigned long, unsigned long)>
    46a6:	mov	r4, r0
    46a8:	cbnz	r0, 46bc <SdioCard::erase(unsigned long, unsigned long)+0x4c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46aa:	ldr	r1, [pc, #132]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46ac:	movs	r0, #15
  m_errorLine = line;
    46ae:	ldr	r3, [pc, #132]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46b0:	mov.w	r2, #692	; 0x2b4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46b4:	strb	r0, [r1, #0]
  m_errorLine = line;
    46b6:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46b8:	mov	r0, r4
    46ba:	pop	{r3, r4, r5, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    46bc:	mov	r1, r5
    46be:	ldr	r0, [pc, #120]	; (4738 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    46c0:	bl	445c <cardCommand(unsigned long, unsigned long)>
    46c4:	mov	r4, r0
    46c6:	cbnz	r0, 46ec <SdioCard::erase(unsigned long, unsigned long)+0x7c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46c8:	ldr	r1, [pc, #100]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46ca:	movs	r0, #16
  m_errorLine = line;
    46cc:	ldr	r3, [pc, #100]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46ce:	movw	r2, #695	; 0x2b7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46d2:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46d4:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    46d6:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46d8:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46da:	ldr	r1, [pc, #84]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46dc:	movs	r0, #38	; 0x26
  m_errorLine = line;
    46de:	ldr	r3, [pc, #84]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46e0:	mov.w	r2, #684	; 0x2ac
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46e4:	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46e6:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    46e8:	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    46ea:	pop	{r3, r4, r5, pc}
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    46ec:	movs	r1, #0
    46ee:	ldr	r0, [pc, #76]	; (473c <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    46f0:	bl	445c <cardCommand(unsigned long, unsigned long)>
    46f4:	mov	r4, r0
    46f6:	cbnz	r0, 4708 <SdioCard::erase(unsigned long, unsigned long)+0x98>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    46f8:	ldr	r1, [pc, #52]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    46fa:	movs	r0, #17
  m_errorLine = line;
    46fc:	ldr	r3, [pc, #52]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    46fe:	movw	r2, #698	; 0x2ba
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4702:	strb	r0, [r1, #0]
  m_errorLine = line;
    4704:	str	r2, [r3, #0]
    4706:	b.n	46b8 <SdioCard::erase(unsigned long, unsigned long)+0x48>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    4708:	ldr	r0, [pc, #52]	; (4740 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    470a:	bl	43b8 <waitTimeout(bool (*)())>
    470e:	cmp	r0, #0
    4710:	beq.n	46b8 <SdioCard::erase(unsigned long, unsigned long)+0x48>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4712:	ldr	r1, [pc, #28]	; (4730 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    4714:	movs	r0, #39	; 0x27
  m_errorLine = line;
    4716:	ldr	r3, [pc, #28]	; (4734 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    4718:	movw	r2, #701	; 0x2bd
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    471c:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    471e:	strb	r0, [r1, #0]
  m_errorLine = line;
    4720:	str	r2, [r3, #0]
    4722:	b.n	46b8 <SdioCard::erase(unsigned long, unsigned long)+0x48>
    4724:	.word	0x20003854
    4728:	.word	0x20003840
    472c:	.word	0x201a0000
    4730:	.word	0x20000854
    4734:	.word	0x20003868
    4738:	.word	0x211a0000
    473c:	.word	0x261b0000
    4740:	.word	0x000044e5

00004744 <transferStop()>:
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
    4744:	push	{r4, lr}
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    4746:	movs	r1, #0
    4748:	ldr	r0, [pc, #80]	; (479c <transferStop()+0x58>)
    474a:	bl	445c <cardCommand(unsigned long, unsigned long)>
    474e:	mov	r4, r0
    4750:	cbnz	r0, 4764 <transferStop()+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4752:	ldr	r1, [pc, #76]	; (47a0 <transferStop()+0x5c>)
    4754:	movs	r0, #9
  m_errorLine = line;
    4756:	ldr	r3, [pc, #76]	; (47a4 <transferStop()+0x60>)
    4758:	mov.w	r2, #540	; 0x21c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    475c:	strb	r0, [r1, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    475e:	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4760:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    4762:	pop	{r4, pc}
//------------------------------------------------------------------------------
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    4764:	ldr	r0, [pc, #64]	; (47a8 <transferStop()+0x64>)
    4766:	bl	43e0 <yieldTimeout(bool (*)())>
    476a:	cbnz	r0, 4786 <transferStop()+0x42>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
    476c:	ldr	r3, [pc, #60]	; (47ac <transferStop()+0x68>)
    476e:	ldr	r0, [r3, #52]	; 0x34
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    4770:	ldr	r2, [r3, #40]	; 0x28
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    4772:	ldr	r1, [r3, #44]	; 0x2c
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  // Save registers before reset DAT lines.
  uint32_t irqsststen = SDHC_IRQSTATEN;
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    4774:	bic.w	r2, r2, #65536	; 0x10000
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    4778:	orr.w	r1, r1, #67108864	; 0x4000000
    477c:	str	r1, [r3, #44]	; 0x2c
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
    477e:	str	r0, [r3, #52]	; 0x34
  SDHC_PROCTL = proctl;
  return true;
}
    4780:	mov	r0, r4
  uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
  // Do reset to clear CDIHB.  Should be a better way!
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
    4782:	str	r2, [r3, #40]	; 0x28
  return true;
}
    4784:	pop	{r4, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4786:	ldr	r1, [pc, #24]	; (47a0 <transferStop()+0x5c>)
    4788:	movs	r0, #10
  m_errorLine = line;
    478a:	ldr	r3, [pc, #24]	; (47a4 <transferStop()+0x60>)
    478c:	movw	r2, #543	; 0x21f
static bool transferStop() {
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4790:	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4792:	strb	r0, [r1, #0]
  m_errorLine = line;
    4794:	str	r2, [r3, #0]
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
  // Restore registers.
  SDHC_IRQSTATEN = irqsststen;
  SDHC_PROCTL = proctl;
  return true;
}
    4796:	mov	r0, r4
    4798:	pop	{r4, pc}
    479a:	nop
    479c:	.word	0x0cdb0000
    47a0:	.word	0x20000854
    47a4:	.word	0x20003868
    47a8:	.word	0x000044e5
    47ac:	.word	0x402c0000

000047b0 <SdioCard::readStop()>:
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    47b0:	b.w	4744 <transferStop()>

000047b4 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    47b4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    47b6:	ldr	r3, [pc, #156]	; (4854 <SdioCard::writeData(unsigned char const*)+0xa0>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    47b8:	mov	r5, r1
  DBG_IRQSTAT();
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    47ba:	ldr	r2, [r3, #36]	; 0x24
    47bc:	lsls	r0, r2, #23
    47be:	bmi.n	47d0 <SdioCard::writeData(unsigned char const*)+0x1c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    47c0:	ldr	r2, [r3, #40]	; 0x28
    47c2:	bic.w	r2, r2, #65536	; 0x10000
    47c6:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    47c8:	ldr	r2, [r3, #40]	; 0x28
    47ca:	orr.w	r2, r2, #131072	; 0x20000
    47ce:	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    47d0:	ldr	r4, [pc, #128]	; (4854 <SdioCard::writeData(unsigned char const*)+0xa0>)
  if (waitTimeout(isBusyFifoWrite)) {
    47d2:	ldr	r0, [pc, #132]	; (4858 <SdioCard::writeData(unsigned char const*)+0xa4>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    47d4:	ldr	r3, [r4, #40]	; 0x28
    47d6:	orr.w	r3, r3, #65536	; 0x10000
    47da:	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    47dc:	bl	43b8 <waitTimeout(bool (*)())>
    47e0:	cmp	r0, #0
    47e2:	bne.n	4840 <SdioCard::writeData(unsigned char const*)+0x8c>
    47e4:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    47e6:	mov	r0, r4
    47e8:	add.w	r5, r5, #508	; 0x1fc
    47ec:	ldr	r2, [r0, #36]	; 0x24
    47ee:	lsls	r1, r2, #21
    47f0:	bpl.n	47ec <SdioCard::writeData(unsigned char const*)+0x38>
    47f2:	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    47f6:	ldr.w	r2, [r3, #4]!
    47fa:	ldr	r4, [pc, #88]	; (4854 <SdioCard::writeData(unsigned char const*)+0xa0>)
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    47fc:	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    47fe:	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    4800:	bne.n	47f6 <SdioCard::writeData(unsigned char const*)+0x42>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    4802:	cmp	r5, r1
    4804:	mov	r3, r1
    4806:	bne.n	47ec <SdioCard::writeData(unsigned char const*)+0x38>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    4808:	ldr	r0, [pc, #80]	; (485c <SdioCard::writeData(unsigned char const*)+0xa8>)
    480a:	bl	43b8 <waitTimeout(bool (*)())>
    480e:	cbnz	r0, 482e <SdioCard::writeData(unsigned char const*)+0x7a>
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    4810:	ldr	r2, [r4, #48]	; 0x30
    4812:	ldr	r3, [pc, #76]	; (4860 <SdioCard::writeData(unsigned char const*)+0xac>)
    4814:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4816:	ldr	r2, [r3, #0]
    4818:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    481a:	ldr	r2, [r3, #0]
    481c:	lsls	r2, r2, #30
    481e:	bpl.n	4850 <SdioCard::writeData(unsigned char const*)+0x9c>
    4820:	ldr	r3, [r3, #0]
    4822:	ldr	r0, [pc, #64]	; (4864 <SdioCard::writeData(unsigned char const*)+0xb0>)
    4824:	ands	r0, r3
    4826:	clz	r0, r0
    482a:	lsrs	r0, r0, #5
    482c:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    482e:	ldr	r1, [pc, #56]	; (4868 <SdioCard::writeData(unsigned char const*)+0xb4>)
    4830:	movs	r0, #35	; 0x23
  m_errorLine = line;
    4832:	ldr	r3, [pc, #56]	; (486c <SdioCard::writeData(unsigned char const*)+0xb8>)
    4834:	movw	r2, #905	; 0x389
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4838:	strb	r0, [r1, #0]
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
    483a:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    483c:	str	r2, [r3, #0]
    483e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4840:	ldr	r1, [pc, #36]	; (4868 <SdioCard::writeData(unsigned char const*)+0xb4>)
    4842:	movs	r4, #32
  m_errorLine = line;
    4844:	ldr	r3, [pc, #36]	; (486c <SdioCard::writeData(unsigned char const*)+0xb8>)
    4846:	movw	r2, #894	; 0x37e
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    484a:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    484c:	strb	r4, [r1, #0]
  m_errorLine = line;
    484e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    4850:	pop	{r3, r4, r5, pc}
    4852:	nop
    4854:	.word	0x402c0000
    4858:	.word	0x00004329
    485c:	.word	0x0000433d
    4860:	.word	0x2000384c
    4864:	.word	0x117f0000
    4868:	.word	0x20000854
    486c:	.word	0x20003868

00004870 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    4870:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    4872:	ldr	r0, [pc, #80]	; (48c4 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    4874:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    4876:	bl	43e0 <yieldTimeout(bool (*)())>
    487a:	cbnz	r0, 48b0 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    487c:	ldr	r3, [pc, #72]	; (48c8 <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    487e:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4882:	ldr	r1, [pc, #72]	; (48cc <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    4884:	ldr	r2, [r3, #40]	; 0x28
    4886:	bic.w	r2, r2, #65536	; 0x10000
    488a:	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    488c:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    488e:	ldrb	r3, [r1, #0]
    4890:	cbnz	r3, 48ac <SdioCard::writeStart(unsigned long)+0x3c>
    4892:	lsls	r1, r4, #9
    4894:	ldr	r0, [pc, #56]	; (48d0 <SdioCard::writeStart(unsigned long)+0x60>)
    4896:	bl	445c <cardCommand(unsigned long, unsigned long)>
    489a:	cbnz	r0, 48aa <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    489c:	ldr	r1, [pc, #52]	; (48d4 <SdioCard::writeStart(unsigned long)+0x64>)
    489e:	movs	r4, #14
  m_errorLine = line;
    48a0:	ldr	r3, [pc, #52]	; (48d8 <SdioCard::writeStart(unsigned long)+0x68>)
    48a2:	movw	r2, #990	; 0x3de
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48a6:	strb	r4, [r1, #0]
  m_errorLine = line;
    48a8:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    48aa:	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    48ac:	mov	r1, r4
    48ae:	b.n	4894 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48b0:	ldr	r1, [pc, #32]	; (48d4 <SdioCard::writeStart(unsigned long)+0x64>)
    48b2:	movs	r0, #10
  m_errorLine = line;
    48b4:	ldr	r3, [pc, #32]	; (48d8 <SdioCard::writeStart(unsigned long)+0x68>)
    48b6:	movw	r2, #978	; 0x3d2
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    48ba:	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    48bc:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    48be:	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    48c0:	pop	{r4, pc}
    48c2:	nop
    48c4:	.word	0x000044e5
    48c8:	.word	0x402c0000
    48cc:	.word	0x20003840
    48d0:	.word	0x193a0020
    48d4:	.word	0x20000854
    48d8:	.word	0x20003868

000048dc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48dc:	push	{r3, r4, r5, r6, r7, lr}
    48de:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    48e0:	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48e2:	mov	r4, r1
    48e4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    48e6:	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    48e8:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    48ea:	bmi.n	4914 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    48ec:	cbz	r3, 4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    48ee:	add	r7, r1
    48f0:	b.n	48f6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    48f2:	cmp	r4, r7
    48f4:	beq.n	4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    48f6:	ldr	r3, [r6, #0]
    48f8:	mov	r2, r5
    48fa:	mov	r1, r4
    48fc:	mov	r0, r6
    48fe:	ldr	r3, [r3, #8]
    4900:	add.w	r5, r5, #512	; 0x200
    4904:	adds	r4, #1
    4906:	blx	r3
    4908:	cmp	r0, #0
    490a:	bne.n	48f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    490c:	movs	r0, #0
    490e:	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    4910:	movs	r0, #1
    4912:	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    4914:	lsls	r0, r2, #30
    4916:	beq.n	493e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    4918:	cmp	r3, #0
    491a:	beq.n	4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    491c:	add	r7, r1
    491e:	b.n	4924 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    4920:	cmp	r7, r4
    4922:	beq.n	4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    4924:	ldr	r3, [r6, #0]
    4926:	mov	r2, r5
    4928:	mov	r1, r4
    492a:	mov	r0, r6
    492c:	ldr	r3, [r3, #8]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    492e:	add.w	r5, r5, #512	; 0x200
    4932:	adds	r4, #1
        if (!readSector(sector, dst)) {
    4934:	blx	r3
    4936:	cmp	r0, #0
    4938:	bne.n	4920 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    493a:	movs	r0, #0
    493c:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    493e:	ldr	r0, [pc, #24]	; (4958 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    4940:	bl	454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4944:	cmp	r0, #0
    4946:	bne.n	4910 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4948:	ldr	r1, [pc, #16]	; (495c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    494a:	movs	r4, #12
  m_errorLine = line;
    494c:	ldr	r3, [pc, #16]	; (4960 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    494e:	mov.w	r2, #820	; 0x334
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4952:	strb	r4, [r1, #0]
  m_errorLine = line;
    4954:	str	r2, [r3, #0]
    4956:	pop	{r3, r4, r5, r6, r7, pc}
    4958:	.word	0x123a0037
    495c:	.word	0x20000854
    4960:	.word	0x20003868

00004964 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    4964:	push	{r3, r4, r5, r6, r7, lr}
    4966:	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    4968:	ldrb	r0, [r0, #8]
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    496a:	mov	r4, r1
    496c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    496e:	lsls	r0, r0, #31
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    4970:	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    4972:	bmi.n	499c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    4974:	cbz	r3, 4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    4976:	add	r7, r1
    4978:	b.n	497e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    497a:	cmp	r4, r7
    497c:	beq.n	4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    497e:	ldr	r3, [r6, #0]
    4980:	mov	r2, r5
    4982:	mov	r1, r4
    4984:	mov	r0, r6
    4986:	ldr	r3, [r3, #24]
    4988:	add.w	r5, r5, #512	; 0x200
    498c:	adds	r4, #1
    498e:	blx	r3
    4990:	cmp	r0, #0
    4992:	bne.n	497a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    4994:	movs	r0, #0
    4996:	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    4998:	movs	r0, #1
    499a:	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    499c:	lsls	r0, r2, #30
    499e:	beq.n	49c6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    49a0:	cmp	r3, #0
    49a2:	beq.n	4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    49a4:	add	r7, r1
    49a6:	b.n	49ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    49a8:	cmp	r7, r4
    49aa:	beq.n	4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    49ac:	ldr	r3, [r6, #0]
    49ae:	mov	r2, r5
    49b0:	mov	r1, r4
    49b2:	mov	r0, r6
    49b4:	ldr	r3, [r3, #24]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    49b6:	add.w	r5, r5, #512	; 0x200
    49ba:	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    49bc:	blx	r3
    49be:	cmp	r0, #0
    49c0:	bne.n	49a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    49c2:	movs	r0, #0
    49c4:	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    49c6:	ldr	r0, [pc, #24]	; (49e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    49c8:	bl	454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    49cc:	cmp	r0, #0
    49ce:	bne.n	4998 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    49d0:	ldr	r1, [pc, #16]	; (49e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    49d2:	movs	r4, #14
  m_errorLine = line;
    49d4:	ldr	r3, [pc, #16]	; (49e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    49d6:	mov.w	r2, #964	; 0x3c4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    49da:	strb	r4, [r1, #0]
  m_errorLine = line;
    49dc:	str	r2, [r3, #0]
    49de:	pop	{r3, r4, r5, r6, r7, pc}
    49e0:	.word	0x193a0027
    49e4:	.word	0x20000854
    49e8:	.word	0x20003868

000049ec <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    49ec:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    49ee:	ldrb	r3, [r0, #8]
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    49f0:	mov	r5, r2
    49f2:	sub.w	sp, sp, #512	; 0x200
    49f6:	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    49f8:	lsls	r2, r3, #31
    49fa:	bpl.n	4a30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    49fc:	lsls	r3, r5, #30
    49fe:	beq.n	4a0e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    4a00:	mov	r1, r5
    4a02:	mov.w	r2, #512	; 0x200
    4a06:	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t *ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    4a08:	mov	r5, sp
      memcpy(aligned, src, 512);
    4a0a:	bl	8310 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    4a0e:	mov	r2, r5
    4a10:	mov	r1, r6
    4a12:	movs	r3, #1
    4a14:	ldr	r0, [pc, #104]	; (4a80 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    4a16:	bl	454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4a1a:	cbnz	r0, 4a2a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4a1c:	ldr	r1, [pc, #100]	; (4a84 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    4a1e:	movs	r4, #13
  m_errorLine = line;
    4a20:	ldr	r3, [pc, #100]	; (4a88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    4a22:	movw	r2, #923	; 0x39b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4a26:	strb	r4, [r1, #0]
  m_errorLine = line;
    4a28:	str	r2, [r3, #0]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a2a:	add.w	sp, sp, #512	; 0x200
    4a2e:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    4a30:	ldrb	r3, [r0, #9]
    4a32:	mov	r4, r0
    4a34:	cmp	r3, #2
    4a36:	beq.n	4a4a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
      if (!syncDevice()) {
    4a38:	ldr	r3, [r4, #0]
    4a3a:	mov	r0, r4
    4a3c:	ldr	r3, [r3, #20]
    4a3e:	blx	r3
    4a40:	cbnz	r0, 4a6a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x7e>
        return false;
    4a42:	movs	r0, #0
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a44:	add.w	sp, sp, #512	; 0x200
    4a48:	pop	{r4, r5, r6, pc}
    }
  if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    4a4a:	ldr	r3, [r0, #4]
    4a4c:	cmp	r1, r3
    4a4e:	bne.n	4a38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    }
    if (!writeData(src)) {
    4a50:	ldr	r3, [r4, #0]
    4a52:	mov	r1, r5
    4a54:	mov	r0, r4
    4a56:	ldr	r3, [r3, #68]	; 0x44
    4a58:	blx	r3
    4a5a:	cmp	r0, #0
    4a5c:	beq.n	4a42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
      return false;
    }
    m_curSector++;
    4a5e:	ldr	r3, [r4, #4]
    4a60:	adds	r3, #1
    4a62:	str	r3, [r4, #4]
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
  }
  return true;
}
    4a64:	add.w	sp, sp, #512	; 0x200
    4a68:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    4a6a:	ldr	r3, [r4, #0]
    4a6c:	mov	r1, r6
    4a6e:	mov	r0, r4
    4a70:	ldr	r3, [r3, #72]	; 0x48
    4a72:	blx	r3
    4a74:	cmp	r0, #0
    4a76:	beq.n	4a42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x56>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    4a78:	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    4a7a:	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    4a7c:	strb	r3, [r4, #9]
    4a7e:	b.n	4a50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
    4a80:	.word	0x183a0001
    4a84:	.word	0x20000854
    4a88:	.word	0x20003868

00004a8c <SdioCard::syncDevice()>:
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    4a8c:	ldrb	r3, [r0, #9]
    4a8e:	cmp	r3, #1
    4a90:	beq.n	4ab2 <SdioCard::syncDevice()+0x26>
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    4a92:	cmp	r3, #2
    4a94:	beq.n	4a9a <SdioCard::syncDevice()+0xe>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    4a96:	movs	r0, #1
    4a98:	bx	lr
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    4a9a:	push	{r4}
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    4a9c:	ldr	r3, [r0, #0]
    m_curState = IDLE_STATE;
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    4a9e:	movs	r4, #0
    4aa0:	ldr	r1, [pc, #28]	; (4ac0 <SdioCard::syncDevice()+0x34>)
    4aa2:	strb	r4, [r0, #9]
    if (!writeStop()) {
    4aa4:	ldr	r3, [r3, #76]	; 0x4c
    4aa6:	cmp	r3, r1
    4aa8:	bne.n	4aba <SdioCard::syncDevice()+0x2e>
      return false;
    }
  }
  return true;
}
    4aaa:	ldr.w	r4, [sp], #4
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
    4aae:	b.w	4744 <transferStop()>
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
  if (m_curState == READ_STATE) {
    m_curState = IDLE_STATE;
    4ab2:	movs	r3, #0
    4ab4:	strb	r3, [r0, #9]
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
    4ab6:	b.w	4744 <transferStop()>
    if (!writeStop()) {
      return false;
    }
  }
  return true;
}
    4aba:	ldr.w	r4, [sp], #4
    if (!readStop()) {
      return false;
    }
  } else if (m_curState == WRITE_STATE) {
    m_curState = IDLE_STATE;
    if (!writeStop()) {
    4abe:	bx	r3
    4ac0:	.word	0x000047b1

00004ac4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    4ac4:	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    4ac6:	ldr	r3, [pc, #156]	; (4b64 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t *dst) {
    4ac8:	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t *p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    4aca:	ldr	r2, [r3, #36]	; 0x24
    4acc:	lsls	r4, r2, #22
    4ace:	bmi.n	4aec <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    4ad0:	ldr	r2, [r3, #40]	; 0x28
    4ad2:	bic.w	r2, r2, #65536	; 0x10000
    4ad6:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    4ad8:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    4ada:	ldr	r2, [r3, #40]	; 0x28
    4adc:	orr.w	r2, r2, #131072	; 0x20000
    4ae0:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4ae2:	ldr	r2, [r3, #40]	; 0x28
    4ae4:	orr.w	r2, r2, #65536	; 0x10000
    4ae8:	str	r2, [r3, #40]	; 0x28
    interrupts();
    4aea:	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    4aec:	ldr	r0, [pc, #120]	; (4b68 <SdioCard::readData(unsigned char*)+0xa4>)
    4aee:	bl	43b8 <waitTimeout(bool (*)())>
    4af2:	cmp	r0, #0
    4af4:	bne.n	4b52 <SdioCard::readData(unsigned char*)+0x8e>
    4af6:	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    4af8:	ldr	r1, [pc, #104]	; (4b64 <SdioCard::readData(unsigned char*)+0xa0>)
    4afa:	add.w	r5, r5, #508	; 0x1fc
    4afe:	ldr	r2, [r1, #36]	; 0x24
    4b00:	lsls	r0, r2, #20
    4b02:	bpl.n	4afe <SdioCard::readData(unsigned char*)+0x3a>
    4b04:	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    4b08:	ldr	r2, [r1, #32]
    4b0a:	ldr	r4, [pc, #88]	; (4b64 <SdioCard::readData(unsigned char*)+0xa0>)
    4b0c:	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    4b10:	cmp	r0, r3
    4b12:	bne.n	4b08 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    4b14:	cmp	r5, r0
    4b16:	mov	r3, r0
    4b18:	bne.n	4afe <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    4b1a:	ldr	r0, [pc, #80]	; (4b6c <SdioCard::readData(unsigned char*)+0xa8>)
    4b1c:	bl	43b8 <waitTimeout(bool (*)())>
    4b20:	cbnz	r0, 4b40 <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    4b22:	ldr	r2, [r4, #48]	; 0x30
    4b24:	ldr	r3, [pc, #72]	; (4b70 <SdioCard::readData(unsigned char*)+0xac>)
    4b26:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    4b28:	ldr	r2, [r3, #0]
    4b2a:	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    4b2c:	ldr	r2, [r3, #0]
    4b2e:	lsls	r2, r2, #30
    4b30:	bpl.n	4b62 <SdioCard::readData(unsigned char*)+0x9e>
    4b32:	ldr	r3, [r3, #0]
    4b34:	ldr	r0, [pc, #60]	; (4b74 <SdioCard::readData(unsigned char*)+0xb0>)
    4b36:	ands	r0, r3
    4b38:	clz	r0, r0
    4b3c:	lsrs	r0, r0, #5
    4b3e:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b40:	ldr	r1, [pc, #52]	; (4b78 <SdioCard::readData(unsigned char*)+0xb4>)
    4b42:	movs	r0, #29
  m_errorLine = line;
    4b44:	ldr	r3, [pc, #52]	; (4b7c <SdioCard::readData(unsigned char*)+0xb8>)
    4b46:	movw	r2, #759	; 0x2f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b4a:	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    4b4c:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4b4e:	str	r2, [r3, #0]
    4b50:	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b52:	ldr	r1, [pc, #36]	; (4b78 <SdioCard::readData(unsigned char*)+0xb4>)
    4b54:	movs	r4, #26
  m_errorLine = line;
    4b56:	ldr	r3, [pc, #36]	; (4b7c <SdioCard::readData(unsigned char*)+0xb8>)
    4b58:	mov.w	r2, #748	; 0x2ec
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    4b5c:	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4b5e:	strb	r4, [r1, #0]
  m_errorLine = line;
    4b60:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    4b62:	pop	{r3, r4, r5, pc}
    4b64:	.word	0x402c0000
    4b68:	.word	0x00004315
    4b6c:	.word	0x0000433d
    4b70:	.word	0x2000384c
    4b74:	.word	0x117f0000
    4b78:	.word	0x20000854
    4b7c:	.word	0x20003868

00004b80 <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    4b80:	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    4b82:	ldr	r0, [pc, #80]	; (4bd4 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    4b84:	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    4b86:	bl	43e0 <yieldTimeout(bool (*)())>
    4b8a:	cbnz	r0, 4bc0 <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4b8c:	ldr	r3, [pc, #72]	; (4bd8 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    4b8e:	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4b92:	ldr	r1, [pc, #72]	; (4bdc <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    4b94:	ldr	r2, [r3, #40]	; 0x28
    4b96:	orr.w	r2, r2, #65536	; 0x10000
    4b9a:	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    4b9c:	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4b9e:	ldrb	r3, [r1, #0]
    4ba0:	cbnz	r3, 4bbc <SdioCard::readStart(unsigned long)+0x3c>
    4ba2:	lsls	r1, r4, #9
    4ba4:	ldr	r0, [pc, #56]	; (4be0 <SdioCard::readStart(unsigned long)+0x60>)
    4ba6:	bl	445c <cardCommand(unsigned long, unsigned long)>
    4baa:	cbnz	r0, 4bba <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4bac:	ldr	r1, [pc, #52]	; (4be4 <SdioCard::readStart(unsigned long)+0x64>)
    4bae:	movs	r4, #12
  m_errorLine = line;
    4bb0:	ldr	r3, [pc, #52]	; (4be8 <SdioCard::readStart(unsigned long)+0x68>)
    4bb2:	mov.w	r2, #848	; 0x350
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4bb6:	strb	r4, [r1, #0]
  m_errorLine = line;
    4bb8:	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    4bba:	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(0XFFFF) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    4bbc:	mov	r1, r4
    4bbe:	b.n	4ba4 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4bc0:	ldr	r1, [pc, #32]	; (4be4 <SdioCard::readStart(unsigned long)+0x64>)
    4bc2:	movs	r0, #10
  m_errorLine = line;
    4bc4:	ldr	r3, [pc, #32]	; (4be8 <SdioCard::readStart(unsigned long)+0x68>)
    4bc6:	mov.w	r2, #836	; 0x344
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4bca:	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4bcc:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4bce:	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    4bd0:	pop	{r4, pc}
    4bd2:	nop
    4bd4:	.word	0x000044e5
    4bd8:	.word	0x402c0000
    4bdc:	.word	0x20003840
    4be0:	.word	0x123a0030
    4be4:	.word	0x20000854
    4be8:	.word	0x20003868

00004bec <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    4bec:	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    4bee:	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    4bf0:	sub.w	sp, sp, #512	; 0x200
    4bf4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    4bf6:	lsls	r4, r3, #31
    4bf8:	bpl.n	4c1e <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    4bfa:	lsls	r3, r2, #30
    4bfc:	beq.n	4c3a <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    4bfe:	movs	r3, #1
    4c00:	ldr	r0, [pc, #140]	; (4c90 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    4c02:	mov	r2, sp
    4c04:	bl	454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4c08:	cbz	r0, 4c46 <SdioCard::readSector(unsigned long, unsigned char*)+0x5a>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    4c0a:	mov	r1, sp
    4c0c:	mov	r0, r5
    4c0e:	mov.w	r2, #512	; 0x200
    4c12:	bl	8310 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    4c16:	movs	r0, #1
}
    4c18:	add.w	sp, sp, #512	; 0x200
    4c1c:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    4c1e:	ldrb	r3, [r0, #9]
    4c20:	mov	r4, r0
    4c22:	mov	r6, r1
    4c24:	cmp	r3, #1
    4c26:	beq.n	4c5c <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
      if (!syncDevice()) {
    4c28:	ldr	r3, [r4, #0]
    4c2a:	mov	r0, r4
    4c2c:	ldr	r3, [r3, #20]
    4c2e:	blx	r3
    4c30:	cbnz	r0, 4c7a <SdioCard::readSector(unsigned long, unsigned char*)+0x8e>
        return false;
    4c32:	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    4c34:	add.w	sp, sp, #512	; 0x200
    4c38:	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    4c3a:	movs	r3, #1
    4c3c:	ldr	r0, [pc, #80]	; (4c90 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    4c3e:	bl	454c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    4c42:	cmp	r0, #0
    4c44:	bne.n	4c16 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4c46:	ldr	r1, [pc, #76]	; (4c94 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    4c48:	movs	r0, #11
  m_errorLine = line;
    4c4a:	ldr	r3, [pc, #76]	; (4c98 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    4c4c:	movw	r2, #778	; 0x30a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    4c50:	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    4c52:	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    4c54:	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    4c56:	add.w	sp, sp, #512	; 0x200
    4c5a:	pop	{r4, r5, r6, pc}
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
    4c5c:	ldr	r3, [r0, #4]
    4c5e:	cmp	r1, r3
    4c60:	bne.n	4c28 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    }
    if (!readData(dst)) {
    4c62:	mov	r1, r5
    4c64:	mov	r0, r4
    4c66:	bl	4ac4 <SdioCard::readData(unsigned char*)>
    4c6a:	cmp	r0, #0
    4c6c:	beq.n	4c32 <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    4c6e:	ldr	r3, [r4, #4]
    4c70:	adds	r3, #1
    4c72:	str	r3, [r4, #4]
  }
  return true;
}
    4c74:	add.w	sp, sp, #512	; 0x200
    4c78:	pop	{r4, r5, r6, pc}
  } else {
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    4c7a:	mov	r1, r6
    4c7c:	mov	r0, r4
    4c7e:	bl	4b80 <SdioCard::readStart(unsigned long)>
    4c82:	cmp	r0, #0
    4c84:	beq.n	4c32 <SdioCard::readSector(unsigned long, unsigned char*)+0x46>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    4c86:	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    4c88:	str	r6, [r4, #4]
      m_curState = READ_STATE;
    4c8a:	strb	r3, [r4, #9]
    4c8c:	b.n	4c62 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    4c8e:	nop
    4c90:	.word	0x113a0011
    4c94:	.word	0x20000854
    4c98:	.word	0x20003868

00004c9c <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    4c9c:	ldr	r3, [r0, #0]
    4c9e:	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    4ca0:	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    4ca2:	ldrb	r2, [r3, #19]
    4ca4:	ldr	r4, [r0, #8]
    4ca6:	cmp	r2, #0
    4ca8:	beq.n	4cfc <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    4caa:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4cac:	ldrb	r2, [r3, #19]
    4cae:	lsls	r5, r2, #31
    4cb0:	bpl.n	4cc0 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4cb2:	ldr	r0, [pc, #196]	; (4d78 <SdSpiArduinoDriver::activate()+0xdc>)
    4cb4:	ldr	r2, [r3, #20]
    4cb6:	ldr	r5, [r0, #0]
    4cb8:	ands	r2, r5
    4cba:	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    4cbc:	str	r2, [r0, #0]
    4cbe:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    4cc0:	lsls	r0, r2, #30
    4cc2:	bpl.n	4cd2 <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4cc4:	ldr	r0, [pc, #180]	; (4d7c <SdSpiArduinoDriver::activate()+0xe0>)
    4cc6:	ldr	r2, [r3, #24]
    4cc8:	ldr	r5, [r0, #0]
    4cca:	ands	r2, r5
    4ccc:	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    4cce:	str	r2, [r0, #0]
    4cd0:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    4cd2:	lsls	r5, r2, #29
    4cd4:	bpl.n	4ce4 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4cd6:	ldr	r0, [pc, #168]	; (4d80 <SdSpiArduinoDriver::activate()+0xe4>)
    4cd8:	ldr	r2, [r3, #28]
    4cda:	ldr	r5, [r0, #0]
    4cdc:	ands	r2, r5
    4cde:	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4ce0:	str	r2, [r0, #0]
    4ce2:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    4ce4:	lsls	r0, r2, #28
    4ce6:	bpl.n	4cf6 <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4ce8:	ldr	r0, [pc, #152]	; (4d84 <SdSpiArduinoDriver::activate()+0xe8>)
    4cea:	ldr	r2, [r3, #32]
    4cec:	ldr	r5, [r0, #0]
    4cee:	ands	r2, r5
    4cf0:	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4cf2:	str	r2, [r0, #0]
    4cf4:	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    4cf6:	lsls	r2, r2, #27
    4cf8:	bmi.n	4d54 <SdSpiArduinoDriver::activate()+0xb8>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    4cfa:	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    4cfc:	ldr	r2, [r3, #8]
    4cfe:	cmp	r2, r1
    4d00:	beq.n	4d62 <SdSpiArduinoDriver::activate()+0xc6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    4d02:	ldr	r2, [pc, #132]	; (4d88 <SdSpiArduinoDriver::activate()+0xec>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    4d04:	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    4d06:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4d08:	ldr	r0, [pc, #128]	; (4d8c <SdSpiArduinoDriver::activate()+0xf0>)
    4d0a:	ubfx	r5, r2, #4, #2
    4d0e:	ubfx	r2, r2, #26, #3
    4d12:	ldr.w	r0, [r0, r5, lsl #2]
    4d16:	adds	r2, #1
    4d18:	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    4d1c:	cbz	r1, 4d50 <SdSpiArduinoDriver::activate()+0xb4>
    4d1e:	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    4d22:	cbz	r2, 4d38 <SdSpiArduinoDriver::activate()+0x9c>
    4d24:	udiv	r0, r0, r2
    4d28:	cmp	r0, r1
    4d2a:	it	hi
    4d2c:	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    4d2e:	cmp.w	r2, #258	; 0x102
    4d32:	bcc.n	4d66 <SdSpiArduinoDriver::activate()+0xca>
    4d34:	movw	r2, #32767	; 0x7fff
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    4d38:	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4d3a:	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    4d3c:	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4d3e:	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    4d40:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    4d42:	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4d44:	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    4d46:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    4d48:	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    4d4a:	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    4d4c:	pop	{r4, r5}
    4d4e:	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    4d50:	mov	r2, r0
    4d52:	b.n	4d22 <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4d54:	ldr	r0, [pc, #56]	; (4d90 <SdSpiArduinoDriver::activate()+0xf4>)
    4d56:	ldr	r2, [r3, #36]	; 0x24
    4d58:	ldr	r5, [r0, #0]
    4d5a:	ands	r2, r5
    4d5c:	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4d5e:	str	r2, [r0, #0]
    4d60:	b.n	4cfa <SdSpiArduinoDriver::activate()+0x5e>
    4d62:	ldr	r2, [r3, #12]
    4d64:	b.n	4d3a <SdSpiArduinoDriver::activate()+0x9e>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    4d66:	cmp	r2, #2
    4d68:	it	ls
    4d6a:	movls	r2, #0
    4d6c:	bls.n	4d38 <SdSpiArduinoDriver::activate()+0x9c>
    4d6e:	subs	r2, #2
    4d70:	lsrs	r1, r2, #1
    4d72:	orr.w	r2, r2, r1, lsl #8
    4d76:	b.n	4d38 <SdSpiArduinoDriver::activate()+0x9c>
    4d78:	.word	0xe000e180
    4d7c:	.word	0xe000e184
    4d80:	.word	0xe000e188
    4d84:	.word	0xe000e18c
    4d88:	.word	0x400fc000
    4d8c:	.word	0x20000114
    4d90:	.word	0xe000e190

00004d94 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    4d94:	push	{lr}
    4d96:	sub	sp, #20
    4d98:	add.w	lr, sp, #16
    4d9c:	stmdb	lr, {r1, r2, r3}
    4da0:	ldr	r3, [sp, #12]
  if (spiConfig.spiPort) {
    4da2:	cbz	r3, 4db2 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    m_spi = spiConfig.spiPort;
    4da4:	str	r3, [r0, #0]
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    4da6:	mov	r0, r3
}
    4da8:	add	sp, #20
    4daa:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    4dae:	b.w	7c30 <SPIClass::begin()>
    m_spi->setMISO(SDCARD_MISO_PIN);
    m_spi->setMOSI(SDCARD_MOSI_PIN);
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
    4db2:	ldr	r2, [pc, #16]	; (4dc4 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x30>)
    4db4:	mov	r3, r2
    4db6:	str	r2, [r0, #0]
  }
  m_spi->begin();
    4db8:	mov	r0, r3
}
    4dba:	add	sp, #20
    4dbc:	ldr.w	lr, [sp], #4
    m_spi->setSCK(SDCARD_SCK_PIN);
#endif  // defined(SDCARD_SPI) && defined(SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    4dc0:	b.w	7c30 <SPIClass::begin()>
    4dc4:	.word	0x2000085c

00004dc8 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    4dc8:	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4dca:	ldrb	r3, [r2, #19]
    4dcc:	cbz	r3, 4e08 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4dce:	lsls	r0, r3, #31
    4dd0:	bpl.n	4dda <SdSpiArduinoDriver::deactivate()+0x12>
    4dd2:	ldr	r3, [pc, #56]	; (4e0c <SdSpiArduinoDriver::deactivate()+0x44>)
    4dd4:	ldr	r1, [r2, #40]	; 0x28
    4dd6:	str	r1, [r3, #0]
    4dd8:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4dda:	lsls	r1, r3, #30
    4ddc:	bpl.n	4de6 <SdSpiArduinoDriver::deactivate()+0x1e>
    4dde:	ldr	r3, [pc, #48]	; (4e10 <SdSpiArduinoDriver::deactivate()+0x48>)
    4de0:	ldr	r1, [r2, #44]	; 0x2c
    4de2:	str	r1, [r3, #0]
    4de4:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    4de6:	lsls	r0, r3, #29
    4de8:	bpl.n	4df2 <SdSpiArduinoDriver::deactivate()+0x2a>
    4dea:	ldr	r3, [pc, #40]	; (4e14 <SdSpiArduinoDriver::deactivate()+0x4c>)
    4dec:	ldr	r1, [r2, #48]	; 0x30
    4dee:	str	r1, [r3, #0]
    4df0:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    4df2:	lsls	r1, r3, #28
    4df4:	bpl.n	4dfe <SdSpiArduinoDriver::deactivate()+0x36>
    4df6:	ldr	r3, [pc, #32]	; (4e18 <SdSpiArduinoDriver::deactivate()+0x50>)
    4df8:	ldr	r1, [r2, #52]	; 0x34
    4dfa:	str	r1, [r3, #0]
    4dfc:	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4dfe:	lsls	r3, r3, #27
    4e00:	bpl.n	4e08 <SdSpiArduinoDriver::deactivate()+0x40>
    4e02:	ldr	r2, [r2, #56]	; 0x38
    4e04:	ldr	r3, [pc, #20]	; (4e1c <SdSpiArduinoDriver::deactivate()+0x54>)
    4e06:	str	r2, [r3, #0]
    4e08:	bx	lr
    4e0a:	nop
    4e0c:	.word	0xe000e100
    4e10:	.word	0xe000e104
    4e14:	.word	0xe000e108
    4e18:	.word	0xe000e10c
    4e1c:	.word	0xe000e110

00004e20 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    4e20:	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    4e22:	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e24:	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    4e26:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    4e28:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    4e2a:	tst.w	r3, #2031616	; 0x1f0000
    4e2e:	beq.n	4e28 <SdSpiArduinoDriver::receive()+0x8>
    4e30:	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    4e32:	uxtb	r0, r0
    4e34:	bx	lr
    4e36:	nop

00004e38 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    4e38:	push	{r4, r5, r6, lr}
    4e3a:	mov	r4, r1
    4e3c:	mov	r6, r2
    4e3e:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    4e40:	movs	r1, #255	; 0xff
    4e42:	mov	r0, r4
    4e44:	bl	b58c <memset>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    4e48:	ldr	r0, [r5, #0]
    4e4a:	mov	r3, r6
    4e4c:	mov	r2, r4
    4e4e:	mov	r1, r4
    4e50:	bl	7e50 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    4e54:	movs	r0, #0
    4e56:	pop	{r4, r5, r6, pc}

00004e58 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    4e58:	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e5a:	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    4e5c:	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    4e5e:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    4e60:	tst.w	r3, #2031616	; 0x1f0000
    4e64:	beq.n	4e5e <SdSpiArduinoDriver::send(unsigned char)+0x6>
    4e66:	ldr	r3, [r2, #116]	; 0x74
    4e68:	bx	lr
    4e6a:	nop

00004e6c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    4e6c:	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    4e6e:	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    4e70:	sub.w	sp, sp, #516	; 0x204
    4e74:	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    4e76:	cmp.w	r5, #512	; 0x200
    4e7a:	bcc.n	4e9e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    4e7c:	cbz	r2, 4e98 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    4e7e:	ldr	r2, [r0, #0]
    4e80:	adds	r0, r1, r3
    4e82:	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    4e84:	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    4e88:	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    4e8a:	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    4e8c:	tst.w	r3, #2031616	; 0x1f0000
    4e90:	beq.n	4e8a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    4e92:	cmp	r1, r0
    4e94:	ldr	r3, [r2, #116]	; 0x74
    4e96:	bne.n	4e84 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    4e98:	add.w	sp, sp, #516	; 0x204
    4e9c:	pop	{r4, r5, pc}
    4e9e:	mov	r4, r2
    4ea0:	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    4ea2:	mov	r0, sp
    4ea4:	bl	8310 <memcpy>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    4ea8:	mov	r3, r4
    4eaa:	mov	r2, sp
    4eac:	mov	r1, sp
    4eae:	ldr	r0, [r5, #0]
    4eb0:	bl	7e50 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    4eb4:	add.w	sp, sp, #516	; 0x204
    4eb8:	pop	{r4, r5, pc}
    4eba:	nop

00004ebc <sdCsInit(unsigned char)>:
}
#elif SD_CHIP_SELECT_MODE == 1
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
    4ebc:	movs	r1, #1
    4ebe:	b.w	9c68 <pinMode>
    4ec2:	nop

00004ec4 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
__attribute__((weak))
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    4ec4:	b.w	9c5c <digitalWrite>

00004ec8 <MTPStorage_SD::readonly()>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly() { return false; }
    4ec8:	movs	r0, #0
    4eca:	bx	lr

00004ecc <MTPStorage_SD::has_directories()>:
  bool MTPStorage_SD::has_directories() { return true; }
    4ecc:	movs	r0, #1
    4ece:	bx	lr

00004ed0 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume> {
    4ed0:	bx	lr
    4ed2:	nop

00004ed4 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

  // Call-back for file timestamps.  Only called for file create and sync().
  #include "TimeLib.h"
  // Call back for file timestamps.  Only called for file create and sync().
  void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
  { 
    4ed4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ed8:	mov	r6, r1
    4eda:	mov	r5, r2
    4edc:	mov	r7, r0
    // Return date using FS_DATE macro to format fields.
    *date = FS_DATE(year(), month(), day());
    4ede:	bl	8144 <year()>
    4ee2:	mov	r4, r0
    4ee4:	bl	8124 <month()>
    4ee8:	mov	r8, r0
    4eea:	bl	8104 <day()>
    4eee:	uxtb	r0, r0
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
    4ef0:	uxtb.w	r3, r8
    4ef4:	cmp	r3, #12
    4ef6:	it	ls
    4ef8:	cmpls	r0, #31
    4efa:	bhi.n	4f6c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x98>
    4efc:	subw	r4, r4, #1980	; 0x7bc
    4f00:	uxth	r4, r4
    4f02:	cmp	r4, #127	; 0x7f
    4f04:	bhi.n	4f6c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x98>
         year << 9 | month << 5 | day;
    4f06:	mov.w	r8, r8, lsl #5
    4f0a:	and.w	r8, r8, #8160	; 0x1fe0
    4f0e:	orr.w	r0, r8, r0
    4f12:	orr.w	r4, r0, r4, lsl #9
    4f16:	uxth	r4, r4
    4f18:	strh	r4, [r7, #0]

    // Return time using FS_TIME macro to format fields.
    *time = FS_TIME(hour(), minute(), second());
    4f1a:	bl	80a4 <hour()>
    4f1e:	mov	r7, r0
    4f20:	bl	80c4 <minute()>
    4f24:	mov	r4, r0
    4f26:	bl	80e4 <second()>
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4f2a:	uxtb	r2, r4
    4f2c:	uxtb	r3, r7
    4f2e:	cmp	r2, #59	; 0x3b
    4f30:	it	ls
    4f32:	cmpls	r3, #23
    4f34:	bhi.n	4f68 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x94>
    4f36:	uxtb	r3, r0
    4f38:	cmp	r3, #59	; 0x3b
    4f3a:	bhi.n	4f68 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x94>
         hour << 11 | minute << 5 | second >> 1;
    4f3c:	lsls	r7, r7, #11
    4f3e:	ubfx	r3, r0, #1, #7
    4f42:	lsls	r4, r4, #5
    4f44:	and.w	r0, r7, #522240	; 0x7f800
    4f48:	and.w	r4, r4, #8160	; 0x1fe0
    4f4c:	orrs	r0, r4
    4f4e:	orrs	r0, r3
    4f50:	uxth	r0, r0
    4f52:	strh	r0, [r6, #0]
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
    4f54:	bl	80e4 <second()>
    4f58:	tst.w	r0, #1
    4f5c:	ite	ne
    4f5e:	movne	r3, #100	; 0x64
    4f60:	moveq	r3, #0
    4f62:	strb	r3, [r5, #0]
    4f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f68:	movs	r0, #0
    4f6a:	b.n	4f52 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x7e>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    4f6c:	movs	r4, #0
    4f6e:	b.n	4f18 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x44>

00004f70 <MTPStorage_SD::CloseIndex()>:
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::CloseIndex()
  {
    4f70:	push	{r4, lr}
    4f72:	mov	r4, r0
    mtp_lock_storage(true);
    index_.close();
    4f74:	adds	r0, #20
    4f76:	bl	37ec <FsBaseFile::close()>
    mtp_lock_storage(false);
    index_generated = false;
    4f7a:	movs	r3, #0
    4f7c:	strb.w	r3, [r4, #256]	; 0x100
    index_entries_ = 0;
    4f80:	str.w	r3, [r4, #252]	; 0xfc
    4f84:	pop	{r4, pc}
    4f86:	nop

00004f88 <MTPStorage_SD::clusterCount()>:
  bool MTPStorage_SD::has_directories() { return true; }
  

//  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
//  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
    4f88:	ldr	r2, [pc, #24]	; (4fa4 <MTPStorage_SD::clusterCount()+0x1c>)
    4f8a:	ldr.w	r3, [r2, #1144]	; 0x478
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() {
    return m_fVol ? m_fVol->clusterCount() :
           m_xVol ? m_xVol->clusterCount() : 0;
    4f8e:	cbz	r3, 4f96 <MTPStorage_SD::clusterCount()+0xe>
    m_cache.invalidate();
    return m_cache.buffer();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    4f90:	ldr	r0, [r3, #28]
    4f92:	subs	r0, #1
    4f94:	bx	lr
    4f96:	ldr.w	r0, [r2, #1148]	; 0x47c
    4f9a:	cbz	r0, 4fa0 <MTPStorage_SD::clusterCount()+0x18>
    4f9c:	ldr.w	r0, [r0, #1064]	; 0x428
    4fa0:	bx	lr
    4fa2:	nop
    4fa4:	.word	0x2000386c

00004fa8 <MTPStorage_SD::clusterSize()>:
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }
    4fa8:	ldr	r2, [pc, #28]	; (4fc8 <MTPStorage_SD::clusterSize()+0x20>)
    4faa:	ldr.w	r3, [r2, #1144]	; 0x478
           m_xVol ? m_xVol->freeClusterCount() : 0;
  }
  /** \return The volume's cluster size in sectors. */
  uint32_t sectorsPerCluster() const {
    return m_fVol ? m_fVol->sectorsPerCluster() :
           m_xVol ? m_xVol->sectorsPerCluster() : 0;
    4fae:	cbz	r3, 4fb4 <MTPStorage_SD::clusterSize()+0xc>
    4fb0:	ldrb	r0, [r3, #4]
    4fb2:	bx	lr
    4fb4:	ldr.w	r0, [r2, #1148]	; 0x47c
    4fb8:	cbz	r0, 4fc4 <MTPStorage_SD::clusterSize()+0x1c>
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() {return m_rootDirectoryCluster;}
  /** \return the root directory length. */
  uint32_t rootLength();
  /** \return the number of sectors in a cluster. */
  uint32_t sectorsPerCluster() {return 1UL << m_sectorsPerClusterShift;}
    4fba:	ldrb.w	r0, [r0, #1085]	; 0x43d
    4fbe:	movs	r3, #1
    4fc0:	lsl.w	r0, r3, r0
    4fc4:	bx	lr
    4fc6:	nop
    4fc8:	.word	0x2000386c

00004fcc <MTPStorage_SD::freeClusters()>:
  

//  uint64_t MTPStorage_SD::size() { return (uint64_t)512 * (uint64_t)sd.clusterCount()     * (uint64_t)sd.sectorsPerCluster(); }
//  uint64_t MTPStorage_SD::free() { return (uint64_t)512 * (uint64_t)sd.freeClusterCount() * (uint64_t)sd.sectorsPerCluster(); }
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
    4fcc:	ldr	r3, [pc, #20]	; (4fe4 <MTPStorage_SD::freeClusters()+0x18>)
    4fce:	ldr.w	r0, [r3, #1144]	; 0x478
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4fd2:	cbz	r0, 4fd8 <MTPStorage_SD::freeClusters()+0xc>
    return m_fVol ? m_fVol->fatStartSector() :
           m_xVol ? m_xVol->fatStartSector() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
    return m_fVol ? m_fVol->freeClusterCount() :
    4fd4:	b.w	2c0c <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4fd8:	ldr.w	r0, [r3, #1148]	; 0x47c
    4fdc:	cbz	r0, 4fe2 <MTPStorage_SD::freeClusters()+0x16>
    4fde:	b.w	11cc <ExFatPartition::freeClusterCount()>
    4fe2:	bx	lr
    4fe4:	.word	0x2000386c

00004fe8 <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]>:
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    4fe8:	ldr	r3, [pc, #16]	; (4ffc <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]+0x14>)
    4fea:	ldr	r1, [r3, #0]
    4fec:	cbz	r1, 4ffa <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]+0x12>
    4fee:	adds	r0, #20
    4ff0:	movw	r3, #16898	; 0x4202
    4ff4:	ldr	r2, [pc, #8]	; (5000 <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]+0x18>)
    4ff6:	b.w	389c <FsBaseFile::open(FsVolume*, char const*, int)>
    4ffa:	bx	lr
    4ffc:	.word	0x20003824
    5000:	.word	0x20000174

00005004 <MTPStorage_SD::write(char const*, unsigned long)>:
    }
    return ret;
  }

  void MTPStorage_SD::write(const char* data, uint32_t bytes)
  {
    5004:	ldr.w	r3, [r0, #156]	; 0x9c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    5008:	cbz	r3, 5010 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    500a:	mov	r0, r3
    500c:	b.w	27c4 <FatFile::write(void const*, unsigned int)>
    5010:	ldr.w	r0, [r0, #160]	; 0xa0
    5014:	cbz	r0, 501a <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    5016:	b.w	1a34 <ExFatFile::write(void const*, unsigned int)>
    501a:	bx	lr

0000501c <MTPStorage_SD::ResetIndex()>:
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    501c:	ldr	r3, [r0, #76]	; 0x4c
  uint32_t MTPStorage_SD::clusterCount() { return sd.clusterCount(); }
  uint32_t MTPStorage_SD::freeClusters() { return sd.freeClusterCount(); }
  uint32_t MTPStorage_SD::clusterSize() { return sd.sectorsPerCluster(); }


  void MTPStorage_SD::ResetIndex() {
    501e:	push	{r4, r5, r6, r7, lr}
    5020:	sub	sp, #84	; 0x54
    5022:	cmp	r3, #0
    5024:	beq.n	50d4 <MTPStorage_SD::ResetIndex()+0xb8>
    if(!index_) return;
    
    mtp_lock_storage(true);
    if(index_.isOpen()) index_.close();
    5026:	add.w	r7, r0, #20
    502a:	mov	r4, r0
    502c:	mov	r0, r7
    502e:	bl	37ec <FsBaseFile::close()>
    5032:	ldr	r3, [pc, #168]	; (50dc <MTPStorage_SD::ResetIndex()+0xc0>)
    5034:	ldr.w	r5, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    5038:	cmp	r5, #0
    503a:	beq.n	50a8 <MTPStorage_SD::ResetIndex()+0x8c>
    503c:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5040:	mov	r1, r5
    5042:	movs	r3, #1
    5044:	mov	r0, sp
    5046:	ldr	r2, [pc, #152]	; (50e0 <MTPStorage_SD::ResetIndex()+0xc4>)
    5048:	mov	r6, sp
    504a:	strb.w	lr, [sp]
    504e:	strb.w	lr, [sp, #1]
    5052:	strb.w	lr, [sp, #2]
    5056:	bl	2160 <FatFile::open(FatVolume*, char const*, int)>
    505a:	cbz	r0, 5062 <MTPStorage_SD::ResetIndex()+0x46>
    505c:	mov	r0, sp
    505e:	bl	31e8 <FatFile::remove()>
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    5062:	mov	r0, r6
    5064:	movw	r3, #16898	; 0x4202
    5068:	ldr	r2, [pc, #116]	; (50e0 <MTPStorage_SD::ResetIndex()+0xc4>)
    506a:	ldr	r1, [pc, #112]	; (50dc <MTPStorage_SD::ResetIndex()+0xc0>)
    506c:	bl	3a44 <FsVolume::open(char const*, int)>
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    5070:	ldr	r2, [sp, #8]
    5072:	ldrb.w	r3, [sp, #12]
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
    5076:	add	r1, sp, #16
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    5078:	ldrb.w	r5, [sp, #4]
    507c:	mov	r0, r7
    507e:	str	r2, [r4, #12]
    5080:	strb	r3, [r4, #16]
    5082:	strb	r5, [r4, #8]
    5084:	bl	3814 <FsBaseFile::operator=(FsBaseFile const&)>
    5088:	ldr	r3, [pc, #88]	; (50e4 <MTPStorage_SD::ResetIndex()+0xc8>)
 */
class FsBaseFile {
 public:
  FsBaseFile() : m_fFile(nullptr), m_xFile(nullptr) {}

  ~FsBaseFile() {close();}
    508a:	add	r0, sp, #16
    508c:	str	r3, [sp, #0]
    508e:	bl	37ec <FsBaseFile::close()>
    mtp_lock_storage(false);

    all_scanned_ = false;
    5092:	movs	r3, #0
    index_generated=false;
    open_file_ = 0xFFFFFFFEUL;
    5094:	mvn.w	r2, #1
    if(index_.isOpen()) index_.close();
    sd.remove("mtpindex.dat");
    index_ = sd.open("mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);

    all_scanned_ = false;
    5098:	strb.w	r3, [r4, #257]	; 0x101
    index_generated=false;
    509c:	strb.w	r3, [r4, #256]	; 0x100
    open_file_ = 0xFFFFFFFEUL;
    50a0:	str.w	r2, [r4, #248]	; 0xf8
  }
    50a4:	add	sp, #84	; 0x54
    50a6:	pop	{r4, r5, r6, r7, pc}
    50a8:	ldr.w	r1, [r3, #1148]	; 0x47c
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    50ac:	mov	r6, sp
    50ae:	cmp	r1, #0
    50b0:	beq.n	5062 <MTPStorage_SD::ResetIndex()+0x46>
    50b2:	movs	r3, #1
    50b4:	ldr	r2, [pc, #40]	; (50e0 <MTPStorage_SD::ResetIndex()+0xc4>)
    50b6:	mov	r0, sp
    50b8:	strb.w	r5, [sp, #49]	; 0x31
    50bc:	strb.w	r5, [sp, #50]	; 0x32
    50c0:	strb.w	r5, [sp, #51]	; 0x33
    50c4:	bl	ccc <ExFatFile::open(ExFatVolume*, char const*, int)>
    50c8:	cmp	r0, #0
    50ca:	beq.n	5062 <MTPStorage_SD::ResetIndex()+0x46>
    50cc:	mov	r0, sp
    50ce:	bl	137c <ExFatFile::remove()>
    50d2:	b.n	5062 <MTPStorage_SD::ResetIndex()+0x46>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    50d4:	ldr	r3, [r0, #80]	; 0x50
    50d6:	cmp	r3, #0
    50d8:	bne.n	5026 <MTPStorage_SD::ResetIndex()+0xa>
    50da:	b.n	50a4 <MTPStorage_SD::ResetIndex()+0x88>
    50dc:	.word	0x2000386c
    50e0:	.word	0x20000174
    50e4:	.word	0x20000008

000050e8 <Print::println(__FlashStringHelper const*)>:
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    50e8:	push	{r3, r4, r5, lr}
    50ea:	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    50ec:	mov	r0, r1
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    50ee:	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    50f0:	bl	bb40 <strlen>
    50f4:	ldr	r3, [r4, #0]
    50f6:	mov	r2, r0
    50f8:	mov	r1, r5
    50fa:	mov	r0, r4
    50fc:	ldr	r3, [r3, #4]
    50fe:	blx	r3
    5100:	mov	r5, r0
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    5102:	mov	r0, r4
    5104:	bl	a05c <Print::println()>
    5108:	add	r0, r5
    510a:	pop	{r3, r4, r5, pc}

0000510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    index_.open((char*)"mtpindex.dat", FILE_WRITE);
    mtp_lock_storage(false);
  }

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    510c:	ldr	r3, [r0, #76]	; 0x4c
    510e:	push	{r4, r5, r6, lr}
    5110:	mov	r5, r0
    5112:	mov	r4, r1
    5114:	mov	r6, r2
    5116:	cbz	r3, 5144 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x38>
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    5118:	add.w	r4, r1, r1, lsl #2
    511c:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    511e:	mov	r0, r3
    5120:	bl	25bc <FatFile::seekSet(unsigned long)>
    5124:	ldr	r0, [r5, #76]	; 0x4c
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
    5126:	cbz	r0, 5134 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x28>
    5128:	mov	r1, r6
    512a:	movs	r2, #80	; 0x50
    index_.write((char*)&r, sizeof(r));
    mtp_lock_storage(false);
  }
    512c:	ldmia.w	sp!, {r4, r5, r6, lr}
    5130:	b.w	27c4 <FatFile::write(void const*, unsigned int)>
    5134:	ldr	r0, [r5, #80]	; 0x50
    5136:	cbz	r0, 5172 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x66>
    5138:	mov	r1, r6
    513a:	movs	r2, #80	; 0x50
    513c:	ldmia.w	sp!, {r4, r5, r6, lr}
    5140:	b.w	1a34 <ExFatFile::write(void const*, unsigned int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5144:	ldr	r3, [r0, #80]	; 0x50
    5146:	cbz	r3, 5158 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x4c>

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  {
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(r) * i);
    5148:	add.w	r4, r1, r1, lsl #2
    514c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    514e:	mov	r0, r3
    5150:	movs	r3, #0
    5152:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
    5156:	b.n	5124 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x18>
    5158:	add.w	r4, r4, r4, lsl #2
    515c:	bl	4fe8 <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]>
    5160:	ldr	r3, [r5, #76]	; 0x4c
    5162:	lsls	r2, r4, #4
    5164:	mov	r1, r2
    5166:	cmp	r3, #0
    5168:	bne.n	511e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x12>
    516a:	ldr	r3, [r5, #80]	; 0x50
    516c:	cmp	r3, #0
    516e:	bne.n	514e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x42>
    5170:	pop	{r4, r5, r6, pc}
    5172:	pop	{r4, r5, r6, pc}

00005174 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]>:
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    5174:	ldr	r2, [pc, #136]	; (5200 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x8c>)
  {
    if (index_generated) return;
    index_generated = true;
    5176:	movs	r3, #1
  }

  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
    5178:	push	{r4, r5, r6, r7, lr}
    517a:	ldr.w	r5, [r2, #1144]	; 0x478
    517e:	sub	sp, #84	; 0x54
    5180:	mov	r4, r0
  {
    if (index_generated) return;
    index_generated = true;
    5182:	strb.w	r3, [r0, #256]	; 0x100
    5186:	cbz	r5, 51d6 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x62>
    5188:	movs	r7, #0
    518a:	mov	r1, r5
    518c:	mov	r0, sp
    518e:	ldr	r2, [pc, #116]	; (5204 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x90>)
    5190:	mov	r6, sp
    5192:	strb.w	r7, [sp]
    5196:	strb.w	r7, [sp, #1]
    519a:	strb.w	r7, [sp, #2]
    519e:	bl	2160 <FatFile::open(FatVolume*, char const*, int)>
    51a2:	cbnz	r0, 51ce <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x5a>
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    51a4:	movs	r3, #0
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    51a6:	movs	r5, #1
    r.scanned = false;
    strcpy(r.name, "/");
    51a8:	movs	r7, #47	; 0x2f
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    51aa:	mov	r2, r6
    51ac:	mov	r1, r3
    51ae:	mov	r0, r4
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    51b0:	str.w	r5, [r4, #252]	; 0xfc
    sd.remove((char*)"mtpindex.dat");
    mtp_lock_storage(false);
    index_entries_ = 0;

    Record r;
    r.parent = 0;
    51b4:	str	r3, [sp, #0]
    r.sibling = 0;
    51b6:	str	r3, [sp, #8]
    r.child = 0;
    51b8:	str	r3, [sp, #4]
    r.isdir = true;
    r.scanned = false;
    51ba:	strb.w	r3, [sp, #13]

    Record r;
    r.parent = 0;
    r.sibling = 0;
    r.child = 0;
    r.isdir = true;
    51be:	strb.w	r5, [sp, #12]
    r.scanned = false;
    strcpy(r.name, "/");
    51c2:	strh.w	r7, [sp, #14]
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    51c6:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.child = 0;
    r.isdir = true;
    r.scanned = false;
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }
    51ca:	add	sp, #84	; 0x54
    51cc:	pop	{r4, r5, r6, r7, pc}
    51ce:	mov	r0, sp
    51d0:	bl	31e8 <FatFile::remove()>
    51d4:	b.n	51a4 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x30>
    51d6:	ldr.w	r1, [r2, #1148]	; 0x47c
    51da:	mov	r6, sp
    51dc:	cmp	r1, #0
    51de:	beq.n	51a4 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x30>
    51e0:	ldr	r2, [pc, #32]	; (5204 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x90>)
    51e2:	mov	r0, sp
    51e4:	strb.w	r5, [sp, #49]	; 0x31
    51e8:	strb.w	r5, [sp, #50]	; 0x32
    51ec:	strb.w	r5, [sp, #51]	; 0x33
    51f0:	bl	ccc <ExFatFile::open(ExFatVolume*, char const*, int)>
    51f4:	cmp	r0, #0
    51f6:	beq.n	51a4 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x30>
    51f8:	mov	r0, sp
    51fa:	bl	137c <ExFatFile::remove()>
    51fe:	b.n	51a4 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]+0x30>
    5200:	.word	0x2000386c
    5204:	.word	0x20000174

00005208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    5208:	ldr.w	r3, [r1, #252]	; 0xfc
    520c:	cmp	r3, r2
    return new_record;
  }

  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    520e:	push	{r4, r5, r6, lr}
    5210:	mov	r6, r0
    Record ret;
    if (i > index_entries_) 
    5212:	bcc.n	5248 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x40>
    5214:	ldr	r0, [r1, #76]	; 0x4c
    5216:	mov	r5, r1
    5218:	mov	r4, r2
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    521a:	cbz	r0, 5254 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x4c>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    521c:	add.w	r4, r2, r2, lsl #2
    5220:	lsls	r1, r4, #4
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5222:	bl	25bc <FatFile::seekSet(unsigned long)>
    5226:	ldr	r0, [r5, #76]	; 0x4c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    5228:	cbz	r0, 5236 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    522a:	movs	r2, #80	; 0x50
    522c:	mov	r1, r6
    522e:	bl	217c <FatFile::read(void*, unsigned int)>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    5232:	mov	r0, r6
    5234:	pop	{r4, r5, r6, pc}
    5236:	ldr	r0, [r5, #80]	; 0x50
    5238:	cmp	r0, #0
    523a:	beq.n	5232 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    523c:	movs	r2, #80	; 0x50
    523e:	mov	r1, r6
    5240:	bl	514 <ExFatFile::read(void*, unsigned int)>
    5244:	mov	r0, r6
    5246:	pop	{r4, r5, r6, pc}
  // TODO(hubbe): Cache a few records for speed.
  Record MTPStorage_SD::ReadIndexRecord(uint32_t i) 
  {
    Record ret;
    if (i > index_entries_) 
    { memset(&ret, 0, sizeof(ret));
    5248:	movs	r2, #80	; 0x50
    524a:	movs	r1, #0
    524c:	bl	b58c <memset>
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    5250:	mov	r0, r6
    5252:	pop	{r4, r5, r6, pc}
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5254:	ldr	r0, [r1, #80]	; 0x50
    5256:	cbz	r0, 5266 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x5e>
    { memset(&ret, 0, sizeof(ret));
      return ret;
    }
    OpenIndex();
    mtp_lock_storage(true);
    index_.seek(sizeof(ret) * i);
    5258:	add.w	r4, r2, r2, lsl #2
    525c:	lsls	r2, r4, #4
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    525e:	movs	r3, #0
    5260:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
    5264:	b.n	5226 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
    5266:	add.w	r4, r4, r4, lsl #2
    526a:	mov	r0, r1
    526c:	bl	4fe8 <MTPStorage_SD::OpenIndex() [clone .part.41] [clone .constprop.64]>
    5270:	ldr	r0, [r5, #76]	; 0x4c
    5272:	lsls	r2, r4, #4
    5274:	mov	r1, r2
    5276:	cmp	r0, #0
    5278:	bne.n	5222 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    527a:	ldr	r0, [r5, #80]	; 0x50
    527c:	cmp	r0, #0
    527e:	bne.n	525e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x56>
    index_.read((char *)&ret, sizeof(ret));
    mtp_lock_storage(false);
    return ret;
  }
    5280:	mov	r0, r6
    5282:	pop	{r4, r5, r6, pc}

00005284 <MTPStorage_SD::GetNextObjectHandle()>:
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    5284:	push	{r4, r5, lr}
    while (true) {
      if (next_ == 0) return 0;
    5286:	ldr.w	r5, [r0, #260]	; 0x104
      next_ = 1;
    }
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    528a:	sub	sp, #84	; 0x54
    while (true) {
      if (next_ == 0) return 0;
    528c:	cbz	r5, 52da <MTPStorage_SD::GetNextObjectHandle()+0x56>
    528e:	mov	r4, r0
    5290:	b.n	52a4 <MTPStorage_SD::GetNextObjectHandle()+0x20>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
      if (follow_sibling_) 
      { next_ = r.sibling;
    5292:	ldr	r3, [sp, #8]
    5294:	str.w	r3, [r4, #260]	; 0x104
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    5298:	ldrb.w	r3, [sp, #14]
    529c:	cbnz	r3, 52d4 <MTPStorage_SD::GetNextObjectHandle()+0x50>
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    529e:	ldr.w	r5, [r4, #260]	; 0x104
    52a2:	cbz	r5, 52da <MTPStorage_SD::GetNextObjectHandle()+0x56>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    52a4:	mov	r2, r5
    52a6:	mov	r1, r4
    52a8:	mov	r0, sp
    52aa:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    52ae:	ldrb.w	r2, [r4, #264]	; 0x108
    52b2:	cmp	r2, #0
    52b4:	bne.n	5292 <MTPStorage_SD::GetNextObjectHandle()+0xe>
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    52b6:	ldr.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    52ba:	ldr.w	r1, [r4, #252]	; 0xfc
      if (follow_sibling_) 
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
    52be:	adds	r3, #1
    52c0:	str.w	r3, [r4, #260]	; 0x104
        if (next_ >= index_entries_) next_ = 0;
    52c4:	cmp	r3, r1
      }
      if (r.name[0]) return ret;
    52c6:	ldrb.w	r3, [sp, #14]
      { next_ = r.sibling;
      } 
      else 
      {
        next_++;
        if (next_ >= index_entries_) next_ = 0;
    52ca:	it	cs
    52cc:	strcs.w	r2, [r4, #260]	; 0x104
      }
      if (r.name[0]) return ret;
    52d0:	cmp	r3, #0
    52d2:	beq.n	529e <MTPStorage_SD::GetNextObjectHandle()+0x1a>
    }
  }
    52d4:	mov	r0, r5
    52d6:	add	sp, #84	; 0x54
    52d8:	pop	{r4, r5, pc}
  }

  uint32_t MTPStorage_SD::GetNextObjectHandle()
  {
    while (true) {
      if (next_ == 0) return 0;
    52da:	movs	r5, #0
        next_++;
        if (next_ >= index_entries_) next_ = 0;
      }
      if (r.name[0]) return ret;
    }
  }
    52dc:	mov	r0, r5
    52de:	add	sp, #84	; 0x54
    52e0:	pop	{r4, r5, pc}
    52e2:	nop

000052e4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    52e4:	push	{r4, r5, r6, lr}
    52e6:	sub	sp, #80	; 0x50
    52e8:	mov	r6, r2
    Record r = ReadIndexRecord(handle);
    52ea:	mov	r2, r1
    52ec:	mov	r1, r0
    52ee:	mov	r0, sp
      if (r.name[0]) return ret;
    }
  }

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    52f0:	mov	r4, r3
    52f2:	ldr	r5, [sp, #96]	; 0x60
    Record r = ReadIndexRecord(handle);
    52f4:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    52f8:	mov	r0, r6
    52fa:	add.w	r1, sp, #14
    52fe:	bl	ba74 <strcpy>
    *parent = r.parent;
    5302:	ldr	r2, [sp, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5304:	ldrb.w	r3, [sp, #12]

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    5308:	str	r2, [r5, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    530a:	cbnz	r3, 5314 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*)+0x30>
    530c:	ldr	r3, [sp, #4]
    530e:	str	r3, [r4, #0]
  }
    5310:	add	sp, #80	; 0x50
    5312:	pop	{r4, r5, r6, pc}
  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint32_t* size, uint32_t* parent)
  {
    Record r = ReadIndexRecord(handle);
    strcpy(name, r.name);
    *parent = r.parent;
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5314:	mov.w	r3, #4294967295
    5318:	str	r3, [r4, #0]
  }
    531a:	add	sp, #80	; 0x50
    531c:	pop	{r4, r5, r6, pc}
    531e:	nop

00005320 <MTPStorage_SD::GetSize(unsigned long)>:

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    5320:	push	{lr}
    5322:	sub	sp, #84	; 0x54
    return ReadIndexRecord(handle).child;
    5324:	mov	r2, r1
    5326:	mov	r1, r0
    5328:	mov	r0, sp
    532a:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    532e:	ldr	r0, [sp, #4]
    5330:	add	sp, #84	; 0x54
    5332:	ldr.w	pc, [sp], #4
    5336:	nop

00005338 <MTPStorage_SD::close()>:
      file_.write(data,bytes);
      mtp_lock_storage(false);
  }

  void MTPStorage_SD::close() 
  {
    5338:	ldr.w	r3, [r0, #156]	; 0x9c
    533c:	push	{r4, r5, lr}
    533e:	mov	r4, r0
    5340:	sub	sp, #84	; 0x54
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
    5342:	cbz	r3, 5374 <MTPStorage_SD::close()+0x3c>
    5344:	ldr	r5, [r3, #28]
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    5346:	add.w	r0, r4, #100	; 0x64
    534a:	bl	37ec <FsBaseFile::close()>
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    534e:	ldr.w	r2, [r4, #248]	; 0xf8
    5352:	mov	r0, sp
    5354:	mov	r1, r4
    5356:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    WriteIndexRecord(open_file_, r);
    535a:	mov	r2, sp
    535c:	ldr.w	r1, [r4, #248]	; 0xf8
    5360:	mov	r0, r4
    mtp_lock_storage(true);
    uint64_t size = file_.size();
    file_.close();
    mtp_lock_storage(false);
    Record r = ReadIndexRecord(open_file_);
    r.child = size;
    5362:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    5364:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    5368:	mvn.w	r3, #1
    536c:	str.w	r3, [r4, #248]	; 0xf8
  }
    5370:	add	sp, #84	; 0x54
    5372:	pop	{r4, r5, pc}
    5374:	ldr.w	r5, [r0, #160]	; 0xa0
    5378:	cmp	r5, #0
    537a:	beq.n	5346 <MTPStorage_SD::close()+0xe>
    537c:	ldr	r5, [r5, #16]
    537e:	b.n	5346 <MTPStorage_SD::close()+0xe>

00005380 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    5380:	cbz	r1, 53d0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x50>
    mtp_lock_storage(false);
    return ret;
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    5382:	push	{r4, r5, r6, lr}
    5384:	sub	sp, #80	; 0x50
    5386:	mov	r5, r2
    5388:	mov	r4, r0
    538a:	mov	r6, r3
    if (i == 0) 
    { strcpy(out, "/");
    }
    else 
    { Record tmp = ReadIndexRecord(i);
    538c:	mov	r2, r1
    538e:	mov	r1, r0
    5390:	mov	r0, sp
    5392:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      ConstructFilename(tmp.parent, out, len);
    5396:	mov	r3, r6
    5398:	mov	r0, r4
    539a:	mov	r2, r5
    539c:	ldr	r1, [sp, #0]
    539e:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strcat(out, "/");
    53a2:	mov	r0, r5
    53a4:	bl	bb40 <strlen>
    53a8:	adds	r3, r5, r0
    53aa:	mov	r4, r0
    53ac:	ldrb.w	r3, [r3, #-1]
    53b0:	cmp	r3, #47	; 0x2f
    53b2:	beq.n	53bc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x3c>
    53b4:	ldr	r3, [pc, #48]	; (53e8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    53b6:	adds	r4, #1
    53b8:	ldrh	r3, [r3, #0]
    53ba:	strh	r3, [r5, r0]
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    53bc:	add.w	r0, sp, #14
    53c0:	bl	bb40 <strlen>
    53c4:	add	r0, r4
    53c6:	adds	r0, #1
    53c8:	cmp	r0, r6
    53ca:	bcc.n	53d8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x58>
    }
  }
    53cc:	add	sp, #80	; 0x50
    53ce:	pop	{r4, r5, r6, pc}
  }

  void MTPStorage_SD::ConstructFilename(int i, char* out, int len) // construct filename rexursively
  {
    if (i == 0) 
    { strcpy(out, "/");
    53d0:	ldr	r3, [pc, #20]	; (53e8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x68>)
    53d2:	ldrh	r3, [r3, #0]
    53d4:	strh	r3, [r2, #0]
    53d6:	bx	lr
    }
    else 
    { Record tmp = ReadIndexRecord(i);
      ConstructFilename(tmp.parent, out, len);
      if (out[strlen(out)-1] != '/') strcat(out, "/");
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    53d8:	add.w	r1, sp, #14
    53dc:	mov	r0, r5
    53de:	bl	ba34 <strcat>
    }
  }
    53e2:	add	sp, #80	; 0x50
    53e4:	pop	{r4, r5, r6, pc}
    53e6:	nop
    53e8:	.word	0x20000184

000053ec <MTPStorage_SD::DeleteObject(unsigned long)>:
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    53ec:	adds	r2, r1, #1
    53ee:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53f2:	mov	r6, r1
    53f4:	sub	sp, #496	; 0x1f0
    53f6:	mov	r4, r0
    53f8:	ite	ne
    53fa:	movne	r5, r1
    53fc:	moveq	r5, #0
    53fe:	b.n	5410 <MTPStorage_SD::DeleteObject(unsigned long)+0x24>
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    5400:	ldr	r3, [sp, #84]	; 0x54
      if (!DeleteObject(r.child))  return false;
    5402:	mov	r1, r3
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
    5404:	cbz	r3, 5430 <MTPStorage_SD::DeleteObject(unsigned long)+0x44>
      if (!DeleteObject(r.child))  return false;
    5406:	ldr	r3, [r4, #0]
    5408:	ldr	r3, [r3, #52]	; 0x34
    540a:	blx	r3
    540c:	cmp	r0, #0
    540e:	beq.n	54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
    5410:	mov	r2, r5
    5412:	mov	r1, r4
    5414:	mov	r0, sp
    5416:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    541a:	movs	r2, #80	; 0x50
    541c:	mov	r1, sp
    541e:	add.w	r0, sp, r2
    5422:	bl	8310 <memcpy>
      if (!r.isdir) break;
    5426:	ldrb.w	r3, [sp, #92]	; 0x5c
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    542a:	mov	r0, r4
  {
    char filename[256];
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
    542c:	cmp	r3, #0
    542e:	bne.n	5400 <MTPStorage_SD::DeleteObject(unsigned long)+0x14>
      if (!DeleteObject(r.child))  return false;
    }

    // We can't actually delete the root folder,
    // but if we deleted everything else, return true.
    if (object == 0xFFFFFFFFUL) return true;
    5430:	adds	r3, r6, #1
    5432:	beq.n	54f6 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>

    ConstructFilename(object, filename, 256);
    5434:	mov.w	r3, #256	; 0x100
    5438:	mov	r1, r6
    543a:	mov	r0, r4
    543c:	add	r2, sp, #240	; 0xf0
    543e:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    bool success;
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    5442:	ldrb.w	r7, [sp, #92]	; 0x5c
    5446:	ldr	r3, [pc, #296]	; (5570 <MTPStorage_SD::DeleteObject(unsigned long)+0x184>)
    5448:	cmp	r7, #0
    544a:	beq.n	54fe <MTPStorage_SD::DeleteObject(unsigned long)+0x112>
    544c:	ldr.w	r7, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
           m_xVol ? m_xVol->rmdir(path) : false;
    5450:	cbz	r7, 54be <MTPStorage_SD::DeleteObject(unsigned long)+0xd2>
    5452:	add	r5, sp, #160	; 0xa0
    5454:	mov.w	lr, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5458:	add	r2, sp, #240	; 0xf0
    545a:	mov	r1, r7
    545c:	mov	r0, r5
    545e:	mov	r3, lr
    5460:	strb.w	lr, [r5]
    5464:	strb.w	lr, [r5, #1]
    5468:	strb.w	lr, [r5, #2]
    546c:	bl	2160 <FatFile::open(FatVolume*, char const*, int)>
    5470:	cbz	r0, 54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5472:	mov	r0, r5
    5474:	bl	2560 <FatFile::rmdir()>
    mtp_lock_storage(false);
    if (!success) return false;
    5478:	cbz	r0, 54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    
    r.name[0] = 0;
    547a:	movs	r3, #0
    int p = r.parent;
    547c:	ldr.w	r8, [sp, #80]	; 0x50
    WriteIndexRecord(object, r);
    5480:	add	r2, sp, #80	; 0x50
    5482:	mov	r1, r6
    5484:	mov	r0, r4
    mtp_lock_storage(true);
    if (r.isdir) success = sd.rmdir(filename); else  success = sd.remove(filename);
    mtp_lock_storage(false);
    if (!success) return false;
    
    r.name[0] = 0;
    5486:	strb.w	r3, [sp, #94]	; 0x5e
    int p = r.parent;
    WriteIndexRecord(object, r);
    548a:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record tmp = ReadIndexRecord(p);
    548e:	mov	r2, r8
    5490:	mov	r1, r4
    5492:	mov	r0, r5
    5494:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.child == object) 
    5498:	ldr	r7, [r5, #4]
    549a:	cmp	r6, r7
    549c:	beq.n	54e8 <MTPStorage_SD::DeleteObject(unsigned long)+0xfc>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    549e:	cbz	r7, 54f6 <MTPStorage_SD::DeleteObject(unsigned long)+0x10a>
      { tmp = ReadIndexRecord(c);
    54a0:	mov	r2, r7
    54a2:	mov	r1, r4
    54a4:	mov	r0, sp
    54a6:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    54aa:	movs	r2, #80	; 0x50
    54ac:	mov	r1, sp
    54ae:	mov	r0, r5
    54b0:	bl	8310 <memcpy>
        if (tmp.sibling == object) 
    54b4:	ldr	r3, [r5, #8]
    54b6:	cmp	r6, r3
    54b8:	beq.n	5554 <MTPStorage_SD::DeleteObject(unsigned long)+0x168>
    { tmp.child = r.sibling;
      WriteIndexRecord(p, tmp);
    } 
    else 
    { int c = tmp.child;
      while (c) 
    54ba:	mov	r7, r3
    54bc:	b.n	549e <MTPStorage_SD::DeleteObject(unsigned long)+0xb2>
    54be:	ldr.w	r1, [r3, #1148]	; 0x47c
    54c2:	cbz	r1, 54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    54c4:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    54c6:	add	r2, sp, #240	; 0xf0
    54c8:	mov	r3, r7
    54ca:	strb.w	r7, [r5, #49]	; 0x31
    54ce:	mov	r0, r5
    54d0:	strb.w	r7, [r5, #50]	; 0x32
    54d4:	strb.w	r7, [r5, #51]	; 0x33
    54d8:	bl	ccc <ExFatFile::open(ExFatVolume*, char const*, int)>
    54dc:	cmp	r0, #0
    54de:	bne.n	5566 <MTPStorage_SD::DeleteObject(unsigned long)+0x17a>
    Record r;
    while (true) {
      r = ReadIndexRecord(object == 0xFFFFFFFFUL ? 0 : object);
      if (!r.isdir) break;
      if (!r.child) break;
      if (!DeleteObject(r.child))  return false;
    54e0:	movs	r0, #0
        { c = tmp.sibling;
        }
      }
    }
    return true;
  }
    54e2:	add	sp, #496	; 0x1f0
    54e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    54e8:	ldr	r3, [sp, #88]	; 0x58
      WriteIndexRecord(p, tmp);
    54ea:	mov	r2, r5
    54ec:	mov	r1, r8
    54ee:	mov	r0, r4
    r.name[0] = 0;
    int p = r.parent;
    WriteIndexRecord(object, r);
    Record tmp = ReadIndexRecord(p);
    if (tmp.child == object) 
    { tmp.child = r.sibling;
    54f0:	str	r3, [r5, #4]
      WriteIndexRecord(p, tmp);
    54f2:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    54f6:	movs	r0, #1
  }
    54f8:	add	sp, #496	; 0x1f0
    54fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54fe:	ldr.w	lr, [r3, #1144]	; 0x478
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
           m_xVol ? m_xVol->remove(path) : false;
    5502:	cmp.w	lr, #0
    5506:	beq.n	5528 <MTPStorage_SD::DeleteObject(unsigned long)+0x13c>
    5508:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    550a:	add	r2, sp, #240	; 0xf0
    550c:	mov	r1, lr
    550e:	movs	r3, #1
    5510:	mov	r0, r5
    5512:	strb	r7, [r5, #0]
    5514:	strb	r7, [r5, #1]
    5516:	strb	r7, [r5, #2]
    5518:	bl	2160 <FatFile::open(FatVolume*, char const*, int)>
    551c:	cmp	r0, #0
    551e:	beq.n	54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5520:	mov	r0, r5
    5522:	bl	31e8 <FatFile::remove()>
    5526:	b.n	5478 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    5528:	ldr.w	r1, [r3, #1148]	; 0x47c
    552c:	cmp	r1, #0
    552e:	beq.n	54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    5530:	add	r5, sp, #160	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const ExChar_t* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5532:	add	r2, sp, #240	; 0xf0
    5534:	movs	r3, #1
    5536:	strb.w	lr, [r5, #49]	; 0x31
    553a:	mov	r0, r5
    553c:	strb.w	lr, [r5, #50]	; 0x32
    5540:	strb.w	lr, [r5, #51]	; 0x33
    5544:	bl	ccc <ExFatFile::open(ExFatVolume*, char const*, int)>
    5548:	cmp	r0, #0
    554a:	beq.n	54e0 <MTPStorage_SD::DeleteObject(unsigned long)+0xf4>
    554c:	mov	r0, r5
    554e:	bl	137c <ExFatFile::remove()>
    5552:	b.n	5478 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    5554:	ldr	r3, [sp, #88]	; 0x58
          WriteIndexRecord(c, tmp);
    5556:	mov	r0, r4
    5558:	mov	r2, r5
    555a:	mov	r1, r7
    else 
    { int c = tmp.child;
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
    555c:	str	r3, [r5, #8]
          WriteIndexRecord(c, tmp);
    555e:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        else 
        { c = tmp.sibling;
        }
      }
    }
    return true;
    5562:	movs	r0, #1
      while (c) 
      { tmp = ReadIndexRecord(c);
        if (tmp.sibling == object) 
        { tmp.sibling = r.sibling;
          WriteIndexRecord(c, tmp);
          break;
    5564:	b.n	54e2 <MTPStorage_SD::DeleteObject(unsigned long)+0xf6>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const ExChar_t* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5566:	mov	r0, r5
    5568:	bl	1454 <ExFatFile::rmdir()>
    556c:	b.n	5478 <MTPStorage_SD::DeleteObject(unsigned long)+0x8c>
    556e:	nop
    5570:	.word	0x2000386c

00005574 <MTPStorage_SD::rename(unsigned long, char const*)>:
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    5574:	push	{r4, r5, r6, lr}
    5576:	sub.w	sp, sp, #648	; 0x288
    557a:	mov	r4, r0
    557c:	mov	r5, r1
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    557e:	mov.w	r3, #256	; 0x100
    WriteIndexRecord(open_file_, r);
    open_file_ = 0xFFFFFFFEUL;
  }

  void MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[256];
    5582:	mov	r6, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    5584:	add	r2, sp, #136	; 0x88
    5586:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    558a:	mov	r2, r5
    558c:	mov	r1, r4
    558e:	add	r0, sp, #56	; 0x38
    5590:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(p1.name,name);
    5594:	mov	r1, r6
    5596:	add.w	r0, sp, #70	; 0x46
    559a:	bl	ba74 <strcpy>
    WriteIndexRecord(handle, p1);
    559e:	mov	r0, r4
    55a0:	add	r2, sp, #56	; 0x38
    55a2:	mov	r1, r5
    55a4:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, 256);
    55a8:	mov	r0, r4
    55aa:	mov.w	r3, #256	; 0x100
    55ae:	mov	r1, r5
    55b0:	add	r2, sp, #392	; 0x188
    55b2:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    55b6:	ldr	r3, [pc, #116]	; (562c <MTPStorage_SD::rename(unsigned long, char const*)+0xb8>)
    55b8:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    55bc:	cbz	r4, 55f4 <MTPStorage_SD::rename(unsigned long, char const*)+0x80>
    55be:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    55c0:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    55c4:	add	r2, sp, #136	; 0x88
    55c6:	mov	r0, sp
    55c8:	mov	r1, r4
    55ca:	mov	r3, r5
    55cc:	strb.w	r5, [sp]
    55d0:	strb.w	r5, [sp, #1]
    55d4:	strb.w	r5, [sp, #2]
    55d8:	bl	2098 <FatFile::open(FatFile*, char const*, int)>
    55dc:	cbnz	r0, 55e4 <MTPStorage_SD::rename(unsigned long, char const*)+0x70>

    sd.rename(oldName,newName);
  }
    55de:	add.w	sp, sp, #648	; 0x288
    55e2:	pop	{r4, r5, r6, pc}
    55e4:	add	r2, sp, #392	; 0x188
    55e6:	mov	r1, r4
    55e8:	mov	r0, sp
    55ea:	bl	237c <FatFile::rename(FatFile*, char const*)>
    55ee:	add.w	sp, sp, #648	; 0x288
    55f2:	pop	{r4, r5, r6, pc}
    55f4:	ldr.w	r1, [r3, #1148]	; 0x47c
    55f8:	cmp	r1, #0
    55fa:	beq.n	55de <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    55fc:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5600:	add	r2, sp, #136	; 0x88
    5602:	mov	r3, r4
    5604:	mov	r0, sp
    5606:	mov	r1, r5
    5608:	strb.w	r4, [sp, #49]	; 0x31
    560c:	strb.w	r4, [sp, #50]	; 0x32
    5610:	strb.w	r4, [sp, #51]	; 0x33
    5614:	bl	bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
    5618:	cmp	r0, #0
    561a:	beq.n	55de <MTPStorage_SD::rename(unsigned long, char const*)+0x6a>
    561c:	add	r2, sp, #392	; 0x188
    561e:	mov	r1, r5
    5620:	mov	r0, sp
    5622:	bl	18a0 <ExFatFile::rename(ExFatFile*, char const*)>
    5626:	add.w	sp, sp, #648	; 0x288
    562a:	pop	{r4, r5, r6, pc}
    562c:	.word	0x2000386c

00005630 <MTPStorage_SD::move(unsigned long, unsigned long)>:

  void MTPStorage_SD::move(uint32_t handle, uint32_t newParent ) 
  { char oldName[256];
    5630:	push	{r4, r5, r6, lr}
    5632:	sub.w	sp, sp, #728	; 0x2d8
    5636:	mov	r5, r0
    5638:	mov	r6, r1
    563a:	mov	r4, r2
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    563c:	mov.w	r3, #256	; 0x100
    5640:	add	r2, sp, #216	; 0xd8
    5642:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record p1 = ReadIndexRecord(handle);
    5646:	mov	r2, r6
    5648:	mov	r1, r5
    564a:	add	r0, sp, #56	; 0x38
    564c:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    5650:	adds	r3, r4, #1
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    5652:	mov	r1, r5
    5654:	add	r0, sp, #136	; 0x88
    char newName[256];

    ConstructFilename(handle, oldName, 256);
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    5656:	it	eq
    5658:	moveq	r4, #0
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory
    565a:	mov	r2, r4
    565c:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    p1.sibling = p2.child;
    5660:	ldr	r3, [sp, #140]	; 0x8c
    p1.parent = newParent;

    p2.child = handle; 
    WriteIndexRecord(handle, p1);
    5662:	add	r2, sp, #56	; 0x38
    5664:	mov	r1, r6
    5666:	mov	r0, r5
    Record p1 = ReadIndexRecord(handle);

    if (newParent == 0xFFFFFFFFUL) newParent = 0;
    Record p2 = ReadIndexRecord(newParent); // is pointing to last object in directory

    p1.sibling = p2.child;
    5668:	str	r3, [sp, #64]	; 0x40
    p1.parent = newParent;
    566a:	str	r4, [sp, #56]	; 0x38

    p2.child = handle; 
    566c:	str	r6, [sp, #140]	; 0x8c
    WriteIndexRecord(handle, p1);
    566e:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent, p2);
    5672:	mov	r1, r4
    5674:	add	r2, sp, #136	; 0x88
    5676:	mov	r0, r5
    5678:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>

    ConstructFilename(handle, newName, 256);
    567c:	mov.w	r3, #256	; 0x100
    5680:	mov	r1, r6
    5682:	mov	r0, r5
    5684:	add	r2, sp, #472	; 0x1d8
    5686:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    568a:	ldr	r3, [pc, #116]	; (5700 <MTPStorage_SD::move(unsigned long, unsigned long)+0xd0>)
    568c:	ldr.w	r4, [r3, #1144]	; 0x478
    5690:	cbz	r4, 56c8 <MTPStorage_SD::move(unsigned long, unsigned long)+0x98>
    5692:	movs	r5, #0
    return truncate(path.c_str(), length);
  }
#endif  // ENABLE_ARDUINO_STRING

 private:
  FatFile* vwd() {return &m_vwd;}
    5694:	addw	r4, r4, #1084	; 0x43c
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    FatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5698:	add	r2, sp, #216	; 0xd8
    569a:	mov	r0, sp
    569c:	mov	r1, r4
    569e:	mov	r3, r5
    56a0:	strb.w	r5, [sp]
    56a4:	strb.w	r5, [sp, #1]
    56a8:	strb.w	r5, [sp, #2]
    56ac:	bl	2098 <FatFile::open(FatFile*, char const*, int)>
    56b0:	cbnz	r0, 56b8 <MTPStorage_SD::move(unsigned long, unsigned long)+0x88>
    sd.rename(oldName,newName);
  }
    56b2:	add.w	sp, sp, #728	; 0x2d8
    56b6:	pop	{r4, r5, r6, pc}
    56b8:	add	r2, sp, #472	; 0x1d8
    56ba:	mov	r1, r4
    56bc:	mov	r0, sp
    56be:	bl	237c <FatFile::rename(FatFile*, char const*)>
    56c2:	add.w	sp, sp, #728	; 0x2d8
    56c6:	pop	{r4, r5, r6, pc}
    56c8:	ldr.w	r1, [r3, #1148]	; 0x47c
    56cc:	cmp	r1, #0
    56ce:	beq.n	56b2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
  bool rmdir(const char* path);
#endif  //  USE_EXFAT_UNICODE_NAMES

 private:
  friend ExFatFile;
  ExFatFile* vwd() {return &m_vwd;}
    56d0:	add.w	r5, r1, #1088	; 0x440
   *
   * \return true for success or false for failure.
   */
  bool rename(const ExChar_t* oldPath, const ExChar_t* newPath) {
    ExFatFile file;
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    56d4:	add	r2, sp, #216	; 0xd8
    56d6:	mov	r3, r4
    56d8:	mov	r0, sp
    56da:	mov	r1, r5
    56dc:	strb.w	r4, [sp, #49]	; 0x31
    56e0:	strb.w	r4, [sp, #50]	; 0x32
    56e4:	strb.w	r4, [sp, #51]	; 0x33
    56e8:	bl	bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
    56ec:	cmp	r0, #0
    56ee:	beq.n	56b2 <MTPStorage_SD::move(unsigned long, unsigned long)+0x82>
    56f0:	add	r2, sp, #472	; 0x1d8
    56f2:	mov	r1, r5
    56f4:	mov	r0, sp
    56f6:	bl	18a0 <ExFatFile::rename(ExFatFile*, char const*)>
    56fa:	add.w	sp, sp, #728	; 0x2d8
    56fe:	pop	{r4, r5, r6, pc}
    5700:	.word	0x2000386c

00005704 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    5704:	ldr.w	r3, [r0, #248]	; 0xf8
    5708:	cmp	r3, r1
      if(((strlen(out)+strlen(tmp.name)+1) < (unsigned) len)) strcat(out, tmp.name);
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    570a:	push	{r4, r5, r6, r7, lr}
    570c:	sub	sp, #260	; 0x104
    if (open_file_ == i && mode_ == mode) return;
    570e:	beq.n	574c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x48>
    5710:	mov	r4, r0
    char filename[256];
    ConstructFilename(i, filename, 256);
    5712:	mov.w	r3, #256	; 0x100
    5716:	mov	r6, r2
    5718:	mov	r2, sp
    571a:	mov	r5, r1
    571c:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5720:	ldr.w	r3, [r4, #156]	; 0x9c
    mtp_lock_storage(true);
    if(file_) file_.close();
    5724:	add.w	r7, r4, #100	; 0x64
    5728:	cbz	r3, 5756 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x52>
    572a:	mov	r0, r7
    572c:	bl	37ec <FsBaseFile::close()>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    5730:	ldr	r3, [pc, #44]	; (5760 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x5c>)
    5732:	ldr	r1, [r3, #0]
    5734:	cbz	r1, 5740 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5736:	mov	r2, sp
    5738:	mov	r0, r7
    573a:	mov	r3, r6
    573c:	bl	389c <FsBaseFile::open(FsVolume*, char const*, int)>
    file_.open(filename,mode);
    open_file_ = i;
    5740:	str.w	r5, [r4, #248]	; 0xf8
    mode_ = mode;
    5744:	str.w	r6, [r4, #244]	; 0xf4
    mtp_lock_storage(false);
  }
    5748:	add	sp, #260	; 0x104
    574a:	pop	{r4, r5, r6, r7, pc}
    }
  }

  void MTPStorage_SD::OpenFileByIndex(uint32_t i, uint32_t mode) 
  {
    if (open_file_ == i && mode_ == mode) return;
    574c:	ldr.w	r3, [r0, #244]	; 0xf4
    5750:	cmp	r3, r2
    5752:	bne.n	5710 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0xc>
    5754:	b.n	5748 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x44>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5756:	ldr.w	r3, [r4, #160]	; 0xa0
    575a:	cmp	r3, #0
    575c:	bne.n	572a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x26>
    575e:	b.n	5730 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x2c>
    5760:	.word	0x20003824

00005764 <MTPStorage_SD::Create(unsigned long, bool, char const*)>:
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5764:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    5768:	cmp.w	r1, #4294967295
    576c:	ite	ne
    576e:	movne	r6, r1
    5770:	moveq	r6, #0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5772:	sub	sp, #476	; 0x1dc
    5774:	mov	r5, r3
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    5776:	mov	r1, r0
    }
    return true;
  }

  uint32_t MTPStorage_SD::Create(uint32_t parent,  bool folder, const char* filename)
  {
    5778:	mov	r4, r0
    577a:	mov	r7, r2
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    577c:	add	r0, sp, #56	; 0x38
    577e:	mov	r2, r6
    5780:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    if (strlen(filename) > 62) return 0;
    5784:	mov	r0, r5
    5786:	bl	bb40 <strlen>
    578a:	cmp	r0, #62	; 0x3e
    578c:	bls.n	5798 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x34>
    578e:	movs	r5, #0
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    }
    return ret;
  }
    5790:	mov	r0, r5
    5792:	add	sp, #476	; 0x1dc
    5794:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    5798:	adds	r2, r0, #1
    579a:	mov	r1, r5
    579c:	add.w	r0, sp, #150	; 0x96
    r.parent = parent;
    r.child = 0;
    57a0:	mov.w	r8, #0
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    57a4:	bl	8310 <memcpy>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    57a8:	ldr.w	r5, [r4, #252]	; 0xfc
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    57ac:	ldr	r3, [sp, #60]	; 0x3c
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    57ae:	mov.w	r9, #1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    57b2:	adds	r2, r5, #1
    WriteIndexRecord(new_record, r);
    57b4:	mov	r1, r5
    57b6:	mov	r0, r4
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    57b8:	str	r3, [sp, #144]	; 0x90
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    57ba:	str.w	r2, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    57be:	add	r2, sp, #136	; 0x88
    if (parent == 0xFFFFFFFFUL) parent = 0;
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    57c0:	str	r6, [sp, #136]	; 0x88
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    57c2:	strb.w	r7, [sp, #148]	; 0x94
    Record p = ReadIndexRecord(parent);
    Record r;
    if (strlen(filename) > 62) return 0;
    strcpy(r.name, filename);
    r.parent = parent;
    r.child = 0;
    57c6:	str.w	r8, [sp, #140]	; 0x8c
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    57ca:	strb.w	r9, [sp, #149]	; 0x95
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    WriteIndexRecord(new_record, r);
    57ce:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    57d2:	mov	r0, r4
    57d4:	add	r2, sp, #56	; 0x38
    57d6:	mov	r1, r6
    r.child = 0;
    r.sibling = p.child;
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    57d8:	str	r5, [sp, #60]	; 0x3c
    WriteIndexRecord(parent, p);
    57da:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    57de:	mov	r0, r4
    r.isdir = folder;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    57e0:	cbnz	r7, 57f4 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x90>
      sd.mkdir(filename);
      mtp_lock_storage(false);
    } 
    else 
    {
      OpenFileByIndex(ret, FILE_WRITE);
    57e2:	movw	r2, #16898	; 0x4202
    57e6:	mov	r1, r5
    57e8:	bl	5704 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    }
    return ret;
  }
    57ec:	mov	r0, r5
    57ee:	add	sp, #476	; 0x1dc
    57f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret = p.child = AppendIndexRecord(r);
    WriteIndexRecord(parent, p);
    if (folder) 
    {
      char filename[256];
      ConstructFilename(ret, filename, 256);
    57f4:	mov.w	r3, #256	; 0x100
    57f8:	mov	r1, r5
    57fa:	add	r2, sp, #216	; 0xd8
    57fc:	bl	5380 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5800:	ldr	r3, [pc, #68]	; (5848 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xe4>)
    5802:	ldr.w	r4, [r3, #1144]	; 0x478
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5806:	cbz	r4, 5824 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0xc0>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    5808:	mov	r3, r9
    580a:	add	r2, sp, #216	; 0xd8
    580c:	addw	r1, r4, #1084	; 0x43c
    5810:	mov	r0, sp
    5812:	strb.w	r8, [sp]
    5816:	strb.w	r8, [sp, #1]
    581a:	strb.w	r8, [sp, #2]
    581e:	bl	1fd0 <FatFile::mkdir(FatFile*, char const*, bool)>
    5822:	b.n	5790 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    5824:	ldr.w	r1, [r3, #1148]	; 0x47c
    5828:	cmp	r1, #0
    582a:	beq.n	5790 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const ExChar_t* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    582c:	mov	r3, r9
    582e:	add	r2, sp, #216	; 0xd8
    5830:	add.w	r1, r1, #1088	; 0x440
    5834:	mov	r0, sp
    5836:	strb.w	r4, [sp, #49]	; 0x31
    583a:	strb.w	r4, [sp, #50]	; 0x32
    583e:	strb.w	r4, [sp, #51]	; 0x33
    5842:	bl	17c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5846:	b.n	5790 <MTPStorage_SD::Create(unsigned long, bool, char const*)+0x2c>
    5848:	.word	0x2000386c

0000584c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    584c:	push	{r3, r4, r5, r6, r7, lr}
    584e:	mov	r4, r0
    5850:	mov	r7, r2
    OpenFileByIndex(handle);
    5852:	movs	r2, #0
  {
    return ReadIndexRecord(handle).child;
  }

  void MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    5854:	mov	r5, r3
    5856:	ldr	r6, [sp, #24]
    OpenFileByIndex(handle);
    5858:	bl	5704 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    585c:	ldr.w	r0, [r4, #156]	; 0x9c
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    5860:	cbz	r0, 588c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x40>
   * \param[in] pos The new position in bytes from the beginning of the file.
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5862:	mov	r1, r7
    5864:	bl	25bc <FatFile::seekSet(unsigned long)>
    5868:	ldr.w	r0, [r4, #156]	; 0x9c
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
    586c:	cbz	r0, 587a <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x2e>
    586e:	mov	r2, r6
    5870:	mov	r1, r5
    mtp_lock_storage(true);
    file_.seek(pos);
    file_.read(out,bytes);
    mtp_lock_storage(false);
  }
    5872:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5876:	b.w	217c <FatFile::read(void*, unsigned int)>
    587a:	ldr.w	r0, [r4, #160]	; 0xa0
    587e:	cbz	r0, 58a0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x54>
    5880:	mov	r2, r6
    5882:	mov	r1, r5
    5884:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5888:	b.w	514 <ExFatFile::read(void*, unsigned int)>
   *
   * \return true for success or false for failure.
   */
  bool seekSet(uint64_t pos) {
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
           m_xFile ? m_xFile->seekSet(pos) : false;
    588c:	ldr.w	r1, [r4, #160]	; 0xa0
    5890:	cbz	r1, 589e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x52>
    5892:	mov	r3, r0
    5894:	mov	r2, r7
    5896:	mov	r0, r1
    5898:	bl	6e8 <ExFatFile::seekSet(unsigned long long)>
    589c:	b.n	5868 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1c>
    589e:	pop	{r3, r4, r5, r6, r7, pc}
    58a0:	pop	{r3, r4, r5, r6, r7, pc}
    58a2:	nop

000058a4 <MTPStorage_SD::ScanDir(unsigned long)>:
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    58a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58a8:	sub	sp, #164	; 0xa4
    Record record = ReadIndexRecord(i);
    58aa:	mov	r2, r1
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    58ac:	mov	r4, r0
    58ae:	mov	r5, r1
    Record record = ReadIndexRecord(i);
    58b0:	mov	r1, r0
    58b2:	mov	r0, sp
    58b4:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    58b8:	ldrb.w	r3, [sp, #12]
    58bc:	cbz	r3, 58c4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
    58be:	ldrb.w	r2, [sp, #13]
    58c2:	cbz	r2, 58ca <MTPStorage_SD::ScanDir(unsigned long)+0x26>
      }
      record.scanned = true;
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }
    58c4:	add	sp, #164	; 0xa4
    58c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    Record record = ReadIndexRecord(i);
    if (record.isdir && !record.scanned) {
      OpenFileByIndex(i);
    58ca:	mov	r1, r5
    58cc:	mov	r0, r4
    58ce:	bl	5704 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    58d2:	ldr.w	r3, [r4, #156]	; 0x9c
    58d6:	cmp	r3, #0
    58d8:	beq.n	599c <MTPStorage_SD::ScanDir(unsigned long)+0xf8>
    strcpy(r.name, "/");
    AppendIndexRecord(r);
  }

  void MTPStorage_SD::ScanDir(uint32_t i) 
  {
    58da:	mov.w	r9, #0
    58de:	add.w	r6, r4, #180	; 0xb4
    58e2:	add.w	r8, r4, #100	; 0x64
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    58e6:	mov	r7, r9
    58e8:	b.n	5918 <MTPStorage_SD::ScanDir(unsigned long)+0x74>

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    58ea:	str	r7, [sp, #84]	; 0x54
        r.scanned = false;
    58ec:	strb.w	r7, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    58f0:	strb.w	r7, [sp, #94]	; 0x5e
    return m_fFile ? m_fFile->getName(name, len) :
    58f4:	movs	r2, #64	; 0x40
    58f6:	add.w	r1, sp, #94	; 0x5e
    58fa:	bl	2e5c <FatFile::getName(char*, unsigned int)>
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    58fe:	ldr.w	r1, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    5902:	mov	r0, r4
    5904:	add	r2, sp, #80	; 0x50
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    5906:	adds	r3, r1, #1
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
    5908:	mov	r9, r1
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  {
    uint32_t new_record = index_entries_++;
    590a:	str.w	r3, [r4, #252]	; 0xfc
    WriteIndexRecord(new_record, r);
    590e:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
    5912:	mov	r0, r6
    5914:	bl	37ec <FsBaseFile::close()>
      if (!file_) return;
      int sibling = 0;
      while (true) 
      {
        mtp_lock_storage(true);
        child_.openNext(&file_);
    5918:	movs	r2, #0
    591a:	mov	r1, r8
    591c:	mov	r0, r6
    591e:	bl	391c <FsBaseFile::openNext(FsBaseFile*, int)>
    5922:	ldr.w	r0, [r4, #236]	; 0xec
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5926:	cbz	r0, 5950 <MTPStorage_SD::ScanDir(unsigned long)+0xac>
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    5928:	str	r5, [sp, #80]	; 0x50
        r.sibling = sibling;
    592a:	str.w	r9, [sp, #88]	; 0x58
    592e:	ldrb	r3, [r0, #0]
    5930:	and.w	r3, r3, #112	; 0x70
        r.isdir = child_.isDirectory();
    5934:	cmp	r3, #0
    5936:	ite	ne
    5938:	movne	r2, #1
    593a:	moveq	r2, #0
    593c:	strb.w	r2, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    5940:	bne.n	58ea <MTPStorage_SD::ScanDir(unsigned long)+0x46>
    5942:	ldr	r2, [r0, #28]
        r.scanned = false;
    5944:	strb.w	r3, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5948:	strb.w	r3, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    594c:	str	r2, [sp, #84]	; 0x54
    594e:	b.n	58f4 <MTPStorage_SD::ScanDir(unsigned long)+0x50>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    5950:	ldr.w	r3, [r4, #240]	; 0xf0
    5954:	cbz	r3, 59a6 <MTPStorage_SD::ScanDir(unsigned long)+0x102>
    5956:	ldrb.w	r2, [r3, #49]	; 0x31
        mtp_lock_storage(false);
        
        if(!child_) break;

        Record r;
        r.parent = i;
    595a:	str	r5, [sp, #80]	; 0x50
    595c:	and.w	r2, r2, #80	; 0x50
        r.sibling = sibling;
    5960:	str.w	r9, [sp, #88]	; 0x58
        r.isdir = child_.isDirectory();
    5964:	cmp	r2, #0
    5966:	ite	ne
    5968:	movne	r1, #1
    596a:	moveq	r1, #0
    596c:	strb.w	r1, [sp, #92]	; 0x5c
        r.child = r.isdir ? 0 : child_.size();
    5970:	bne.n	5990 <MTPStorage_SD::ScanDir(unsigned long)+0xec>
    5972:	ldr	r1, [r3, #16]
        r.scanned = false;
    5974:	strb.w	r2, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5978:	strb.w	r2, [sp, #94]	; 0x5e

        Record r;
        r.parent = i;
        r.sibling = sibling;
        r.isdir = child_.isDirectory();
        r.child = r.isdir ? 0 : child_.size();
    597c:	str	r1, [sp, #84]	; 0x54
    return m_fFile ? m_fFile->getName(name, len) :
           m_xFile ? m_xFile->getName(name, len) : 0;
    597e:	cmp	r3, #0
    5980:	beq.n	58fe <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    5982:	mov	r0, r3
    5984:	movs	r2, #64	; 0x40
    5986:	add.w	r1, sp, #94	; 0x5e
    598a:	bl	348 <ExFatFile::getName(char*, unsigned int)>
    598e:	b.n	58fe <MTPStorage_SD::ScanDir(unsigned long)+0x5a>
    5990:	str	r0, [sp, #84]	; 0x54
        r.scanned = false;
    5992:	strb.w	r0, [sp, #93]	; 0x5d
   *             must be at least 13 bytes long.  The file's name will be
   *             truncated if the file's name is too long.
   * \return The length of the returned string.
   */
  size_t getName(char* name, size_t len) {
    *name = 0;
    5996:	strb.w	r0, [sp, #94]	; 0x5e
    599a:	b.n	597e <MTPStorage_SD::ScanDir(unsigned long)+0xda>
  bool isHidden() {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() {return m_fFile || m_xFile;}
    599c:	ldr.w	r3, [r4, #160]	; 0xa0
    59a0:	cmp	r3, #0
    59a2:	bne.n	58da <MTPStorage_SD::ScanDir(unsigned long)+0x36>
    59a4:	b.n	58c4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    59a6:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    59a8:	mov	r2, sp
    59aa:	mov	r1, r5
    59ac:	mov	r0, r4
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
      record.child = sibling;
    59ae:	str.w	r9, [sp, #4]
        r.scanned = false;
        child_.getName(r.name, 64);
        sibling = AppendIndexRecord(r);
        child_.close();
      }
      record.scanned = true;
    59b2:	strb.w	r3, [sp, #13]
      record.child = sibling;
      WriteIndexRecord(i, record);
    59b6:	bl	510c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    59ba:	b.n	58c4 <MTPStorage_SD::ScanDir(unsigned long)+0x20>

000059bc <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]>:
    }
  }

  void MTPStorage_SD::ScanAll() 
    59bc:	push	{r3, r4, r5, lr}
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    59be:	movs	r2, #1
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    59c0:	ldrb.w	r3, [r0, #256]	; 0x100
      record.child = sibling;
      WriteIndexRecord(i, record);
    }
  }

  void MTPStorage_SD::ScanAll() 
    59c4:	mov	r5, r0
  {
    if (all_scanned_) return;
    all_scanned_ = true;
    59c6:	strb.w	r2, [r0, #257]	; 0x101
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    59ca:	cbz	r3, 59e8 <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]+0x2c>
  {
    if (all_scanned_) return;
    all_scanned_ = true;

    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
    59cc:	ldr.w	r3, [r5, #252]	; 0xfc
    59d0:	cbz	r3, 59e6 <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]+0x2a>
    59d2:	movs	r4, #0
    59d4:	mov	r1, r4
    59d6:	mov	r0, r5
    59d8:	bl	58a4 <MTPStorage_SD::ScanDir(unsigned long)>
    59dc:	adds	r4, #1
    59de:	ldr.w	r3, [r5, #252]	; 0xfc
    59e2:	cmp	r3, r4
    59e4:	bhi.n	59d4 <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]+0x18>
    59e6:	pop	{r3, r4, r5, pc}
    59e8:	bl	5174 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]>
    59ec:	b.n	59cc <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]+0x10>
    59ee:	nop

000059f0 <MTPStorage_SD::StartGetObjectHandles(unsigned long)>:
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    59f0:	ldrb.w	r3, [r0, #256]	; 0x100
    GenerateIndex();
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(i);
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    59f4:	push	{r4, r5, lr}
    59f6:	mov	r4, r0
    59f8:	sub	sp, #84	; 0x54
    59fa:	mov	r5, r1
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex()
  {
    if (index_generated) return;
    59fc:	cbz	r3, 5a3e <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4e>
  }

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    59fe:	cbz	r5, 5a28 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x38>
    { if (parent == 0xFFFFFFFF) parent = 0;
    5a00:	adds	r3, r5, #1

      ScanDir(parent);
    5a02:	mov	r0, r4

  void MTPStorage_SD::StartGetObjectHandles(uint32_t parent) 
  {
    GenerateIndex();
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = 0;
    5a04:	it	eq
    5a06:	moveq	r5, #0

      ScanDir(parent);
    5a08:	mov	r1, r5
    5a0a:	bl	58a4 <MTPStorage_SD::ScanDir(unsigned long)>
      follow_sibling_ = true;
    5a0e:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    5a10:	mov	r2, r5
    5a12:	mov	r1, r4
    GenerateIndex();
    if (parent) 
    { if (parent == 0xFFFFFFFF) parent = 0;

      ScanDir(parent);
      follow_sibling_ = true;
    5a14:	strb.w	r3, [r4, #264]	; 0x108
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    5a18:	mov	r0, sp
    5a1a:	bl	5208 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5a1e:	ldr	r3, [sp, #4]
    5a20:	str.w	r3, [r4, #260]	; 0x104
    else 
    { ScanAll();
      follow_sibling_ = false;
      next_ = 1;
    }
  }
    5a24:	add	sp, #84	; 0x54
    5a26:	pop	{r4, r5, pc}
    }
  }

  void MTPStorage_SD::ScanAll() 
  {
    if (all_scanned_) return;
    5a28:	ldrb.w	r3, [r4, #257]	; 0x101
    5a2c:	cbz	r3, 5a44 <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x54>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5a2e:	movs	r2, #0
      next_ = 1;
    5a30:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5a32:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    5a36:	str.w	r3, [r4, #260]	; 0x104
    }
  }
    5a3a:	add	sp, #84	; 0x54
    5a3c:	pop	{r4, r5, pc}
    5a3e:	bl	5174 <MTPStorage_SD::GenerateIndex() [clone .part.42] [clone .constprop.58]>
    5a42:	b.n	59fe <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0xe>
    5a44:	mov	r0, r4
    5a46:	bl	59bc <MTPStorage_SD::ScanAll() [clone .part.45] [clone .constprop.57]>
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5a4a:	movs	r2, #0
      next_ = 1;
    5a4c:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    } 
    else 
    { ScanAll();
      follow_sibling_ = false;
    5a4e:	strb.w	r2, [r4, #264]	; 0x108
      next_ = 1;
    5a52:	str.w	r3, [r4, #260]	; 0x104
    5a56:	b.n	5a3a <MTPStorage_SD::StartGetObjectHandles(unsigned long)+0x4a>

00005a58 <SdBase<FsVolume>::errorHalt(Print*)>:
  //----------------------------------------------------------------------------
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    5a58:	mov	r5, r0
    5a5a:	ldr.w	r0, [r0, #1156]	; 0x484
    5a5e:	mov	r4, r1
    5a60:	push	{r3, lr}
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    5a62:	cbz	r0, 5a94 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
      return m_card->errorCode();
    5a64:	ldr	r3, [r0, #0]
    5a66:	ldr	r3, [r3, #36]	; 0x24
    5a68:	blx	r3
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void errorHalt(print_t* pr) {
    if (sdErrorCode()) {
    5a6a:	cbnz	r0, 5a94 <SdBase<FsVolume>::errorHalt(Print*)+0x3c>
    5a6c:	ldr.w	r3, [r5, #1144]	; 0x478
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    5a70:	cbz	r3, 5a7c <SdBase<FsVolume>::errorHalt(Print*)+0x24>
    5a72:	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    5a74:	cbz	r3, 5a8a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    5a76:	bl	9da0 <yield>
    5a7a:	b.n	5a76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    5a7c:	ldr.w	r3, [r5, #1148]	; 0x47c
    5a80:	cbz	r3, 5a8a <SdBase<FsVolume>::errorHalt(Print*)+0x32>
    5a82:	ldrb.w	r3, [r3, #1084]	; 0x43c
    5a86:	cmp	r3, #0
    5a88:	bne.n	5a76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
      pr->println(F("Check SD format."));
    5a8a:	mov	r0, r4
    5a8c:	ldr	r1, [pc, #84]	; (5ae4 <SdBase<FsVolume>::errorHalt(Print*)+0x8c>)
    5a8e:	bl	50e8 <Print::println(__FlashStringHelper const*)>
    5a92:	b.n	5a76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    5a94:	ldr	r1, [pc, #80]	; (5ae8 <SdBase<FsVolume>::errorHalt(Print*)+0x90>)
    5a96:	mov	r0, r4
    5a98:	bl	318 <Print::write(char const*)>
    5a9c:	ldr.w	r0, [r5, #1156]	; 0x484
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    5aa0:	cbz	r0, 5ae0 <SdBase<FsVolume>::errorHalt(Print*)+0x88>
      return m_card->errorCode();
    5aa2:	ldr	r3, [r0, #0]
    5aa4:	ldr	r3, [r3, #36]	; 0x24
    5aa6:	blx	r3
    5aa8:	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5aaa:	movs	r3, #0
    5aac:	movs	r2, #16
    5aae:	mov	r0, r4
    5ab0:	bl	a0ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    5ab4:	ldr	r1, [pc, #52]	; (5aec <SdBase<FsVolume>::errorHalt(Print*)+0x94>)
    5ab6:	mov	r0, r4
    5ab8:	bl	318 <Print::write(char const*)>
    5abc:	ldr.w	r0, [r5, #1156]	; 0x484
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    5ac0:	cbz	r0, 5adc <SdBase<FsVolume>::errorHalt(Print*)+0x84>
    5ac2:	ldr	r3, [r0, #0]
    5ac4:	ldr	r3, [r3, #40]	; 0x28
    5ac6:	blx	r3
    5ac8:	uxtb	r1, r0
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    5aca:	movs	r3, #0
    5acc:	movs	r2, #16
    5ace:	mov	r0, r4
    5ad0:	bl	a0ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    5ad4:	mov	r0, r4
    5ad6:	bl	a05c <Print::println()>
    5ada:	b.n	5a76 <SdBase<FsVolume>::errorHalt(Print*)+0x1e>
    5adc:	mov	r1, r0
    5ade:	b.n	5aca <SdBase<FsVolume>::errorHalt(Print*)+0x72>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    5ae0:	movs	r1, #41	; 0x29
    5ae2:	b.n	5aaa <SdBase<FsVolume>::errorHalt(Print*)+0x52>
    5ae4:	.word	0x20000198
    5ae8:	.word	0x20000188
    5aec:	.word	0x20000194

00005af0 <Storage_init()>:
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
  void Storage_init(void)
  { 
    5af0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    #if DO_DEBUG>0
      Serial.println("Using SdFs");
    #endif
    #if USE_SDIO==0
      SPI.setMOSI(SD_MOSI);
    5af4:	movs	r1, #11
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
  void Storage_init(void)
  { 
    5af6:	sub	sp, #40	; 0x28
    #if DO_DEBUG>0
      Serial.println("Using SdFs");
    #endif
    #if USE_SDIO==0
      SPI.setMOSI(SD_MOSI);
    5af8:	ldr	r0, [pc, #152]	; (5b94 <Storage_init()+0xa4>)
    5afa:	mov.w	r8, #10
    5afe:	bl	7e44 <SPIClass::setMOSI(unsigned char)>
      SPI.setMISO(SD_MISO);
    5b02:	movs	r1, #12
    5b04:	ldr	r0, [pc, #140]	; (5b94 <Storage_init()+0xa4>)
    5b06:	movs	r7, #0
    5b08:	bl	7e48 <SPIClass::setMISO(unsigned char)>
      SPI.setSCK(SD_SCK);
    5b0c:	movs	r1, #13
    5b0e:	ldr	r0, [pc, #132]	; (5b94 <Storage_init()+0xa4>)
    5b10:	add	r4, sp, #16
    5b12:	bl	7e4c <SPIClass::setSCK(unsigned char)>
    5b16:	mov.w	ip, #128	; 0x80
    5b1a:	ldr.w	lr, [pc, #148]	; 5bb0 <Storage_init()+0xc0>
    5b1e:	add	r2, sp, #4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    5b20:	ldr	r5, [pc, #116]	; (5b98 <Storage_init()+0xa8>)
    5b22:	add	r3, sp, #28
    5b24:	strb.w	r8, [sp, #4]
    5b28:	strb.w	ip, [sp, #5]
    5b2c:	addw	r6, r5, #1172	; 0x494
    5b30:	str.w	lr, [sp, #8]
    5b34:	str	r7, [sp, #12]
    5b36:	ldmia	r2, {r0, r1, r2}
    5b38:	stmia.w	r4, {r0, r1, r2}
    5b3c:	strb.w	r8, [sp, #16]
    5b40:	strb.w	ip, [sp, #17]
    5b44:	str.w	lr, [sp, #20]
    5b48:	str	r7, [sp, #24]
    5b4a:	ldmia.w	r4, {r0, r1, r2}
    5b4e:	stmia.w	r3, {r0, r1, r2}
    5b52:	mov	r0, r6
    5b54:	ldmia	r3, {r1, r2, r3}
    5b56:	bl	3cd0 <SdSpiCard::begin(SdSpiConfig)>
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    return m_card && !m_card->errorCode();
    5b5a:	ldrb.w	r3, [r5, #1195]	; 0x4ab
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdSpiConfig spiConfig) {
    m_card = m_cardFactory.newCard(spiConfig);
    5b5e:	str.w	r6, [r5, #1156]	; 0x484
    return m_card && !m_card->errorCode();
    5b62:	cbz	r3, 5b7c <Storage_init()+0x8c>
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
    5b64:	ldr	r1, [pc, #52]	; (5b9c <Storage_init()+0xac>)
    5b66:	ldr	r0, [pc, #56]	; (5ba0 <Storage_init()+0xb0>)
    5b68:	bl	318 <Print::write(char const*)>
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorHalt(print_t* pr, const char* msg) {
    pr->print(F("error: "));
    pr->println(msg);
    5b6c:	ldr	r1, [pc, #52]	; (5ba4 <Storage_init()+0xb4>)
    5b6e:	ldr	r0, [pc, #48]	; (5ba0 <Storage_init()+0xb0>)
    5b70:	bl	50e8 <Print::println(__FlashStringHelper const*)>
    errorHalt(pr);
    5b74:	ldr	r1, [pc, #40]	; (5ba0 <Storage_init()+0xb0>)
    5b76:	ldr	r0, [pc, #32]	; (5b98 <Storage_init()+0xa8>)
    5b78:	bl	5a58 <SdBase<FsVolume>::errorHalt(Print*)>
   *
   * \param[in] spiConfig SPI configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig) {
    return cardBegin(spiConfig) && Vol::begin(m_card);
    5b7c:	mov	r1, r6
    5b7e:	mov	r0, r5
    5b80:	bl	397c <FsVolume::begin(BlockDeviceInterface*)>
    5b84:	cmp	r0, #0
    5b86:	beq.n	5b64 <Storage_init()+0x74>
    #endif
    if (!sd.begin(SD_CONFIG)) sd.errorHalt("sd.begin failed");
  
    // Set Time callback
    FsDateTime::callback = dateTime;
    5b88:	ldr	r3, [pc, #28]	; (5ba8 <Storage_init()+0xb8>)
    5b8a:	ldr	r2, [pc, #32]	; (5bac <Storage_init()+0xbc>)
    5b8c:	str	r2, [r3, #0]
  }
    5b8e:	add	sp, #40	; 0x28
    5b90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b94:	.word	0x2000085c
    5b98:	.word	0x2000386c
    5b9c:	.word	0x200001ac
    5ba0:	.word	0x200008e8
    5ba4:	.word	0x200001b4
    5ba8:	.word	0x20003820
    5bac:	.word	0x00004ed5
    5bb0:	.word	0x02faf080

00005bb4 <_GLOBAL__sub_I__Z8dateTimePtS_Ph>:
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    5bb4:	push	{r4, r5, r6, r7}
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() : m_fVol(nullptr), m_xVol(nullptr) {}
    5bb6:	ldr	r3, [pc, #60]	; (5bf4 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x40>)
    5bb8:	movs	r4, #0
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5bba:	movs	r6, #7
    5bbc:	ldr	r2, [pc, #56]	; (5bf8 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x44>)
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
    5bbe:	movs	r5, #40	; 0x28
    5bc0:	ldr	r1, [pc, #56]	; (5bfc <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x48>)
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    5bc2:	ldr	r7, [pc, #60]	; (5c00 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x4c>)
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    5bc4:	mov	r0, r3
    5bc6:	str.w	r2, [r3, #1160]	; 0x488
    5bca:	str.w	r1, [r3, #1172]	; 0x494
    5bce:	str.w	r7, [r3, #1180]	; 0x49c
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5bd2:	str.w	r6, [r3, #1184]	; 0x4a0
    5bd6:	strb.w	r5, [r3, #1195]	; 0x4ab
    5bda:	str.w	r4, [r3, #1144]	; 0x478
    5bde:	str.w	r4, [r3, #1148]	; 0x47c
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() : m_options(FIFO_SDIO) {}
    5be2:	strb.w	r4, [r3, #1168]	; 0x490
    5be6:	strb.w	r4, [r3, #1198]	; 0x4ae
    5bea:	ldr	r2, [pc, #24]	; (5c04 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x50>)
    5bec:	ldr	r1, [pc, #24]	; (5c08 <_GLOBAL__sub_I__Z8dateTimePtS_Ph+0x54>)
    WriteIndexRecord(handle, p1);
    WriteIndexRecord(newParent, p2);

    ConstructFilename(handle, newName, 256);
    sd.rename(oldName,newName);
  }
    5bee:	pop	{r4, r5, r6, r7}
    
    // Return low time bits in units of 10 ms.
    *ms10 = second() & 1 ? 100 : 0;
  }

  SdFs sd;
    5bf0:	b.w	a158 <__aeabi_atexit>
    5bf4:	.word	0x2000386c
    5bf8:	.word	0x200000c4
    5bfc:	.word	0x2000006c
    5c00:	.word	0x003d0900
    5c04:	.word	0x20000850
    5c08:	.word	0x00004ed1

00005c0c <MTPD::write(char const*, int) [clone .part.1]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    5c0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5c10:	movw	r3, #9256	; 0x2428
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    5c14:	mov	r6, r1
    5c16:	mov	r7, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5c18:	ldr	r3, [r0, r3]
    5c1a:	cbnz	r3, 5c28 <MTPD::write(char const*, int) [clone .part.1]+0x1c>
    5c1c:	ldr.w	fp, [pc, #104]	; 5c88 <MTPD::write(char const*, int) [clone .part.1]+0x7c>
    5c20:	add.w	r2, r0, #544	; 0x220
    5c24:	str.w	r2, [fp]
    5c28:	add	r3, r7
    5c2a:	movw	r2, #9256	; 0x2428
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5c2e:	cmp	r7, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
    5c30:	str	r3, [r0, r2]
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5c32:	ble.n	5c72 <MTPD::write(char const*, int) [clone .part.1]+0x66>
    5c34:	ldr.w	fp, [pc, #80]	; 5c88 <MTPD::write(char const*, int) [clone .part.1]+0x7c>
    5c38:	add.w	r8, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { int ret=push_packet(tx_data_buffer,MTP_TX_SIZE);
    5c3c:	add.w	r9, r0, #544	; 0x220
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5c40:	movs	r5, #0
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5c42:	mov	sl, fp
    5c44:	ldr.w	r3, [fp]
    5c48:	subs	r2, r7, r5
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    5c4a:	mov	r1, r6
    5c4c:	rsb	r4, r3, r8
    5c50:	mov	r0, r3
    5c52:	cmp	r4, r2
    5c54:	it	ge
    5c56:	movge	r4, r2
    5c58:	mov	r2, r4
          pos += to_copy;
    5c5a:	add	r5, r4
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
    5c5c:	bl	8310 <memcpy>
    5c60:	mov	r3, r0
          pos += to_copy;
          src += to_copy;
    5c62:	add	r6, r4
          dst += to_copy;
    5c64:	add	r3, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5c66:	cmp	r3, r8
          int to_copy = min(len - pos, avail);
//          for(int ii=0; ii<len;ii++) printf("%x ",data[ii]); printf("\n");
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5c68:	str.w	r3, [fp]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5c6c:	beq.n	5c76 <MTPD::write(char const*, int) [clone .part.1]+0x6a>
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   write_length_ += len;
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5c6e:	cmp	r7, r5
    5c70:	bgt.n	5c44 <MTPD::write(char const*, int) [clone .part.1]+0x38>
    5c72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    5c76:	movs	r2, #60	; 0x3c
    5c78:	mov.w	r1, #512	; 0x200
    5c7c:	mov	r0, r9
    5c7e:	bl	8288 <usb_mtp_send>
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { int ret=push_packet(tx_data_buffer,MTP_TX_SIZE);
//            printf("write %d\n",ret);
            dst=tx_data_buffer;
    5c82:	str.w	r9, [sl]
    5c86:	b.n	5c6e <MTPD::write(char const*, int) [clone .part.1]+0x62>
    5c88:	.word	0x20003d1c

00005c8c <MTPD::writestring(char const*)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    5c8c:	push	{r4, r5, r6, r7, lr}
    if (*str) 
    5c8e:	ldrb	r3, [r1, #0]
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    5c90:	sub	sp, #12
    5c92:	mov	r6, r0
    if (*str) 
    5c94:	cmp	r3, #0
    5c96:	beq.n	5d0c <MTPD::writestring(char const*)+0x80>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5c98:	movw	r5, #9252	; 0x2424
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    5c9c:	mov	r0, r1
    5c9e:	mov	r4, r1
    5ca0:	bl	bb40 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ca4:	ldrb	r2, [r6, r5]
    5ca6:	adds	r0, #1
    5ca8:	strb.w	r0, [sp, #3]
    5cac:	cmp	r2, #0
    5cae:	beq.n	5d34 <MTPD::writestring(char const*)+0xa8>
      {
        write_length_ += len;
    5cb0:	movw	r1, #9256	; 0x2428
    5cb4:	ldr	r3, [r6, r1]
    5cb6:	adds	r3, #1
    5cb8:	str	r3, [r6, r1]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5cba:	ldrb	r3, [r4, #0]
    5cbc:	cbz	r3, 5cfe <MTPD::writestring(char const*)+0x72>
    5cbe:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5cc2:	movw	r5, #9256	; 0x2428
    5cc6:	add	r7, r6
    5cc8:	add	r5, r6
    5cca:	b.n	5cd8 <MTPD::writestring(char const*)+0x4c>
    5ccc:	ldr	r3, [r5, #0]
    5cce:	adds	r3, #2
    5cd0:	str	r3, [r5, #0]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5cd2:	ldrb.w	r3, [r4, #1]!
    5cd6:	cbz	r3, 5cf6 <MTPD::writestring(char const*)+0x6a>
    5cd8:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5cdc:	cmp	r2, #0
    5cde:	bne.n	5ccc <MTPD::writestring(char const*)+0x40>
    5ce0:	movs	r2, #2
    5ce2:	add.w	r1, sp, #6
    5ce6:	mov	r0, r6
    5ce8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5cec:	ldrb.w	r3, [r4, #1]!
    5cf0:	ldrb	r2, [r7, #0]
    5cf2:	cmp	r3, #0
    5cf4:	bne.n	5cd8 <MTPD::writestring(char const*)+0x4c>
    5cf6:	movs	r3, #0
    5cf8:	strh.w	r3, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5cfc:	cbz	r2, 5d4a <MTPD::writestring(char const*)+0xbe>
      {
        write_length_ += len;
    5cfe:	movw	r2, #9256	; 0x2428
    5d02:	ldr	r3, [r6, r2]
    5d04:	adds	r3, #2
    5d06:	str	r3, [r6, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5d08:	add	sp, #12
    5d0a:	pop	{r4, r5, r6, r7, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d0c:	movw	r2, #9252	; 0x2424
    5d10:	strb.w	r3, [sp, #2]
    5d14:	ldrb	r3, [r0, r2]
    5d16:	cbz	r3, 5d26 <MTPD::writestring(char const*)+0x9a>
      {
        write_length_ += len;
    5d18:	movw	r2, #9256	; 0x2428
    5d1c:	ldr	r3, [r0, r2]
    5d1e:	adds	r3, #1
    5d20:	str	r3, [r0, r2]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
    5d22:	add	sp, #12
    5d24:	pop	{r4, r5, r6, r7, pc}
    5d26:	movs	r2, #1
    5d28:	add.w	r1, sp, #2
    5d2c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5d30:	add	sp, #12
    5d32:	pop	{r4, r5, r6, r7, pc}
    5d34:	movs	r2, #1
    5d36:	add.w	r1, sp, #3
    5d3a:	mov	r0, r6
    5d3c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  void MTPD::writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5d40:	ldrb	r3, [r4, #0]
    5d42:	ldrb	r2, [r6, r5]
    5d44:	cmp	r3, #0
    5d46:	bne.n	5cbe <MTPD::writestring(char const*)+0x32>
    5d48:	b.n	5cf6 <MTPD::writestring(char const*)+0x6a>
    5d4a:	mov	r0, r6
    5d4c:	movs	r2, #2
    5d4e:	add	r1, sp, #4
    5d50:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    } else 
    { write8(0);
    }
  }
    5d54:	add	sp, #12
    5d56:	pop	{r4, r5, r6, r7, pc}

00005d58 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>:
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5d58:	push	{r4, r5, r6, r7, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d5a:	movw	r6, #9252	; 0x2424
        writestring("Teensy");
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    5d5e:	sub	sp, #12
    5d60:	mov	r4, r0
    5d62:	mov	r5, r1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5d64:	ldrb	r3, [r0, r6]
    5d66:	strh.w	r1, [sp, #4]
    5d6a:	cmp	r3, #0
    5d6c:	beq.n	5de0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x88>
      {
        write_length_ += len;
    5d6e:	movw	r2, #9256	; 0x2428
    5d72:	movw	r1, #65535	; 0xffff
    5d76:	ldr	r3, [r0, r2]
    5d78:	strh.w	r1, [sp, #6]
    5d7c:	adds	r3, #2
    5d7e:	str	r3, [r0, r2]
    5d80:	movw	r2, #9256	; 0x2428
    5d84:	movs	r1, #0
    5d86:	ldr	r3, [r4, r2]
    5d88:	strb.w	r1, [sp, #2]
    5d8c:	adds	r3, #2
    5d8e:	str	r3, [r4, r2]
    5d90:	movw	r2, #9256	; 0x2428
    5d94:	ldr	r3, [r4, r2]
    5d96:	adds	r3, #1
    5d98:	str	r3, [r4, r2]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5d9a:	movw	r3, #54274	; 0xd402
    5d9e:	cmp	r5, r3
    5da0:	beq.n	5dce <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x76>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5da2:	movw	r3, #9252	; 0x2424
    5da6:	movs	r2, #0
    5da8:	ldrb	r3, [r4, r3]
    5daa:	strb.w	r2, [sp, #3]
    5dae:	cbz	r3, 5dbe <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x66>
      {
        write_length_ += len;
    5db0:	movw	r2, #9256	; 0x2428
    5db4:	ldr	r3, [r4, r2]
    5db6:	adds	r3, #1
    5db8:	str	r3, [r4, r2]
        write8(0);       // read-only
        GetDevicePropValue(prop);
        GetDevicePropValue(prop);
        write8(0);       // no form
    }
  }
    5dba:	add	sp, #12
    5dbc:	pop	{r4, r5, r6, r7, pc}
    5dbe:	mov	r0, r4
    5dc0:	movs	r2, #1
    5dc2:	add.w	r1, sp, #3
    5dc6:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5dca:	add	sp, #12
    5dcc:	pop	{r4, r5, r6, r7, pc}
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    5dce:	mov	r0, r4
    5dd0:	ldr	r1, [pc, #72]	; (5e1c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    5dd2:	bl	5c8c <MTPD::writestring(char const*)>
    5dd6:	ldr	r1, [pc, #68]	; (5e1c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0xc4>)
    5dd8:	mov	r0, r4
    5dda:	bl	5c8c <MTPD::writestring(char const*)>
    5dde:	b.n	5da2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x4a>
    5de0:	movs	r2, #2
    5de2:	add	r1, sp, #4
    5de4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5de8:	movw	r3, #65535	; 0xffff
    5dec:	ldrb	r7, [r4, r6]
    5dee:	strh.w	r3, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5df2:	cmp	r7, #0
    5df4:	bne.n	5d80 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x28>
    5df6:	movs	r2, #2
    5df8:	add.w	r1, sp, #6
    5dfc:	mov	r0, r4
    5dfe:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5e02:	ldrb	r3, [r4, r6]
    5e04:	strb.w	r7, [sp, #2]
    5e08:	cmp	r3, #0
    5e0a:	bne.n	5d90 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x38>
    5e0c:	movs	r2, #1
    5e0e:	add.w	r1, sp, #2
    5e12:	mov	r0, r4
    5e14:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5e18:	b.n	5d9a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]+0x42>
    5e1a:	nop
    5e1c:	.word	0x200001fc

00005e20 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5e20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e24:	movw	r4, #9252	; 0x2424
    } else 
    { write8(0);
    }
  }

  void MTPD::WriteDescriptor() {
    5e28:	sub	sp, #44	; 0x2c
    5e2a:	movs	r6, #100	; 0x64
    5e2c:	mov	r5, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e2e:	ldrb	r3, [r0, r4]
    5e30:	strh.w	r6, [sp, #6]
    5e34:	cmp	r3, #0
    5e36:	beq.w	5f70 <MTPD::WriteDescriptor()+0x150>
      {
        write_length_ += len;
    5e3a:	movw	r2, #9256	; 0x2428
    5e3e:	movs	r1, #6
    5e40:	ldr	r3, [r0, r2]
    5e42:	str	r1, [sp, #20]
    5e44:	adds	r3, #2
    5e46:	str	r3, [r0, r2]
    5e48:	movw	r2, #9256	; 0x2428
    5e4c:	movs	r1, #100	; 0x64
    5e4e:	ldr	r3, [r5, r2]
    5e50:	strh.w	r1, [sp, #4]
    5e54:	adds	r3, #4
    5e56:	str	r3, [r5, r2]
    5e58:	movw	r2, #9256	; 0x2428
    5e5c:	ldr	r3, [r5, r2]
    5e5e:	adds	r3, #2
    5e60:	str	r3, [r5, r2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e62:	movw	r4, #9252	; 0x2424
  void MTPD::WriteDescriptor() {
    write16(100);  // MTP version
    write32(6);    // MTP extension
//    write32(0xFFFFFFFFUL);    // MTP extension
    write16(100);  // MTP version
    writestring("microsoft.com: 1.0;");
    5e66:	ldr	r1, [pc, #508]	; (6064 <MTPD::WriteDescriptor()+0x244>)
    5e68:	mov	r0, r5
    5e6a:	bl	5c8c <MTPD::writestring(char const*)>
    5e6e:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5e70:	ldrb	r3, [r5, r4]
    5e72:	strh.w	r2, [sp, #2]
    5e76:	cmp	r3, #0
    5e78:	beq.w	603e <MTPD::WriteDescriptor()+0x21e>
      {
        write_length_ += len;
    5e7c:	movw	r2, #9256	; 0x2428
    5e80:	movs	r1, #18
    5e82:	ldr	r3, [r5, r2]
    5e84:	str	r1, [sp, #16]
    5e86:	adds	r3, #2
    5e88:	str	r3, [r5, r2]
    5e8a:	movw	r2, #9256	; 0x2428
    5e8e:	movs	r7, #1
    5e90:	ldr	r3, [r5, r2]
    5e92:	adds	r3, #4
    5e94:	str	r3, [r5, r2]
    5e96:	ldr	r4, [pc, #464]	; (6068 <MTPD::WriteDescriptor()+0x248>)
    5e98:	movw	r8, #9252	; 0x2424
    5e9c:	movw	r6, #9256	; 0x2428
    5ea0:	movw	r3, #4097	; 0x1001
    5ea4:	add.w	r9, r4, #34	; 0x22
    5ea8:	add	r8, r5
    5eaa:	add	r6, r5
    5eac:	b.n	5ebe <MTPD::WriteDescriptor()+0x9e>
    5eae:	ldr	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5eb0:	cmp	r9, r4
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5eb2:	add.w	r3, r3, #2
    5eb6:	str	r3, [r6, #0]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5eb8:	beq.n	5ed8 <MTPD::WriteDescriptor()+0xb8>
    5eba:	ldrh.w	r3, [r4, #2]!
    5ebe:	strh.w	r3, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5ec2:	cmp	r7, #0
    5ec4:	bne.n	5eae <MTPD::WriteDescriptor()+0x8e>
    5ec6:	movs	r2, #2
    5ec8:	add	r1, sp, #8
    5eca:	mov	r0, r5
    5ecc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
      write32(supported_op_num);
      for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    5ed0:	cmp	r9, r4
    5ed2:	ldrb.w	r7, [r8]
    5ed6:	bne.n	5eba <MTPD::WriteDescriptor()+0x9a>
    5ed8:	movs	r3, #0
    5eda:	str	r3, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5edc:	cmp	r7, #0
    5ede:	beq.n	5fa8 <MTPD::WriteDescriptor()+0x188>
      {
        write_length_ += len;
    5ee0:	movw	r2, #9256	; 0x2428
    5ee4:	movs	r1, #1
    5ee6:	ldr	r3, [r5, r2]
    5ee8:	str	r1, [sp, #32]
    5eea:	adds	r3, #4
    5eec:	str	r3, [r5, r2]
    5eee:	movw	r2, #9256	; 0x2428
    5ef2:	movw	r1, #54274	; 0xd402
    5ef6:	ldr	r3, [r5, r2]
    5ef8:	strh.w	r1, [sp, #14]
    5efc:	adds	r3, #4
    5efe:	str	r3, [r5, r2]
    5f00:	movw	r2, #9256	; 0x2428
    5f04:	movs	r1, #0
    5f06:	ldr	r3, [r5, r2]
    5f08:	str	r1, [sp, #28]
    5f0a:	adds	r3, #2
    5f0c:	str	r3, [r5, r2]
    5f0e:	movw	r2, #9256	; 0x2428
    5f12:	movs	r1, #2
    5f14:	ldr	r3, [r5, r2]
    5f16:	str	r1, [sp, #24]
    5f18:	adds	r3, #4
    5f1a:	str	r3, [r5, r2]
    5f1c:	movw	r2, #9256	; 0x2428
    5f20:	mov.w	r1, #12288	; 0x3000
    5f24:	ldr	r3, [r5, r2]
    5f26:	strh.w	r1, [sp, #12]
    5f2a:	adds	r3, #4
    5f2c:	str	r3, [r5, r2]
    5f2e:	movw	r2, #9256	; 0x2428
    5f32:	movw	r1, #12289	; 0x3001
    5f36:	ldr	r3, [r5, r2]
    5f38:	strh.w	r1, [sp, #10]
    5f3c:	adds	r3, #2
    5f3e:	str	r3, [r5, r2]
    5f40:	movw	r2, #9256	; 0x2428
    5f44:	ldr	r3, [r5, r2]
    5f46:	adds	r3, #2
    5f48:	str	r3, [r5, r2]

    write32(2);       // Playback formats (array of uint16)
    write16(0x3000);  // Undefined format
    write16(0x3001);  // Folders (associations)

    writestring("PJRC");     // Manufacturer
    5f4a:	mov	r0, r5
    5f4c:	ldr	r1, [pc, #284]	; (606c <MTPD::WriteDescriptor()+0x24c>)
    5f4e:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("Teensy");   // Model
    5f52:	mov	r0, r5
    5f54:	ldr	r1, [pc, #280]	; (6070 <MTPD::WriteDescriptor()+0x250>)
    5f56:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("1.0");      // version
    5f5a:	mov	r0, r5
    5f5c:	ldr	r1, [pc, #276]	; (6074 <MTPD::WriteDescriptor()+0x254>)
    5f5e:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("???");      // serial
    5f62:	mov	r0, r5
    5f64:	ldr	r1, [pc, #272]	; (6078 <MTPD::WriteDescriptor()+0x258>)
    5f66:	bl	5c8c <MTPD::writestring(char const*)>
  }
    5f6a:	add	sp, #44	; 0x2c
    5f6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f70:	movs	r2, #2
    5f72:	add.w	r1, sp, #6
    5f76:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5f7a:	movs	r2, #6
    5f7c:	ldrb	r3, [r5, r4]
    5f7e:	str	r2, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    5f80:	cmp	r3, #0
    5f82:	bne.w	5e48 <MTPD::WriteDescriptor()+0x28>
    5f86:	movs	r2, #4
    5f88:	add	r1, sp, #20
    5f8a:	mov	r0, r5
    5f8c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5f90:	ldrb	r3, [r5, r4]
    5f92:	strh.w	r6, [sp, #4]
    5f96:	cmp	r3, #0
    5f98:	bne.w	5e58 <MTPD::WriteDescriptor()+0x38>
    5f9c:	movs	r2, #2
    5f9e:	add	r1, sp, #4
    5fa0:	mov	r0, r5
    5fa2:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5fa6:	b.n	5e62 <MTPD::WriteDescriptor()+0x42>
    5fa8:	movw	r4, #9252	; 0x2424
    5fac:	movs	r2, #4
    5fae:	add	r1, sp, #36	; 0x24
    5fb0:	mov	r0, r5
    5fb2:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5fb6:	movs	r2, #1
    5fb8:	ldrb	r3, [r5, r4]
    5fba:	str	r2, [sp, #32]
    5fbc:	cmp	r3, #0
    5fbe:	bne.n	5eee <MTPD::WriteDescriptor()+0xce>
    5fc0:	movs	r2, #4
    5fc2:	add	r1, sp, #32
    5fc4:	mov	r0, r5
    5fc6:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5fca:	movw	r2, #54274	; 0xd402
    5fce:	ldrb	r3, [r5, r4]
    5fd0:	strh.w	r2, [sp, #14]
    5fd4:	cmp	r3, #0
    5fd6:	bne.n	5f00 <MTPD::WriteDescriptor()+0xe0>
    5fd8:	movs	r2, #2
    5fda:	add.w	r1, sp, #14
    5fde:	mov	r0, r5
    5fe0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5fe4:	ldrb	r3, [r5, r4]
    5fe6:	str	r7, [sp, #28]
    5fe8:	cmp	r3, #0
    5fea:	bne.n	5f0e <MTPD::WriteDescriptor()+0xee>
    5fec:	movs	r2, #4
    5fee:	add	r1, sp, #28
    5ff0:	mov	r0, r5
    5ff2:	movs	r6, #2
    5ff4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    5ff8:	ldrb	r3, [r5, r4]
    5ffa:	str	r6, [sp, #24]
    5ffc:	cmp	r3, #0
    5ffe:	bne.n	5f1c <MTPD::WriteDescriptor()+0xfc>
    6000:	movs	r2, #4
    6002:	add	r1, sp, #24
    6004:	mov	r0, r5
    6006:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    600a:	mov.w	r2, #12288	; 0x3000
    600e:	ldrb	r3, [r5, r4]
    6010:	strh.w	r2, [sp, #12]
    6014:	cmp	r3, #0
    6016:	bne.n	5f2e <MTPD::WriteDescriptor()+0x10e>
    6018:	mov	r2, r6
    601a:	add	r1, sp, #12
    601c:	mov	r0, r5
    601e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6022:	movw	r2, #12289	; 0x3001
    6026:	ldrb	r3, [r5, r4]
    6028:	strh.w	r2, [sp, #10]
    602c:	cmp	r3, #0
    602e:	bne.n	5f40 <MTPD::WriteDescriptor()+0x120>
    6030:	mov	r2, r6
    6032:	add.w	r1, sp, #10
    6036:	mov	r0, r5
    6038:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    603c:	b.n	5f4a <MTPD::WriteDescriptor()+0x12a>
    603e:	movs	r2, #2
    6040:	mov	r0, r5
    6042:	add.w	r1, sp, r2
    6046:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    604a:	movs	r2, #18
    604c:	ldrb	r3, [r5, r4]
    604e:	str	r2, [sp, #16]
    6050:	cmp	r3, #0
    6052:	bne.w	5e8a <MTPD::WriteDescriptor()+0x6a>
    6056:	movs	r2, #4
    6058:	add	r1, sp, #16
    605a:	mov	r0, r5
    605c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6060:	ldrb	r7, [r5, r4]
    6062:	b.n	5e96 <MTPD::WriteDescriptor()+0x76>
    6064:	.word	0x20000204
    6068:	.word	0x200001c4
    606c:	.word	0x20000218
    6070:	.word	0x200001fc
    6074:	.word	0x20000220
    6078:	.word	0x20000224

0000607c <MTPD::WriteStorageIDs()>:
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    607c:	push	{r4, r5, r6, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    607e:	movw	r6, #9252	; 0x2424
    writestring("Teensy");   // Model
    writestring("1.0");      // version
    writestring("???");      // serial
  }

  void MTPD::WriteStorageIDs() {
    6082:	sub	sp, #8
    6084:	movs	r5, #1
    6086:	mov	r4, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6088:	ldrb	r3, [r0, r6]
    608a:	str	r5, [sp, #4]
    608c:	cbz	r3, 60a6 <MTPD::WriteStorageIDs()+0x2a>
      {
        write_length_ += len;
    608e:	movw	r2, #9256	; 0x2428
    6092:	ldr	r3, [r0, r2]
    6094:	adds	r3, #4
    6096:	str	r3, [r0, r2]
    6098:	movw	r2, #9256	; 0x2428
    609c:	ldr	r3, [r4, r2]
    609e:	adds	r3, #4
    60a0:	str	r3, [r4, r2]
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    60a2:	add	sp, #8
    60a4:	pop	{r4, r5, r6, pc}
    60a6:	movs	r2, #4
    60a8:	add.w	r1, sp, r2
    60ac:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    60b0:	ldrb	r3, [r4, r6]
    60b2:	str	r5, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60b4:	cmp	r3, #0
    60b6:	bne.n	6098 <MTPD::WriteStorageIDs()+0x1c>
    60b8:	mov	r0, r4
    60ba:	movs	r2, #4
    60bc:	mov	r1, sp
    60be:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
  }

  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }
    60c2:	add	sp, #8
    60c4:	pop	{r4, r5, r6, pc}
    60c6:	nop

000060c8 <MTPD::GetStorageInfo(unsigned long)>:

  void MTPD::GetStorageInfo(uint32_t storage) {
    60c8:	push	{r4, r5, r6, lr}
    60ca:	mov	r4, r0
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    60cc:	ldr	r0, [r0, #0]
  void MTPD::WriteStorageIDs() {
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    60ce:	sub	sp, #32
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    60d0:	ldr	r3, [r0, #0]
    60d2:	ldr	r3, [r3, #0]
    60d4:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60d6:	movw	r3, #9252	; 0x2424
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    60da:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60dc:	ldrb	r3, [r4, r3]
    write32(1); // 1 entry
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    60de:	ite	eq
    60e0:	moveq	r2, #4
    60e2:	movne	r2, #1
    60e4:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60e8:	cmp	r3, #0
    60ea:	beq.n	61b4 <MTPD::GetStorageInfo(unsigned long)+0xec>
      {
        write_length_ += len;
    60ec:	movw	r2, #9256	; 0x2428
    60f0:	ldr	r3, [r4, r2]
    60f2:	adds	r3, #2
    60f4:	str	r3, [r4, r2]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    60f6:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    60f8:	movw	r6, #9252	; 0x2424
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    60fc:	ldr	r3, [r0, #0]
    60fe:	ldr	r3, [r3, #4]
    6100:	blx	r3
    6102:	cmp	r0, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6104:	ldrb	r5, [r4, r6]
    write32(1); // 1 storage
  }

  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    6106:	ite	eq
    6108:	moveq	r3, #1
    610a:	movne	r3, #2
    610c:	strh.w	r3, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6110:	cmp	r5, #0
    6112:	beq.n	61f0 <MTPD::GetStorageInfo(unsigned long)+0x128>
      {
        write_length_ += len;
    6114:	movw	r2, #9256	; 0x2428
    6118:	movs	r1, #0
    611a:	ldr	r3, [r4, r2]
    611c:	strh.w	r1, [sp, #8]
    6120:	adds	r3, #2
    6122:	str	r3, [r4, r2]
    6124:	movw	r2, #9256	; 0x2428
    6128:	ldr	r3, [r4, r2]
    612a:	adds	r3, #2
    612c:	str	r3, [r4, r2]
  void MTPD::GetStorageInfo(uint32_t storage) {
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
    612e:	ldr	r0, [r4, #0]
    6130:	ldr	r3, [r0, #0]
    6132:	ldr	r3, [r3, #8]
    6134:	blx	r3
    6136:	mov	r6, r0
  uint64_t nsect = storage_->clusterSize() ;
    6138:	ldr	r0, [r4, #0]
    613a:	ldr	r3, [r0, #0]
    613c:	ldr	r3, [r3, #16]
    613e:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6140:	movw	r3, #9252	; 0x2424
    write16(storage_->readonly() ? 0x0001 : 0x0004);   // storage type (removable RAM)
    write16(storage_->has_directories() ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    6144:	mov	r5, r0
    6146:	umull	r0, r1, r6, r0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    614a:	ldrb	r2, [r4, r3]
    614c:	lsls	r3, r1, #9
    614e:	lsls	r1, r0, #9
    6150:	orr.w	r3, r3, r0, lsr #23
    6154:	str	r1, [sp, #24]
    6156:	str	r3, [sp, #28]
    6158:	cmp	r2, #0
    615a:	beq.n	61e4 <MTPD::GetStorageInfo(unsigned long)+0x11c>
      {
        write_length_ += len;
    615c:	movw	r2, #9256	; 0x2428
    6160:	ldr	r3, [r4, r2]
    6162:	adds	r3, #8
    6164:	str	r3, [r4, r2]
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    6166:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6168:	movw	r6, #9252	; 0x2424
    write16(0x0000);   // access capability (read-write)
    
  uint64_t nclust = storage_->clusterCount() ;
  uint64_t nsect = storage_->clusterSize() ;
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    616c:	ldr	r3, [r0, #0]
    616e:	ldr	r3, [r3, #12]
    6170:	blx	r3
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6172:	ldrb	r1, [r4, r6]
    6174:	lsls	r2, r5, #9
    6176:	lsrs	r5, r5, #23
    6178:	umull	r2, r3, r2, r0
    617c:	mla	r3, r0, r5, r3
    6180:	strd	r2, r3, [sp, #16]
    6184:	cbz	r1, 61c2 <MTPD::GetStorageInfo(unsigned long)+0xfa>
      {
        write_length_ += len;
    6186:	movw	r2, #9256	; 0x2428
    618a:	mov.w	r1, #4294967295
    618e:	ldr	r3, [r4, r2]
    6190:	str	r1, [sp, #12]
    6192:	adds	r3, #8
    6194:	str	r3, [r4, r2]
    6196:	movw	r2, #9256	; 0x2428
    619a:	ldr	r3, [r4, r2]
    619c:	adds	r3, #4
    619e:	str	r3, [r4, r2]
    write64(nclust*nsect*512L);  // max capacity
  uint64_t nfree = storage_->freeClusters() ;
    write64(nfree*nsect*512L);  // free space (100M)
    //
    write32(0xFFFFFFFFUL);  // free space (objects)
    writestring("SD Card");  // storage descriptor
    61a0:	mov	r0, r4
    61a2:	ldr	r1, [pc, #112]	; (6214 <MTPD::GetStorageInfo(unsigned long)+0x14c>)
    61a4:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    61a8:	mov	r0, r4
    61aa:	ldr	r1, [pc, #108]	; (6218 <MTPD::GetStorageInfo(unsigned long)+0x150>)
    61ac:	bl	5c8c <MTPD::writestring(char const*)>
  }
    61b0:	add	sp, #32
    61b2:	pop	{r4, r5, r6, pc}
    61b4:	movs	r2, #2
    61b6:	add.w	r1, sp, #6
    61ba:	mov	r0, r4
    61bc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    61c0:	b.n	60f6 <MTPD::GetStorageInfo(unsigned long)+0x2e>
    61c2:	movs	r2, #8
    61c4:	add	r1, sp, #16
    61c6:	mov	r0, r4
    61c8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    61cc:	mov.w	r2, #4294967295
    61d0:	ldrb	r3, [r4, r6]
    61d2:	str	r2, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    61d4:	cmp	r3, #0
    61d6:	bne.n	6196 <MTPD::GetStorageInfo(unsigned long)+0xce>
    61d8:	movs	r2, #4
    61da:	add	r1, sp, #12
    61dc:	mov	r0, r4
    61de:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    61e2:	b.n	61a0 <MTPD::GetStorageInfo(unsigned long)+0xd8>
    61e4:	movs	r2, #8
    61e6:	add	r1, sp, #24
    61e8:	mov	r0, r4
    61ea:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    61ee:	b.n	6166 <MTPD::GetStorageInfo(unsigned long)+0x9e>
    61f0:	movs	r2, #2
    61f2:	add.w	r1, sp, #10
    61f6:	mov	r0, r4
    61f8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    61fc:	ldrb	r3, [r4, r6]
    61fe:	strh.w	r5, [sp, #8]
    6202:	cmp	r3, #0
    6204:	bne.n	6124 <MTPD::GetStorageInfo(unsigned long)+0x5c>
    6206:	movs	r2, #2
    6208:	add	r1, sp, #8
    620a:	mov	r0, r4
    620c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6210:	b.n	612e <MTPD::GetStorageInfo(unsigned long)+0x66>
    6212:	nop
    6214:	.word	0x20000228
    6218:	.word	0x20000238

0000621c <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    621c:	movw	r3, #9252	; 0x2424
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    6220:	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    6222:	ldrb	r5, [r0, r3]
    while (storage_->GetNextObjectHandle()) num++;
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    6224:	mov	r4, r0
    6226:	sub	sp, #12
    6228:	mov	r7, r2
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    622a:	ldr	r0, [r0, #0]
    return num;
  }

  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
    622c:	cbz	r5, 6252 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    622e:	ldr	r3, [r0, #0]
    6230:	mov	r1, r2
    int num = 0;
    6232:	movs	r5, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    6234:	ldr	r3, [r3, #20]
    6236:	blx	r3
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    6238:	ldr	r0, [r4, #0]
    623a:	adds	r5, #1
    623c:	ldr	r3, [r0, #0]
    623e:	ldr	r3, [r3, #24]
    6240:	blx	r3
    6242:	cmp	r0, #0
    6244:	bne.n	6238 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
  void MTPD::GetObjectHandles(uint32_t storage, uint32_t parent) 
  {
    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    6246:	movw	r3, #9256	; 0x2428
    624a:	lsls	r5, r5, #2
    624c:	str	r5, [r4, r3]
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
    624e:	add	sp, #12
    6250:	pop	{r4, r5, r6, r7, pc}
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    6252:	ldr	r3, [r0, #0]
    6254:	mov	r1, r2
    6256:	ldr	r3, [r3, #20]
    6258:	blx	r3
    625a:	b.n	625e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x42>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    625c:	adds	r5, #1
    625e:	ldr	r0, [r4, #0]
    6260:	ldr	r3, [r0, #0]
    6262:	ldr	r3, [r3, #24]
    6264:	blx	r3
    6266:	cmp	r0, #0
    6268:	bne.n	625c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x40>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    626a:	movw	r3, #9252	; 0x2424
    626e:	str	r5, [sp, #4]
    6270:	ldrb	r3, [r4, r3]
    6272:	cbz	r3, 62ba <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x9e>
      {
        write_length_ += len;
    6274:	movw	r2, #9256	; 0x2428
    6278:	ldr	r3, [r4, r2]
    627a:	adds	r3, #4
    627c:	str	r3, [r4, r2]
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    627e:	ldr	r0, [r4, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6280:	movw	r6, #9252	; 0x2424
      {
        write_length_ += len;
    6284:	movw	r5, #9256	; 0x2428
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    6288:	mov	r1, r7
    628a:	ldr	r3, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    628c:	add	r6, r4
      {
        write_length_ += len;
    628e:	add	r5, r4
      write_length_ *= 4;
    }
    else{
      write32(GetNumObjects(storage, parent));
      int handle;
      storage_->StartGetObjectHandles(parent);
    6290:	ldr	r3, [r3, #20]
    6292:	blx	r3
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    6294:	ldr	r0, [r4, #0]
    6296:	ldr	r3, [r0, #0]
    6298:	ldr	r3, [r3, #24]
    629a:	blx	r3
    629c:	cmp	r0, #0
    629e:	beq.n	624e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x32>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62a0:	ldrb	r3, [r6, #0]
    62a2:	str	r0, [sp, #0]
    62a4:	cbz	r3, 62ae <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x92>
      {
        write_length_ += len;
    62a6:	ldr	r3, [r5, #0]
    62a8:	adds	r3, #4
    62aa:	str	r3, [r5, #0]
    62ac:	b.n	6294 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    62ae:	movs	r2, #4
    62b0:	mov	r1, sp
    62b2:	mov	r0, r4
    62b4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    62b8:	b.n	6294 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x78>
    62ba:	movs	r2, #4
    62bc:	mov	r0, r4
    62be:	add.w	r1, sp, r2
    62c2:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    62c6:	b.n	627e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x62>

000062c8 <MTPD::GetObjectInfo(unsigned long)>:
      while ((handle = storage_->GetNextObjectHandle())) write32(handle);
    }
  }
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    62c8:	push	{r4, r5, r6, r7, lr}
    62ca:	mov	r4, r0
    62cc:	sub	sp, #332	; 0x14c
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    62ce:	ldr	r0, [r0, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62d0:	movw	r6, #9252	; 0x2424
  
  void MTPD::GetObjectInfo(uint32_t handle) 
  {
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);
    62d4:	add	r7, sp, #24
    62d6:	add	r3, sp, #20
    62d8:	ldr	r5, [r0, #0]
    62da:	add	r2, sp, #72	; 0x48
    62dc:	str	r7, [sp, #0]
    62de:	ldr	r5, [r5, #28]
    62e0:	blx	r5
    62e2:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    62e4:	ldrb	r3, [r4, r6]
    62e6:	str	r2, [sp, #28]
    62e8:	cmp	r3, #0
    62ea:	beq.w	63fc <MTPD::GetObjectInfo(unsigned long)+0x134>
      {
        write_length_ += len;
    62ee:	movw	r2, #9256	; 0x2428
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    62f2:	ldr	r1, [sp, #20]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    62f4:	ldr	r3, [r4, r2]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    62f6:	adds	r1, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    62f8:	add.w	r3, r3, #4
    62fc:	str	r3, [r4, r2]
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    62fe:	beq.w	654c <MTPD::GetObjectInfo(unsigned long)+0x284>
    6302:	movs	r3, #0
    6304:	strh.w	r3, [sp, #16]
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6308:	movw	r2, #9256	; 0x2428
    630c:	movs	r1, #0
    630e:	ldr	r3, [r4, r2]
    6310:	strh.w	r1, [sp, #14]
    6314:	adds	r3, #2
    6316:	str	r3, [r4, r2]
    6318:	movw	r2, #9256	; 0x2428
    631c:	ldr	r1, [sp, #20]
    631e:	ldr	r3, [r4, r2]
    6320:	str	r1, [sp, #60]	; 0x3c
    6322:	adds	r3, #2
    6324:	str	r3, [r4, r2]
    6326:	movw	r2, #9256	; 0x2428
    632a:	movs	r1, #0
    632c:	ldr	r3, [r4, r2]
    632e:	strh.w	r1, [sp, #12]
    6332:	adds	r3, #4
    6334:	str	r3, [r4, r2]
    6336:	movw	r2, #9256	; 0x2428
    633a:	movs	r1, #0
    633c:	ldr	r3, [r4, r2]
    633e:	str	r1, [sp, #56]	; 0x38
    6340:	adds	r3, #2
    6342:	str	r3, [r4, r2]
    6344:	movw	r2, #9256	; 0x2428
    6348:	movs	r1, #0
    634a:	ldr	r3, [r4, r2]
    634c:	str	r1, [sp, #52]	; 0x34
    634e:	adds	r3, #4
    6350:	str	r3, [r4, r2]
    6352:	movw	r2, #9256	; 0x2428
    6356:	movs	r1, #0
    6358:	ldr	r3, [r4, r2]
    635a:	str	r1, [sp, #48]	; 0x30
    635c:	adds	r3, #4
    635e:	str	r3, [r4, r2]
    6360:	movw	r2, #9256	; 0x2428
    6364:	movs	r1, #0
    6366:	ldr	r3, [r4, r2]
    6368:	str	r1, [sp, #44]	; 0x2c
    636a:	adds	r3, #4
    636c:	str	r3, [r4, r2]
    636e:	movw	r2, #9256	; 0x2428
    6372:	movs	r1, #0
    6374:	ldr	r3, [r4, r2]
    6376:	str	r1, [sp, #40]	; 0x28
    6378:	adds	r3, #4
    637a:	str	r3, [r4, r2]
    637c:	movw	r2, #9256	; 0x2428
    6380:	movs	r1, #0
    6382:	ldr	r3, [r4, r2]
    6384:	str	r1, [sp, #36]	; 0x24
    6386:	adds	r3, #4
    6388:	str	r3, [r4, r2]
    638a:	movw	r2, #9256	; 0x2428
    638e:	ldr	r1, [r7, #0]
    6390:	ldr	r3, [r4, r2]
    6392:	str	r1, [sp, #32]
    6394:	adds	r3, #4
    6396:	str	r3, [r4, r2]
    6398:	ldr	r2, [sp, #20]
    639a:	movw	r1, #9256	; 0x2428
    639e:	sub.w	r2, r2, #4294967295
    63a2:	ldr	r3, [r4, r1]
    63a4:	clz	r2, r2
    63a8:	adds	r3, #4
    63aa:	lsrs	r2, r2, #5
    63ac:	str	r3, [r4, r1]
    63ae:	strh.w	r2, [sp, #18]
    63b2:	movw	r2, #9256	; 0x2428
    63b6:	movs	r1, #0
    63b8:	ldr	r3, [r4, r2]
    63ba:	str	r1, [sp, #68]	; 0x44
    63bc:	adds	r3, #2
    63be:	str	r3, [r4, r2]
    63c0:	movw	r2, #9256	; 0x2428
    63c4:	movs	r1, #0
    63c6:	ldr	r3, [r4, r2]
    63c8:	str	r1, [sp, #64]	; 0x40
    63ca:	adds	r3, #4
    63cc:	str	r3, [r4, r2]
    63ce:	movw	r2, #9256	; 0x2428
    63d2:	ldr	r3, [r4, r2]
    63d4:	adds	r3, #4
    63d6:	str	r3, [r4, r2]
    write32(0); // bit depth
    write32(parent); // parent
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    write32(0); // association description
    write32(0);  // sequence number
    writestring(filename);
    63d8:	add	r1, sp, #72	; 0x48
    63da:	mov	r0, r4
    63dc:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("");  // date created
    63e0:	mov	r0, r4
    63e2:	ldr	r1, [pc, #372]	; (6558 <MTPD::GetObjectInfo(unsigned long)+0x290>)
    63e4:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("");  // date modified
    63e8:	mov	r0, r4
    63ea:	ldr	r1, [pc, #364]	; (6558 <MTPD::GetObjectInfo(unsigned long)+0x290>)
    63ec:	bl	5c8c <MTPD::writestring(char const*)>
    writestring("");  // keywords
    63f0:	mov	r0, r4
    63f2:	ldr	r1, [pc, #356]	; (6558 <MTPD::GetObjectInfo(unsigned long)+0x290>)
    63f4:	bl	5c8c <MTPD::writestring(char const*)>
  }
    63f8:	add	sp, #332	; 0x14c
    63fa:	pop	{r4, r5, r6, r7, pc}
    63fc:	movs	r2, #4
    63fe:	add	r1, sp, #28
    6400:	mov	r0, r4
    6402:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    char filename[256];
    uint32_t size, parent;
    storage_->GetObjectInfo(handle, filename, &size, &parent);

    write32(1); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    6406:	ldr	r2, [sp, #20]
    6408:	movw	r3, #12289	; 0x3001
    640c:	ldrb	r5, [r4, r6]
    640e:	adds	r2, #1
    6410:	it	ne
    6412:	movne	r3, #0
    6414:	strh.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6418:	cmp	r5, #0
    641a:	bne.w	6308 <MTPD::GetObjectInfo(unsigned long)+0x40>
    641e:	add	r1, sp, #16
    6420:	movs	r2, #2
    6422:	mov	r0, r4
    6424:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6428:	ldrb	r3, [r4, r6]
    642a:	strh.w	r5, [sp, #14]
    642e:	cmp	r3, #0
    6430:	bne.w	6318 <MTPD::GetObjectInfo(unsigned long)+0x50>
    6434:	movs	r2, #2
    6436:	add.w	r1, sp, #14
    643a:	mov	r0, r4
    643c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6440:	ldr	r2, [sp, #20]
    6442:	ldrb	r3, [r4, r6]
    6444:	str	r2, [sp, #60]	; 0x3c
    6446:	cmp	r3, #0
    6448:	bne.w	6326 <MTPD::GetObjectInfo(unsigned long)+0x5e>
    644c:	add	r1, sp, #60	; 0x3c
    644e:	movs	r2, #4
    6450:	mov	r0, r4
    6452:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6456:	ldrb	r3, [r4, r6]
    6458:	strh.w	r5, [sp, #12]
    645c:	cmp	r3, #0
    645e:	bne.w	6336 <MTPD::GetObjectInfo(unsigned long)+0x6e>
    6462:	add	r1, sp, #12
    6464:	movs	r2, #2
    6466:	mov	r0, r4
    6468:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    646c:	ldrb	r3, [r4, r6]
    646e:	str	r5, [sp, #56]	; 0x38
    6470:	cmp	r3, #0
    6472:	bne.w	6344 <MTPD::GetObjectInfo(unsigned long)+0x7c>
    6476:	add	r1, sp, #56	; 0x38
    6478:	movs	r2, #4
    647a:	mov	r0, r4
    647c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6480:	ldrb	r3, [r4, r6]
    6482:	str	r5, [sp, #52]	; 0x34
    6484:	cmp	r3, #0
    6486:	bne.w	6352 <MTPD::GetObjectInfo(unsigned long)+0x8a>
    648a:	add	r1, sp, #52	; 0x34
    648c:	movs	r2, #4
    648e:	mov	r0, r4
    6490:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6494:	ldrb	r3, [r4, r6]
    6496:	str	r5, [sp, #48]	; 0x30
    6498:	cmp	r3, #0
    649a:	bne.w	6360 <MTPD::GetObjectInfo(unsigned long)+0x98>
    649e:	add	r1, sp, #48	; 0x30
    64a0:	movs	r2, #4
    64a2:	mov	r0, r4
    64a4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    64a8:	ldrb	r3, [r4, r6]
    64aa:	str	r5, [sp, #44]	; 0x2c
    64ac:	cmp	r3, #0
    64ae:	bne.w	636e <MTPD::GetObjectInfo(unsigned long)+0xa6>
    64b2:	add	r1, sp, #44	; 0x2c
    64b4:	movs	r2, #4
    64b6:	mov	r0, r4
    64b8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    64bc:	ldrb	r3, [r4, r6]
    64be:	str	r5, [sp, #40]	; 0x28
    64c0:	cmp	r3, #0
    64c2:	bne.w	637c <MTPD::GetObjectInfo(unsigned long)+0xb4>
    64c6:	add	r1, sp, #40	; 0x28
    64c8:	movs	r2, #4
    64ca:	mov	r0, r4
    64cc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    64d0:	ldrb	r3, [r4, r6]
    64d2:	str	r5, [sp, #36]	; 0x24
    64d4:	cmp	r3, #0
    64d6:	bne.w	638a <MTPD::GetObjectInfo(unsigned long)+0xc2>
    64da:	movw	r5, #9252	; 0x2424
    64de:	movs	r2, #4
    64e0:	add	r1, sp, #36	; 0x24
    64e2:	mov	r0, r4
    64e4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    64e8:	ldr	r2, [r7, #0]
    64ea:	ldrb	r3, [r4, r5]
    64ec:	str	r2, [sp, #32]
    64ee:	cmp	r3, #0
    64f0:	bne.w	6398 <MTPD::GetObjectInfo(unsigned long)+0xd0>
    64f4:	add	r1, sp, #32
    64f6:	movs	r2, #4
    64f8:	mov	r0, r4
    64fa:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    64fe:	ldr	r3, [sp, #20]
    6500:	ldrb	r7, [r4, r5]
    6502:	sub.w	r3, r3, #4294967295
    6506:	clz	r3, r3
    650a:	lsrs	r3, r3, #5
    650c:	strh.w	r3, [sp, #18]
    6510:	cmp	r7, #0
    6512:	bne.w	63b2 <MTPD::GetObjectInfo(unsigned long)+0xea>
    6516:	add.w	r1, sp, #18
    651a:	movs	r2, #2
    651c:	mov	r0, r4
    651e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6522:	ldrb	r6, [r4, r5]
    6524:	str	r7, [sp, #68]	; 0x44
    6526:	cmp	r6, #0
    6528:	bne.w	63c0 <MTPD::GetObjectInfo(unsigned long)+0xf8>
    652c:	add	r1, sp, #68	; 0x44
    652e:	movs	r2, #4
    6530:	mov	r0, r4
    6532:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6536:	ldrb	r3, [r4, r5]
    6538:	str	r6, [sp, #64]	; 0x40
    653a:	cmp	r3, #0
    653c:	bne.w	63ce <MTPD::GetObjectInfo(unsigned long)+0x106>
    6540:	add	r1, sp, #64	; 0x40
    6542:	movs	r2, #4
    6544:	mov	r0, r4
    6546:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    654a:	b.n	63d8 <MTPD::GetObjectInfo(unsigned long)+0x110>
    654c:	movw	r3, #12289	; 0x3001
    6550:	strh.w	r3, [sp, #16]
    6554:	b.n	6308 <MTPD::GetObjectInfo(unsigned long)+0x40>
    6556:	nop
    6558:	.word	0x20000238

0000655c <MTPD::getObjectPropsSupported(unsigned long)>:
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    655c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6560:	movw	r2, #9252	; 0x2424
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    6564:	ldr.w	r8, [pc, #128]	; 65e8 <MTPD::getObjectPropsSupported(unsigned long)+0x8c>
        write8(0);       // no form
    }
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
    6568:	sub	sp, #12
    656a:	mov	r9, r0
      write32(propertyListNum);
    656c:	ldr.w	r3, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6570:	ldrb	r2, [r0, r2]
    6572:	str	r3, [sp, #4]
    6574:	cbz	r2, 65d2 <MTPD::getObjectPropsSupported(unsigned long)+0x76>
      {
        write_length_ += len;
    6576:	movw	r1, #9256	; 0x2428
    657a:	ldr	r2, [r0, r1]
    657c:	adds	r2, #4
    657e:	str	r2, [r0, r1]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6580:	cbz	r3, 65cc <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    6582:	movw	r7, #9252	; 0x2424
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6586:	movw	r6, #9256	; 0x2428
    658a:	ldr	r5, [pc, #88]	; (65e4 <MTPD::getObjectPropsSupported(unsigned long)+0x88>)
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    658c:	movw	r2, #56321	; 0xdc01
    6590:	add	r7, r9
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6592:	add	r6, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    6594:	movs	r4, #0
    6596:	b.n	65ac <MTPD::getObjectPropsSupported(unsigned long)+0x50>
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    6598:	ldr	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    659a:	adds	r4, #1
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    659c:	adds	r3, #2
    659e:	str	r3, [r6, #0]
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    65a0:	ldr.w	r3, [r8]
    65a4:	cmp	r3, r4
    65a6:	bls.n	65cc <MTPD::getObjectPropsSupported(unsigned long)+0x70>
    65a8:	ldrh.w	r2, [r5, #2]!
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    65ac:	ldrb	r3, [r7, #0]
    65ae:	strh.w	r2, [sp, #2]
    65b2:	cmp	r3, #0
    65b4:	bne.n	6598 <MTPD::getObjectPropsSupported(unsigned long)+0x3c>
    65b6:	movs	r2, #2
    65b8:	mov	r0, r9
  }

    void MTPD::getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    65ba:	adds	r4, #1
    65bc:	add.w	r1, sp, r2
    65c0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    65c4:	ldr.w	r3, [r8]
    65c8:	cmp	r3, r4
    65ca:	bhi.n	65a8 <MTPD::getObjectPropsSupported(unsigned long)+0x4c>
    }
    65cc:	add	sp, #12
    65ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    65d2:	movs	r2, #4
    65d4:	add.w	r1, sp, r2
    65d8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    65dc:	ldr.w	r3, [r8]
    65e0:	b.n	6580 <MTPD::getObjectPropsSupported(unsigned long)+0x24>
    65e2:	nop
    65e4:	.word	0x200001e8
    65e8:	.word	0x20000858

000065ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    65ec:	mvn.w	r3, #56320	; 0xdc00
    65f0:	add	r3, r1
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void MTPD::getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
    65f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65f6:	mov	r4, r0
    65f8:	sub	sp, #148	; 0x94
      switch(p1)
    65fa:	cmp	r3, #67	; 0x43
    65fc:	bhi.w	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6600:	tbh	[pc, r3, lsl #1]
    6604:	.word	0x00d900ba
    6608:	.word	0x014200f8
    660c:	.word	0x008c008c
    6610:	.word	0x01af0161
    6614:	.word	0x008c01f9
    6618:	.word	0x008c0243
    661c:	.word	0x008c008c
    6620:	.word	0x008c008c
    6624:	.word	0x008c008c
    6628:	.word	0x008c008c
    662c:	.word	0x008c008c
    6630:	.word	0x008c008c
    6634:	.word	0x008c008c
    6638:	.word	0x008c008c
    663c:	.word	0x008c008c
    6640:	.word	0x008c008c
    6644:	.word	0x008c008c
    6648:	.word	0x008c008c
    664c:	.word	0x008c008c
    6650:	.word	0x008c008c
    6654:	.word	0x008c008c
    6658:	.word	0x008c008c
    665c:	.word	0x008c008c
    6660:	.word	0x008c008c
    6664:	.word	0x008c008c
    6668:	.word	0x008c008c
    666c:	.word	0x008c008c
    6670:	.word	0x008c008c
    6674:	.word	0x008c008c
    6678:	.word	0x008c008c
    667c:	.word	0x008c008c
    6680:	.word	0x008c008c
    6684:	.word	0x008c028b
    6688:	.word	0x008f008c
    668c:	movs	r2, #2
    668e:	add.w	r1, sp, #66	; 0x42
    6692:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6696:	movs	r3, #10
    6698:	ldrb	r6, [r4, r5]
    669a:	strh.w	r3, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    669e:	cmp	r6, #0
    66a0:	bne.w	6b38 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x54c>
    66a4:	movs	r2, #2
    66a6:	add	r1, sp, #64	; 0x40
    66a8:	mov	r0, r4
    66aa:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    66ae:	ldrb	r3, [r4, r5]
    66b0:	strb.w	r6, [sp, #24]
    66b4:	cmp	r3, #0
    66b6:	bne.w	6b42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x556>
    66ba:	movs	r2, #1
    66bc:	add	r1, sp, #24
    66be:	mov	r0, r4
    66c0:	mov.w	r8, #0
    66c4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    66c8:	mov.w	r9, #0
    66cc:	ldrb	r3, [r4, r5]
    66ce:	strd	r8, r9, [sp, #136]	; 0x88
    66d2:	cmp	r3, #0
    66d4:	bne.w	6b4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x560>
    66d8:	movs	r2, #8
    66da:	add	r1, sp, #136	; 0x88
    66dc:	mov	r0, r4
    66de:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    66e2:	ldrb	r7, [r4, r5]
    66e4:	strd	r8, r9, [sp, #128]	; 0x80
    66e8:	cmp	r7, #0
    66ea:	bne.w	68ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    66ee:	movs	r2, #8
    66f0:	add	r1, sp, #128	; 0x80
    66f2:	mov	r0, r4
    66f4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    66f8:	ldrb	r6, [r4, r5]
    66fa:	str	r7, [sp, #112]	; 0x70
    66fc:	cbnz	r6, 675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    66fe:	movs	r2, #4
    6700:	add	r1, sp, #112	; 0x70
    6702:	mov	r0, r4
    6704:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6708:	ldrb	r3, [r4, r5]
    670a:	strb.w	r6, [sp, #23]
    670e:	cbnz	r3, 6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6710:	mov	r0, r4
    6712:	movs	r2, #1
    6714:	add.w	r1, sp, #23
    6718:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    671c:	add	sp, #148	; 0x94
    671e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6722:	movw	r5, #9252	; 0x2424
    6726:	movw	r2, #56388	; 0xdc44
    672a:	ldrb	r3, [r0, r5]
    672c:	strh.w	r2, [sp, #70]	; 0x46
    6730:	cmp	r3, #0
    6732:	beq.w	6cdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f0>
      {
        write_length_ += len;
    6736:	movw	r2, #9256	; 0x2428
    673a:	ldr	r3, [r4, r2]
    673c:	adds	r3, #2
    673e:	str	r3, [r4, r2]
    6740:	movw	r2, #9256	; 0x2428
    6744:	ldr	r3, [r4, r2]
    6746:	adds	r3, #2
    6748:	str	r3, [r4, r2]
    674a:	movw	r2, #9256	; 0x2428
    674e:	ldr	r3, [r4, r2]
    6750:	adds	r3, #1
    6752:	str	r3, [r4, r2]
    6754:	movw	r2, #9256	; 0x2428
    6758:	ldr	r3, [r4, r2]
    675a:	adds	r3, #1
    675c:	str	r3, [r4, r2]
    675e:	movw	r2, #9256	; 0x2428
    6762:	ldr	r3, [r4, r2]
    6764:	adds	r3, #4
    6766:	str	r3, [r4, r2]
    6768:	movw	r2, #9256	; 0x2428
    676c:	ldr	r3, [r4, r2]
    676e:	adds	r3, #1
    6770:	str	r3, [r4, r2]
          write8(0);
          break;
        default:
          break;
      }
    }
    6772:	add	sp, #148	; 0x94
    6774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6778:	movw	r5, #9252	; 0x2424
    677c:	movw	r2, #56321	; 0xdc01
    6780:	ldrb	r3, [r0, r5]
    6782:	strh.w	r2, [sp, #30]
    6786:	cmp	r3, #0
    6788:	beq.w	6c62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x676>
      {
        write_length_ += len;
    678c:	movw	r2, #9256	; 0x2428
    6790:	ldr	r3, [r4, r2]
    6792:	adds	r3, #2
    6794:	str	r3, [r4, r2]
    6796:	movw	r2, #9256	; 0x2428
    679a:	ldr	r3, [r4, r2]
    679c:	adds	r3, #2
    679e:	str	r3, [r4, r2]
    67a0:	movw	r2, #9256	; 0x2428
    67a4:	ldr	r3, [r4, r2]
    67a6:	adds	r3, #1
    67a8:	str	r3, [r4, r2]
    67aa:	movw	r2, #9256	; 0x2428
    67ae:	ldr	r3, [r4, r2]
    67b0:	adds	r3, #4
    67b2:	str	r3, [r4, r2]
    67b4:	b.n	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    67b6:	movw	r5, #9252	; 0x2424
    67ba:	movw	r2, #56322	; 0xdc02
    67be:	ldrb	r3, [r0, r5]
    67c0:	strh.w	r2, [sp, #36]	; 0x24
    67c4:	cmp	r3, #0
    67c6:	beq.w	6bda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ee>
      {
        write_length_ += len;
    67ca:	movw	r2, #9256	; 0x2428
    67ce:	ldr	r3, [r4, r2]
    67d0:	adds	r3, #2
    67d2:	str	r3, [r4, r2]
    67d4:	movw	r2, #9256	; 0x2428
    67d8:	ldr	r3, [r4, r2]
    67da:	adds	r3, #2
    67dc:	str	r3, [r4, r2]
    67de:	movw	r2, #9256	; 0x2428
    67e2:	ldr	r3, [r4, r2]
    67e4:	adds	r3, #1
    67e6:	str	r3, [r4, r2]
    67e8:	movw	r2, #9256	; 0x2428
    67ec:	ldr	r3, [r4, r2]
    67ee:	adds	r3, #2
    67f0:	str	r3, [r4, r2]
    67f2:	b.n	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    67f4:	movw	r5, #9252	; 0x2424
    67f8:	movw	r2, #56323	; 0xdc03
    67fc:	ldrb	r3, [r0, r5]
    67fe:	strh.w	r2, [sp, #42]	; 0x2a
    6802:	cmp	r3, #0
    6804:	bne.n	67ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1de>
    6806:	movs	r2, #2
    6808:	add.w	r1, sp, #42	; 0x2a
    680c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6810:	movs	r7, #4
    6812:	ldrb.w	r8, [r4, r5]
    6816:	strh.w	r7, [sp, #40]	; 0x28
    681a:	cmp.w	r8, #0
    681e:	bne.n	67d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6820:	movs	r2, #2
    6822:	add	r1, sp, #40	; 0x28
    6824:	mov	r0, r4
    6826:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    682a:	ldrb	r6, [r4, r5]
    682c:	strb.w	r8, [sp, #9]
    6830:	cmp	r6, #0
    6832:	bne.n	67de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6834:	movs	r2, #1
    6836:	add.w	r1, sp, #9
    683a:	mov	r0, r4
    683c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6840:	ldrb.w	r8, [r4, r5]
    6844:	strh.w	r6, [sp, #38]	; 0x26
    6848:	cmp.w	r8, #0
    684c:	bne.n	67e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    684e:	movs	r2, #2
    6850:	add.w	r1, sp, #38	; 0x26
    6854:	mov	r0, r4
    6856:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    685a:	ldrb	r6, [r4, r5]
    685c:	str.w	r8, [sp, #84]	; 0x54
    6860:	cmp	r6, #0
    6862:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6866:	mov	r2, r7
    6868:	add	r1, sp, #84	; 0x54
    686a:	mov	r0, r4
    686c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6870:	ldrb	r3, [r4, r5]
    6872:	strb.w	r6, [sp, #8]
    6876:	cmp	r3, #0
    6878:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    687c:	mov	r0, r4
    687e:	movs	r2, #1
    6880:	add	r1, sp, #8
    6882:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6886:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6888:	movw	r5, #9252	; 0x2424
    688c:	movw	r2, #56324	; 0xdc04
    6890:	ldrb	r3, [r0, r5]
    6892:	strh.w	r2, [sp, #46]	; 0x2e
    6896:	cmp	r3, #0
    6898:	beq.w	6b58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x56c>
      {
        write_length_ += len;
    689c:	movw	r2, #9256	; 0x2428
    68a0:	ldr	r3, [r0, r2]
    68a2:	adds	r3, #2
    68a4:	str	r3, [r0, r2]
    68a6:	movw	r2, #9256	; 0x2428
    68aa:	ldr	r3, [r4, r2]
    68ac:	adds	r3, #2
    68ae:	str	r3, [r4, r2]
    68b0:	movw	r2, #9256	; 0x2428
    68b4:	ldr	r3, [r4, r2]
    68b6:	adds	r3, #1
    68b8:	str	r3, [r4, r2]
    68ba:	movw	r2, #9256	; 0x2428
    68be:	ldr	r3, [r4, r2]
    68c0:	adds	r3, #8
    68c2:	str	r3, [r4, r2]
    68c4:	b.n	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    68c6:	movw	r5, #9252	; 0x2424
    68ca:	movw	r2, #56327	; 0xdc07
    68ce:	ldrb	r3, [r0, r5]
    68d0:	strh.w	r2, [sp, #50]	; 0x32
    68d4:	cmp	r3, #0
    68d6:	bne.w	6736 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    68da:	movs	r2, #2
    68dc:	add.w	r1, sp, #50	; 0x32
    68e0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    68e4:	movw	r2, #65535	; 0xffff
    68e8:	ldrb	r3, [r4, r5]
    68ea:	strh.w	r2, [sp, #48]	; 0x30
    68ee:	cmp	r3, #0
    68f0:	bne.w	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    68f4:	movs	r2, #2
    68f6:	add	r1, sp, #48	; 0x30
    68f8:	mov	r0, r4
    68fa:	movs	r6, #1
    68fc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6900:	ldrb	r7, [r4, r5]
    6902:	strb.w	r6, [sp, #14]
    6906:	cmp	r7, #0
    6908:	bne.w	674a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    690c:	mov	r2, r6
    690e:	add.w	r1, sp, #14
    6912:	mov	r0, r4
    6914:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6918:	ldrb.w	r8, [r4, r5]
    691c:	strb.w	r7, [sp, #13]
    6920:	cmp.w	r8, #0
    6924:	bne.w	6754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6928:	mov	r2, r6
    692a:	add.w	r1, sp, #13
    692e:	mov	r0, r4
    6930:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6934:	ldrb	r7, [r4, r5]
    6936:	str.w	r8, [sp, #92]	; 0x5c
    693a:	cmp	r7, #0
    693c:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6940:	movs	r2, #4
    6942:	add	r1, sp, #92	; 0x5c
    6944:	mov	r0, r4
    6946:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    694a:	ldrb	r3, [r4, r5]
    694c:	strb.w	r7, [sp, #12]
    6950:	cmp	r3, #0
    6952:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6956:	mov	r2, r6
    6958:	mov	r0, r4
    695a:	add	r1, sp, #12
    695c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6960:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6962:	movw	r5, #9252	; 0x2424
    6966:	movw	r2, #56328	; 0xdc08
    696a:	ldrb	r3, [r0, r5]
    696c:	strh.w	r2, [sp, #54]	; 0x36
    6970:	cmp	r3, #0
    6972:	bne.w	6736 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6976:	movs	r2, #2
    6978:	add.w	r1, sp, #54	; 0x36
    697c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6980:	movw	r3, #65535	; 0xffff
    6984:	ldrb	r7, [r4, r5]
    6986:	strh.w	r3, [sp, #52]	; 0x34
    698a:	cmp	r7, #0
    698c:	bne.w	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6990:	movs	r2, #2
    6992:	add	r1, sp, #52	; 0x34
    6994:	mov	r0, r4
    6996:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    699a:	ldrb	r6, [r4, r5]
    699c:	strb.w	r7, [sp, #17]
    69a0:	cmp	r6, #0
    69a2:	bne.w	674a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    69a6:	movs	r2, #1
    69a8:	add.w	r1, sp, #17
    69ac:	mov	r0, r4
    69ae:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    69b2:	ldrb	r7, [r4, r5]
    69b4:	strb.w	r6, [sp, #16]
    69b8:	cmp	r7, #0
    69ba:	bne.w	6754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    69be:	movs	r2, #1
    69c0:	add	r1, sp, #16
    69c2:	mov	r0, r4
    69c4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    69c8:	ldrb	r6, [r4, r5]
    69ca:	str	r7, [sp, #96]	; 0x60
    69cc:	cmp	r6, #0
    69ce:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    69d2:	movs	r2, #4
    69d4:	add	r1, sp, #96	; 0x60
    69d6:	mov	r0, r4
    69d8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    69dc:	ldrb	r3, [r4, r5]
    69de:	strb.w	r6, [sp, #15]
    69e2:	cmp	r3, #0
    69e4:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    69e8:	mov	r0, r4
    69ea:	movs	r2, #1
    69ec:	add.w	r1, sp, #15
    69f0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    69f4:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    69f6:	movw	r5, #9252	; 0x2424
    69fa:	movw	r2, #56329	; 0xdc09
    69fe:	ldrb	r3, [r0, r5]
    6a00:	strh.w	r2, [sp, #58]	; 0x3a
    6a04:	cmp	r3, #0
    6a06:	bne.w	6736 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a>
    6a0a:	movs	r2, #2
    6a0c:	add.w	r1, sp, #58	; 0x3a
    6a10:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a14:	movw	r3, #65535	; 0xffff
    6a18:	ldrb	r7, [r4, r5]
    6a1a:	strh.w	r3, [sp, #56]	; 0x38
    6a1e:	cmp	r7, #0
    6a20:	bne.w	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6a24:	movs	r2, #2
    6a26:	add	r1, sp, #56	; 0x38
    6a28:	mov	r0, r4
    6a2a:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a2e:	ldrb	r6, [r4, r5]
    6a30:	strb.w	r7, [sp, #20]
    6a34:	cmp	r6, #0
    6a36:	bne.w	674a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6a3a:	movs	r2, #1
    6a3c:	add	r1, sp, #20
    6a3e:	mov	r0, r4
    6a40:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a44:	ldrb	r7, [r4, r5]
    6a46:	strb.w	r6, [sp, #19]
    6a4a:	cmp	r7, #0
    6a4c:	bne.w	6754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6a50:	movs	r2, #1
    6a52:	add.w	r1, sp, #19
    6a56:	mov	r0, r4
    6a58:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a5c:	ldrb	r6, [r4, r5]
    6a5e:	str	r7, [sp, #100]	; 0x64
    6a60:	cmp	r6, #0
    6a62:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6a66:	movs	r2, #4
    6a68:	add	r1, sp, #100	; 0x64
    6a6a:	mov	r0, r4
    6a6c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a70:	ldrb	r3, [r4, r5]
    6a72:	strb.w	r6, [sp, #18]
    6a76:	cmp	r3, #0
    6a78:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6a7c:	mov	r0, r4
    6a7e:	movs	r2, #1
    6a80:	add.w	r1, sp, #18
    6a84:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6a88:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6a8a:	movw	r5, #9252	; 0x2424
    6a8e:	movw	r2, #56331	; 0xdc0b
    6a92:	ldrb	r3, [r0, r5]
    6a94:	strh.w	r2, [sp, #62]	; 0x3e
    6a98:	cmp	r3, #0
    6a9a:	bne.w	678c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a0>
    6a9e:	movs	r2, #2
    6aa0:	add.w	r1, sp, #62	; 0x3e
    6aa4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6aa8:	movs	r3, #6
    6aaa:	ldrb	r7, [r4, r5]
    6aac:	strh.w	r3, [sp, #60]	; 0x3c
    6ab0:	cmp	r7, #0
    6ab2:	bne.w	6796 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    6ab6:	movs	r2, #2
    6ab8:	add	r1, sp, #60	; 0x3c
    6aba:	mov	r0, r4
    6abc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6ac0:	ldrb	r6, [r4, r5]
    6ac2:	strb.w	r7, [sp, #22]
    6ac6:	cmp	r6, #0
    6ac8:	bne.w	67a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6acc:	movs	r2, #1
    6ace:	add.w	r1, sp, #22
    6ad2:	mov	r0, r4
    6ad4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6ad8:	ldrb	r7, [r4, r5]
    6ada:	str	r6, [sp, #108]	; 0x6c
    6adc:	cmp	r7, #0
    6ade:	bne.w	67aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    6ae2:	movs	r2, #4
    6ae4:	add	r1, sp, #108	; 0x6c
    6ae6:	mov	r0, r4
    6ae8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6aec:	ldrb	r6, [r4, r5]
    6aee:	str	r7, [sp, #104]	; 0x68
    6af0:	cmp	r6, #0
    6af2:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6af6:	movs	r2, #4
    6af8:	add	r1, sp, #104	; 0x68
    6afa:	mov	r0, r4
    6afc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6b00:	ldrb	r3, [r4, r5]
    6b02:	strb.w	r6, [sp, #21]
    6b06:	cmp	r3, #0
    6b08:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6b0c:	mov	r0, r4
    6b0e:	movs	r2, #1
    6b10:	add.w	r1, sp, #21
    6b14:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6b18:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6b1a:	movw	r5, #9252	; 0x2424
    6b1e:	movw	r2, #56385	; 0xdc41
    6b22:	ldrb	r3, [r0, r5]
    6b24:	strh.w	r2, [sp, #66]	; 0x42
    6b28:	cmp	r3, #0
    6b2a:	beq.w	668c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0>
      {
        write_length_ += len;
    6b2e:	movw	r2, #9256	; 0x2428
    6b32:	ldr	r3, [r0, r2]
    6b34:	adds	r3, #2
    6b36:	str	r3, [r0, r2]
    6b38:	movw	r2, #9256	; 0x2428
    6b3c:	ldr	r3, [r4, r2]
    6b3e:	adds	r3, #2
    6b40:	str	r3, [r4, r2]
    6b42:	movw	r2, #9256	; 0x2428
    6b46:	ldr	r3, [r4, r2]
    6b48:	adds	r3, #1
    6b4a:	str	r3, [r4, r2]
    6b4c:	movw	r2, #9256	; 0x2428
    6b50:	ldr	r3, [r4, r2]
    6b52:	adds	r3, #8
    6b54:	str	r3, [r4, r2]
    6b56:	b.n	68ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6b58:	movs	r2, #2
    6b5a:	add.w	r1, sp, #46	; 0x2e
    6b5e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6b62:	movs	r6, #8
    6b64:	ldrb	r7, [r4, r5]
    6b66:	strh.w	r6, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6b6a:	cmp	r7, #0
    6b6c:	bne.w	68a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ba>
    6b70:	movs	r2, #2
    6b72:	add	r1, sp, #44	; 0x2c
    6b74:	mov	r0, r4
    6b76:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6b7a:	ldrb	r3, [r4, r5]
    6b7c:	strb.w	r7, [sp, #11]
    6b80:	cmp	r3, #0
    6b82:	bne.w	68b0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c4>
    6b86:	movs	r2, #1
    6b88:	add.w	r1, sp, #11
    6b8c:	mov	r0, r4
    6b8e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6b92:	movs	r2, #0
    6b94:	movs	r3, #0
    6b96:	ldrb	r7, [r4, r5]
    6b98:	strd	r2, r3, [sp, #120]	; 0x78
    6b9c:	cmp	r7, #0
    6b9e:	bne.w	68ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
    6ba2:	mov	r2, r6
    6ba4:	add	r1, sp, #120	; 0x78
    6ba6:	mov	r0, r4
    6ba8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6bac:	ldrb	r6, [r4, r5]
    6bae:	str	r7, [sp, #88]	; 0x58
    6bb0:	cmp	r6, #0
    6bb2:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6bb6:	movs	r2, #4
    6bb8:	add	r1, sp, #88	; 0x58
    6bba:	mov	r0, r4
    6bbc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6bc0:	ldrb	r3, [r4, r5]
    6bc2:	strb.w	r6, [sp, #10]
    6bc6:	cmp	r3, #0
    6bc8:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6bcc:	mov	r0, r4
    6bce:	movs	r2, #1
    6bd0:	add.w	r1, sp, #10
    6bd4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6bd8:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6bda:	movs	r2, #2
    6bdc:	add	r1, sp, #36	; 0x24
    6bde:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6be2:	movs	r7, #4
    6be4:	ldrb.w	r8, [r4, r5]
    6be8:	strh.w	r7, [sp, #34]	; 0x22
    6bec:	cmp.w	r8, #0
    6bf0:	bne.w	67d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e8>
    6bf4:	movs	r2, #2
    6bf6:	add.w	r1, sp, #34	; 0x22
    6bfa:	mov	r0, r4
    6bfc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c00:	ldrb	r6, [r4, r5]
    6c02:	strb.w	r8, [sp, #7]
    6c06:	cmp	r6, #0
    6c08:	bne.w	67de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1f2>
    6c0c:	movs	r2, #1
    6c0e:	add.w	r1, sp, #7
    6c12:	mov	r0, r4
    6c14:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c18:	ldrb.w	r8, [r4, r5]
    6c1c:	strh.w	r6, [sp, #32]
    6c20:	cmp.w	r8, #0
    6c24:	bne.w	67e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1fc>
    6c28:	movs	r2, #2
    6c2a:	add	r1, sp, #32
    6c2c:	mov	r0, r4
    6c2e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c32:	ldrb	r6, [r4, r5]
    6c34:	str.w	r8, [sp, #80]	; 0x50
    6c38:	cmp	r6, #0
    6c3a:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6c3e:	mov	r2, r7
    6c40:	add	r1, sp, #80	; 0x50
    6c42:	mov	r0, r4
    6c44:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c48:	ldrb	r3, [r4, r5]
    6c4a:	strb.w	r6, [sp, #6]
    6c4e:	cmp	r3, #0
    6c50:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6c54:	mov	r0, r4
    6c56:	movs	r2, #1
    6c58:	add.w	r1, sp, #6
    6c5c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c60:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6c62:	movs	r2, #2
    6c64:	add.w	r1, sp, #30
    6c68:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c6c:	movs	r3, #6
    6c6e:	ldrb	r7, [r4, r5]
    6c70:	strh.w	r3, [sp, #28]
    6c74:	cmp	r7, #0
    6c76:	bne.w	6796 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa>
    6c7a:	movs	r2, #2
    6c7c:	add	r1, sp, #28
    6c7e:	mov	r0, r4
    6c80:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c84:	ldrb	r6, [r4, r5]
    6c86:	strb.w	r7, [sp, #5]
    6c8a:	cmp	r6, #0
    6c8c:	bne.w	67a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4>
    6c90:	movs	r2, #1
    6c92:	add.w	r1, sp, #5
    6c96:	mov	r0, r4
    6c98:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6c9c:	ldrb	r7, [r4, r5]
    6c9e:	str	r6, [sp, #76]	; 0x4c
    6ca0:	cmp	r7, #0
    6ca2:	bne.w	67aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1be>
    6ca6:	movs	r2, #4
    6ca8:	add	r1, sp, #76	; 0x4c
    6caa:	mov	r0, r4
    6cac:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6cb0:	ldrb	r6, [r4, r5]
    6cb2:	str	r7, [sp, #72]	; 0x48
    6cb4:	cmp	r6, #0
    6cb6:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6cba:	movs	r2, #4
    6cbc:	add	r1, sp, #72	; 0x48
    6cbe:	mov	r0, r4
    6cc0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6cc4:	ldrb	r3, [r4, r5]
    6cc6:	strb.w	r6, [sp, #4]
    6cca:	cmp	r3, #0
    6ccc:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6cd0:	mov	r0, r4
    6cd2:	movs	r2, #1
    6cd4:	add	r1, sp, #4
    6cd6:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6cda:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6cdc:	movs	r2, #2
    6cde:	add.w	r1, sp, #70	; 0x46
    6ce2:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6ce6:	movw	r3, #65535	; 0xffff
    6cea:	ldrb	r7, [r4, r5]
    6cec:	strh.w	r3, [sp, #68]	; 0x44
    6cf0:	cmp	r7, #0
    6cf2:	bne.w	6740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x154>
    6cf6:	movs	r2, #2
    6cf8:	add	r1, sp, #68	; 0x44
    6cfa:	mov	r0, r4
    6cfc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6d00:	ldrb	r6, [r4, r5]
    6d02:	strb.w	r7, [sp, #27]
    6d06:	cmp	r6, #0
    6d08:	bne.w	674a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e>
    6d0c:	movs	r2, #1
    6d0e:	add.w	r1, sp, #27
    6d12:	mov	r0, r4
    6d14:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6d18:	ldrb	r7, [r4, r5]
    6d1a:	strb.w	r6, [sp, #26]
    6d1e:	cmp	r7, #0
    6d20:	bne.w	6754 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x168>
    6d24:	movs	r2, #1
    6d26:	add.w	r1, sp, #26
    6d2a:	mov	r0, r4
    6d2c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6d30:	ldrb	r6, [r4, r5]
    6d32:	str	r7, [sp, #116]	; 0x74
    6d34:	cmp	r6, #0
    6d36:	bne.w	675e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x172>
    6d3a:	movs	r2, #4
    6d3c:	add	r1, sp, #116	; 0x74
    6d3e:	mov	r0, r4
    6d40:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6d44:	ldrb	r3, [r4, r5]
    6d46:	strb.w	r6, [sp, #25]
    6d4a:	cmp	r3, #0
    6d4c:	bne.w	6768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17c>
    6d50:	mov	r0, r4
    6d52:	movs	r2, #1
    6d54:	add.w	r1, sp, #25
    6d58:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
          write8(0);
          break;
        default:
          break;
      }
    }
    6d5c:	b.n	671c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x130>
    6d5e:	nop

00006d60 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6d60:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d64:	mov	r4, r0
    6d66:	sub	sp, #184	; 0xb8
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6d68:	ldr	r0, [r0, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6d6a:	mov	r5, r2
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6d6c:	add	r7, sp, #20
    6d6e:	add	r3, sp, #16
    6d70:	ldr	r6, [r0, #0]
    6d72:	add	r2, sp, #56	; 0x38
    6d74:	str	r7, [sp, #0]
          break;
      }
    }

    void MTPD::getObjectPropValue(uint32_t p1, uint32_t p2)
    { char name[128];
    6d76:	mov	r8, r1
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
    6d78:	ldr	r6, [r6, #28]
    6d7a:	blx	r6
      dir = size == 0xFFFFFFFFUL;
      switch(p2)
    6d7c:	mvn.w	r3, #56320	; 0xdc00
    { char name[128];
      uint32_t dir;
      uint32_t size;
      uint32_t parent;
      storage_->GetObjectInfo(p1,name,&size,&parent);
      dir = size == 0xFFFFFFFFUL;
    6d80:	ldr	r2, [sp, #16]
      switch(p2)
    6d82:	add	r3, r5
    6d84:	cmp	r3, #67	; 0x43
    6d86:	bhi.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6d88:	tbb	[pc, r3]
    6d8c:	.word	0xab9c6354
    6d90:	.word	0x464d4343
    6d94:	.word	0x43784346
    6d98:	.word	0x43434343
    6d9c:	.word	0x43434343
    6da0:	.word	0x43434343
    6da4:	.word	0x43434343
    6da8:	.word	0x43434343
    6dac:	.word	0x43434343
    6db0:	.word	0x43434343
    6db4:	.word	0x43434343
    6db8:	.word	0x43434343
    6dbc:	.word	0x43434343
    6dc0:	.word	0x43434343
    6dc4:	.word	0x43434343
    6dc8:	.word	0x43434343
    6dcc:	.word	0x4d434385
    6dd0:	movs	r2, #4
    6dd2:	add	r1, sp, #52	; 0x34
    6dd4:	mov	r0, r4
    6dd6:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6dda:	ldr	r2, [sp, #20]
    6ddc:	ldrb	r3, [r4, r5]
    6dde:	str	r2, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6de0:	cmp	r3, #0
    6de2:	bne.n	6eae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x14e>
    6de4:	movs	r2, #4
    6de6:	add	r1, sp, #48	; 0x30
    6de8:	mov	r0, r4
    6dea:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6dee:	movs	r3, #1
    6df0:	ldrb	r6, [r4, r5]
    6df2:	str	r3, [sp, #44]	; 0x2c
    6df4:	cmp	r6, #0
    6df6:	bne.n	6eb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
    6df8:	movs	r2, #4
    6dfa:	add	r1, sp, #44	; 0x2c
    6dfc:	mov	r0, r4
    6dfe:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6e02:	ldrb	r3, [r4, r5]
    6e04:	str	r6, [sp, #40]	; 0x28
    6e06:	cbnz	r3, 6e42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    6e08:	mov	r0, r4
    6e0a:	movs	r2, #4
    6e0c:	add	r1, sp, #40	; 0x28
    6e0e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6e12:	add	sp, #184	; 0xb8
    6e14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          break;
        case MTP_PROPERTY_DATE_CREATED:       //0xDC08:
          writestring("");
          break;
        case MTP_PROPERTY_DATE_MODIFIED:      //0xDC09:
          writestring("");
    6e18:	mov	r0, r4
    6e1a:	ldr	r1, [pc, #264]	; (6f24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c4>)
    6e1c:	bl	5c8c <MTPD::writestring(char const*)>
          writestring(name);
          break;
        default:
          break;
      }
    }
    6e20:	add	sp, #184	; 0xb8
    6e22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          write32(parent);
          write32(1);
          write32(0);
          break;
        case MTP_PROPERTY_NAME:               //0xDC44:
          writestring(name);
    6e26:	add	r1, sp, #56	; 0x38
    6e28:	mov	r0, r4
    6e2a:	bl	5c8c <MTPD::writestring(char const*)>
          break;
        default:
          break;
      }
    }
    6e2e:	add	sp, #184	; 0xb8
    6e30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6e34:	movw	r3, #9252	; 0x2424
    6e38:	str.w	r8, [sp, #24]
    6e3c:	ldrb	r3, [r4, r3]
    6e3e:	cmp	r3, #0
    6e40:	beq.n	6f18 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b8>
      {
        write_length_ += len;
    6e42:	movw	r2, #9256	; 0x2428
    6e46:	ldr	r3, [r4, r2]
    6e48:	adds	r3, #4
    6e4a:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6e4c:	add	sp, #184	; 0xb8
    6e4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6e52:	adds	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6e54:	movw	r2, #9252	; 0x2424
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6e58:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6e5c:	ldrb	r2, [r4, r2]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(p1);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    6e5e:	it	ne
    6e60:	movne.w	r3, #12288	; 0x3000
    6e64:	strh.w	r3, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6e68:	cmp	r2, #0
    6e6a:	beq.n	6f0c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ac>
      {
        write_length_ += len;
    6e6c:	movw	r2, #9256	; 0x2428
    6e70:	ldr	r3, [r4, r2]
    6e72:	adds	r3, #2
    6e74:	str	r3, [r4, r2]
          writestring(name);
          break;
        default:
          break;
      }
    }
    6e76:	add	sp, #184	; 0xb8
    6e78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6e7c:	movw	r3, #9252	; 0x2424
    6e80:	ldr	r2, [sp, #20]
    6e82:	ldrb	r3, [r4, r3]
    6e84:	str	r2, [sp, #36]	; 0x24
    6e86:	cmp	r3, #0
    6e88:	bne.n	6e42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    6e8a:	mov	r0, r4
    6e8c:	movs	r2, #4
    6e8e:	add	r1, sp, #36	; 0x24
    6e90:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6e94:	b.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6e96:	movw	r5, #9252	; 0x2424
    6e9a:	str.w	r8, [sp, #52]	; 0x34
    6e9e:	ldrb	r3, [r4, r5]
    6ea0:	cmp	r3, #0
    6ea2:	beq.n	6dd0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
      {
        write_length_ += len;
    6ea4:	movw	r2, #9256	; 0x2428
    6ea8:	ldr	r3, [r4, r2]
    6eaa:	adds	r3, #4
    6eac:	str	r3, [r4, r2]
    6eae:	movw	r2, #9256	; 0x2428
    6eb2:	ldr	r3, [r4, r2]
    6eb4:	adds	r3, #4
    6eb6:	str	r3, [r4, r2]
    6eb8:	movw	r2, #9256	; 0x2428
    6ebc:	ldr	r3, [r4, r2]
    6ebe:	adds	r3, #4
    6ec0:	str	r3, [r4, r2]
    6ec2:	b.n	6e42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    { if (write_get_length_) 
    6ec4:	movw	r3, #9252	; 0x2424
    6ec8:	movs	r2, #0
    6eca:	ldrb	r3, [r4, r3]
    6ecc:	strh.w	r2, [sp, #14]
    6ed0:	cmp	r3, #0
    6ed2:	bne.n	6e6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10c>
    6ed4:	mov	r0, r4
    6ed6:	movs	r2, #2
    6ed8:	add.w	r1, sp, #14
    6edc:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6ee0:	b.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6ee2:	movw	r6, #9252	; 0x2424
    6ee6:	str	r2, [sp, #32]
    6ee8:	ldrb	r5, [r4, r6]
    6eea:	cmp	r5, #0
    6eec:	bne.n	6eb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x158>
    6eee:	movs	r2, #4
    6ef0:	add	r1, sp, #32
    6ef2:	mov	r0, r4
    6ef4:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6ef8:	ldrb	r3, [r4, r6]
    6efa:	str	r5, [sp, #28]
    6efc:	cmp	r3, #0
    6efe:	bne.n	6e42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    6f00:	mov	r0, r4
    6f02:	movs	r2, #4
    6f04:	add	r1, sp, #28
    6f06:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6f0a:	b.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6f0c:	mov	r0, r4
    6f0e:	movs	r2, #2
    6f10:	add	r1, sp, #12
    6f12:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6f16:	b.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6f18:	mov	r0, r4
    6f1a:	movs	r2, #4
    6f1c:	add	r1, sp, #24
    6f1e:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    6f22:	b.n	6e12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xb2>
    6f24:	.word	0x20000238

00006f28 <MTPD::pull_packet(unsigned char*)>:
    {
      return usb_mtp_send(data_buffer,len,60);
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    6f28:	push	{r4, lr}
    6f2a:	mov	r4, r1
      while(!usb_mtp_available());
    6f2c:	bl	82ec <usb_mtp_available>
    6f30:	cmp	r0, #0
    6f32:	beq.n	6f2c <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    6f34:	mov	r0, r4
    6f36:	movs	r1, #60	; 0x3c
    }
    6f38:	ldmia.w	sp!, {r4, lr}
    }

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
      while(!usb_mtp_available());
      return usb_mtp_recv(data_buffer,60);
    6f3c:	b.w	8240 <usb_mtp_recv>

00006f40 <MTPD::GetObject(unsigned long)>:
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6f40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f44:	mov	sl, r0
      uint32_t size = storage_->GetSize(object_id);
    6f46:	ldr	r0, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6f48:	sub	sp, #28
      uint32_t size = storage_->GetSize(object_id);
    6f4a:	ldr	r3, [r0, #0]
        }
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
    6f4c:	str	r1, [sp, #12]
      uint32_t size = storage_->GetSize(object_id);
    6f4e:	ldr	r3, [r3, #32]
    6f50:	blx	r3

      if (write_get_length_) {
    6f52:	movw	r3, #9252	; 0x2424
      }
    }

    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);
    6f56:	mov	r9, r0

      if (write_get_length_) {
    6f58:	ldrb.w	r6, [sl, r3]
    6f5c:	cmp	r6, #0
    6f5e:	bne.n	705c <MTPD::GetObject(unsigned long)+0x11c>
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
    6f60:	movw	r3, #9248	; 0x2420
    6f64:	mov.w	r7, #8192	; 0x2000
    6f68:	str.w	r7, [sl, r3]
        while(pos<size)
    6f6c:	cmp	r0, #0
    6f6e:	beq.n	7034 <MTPD::GetObject(unsigned long)+0xf4>
    6f70:	add.w	r3, sl, #544	; 0x220
    6f74:	movw	r8, #9248	; 0x2420
    6f78:	add.w	fp, sl, #1056	; 0x420
    6f7c:	str.w	sl, [sp, #16]
    6f80:	add	r8, sl
    6f82:	str	r3, [sp, #20]
    6f84:	movs	r5, #12
    6f86:	mov	sl, r3
    6f88:	b.n	6fc8 <MTPD::GetObject(unsigned long)+0x88>
    6f8a:	ldr	r2, [sp, #8]
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6f8c:	add.w	r0, sl, r5
    6f90:	add.w	r1, fp, r7
    6f94:	cmp	r2, r3
    6f96:	it	cs
    6f98:	movcs	r2, r3
    6f9a:	rsb	r3, r5, #512	; 0x200
    6f9e:	cmp	r2, r3
    6fa0:	mov	r4, r2
    6fa2:	it	cs
    6fa4:	movcs	r4, r3
    6fa6:	mov	r2, r4
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    6fa8:	add	r5, r4
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    6faa:	bl	8310 <memcpy>
          disk_pos += to_copy;
    6fae:	ldr.w	r3, [r8]
          pos += to_copy;
    6fb2:	add	r6, r4
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6fb4:	cmp.w	r5, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    6fb8:	add	r4, r3
    6fba:	str.w	r4, [r8]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    6fbe:	beq.n	700c <MTPD::GetObject(unsigned long)+0xcc>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    6fc0:	cmp	r9, r6
    6fc2:	bls.n	702c <MTPD::GetObject(unsigned long)+0xec>
    6fc4:	ldr.w	r7, [r8]
    6fc8:	rsb	r3, r6, r9
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    6fcc:	cmp.w	r7, #8192	; 0x2000
    6fd0:	str	r3, [sp, #8]
    6fd2:	rsb	r3, r7, #8192	; 0x2000
    6fd6:	bne.n	6f8a <MTPD::GetObject(unsigned long)+0x4a>
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6fd8:	rsb	r3, r6, r9
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6fdc:	mov	r2, r6
        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
        {
          if(disk_pos==DISK_BUFFER_SIZE)
          {
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    6fde:	mov	r1, r3
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    6fe0:	ldr	r3, [sp, #16]
//#include <algorithm> // this isn't really needed, is it?  (slows down compiling)
#include <utility>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    6fe2:	cmp.w	r1, #8192	; 0x2000
    6fe6:	ldr	r0, [r3, #0]
    6fe8:	mov	ip, r1
    6fea:	mov	r3, fp
    6fec:	ldr.w	lr, [r0]
    6ff0:	it	cs
    6ff2:	movcs.w	ip, #8192	; 0x2000
    6ff6:	ldr	r1, [sp, #12]
    6ff8:	str.w	ip, [sp]
    6ffc:	ldr.w	r4, [lr, #40]	; 0x28
    7000:	blx	r4
    7002:	mov	r3, r7
    7004:	movs	r7, #0
            disk_pos=0;
    7006:	str.w	r7, [r8]
    700a:	b.n	6f8a <MTPD::GetObject(unsigned long)+0x4a>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    700c:	mov	r1, r5
    700e:	movs	r2, #60	; 0x3c
    7010:	mov	r0, sl
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
            if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
            len=0;
    7012:	movs	r5, #0
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    7014:	bl	8288 <usb_mtp_send>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
            if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
    7018:	cmp.w	r0, #512	; 0x200
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    701c:	mov	r2, r0
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
            if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
    701e:	ldr	r1, [pc, #80]	; (7070 <MTPD::GetObject(unsigned long)+0x130>)
    7020:	ldr	r0, [pc, #80]	; (7074 <MTPD::GetObject(unsigned long)+0x134>)
    7022:	beq.n	6fc0 <MTPD::GetObject(unsigned long)+0x80>
    7024:	bl	a08c <Print::printf(char const*, ...)>
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    7028:	cmp	r9, r6
    702a:	bhi.n	6fc4 <MTPD::GetObject(unsigned long)+0x84>
          { int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
            if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
            len=0;
          }
        }
        if(len>0)
    702c:	cbnz	r5, 703a <MTPD::GetObject(unsigned long)+0xfa>
          int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
          if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
          len=0;
        }
      }
    }
    702e:	add	sp, #28
    7030:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7034:	add.w	r3, sl, #544	; 0x220
    7038:	str	r3, [sp, #20]
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    703a:	ldr	r0, [sp, #20]
    703c:	movs	r2, #60	; 0x3c
    703e:	mov.w	r1, #512	; 0x200
    7042:	bl	8288 <usb_mtp_send>
          }
        }
        if(len>0)
        {
          int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
          if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
    7046:	cmp.w	r0, #512	; 0x200
    704a:	beq.n	702e <MTPD::GetObject(unsigned long)+0xee>
    704c:	mov	r2, r0
    704e:	ldr	r1, [pc, #32]	; (7070 <MTPD::GetObject(unsigned long)+0x130>)
    7050:	ldr	r0, [pc, #32]	; (7074 <MTPD::GetObject(unsigned long)+0x134>)
          len=0;
        }
      }
    }
    7052:	add	sp, #28
    7054:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          }
        }
        if(len>0)
        {
          int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
          if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
    7058:	b.w	a08c <Print::printf(char const*, ...)>
    void MTPD::GetObject(uint32_t object_id) 
    {
      uint32_t size = storage_->GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    705c:	movw	r2, #9256	; 0x2428
    7060:	ldr.w	r3, [sl, r2]
    7064:	add	r3, r0
    7066:	str.w	r3, [sl, r2]
          int ret = push_packet(tx_data_buffer,MTP_TX_SIZE);
          if(ret != MTP_TX_SIZE) printf("send %d\n",ret);
          len=0;
        }
      }
    }
    706a:	add	sp, #28
    706c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7070:	.word	0x20000230
    7074:	.word	0x200008e8

00007078 <MTPD::read(char*, unsigned long)>:
                CONTAINER->op, CONTAINER->len, CONTAINER->type, CONTAINER->transaction_id, \
                CONTAINER->params[0], CONTAINER->params[1], CONTAINER->params[2]);  }


    void MTPD::read(char* data, uint32_t size) 
    {
    7078:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      static int index=0;
      if(!size) 
    707c:	cbz	r2, 70da <MTPD::read(char*, unsigned long)+0x62>
    707e:	ldr.w	fp, [pc, #100]	; 70e4 <MTPD::read(char*, unsigned long)+0x6c>
    7082:	mov	r8, r0
    7084:	mov	r6, r1
    7086:	mov	r5, r2

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
    7088:	add.w	r7, r0, #32
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    708c:	mov	r9, fp
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    708e:	ldr.w	sl, [fp]
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
    7092:	mov	r0, r6
        index=0;
        return;
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
    7094:	rsb	r4, sl, #512	; 0x200
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
    7098:	add.w	r1, r7, sl
    709c:	cmp	r4, r5
    709e:	it	cs
    70a0:	movcs	r4, r5
      }

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
    70a2:	cbz	r6, 70ac <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, data_buffer + index, to_copy);
    70a4:	mov	r2, r4
          data += to_copy;
    70a6:	add	r6, r4

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
    70a8:	bl	8310 <memcpy>
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    70ac:	add.w	r3, r4, sl
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
    70b0:	subs	r4, r5, r4
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    70b2:	cmp.w	r3, #512	; 0x200
        if (data) {
          memcpy(data, data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
    70b6:	str.w	r3, [fp]
      {
        index=0;
        return;
      }

      while (size) {
    70ba:	mov	r5, r4
          memcpy(data, data_buffer + index, to_copy);
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
    70bc:	beq.n	70c6 <MTPD::read(char*, unsigned long)+0x4e>
      {
        index=0;
        return;
      }

      while (size) {
    70be:	cmp	r4, #0
    70c0:	bne.n	708e <MTPD::read(char*, unsigned long)+0x16>
    70c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          data += to_copy;
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(data_buffer);
    70c6:	mov	r1, r7
    70c8:	mov	r0, r8
    70ca:	bl	6f28 <MTPD::pull_packet(unsigned char*)>
          index=0;
    70ce:	movs	r3, #0
    70d0:	str.w	r3, [r9]
      {
        index=0;
        return;
      }

      while (size) {
    70d4:	cmp	r4, #0
    70d6:	bne.n	708e <MTPD::read(char*, unsigned long)+0x16>
    70d8:	b.n	70c2 <MTPD::read(char*, unsigned long)+0x4a>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    70da:	ldr	r3, [pc, #8]	; (70e4 <MTPD::read(char*, unsigned long)+0x6c>)
    70dc:	str	r2, [r3, #0]
        return;
    70de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    70e2:	nop
    70e4:	.word	0x20003d20

000070e8 <MTPD::readstring(char*)>:

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    70e8:	push	{r4, r5, r6, lr}
    70ea:	sub	sp, #8
    70ec:	mov	r4, r1
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    70ee:	movs	r2, #1
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    70f0:	mov	r6, r0
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    70f2:	add.w	r1, sp, #6
    70f6:	bl	7078 <MTPD::read(char*, unsigned long)>
    70fa:	ldrb.w	r2, [sp, #6]
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
    70fe:	cbz	r4, 7120 <MTPD::readstring(char*)+0x38>
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    7100:	cbz	r2, 711c <MTPD::readstring(char*)+0x34>
    7102:	adds	r5, r4, r2
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7104:	movs	r2, #2
    7106:	add.w	r1, sp, #6
    710a:	mov	r0, r6
    710c:	bl	7078 <MTPD::read(char*, unsigned long)>
    7110:	ldrh.w	r3, [sp, #6]
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
        *(buffer++) = read16();
    7114:	strb.w	r3, [r4], #1
  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    } else {
      for (int i = 0; i < len; i++) {
    7118:	cmp	r5, r4
    711a:	bne.n	7104 <MTPD::readstring(char*)+0x1c>
        *(buffer++) = read16();
      }
    }
  }
    711c:	add	sp, #8
    711e:	pop	{r4, r5, r6, pc}
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }

  void MTPD::readstring(char* buffer) {
    int len = read8();
    if (!buffer) {
      read(NULL, len * 2);
    7120:	lsls	r2, r2, #1
    7122:	mov	r1, r4
    7124:	mov	r0, r6
    7126:	bl	7078 <MTPD::read(char*, unsigned long)>
    712a:	b.n	711c <MTPD::readstring(char*)+0x34>

0000712c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>:
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    712c:	push	{r4, r5, lr}
    712e:	sub	sp, #132	; 0x84
    7130:	mov	r4, r0
    7132:	mov	r5, r1


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7134:	movs	r2, #12
    7136:	mov	r1, sp
    7138:	bl	7078 <MTPD::read(char*, unsigned long)>
      
      if(p2==0xDC07)
      {
        char filename[128];
        ReadMTPHeader();
        readstring(filename);
    713c:	mov	r1, sp
    713e:	mov	r0, r4
    7140:	bl	70e8 <MTPD::readstring(char*)>

        storage_->rename(p1,filename);
    7144:	ldr	r0, [r4, #0]
    7146:	mov	r2, sp
    7148:	mov	r1, r5
    714a:	ldr	r3, [r0, #0]
    714c:	ldr	r3, [r3, #64]	; 0x40
    714e:	blx	r3

        return 0x2001;
      }
      else
        return 0x2005;
    }
    7150:	movw	r0, #8193	; 0x2001
    7154:	add	sp, #132	; 0x84
    7156:	pop	{r4, r5, pc}

00007158 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    7158:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      pull_packet(data_buffer);
    715c:	add.w	r1, r0, #32
          index=0;
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    7160:	sub	sp, #264	; 0x108
    7162:	mov	r4, r0
    7164:	mov	sl, r2
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7166:	movs	r5, #0
        }
      }
    }

    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
      pull_packet(data_buffer);
    7168:	bl	6f28 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    716c:	ldr	r3, [pc, #300]	; (729c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x144>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    716e:	mov	r0, r4
    7170:	add	r1, sp, #8
    7172:	movs	r2, #12
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    7174:	str	r5, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    7176:	bl	7078 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    717a:	ldrh.w	r3, [sp, #12]
    717e:	cmp	r3, #2
    7180:	beq.w	7296 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x13e>
    7184:	mvn.w	r5, #51	; 0x33
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7188:	movs	r2, #4
    718a:	add	r1, sp, #8
    718c:	mov	r0, r4
    718e:	bl	7078 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7192:	movs	r2, #2
    7194:	add	r1, sp, #8
    7196:	mov	r0, r4
    7198:	bl	7078 <MTPD::read(char*, unsigned long)>
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    719c:	movw	r3, #12289	; 0x3001
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71a0:	ldrh.w	r9, [sp, #8]
    71a4:	movs	r2, #2
    71a6:	add	r1, sp, #8
    71a8:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    71aa:	rsb	r9, r3, r9
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71ae:	bl	7078 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71b2:	movs	r2, #4
    71b4:	add	r1, sp, #8
    71b6:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    71b8:	clz	r9, r9
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71bc:	bl	7078 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71c0:	movs	r2, #2
    71c2:	add	r1, sp, #8
    71c4:	mov	r0, r4
    71c6:	bl	7078 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    71ca:	movs	r2, #4
    71cc:	add	r1, sp, #8
    71ce:	mov	r0, r4
    71d0:	bl	7078 <MTPD::read(char*, unsigned long)>
    71d4:	movs	r2, #4
    71d6:	add	r1, sp, #8
    71d8:	mov	r0, r4
    71da:	bl	7078 <MTPD::read(char*, unsigned long)>
    71de:	movs	r2, #4
    71e0:	add	r1, sp, #8
    71e2:	mov	r0, r4
    71e4:	bl	7078 <MTPD::read(char*, unsigned long)>
    71e8:	movs	r2, #4
    71ea:	add	r1, sp, #8
    71ec:	mov	r0, r4
    71ee:	bl	7078 <MTPD::read(char*, unsigned long)>
    71f2:	movs	r2, #4
    71f4:	add	r1, sp, #8
    71f6:	mov	r0, r4
    71f8:	bl	7078 <MTPD::read(char*, unsigned long)>
    71fc:	movs	r2, #4
    71fe:	add	r1, sp, #8
    7200:	mov	r0, r4
    7202:	bl	7078 <MTPD::read(char*, unsigned long)>
    7206:	movs	r2, #4
    7208:	add	r1, sp, #8
    720a:	mov	r0, r4
    720c:	bl	7078 <MTPD::read(char*, unsigned long)>
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7210:	movs	r2, #2
    7212:	add	r1, sp, #8
    7214:	mov	r0, r4
    7216:	bl	7078 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    721a:	movs	r2, #4
    721c:	add	r1, sp, #8
    721e:	mov	r0, r4
    7220:	bl	7078 <MTPD::read(char*, unsigned long)>
    7224:	movs	r2, #4
    7226:	add	r1, sp, #8
    7228:	mov	r0, r4
    722a:	bl	7078 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    722e:	add	r1, sp, #8
    7230:	mov	r0, r4
      read(0,0); // resync read
      int len=ReadMTPHeader();
      char filename[256];

      read32(); len -=4; // storage
      bool dir = (read16() == 0x3001); len -=2; // format
    7232:	mov.w	r9, r9, lsr #5
      read32(); len -=4; // parent
      read16(); len -=2; // association type
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    7236:	bl	70e8 <MTPD::readstring(char*)>
    723a:	add	r0, sp, #8
    723c:	bl	bb40 <strlen>
    7240:	adds	r0, #1
    7242:	sub.w	r8, r5, r0, lsl #1
    7246:	add.w	r5, r8, #4294967295
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    724a:	cmp	r5, #3
    724c:	ble.n	7270 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x118>
    724e:	mov	r6, r5
    7250:	add	r7, sp, #4
    7252:	subs	r6, #4
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    7254:	movs	r2, #4
    7256:	mov	r1, r7
    7258:	mov	r0, r4
    725a:	bl	7078 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // association description
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
    725e:	cmp	r6, #3
    7260:	bgt.n	7252 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xfa>
    7262:	sub.w	r8, r8, #5
    7266:	subs	r5, #4
    7268:	bic.w	r8, r8, #3
    726c:	rsb	r5, r8, r5
      while(len) {read8(); len--;}
    7270:	cbz	r5, 7282 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x12a>
    7272:	add	r7, sp, #4
      return header.len - 12;
    else
      return 0;
  }

  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    7274:	movs	r2, #1
    7276:	mov	r1, r7
    7278:	mov	r0, r4
    727a:	bl	7078 <MTPD::read(char*, unsigned long)>
      read32(); len -=4; // sequence number

      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
      // ignore rest of ObjectInfo
      while(len>=4) { read32(); len-=4;}
      while(len) {read8(); len--;}
    727e:	subs	r5, #1
    7280:	bne.n	7274 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x11c>

      return storage_->Create(parent, dir, filename);
    7282:	ldr	r0, [r4, #0]
    7284:	add	r3, sp, #8
    7286:	mov	r2, r9
    7288:	mov	r1, sl
    728a:	ldr	r4, [r0, #0]
    728c:	ldr	r4, [r4, #36]	; 0x24
    728e:	blx	r4
    }
    7290:	add	sp, #264	; 0x108
    7292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7296:	ldr	r5, [sp, #8]
    7298:	subs	r5, #64	; 0x40
    729a:	b.n	7188 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x30>
    729c:	.word	0x20003d20

000072a0 <MTPD::SendObject()>:

    void MTPD::SendObject() 
    { 
    72a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(data_buffer);
    72a4:	add.w	sl, r0, #32

      return storage_->Create(parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
    72a8:	sub	sp, #20
    72aa:	mov	r9, r0
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    72ac:	movs	r4, #0
      return storage_->Create(parent, dir, filename);
    }

    void MTPD::SendObject() 
    { 
      pull_packet(data_buffer);
    72ae:	mov	r1, sl
    72b0:	bl	6f28 <MTPD::pull_packet(unsigned char*)>
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    72b4:	ldr	r3, [pc, #224]	; (7398 <MTPD::SendObject()+0xf8>)


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    72b6:	mov	r0, r9
    72b8:	movs	r2, #12
    72ba:	add	r1, sp, #4
    void MTPD::read(char* data, uint32_t size) 
    {
      static int index=0;
      if(!size) 
      {
        index=0;
    72bc:	str	r4, [r3, #0]


  uint32_t MTPD::ReadMTPHeader() 
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    72be:	bl	7078 <MTPD::read(char*, unsigned long)>
    // check that the type is data
    if(header.type==2)
    72c2:	ldrh.w	r3, [sp, #8]
    72c6:	cmp	r3, #2
    72c8:	beq.n	72e2 <MTPD::SendObject()+0x42>
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    72ca:	movw	r3, #9248	; 0x2420
    72ce:	str.w	r4, [r9, r3]
      //printf("len %d\n",disk_pos);
      if(disk_pos)
      {
        storage_->write((const char *)disk_buffer, disk_pos);
      }
      storage_->close();
    72d2:	ldr.w	r0, [r9]
    72d6:	ldr	r3, [r0, #0]
    72d8:	ldr	r3, [r3, #48]	; 0x30
    72da:	blx	r3
    }
    72dc:	add	sp, #20
    72de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    72e2:	ldr	r7, [sp, #4]
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    72e4:	movw	r3, #9248	; 0x2420
  {
    MTPHeader header;
    read((char *)&header, sizeof(MTPHeader));
    // check that the type is data
    if(header.type==2)
      return header.len - 12;
    72e8:	subs	r7, #12
//      printContainer(); 

      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
    72ea:	str.w	r4, [r9, r3]
      
      while((int)len>0)
    72ee:	cmp	r7, r4
    72f0:	ble.n	72d2 <MTPD::SendObject()+0x32>
    72f2:	mov	r8, r3
    72f4:	mov	r0, r4
    72f6:	add.w	fp, r9, #1056	; 0x420
    72fa:	movs	r5, #12
    72fc:	add	r8, r9
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    72fe:	rsb	r4, r5, #512	; 0x200
    7302:	rsb	r6, r0, #8192	; 0x2000
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, data_buffer + index,to_copy);
    7306:	add.w	r1, sl, r5
    730a:	add	r0, fp
    730c:	cmp	r4, r7
    730e:	it	cs
    7310:	movcs	r4, r7
    7312:	cmp	r6, r4
    7314:	it	cs
    7316:	movcs	r6, r4
    7318:	mov	r2, r6
        disk_pos += to_copy;
        bytes -= to_copy;
        len -= to_copy;
    731a:	subs	r7, r7, r6
      
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, data_buffer + index,to_copy);
    731c:	bl	8310 <memcpy>
        disk_pos += to_copy;
    7320:	ldr.w	r2, [r8]
    7324:	add	r2, r6
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    7326:	cmp.w	r2, #8192	; 0x2000
      while((int)len>0)
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, data_buffer + index,to_copy);
        disk_pos += to_copy;
    732a:	str.w	r2, [r8]
        bytes -= to_copy;
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
    732e:	beq.n	734c <MTPD::SendObject()+0xac>
            disk_pos += bytes;
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    7330:	cbnz	r7, 7380 <MTPD::SendObject()+0xe0>
    7332:	movw	r3, #9248	; 0x2420
    7336:	ldr.w	r2, [r9, r3]
        { pull_packet(data_buffer);
          index=0;
        }
      }
      //printf("len %d\n",disk_pos);
      if(disk_pos)
    733a:	cmp	r2, #0
    733c:	beq.n	72d2 <MTPD::SendObject()+0x32>
      {
        storage_->write((const char *)disk_buffer, disk_pos);
    733e:	ldr.w	r0, [r9]
    7342:	mov	r1, fp
    7344:	ldr	r3, [r0, #0]
    7346:	ldr	r3, [r3, #44]	; 0x2c
    7348:	blx	r3
    734a:	b.n	72d2 <MTPD::SendObject()+0x32>
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    734c:	ldr.w	r0, [r9]
    7350:	mov	r1, fp
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
        bytes = min(bytes,len);                                   // loimit at end
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
        memcpy(disk_buffer+disk_pos, data_buffer + index,to_copy);
        disk_pos += to_copy;
        bytes -= to_copy;
    7352:	subs	r4, r4, r6
        len -= to_copy;
        //printf("a %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        //
        if(disk_pos==DISK_BUFFER_SIZE)
        {
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
    7354:	ldr	r3, [r0, #0]
    7356:	ldr	r3, [r3, #44]	; 0x2c
    7358:	blx	r3
          disk_pos =0;
    735a:	movs	r3, #0
    735c:	str.w	r3, [r8]

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    7360:	cmp	r4, #0
    7362:	beq.n	7330 <MTPD::SendObject()+0x90>
          {
            memcpy(disk_buffer,data_buffer+index+to_copy,bytes);
    7364:	adds	r1, r6, r5
    7366:	mov	r2, r4
    7368:	mov	r0, fp
            disk_pos += bytes;
            len -= bytes;
    736a:	subs	r7, r7, r4
          storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE);
          disk_pos =0;

          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
          {
            memcpy(disk_buffer,data_buffer+index+to_copy,bytes);
    736c:	add	r1, sl
    736e:	bl	8310 <memcpy>
            disk_pos += bytes;
    7372:	ldr.w	r3, [r8]
    7376:	add	r4, r3
    7378:	str.w	r4, [r8]
            len -= bytes;
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
    737c:	cmp	r7, #0
    737e:	beq.n	7332 <MTPD::SendObject()+0x92>
        { pull_packet(data_buffer);
    7380:	mov	r1, sl
    7382:	mov	r0, r9
    7384:	bl	6f28 <MTPD::pull_packet(unsigned char*)>
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    7388:	cmp	r7, #0
          }
          //printf("b %d %d %d %d %d\n", len,disk_pos,bytes,index,to_copy);
        }
        if(len>0)  // we have still data to be transfered
        { pull_packet(data_buffer);
          index=0;
    738a:	mov.w	r5, #0
      read(0,0);
      uint32_t len = ReadMTPHeader();
      uint32_t index = sizeof(MTPHeader);
      disk_pos=0;
      
      while((int)len>0)
    738e:	ble.n	7332 <MTPD::SendObject()+0x92>
    7390:	ldr.w	r0, [r8]
    7394:	b.n	72fe <MTPD::SendObject()+0x5e>
    7396:	nop
    7398:	.word	0x20003d20

0000739c <MTPD::loop()>:
      else
        return 0x2005;
    }
    extern "C" uint32_t usb_mtp_getStatus();
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
    739c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73a0:	sub	sp, #52	; 0x34
    73a2:	mov	r4, r0
    73a4:	bl	82ec <usb_mtp_available>
    73a8:	cbnz	r0, 73b0 <MTPD::loop()+0x14>
            //printContainer();
            memcpy(tx_data_buffer,data_buffer,sizeof(struct MTPContainer));
            push_packet(tx_data_buffer,len);
        }
      }
    }
    73aa:	add	sp, #52	; 0x34
    73ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0x2005;
    }
    extern "C" uint32_t usb_mtp_getStatus();
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
      if(fetch_packet(data_buffer))
    73b0:	add.w	r5, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    73b4:	movs	r1, #60	; 0x3c
    73b6:	mov	r0, r5
    73b8:	bl	8240 <usb_mtp_recv>
        return 0x2005;
    }
    extern "C" uint32_t usb_mtp_getStatus();
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
      if(fetch_packet(data_buffer))
    73bc:	cmp	r0, #0
    73be:	beq.n	73aa <MTPD::loop()+0xe>
      { printContainer();
    73c0:	ldr	r6, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    73c2:	movw	r9, #8193	; 0x2001
    }
    extern "C" uint32_t usb_mtp_getStatus();
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
      if(fetch_packet(data_buffer))
      { printContainer();
    73c6:	ldr	r7, [r4, #44]	; 0x2c
    73c8:	ldr	r0, [r4, #40]	; 0x28
    73ca:	ldrh.w	lr, [r4, #36]	; 0x24
    73ce:	ldr	r1, [r4, #52]	; 0x34
    73d0:	ldr	r3, [r4, #32]
    73d2:	ldrh	r2, [r4, #38]	; 0x26
    73d4:	str	r1, [sp, #16]
    73d6:	str	r6, [sp, #12]
    73d8:	str	r7, [sp, #8]
    73da:	str	r0, [sp, #4]
    73dc:	str.w	lr, [sp]
    73e0:	ldr	r1, [pc, #748]	; (76d0 <MTPD::loop()+0x334>)
    73e2:	ldr	r0, [pc, #752]	; (76d4 <MTPD::loop()+0x338>)
    73e4:	bl	a08c <Print::printf(char const*, ...)>
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    73e8:	ldrh	r6, [r4, #36]	; 0x24
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    73ea:	movw	r1, #8197	; 0x2005
    void MTPD::loop(void)
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
      if(fetch_packet(data_buffer))
      { printContainer();

        int op = CONTAINER->op;
    73ee:	ldrh	r2, [r4, #38]	; 0x26

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    73f0:	movw	lr, #4108	; 0x100c
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    73f4:	ldr	r7, [r4, #32]
        int typ= CONTAINER->type;

        int return_code =0x2001; //OK use as default value
    73f6:	cmp	r6, #2
    73f8:	ite	eq
    73fa:	moveq	r6, r1
    73fc:	movne	r6, r9

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    73fe:	ldr	r0, [r4, #40]	; 0x28

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7400:	cmp	r2, lr
        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    7402:	mov	sl, r7
    { if(!usb_mtp_available()) return; //if(!usb_mtp_haveRX()) return;
      if(fetch_packet(data_buffer))
      { printContainer();

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    7404:	ldr.w	r8, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
    7408:	ldr.w	fp, [r4, #48]	; 0x30
        int p3 = CONTAINER->params[2];
    740c:	ldr	r3, [r4, #52]	; 0x34
        int id = CONTAINER->transaction_id;
    740e:	str	r0, [sp, #24]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7410:	beq.w	7764 <MTPD::loop()+0x3c8>
    7414:	bhi.n	7458 <MTPD::loop()+0xbc>
    7416:	movw	r1, #4101	; 0x1005
    741a:	cmp	r2, r1
    741c:	beq.w	77b4 <MTPD::loop()+0x418>
    7420:	bls.w	753c <MTPD::loop()+0x1a0>
    7424:	movw	r1, #4104	; 0x1008
    7428:	cmp	r2, r1
    742a:	beq.w	7944 <MTPD::loop()+0x5a8>
    742e:	bhi.w	763a <MTPD::loop()+0x29e>
    7432:	movw	r1, #4102	; 0x1006
    7436:	cmp	r2, r1
    7438:	beq.w	76a0 <MTPD::loop()+0x304>
    743c:	movw	r1, #4103	; 0x1007
    7440:	cmp	r2, r1
    7442:	bne.w	768e <MTPD::loop()+0x2f2>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    7446:	cmp.w	fp, #0
    744a:	beq.w	7a60 <MTPD::loop()+0x6c4>
    744e:	add.w	fp, r4, #544	; 0x220
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    7452:	movw	r6, #8212	; 0x2014
    7456:	b.n	74f0 <MTPD::loop()+0x154>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    7458:	movw	r0, #4121	; 0x1019
    745c:	cmp	r2, r0
    745e:	beq.w	779c <MTPD::loop()+0x400>
    7462:	bls.w	75c8 <MTPD::loop()+0x22c>
    7466:	movw	r3, #38914	; 0x9802
    746a:	cmp	r2, r3
    746c:	beq.w	787c <MTPD::loop()+0x4e0>
    7470:	bhi.w	766a <MTPD::loop()+0x2ce>
    7474:	movw	r3, #4122	; 0x101a
    7478:	cmp	r2, r3
    747a:	beq.w	7698 <MTPD::loop()+0x2fc>
    747e:	movw	r3, #38913	; 0x9801
    7482:	cmp	r2, r3
    7484:	bne.w	768e <MTPD::loop()+0x2f2>
          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    7488:	mov.w	fp, #0
    748c:	movw	r3, #9252	; 0x2424
    7490:	movw	r9, #9256	; 0x2428
    7494:	movs	r2, #1
    7496:	mov	r1, r8
    7498:	mov	r0, r4
    749a:	str.w	fp, [r4, r9]
    749e:	strb	r2, [r4, r3]
    74a0:	str	r3, [sp, #28]
    74a2:	bl	655c <MTPD::getObjectPropsSupported(unsigned long)>
    74a6:	ldr.w	r2, [r4, r9]
    74aa:	mov.w	lr, #2
    74ae:	ldr	r3, [sp, #28]
    74b0:	add	r1, sp, #36	; 0x24
    74b2:	add.w	r0, r2, #12
    74b6:	ldrh.w	ip, [r4, #38]	; 0x26
    74ba:	strb.w	fp, [r4, r3]
    74be:	movs	r2, #12
    74c0:	ldr	r3, [r4, #40]	; 0x28
    74c2:	str	r0, [sp, #36]	; 0x24
    74c4:	mov	r0, r4
    74c6:	str.w	fp, [r4, r9]
    74ca:	add.w	fp, r4, #544	; 0x220
    74ce:	strh.w	lr, [sp, #40]	; 0x28
    74d2:	strh.w	ip, [sp, #42]	; 0x2a
    74d6:	str	r3, [sp, #44]	; 0x2c
    74d8:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    74dc:	mov	r1, r8
    74de:	mov	r0, r4
    74e0:	bl	655c <MTPD::getObjectPropsSupported(unsigned long)>
    74e4:	ldr	r1, [sp, #36]	; 0x24
    74e6:	ubfx	r1, r1, #0, #9
    74ea:	cmp	r1, #0
    74ec:	bne.n	75be <MTPD::loop()+0x222>
    74ee:	uxth	r6, r6
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    74f0:	ldr	r2, [sp, #24]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    74f2:	movs	r3, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    74f4:	str.w	r8, [r4, #44]	; 0x2c
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    74f8:	mov	r1, sl
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    74fa:	str	r2, [r4, #40]	; 0x28
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    74fc:	mov	r0, fp
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    74fe:	str	r7, [r4, #32]
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    7500:	movs	r2, #60	; 0x3c
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    7502:	strh	r6, [r4, #38]	; 0x26
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    7504:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            //printContainer();
            memcpy(tx_data_buffer,data_buffer,sizeof(struct MTPContainer));
    7506:	ldr	r7, [r5, #0]
    7508:	ldr	r6, [r5, #4]
    750a:	ldr	r4, [r5, #8]
    750c:	ldr	r3, [r5, #12]
    750e:	str.w	r7, [fp]
    7512:	str.w	r6, [fp, #4]
    7516:	str.w	r4, [fp, #8]
    751a:	str.w	r3, [fp, #12]
    751e:	ldr	r7, [r5, #16]
    7520:	ldr	r6, [r5, #20]
    7522:	ldr	r4, [r5, #24]
    7524:	ldr	r3, [r5, #28]
    7526:	str.w	r7, [fp, #16]
    752a:	str.w	r6, [fp, #20]
    752e:	str.w	r4, [fp, #24]
    7532:	str.w	r3, [fp, #28]
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    7536:	bl	8288 <usb_mtp_send>
    753a:	b.n	73aa <MTPD::loop()+0xe>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    753c:	movw	r3, #4098	; 0x1002
    7540:	cmp	r2, r3
    7542:	beq.w	778c <MTPD::loop()+0x3f0>
    7546:	bls.w	76d8 <MTPD::loop()+0x33c>
    754a:	movw	r3, #4099	; 0x1003
    754e:	cmp	r2, r3
    7550:	beq.w	76c8 <MTPD::loop()+0x32c>
    7554:	movw	r3, #4100	; 0x1004
    7558:	cmp	r2, r3
    755a:	bne.w	768e <MTPD::loop()+0x2f2>
          case 0x1003:  // CloseSession
            //
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    755e:	mov.w	fp, #0
    7562:	movw	r2, #9252	; 0x2424
    7566:	movw	r9, #9256	; 0x2428
    756a:	movs	r3, #1
    756c:	mov	r0, r4
    756e:	str	r2, [sp, #28]
    7570:	str.w	fp, [r4, r9]
    7574:	strb	r3, [r4, r2]
    7576:	bl	607c <MTPD::WriteStorageIDs()>
    757a:	ldr.w	r3, [r4, r9]
    757e:	ldr	r2, [sp, #28]
    7580:	mov.w	lr, #2
    7584:	adds	r3, #12
    7586:	add	r1, sp, #36	; 0x24
    7588:	strb.w	fp, [r4, r2]
    758c:	mov	r0, r4
    758e:	ldrh.w	ip, [r4, #38]	; 0x26
    7592:	movs	r2, #12
    7594:	str.w	fp, [r4, r9]
    7598:	add.w	fp, r4, #544	; 0x220
    759c:	str	r3, [sp, #36]	; 0x24
    759e:	ldr	r3, [r4, #40]	; 0x28
    75a0:	strh.w	lr, [sp, #40]	; 0x28
    75a4:	strh.w	ip, [sp, #42]	; 0x2a
    75a8:	str	r3, [sp, #44]	; 0x2c
    75aa:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    75ae:	mov	r0, r4
    75b0:	bl	607c <MTPD::WriteStorageIDs()>
    75b4:	ldr	r1, [sp, #36]	; 0x24
    75b6:	ubfx	r1, r1, #0, #9
    75ba:	cmp	r1, #0
    75bc:	beq.n	74ee <MTPD::loop()+0x152>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    75be:	movs	r2, #60	; 0x3c
    75c0:	mov	r0, fp
    75c2:	bl	8288 <usb_mtp_send>
    75c6:	b.n	74ee <MTPD::loop()+0x152>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    75c8:	movw	r3, #4112	; 0x1010
    75cc:	cmp	r2, r3
    75ce:	beq.n	7698 <MTPD::loop()+0x2fc>
    75d0:	bls.w	774a <MTPD::loop()+0x3ae>
    75d4:	movw	r3, #4116	; 0x1014
    75d8:	cmp	r2, r3
    75da:	beq.w	79ae <MTPD::loop()+0x612>
    75de:	movw	r3, #4117	; 0x1015
    75e2:	cmp	r2, r3
    75e4:	bne.n	768e <MTPD::loop()+0x2f2>
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    75e6:	movw	r1, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    75ea:	movw	r3, #9256	; 0x2428
    75ee:	mov.w	r9, #0
    75f2:	movw	fp, #9252	; 0x2424
    75f6:	movs	r0, #1
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    75f8:	cmp	r8, r1
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    75fa:	str.w	r9, [r4, r3]
    75fe:	strb.w	r0, [r4, fp]
      data_buffer_ = NULL;
    }
  }
*/
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    7602:	beq.w	7a12 <MTPD::loop()+0x676>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7606:	movs	r3, #12
    7608:	ldr	r0, [sp, #24]
    760a:	mov.w	lr, #2
    760e:	strb.w	r9, [r4, fp]
    7612:	add	r1, sp, #36	; 0x24
    7614:	strh.w	r2, [sp, #42]	; 0x2a
    7618:	str	r0, [sp, #44]	; 0x2c
    761a:	mov	r2, r3
    761c:	mov	r0, r4
    761e:	str	r3, [sp, #36]	; 0x24
    7620:	strh.w	lr, [sp, #40]	; 0x28
    7624:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    7628:	ldr	r1, [sp, #36]	; 0x24
    762a:	add.w	fp, r4, #544	; 0x220
    762e:	ubfx	r1, r1, #0, #9
    7632:	cmp	r1, #0
    7634:	beq.w	74ee <MTPD::loop()+0x152>
    7638:	b.n	75be <MTPD::loop()+0x222>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    763a:	movw	r3, #4105	; 0x1009
    763e:	cmp	r2, r3
    7640:	beq.w	78da <MTPD::loop()+0x53e>
    7644:	movw	r3, #4107	; 0x100b
    7648:	cmp	r2, r3
    764a:	bne.n	768e <MTPD::loop()+0x2f2>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (CONTAINER->params[1]) {
    764c:	cmp.w	fp, #0
    7650:	bne.w	744e <MTPD::loop()+0xb2>
                return_code = 0x2014; // spec by format unsupported
              } else {
                if (!storage_->DeleteObject(CONTAINER->params[0])) {
    7654:	ldr	r0, [r4, #0]
    7656:	mov	r1, r8
    7658:	ldr	r3, [r0, #0]
    765a:	ldr	r3, [r3, #52]	; 0x34
    765c:	blx	r3
    765e:	cbnz	r0, 76c8 <MTPD::loop()+0x32c>
    7660:	add.w	fp, r4, #544	; 0x220
    7664:	movw	r6, #8210	; 0x2012
    7668:	b.n	74f0 <MTPD::loop()+0x154>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    766a:	movw	r3, #38915	; 0x9803
    766e:	cmp	r2, r3
    7670:	beq.w	781e <MTPD::loop()+0x482>
    7674:	movw	r3, #38916	; 0x9804
    7678:	cmp	r2, r3
    767a:	bne.n	768e <MTPD::loop()+0x2f2>
      }
      storage_->close();
    }

    uint32_t MTPD::setObjectPropValue(uint32_t p1, uint32_t p2)
    { pull_packet(data_buffer);
    767c:	mov	r1, r5
    767e:	mov	r0, r4
    7680:	bl	6f28 <MTPD::pull_packet(unsigned char*)>
//      printContainer(); 
      
      if(p2==0xDC07)
    7684:	movw	r3, #56327	; 0xdc07
    7688:	cmp	fp, r3
    768a:	beq.w	7ace <MTPD::loop()+0x732>
    768e:	add.w	fp, r4, #544	; 0x220
    7692:	movw	r6, #8197	; 0x2005
    7696:	b.n	74f0 <MTPD::loop()+0x154>
              CONTAINER->len  = len = 12;
              break;

          case 0x101A:  // CopyObject
              return_code = 0x2005;
              break;
    7698:	mov	r6, r1
    769a:	add.w	fp, r4, #544	; 0x220
    769e:	b.n	74f0 <MTPD::loop()+0x154>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (CONTAINER->params[1]) 
    76a0:	cmp.w	fp, #0
    76a4:	bne.w	744e <MTPD::loop()+0xb2>
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    76a8:	ldr	r0, [r4, #0]
    76aa:	mov	r1, r3
    int num = 0;
    76ac:	mov.w	r8, #0
    writestring("");  // volume identifier
  }

  uint32_t MTPD::GetNumObjects(uint32_t storage, uint32_t parent) 
  {
    storage_->StartGetObjectHandles(parent);
    76b0:	ldr	r3, [r0, #0]
    76b2:	ldr	r3, [r3, #20]
    76b4:	blx	r3
    76b6:	b.n	76bc <MTPD::loop()+0x320>
    int num = 0;
    while (storage_->GetNextObjectHandle()) num++;
    76b8:	add.w	r8, r8, #1
    76bc:	ldr	r0, [r4, #0]
    76be:	ldr	r3, [r0, #0]
    76c0:	ldr	r3, [r3, #24]
    76c2:	blx	r3
    76c4:	cmp	r0, #0
    76c6:	bne.n	76b8 <MTPD::loop()+0x31c>
    76c8:	uxth	r6, r6
    76ca:	add.w	fp, r4, #544	; 0x220
    76ce:	b.n	74f0 <MTPD::loop()+0x154>
    76d0:	.word	0x2000023c
    76d4:	.word	0x200008e8

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    76d8:	movw	r3, #4097	; 0x1001
    76dc:	cmp	r2, r3
    76de:	bne.n	768e <MTPD::loop()+0x2f2>
        {
          case 0x1001:
            p1=0;
            TRANSMIT(WriteDescriptor());
    76e0:	movw	r8, #9256	; 0x2428
    76e4:	mov.w	r9, #0
    76e8:	movw	fp, #9252	; 0x2424
    76ec:	movs	r3, #1
    76ee:	str.w	r9, [r4, r8]
    76f2:	mov	r0, r4
    76f4:	strb.w	r3, [r4, fp]
    76f8:	bl	5e20 <MTPD::WriteDescriptor()>
    76fc:	ldr.w	r3, [r4, r8]
    7700:	mov.w	lr, #2
    7704:	strb.w	r9, [r4, fp]
    7708:	add.w	r0, r3, #12
    770c:	ldrh.w	ip, [r4, #38]	; 0x26
    7710:	str.w	r9, [r4, r8]
    7714:	add	r1, sp, #36	; 0x24
    7716:	ldr	r3, [r4, #40]	; 0x28
    7718:	movs	r2, #12
    771a:	str	r0, [sp, #36]	; 0x24
    771c:	mov	r0, r4
    771e:	strh.w	lr, [sp, #40]	; 0x28
    7722:	add.w	fp, r4, #544	; 0x220
    7726:	strh.w	ip, [sp, #42]	; 0x2a
    772a:	str	r3, [sp, #44]	; 0x2c
    772c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7730:	mov	r0, r4
    7732:	bl	5e20 <MTPD::WriteDescriptor()>
    7736:	ldr	r1, [sp, #36]	; 0x24
    7738:	ubfx	r1, r1, #0, #9
    773c:	cmp	r1, #0
    773e:	bne.w	7a56 <MTPD::loop()+0x6ba>
    7742:	uxth	r6, r6
            break;
    7744:	mov.w	r8, #0
    7748:	b.n	74f0 <MTPD::loop()+0x154>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    774a:	movw	r3, #4109	; 0x100d
    774e:	cmp	r2, r3
    7750:	bne.n	768e <MTPD::loop()+0x2f2>
              break;

          case 0x100D:  // SendObject
              SendObject();
              CONTAINER->len  = len = 12;
              break;
    7752:	movs	r7, #12
              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;

          case 0x100D:  // SendObject
              SendObject();
    7754:	mov	r0, r4
    7756:	bl	72a0 <MTPD::SendObject()>
    775a:	add.w	fp, r4, #544	; 0x220
    775e:	uxth	r6, r6
              CONTAINER->len  = len = 12;
    7760:	mov	sl, r7
              break;
    7762:	b.n	74f0 <MTPD::loop()+0x154>
    7764:	cmp.w	r8, #0
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    7768:	mov.w	r7, #24
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    776c:	mov	r2, fp
    776e:	mov	r0, r4
    7770:	it	eq
    7772:	moveq.w	r8, #1
                                                    p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
    7776:	mov	sl, r7
    7778:	uxth	r6, r6
              break;


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
    777a:	mov	r1, r8
    777c:	bl	7158 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
                                                    p2); // parent

              CONTAINER->params[1]=p2;
    7780:	str.w	fp, [r4, #48]	; 0x30


          case 0x100C:  // SendObjectInfo
              if (!p1) p1 = 1;
              CONTAINER->params[2] = SendObjectInfo(p1, // storage
                                                    p2); // parent
    7784:	str	r0, [r4, #52]	; 0x34
    7786:	add.w	fp, r4, #544	; 0x220

              CONTAINER->params[1]=p2;
              CONTAINER->len  = len = 12 + 3 * 4;
              break;
    778a:	b.n	74f0 <MTPD::loop()+0x154>
      return 0x2001;
    }
    
    void MTPD::openSession(void)
    {
      storage_->ResetIndex();
    778c:	ldr	r0, [r4, #0]
    778e:	add.w	fp, r4, #544	; 0x220
    7792:	uxth	r6, r6
    7794:	ldr	r3, [r0, #0]
    7796:	ldr	r3, [r3, #60]	; 0x3c
    7798:	blx	r3
    779a:	b.n	74f0 <MTPD::loop()+0x154>
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    779c:	ldr	r0, [r4, #0]
    779e:	mov	r2, r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    77a0:	movs	r7, #12
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    77a2:	mov	r1, r8
    77a4:	ldr	r3, [r0, #0]
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    77a6:	mov	r6, r9
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
    77a8:	mov	sl, r7
    77aa:	add.w	fp, r4, #544	; 0x220
    }

    uint32_t MTPD::moveObject(uint32_t p1, uint32_t p3)
    { // p1 object
      // p3 new directory
      storage_->move(p1,p3);
    77ae:	ldr	r3, [r3, #68]	; 0x44
    77b0:	blx	r3
              break;

          case 0x1019:  // MoveObject
              return_code = moveObject(p1,p3);
              CONTAINER->len  = len = 12;
              break;
    77b2:	b.n	74f0 <MTPD::loop()+0x154>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    77b4:	mov.w	fp, #0
    77b8:	movw	r3, #9252	; 0x2424
    77bc:	movw	r9, #9256	; 0x2428
    77c0:	movs	r2, #1
    77c2:	mov	r1, r8
    77c4:	mov	r0, r4
    77c6:	str.w	fp, [r4, r9]
    77ca:	strb	r2, [r4, r3]
    77cc:	str	r3, [sp, #28]
    77ce:	bl	60c8 <MTPD::GetStorageInfo(unsigned long)>
    77d2:	ldr.w	r2, [r4, r9]
    77d6:	mov.w	lr, #2
    77da:	ldr	r3, [sp, #28]
    77dc:	add	r1, sp, #36	; 0x24
    77de:	add.w	r0, r2, #12
    77e2:	ldrh.w	ip, [r4, #38]	; 0x26
    77e6:	strb.w	fp, [r4, r3]
    77ea:	movs	r2, #12
    77ec:	ldr	r3, [r4, #40]	; 0x28
    77ee:	str	r0, [sp, #36]	; 0x24
    77f0:	mov	r0, r4
    77f2:	str.w	fp, [r4, r9]
    77f6:	add.w	fp, r4, #544	; 0x220
    77fa:	strh.w	lr, [sp, #40]	; 0x28
    77fe:	strh.w	ip, [sp, #42]	; 0x2a
    7802:	str	r3, [sp, #44]	; 0x2c
    7804:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7808:	mov	r1, r8
    780a:	mov	r0, r4
    780c:	bl	60c8 <MTPD::GetStorageInfo(unsigned long)>
    7810:	ldr	r1, [sp, #36]	; 0x24
    7812:	ubfx	r1, r1, #0, #9
    7816:	cmp	r1, #0
    7818:	beq.w	74ee <MTPD::loop()+0x152>
    781c:	b.n	75be <MTPD::loop()+0x222>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    781e:	movw	r9, #9256	; 0x2428
    7822:	movs	r3, #0
    7824:	movs	r1, #1
    7826:	mov	r2, fp
    7828:	str.w	r3, [r4, r9]
    782c:	mov	r0, r4
    782e:	str	r3, [sp, #28]
    7830:	movw	r3, #9252	; 0x2424
    7834:	strb	r1, [r4, r3]
    7836:	mov	r1, r8
    7838:	bl	6d60 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    783c:	ldr.w	r2, [r4, r9]
    7840:	ldr	r3, [sp, #28]
    7842:	mov.w	ip, #2
    7846:	add.w	lr, r2, #12
    784a:	movw	r2, #9252	; 0x2424
    784e:	add	r1, sp, #36	; 0x24
    7850:	mov	r0, r4
    7852:	strb	r3, [r4, r2]
    7854:	movs	r2, #12
    7856:	str.w	r3, [r4, r9]
    785a:	ldrh	r3, [r4, #38]	; 0x26
    785c:	str.w	lr, [sp, #36]	; 0x24
    7860:	strh.w	r3, [sp, #42]	; 0x2a
    7864:	ldr	r3, [r4, #40]	; 0x28
    7866:	strh.w	ip, [sp, #40]	; 0x28
    786a:	str	r3, [sp, #44]	; 0x2c
    786c:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7870:	mov	r2, fp
    7872:	mov	r1, r8
    7874:	mov	r0, r4
    7876:	bl	6d60 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    787a:	b.n	7628 <MTPD::loop()+0x28c>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    787c:	movw	r9, #9256	; 0x2428
    7880:	movs	r3, #0
    7882:	movs	r1, #1
    7884:	mov	r2, fp
    7886:	str.w	r3, [r4, r9]
    788a:	mov	r0, r4
    788c:	str	r3, [sp, #28]
    788e:	movw	r3, #9252	; 0x2424
    7892:	strb	r1, [r4, r3]
    7894:	mov	r1, r8
    7896:	bl	65ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    789a:	ldr.w	r2, [r4, r9]
    789e:	ldr	r3, [sp, #28]
    78a0:	mov.w	ip, #2
    78a4:	add.w	lr, r2, #12
    78a8:	movw	r2, #9252	; 0x2424
    78ac:	add	r1, sp, #36	; 0x24
    78ae:	mov	r0, r4
    78b0:	strb	r3, [r4, r2]
    78b2:	movs	r2, #12
    78b4:	str.w	r3, [r4, r9]
    78b8:	ldrh	r3, [r4, #38]	; 0x26
    78ba:	str.w	lr, [sp, #36]	; 0x24
    78be:	strh.w	r3, [sp, #42]	; 0x2a
    78c2:	ldr	r3, [r4, #40]	; 0x28
    78c4:	strh.w	ip, [sp, #40]	; 0x28
    78c8:	str	r3, [sp, #44]	; 0x2c
    78ca:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    78ce:	mov	r2, fp
    78d0:	mov	r1, r8
    78d2:	mov	r0, r4
    78d4:	bl	65ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    78d8:	b.n	7628 <MTPD::loop()+0x28c>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    78da:	mov.w	fp, #0
    78de:	movw	r3, #9252	; 0x2424
    78e2:	movw	r9, #9256	; 0x2428
    78e6:	movs	r2, #1
    78e8:	mov	r1, r8
    78ea:	mov	r0, r4
    78ec:	str.w	fp, [r4, r9]
    78f0:	strb	r2, [r4, r3]
    78f2:	str	r3, [sp, #28]
    78f4:	bl	6f40 <MTPD::GetObject(unsigned long)>
    78f8:	ldr.w	r2, [r4, r9]
    78fc:	mov.w	lr, #2
    7900:	ldr	r3, [sp, #28]
    7902:	add	r1, sp, #36	; 0x24
    7904:	add.w	r0, r2, #12
    7908:	ldrh.w	ip, [r4, #38]	; 0x26
    790c:	strb.w	fp, [r4, r3]
    7910:	movs	r2, #12
    7912:	ldr	r3, [r4, #40]	; 0x28
    7914:	str	r0, [sp, #36]	; 0x24
    7916:	mov	r0, r4
    7918:	str.w	fp, [r4, r9]
    791c:	add.w	fp, r4, #544	; 0x220
    7920:	strh.w	lr, [sp, #40]	; 0x28
    7924:	strh.w	ip, [sp, #42]	; 0x2a
    7928:	str	r3, [sp, #44]	; 0x2c
    792a:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    792e:	mov	r1, r8
    7930:	mov	r0, r4
    7932:	bl	6f40 <MTPD::GetObject(unsigned long)>
    7936:	ldr	r1, [sp, #36]	; 0x24
    7938:	ubfx	r1, r1, #0, #9
    793c:	cmp	r1, #0
    793e:	beq.w	74ee <MTPD::loop()+0x152>
    7942:	b.n	75be <MTPD::loop()+0x222>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    7944:	mov.w	fp, #0
    7948:	movw	r3, #9252	; 0x2424
    794c:	movw	r9, #9256	; 0x2428
    7950:	movs	r2, #1
    7952:	mov	r1, r8
    7954:	mov	r0, r4
    7956:	str.w	fp, [r4, r9]
    795a:	strb	r2, [r4, r3]
    795c:	str	r3, [sp, #28]
    795e:	bl	62c8 <MTPD::GetObjectInfo(unsigned long)>
    7962:	ldr.w	r2, [r4, r9]
    7966:	mov.w	lr, #2
    796a:	ldr	r3, [sp, #28]
    796c:	add	r1, sp, #36	; 0x24
    796e:	add.w	r0, r2, #12
    7972:	ldrh.w	ip, [r4, #38]	; 0x26
    7976:	strb.w	fp, [r4, r3]
    797a:	movs	r2, #12
    797c:	ldr	r3, [r4, #40]	; 0x28
    797e:	str	r0, [sp, #36]	; 0x24
    7980:	mov	r0, r4
    7982:	str.w	fp, [r4, r9]
    7986:	add.w	fp, r4, #544	; 0x220
    798a:	strh.w	lr, [sp, #40]	; 0x28
    798e:	strh.w	ip, [sp, #42]	; 0x2a
    7992:	str	r3, [sp, #44]	; 0x2c
    7994:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7998:	mov	r1, r8
    799a:	mov	r0, r4
    799c:	bl	62c8 <MTPD::GetObjectInfo(unsigned long)>
    79a0:	ldr	r1, [sp, #36]	; 0x24
    79a2:	ubfx	r1, r1, #0, #9
    79a6:	cmp	r1, #0
    79a8:	beq.w	74ee <MTPD::loop()+0x152>
    79ac:	b.n	75be <MTPD::loop()+0x222>
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    79ae:	movw	r1, #54274	; 0xd402
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    79b2:	movw	r3, #9256	; 0x2428
    79b6:	mov.w	r9, #0
    79ba:	movw	fp, #9252	; 0x2424
    79be:	movs	r0, #1
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    79c0:	cmp	r8, r1
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    79c2:	str.w	r9, [r4, r3]
    79c6:	strb.w	r0, [r4, fp]
        break;
    }
  }

  void MTPD::GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    79ca:	bne.w	7606 <MTPD::loop()+0x26a>
    79ce:	mov	r1, r8
    79d0:	mov	r0, r4
    79d2:	str	r3, [sp, #28]
    79d4:	bl	5d58 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
              SendObject();
              CONTAINER->len  = len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    79d8:	ldr	r3, [sp, #28]
    79da:	mov.w	lr, #2
    79de:	ldrh.w	ip, [r4, #38]	; 0x26
    79e2:	add	r1, sp, #36	; 0x24
    79e4:	ldr	r2, [r4, r3]
    79e6:	strb.w	r9, [r4, fp]
    79ea:	add.w	r0, r2, #12
    79ee:	str.w	r9, [r4, r3]
    79f2:	ldr	r3, [r4, #40]	; 0x28
    79f4:	movs	r2, #12
    79f6:	str	r0, [sp, #36]	; 0x24
    79f8:	mov	r0, r4
    79fa:	strh.w	lr, [sp, #40]	; 0x28
    79fe:	strh.w	ip, [sp, #42]	; 0x2a
    7a02:	str	r3, [sp, #44]	; 0x2c
    7a04:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7a08:	mov	r1, r8
    7a0a:	mov	r0, r4
    7a0c:	bl	5d58 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.3]>
    7a10:	b.n	7628 <MTPD::loop()+0x28c>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    7a12:	mov	r0, r4
    7a14:	ldr	r1, [pc, #204]	; (7ae4 <MTPD::loop()+0x748>)
    7a16:	str	r3, [sp, #28]
    7a18:	bl	5c8c <MTPD::writestring(char const*)>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    7a1c:	ldr	r3, [sp, #28]
    7a1e:	mov.w	lr, #2
    7a22:	ldrh.w	ip, [r4, #38]	; 0x26
    7a26:	add	r1, sp, #36	; 0x24
    7a28:	ldr	r2, [r4, r3]
    7a2a:	strb.w	r9, [r4, fp]
    7a2e:	add.w	r0, r2, #12
    7a32:	str.w	r9, [r4, r3]
    7a36:	ldr	r3, [r4, #40]	; 0x28
    7a38:	movs	r2, #12
    7a3a:	str	r0, [sp, #36]	; 0x24
    7a3c:	mov	r0, r4
    7a3e:	strh.w	lr, [sp, #40]	; 0x28
    7a42:	strh.w	ip, [sp, #42]	; 0x2a
    7a46:	str	r3, [sp, #44]	; 0x2c
    7a48:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
  void MTPD::GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring("Teensy");
    7a4c:	ldr	r1, [pc, #148]	; (7ae4 <MTPD::loop()+0x748>)
    7a4e:	mov	r0, r4
    7a50:	bl	5c8c <MTPD::writestring(char const*)>
    7a54:	b.n	7628 <MTPD::loop()+0x28c>
//  extern "C"  uint32_t mtp_tx_event_counter;


    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    {
      return usb_mtp_send(data_buffer,len,60);
    7a56:	movs	r2, #60	; 0x3c
    7a58:	mov	r0, fp
    7a5a:	bl	8288 <usb_mtp_send>
    7a5e:	b.n	7742 <MTPD::loop()+0x3a6>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    7a60:	movw	r9, #9256	; 0x2428
    7a64:	mov	r2, r3
    7a66:	movs	r0, #1
    7a68:	str	r3, [sp, #28]
    7a6a:	movw	r3, #9252	; 0x2424
    7a6e:	str.w	fp, [r4, r9]
    7a72:	mov	r1, r8
    7a74:	strb	r0, [r4, r3]
    7a76:	mov	r0, r4
    7a78:	bl	621c <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7a7c:	movw	r3, #9252	; 0x2424
    7a80:	ldr.w	r2, [r4, r9]
    7a84:	mov.w	ip, #2
    7a88:	strb.w	fp, [r4, r3]
    7a8c:	add	r1, sp, #36	; 0x24
    7a8e:	str.w	fp, [r4, r9]
    7a92:	add.w	lr, r2, #12
    7a96:	ldrh	r3, [r4, #38]	; 0x26
    7a98:	movs	r2, #12
    7a9a:	mov	r0, r4
    7a9c:	str.w	lr, [sp, #36]	; 0x24
    7aa0:	strh.w	r3, [sp, #42]	; 0x2a
    7aa4:	add.w	fp, r4, #544	; 0x220
    7aa8:	ldr	r3, [r4, #40]	; 0x28
    7aaa:	strh.w	ip, [sp, #40]	; 0x28
    7aae:	str	r3, [sp, #44]	; 0x2c
    7ab0:	bl	5c0c <MTPD::write(char const*, int) [clone .part.1]>
    7ab4:	ldr	r3, [sp, #28]
    7ab6:	mov	r1, r8
    7ab8:	mov	r0, r4
    7aba:	mov	r2, r3
    7abc:	bl	621c <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    7ac0:	ldr	r1, [sp, #36]	; 0x24
    7ac2:	ubfx	r1, r1, #0, #9
    7ac6:	cmp	r1, #0
    7ac8:	beq.w	74ee <MTPD::loop()+0x152>
    7acc:	b.n	75be <MTPD::loop()+0x222>
    7ace:	mov	r1, r8
    7ad0:	mov	r0, r4
    7ad2:	bl	712c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.6]>

          default:
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
    7ad6:	cmp	r0, #0
    7ad8:	beq.w	73aa <MTPD::loop()+0xe>
    7adc:	uxth	r6, r0
    7ade:	add.w	fp, r4, #544	; 0x220
    7ae2:	b.n	74f0 <MTPD::loop()+0x154>
    7ae4:	.word	0x200001fc

00007ae8 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    7ae8:	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7aea:	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7aec:	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7aee:	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7af0:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7af2:	beq.n	7afc <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    7af4:	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7af8:	b.w	9e40 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7afc:	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    7afe:	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7b02:	bx	r3

00007b04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    7b04:	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    7b06:	movw	r5, #513	; 0x201
    7b0a:	ldr	r4, [r0, #0]
    7b0c:	str	r5, [r4, #16]

	while (count > 0) {
    7b0e:	cbz	r3, 7b58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    7b10:	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b12:	cbz	r1, 7b52 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    7b14:	ldrb	r5, [r1, #0]
    7b16:	adds	r1, #1
		count--; // how many bytes left to output.
    7b18:	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b1a:	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7b1c:	ldr	r5, [r4, #112]	; 0x70
    7b1e:	lsls	r5, r5, #30
    7b20:	bmi.n	7b30 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b22:	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    7b24:	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b26:	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    7b28:	cbz	r2, 7b30 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    7b2a:	strb	r5, [r2, #0]
    7b2c:	adds	r2, #1
    7b2e:	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    7b30:	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7b32:	lsls	r5, r5, #31
    7b34:	bpl.n	7b1c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    7b36:	cmp	r3, #0
    7b38:	bne.n	7b12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    7b3a:	cbz	r6, 7b58 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7b3c:	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7b3e:	ldr	r3, [r1, #112]	; 0x70
    7b40:	lsls	r3, r3, #30
    7b42:	bmi.n	7b3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    7b44:	ldr	r3, [r1, #116]	; 0x74
    7b46:	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    7b48:	cbz	r2, 7b4e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    7b4a:	strb	r3, [r2, #0]
    7b4c:	adds	r2, #1
			count_read--;
    7b4e:	subs	r6, #1
    7b50:	b.n	7b3a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    7b52:	ldrb.w	r5, [r0, #60]	; 0x3c
    7b56:	b.n	7b18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    7b58:	pop	{r4, r5, r6}
    7b5a:	bx	lr

00007b5c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7b5c:	push	{r4, r5, r6, r7, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    7b5e:	ldr	r4, [pc, #192]	; (7c20 <_spi_dma_rxISR0()+0xc4>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7b60:	ldr	r3, [pc, #192]	; (7c24 <_spi_dma_rxISR0()+0xc8>)
    7b62:	ldr	r0, [r4, #72]	; 0x48
	_dmaTX->clearComplete();
    7b64:	ldr	r5, [r4, #68]	; 0x44
    7b66:	ldrb	r1, [r0, #4]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    7b68:	ldr	r2, [r4, #64]	; 0x40
    7b6a:	strb	r1, [r3, #31]
    7b6c:	ldrb	r1, [r5, #4]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7b6e:	strb	r1, [r3, #28]
    7b70:	ldrb	r1, [r0, #4]
    7b72:	strb	r1, [r3, #28]
    7b74:	cbz	r2, 7bb6 <_spi_dma_rxISR0()+0x5a>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    7b76:	cmp.w	r2, #32768	; 0x8000
    7b7a:	bcs.n	7bae <_spi_dma_rxISR0()+0x52>
    7b7c:	ldr	r3, [r5, #0]
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
    7b7e:	uxth	r2, r2
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7b80:	ldrh	r1, [r3, #30]
    7b82:	lsls	r6, r1, #16
    7b84:	bmi.n	7bfe <_spi_dma_rxISR0()+0xa2>
		tcd->BITER = len & 0x7fff;
    7b86:	strh	r2, [r3, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b88:	ldrh	r1, [r3, #30]
    7b8a:	uxth	r1, r1
    7b8c:	strh	r1, [r3, #22]
    7b8e:	ldr	r3, [r0, #0]
//=========================================================================
#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7b90:	ldrh	r1, [r3, #30]
    7b92:	lsls	r1, r1, #16
    7b94:	bmi.n	7bf0 <_spi_dma_rxISR0()+0x94>
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7b96:	strh	r2, [r3, #30]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7b98:	movs	r1, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    7b9a:	ldrh	r2, [r3, #30]
    7b9c:	uxth	r2, r2
    7b9e:	strh	r2, [r3, #22]
			_dma_count_remaining -= MAX_DMA_COUNT;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);

			_dma_count_remaining = 0;
    7ba0:	str	r1, [r4, #64]	; 0x40
    7ba2:	ldrb	r2, [r0, #4]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    7ba4:	ldr	r3, [pc, #124]	; (7c24 <_spi_dma_rxISR0()+0xc8>)
    7ba6:	strb	r2, [r3, #27]
    7ba8:	ldrb	r2, [r5, #4]
    7baa:	strb	r2, [r3, #27]
    7bac:	pop	{r4, r5, r6, r7, pc}

	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
			_dma_count_remaining -= MAX_DMA_COUNT;
    7bae:	ldr	r3, [pc, #120]	; (7c28 <_spi_dma_rxISR0()+0xcc>)
    7bb0:	add	r3, r2
    7bb2:	str	r3, [r4, #64]	; 0x40
    7bb4:	b.n	7ba2 <_spi_dma_rxISR0()+0x46>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7bb6:	ldr	r0, [r4, #76]	; 0x4c
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7bb8:	movs	r5, #15
    7bba:	ldr	r3, [r4, #0]
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7bbc:	movw	lr, #769	; 0x301
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7bc0:	ldr	r1, [r0, #0]

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...
    7bc2:	mov.w	r7, #16128	; 0x3f00
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    7bc6:	str	r5, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7bc8:	movs	r6, #3
		_dma_event_responder->triggerEvent();
    7bca:	ldr	r5, [r1, #0]
    7bcc:	ldr	r1, [pc, #92]	; (7c2c <_spi_dma_rxISR0()+0xd0>)
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    7bce:	str	r2, [r3, #28]
    7bd0:	cmp	r5, r1

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    7bd2:	str.w	lr, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    7bd6:	str	r7, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7bd8:	strb.w	r6, [r4, #61]	; 0x3d
    7bdc:	bne.n	7c0e <_spi_dma_rxISR0()+0xb2>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7bde:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    7be0:	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    7be2:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    7be4:	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7be6:	beq.n	7c18 <_spi_dma_rxISR0()+0xbc>
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7be8:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    7bec:	b.w	9e40 <EventResponder::triggerEventNotImmediate()>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7bf0:	ldrh	r1, [r3, #30]
    7bf2:	ubfx	r2, r2, #0, #9
    7bf6:	and.w	r1, r1, #65024	; 0xfe00
    7bfa:	orrs	r2, r1
    7bfc:	b.n	7b96 <_spi_dma_rxISR0()+0x3a>
    7bfe:	ldrh	r1, [r3, #30]
    7c00:	ubfx	r6, r2, #0, #9
    7c04:	and.w	r1, r1, #65024	; 0xfe00
    7c08:	orrs	r1, r6
    7c0a:	strh	r1, [r3, #30]
    7c0c:	b.n	7b88 <_spi_dma_rxISR0()+0x2c>

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7c0e:	mov	r3, r5
    7c10:	mov	r1, r2
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7c12:	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    7c16:	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    7c18:	ldr	r3, [r0, #8]
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7c1a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7c1e:	bx	r3
    7c20:	.word	0x2000085c
    7c24:	.word	0x400e8000
    7c28:	.word	0xffff8001
    7c2c:	.word	0x00007ae9

00007c30 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    7c30:	ldr	r3, [r0, #4]
#elif defined(__arm__) && defined(TEENSYDUINO) && (defined(__IMXRT1052__) || defined(__IMXRT1062__))

//#include "debug/printf.h"

void SPIClass::begin()
{
    7c32:	push	{r4, r5, r6, r7, lr}

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c34:	ldmia.w	r3, {r1, r7}

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7c38:	ldr.w	lr, [pc, #484]	; 7e20 <SPIClass::begin()+0x1f0>

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7c3c:	movs	r6, #184	; 0xb8

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c3e:	ldr	r2, [r1, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7c40:	movs	r5, #2


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c42:	ldr	r4, [pc, #444]	; (7e00 <SPIClass::begin()+0x1d0>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c44:	bic.w	r2, r2, r7

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c48:	ldr	r7, [pc, #440]	; (7e04 <SPIClass::begin()+0x1d4>)

	// CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz
	// CBCMR[LPSPI_PODF] - div4 = 132 MHz


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    7c4a:	str	r2, [r1, #0]

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    7c4c:	ldr.w	r2, [lr, #24]
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c50:	ands	r4, r2

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7c52:	ldr	r2, [pc, #436]	; (7e08 <SPIClass::begin()+0x1d8>)


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c54:	orrs	r7, r4
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7c56:	movs	r4, #15


	hardware().clock_gate_register &= ~hardware().clock_gate_mask;

	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    7c58:	str.w	r7, [lr, #24]

	uint32_t fastio = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(2);
	//uint32_t fastio = IOMUXC_PAD_DSE(6) | IOMUXC_PAD_SPEED(1);
	//uint32_t fastio = IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
	//Serial.printf("SPI MISO: %d MOSI: %d, SCK: %d\n", hardware().miso_pin[miso_pin_index], hardware().mosi_pin[mosi_pin_index], hardware().sck_pin[sck_pin_index]);
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    7c5c:	ldrb	r7, [r0, #16]
    7c5e:	add	r7, r3
    7c60:	ldrb	r7, [r7, #16]
    7c62:	add.w	r7, r2, r7, lsl #4
    7c66:	ldr	r7, [r7, #8]
    7c68:	str	r6, [r7, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    7c6a:	ldrb	r7, [r0, #17]
    7c6c:	add	r7, r3
    7c6e:	ldrb	r7, [r7, #24]
    7c70:	add.w	r7, r2, r7, lsl #4
    7c74:	ldr	r7, [r7, #8]
    7c76:	str	r6, [r7, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    7c78:	ldrb	r7, [r0, #18]
    7c7a:	add	r7, r3
    7c7c:	ldrb.w	r7, [r7, #32]
    7c80:	add.w	r7, r2, r7, lsl #4
    7c84:	ldr	r7, [r7, #8]
    7c86:	str	r6, [r7, #0]

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    7c88:	ldr	r7, [r1, #0]
    7c8a:	ldr	r6, [r3, #4]
    7c8c:	orrs	r6, r7
    7c8e:	str	r6, [r1, #0]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    7c90:	ldrb	r1, [r0, #16]
    7c92:	adds	r6, r3, r1
    7c94:	add.w	r1, r3, r1, lsl #2
    7c98:	ldrb	r6, [r6, #16]
    7c9a:	ldr	r7, [r1, #20]
    7c9c:	add.w	r1, r2, r6, lsl #4
    7ca0:	ldr	r1, [r1, #4]
    7ca2:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    7ca4:	ldrb	r1, [r0, #17]
    7ca6:	adds	r6, r3, r1
    7ca8:	add.w	r1, r3, r1, lsl #2
    7cac:	ldrb	r6, [r6, #24]
    7cae:	ldr	r7, [r1, #28]
    7cb0:	add.w	r1, r2, r6, lsl #4
    7cb4:	ldr	r1, [r1, #4]
    7cb6:	str	r7, [r1, #0]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7cb8:	ldrb	r1, [r0, #18]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    7cba:	ldr	r7, [r3, #48]	; 0x30

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7cbc:	adds	r6, r3, r1
    7cbe:	add.w	r1, r3, r1, lsl #2
    7cc2:	ldrb.w	r6, [r6, #32]
    7cc6:	ldr	r1, [r1, #36]	; 0x24
    7cc8:	add.w	r2, r2, r6, lsl #4

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    7ccc:	ldr	r6, [r3, #52]	; 0x34

	//printf("CBCMR = %08lX\n", CCM_CBCMR);
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    7cce:	ldr	r2, [r2, #4]
    7cd0:	str	r1, [r2, #0]

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    7cd2:	ldrb.w	r2, [r3, #64]	; 0x40
	hardware().sdi_select_input_register = hardware().sdi_select_val;
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    7cd6:	ldr	r1, [r3, #56]	; 0x38
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];

	// Set the Mux pins 
	//Serial.println("SPI: Set Input select registers");
	hardware().sck_select_input_register = hardware().sck_select_val;
    7cd8:	str	r2, [r7, #0]
	hardware().sdi_select_input_register = hardware().sdi_select_val;
    7cda:	ldrb.w	r7, [r3, #65]	; 0x41
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    7cde:	ldr	r2, [r0, #0]
    7ce0:	str	r7, [r6, #0]
	hardware().sdo_select_input_register = hardware().sdo_select_val;
    7ce2:	ldrb.w	r3, [r3, #66]	; 0x42
    7ce6:	str	r3, [r1, #0]

	//digitalWriteFast(10, HIGH);
	//pinMode(10, OUTPUT);
	//digitalWriteFast(10, HIGH);
	port().CR = LPSPI_CR_RST;
    7ce8:	str	r5, [r2, #16]

	// Lets initialize the Transmit FIFO watermark to FIFO size - 1... 
	// BUGBUG:: I assume queue of 16 for now...
	port().FCR = LPSPI_FCR_TXWATER(15);
    7cea:	str	r4, [r2, #88]	; 0x58

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7cec:	ldrb	r3, [r0, #19]
    7cee:	cmp	r3, #0
    7cf0:	beq.n	7d46 <SPIClass::begin()+0x116>
			__disable_irq();
    7cf2:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7cf4:	ldrb	r3, [r0, #19]
    7cf6:	lsls	r4, r3, #31
    7cf8:	bpl.n	7d08 <SPIClass::begin()+0xd8>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7cfa:	ldr	r2, [pc, #272]	; (7e0c <SPIClass::begin()+0x1dc>)
    7cfc:	ldr	r3, [r0, #20]
    7cfe:	ldr	r1, [r2, #0]
    7d00:	ands	r3, r1
    7d02:	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    7d04:	str	r3, [r2, #0]
    7d06:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x02) {
    7d08:	lsls	r1, r3, #30
    7d0a:	bpl.n	7d1a <SPIClass::begin()+0xea>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7d0c:	ldr	r2, [pc, #256]	; (7e10 <SPIClass::begin()+0x1e0>)
    7d0e:	ldr	r3, [r0, #24]
    7d10:	ldr	r1, [r2, #0]
    7d12:	ands	r3, r1
    7d14:	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    7d16:	str	r3, [r2, #0]
    7d18:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x04) {
    7d1a:	lsls	r2, r3, #29
    7d1c:	bpl.n	7d2c <SPIClass::begin()+0xfc>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7d1e:	ldr	r2, [pc, #244]	; (7e14 <SPIClass::begin()+0x1e4>)
    7d20:	ldr	r3, [r0, #28]
    7d22:	ldr	r1, [r2, #0]
    7d24:	ands	r3, r1
    7d26:	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    7d28:	str	r3, [r2, #0]
    7d2a:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x08) {
    7d2c:	lsls	r7, r3, #28
    7d2e:	bpl.n	7d3e <SPIClass::begin()+0x10e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7d30:	ldr	r2, [pc, #228]	; (7e18 <SPIClass::begin()+0x1e8>)
    7d32:	ldr	r3, [r0, #32]
    7d34:	ldr	r1, [r2, #0]
    7d36:	ands	r3, r1
    7d38:	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    7d3a:	str	r3, [r2, #0]
    7d3c:	ldrb	r3, [r0, #19]
			}
			if (interruptMasksUsed & 0x10) {
    7d3e:	lsls	r6, r3, #27
    7d40:	bmi.n	7ddc <SPIClass::begin()+0x1ac>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    7d42:	cpsie	i
    7d44:	ldr	r2, [r0, #0]
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    7d46:	ldr	r5, [pc, #212]	; (7e1c <SPIClass::begin()+0x1ec>)
    7d48:	ldr	r3, [r0, #8]
    7d4a:	cmp	r3, r5
    7d4c:	beq.n	7dea <SPIClass::begin()+0x1ba>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    7d4e:	ldr	r3, [pc, #208]	; (7e20 <SPIClass::begin()+0x1f0>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    7d50:	str	r5, [r0, #8]

			uint32_t cbcmr = CCM_CBCMR;
    7d52:	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7d54:	ldr	r4, [pc, #204]	; (7e24 <SPIClass::begin()+0x1f4>)
    7d56:	ubfx	r6, r3, #4, #2
    7d5a:	ubfx	r1, r3, #26, #3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7d5e:	ldr	r3, [pc, #200]	; (7e28 <SPIClass::begin()+0x1f8>)

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7d60:	ldr.w	r4, [r4, r6, lsl #2]
    7d64:	adds	r1, #1
    7d66:	udiv	r1, r4, r1
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    7d6a:	umull	r4, r3, r3, r1

			if (d && clkhz/d > _clock) d++;
    7d6e:	lsrs	r3, r3, #20
    7d70:	bne.n	7dc6 <SPIClass::begin()+0x196>
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
    7d72:	str	r3, [r0, #12]

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7d74:	movs	r6, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7d76:	movs	r5, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
    7d78:	movs	r4, #7
		port().CR = LPSPI_CR_MEN;
    7d7a:	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    7d7c:	str	r6, [r2, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    7d7e:	str	r5, [r2, #36]	; 0x24
		port().CCR = _ccr;
    7d80:	str	r3, [r2, #64]	; 0x40
		port().TCR = settings.tcr;
    7d82:	str	r4, [r2, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    7d84:	str	r1, [r2, #16]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7d86:	ldrb	r3, [r0, #19]
    7d88:	cbz	r3, 7dc4 <SPIClass::begin()+0x194>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    7d8a:	lsls	r5, r3, #31
    7d8c:	bpl.n	7d96 <SPIClass::begin()+0x166>
    7d8e:	ldr	r3, [pc, #156]	; (7e2c <SPIClass::begin()+0x1fc>)
    7d90:	ldr	r2, [r0, #40]	; 0x28
    7d92:	str	r2, [r3, #0]
    7d94:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    7d96:	lsls	r4, r3, #30
    7d98:	bpl.n	7da2 <SPIClass::begin()+0x172>
    7d9a:	ldr	r3, [pc, #148]	; (7e30 <SPIClass::begin()+0x200>)
    7d9c:	ldr	r2, [r0, #44]	; 0x2c
    7d9e:	str	r2, [r3, #0]
    7da0:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    7da2:	lsls	r1, r3, #29
    7da4:	bpl.n	7dae <SPIClass::begin()+0x17e>
    7da6:	ldr	r3, [pc, #140]	; (7e34 <SPIClass::begin()+0x204>)
    7da8:	ldr	r2, [r0, #48]	; 0x30
    7daa:	str	r2, [r3, #0]
    7dac:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    7dae:	lsls	r2, r3, #28
    7db0:	bpl.n	7dba <SPIClass::begin()+0x18a>
    7db2:	ldr	r3, [pc, #132]	; (7e38 <SPIClass::begin()+0x208>)
    7db4:	ldr	r2, [r0, #52]	; 0x34
    7db6:	str	r2, [r3, #0]
    7db8:	ldrb	r3, [r0, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    7dba:	lsls	r3, r3, #27
    7dbc:	bpl.n	7dc4 <SPIClass::begin()+0x194>
    7dbe:	ldr	r2, [r0, #56]	; 0x38
    7dc0:	ldr	r3, [pc, #120]	; (7e3c <SPIClass::begin()+0x20c>)
    7dc2:	str	r2, [r3, #0]
    7dc4:	pop	{r4, r5, r6, r7, pc}
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
    7dc6:	udiv	r1, r1, r3
    7dca:	cmp	r1, r5
    7dcc:	it	hi
    7dce:	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    7dd0:	cmp.w	r3, #258	; 0x102
    7dd4:	bcc.n	7dee <SPIClass::begin()+0x1be>
    7dd6:	movw	r3, #32767	; 0x7fff
    7dda:	b.n	7d72 <SPIClass::begin()+0x142>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    7ddc:	ldr	r2, [pc, #96]	; (7e40 <SPIClass::begin()+0x210>)
    7dde:	ldr	r3, [r0, #36]	; 0x24
    7de0:	ldr	r1, [r2, #0]
    7de2:	ands	r3, r1
    7de4:	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    7de6:	str	r3, [r2, #0]
    7de8:	b.n	7d42 <SPIClass::begin()+0x112>
    7dea:	ldr	r3, [r0, #12]
    7dec:	b.n	7d74 <SPIClass::begin()+0x144>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    7dee:	cmp	r3, #2
    7df0:	it	ls
    7df2:	movls	r3, #0
    7df4:	bls.n	7d72 <SPIClass::begin()+0x142>
    7df6:	subs	r3, #2
    7df8:	lsrs	r1, r3, #1
    7dfa:	orr.w	r3, r3, r1, lsl #8
    7dfe:	b.n	7d72 <SPIClass::begin()+0x142>
    7e00:	.word	0xe3ffffcf
    7e04:	.word	0x08000010
    7e08:	.word	0x200002a4
    7e0c:	.word	0xe000e180
    7e10:	.word	0xe000e184
    7e14:	.word	0xe000e188
    7e18:	.word	0xe000e18c
    7e1c:	.word	0x003d0900
    7e20:	.word	0x400fc000
    7e24:	.word	0x20000114
    7e28:	.word	0x431bde83
    7e2c:	.word	0xe000e100
    7e30:	.word	0xe000e104
    7e34:	.word	0xe000e108
    7e38:	.word	0xe000e10c
    7e3c:	.word	0xe000e110
    7e40:	.word	0xe000e190

00007e44 <SPIClass::setMOSI(unsigned char)>:
    7e44:	bx	lr
    7e46:	nop

00007e48 <SPIClass::setMISO(unsigned char)>:
    7e48:	bx	lr
    7e4a:	nop

00007e4c <SPIClass::setSCK(unsigned char)>:
{
	// Currently only one defined so just return...
}

void SPIClass::setSCK(uint8_t pin)
{
    7e4c:	bx	lr
    7e4e:	nop

00007e50 <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    7e50:	cbz	r3, 7e56 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    7e52:	b.w	7b04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    7e56:	bx	lr

00007e58 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e58:	ldr	r3, [pc, #392]	; (7fe4 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e5a:	ldr	r2, [pc, #396]	; (7fe8 <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    7e5c:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e60:	ldr	r3, [pc, #392]	; (7fec <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    7e62:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    7e66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e6a:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e6e:	add.w	lr, ip, #4
    7e72:	ldr	r6, [pc, #380]	; (7ff0 <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e74:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7e78:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e7c:	ldr.w	r9, [pc, #380]	; 7ffc <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e80:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e84:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e86:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e8a:	movs	r5, #0
    7e8c:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7e90:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7e94:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7e96:	ldr.w	r9, [pc, #348]	; 7ff4 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7e9a:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7e9e:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ea2:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7ea4:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ea8:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7eaa:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eae:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7eb2:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7eb6:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7eba:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ebe:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    7ec2:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ec4:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ec8:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7eca:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    7ece:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    7ed0:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    7ed2:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    7ed4:	strb	r4, [r1, #3]
    7ed6:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    7ed8:	movw	r4, #365	; 0x16d
    7edc:	addw	r3, r7, #1970	; 0x7b2
    7ee0:	smull	r0, lr, r9, r3
    7ee4:	ands.w	r8, r3, #3
    7ee8:	mov.w	r0, r3, asr #31
    7eec:	rsb	r6, r0, lr, asr #5
    7ef0:	bne.n	7f0e <breakTime(long, tmElements_t&)+0xb6>
    7ef2:	rsb	r0, r0, lr, asr #7
    7ef6:	mls	r6, fp, r6, r3
    7efa:	mov.w	r4, #366	; 0x16e
    7efe:	mls	r0, sl, r0, r3
    7f02:	cbnz	r6, 7f0e <breakTime(long, tmElements_t&)+0xb6>
    7f04:	cmp	r0, #0
    7f06:	movw	r0, #365	; 0x16d
    7f0a:	it	ne
    7f0c:	movne	r4, r0
    7f0e:	add	r2, r4
    7f10:	adds	r5, #1
    7f12:	cmp	ip, r2
    7f14:	bcs.n	7ed6 <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    7f16:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7f18:	cmp.w	r8, #0
    7f1c:	bne.n	7f38 <breakTime(long, tmElements_t&)+0xe0>
    7f1e:	ldr	r0, [pc, #212]	; (7ff4 <breakTime(long, tmElements_t&)+0x19c>)
    7f20:	asrs	r6, r3, #31
    7f22:	movs	r5, #100	; 0x64
    7f24:	smull	r4, r0, r0, r3
    7f28:	rsb	r4, r6, r0, asr #5
    7f2c:	mls	r4, r5, r4, r3
    7f30:	cbz	r4, 7fa4 <breakTime(long, tmElements_t&)+0x14c>
    7f32:	mov.w	r4, #366	; 0x16e
    7f36:	b.n	7f3e <breakTime(long, tmElements_t&)+0xe6>
    7f38:	movw	r4, #365	; 0x16d
    7f3c:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f3e:	ldr	r0, [pc, #180]	; (7ff4 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f40:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f42:	movs	r5, #100	; 0x64
    7f44:	mov.w	r4, #400	; 0x190
    7f48:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    7f4c:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f50:	movs	r2, #0
    7f52:	rsb	r7, r6, r0, asr #5
    7f56:	rsb	r6, r6, r0, asr #7
    7f5a:	movs	r0, #1
    7f5c:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    7f60:	ldr	r5, [pc, #148]	; (7ff8 <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7f62:	mls	r6, r4, r6, r3
    7f66:	b.n	7f6e <breakTime(long, tmElements_t&)+0x116>
    7f68:	adds	r0, #1
    7f6a:	adds	r2, #1
    7f6c:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    7f6e:	cmp	r2, #1
    7f70:	uxtb	r4, r2
    7f72:	beq.n	7fbe <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7f74:	ldrb	r3, [r2, r5]
    7f76:	cmp	r3, ip
    7f78:	bhi.n	7f92 <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7f7a:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    7f7c:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    7f80:	bne.n	7f68 <breakTime(long, tmElements_t&)+0x110>
    7f82:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7f84:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7f88:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    7f8a:	strb.w	ip, [r1, #4]
}
    7f8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f92:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    7f94:	add.w	ip, ip, #1
    7f98:	uxtb	r4, r4
    7f9a:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    7f9e:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    7fa0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    7fa4:	rsb	r0, r6, r0, asr #7
    7fa8:	mov.w	r5, #400	; 0x190
    7fac:	movw	r4, #365	; 0x16d
    7fb0:	mls	r0, r5, r0, r3
    7fb4:	cmp	r0, #0
    7fb6:	it	eq
    7fb8:	moveq.w	r4, #366	; 0x16e
    7fbc:	b.n	7f3e <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    7fbe:	cmp.w	r8, #0
    7fc2:	bne.n	7fd8 <breakTime(long, tmElements_t&)+0x180>
    7fc4:	cbnz	r7, 7fe0 <breakTime(long, tmElements_t&)+0x188>
    7fc6:	cmp	r6, #0
    7fc8:	ite	ne
    7fca:	movne	r3, #28
    7fcc:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7fce:	cmp	ip, r3
    7fd0:	bcc.n	7fdc <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    7fd2:	rsb	ip, r3, ip
    7fd6:	b.n	7f68 <breakTime(long, tmElements_t&)+0x110>
    7fd8:	movs	r3, #28
    7fda:	b.n	7fce <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    7fdc:	movs	r4, #2
    7fde:	b.n	7f84 <breakTime(long, tmElements_t&)+0x12c>
    7fe0:	movs	r3, #29
    7fe2:	b.n	7fce <breakTime(long, tmElements_t&)+0x176>
    7fe4:	.word	0xc22e4507
    7fe8:	.word	0x91a2b3c5
    7fec:	.word	0x88888889
    7ff0:	.word	0x24924925
    7ff4:	.word	0x51eb851f
    7ff8:	.word	0x20000298
    7ffc:	.word	0xaaaaaaab

00008000 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8000:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    8002:	ldr	r1, [pc, #12]	; (8010 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    8004:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    8006:	bl	7e58 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    800a:	ldr	r3, [pc, #8]	; (8014 <refreshCache(long) [clone .part.0]+0x14>)
    800c:	str	r4, [r3, #0]
    800e:	pop	{r4, pc}
    8010:	.word	0x20003d28
    8014:	.word	0x20003d24

00008018 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8018:	push	{r3, r4, r5, r6, r7, lr}
    801a:	ldr	r4, [pc, #108]	; (8088 <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    801c:	ldr	r5, [pc, #108]	; (808c <now()+0x74>)
    801e:	ldr	r3, [r4, #0]
    8020:	ldr	r2, [r5, #0]
    8022:	ldr	r7, [pc, #108]	; (8090 <now()+0x78>)
    8024:	subs	r3, r3, r2
    8026:	ldr	r0, [r7, #0]
    8028:	cmp.w	r3, #1000	; 0x3e8
    802c:	bcc.n	8048 <now()+0x30>
    802e:	adds	r0, #1
    8030:	b.n	8034 <now()+0x1c>
    8032:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    8034:	add.w	r2, r2, #1000	; 0x3e8
    8038:	ldr	r3, [r4, #0]
    803a:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    803c:	subs	r3, r3, r2
    803e:	cmp.w	r3, #1000	; 0x3e8
    8042:	bcs.n	8032 <now()+0x1a>
    8044:	str	r0, [r7, #0]
    8046:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8048:	ldr	r6, [pc, #72]	; (8094 <now()+0x7c>)
    804a:	ldr	r3, [r6, #0]
    804c:	cmp	r0, r3
    804e:	bcc.n	8070 <now()+0x58>
    if (getTimePtr != 0) {
    8050:	ldr	r3, [pc, #68]	; (8098 <now()+0x80>)
    8052:	ldr	r3, [r3, #0]
    8054:	cbz	r3, 8070 <now()+0x58>
      time_t t = getTimePtr();
    8056:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8058:	ldr	r3, [pc, #64]	; (809c <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    805a:	cbnz	r0, 8072 <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    805c:	ldr	r1, [pc, #64]	; (80a0 <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    805e:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8060:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8062:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8064:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    8066:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8068:	it	ne
    806a:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    806c:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    806e:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    8070:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8072:	ldr	r3, [r3, #0]
  Status = timeSet;
    8074:	movs	r1, #2
    8076:	ldr	r4, [r4, #0]
    8078:	ldr	r2, [pc, #36]	; (80a0 <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    807a:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    807c:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    807e:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8080:	str	r3, [r6, #0]
  Status = timeSet;
    8082:	strb	r1, [r2, #0]
    8084:	pop	{r3, r4, r5, r6, r7, pc}
    8086:	nop
    8088:	.word	0x20004a24
    808c:	.word	0x20003d3c
    8090:	.word	0x20003d30
    8094:	.word	0x20003d40
    8098:	.word	0x20003d38
    809c:	.word	0x200008ac
    80a0:	.word	0x20003d34

000080a4 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    80a4:	push	{r3, lr}
  return hour(now()); 
    80a6:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80aa:	ldr	r3, [pc, #16]	; (80bc <hour()+0x18>)
    80ac:	ldr	r3, [r3, #0]
    80ae:	cmp	r0, r3
    80b0:	beq.n	80b6 <hour()+0x12>
    80b2:	bl	8000 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    80b6:	ldr	r3, [pc, #8]	; (80c0 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    80b8:	ldrb	r0, [r3, #2]
    80ba:	pop	{r3, pc}
    80bc:	.word	0x20003d24
    80c0:	.word	0x20003d28

000080c4 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    80c4:	push	{r3, lr}
  return minute(now()); 
    80c6:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80ca:	ldr	r3, [pc, #16]	; (80dc <minute()+0x18>)
    80cc:	ldr	r3, [r3, #0]
    80ce:	cmp	r0, r3
    80d0:	beq.n	80d6 <minute()+0x12>
    80d2:	bl	8000 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    80d6:	ldr	r3, [pc, #8]	; (80e0 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    80d8:	ldrb	r0, [r3, #1]
    80da:	pop	{r3, pc}
    80dc:	.word	0x20003d24
    80e0:	.word	0x20003d28

000080e4 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    80e4:	push	{r3, lr}
  return second(now()); 
    80e6:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    80ea:	ldr	r3, [pc, #16]	; (80fc <second()+0x18>)
    80ec:	ldr	r3, [r3, #0]
    80ee:	cmp	r0, r3
    80f0:	beq.n	80f6 <second()+0x12>
    80f2:	bl	8000 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    80f6:	ldr	r3, [pc, #8]	; (8100 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    80f8:	ldrb	r0, [r3, #0]
    80fa:	pop	{r3, pc}
    80fc:	.word	0x20003d24
    8100:	.word	0x20003d28

00008104 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    8104:	push	{r3, lr}
  return(day(now())); 
    8106:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    810a:	ldr	r3, [pc, #16]	; (811c <day()+0x18>)
    810c:	ldr	r3, [r3, #0]
    810e:	cmp	r0, r3
    8110:	beq.n	8116 <day()+0x12>
    8112:	bl	8000 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    8116:	ldr	r3, [pc, #8]	; (8120 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    8118:	ldrb	r0, [r3, #4]
    811a:	pop	{r3, pc}
    811c:	.word	0x20003d24
    8120:	.word	0x20003d28

00008124 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    8124:	push	{r3, lr}
  return month(now()); 
    8126:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    812a:	ldr	r3, [pc, #16]	; (813c <month()+0x18>)
    812c:	ldr	r3, [r3, #0]
    812e:	cmp	r0, r3
    8130:	beq.n	8136 <month()+0x12>
    8132:	bl	8000 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    8136:	ldr	r3, [pc, #8]	; (8140 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    8138:	ldrb	r0, [r3, #5]
    813a:	pop	{r3, pc}
    813c:	.word	0x20003d24
    8140:	.word	0x20003d28

00008144 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    8144:	push	{r3, lr}
  return year(now()); 
    8146:	bl	8018 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    814a:	ldr	r3, [pc, #20]	; (8160 <year()+0x1c>)
    814c:	ldr	r3, [r3, #0]
    814e:	cmp	r0, r3
    8150:	beq.n	8156 <year()+0x12>
    8152:	bl	8000 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    8156:	ldr	r3, [pc, #12]	; (8164 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    8158:	ldrb	r0, [r3, #6]
}
    815a:	addw	r0, r0, #1970	; 0x7b2
    815e:	pop	{r3, pc}
    8160:	.word	0x20003d24
    8164:	.word	0x20003d28

00008168 <tx_event>:
	extern volatile uint8_t usb_configuration;

    static uint32_t mtp_TXcount=0;
	static uint32_t mtp_RXcount=0;
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
    8168:	ldr	r2, [pc, #8]	; (8174 <tx_event+0xc>)
    816a:	ldr	r3, [r2, #0]
    816c:	adds	r3, #1
    816e:	str	r3, [r2, #0]
    8170:	bx	lr
    8172:	nop
    8174:	.word	0x20004800

00008178 <rx_event>:
	static void rx_event(transfer_t *t) {mtp_RXcount++;}
    8178:	ldr	r2, [pc, #8]	; (8184 <rx_event+0xc>)
    817a:	ldr	r3, [r2, #0]
    817c:	adds	r3, #1
    817e:	str	r3, [r2, #0]
    8180:	bx	lr
    8182:	nop
    8184:	.word	0x20004544

00008188 <usb_mtp_wait>:
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
    8188:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		uint32_t wait_begin_at = systick_millis_count;
    818c:	ldr	r4, [pc, #60]	; (81cc <usb_mtp_wait+0x44>)
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    818e:	ldr	r5, [pc, #64]	; (81d0 <usb_mtp_wait+0x48>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
    8190:	ldr	r7, [r4, #0]
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    8192:	ldrb	r3, [r5, #0]
    8194:	cbz	r3, 81bc <usb_mtp_wait+0x34>
    8196:	mov	r6, r0
    8198:	mov	r8, r1
    819a:	b.n	81ac <usb_mtp_wait+0x24>
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    819c:	ldr	r3, [r4, #0]
    819e:	subs	r3, r3, r7
    81a0:	cmp	r3, r8
    81a2:	bhi.n	81c4 <usb_mtp_wait+0x3c>
			yield();
    81a4:	bl	9da0 <yield>

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    81a8:	ldrb	r3, [r5, #0]
    81aa:	cbz	r3, 81bc <usb_mtp_wait+0x34>
			uint32_t status = usb_transfer_status(xfer);
    81ac:	mov	r0, r6
    81ae:	bl	9828 <usb_transfer_status>
			if (!(status & 0x80)) break; // transfer descriptor ready
    81b2:	lsls	r3, r0, #24
    81b4:	bmi.n	819c <usb_mtp_wait+0x14>
			if (systick_millis_count - wait_begin_at > timeout) return 0;
			yield();
		}
		return 1;
    81b6:	movs	r0, #1
    81b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	static int usb_mtp_wait(transfer_t *xfer, uint32_t timeout)
	{
		uint32_t wait_begin_at = systick_millis_count;
		while (1) {
			if (!usb_configuration) return -1; // usb not enumerated by host
    81bc:	mov.w	r0, #4294967295
    81c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) break; // transfer descriptor ready
			if (systick_millis_count - wait_begin_at > timeout) return 0;
    81c4:	movs	r0, #0
			yield();
		}
		return 1;
	}
    81c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81ca:	nop
    81cc:	.word	0x20004a24
    81d0:	.word	0x20004a18

000081d4 <usb_mtp_configure>:
	
	static void tx_event(transfer_t *t) {mtp_TXcount++;}
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
    81d4:	push	{r4, r5, r6, lr}
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    81d6:	movs	r4, #0

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    81d8:	ldr	r5, [pc, #76]	; (8228 <usb_mtp_configure+0x54>)
	static void rx_event(transfer_t *t) {mtp_RXcount++;}

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
    81da:	movs	r2, #128	; 0x80
    81dc:	movs	r1, #0
    81de:	ldr	r0, [pc, #76]	; (822c <usb_mtp_configure+0x58>)
    81e0:	bl	b58c <memset>
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    81e4:	ldr	r6, [pc, #72]	; (8230 <usb_mtp_configure+0x5c>)

	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
    81e6:	mov	r1, r4
    81e8:	mov	r0, r5
    81ea:	movs	r2, #32
    81ec:	bl	b58c <memset>
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    81f0:	mov	r2, r4
    81f2:	ldr	r3, [pc, #64]	; (8234 <usb_mtp_configure+0x60>)
    81f4:	mov.w	r1, #512	; 0x200
    81f8:	movs	r0, #4
	void usb_mtp_configure(void)
	{
		printf("usb_mtp_configure\n");
		memset(tx_transfer, 0, sizeof(tx_transfer));
		memset(rx_transfer, 0, sizeof(rx_transfer));
		tx_head = 0;
    81fa:	strb	r4, [r6, #0]
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
    81fc:	bl	9744 <usb_config_tx>
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
    8200:	mov	r2, r4
    8202:	ldr	r3, [pc, #52]	; (8238 <usb_mtp_configure+0x64>)
    8204:	mov.w	r1, #512	; 0x200
    8208:	movs	r0, #4
    820a:	bl	96e0 <usb_config_rx>
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    820e:	mov	r0, r5
    8210:	mov	r3, r4
    8212:	ldr	r1, [pc, #40]	; (823c <usb_mtp_configure+0x68>)
    8214:	mov.w	r2, #512	; 0x200
    8218:	bl	97ac <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    821c:	mov	r1, r5
    821e:	movs	r0, #4
	}
    8220:	ldmia.w	sp!, {r4, r5, r6, lr}
		tx_head = 0;
		usb_config_tx(MTP_TX_ENDPOINT, MTP_TX_SIZE, 0, tx_event);
		usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, rx_event);
		//usb_config_rx(MTP_RX_ENDPOINT, MTP_RX_SIZE, 0, NULL); // why does this not work?
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    8224:	b.w	9804 <usb_receive>
    8228:	.word	0x20004760
    822c:	.word	0x20004780
    8230:	.word	0x20004548
    8234:	.word	0x00008169
    8238:	.word	0x00008179
    823c:	.word	0x2000454c

00008240 <usb_mtp_recv>:
		}
		return 1;
	}

	int usb_mtp_recv(void *buffer, uint32_t timeout)
	{
    8240:	push	{r4, lr}
    8242:	mov	r4, r0
		int ret= usb_mtp_wait(rx_transfer, timeout); if(ret<=0) return ret;
    8244:	ldr	r0, [pc, #56]	; (8280 <usb_mtp_recv+0x40>)
    8246:	bl	8188 <usb_mtp_wait>
    824a:	cmp	r0, #0
    824c:	ble.n	827e <usb_mtp_recv+0x3e>

		memcpy(buffer, rx_buffer, MTP_RX_SIZE);
    824e:	mov.w	r2, #512	; 0x200
    8252:	ldr	r1, [pc, #48]	; (8284 <usb_mtp_recv+0x44>)
    8254:	mov	r0, r4
    8256:	bl	8310 <memcpy>
		memset(rx_transfer, 0, sizeof(rx_transfer));
    825a:	movs	r2, #32
    825c:	movs	r1, #0
    825e:	ldr	r0, [pc, #32]	; (8280 <usb_mtp_recv+0x40>)
    8260:	bl	b58c <memset>
		usb_prepare_transfer(rx_transfer + 0, rx_buffer, MTP_RX_SIZE, 0);
    8264:	movs	r3, #0
    8266:	mov.w	r2, #512	; 0x200
    826a:	ldr	r1, [pc, #24]	; (8284 <usb_mtp_recv+0x44>)
    826c:	ldr	r0, [pc, #16]	; (8280 <usb_mtp_recv+0x40>)
    826e:	bl	97ac <usb_prepare_transfer>
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
    8272:	movs	r0, #4
    8274:	ldr	r1, [pc, #8]	; (8280 <usb_mtp_recv+0x40>)
    8276:	bl	9804 <usb_receive>
		return MTP_RX_SIZE;
    827a:	mov.w	r0, #512	; 0x200
	}
    827e:	pop	{r4, pc}
    8280:	.word	0x20004760
    8284:	.word	0x2000454c

00008288 <usb_mtp_send>:

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    8288:	push	{r3, r4, r5, r6, r7, lr}
		transfer_t *xfer = tx_transfer + tx_head;
    828a:	ldr	r6, [pc, #84]	; (82e0 <usb_mtp_send+0x58>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    828c:	mov	r7, r0
		transfer_t *xfer = tx_transfer + tx_head;
    828e:	ldr	r3, [pc, #84]	; (82e4 <usb_mtp_send+0x5c>)
		usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
    8290:	mov	r5, r1
		transfer_t *xfer = tx_transfer + tx_head;
    8292:	ldrb	r4, [r6, #0]
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    8294:	mov	r1, r2
		return MTP_RX_SIZE;
	}

	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
    8296:	add.w	r4, r3, r4, lsl #5
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;
    829a:	mov	r0, r4
    829c:	bl	8188 <usb_mtp_wait>
    82a0:	cmp	r0, #0
    82a2:	ble.n	82dc <usb_mtp_send+0x54>

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    82a4:	ldrb	r0, [r6, #0]
		memcpy(txdata, buffer, len);
    82a6:	mov	r1, r7
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    82a8:	ldr	r3, [pc, #60]	; (82e8 <usb_mtp_send+0x60>)
		memcpy(txdata, buffer, len);
    82aa:	mov	r2, r5
	int usb_mtp_send(const void *buffer,  int len, uint32_t timeout)
	{
		transfer_t *xfer = tx_transfer + tx_head;
		int ret= usb_mtp_wait(xfer, timeout); if(ret<=0) return ret;

		uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE);
    82ac:	add.w	r3, r3, r0, lsl #9
		memcpy(txdata, buffer, len);
    82b0:	mov	r0, r3
    82b2:	bl	8310 <memcpy>
		usb_prepare_transfer(xfer, txdata,len, 0);
    82b6:	movs	r3, #0
    82b8:	mov	r1, r0
    82ba:	mov	r2, r5
    82bc:	mov	r0, r4
    82be:	bl	97ac <usb_prepare_transfer>
		usb_transmit(MTP_TX_ENDPOINT, xfer);
    82c2:	mov	r1, r4
    82c4:	movs	r0, #4
    82c6:	bl	97dc <usb_transmit>
		if (++tx_head >= TX_NUM) tx_head = 0;
    82ca:	ldrb	r3, [r6, #0]
    82cc:	adds	r3, #1
    82ce:	uxtb	r3, r3
    82d0:	cmp	r3, #3
    82d2:	it	hi
    82d4:	movhi	r3, #0
    82d6:	strb	r3, [r6, #0]
		asm("wfi");
    82d8:	wfi
		return len;
    82da:	mov	r0, r5
	}
    82dc:	pop	{r3, r4, r5, r6, r7, pc}
    82de:	nop
    82e0:	.word	0x20004548
    82e4:	.word	0x20004780
    82e8:	.word	0x20003d44

000082ec <usb_mtp_available>:

	int usb_mtp_available(void)
	{
    82ec:	push	{r3, lr}
		if (!usb_configuration) return 0;
    82ee:	ldr	r3, [pc, #24]	; (8308 <usb_mtp_available+0x1c>)
    82f0:	ldrb	r3, [r3, #0]
    82f2:	cbnz	r3, 82f8 <usb_mtp_available+0xc>
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
		return 0;
    82f4:	movs	r0, #0
    82f6:	pop	{r3, pc}
	}

	int usb_mtp_available(void)
	{
		if (!usb_configuration) return 0;
		if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
    82f8:	ldr	r0, [pc, #16]	; (830c <usb_mtp_available+0x20>)
    82fa:	bl	9828 <usb_transfer_status>
    82fe:	lsls	r3, r0, #24
    8300:	bmi.n	82f4 <usb_mtp_available+0x8>
    8302:	mov.w	r0, #512	; 0x200
		return 0;
	}
    8306:	pop	{r3, pc}
    8308:	.word	0x20004a18
    830c:	.word	0x20004760

00008310 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8310:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8312:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8316:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    831a:	bne.n	83f8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    831c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    831e:	bcc.n	83a4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8320:	ldr.w	r3, [r1], #4
    8324:	str.w	r3, [r0], #4
    8328:	ldr.w	r3, [r1], #4
    832c:	str.w	r3, [r0], #4
    8330:	ldr.w	r3, [r1], #4
    8334:	str.w	r3, [r0], #4
    8338:	ldr.w	r3, [r1], #4
    833c:	str.w	r3, [r0], #4
    8340:	ldr.w	r3, [r1], #4
    8344:	str.w	r3, [r0], #4
    8348:	ldr.w	r3, [r1], #4
    834c:	str.w	r3, [r0], #4
    8350:	ldr.w	r3, [r1], #4
    8354:	str.w	r3, [r0], #4
    8358:	ldr.w	r3, [r1], #4
    835c:	str.w	r3, [r0], #4
    8360:	ldr.w	r3, [r1], #4
    8364:	str.w	r3, [r0], #4
    8368:	ldr.w	r3, [r1], #4
    836c:	str.w	r3, [r0], #4
    8370:	ldr.w	r3, [r1], #4
    8374:	str.w	r3, [r0], #4
    8378:	ldr.w	r3, [r1], #4
    837c:	str.w	r3, [r0], #4
    8380:	ldr.w	r3, [r1], #4
    8384:	str.w	r3, [r0], #4
    8388:	ldr.w	r3, [r1], #4
    838c:	str.w	r3, [r0], #4
    8390:	ldr.w	r3, [r1], #4
    8394:	str.w	r3, [r0], #4
    8398:	ldr.w	r3, [r1], #4
    839c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    83a0:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    83a2:	bcs.n	8320 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    83a4:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    83a6:	bcc.n	83cc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    83a8:	ldr.w	r3, [r1], #4
    83ac:	str.w	r3, [r0], #4
    83b0:	ldr.w	r3, [r1], #4
    83b4:	str.w	r3, [r0], #4
    83b8:	ldr.w	r3, [r1], #4
    83bc:	str.w	r3, [r0], #4
    83c0:	ldr.w	r3, [r1], #4
    83c4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    83c8:	subs	r2, #16
	bhs	.Lmid_block_loop
    83ca:	bcs.n	83a8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    83cc:	adds	r2, #12
	blo	.Lcopy_less_than_4
    83ce:	bcc.n	83dc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    83d0:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    83d4:	str.w	r3, [r0], #4
	subs	r2, #4
    83d8:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    83da:	bcs.n	83d0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    83dc:	adds	r2, #4
	beq	.Ldone
    83de:	beq.n	83f2 <memcpy+0xe2>

	lsls	r2, r2, #31
    83e0:	lsls	r2, r2, #31
	itt ne
    83e2:	itt	ne
	ldrbne  r3, [r1], #1
    83e4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    83e8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    83ec:	bcc.n	83f2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    83ee:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    83f0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    83f2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    83f4:	bx	lr
    83f6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    83f8:	cmp	r2, #8
	blo	.Lbyte_copy
    83fa:	bcc.n	8424 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    83fc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    83fe:	beq.n	831c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8400:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8404:	beq.n	831c <memcpy+0xc>

	rsb	r3, #4
    8406:	rsb	r3, r3, #4
	subs	r2, r3
    840a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    840c:	lsls	r3, r3, #31
	itt ne
    840e:	itt	ne
	ldrbne  r3, [r1], #1
    8410:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8414:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8418:	bcc.n	831c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    841a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    841e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8422:	b.n	831c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8424:	subs	r2, #4
	blo	.Lcopy_less_than_4
    8426:	bcc.n	83dc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8428:	subs	r2, #1
	ldrb    r3, [r1], #1
    842a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    842e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8432:	bcs.n	8428 <memcpy+0x118>

	ldrb	r3, [r1]
    8434:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8436:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8438:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    843a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    843c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    843e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8440:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8442:	bx	lr

00008444 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    8444:	movs	r0, #4
    8446:	mov	r1, lr
    8448:	tst	r0, r1
    844a:	beq.n	8454 <_MSP>
    844c:	mrs	r0, PSP
    8450:	b.w	8464 <HardFault_HandlerC>

00008454 <_MSP>:
    8454:	mrs	r0, MSP
    8458:	b.w	8464 <HardFault_HandlerC>

0000845c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    845c:	bx	lr
    845e:	nop

00008460 <startup_default_late_hook>:


extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    8460:	bx	lr
    8462:	nop

00008464 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    8464:	ldr	r3, [pc, #108]	; (84d4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    8466:	movs	r1, #5
    8468:	ldr	r2, [pc, #108]	; (84d8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    846a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    846c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    846e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    8472:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    8474:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    8478:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    847a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    847c:	ldr	r4, [pc, #92]	; (84dc <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    847e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    8480:	ldr	r0, [pc, #92]	; (84e0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    8482:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    8484:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    8488:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    848c:	ldr	r3, [r4, #0]
    848e:	cmp	r3, r0
    8490:	bls.n	8498 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    8492:	ldr	r0, [pc, #80]	; (84e4 <HardFault_HandlerC+0x80>)
    8494:	bl	8c60 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    8498:	ldr	r5, [pc, #56]	; (84d4 <HardFault_HandlerC+0x70>)
    849a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    849c:	movs	r0, #0
    849e:	ldr	r2, [pc, #72]	; (84e8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    84a0:	ldr	r1, [pc, #72]	; (84ec <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    84a2:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    84a6:	str	r0, [sp, #4]
    84a8:	ldr	r3, [sp, #4]
    84aa:	cmp	r3, r2
    84ac:	bhi.n	84ba <HardFault_HandlerC+0x56>
    84ae:	ldr	r3, [sp, #4]
    84b0:	adds	r3, #1
    84b2:	str	r3, [sp, #4]
    84b4:	ldr	r3, [sp, #4]
    84b6:	cmp	r3, r2
    84b8:	bls.n	84ae <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    84ba:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    84be:	str	r0, [sp, #4]
    84c0:	ldr	r3, [sp, #4]
    84c2:	cmp	r3, r1
    84c4:	bhi.n	84a2 <HardFault_HandlerC+0x3e>
    84c6:	ldr	r3, [sp, #4]
    84c8:	adds	r3, #1
    84ca:	str	r3, [sp, #4]
    84cc:	ldr	r3, [sp, #4]
    84ce:	cmp	r3, r1
    84d0:	bls.n	84c6 <HardFault_HandlerC+0x62>
    84d2:	b.n	84a2 <HardFault_HandlerC+0x3e>
    84d4:	.word	0x401bc000
    84d8:	.word	0x401f8000
    84dc:	.word	0x200008b8
    84e0:	.word	0x23c345ff
    84e4:	.word	0x11e1a300
    84e8:	.word	0x000f423f
    84ec:	.word	0x0089543f

000084f0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    84f0:	ldr	r2, [pc, #36]	; (8518 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    84f2:	push	{r3, lr}
        char *prev = __brkval;
    84f4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    84f6:	cbz	r0, 8502 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    84f8:	add	r0, r3
    84fa:	ldr	r1, [pc, #32]	; (851c <_sbrk+0x2c>)
    84fc:	cmp	r0, r1
    84fe:	bhi.n	8506 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    8500:	str	r0, [r2, #0]
        }
        return prev;
}
    8502:	mov	r0, r3
    8504:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    8506:	bl	ada8 <__errno>
    850a:	movs	r2, #12
                        return (void *)-1;
    850c:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    8510:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    8512:	mov	r0, r3
    8514:	pop	{r3, pc}
    8516:	nop
    8518:	.word	0x200008b0
    851c:	.word	0x20280000

00008520 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    8520:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    8522:	ldr	r1, [pc, #80]	; (8574 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8524:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8528:	ldr	r5, [pc, #76]	; (8578 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    852a:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    852c:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8530:	ldr	r6, [pc, #72]	; (857c <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8532:	ldr	r2, [pc, #76]	; (8580 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8534:	add.w	r5, r5, r0, lsl #5
    8538:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    853a:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    853c:	mov	r0, r5
    853e:	ldrh	r2, [r6, #0]
    8540:	bl	97ac <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8544:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8546:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    854a:	add	r1, r4
	asm("dsb");
    854c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8550:	ldr	r2, [pc, #48]	; (8584 <rx_queue_transfer+0x64>)
    8552:	str	r3, [r2, #0]
		location += 32;
    8554:	adds	r3, #32
	} while (location < end_addr);
    8556:	cmp	r1, r3
    8558:	bhi.n	8552 <rx_queue_transfer+0x32>
	asm("dsb");
    855a:	dsb	sy
	asm("isb");
    855e:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8562:	movs	r0, #3
    8564:	mov	r1, r5
    8566:	bl	9804 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    856a:	ldr	r3, [pc, #28]	; (8588 <rx_queue_transfer+0x68>)
    856c:	mov.w	r2, #131072	; 0x20000
    8570:	str	r2, [r3, #0]
    8572:	pop	{r3, r4, r5, r6, r7, pc}
    8574:	.word	0x20200000
    8578:	.word	0x20004820
    857c:	.word	0x2000492e
    8580:	.word	0xe000e18c
    8584:	.word	0xe000ef5c
    8588:	.word	0xe000e10c

0000858c <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    858c:	ldr	r2, [pc, #144]	; (8620 <rx_event+0x94>)
    858e:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8590:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8594:	ubfx	r3, r3, #16, #15
    8598:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    859a:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    859c:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    859e:	cmp	r4, #0
    85a0:	ble.n	8614 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    85a2:	ldr	r1, [pc, #128]	; (8624 <rx_event+0x98>)
		if (head != rx_tail) {
    85a4:	ldr	r2, [pc, #128]	; (8628 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    85a6:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    85a8:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    85aa:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    85ac:	ldr	r0, [pc, #124]	; (862c <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    85ae:	ldr	r6, [pc, #128]	; (8630 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    85b0:	cmp	r3, r2
    85b2:	beq.n	85c4 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    85b4:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    85b8:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    85bc:	rsb	r2, r7, #512	; 0x200
    85c0:	cmp	r4, r2
    85c2:	bls.n	85ea <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    85c4:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    85c6:	movs	r2, #0
    85c8:	ldr	r7, [pc, #104]	; (8634 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    85ca:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    85cc:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    85d0:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    85d4:	ldr	r6, [pc, #96]	; (8638 <rx_event+0xac>)
    85d6:	ite	ls
    85d8:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    85da:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    85dc:	strb	r2, [r1, #0]
		rx_available += len;
    85de:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    85e0:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    85e2:	add	r4, r2
    85e4:	str	r4, [r6, #0]
    85e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    85ea:	ldr	r3, [pc, #80]	; (863c <rx_event+0xb0>)
    85ec:	add.w	r0, r7, r8, lsl #9
    85f0:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    85f2:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    85f4:	add.w	r1, r3, r5, lsl #9
    85f8:	add	r0, r3
    85fa:	bl	8310 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    85fe:	ldr	r2, [pc, #56]	; (8638 <rx_event+0xac>)
				rx_queue_transfer(i);
    8600:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    8602:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8606:	ldr	r3, [r2, #0]
    8608:	add	r4, r3
    860a:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    860c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    8610:	b.w	8520 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    8614:	mov	r0, r5
	}
}
    8616:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    861a:	b.w	8520 <rx_queue_transfer>
    861e:	nop
    8620:	.word	0x2000492e
    8624:	.word	0x20004944
    8628:	.word	0x20004920
    862c:	.word	0x20004924
    8630:	.word	0x20004930
    8634:	.word	0x20004804
    8638:	.word	0x20004940
    863c:	.word	0x20200000

00008640 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8640:	ldr	r3, [pc, #120]	; (86bc <usb_serial_flush_callback+0x7c>)
    8642:	ldrb	r2, [r3, #0]
    8644:	cbnz	r2, 865e <usb_serial_flush_callback+0x1e>
    8646:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    864a:	ldr	r2, [pc, #116]	; (86c0 <usb_serial_flush_callback+0x80>)
    864c:	ldrb	r2, [r2, #0]
    864e:	cbz	r2, 865e <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8650:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    8654:	ldr	r5, [pc, #108]	; (86c4 <usb_serial_flush_callback+0x84>)
    8656:	ldrh	r2, [r5, #0]
    8658:	cbnz	r2, 8660 <usb_serial_flush_callback+0x20>
    865a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    865e:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8660:	ldr	r6, [pc, #100]	; (86c8 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8662:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8666:	ldr	r7, [pc, #100]	; (86cc <usb_serial_flush_callback+0x8c>)
    8668:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    866a:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    866c:	ldr	r4, [pc, #96]	; (86d0 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    866e:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8672:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8676:	mov	r0, r7
    8678:	mov	r1, r4
    867a:	bl	97ac <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    867e:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8682:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    8686:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    868a:	ldr	r3, [pc, #72]	; (86d4 <usb_serial_flush_callback+0x94>)
    868c:	str	r1, [r3, #0]
		location += 32;
    868e:	adds	r1, #32
	} while (location < end_addr);
    8690:	cmp	r2, r1
    8692:	bhi.n	868c <usb_serial_flush_callback+0x4c>
	asm("dsb");
    8694:	dsb	sy
	asm("isb");
    8698:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    869c:	movs	r0, #3
    869e:	mov	r1, r7
    86a0:	bl	97dc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    86a4:	ldrb	r3, [r6, #0]
    86a6:	ldr	r2, [pc, #32]	; (86c8 <usb_serial_flush_callback+0x88>)
    86a8:	adds	r3, #1
    86aa:	uxtb	r3, r3
    86ac:	cmp	r3, #3
    86ae:	it	hi
    86b0:	movhi	r3, #0
    86b2:	strb	r3, [r2, #0]
	tx_available = 0;
    86b4:	movs	r3, #0
    86b6:	strh	r3, [r5, #0]
    86b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    86bc:	.word	0x20004816
    86c0:	.word	0x20004a18
    86c4:	.word	0x20004946
    86c8:	.word	0x20004817
    86cc:	.word	0x20004960
    86d0:	.word	0x20201000
    86d4:	.word	0xe000ef70

000086d8 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    86d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86dc:	sub	sp, #20
    86de:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    86e0:	str	r1, [sp, #4]
    86e2:	cmp	r1, #0
    86e4:	beq.w	882c <usb_serial_write.part.1+0x154>
    86e8:	movs	r3, #0
    86ea:	ldr.w	r8, [pc, #348]	; 8848 <usb_serial_write.part.1+0x170>
    86ee:	ldr.w	r9, [pc, #332]	; 883c <usb_serial_write.part.1+0x164>
    86f2:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    86f4:	ldr	r6, [pc, #312]	; (8830 <usb_serial_write.part.1+0x158>)
    86f6:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    86fa:	ldr.w	sl, [pc, #336]	; 884c <usb_serial_write.part.1+0x174>
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    86fe:	ldr.w	fp, [pc, #336]	; 8850 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    8702:	ldr	r2, [pc, #304]	; (8834 <usb_serial_write.part.1+0x15c>)
    8704:	ldrb	r4, [r2, #0]
    8706:	ldr	r2, [pc, #304]	; (8838 <usb_serial_write.part.1+0x160>)
    8708:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    870c:	cmp	r3, #0
    870e:	bne.n	87ee <usb_serial_write.part.1+0x116>
    8710:	mov	r5, r3
    8712:	mov	r4, r3
    8714:	b.n	8740 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8716:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    871a:	cbnz	r4, 871e <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    871c:	ldr	r5, [r6, #0]
    871e:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8720:	cmp	r3, #0
    8722:	bne.n	87e2 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    8724:	ldr	r3, [r6, #0]
    8726:	subs	r3, r3, r5
    8728:	cmp	r3, #120	; 0x78
    872a:	bhi.n	8820 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    872c:	ldrb.w	r3, [sl]
    8730:	cmp	r3, #0
    8732:	beq.n	87e2 <usb_serial_write.part.1+0x10a>
			yield();
    8734:	bl	9da0 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8738:	ldrh.w	r3, [r8]
    873c:	cmp	r3, #0
    873e:	bne.n	87ea <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    8740:	mov	r0, r7
    8742:	bl	9828 <usb_transfer_status>
			if (!(status & 0x80)) {
    8746:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    874a:	ldr	r2, [pc, #240]	; (883c <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    874c:	bne.n	8716 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    874e:	mov.w	r3, #2048	; 0x800
    8752:	ldr	r2, [pc, #224]	; (8834 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    8754:	strb.w	r0, [r9]
    8758:	ldrb	r4, [r2, #0]
    875a:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    875c:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8760:	lsls	r4, r4, #11
		if (size >= tx_available) {
    8762:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8764:	ldr	r1, [pc, #216]	; (8840 <usb_serial_write.part.1+0x168>)
    8766:	add	r0, r4
		if (size >= tx_available) {
    8768:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    876a:	add	r0, r1
		if (size >= tx_available) {
    876c:	bcc.n	87f6 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    876e:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    8770:	ldr	r1, [sp, #8]
    8772:	bl	8310 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    8776:	movs	r3, #0
    8778:	mov	r1, r4
    877a:	mov.w	r2, #2048	; 0x800
    877e:	mov	r0, r7
    8780:	bl	97ac <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8784:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8788:	add.w	r4, r4, #2048	; 0x800
	asm("dsb");
    878c:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8790:	str.w	r3, [fp]
		location += 32;
    8794:	adds	r3, #32
	} while (location < end_addr);
    8796:	cmp	r4, r3
    8798:	bhi.n	8790 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    879a:	dsb	sy
	asm("isb");
    879e:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    87a2:	movs	r0, #3
    87a4:	mov	r1, r7
    87a6:	bl	97dc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    87aa:	ldr	r3, [pc, #136]	; (8834 <usb_serial_write.part.1+0x15c>)
    87ac:	ldr	r2, [pc, #132]	; (8834 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    87ae:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    87b0:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    87b2:	ldr	r0, [pc, #144]	; (8844 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    87b4:	adds	r3, #1
    87b6:	uxtb	r3, r3
    87b8:	cmp	r3, #3
    87ba:	it	hi
    87bc:	movhi	r3, #0
    87be:	strb	r3, [r2, #0]
			size -= tx_available;
    87c0:	ldrh.w	r2, [r8]
			sent += tx_available;
    87c4:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    87c6:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    87ca:	add	r3, r2
    87cc:	str	r3, [sp, #0]
			data += tx_available;
    87ce:	ldr	r3, [sp, #8]
    87d0:	add	r3, r2
    87d2:	str	r3, [sp, #8]
    87d4:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    87d6:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    87da:	ldr	r1, [sp, #4]
    87dc:	subs	r2, r1, r2
    87de:	str	r2, [sp, #4]
    87e0:	bne.n	8702 <usb_serial_write.part.1+0x2a>
    87e2:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    87e4:	add	sp, #20
    87e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87ea:	ldr	r2, [pc, #72]	; (8834 <usb_serial_write.part.1+0x15c>)
    87ec:	ldrb	r4, [r2, #0]
    87ee:	mov	r2, r3
    87f0:	rsb	r0, r3, #2048	; 0x800
    87f4:	b.n	8760 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    87f6:	ldr	r4, [sp, #4]
    87f8:	ldr	r1, [sp, #8]
    87fa:	mov	r2, r4
    87fc:	str	r3, [sp, #12]
    87fe:	bl	8310 <memcpy>
			tx_available -= size;
    8802:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8804:	ldr	r2, [pc, #60]	; (8844 <usb_serial_write.part.1+0x16c>)
    8806:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    880a:	subs	r3, r3, r4
    880c:	strh.w	r3, [r8]
    8810:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8812:	str.w	r1, [r2, #132]	; 0x84
    8816:	mov	r0, r3
    8818:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    881a:	add	sp, #20
    881c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    8820:	movs	r3, #1
				return sent;
    8822:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    8824:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8826:	add	sp, #20
    8828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    882c:	ldr	r0, [sp, #4]
    882e:	b.n	87e4 <usb_serial_write.part.1+0x10c>
    8830:	.word	0x20004a24
    8834:	.word	0x20004817
    8838:	.word	0x20004960
    883c:	.word	0x20004945
    8840:	.word	0x20201000
    8844:	.word	0x402e0000
    8848:	.word	0x20004946
    884c:	.word	0x20004a18
    8850:	.word	0xe000ef70

00008854 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    8854:	bx	lr
    8856:	nop

00008858 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8858:	ldr	r3, [pc, #196]	; (8920 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    885a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    885e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    8860:	ldr	r7, [pc, #192]	; (8924 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8862:	cmp	r3, #0
    8864:	beq.n	8910 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    8866:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    886a:	ldr.w	r8, [pc, #236]	; 8958 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    886e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    8870:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8874:	movs	r1, #0
    8876:	movs	r2, #128	; 0x80
    8878:	ldr	r0, [pc, #172]	; (8928 <usb_serial_configure+0xd0>)
	tx_head = 0;
    887a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    887c:	ldr	r6, [pc, #172]	; (892c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    887e:	bl	b58c <memset>
	tx_head = 0;
    8882:	ldr	r4, [pc, #172]	; (8930 <usb_serial_configure+0xd8>)
	tx_available = 0;
    8884:	ldr	r3, [pc, #172]	; (8934 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8886:	mov	r1, r5
    8888:	mov.w	r2, #256	; 0x100
    888c:	ldr	r0, [pc, #168]	; (8938 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    888e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8890:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8892:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8894:	bl	b58c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8898:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    889a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    889c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    889e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    88a0:	str	r5, [r6, #8]
    88a2:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    88a4:	ldr	r1, [pc, #148]	; (893c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    88a6:	ldr	r6, [pc, #152]	; (8940 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    88a8:	ldr	r0, [pc, #152]	; (8944 <usb_serial_configure+0xec>)
	rx_available = 0;
    88aa:	ldr.w	lr, [pc, #176]	; 895c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    88ae:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    88b0:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    88b2:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    88b4:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    88b6:	str	r5, [r6, #0]
    88b8:	str	r5, [r6, #4]
    88ba:	str	r5, [r6, #8]
    88bc:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    88be:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    88c2:	bl	9744 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    88c6:	ldrh.w	r1, [r8]
    88ca:	mov	r2, r5
    88cc:	ldr	r3, [pc, #120]	; (8948 <usb_serial_configure+0xf0>)
    88ce:	movs	r0, #3
    88d0:	bl	96e0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    88d4:	mov	r3, r5
    88d6:	ldrh	r1, [r7, #0]
    88d8:	movs	r2, #1
    88da:	movs	r0, #3
    88dc:	bl	9744 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    88e0:	mov	r0, r4
    88e2:	adds	r4, #1
    88e4:	bl	8520 <rx_queue_transfer>
    88e8:	cmp	r4, #8
    88ea:	bne.n	88e0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    88ec:	ldr	r3, [pc, #92]	; (894c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    88ee:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    88f0:	ldr	r0, [pc, #92]	; (8950 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    88f2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    88f4:	ldr	r4, [pc, #92]	; (8954 <usb_serial_configure+0xfc>)
    88f6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    88f8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    88fc:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8900:	ldr.w	r2, [r3, #328]	; 0x148
    8904:	orr.w	r2, r2, #16777216	; 0x1000000
    8908:	str.w	r2, [r3, #328]	; 0x148
    890c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8910:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    8912:	ldr.w	r8, [pc, #68]	; 8958 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8916:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    8918:	strh.w	r3, [r8]
    891c:	b.n	8874 <usb_serial_configure+0x1c>
    891e:	nop
    8920:	.word	0x200049f0
    8924:	.word	0x20004814
    8928:	.word	0x20004960
    892c:	.word	0x20004930
    8930:	.word	0x20004817
    8934:	.word	0x20004946
    8938:	.word	0x20004820
    893c:	.word	0x20004944
    8940:	.word	0x20004804
    8944:	.word	0x20004920
    8948:	.word	0x0000858d
    894c:	.word	0x402e0000
    8950:	.word	0x200049e0
    8954:	.word	0x00008641
    8958:	.word	0x2000492e
    895c:	.word	0x20004940

00008960 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8960:	ldr	r3, [pc, #196]	; (8a28 <usb_serial_read+0xc8>)
    8962:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8966:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    896a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    896c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    896e:	ldr	r3, [pc, #188]	; (8a2c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8970:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8972:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8974:	cmp	r1, #0
    8976:	beq.n	8a20 <usb_serial_read+0xc0>
    8978:	ldr	r3, [pc, #180]	; (8a30 <usb_serial_read+0xd0>)
    897a:	uxtb	r4, r4
    897c:	ldrb	r3, [r3, #0]
    897e:	cmp	r4, r3
    8980:	beq.n	8a24 <usb_serial_read+0xc4>
    8982:	mov	sl, r0
    8984:	movs	r7, #0
    8986:	ldr.w	fp, [pc, #192]	; 8a48 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    898a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    898c:	ldr	r3, [pc, #164]	; (8a34 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    898e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8992:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8994:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8996:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    8998:	ldr	r3, [pc, #156]	; (8a38 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    899a:	it	cs
    899c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    899e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    89a0:	ldr	r3, [pc, #144]	; (8a34 <usb_serial_read+0xd4>)
    89a2:	ldrh.w	lr, [r3, r5, lsl #1]
    89a6:	ldr	r3, [pc, #148]	; (8a3c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89a8:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    89ac:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89b0:	ldr	r3, [pc, #140]	; (8a40 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    89b2:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89b6:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    89b8:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89ba:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    89bc:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    89be:	bcs.n	89f4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    89c0:	add.w	r1, lr, r5, lsl #9
    89c4:	mov	r2, r8
    89c6:	add	r1, r3
    89c8:	bl	8310 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    89cc:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89ce:	ldr.w	r1, [fp]
    89d2:	mov	r0, r9
			rx_index[i] += len;
    89d4:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89d8:	rsb	r1, r8, r1
			rx_index[i] += len;
    89dc:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89de:	str.w	r1, [fp]
			rx_index[i] += len;
    89e2:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    89e6:	ldr	r3, [pc, #92]	; (8a44 <usb_serial_read+0xe4>)
    89e8:	mov.w	r2, #131072	; 0x20000
    89ec:	str	r2, [r3, #0]
	return count;
}
    89ee:	add	sp, #12
    89f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89f4:	bl	8310 <memcpy>
			p += avail;
			rx_available -= avail;
    89f8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    89fc:	uxtb	r3, r4
			rx_queue_transfer(i);
    89fe:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    8a00:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    8a02:	add	sl, r6
			rx_available -= avail;
    8a04:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    8a08:	ldr	r2, [pc, #32]	; (8a2c <usb_serial_read+0xcc>)
    8a0a:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    8a0c:	bl	8520 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8a10:	cmp	r9, r7
    8a12:	bls.n	8a1c <usb_serial_read+0xbc>
    8a14:	ldr	r3, [pc, #24]	; (8a30 <usb_serial_read+0xd0>)
    8a16:	ldrb	r3, [r3, #0]
    8a18:	cmp	r4, r3
    8a1a:	bne.n	898a <usb_serial_read+0x2a>
    8a1c:	mov	r0, r7
    8a1e:	b.n	89e6 <usb_serial_read+0x86>
    8a20:	mov	r0, r1
    8a22:	b.n	89e6 <usb_serial_read+0x86>
    8a24:	movs	r0, #0
    8a26:	b.n	89e6 <usb_serial_read+0x86>
    8a28:	.word	0xe000e18c
    8a2c:	.word	0x20004920
    8a30:	.word	0x20004944
    8a34:	.word	0x20004804
    8a38:	.word	0x20004924
    8a3c:	.word	0x20004930
    8a40:	.word	0x20200000
    8a44:	.word	0xe000e10c
    8a48:	.word	0x20004940

00008a4c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a4c:	ldr	r3, [pc, #44]	; (8a7c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8a4e:	ldr	r2, [pc, #48]	; (8a80 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a50:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8a52:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a54:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8a56:	cmp	r3, r2
    8a58:	beq.n	8a76 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8a5a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8a5c:	ldr	r0, [pc, #36]	; (8a84 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a5e:	ldr	r2, [pc, #40]	; (8a88 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8a60:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a62:	ldr	r1, [pc, #40]	; (8a8c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8a64:	it	cs
    8a66:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8a68:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a6a:	ldrh.w	r1, [r1, r3, lsl #1]
    8a6e:	add.w	r3, r2, r3, lsl #9
    8a72:	ldrb	r0, [r3, r1]
    8a74:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8a76:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    8a7a:	bx	lr
    8a7c:	.word	0x20004920
    8a80:	.word	0x20004944
    8a84:	.word	0x20004924
    8a88:	.word	0x20200000
    8a8c:	.word	0x20004804

00008a90 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8a90:	ldr	r3, [pc, #4]	; (8a98 <usb_serial_available+0x8>)
    8a92:	ldr	r0, [r3, #0]
}
    8a94:	bx	lr
    8a96:	nop
    8a98:	.word	0x20004940

00008a9c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    8a9c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8aa0:	ldr	r6, [pc, #84]	; (8af8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    8aa2:	ldr	r5, [pc, #88]	; (8afc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8aa4:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    8aa6:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8aa8:	uxtb	r4, r4
	while (tail != rx_head) {
    8aaa:	cmp	r4, r3
    8aac:	beq.n	8af2 <usb_serial_flush_input+0x56>
    8aae:	ldr.w	r9, [pc, #84]	; 8b04 <usb_serial_flush_input+0x68>
    8ab2:	ldr.w	fp, [pc, #84]	; 8b08 <usb_serial_flush_input+0x6c>
    8ab6:	ldr.w	r8, [pc, #84]	; 8b0c <usb_serial_flush_input+0x70>
    8aba:	ldr	r7, [pc, #68]	; (8b00 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    8abc:	adds	r4, #1
    8abe:	cmp	r4, #8
    8ac0:	uxtb.w	sl, r4
    8ac4:	bls.n	8aca <usb_serial_flush_input+0x2e>
    8ac6:	movs	r4, #0
    8ac8:	mov	sl, r4
		uint32_t i = rx_list[tail];
    8aca:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8ace:	ldr.w	r2, [fp]
    8ad2:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    8ad6:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    8ad8:	ldrh.w	r1, [r7, r1, lsl #1]
    8adc:	subs	r3, r3, r1
    8ade:	subs	r3, r2, r3
    8ae0:	str.w	r3, [fp]
		rx_queue_transfer(i);
    8ae4:	bl	8520 <rx_queue_transfer>
		rx_tail = tail;
    8ae8:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    8aec:	ldrb	r3, [r5, #0]
    8aee:	cmp	r4, r3
    8af0:	bne.n	8abc <usb_serial_flush_input+0x20>
    8af2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8af6:	nop
    8af8:	.word	0x20004920
    8afc:	.word	0x20004944
    8b00:	.word	0x20004804
    8b04:	.word	0x20004924
    8b08:	.word	0x20004940
    8b0c:	.word	0x20004930

00008b10 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8b10:	push	{lr}
    8b12:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    8b14:	movs	r1, #1
    8b16:	add.w	r0, sp, #7
    8b1a:	bl	8960 <usb_serial_read>
    8b1e:	cbz	r0, 8b2a <usb_serial_getchar+0x1a>
    8b20:	ldrb.w	r0, [sp, #7]
	return -1;
}
    8b24:	add	sp, #12
    8b26:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    8b2a:	mov.w	r0, #4294967295
    8b2e:	b.n	8b24 <usb_serial_getchar+0x14>

00008b30 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b30:	ldr	r3, [pc, #36]	; (8b58 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b32:	push	{lr}
    8b34:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b36:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b38:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b3c:	cbnz	r3, 8b48 <usb_serial_putchar+0x18>
    8b3e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8b42:	add	sp, #12
    8b44:	ldr.w	pc, [sp], #4
    8b48:	movs	r1, #1
    8b4a:	add.w	r0, sp, #7
    8b4e:	bl	86d8 <usb_serial_write.part.1>
    8b52:	add	sp, #12
    8b54:	ldr.w	pc, [sp], #4
    8b58:	.word	0x20004a18

00008b5c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b5c:	ldr	r3, [pc, #16]	; (8b70 <usb_serial_write+0x14>)
    8b5e:	ldrb	r3, [r3, #0]
    8b60:	and.w	r2, r3, #255	; 0xff
    8b64:	cbz	r3, 8b6a <usb_serial_write+0xe>
    8b66:	b.w	86d8 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8b6a:	mov	r0, r2
    8b6c:	bx	lr
    8b6e:	nop
    8b70:	.word	0x20004a18

00008b74 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8b74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8b78:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8b7a:	ldr.w	r8, [pc, #64]	; 8bbc <usb_serial_write_buffer_free+0x48>
    8b7e:	movs	r3, #1
    8b80:	ldr	r5, [pc, #48]	; (8bb4 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8b82:	mov	r7, r4
    8b84:	ldr	r6, [pc, #48]	; (8bb8 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    8b86:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8b8a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8b8c:	mov	r0, r5
    8b8e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8b90:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8b92:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8b96:	beq.n	8ba4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8b98:	bl	9828 <usb_transfer_status>
    8b9c:	lsls	r3, r0, #24
    8b9e:	it	pl
    8ba0:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8ba4:	cmp	r4, #4
    8ba6:	bne.n	8b8a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8ba8:	movs	r3, #0
	return sum;
}
    8baa:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8bac:	strb.w	r3, [r8]
	return sum;
}
    8bb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bb4:	.word	0x20004960
    8bb8:	.word	0x20004817
    8bbc:	.word	0x20004816

00008bc0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8bc0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8bc4:	ldr	r3, [pc, #124]	; (8c44 <usb_serial_flush_output+0x84>)
    8bc6:	ldrb	r3, [r3, #0]
    8bc8:	cbz	r3, 8bd0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    8bca:	ldr	r5, [pc, #124]	; (8c48 <usb_serial_flush_output+0x88>)
    8bcc:	ldrh	r2, [r5, #0]
    8bce:	cbnz	r2, 8bd4 <usb_serial_flush_output+0x14>
    8bd0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bd4:	ldr.w	r8, [pc, #132]	; 8c5c <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8bd8:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bdc:	ldr	r6, [pc, #108]	; (8c4c <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8bde:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8be2:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8be6:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8be8:	ldr	r4, [pc, #100]	; (8c50 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bea:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bec:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8bf0:	ldr	r7, [pc, #96]	; (8c54 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8bf2:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bf6:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8bf8:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bfc:	mov	r1, r4
    8bfe:	bl	97ac <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8c02:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8c06:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm("dsb");
    8c0a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8c0e:	ldr	r3, [pc, #72]	; (8c58 <usb_serial_flush_output+0x98>)
    8c10:	str	r1, [r3, #0]
		location += 32;
    8c12:	adds	r1, #32
	} while (location < end_addr);
    8c14:	cmp	r2, r1
    8c16:	bhi.n	8c10 <usb_serial_flush_output+0x50>
	asm("dsb");
    8c18:	dsb	sy
	asm("isb");
    8c1c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8c20:	movs	r0, #3
    8c22:	mov	r1, r6
    8c24:	bl	97dc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8c28:	ldrb.w	r3, [r8]
    8c2c:	ldr	r2, [pc, #44]	; (8c5c <usb_serial_flush_output+0x9c>)
    8c2e:	adds	r3, #1
    8c30:	uxtb	r3, r3
    8c32:	cmp	r3, #3
    8c34:	it	hi
    8c36:	movhi	r3, #0
    8c38:	strb	r3, [r2, #0]
	tx_available = 0;
    8c3a:	movs	r3, #0
    8c3c:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    8c3e:	strb	r3, [r7, #0]
    8c40:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8c44:	.word	0x20004a18
    8c48:	.word	0x20004946
    8c4c:	.word	0x20004960
    8c50:	.word	0x20201000
    8c54:	.word	0x20004816
    8c58:	.word	0xe000ef70
    8c5c:	.word	0x20004817

00008c60 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8c60:	ldr	r2, [pc, #600]	; (8ebc <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8c62:	ldr	r3, [pc, #604]	; (8ec0 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8c64:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    8c66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    8c6a:	ldr	r4, [pc, #600]	; (8ec4 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8c6c:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8c70:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    8c72:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8c74:	bls.n	8cb0 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    8c76:	ldr	r3, [pc, #592]	; (8ec8 <set_arm_clock+0x268>)
    8c78:	cmp	r0, r3
    8c7a:	bls.w	8ea8 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8c7e:	ldr	r3, [pc, #588]	; (8ecc <set_arm_clock+0x26c>)
    8c80:	movw	r5, #1575	; 0x627
    8c84:	ldr	r7, [pc, #584]	; (8ed0 <set_arm_clock+0x270>)
    8c86:	add	r3, r0
    8c88:	ldr	r4, [pc, #584]	; (8ed4 <set_arm_clock+0x274>)
    8c8a:	lsrs	r2, r3, #8
    8c8c:	umull	r3, r2, r7, r2
    8c90:	lsrs	r3, r2, #7
    8c92:	add.w	r3, r3, r3, lsl #2
    8c96:	add.w	r2, r3, r3, lsl #2
    8c9a:	addw	r3, r2, #1250	; 0x4e2
    8c9e:	cmp	r3, r5
    8ca0:	it	cs
    8ca2:	movcs	r3, r5
    8ca4:	sub.w	r3, r3, #800	; 0x320
    8ca8:	umull	r3, r5, r4, r3
    8cac:	lsrs	r5, r5, #3
    8cae:	b.n	8cba <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    8cb0:	ldr	r5, [pc, #548]	; (8ed8 <set_arm_clock+0x278>)
    8cb2:	cmp	r0, r5
    8cb4:	ite	ls
    8cb6:	movls	r5, #6
    8cb8:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8cba:	ldr	r2, [pc, #516]	; (8ec0 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8cbc:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8cc0:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8cc4:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8cc6:	orr.w	r3, r3, #192	; 0xc0
    8cca:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8cce:	bcs.n	8ce6 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8cd0:	ldr	r3, [pc, #496]	; (8ec4 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8cd2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8cd6:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8cd8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8cda:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8cdc:	ldr	r3, [r2, #0]
    8cde:	cmp	r3, #0
    8ce0:	bge.n	8cdc <set_arm_clock+0x7c>
    8ce2:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    8ce6:	ands.w	r3, lr, #33554432	; 0x2000000
    8cea:	bne.n	8d50 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    8cec:	ldr	r4, [pc, #492]	; (8edc <set_arm_clock+0x27c>)
    8cee:	ldr	r2, [pc, #496]	; (8ee0 <set_arm_clock+0x280>)
    8cf0:	ldr.w	ip, [r4, #16]
    8cf4:	mov	r4, r2
    8cf6:	and.w	r2, ip, r2
    8cfa:	cmp	r2, r4
    8cfc:	itet	eq
    8cfe:	moveq.w	r3, #402653184	; 0x18000000
    8d02:	movne.w	r2, #4096	; 0x1000
    8d06:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8d08:	eor.w	r4, lr, r3
    8d0c:	tst.w	r4, #939524096	; 0x38000000
    8d10:	beq.n	8d24 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8d12:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8d16:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    8d1a:	ldr	r4, [pc, #420]	; (8ec0 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8d1c:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    8d20:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    8d24:	eor.w	r3, r1, r2
    8d28:	tst.w	r3, #12288	; 0x3000
    8d2c:	beq.n	8d40 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8d2e:	ldr	r3, [pc, #400]	; (8ec0 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8d30:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8d34:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8d36:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8d38:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8d3a:	ldr	r3, [r2, #72]	; 0x48
    8d3c:	lsls	r4, r3, #28
    8d3e:	bmi.n	8d3a <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8d40:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8d44:	ldr	r2, [pc, #376]	; (8ec0 <set_arm_clock+0x260>)
    8d46:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8d4a:	ldr	r3, [r2, #72]	; 0x48
    8d4c:	lsls	r1, r3, #26
    8d4e:	bmi.n	8d4a <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8d50:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8d52:	ldr	r4, [pc, #400]	; (8ee4 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8d54:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8d56:	mul.w	r3, r1, r2
    8d5a:	mul.w	r3, r0, r3
    8d5e:	cmp	r3, r4
    8d60:	bhi.n	8d76 <set_arm_clock+0x116>
		if (div_arm < 8) {
    8d62:	cmp	r2, #7
    8d64:	bhi.w	8e92 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    8d68:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8d6a:	mul.w	r3, r1, r2
    8d6e:	mul.w	r3, r0, r3
    8d72:	cmp	r3, r4
    8d74:	bls.n	8d62 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8d76:	ldr	r0, [pc, #368]	; (8ee8 <set_arm_clock+0x288>)
    8d78:	ldr	r4, [pc, #368]	; (8eec <set_arm_clock+0x28c>)
    8d7a:	add	r0, r3
    8d7c:	umull	r0, r3, r4, r0
    8d80:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    8d82:	cmp	r3, #108	; 0x6c
    8d84:	bhi.w	8e9e <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    8d88:	cmp	r3, #53	; 0x35
    8d8a:	bhi.w	8eac <set_arm_clock+0x24c>
    8d8e:	ldr.w	r8, [pc, #392]	; 8f18 <set_arm_clock+0x2b8>
    8d92:	movs	r3, #54	; 0x36
    8d94:	ldr	r0, [pc, #344]	; (8ef0 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8d96:	ldr.w	ip, [pc, #324]	; 8edc <set_arm_clock+0x27c>
    8d9a:	ldr	r4, [pc, #344]	; (8ef4 <set_arm_clock+0x294>)
    8d9c:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8da0:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8da4:	and.w	r4, r9, r4
    8da8:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8daa:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8dae:	beq.n	8dc8 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8db0:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8db4:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8db8:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8dba:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8dbe:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8dc2:	ldr	r3, [r4, #0]
    8dc4:	cmp	r3, #0
    8dc6:	bge.n	8dc2 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8dc8:	ldr.w	ip, [pc, #244]	; 8ec0 <set_arm_clock+0x260>
    8dcc:	subs	r2, #1
    8dce:	ldr.w	r3, [ip, #16]
    8dd2:	and.w	r3, r3, #7
    8dd6:	cmp	r3, r2
    8dd8:	beq.n	8dea <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8dda:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8dde:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8de0:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8de4:	ldr	r3, [r4, #72]	; 0x48
    8de6:	lsls	r3, r3, #15
    8de8:	bmi.n	8de4 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8dea:	subs	r1, #1
    8dec:	lsls	r1, r1, #10
    8dee:	eor.w	r3, lr, r1
    8df2:	tst.w	r3, #7168	; 0x1c00
    8df6:	beq.n	8e12 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    8df8:	ldr	r3, [pc, #196]	; (8ec0 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8dfa:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8dfe:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8e02:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8e04:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    8e08:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8e0c:	ldr	r3, [r2, #72]	; 0x48
    8e0e:	lsls	r1, r3, #30
    8e10:	bmi.n	8e0c <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8e12:	ldr	r3, [pc, #228]	; (8ef8 <set_arm_clock+0x298>)
    8e14:	ldr	r1, [pc, #228]	; (8efc <set_arm_clock+0x29c>)
    8e16:	add	r3, r0
    8e18:	lsrs	r3, r3, #7
    8e1a:	umull	r3, r1, r1, r3
    8e1e:	lsrs	r1, r1, #12
    8e20:	cmp	r1, #4
    8e22:	it	cs
    8e24:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    8e26:	subs	r3, r1, #1
    8e28:	lsls	r3, r3, #8
    8e2a:	eor.w	r2, lr, r3
    8e2e:	tst.w	r2, #768	; 0x300
    8e32:	beq.n	8e44 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8e34:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8e38:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8e3c:	ldr	r2, [pc, #128]	; (8ec0 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8e3e:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8e42:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8e44:	ldr	r3, [pc, #120]	; (8ec0 <set_arm_clock+0x260>)
    8e46:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8e48:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8e4a:	bic.w	r4, r4, #33554432	; 0x2000000
    8e4e:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8e50:	ldr	r3, [r2, #72]	; 0x48
    8e52:	lsls	r3, r3, #26
    8e54:	bmi.n	8e50 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e56:	ldr	r3, [pc, #168]	; (8f00 <set_arm_clock+0x2a0>)
    8e58:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8e5c:	ldr	r4, [pc, #164]	; (8f04 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8e5e:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e60:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8e64:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e66:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8e6a:	ldr	r4, [pc, #156]	; (8f08 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e6c:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8e70:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e74:	ldr	r2, [pc, #148]	; (8f0c <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8e76:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8e78:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8e7a:	bcs.n	8e8e <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8e7c:	ldr	r3, [pc, #68]	; (8ec4 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8e7e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8e82:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8e84:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8e86:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8e88:	ldr	r3, [r2, #0]
    8e8a:	cmp	r3, #0
    8e8c:	bge.n	8e88 <set_arm_clock+0x228>
	}

	return frequency;
}
    8e8e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    8e92:	cmp	r1, #4
    8e94:	bhi.w	8d76 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    8e98:	adds	r1, #1
				div_arm = 1;
    8e9a:	movs	r2, #1
    8e9c:	b.n	8d56 <set_arm_clock+0xf6>
    8e9e:	ldr.w	r8, [pc, #124]	; 8f1c <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    8ea2:	movs	r3, #108	; 0x6c
    8ea4:	ldr	r0, [pc, #104]	; (8f10 <set_arm_clock+0x2b0>)
    8ea6:	b.n	8d96 <set_arm_clock+0x136>
    8ea8:	movs	r5, #18
    8eaa:	b.n	8cba <set_arm_clock+0x5a>
    8eac:	ldr	r0, [pc, #100]	; (8f14 <set_arm_clock+0x2b4>)
    8eae:	ldr.w	r8, [pc, #112]	; 8f20 <set_arm_clock+0x2c0>
    8eb2:	mul.w	r0, r0, r3
    8eb6:	orr.w	r8, r3, r8
    8eba:	b.n	8d96 <set_arm_clock+0x136>
    8ebc:	.word	0x1f78a400
    8ec0:	.word	0x400fc000
    8ec4:	.word	0x40080000
    8ec8:	.word	0x23c34600
    8ecc:	.word	0xdc3cba00
    8ed0:	.word	0x004cb223
    8ed4:	.word	0x51eb851f
    8ed8:	.word	0x016e3600
    8edc:	.word	0x400d8000
    8ee0:	.word	0x80003040
    8ee4:	.word	0x269fb1ff
    8ee8:	.word	0x005b8d80
    8eec:	.word	0x165e9f81
    8ef0:	.word	0x269fb200
    8ef4:	.word	0x8001307f
    8ef8:	.word	0x08f0d17f
    8efc:	.word	0x00e5109f
    8f00:	.word	0x431bde83
    8f04:	.word	0x200008b8
    8f08:	.word	0x200008b4
    8f0c:	.word	0x20004a20
    8f10:	.word	0x4d3f6400
    8f14:	.word	0x00b71b00
    8f18:	.word	0x80002036
    8f1c:	.word	0x8000206c
    8f20:	.word	0x80002000

00008f24 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8f24:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8f26:	push	{r4, r5}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8f28:	cbz	r3, 8f32 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8f2a:	ldr	r3, [r2, #4]
    8f2c:	orr.w	r3, r3, #32768	; 0x8000
    8f30:	str	r3, [r2, #4]
	}
	__disable_irq();
    8f32:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8f34:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8f36:	cbz	r4, 8f60 <schedule_transfer+0x3c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8f38:	ldr	r3, [pc, #64]	; (8f7c <schedule_transfer+0x58>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    8f3a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8f3c:	ldr.w	r4, [r3, #432]	; 0x1b0
    8f40:	tst	r4, r1
    8f42:	bne.n	8f74 <schedule_transfer+0x50>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8f44:	ldr.w	r4, [r3, #320]	; 0x140
    8f48:	orr.w	r4, r4, #16384	; 0x4000
    8f4c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8f50:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW));
    8f54:	ldr.w	r4, [r3, #320]	; 0x140
    8f58:	lsls	r4, r4, #17
    8f5a:	bpl.n	8f44 <schedule_transfer+0x20>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8f5c:	tst	r1, r5
    8f5e:	bne.n	8f74 <schedule_transfer+0x50>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    8f60:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    8f62:	ldr	r4, [pc, #24]	; (8f7c <schedule_transfer+0x58>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8f64:	str	r2, [r0, #8]
	endpoint->status = 0;
    8f66:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8f68:	ldr.w	r3, [r4, #432]	; 0x1b0
    8f6c:	orrs	r1, r3
    8f6e:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8f72:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8f74:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8f76:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8f78:	pop	{r4, r5}
    8f7a:	bx	lr
    8f7c:	.word	0x402e0000

00008f80 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8f80:	push	{r4, r5, r6, lr}
    8f82:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8f84:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    8f86:	cbz	r0, 8fae <run_callbacks+0x2e>
    8f88:	mov	r2, r0
    8f8a:	movs	r4, #0
    8f8c:	b.n	8f96 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8f8e:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8f90:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8f92:	cmp	r2, #1
    8f94:	beq.n	8fb0 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    8f96:	ldr	r3, [r2, #4]
    8f98:	ands.w	r3, r3, #128	; 0x80
    8f9c:	beq.n	8f8e <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8f9e:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8fa0:	cbz	r4, 8fae <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8fa2:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    8fa4:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    8fa6:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8fa8:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    8faa:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8fac:	bne.n	8fa2 <run_callbacks+0x22>
    8fae:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8fb0:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8fb2:	str	r3, [r6, #52]	; 0x34
			break;
    8fb4:	b.n	8fa0 <run_callbacks+0x20>
    8fb6:	nop

00008fb8 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8fb8:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8fba:	cbnz	r1, 8ffa <endpoint0_transmit.constprop.1+0x42>
    8fbc:	ldr	r4, [pc, #136]	; (9048 <endpoint0_transmit.constprop.1+0x90>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fbe:	ldr	r1, [pc, #140]	; (904c <endpoint0_transmit.constprop.1+0x94>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8fc0:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    8fc2:	ldr	r3, [pc, #140]	; (9050 <endpoint0_transmit.constprop.1+0x98>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fc4:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fc6:	movs	r5, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8fc8:	str	r1, [r4, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fca:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8fcc:	mov	r2, r3
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fce:	str	r5, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8fd0:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    8fd2:	ldr.w	r4, [r3, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8fd6:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    8fd8:	orr.w	r4, r4, #65537	; 0x10001
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8fdc:	ldr	r5, [pc, #116]	; (9054 <endpoint0_transmit.constprop.1+0x9c>)
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    8fde:	str.w	r4, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8fe2:	ldr.w	r1, [r3, #432]	; 0x1b0
    8fe6:	orr.w	r1, r1, #1
    8fea:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8fee:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8ff0:	ldr.w	r3, [r2, #432]	; 0x1b0
    8ff4:	cmp	r3, #0
    8ff6:	bne.n	8ff0 <endpoint0_transmit.constprop.1+0x38>
}
    8ff8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ffa:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8ffc:	ldr	r3, [pc, #88]	; (9058 <endpoint0_transmit.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8ffe:	ldr	r5, [pc, #80]	; (9050 <endpoint0_transmit.constprop.1+0x98>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9000:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9002:	ldr	r4, [pc, #68]	; (9048 <endpoint0_transmit.constprop.1+0x90>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9004:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    9008:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    900a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    900c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    900e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    9012:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9014:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    9018:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    901a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    901e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9022:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    9026:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9028:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    902a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    902e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9032:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9036:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9038:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    903a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    903e:	ldr.w	r3, [r2, #432]	; 0x1b0
    9042:	cmp	r3, #0
    9044:	bne.n	903e <endpoint0_transmit.constprop.1+0x86>
    9046:	b.n	8fbe <endpoint0_transmit.constprop.1+0x6>
    9048:	.word	0x20006000
    904c:	.word	0x20005020
    9050:	.word	0x402e0000
    9054:	.word	0x200049f4
    9058:	.word	0x20005000

0000905c <isr>:
	//transfer_log_count = 0;
}


static void isr(void)
{
    905c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    9060:	ldr	r4, [pc, #696]	; (931c <isr+0x2c0>)
	//transfer_log_count = 0;
}


static void isr(void)
{
    9062:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    9064:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9068:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    906c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9070:	beq.n	9130 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    9072:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9076:	cmp	r3, #0
    9078:	beq.n	9126 <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    907a:	mov.w	fp, #65537	; 0x10001
    907e:	ldr.w	r9, [pc, #708]	; 9344 <isr+0x2e8>
    9082:	ldr	r6, [pc, #668]	; (9320 <isr+0x2c4>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9084:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9086:	mov	sl, fp
    9088:	ldr	r0, [r6, #40]	; 0x28
    908a:	ldr	r2, [r6, #44]	; 0x2c
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    908c:	str.w	r3, [r4, #428]	; 0x1ac
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9090:	ldr.w	r3, [r4, #320]	; 0x140
    9094:	orr.w	r3, r3, #8192	; 0x2000
    9098:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    909c:	ldr.w	r3, [r4, #320]	; 0x140
    90a0:	lsls	r7, r3, #18
    90a2:	bpl.n	9090 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    90a4:	ldr.w	r3, [r5, #320]	; 0x140
    90a8:	bic.w	r3, r3, #8192	; 0x2000
    90ac:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    90b0:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    90b4:	ldr.w	r3, [r4, #436]	; 0x1b4
    90b8:	ands.w	r3, r3, #65537	; 0x10001
    90bc:	bne.n	90b4 <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    90be:	uxth	r1, r0
    90c0:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    90c4:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    90c8:	cmp	r1, r7
    90ca:	bhi.w	9226 <isr+0x1ca>
    90ce:	cmp.w	r1, #1664	; 0x680
    90d2:	bcs.w	94ba <isr+0x45e>
    90d6:	cmp.w	r1, #258	; 0x102
    90da:	beq.w	93c0 <isr+0x364>
    90de:	bhi.w	92c2 <isr+0x266>
    90e2:	cmp	r1, #128	; 0x80
    90e4:	beq.w	93a6 <isr+0x34a>
    90e8:	cmp	r1, #130	; 0x82
    90ea:	bne.w	92b2 <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    90ee:	uxth	r2, r2
    90f0:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    90f4:	cmp	r1, #7
    90f6:	bhi.w	92b2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    90fa:	lsls	r1, r1, #2
    90fc:	ldr	r0, [pc, #548]	; (9324 <isr+0x2c8>)
		reply_buffer[0] = 0;
    90fe:	ldr	r7, [pc, #552]	; (9328 <isr+0x2cc>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9100:	add	r0, r1
    9102:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9104:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    9106:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    9108:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    910a:	bpl.w	9538 <isr+0x4dc>
    910e:	lsls	r2, r1, #15
    9110:	bpl.n	9116 <isr+0xba>
			reply_buffer[0] = 1;
    9112:	movs	r3, #1
    9114:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    9116:	movs	r1, #2
    9118:	ldr	r0, [pc, #524]	; (9328 <isr+0x2cc>)
    911a:	bl	8fb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    911e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9122:	cmp	r3, #0
    9124:	bne.n	9088 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    9126:	ldr	r2, [pc, #500]	; (931c <isr+0x2c0>)
    9128:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    912c:	cmp	r3, #0
    912e:	bne.n	91d2 <isr+0x176>
					}
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    9130:	tst.w	r8, #64	; 0x40
    9134:	beq.n	9168 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9136:	ldr	r3, [pc, #484]	; (931c <isr+0x2c0>)
    9138:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    913c:	mov	r2, r3
				}
			}
		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    913e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    9142:	ldr.w	r1, [r3, #444]	; 0x1bc
    9146:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    914a:	ldr.w	r4, [r2, #432]	; 0x1b0
    914e:	ldr	r3, [pc, #460]	; (931c <isr+0x2c0>)
    9150:	cmp	r4, #0
    9152:	bne.n	914a <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    9154:	mov.w	r2, #4294967295
    9158:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    915c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    9160:	bl	8854 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    9164:	ldr	r3, [pc, #452]	; (932c <isr+0x2d0>)
    9166:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    9168:	tst.w	r8, #16777216	; 0x1000000
    916c:	beq.n	9176 <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    916e:	ldr	r3, [pc, #448]	; (9330 <isr+0x2d4>)
    9170:	ldr	r3, [r3, #0]
    9172:	cbz	r3, 9176 <isr+0x11a>
    9174:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    9176:	tst.w	r8, #33554432	; 0x2000000
    917a:	beq.n	9184 <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    917c:	ldr	r3, [pc, #436]	; (9334 <isr+0x2d8>)
    917e:	ldr	r3, [r3, #0]
    9180:	cbz	r3, 9184 <isr+0x128>
    9182:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    9184:	tst.w	r8, #4
    9188:	beq.n	919c <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    918a:	ldr	r3, [pc, #400]	; (931c <isr+0x2c0>)
    918c:	ldr.w	r3, [r3, #388]	; 0x184
    9190:	ands.w	r3, r3, #512	; 0x200
    9194:	beq.n	9220 <isr+0x1c4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    9196:	ldr	r3, [pc, #416]	; (9338 <isr+0x2dc>)
    9198:	movs	r2, #1
    919a:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    919c:	ldr	r3, [pc, #380]	; (931c <isr+0x2c0>)
    919e:	ldr.w	r2, [r3, #328]	; 0x148
    91a2:	lsls	r2, r2, #24
    91a4:	bpl.n	91cc <isr+0x170>
    91a6:	tst.w	r8, #128	; 0x80
    91aa:	beq.n	91cc <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    91ac:	ldr	r1, [pc, #396]	; (933c <isr+0x2e0>)
    91ae:	ldrb	r2, [r1, #0]
    91b0:	cbz	r2, 91cc <isr+0x170>
			if (--usb_reboot_timer == 0) {
    91b2:	subs	r2, #1
    91b4:	uxtb	r2, r2
    91b6:	strb	r2, [r1, #0]
    91b8:	cbnz	r2, 91cc <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    91ba:	ldr	r1, [pc, #388]	; (9340 <isr+0x2e4>)
    91bc:	ldrb	r2, [r1, #0]
    91be:	and.w	r2, r2, #247	; 0xf7
    91c2:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    91c4:	cmp	r2, #0
    91c6:	beq.w	9644 <isr+0x5e8>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    91ca:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    91cc:	add	sp, #12
    91ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    91d2:	ldr	r1, [pc, #368]	; (9344 <isr+0x2e8>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    91d4:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    91d8:	ldr	r0, [r1, #0]
    91da:	tst	r3, r0
    91dc:	bne.w	95c4 <isr+0x568>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    91e0:	ldr	r2, [pc, #328]	; (932c <isr+0x2d0>)
    91e2:	ldr	r4, [r2, #0]
			if (completestatus) {
    91e4:	ands	r4, r3
    91e6:	beq.n	9130 <isr+0xd4>
    91e8:	movs	r5, #2
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
    91ea:	movs	r7, #1
    91ec:	ldr	r6, [pc, #344]	; (9348 <isr+0x2ec>)
    91ee:	lsl.w	r3, r7, r5
    91f2:	tst	r3, r4
    91f4:	bne.n	9216 <isr+0x1ba>
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    91f6:	add.w	r3, r5, #16
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
    91fa:	adds	r5, #1
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
    91fc:	lsl.w	r3, r7, r3
    9200:	tst	r3, r4
    9202:	bne.w	9616 <isr+0x5ba>
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
			if (completestatus) {
				int i;   // TODO: optimize with __builtin_ctz()
				for (i=2; i <= NUM_ENDPOINTS; i++) {
    9206:	cmp	r5, #6
    9208:	add.w	r6, r6, #128	; 0x80
    920c:	beq.n	9130 <isr+0xd4>
					if (completestatus & (1 << i)) { // receive
    920e:	lsl.w	r3, r7, r5
    9212:	tst	r3, r4
    9214:	beq.n	91f6 <isr+0x19a>
						run_callbacks(endpoint_queue_head + i * 2);
    9216:	sub.w	r0, r6, #64	; 0x40
    921a:	bl	8f80 <run_callbacks>
    921e:	b.n	91f6 <isr+0x19a>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    9220:	ldr	r2, [pc, #276]	; (9338 <isr+0x2dc>)
    9222:	strb	r3, [r2, #0]
    9224:	b.n	919c <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9226:	movw	r7, #8225	; 0x2021
    922a:	cmp	r1, r7
    922c:	beq.n	92aa <isr+0x24e>
    922e:	bhi.w	9358 <isr+0x2fc>
    9232:	cmp.w	r1, #2176	; 0x880
    9236:	beq.w	949e <isr+0x442>
    923a:	cmp.w	r1, #2304	; 0x900
    923e:	bne.n	92b2 <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    9240:	ubfx	r0, r0, #16, #8
    9244:	ldr	r1, [pc, #260]	; (934c <isr+0x2f0>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9246:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    924a:	ldr	r7, [pc, #260]	; (9350 <isr+0x2f4>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    924c:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    924e:	mov.w	r1, #13369548	; 0xcc00cc
    9252:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9254:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9258:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    925c:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    9260:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    9264:	bl	8858 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9268:	ldr	r2, [pc, #232]	; (9354 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    926a:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    926c:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    926e:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9270:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9272:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9274:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9276:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    927a:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    927c:	orr.w	r1, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9280:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9282:	str.w	r1, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9286:	ldr.w	r2, [r5, #432]	; 0x1b0
    928a:	orr.w	r2, r2, #65536	; 0x10000
    928e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9292:	ldr	r2, [pc, #176]	; (9344 <isr+0x2e8>)
    9294:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    9296:	ldr.w	r3, [r4, #432]	; 0x1b0
    929a:	cmp	r3, #0
    929c:	bne.n	9296 <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    929e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    92a2:	cmp	r3, #0
    92a4:	bne.w	9088 <isr+0x2c>
    92a8:	b.n	9126 <isr+0xca>
		usb_cdc_line_rtsdtr = setup.wValue;
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    92aa:	lsrs	r1, r2, #16
    92ac:	cmp	r1, #7
    92ae:	beq.w	9540 <isr+0x4e4>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    92b2:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    92b6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    92ba:	cmp	r3, #0
    92bc:	bne.w	9088 <isr+0x2c>
    92c0:	b.n	9126 <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    92c2:	movw	r7, #770	; 0x302
    92c6:	cmp	r1, r7
    92c8:	beq.w	9438 <isr+0x3dc>
    92cc:	cmp.w	r1, #1280	; 0x500
    92d0:	bne.n	92b2 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    92d2:	ldr	r2, [pc, #128]	; (9354 <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92d4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    92d6:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    92d8:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92da:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    92dc:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    92de:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    92e2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    92e4:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    92e8:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    92ea:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    92ee:	ldr.w	r3, [r5, #432]	; 0x1b0
    92f2:	orr.w	r3, r3, #65536	; 0x10000
    92f6:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    92fa:	ldr.w	r3, [r4, #432]	; 0x1b0
    92fe:	cmp	r3, #0
    9300:	bne.n	92fa <isr+0x29e>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9302:	lsrs	r3, r0, #16
    9304:	lsls	r3, r3, #25
    9306:	orr.w	r3, r3, #16777216	; 0x1000000
    930a:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    930e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9312:	cmp	r3, #0
    9314:	bne.w	9088 <isr+0x2c>
    9318:	b.n	9126 <isr+0xca>
    931a:	nop
    931c:	.word	0x402e0000
    9320:	.word	0x20006000
    9324:	.word	0x402e01c0
    9328:	.word	0x20004a08
    932c:	.word	0x200049e4
    9330:	.word	0x200049e0
    9334:	.word	0x200049ec
    9338:	.word	0x200049f0
    933c:	.word	0x200049f8
    9340:	.word	0x200049e8
    9344:	.word	0x200049f4
    9348:	.word	0x20006140
    934c:	.word	0x20004a18
    9350:	.word	0x00cc0002
    9354:	.word	0x20005020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9358:	movw	r3, #8737	; 0x2221
    935c:	cmp	r1, r3
    935e:	beq.n	9426 <isr+0x3ca>
    9360:	movw	r3, #8993	; 0x2321
    9364:	cmp	r1, r3
    9366:	bne.n	92b2 <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9368:	ldr	r3, [pc, #744]	; (9654 <isr+0x5f8>)
    936a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    936c:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    936e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9370:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9372:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9374:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9378:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    937a:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    937e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9380:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9382:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9386:	ldr.w	r3, [r4, #432]	; 0x1b0
    938a:	orr.w	r3, r3, #65536	; 0x10000
    938e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9392:	ldr.w	r3, [r4, #432]	; 0x1b0
    9396:	cmp	r3, #0
    9398:	bne.n	9392 <isr+0x336>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    939a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    939e:	cmp	r3, #0
    93a0:	bne.w	9088 <isr+0x2c>
    93a4:	b.n	9126 <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    93a6:	ldr	r2, [pc, #688]	; (9658 <isr+0x5fc>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    93a8:	movs	r1, #2
    93aa:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    93ac:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    93ae:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    93b0:	bl	8fb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    93b4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    93b8:	cmp	r3, #0
    93ba:	bne.w	9088 <isr+0x2c>
    93be:	b.n	9126 <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    93c0:	uxth	r2, r2
    93c2:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    93c6:	cmp	r3, #7
    93c8:	bhi.w	92b2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    93cc:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    93d0:	mov.w	r3, r3, lsl #2
    93d4:	ldr	r2, [pc, #644]	; (965c <isr+0x600>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    93d6:	mov.w	r1, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    93da:	add	r2, r3
    93dc:	ldr	r3, [r2, #0]
    93de:	ite	ne
    93e0:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    93e4:	biceq.w	r3, r3, #1
    93e8:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    93ea:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    93ec:	ldr	r3, [pc, #612]	; (9654 <isr+0x5f8>)
    93ee:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    93f0:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    93f2:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    93f4:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    93f8:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    93fa:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    93fe:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9400:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9402:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9406:	ldr.w	r3, [r4, #432]	; 0x1b0
    940a:	orr.w	r3, r3, #65536	; 0x10000
    940e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9412:	ldr.w	r3, [r4, #432]	; 0x1b0
    9416:	cmp	r3, #0
    9418:	bne.n	9412 <isr+0x3b6>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    941a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    941e:	cmp	r3, #0
    9420:	bne.w	9088 <isr+0x2c>
    9424:	b.n	9126 <isr+0xca>
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9426:	ldr	r3, [pc, #568]	; (9660 <isr+0x604>)
		usb_cdc_line_rtsdtr = setup.wValue;
    9428:	ubfx	r0, r0, #16, #8
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    942c:	ldr	r2, [pc, #564]	; (9664 <isr+0x608>)
    942e:	ldr	r1, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9430:	ldr	r3, [pc, #564]	; (9668 <isr+0x60c>)
			}
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9432:	str	r1, [r2, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    9434:	strb	r0, [r3, #0]
    9436:	b.n	9368 <isr+0x30c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9438:	uxth	r2, r2
    943a:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    943e:	cmp	r3, #7
    9440:	bhi.w	92b2 <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9444:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9448:	mov.w	r3, r3, lsl #2
    944c:	ldr	r2, [pc, #524]	; (965c <isr+0x600>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    944e:	mov.w	r1, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9452:	add	r2, r3
    9454:	ldr	r3, [r2, #0]
    9456:	ite	ne
    9458:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    945c:	orreq.w	r3, r3, #1
    9460:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9462:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9464:	ldr	r3, [pc, #492]	; (9654 <isr+0x5f8>)
    9466:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9468:	movs	r1, #0
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    946a:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    946c:	ldr.w	r2, [r4, #444]	; 0x1bc
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9470:	str	r3, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    9472:	orr.w	r2, r2, #65537	; 0x10001
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9476:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9478:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    947a:	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    947e:	ldr.w	r3, [r4, #432]	; 0x1b0
    9482:	orr.w	r3, r3, #65536	; 0x10000
    9486:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    948a:	ldr.w	r3, [r4, #432]	; 0x1b0
    948e:	cmp	r3, #0
    9490:	bne.n	948a <isr+0x42e>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9492:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9496:	cmp	r3, #0
    9498:	bne.w	9088 <isr+0x2c>
    949c:	b.n	9126 <isr+0xca>
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    949e:	ldr	r2, [pc, #460]	; (966c <isr+0x610>)
		endpoint0_transmit(reply_buffer, 1, 0);
    94a0:	movs	r1, #1
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    94a2:	ldr	r3, [pc, #436]	; (9658 <isr+0x5fc>)
    94a4:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    94a6:	mov	r0, r3
		usb_midi_configure();
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    94a8:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    94aa:	bl	8fb8 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    94ae:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    94b2:	cmp	r3, #0
    94b4:	bne.w	9088 <isr+0x2c>
    94b8:	b.n	9126 <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    94ba:	ldr	r3, [pc, #436]	; (9670 <isr+0x614>)
    94bc:	ldr	r1, [r3, #4]
    94be:	cmp	r1, #0
    94c0:	beq.w	92b2 <isr+0x256>
    94c4:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    94c6:	uxth.w	lr, r2
    94ca:	b.n	94d6 <isr+0x47a>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    94cc:	adds	r3, #12
    94ce:	ldr	r1, [r3, #4]
    94d0:	cmp	r1, #0
    94d2:	beq.w	92b2 <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    94d6:	ldrh	r7, [r3, #0]
    94d8:	cmp	r7, r0
    94da:	bne.n	94cc <isr+0x470>
    94dc:	ldrh	r7, [r3, #2]
    94de:	cmp	r7, lr
    94e0:	bne.n	94cc <isr+0x470>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    94e2:	lsrs	r7, r0, #8
    94e4:	cmp	r7, #3
    94e6:	beq.w	96c2 <isr+0x666>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    94ea:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    94ec:	lsrs	r2, r2, #16
    94ee:	cmp	r3, r2
    94f0:	it	cs
    94f2:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    94f4:	cmp.w	r0, #512	; 0x200
    94f8:	beq.w	96a4 <isr+0x648>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    94fc:	cmp.w	r0, #1792	; 0x700
    9500:	beq.w	961e <isr+0x5c2>
    9504:	ldr	r7, [pc, #364]	; (9674 <isr+0x618>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    9506:	mov	r2, r3
    9508:	str	r3, [sp, #4]
    950a:	mov	r0, r7
    950c:	bl	8310 <memcpy>
    9510:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9512:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9516:	add	r7, r3
	asm("dsb");
    9518:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    951c:	ldr	r1, [pc, #344]	; (9678 <isr+0x61c>)
    951e:	str	r2, [r1, #0]
		location += 32;
    9520:	adds	r2, #32
	} while (location < end_addr);
    9522:	cmp	r7, r2
    9524:	bhi.n	951c <isr+0x4c0>
	asm("dsb");
    9526:	dsb	sy
	asm("isb");
    952a:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    952e:	ldr	r0, [pc, #324]	; (9674 <isr+0x618>)
    9530:	mov	r1, r3
    9532:	bl	8fb8 <endpoint0_transmit.constprop.1>
    9536:	b.n	911e <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9538:	lsls	r3, r1, #31
    953a:	bpl.w	9116 <isr+0xba>
    953e:	b.n	9112 <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9540:	ldr	r7, [pc, #312]	; (967c <isr+0x620>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9542:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    9546:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9548:	ldr	r1, [pc, #308]	; (9680 <isr+0x624>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    954a:	ldr	r3, [pc, #312]	; (9684 <isr+0x628>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    954c:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    954e:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9552:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9554:	ldr.w	r0, [r5, #432]	; 0x1b0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    9558:	ldr	r1, [pc, #300]	; (9688 <isr+0x62c>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    955a:	str	r2, [r7, #4]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    955c:	orr.w	r2, r0, lr
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9560:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9564:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9568:	str	r3, [r6, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    956a:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    956e:	str.w	r2, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9572:	add.w	r2, r1, #16384	; 0x4000
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9576:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9578:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    957a:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    957e:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9580:	str	r2, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    9582:	ldr.w	r3, [r4, #432]	; 0x1b0
    9586:	cmp	r3, #0
    9588:	bne.n	9582 <isr+0x526>
	}
	endpoint0_transfer_ack.next = 1;
    958a:	ldr	r2, [pc, #200]	; (9654 <isr+0x5f8>)
    958c:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    958e:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9592:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9594:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9596:	mov.w	r0, #65536	; 0x10000
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    959a:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    959c:	ldr.w	r1, [r5, #444]	; 0x1bc
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    95a0:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    95a2:	orr.w	r3, r1, #65537	; 0x10001
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    95a6:	str	r2, [r6, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE |= (1<<0) | (1<<16);
    95a8:	str.w	r3, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    95ac:	ldr.w	r3, [r5, #432]	; 0x1b0
    95b0:	orrs	r3, r0
    95b2:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    95b6:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    95ba:	ldr.w	r3, [r4, #432]	; 0x1b0
    95be:	cmp	r3, #0
    95c0:	bne.n	95ba <isr+0x55e>
    95c2:	b.n	911e <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    95c4:	ldr	r4, [pc, #180]	; (967c <isr+0x620>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    95c6:	movw	r0, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    95ca:	movs	r5, #0
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    95cc:	ldrh	r4, [r4, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    95ce:	str	r5, [r1, #0]
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    95d0:	cmp	r4, r0
    95d2:	bne.w	91e0 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    95d6:	ldr	r1, [pc, #176]	; (9688 <isr+0x62c>)
    95d8:	ldr	r4, [pc, #176]	; (968c <isr+0x630>)
    95da:	ldmia	r1, {r0, r1}
    95dc:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    95de:	cmp	r0, #134	; 0x86

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    95e0:	str	r0, [r4, #0]
    95e2:	strh	r1, [r4, #4]
    95e4:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    95e6:	bne.w	91e0 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    95ea:	cpsid	i
	sof_usage |= (1 << interface);
    95ec:	ldr	r0, [pc, #160]	; (9690 <isr+0x634>)
    95ee:	ldrb	r1, [r0, #0]
    95f0:	orr.w	r1, r1, #8
    95f4:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    95f6:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    95fa:	lsls	r0, r1, #24
    95fc:	bmi.n	960c <isr+0x5b0>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    95fe:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9602:	movs	r0, #128	; 0x80
    9604:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9608:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    960c:	cpsie	i
	if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    960e:	ldr	r2, [pc, #132]	; (9694 <isr+0x638>)
    9610:	movs	r1, #80	; 0x50
    9612:	strb	r1, [r2, #0]
    9614:	b.n	91e0 <isr+0x184>
				for (i=2; i <= NUM_ENDPOINTS; i++) {
					if (completestatus & (1 << i)) { // receive
						run_callbacks(endpoint_queue_head + i * 2);
					}
					if (completestatus & (1 << (i + 16))) { // transmit
						run_callbacks(endpoint_queue_head + i * 2 + 1);
    9616:	mov	r0, r6
    9618:	bl	8f80 <run_callbacks>
    961c:	b.n	9206 <isr+0x1aa>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    961e:	ldr	r0, [pc, #120]	; (9698 <isr+0x63c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9620:	mov	r2, r3
    9622:	ldr	r7, [pc, #80]	; (9674 <isr+0x618>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    9624:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    9628:	ldr	r1, [pc, #112]	; (969c <isr+0x640>)
    962a:	ldr	r0, [pc, #116]	; (96a0 <isr+0x644>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    962c:	str	r3, [sp, #4]
    962e:	cmp.w	lr, #0
    9632:	it	eq
    9634:	moveq	r1, r0
    9636:	mov	r0, r7
    9638:	bl	8310 <memcpy>
					usb_descriptor_buffer[1] = 7;
    963c:	movs	r2, #7
    963e:	ldr	r3, [sp, #4]
    9640:	strb	r2, [r7, #1]
    9642:	b.n	9512 <isr+0x4b6>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    9644:	ldr.w	r2, [r3, #328]	; 0x148
    9648:	bic.w	r2, r2, #128	; 0x80
    964c:	str.w	r2, [r3, #328]	; 0x148
    9650:	b.n	91ca <isr+0x16e>
    9652:	nop
    9654:	.word	0x20005020
    9658:	.word	0x20004a08
    965c:	.word	0x402e01c0
    9660:	.word	0x20004a24
    9664:	.word	0x20004ec8
    9668:	.word	0x20004948
    966c:	.word	0x20004a18
    9670:	.word	0x20000524
    9674:	.word	0x20203000
    9678:	.word	0xe000ef70
    967c:	.word	0x20004a00
    9680:	.word	0x00070080
    9684:	.word	0x20005000
    9688:	.word	0x20004a10
    968c:	.word	0x20004ec0
    9690:	.word	0x200049e8
    9694:	.word	0x200049f8
    9698:	.word	0x200049f0
    969c:	.word	0x60001674
    96a0:	.word	0x600016e0

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    96a4:	ldr	r0, [pc, #40]	; (96d0 <isr+0x674>)
					memcpy(usb_descriptor_buffer, src, datalen);
    96a6:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    96a8:	ldr	r1, [pc, #40]	; (96d4 <isr+0x678>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    96aa:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    96ac:	ldr	r0, [pc, #40]	; (96d8 <isr+0x67c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    96ae:	str	r3, [sp, #4]
    96b0:	cmp	r7, #0
    96b2:	it	eq
    96b4:	moveq	r1, r0
    96b6:	ldr	r0, [pc, #36]	; (96dc <isr+0x680>)
    96b8:	bl	8310 <memcpy>
    96bc:	ldr	r7, [pc, #28]	; (96dc <isr+0x680>)
    96be:	ldr	r3, [sp, #4]
    96c0:	b.n	9512 <isr+0x4b6>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    96c2:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    96c4:	ldrb	r3, [r1, #0]
    96c6:	cmp	r3, r2
    96c8:	it	cs
    96ca:	movcs	r3, r2
    96cc:	b.n	94fc <isr+0x4a0>
    96ce:	nop
    96d0:	.word	0x200049f0
    96d4:	.word	0x600016e0
    96d8:	.word	0x60001674
    96dc:	.word	0x20203000

000096e0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    96e0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    96e2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    96e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    96ea:	ite	ne
    96ec:	movne	r7, #0
    96ee:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    96f2:	cmp	r2, #3
    96f4:	bls.n	96fa <usb_config_rx+0x1a>
    96f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    96fa:	mov.w	sl, r0, lsl #7
    96fe:	ldr.w	r9, [pc, #64]	; 9740 <usb_config_rx+0x60>
    9702:	mov	r5, r1
    9704:	mov	r4, r0
    9706:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    970a:	movs	r1, #0
    970c:	movs	r2, #64	; 0x40
    970e:	mov	r8, r3
    9710:	mov	r0, r6
    9712:	bl	b58c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9716:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9718:	orr.w	r1, r7, r5, lsl #16
    971c:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9720:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9724:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    9726:	cmp.w	r8, #0
    972a:	beq.n	96f6 <usb_config_rx+0x16>
    972c:	ldr	r3, [pc, #12]	; (973c <usb_config_rx+0x5c>)
    972e:	lsls	r0, r4
    9730:	ldr	r4, [r3, #0]
    9732:	orrs	r0, r4
    9734:	str	r0, [r3, #0]
    9736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    973a:	nop
    973c:	.word	0x200049e4
    9740:	.word	0x20006000

00009744 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9744:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9746:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    974a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    974e:	ite	ne
    9750:	movne	r7, #0
    9752:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9756:	cmp	r2, #3
    9758:	bls.n	975e <usb_config_tx+0x1a>
    975a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    975e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9760:	lsls	r5, r0, #7
    9762:	ldr.w	r9, [pc, #68]	; 97a8 <usb_config_tx+0x64>
    9766:	mov	r8, r1
    9768:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    976a:	movs	r1, #0
    976c:	mov	r4, r0
    976e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9770:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9774:	mov	r0, sl
    9776:	bl	b58c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    977a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    977c:	orr.w	r1, r7, r8, lsl #16
    9780:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9784:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9788:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    978c:	cmp	r6, #0
    978e:	beq.n	975a <usb_config_tx+0x16>
    9790:	add.w	r0, r4, #16
    9794:	ldr	r3, [pc, #12]	; (97a4 <usb_config_tx+0x60>)
    9796:	lsls	r2, r0
    9798:	ldr	r0, [r3, #0]
    979a:	orrs	r2, r0
    979c:	str	r2, [r3, #0]
    979e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97a2:	nop
    97a4:	.word	0x200049e4
    97a8:	.word	0x20006000

000097ac <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    97ac:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    97ae:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    97b0:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    97b2:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    97b6:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    97b8:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    97ba:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    97bc:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    97c0:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    97c4:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    97c8:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    97cc:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    97ce:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    97d0:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    97d2:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    97d4:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    97d6:	pop	{r4, r5, r6, r7}
    97d8:	bx	lr
    97da:	nop

000097dc <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    97dc:	subs	r3, r0, #2
    97de:	cmp	r3, #3
    97e0:	bls.n	97e4 <usb_transmit+0x8>
    97e2:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    97e4:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    97e6:	ldr	r3, [pc, #24]	; (9800 <usb_transmit+0x24>)
    97e8:	add.w	r4, r0, #16
    97ec:	movs	r5, #1
    97ee:	mov	r2, r1
    97f0:	add.w	r0, r3, r0, lsl #7
    97f4:	lsl.w	r1, r5, r4
}
    97f8:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    97fa:	b.w	8f24 <schedule_transfer>
    97fe:	nop
    9800:	.word	0x20006040

00009804 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9804:	subs	r3, r0, #2
    9806:	cmp	r3, #3
    9808:	bls.n	980c <usb_receive+0x8>
    980a:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    980c:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    980e:	ldr	r3, [pc, #20]	; (9824 <usb_receive+0x20>)
    9810:	movs	r4, #1
    9812:	mov	r2, r1
    9814:	lsl.w	r1, r4, r0
    9818:	add.w	r0, r3, r0, lsl #7
}
    981c:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9820:	b.w	8f24 <schedule_transfer>
    9824:	.word	0x20006000

00009828 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9828:	ldr	r0, [r0, #4]
#endif
}
    982a:	bx	lr

0000982c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    982c:	cmp	r0, #0
    982e:	beq.n	98e0 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9830:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    9832:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9836:	sub	sp, #20
    9838:	mov	fp, r0
    983a:	ldr	r4, [pc, #168]	; (98e4 <delay+0xb8>)
    983c:	ldr	r5, [pc, #168]	; (98e8 <delay+0xbc>)
    983e:	ldr	r6, [pc, #172]	; (98ec <delay+0xc0>)
    9840:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9844:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9848:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    984a:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    984c:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9850:	cmp	r1, #0
    9852:	bne.n	9844 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9854:	ldr	r7, [pc, #152]	; (98f0 <delay+0xc4>)
    9856:	strd	r8, r9, [sp, #8]
    985a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    985c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    985e:	ldr	r2, [pc, #148]	; (98f4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    9860:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9864:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9866:	ldr	r2, [r2, #0]
    9868:	movs	r7, #1
    986a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    986e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9872:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    9874:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9876:	cmp	r3, r1
    9878:	it	eq
    987a:	cmpeq	r2, r8
    987c:	ite	cs
    987e:	movcs	sl, r8
    9880:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    9882:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9886:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    988a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    988c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    988e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9892:	cmp	r3, #0
    9894:	bne.n	9886 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9896:	ldr	r0, [sp, #4]
    9898:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    989a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    989c:	ldr	r0, [pc, #84]	; (98f4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    989e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    98a2:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    98a4:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    98a8:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    98ac:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    98b0:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    98b4:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    98b6:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    98b8:	cmp	r1, r3
    98ba:	it	eq
    98bc:	cmpeq	r0, r8
    98be:	ite	cs
    98c0:	movcs	r3, r8
    98c2:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    98c4:	add	r2, r3
    98c6:	cmp	r2, lr
    98c8:	bcc.n	98da <delay+0xae>
			if (--msec == 0) return;
    98ca:	subs.w	fp, fp, #1
			start += 1000;
    98ce:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    98d2:	bne.n	9886 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    98d4:	add	sp, #20
    98d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    98da:	bl	9da0 <yield>
	}
    98de:	b.n	9886 <delay+0x5a>
    98e0:	bx	lr
    98e2:	nop
    98e4:	.word	0x20006300
    98e8:	.word	0x20004a24
    98ec:	.word	0x20004a1c
    98f0:	.word	0xe0001004
    98f4:	.word	0x20004a20

000098f8 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    98f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    98fc:	ldr	r2, [pc, #72]	; (9948 <micros+0x50>)
    98fe:	movs	r6, #1
    9900:	ldr	r5, [pc, #72]	; (994c <micros+0x54>)
    9902:	ldr	r4, [pc, #76]	; (9950 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9904:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9908:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    990a:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    990c:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    9910:	cmp	r3, #0
    9912:	bne.n	9904 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9914:	ldr	r2, [pc, #60]	; (9954 <micros+0x5c>)
    9916:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9918:	ldr	r7, [pc, #60]	; (9958 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    991a:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    991c:	mov.w	r9, #0
    9920:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9924:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    9926:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    992a:	cmp	r9, r3
    992c:	umull	r6, r7, r2, r6
    9930:	it	eq
    9932:	cmpeq	r8, r7
    9934:	mov	r4, r7
    9936:	ite	cs
    9938:	movcs	r4, r7
    993a:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    993c:	mla	r0, r0, r1, r4
    9940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    9944:	bx	lr
    9946:	nop
    9948:	.word	0x20006300
    994c:	.word	0x20004a24
    9950:	.word	0x20004a1c
    9954:	.word	0xe0001004
    9958:	.word	0x20004a20

0000995c <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    995c:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    995e:	ldr	r2, [pc, #24]	; (9978 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    9960:	movs	r1, #7
    9962:	ldr	r3, [pc, #24]	; (997c <Panic_Temp_isr+0x20>)
    9964:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9966:	ldr	r3, [r2, #56]	; 0x38
    9968:	orr.w	r3, r3, #64	; 0x40
    996c:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    996e:	dsb	sy
  while (1) asm ("wfi");
    9972:	wfi
    9974:	b.n	9972 <Panic_Temp_isr+0x16>
    9976:	nop
    9978:	.word	0x400d4000
    997c:	.word	0x400ac000

00009980 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9980:	ldr	r0, [pc, #656]	; (9c14 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9982:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9986:	ldr	r3, [pc, #656]	; (9c18 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9988:	ldr	r2, [r0, #120]	; 0x78
    998a:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    998e:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9990:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9992:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9994:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9998:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    999c:	ldr	r4, [pc, #636]	; (9c1c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    999e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    99a2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    99a4:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    99a8:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    99aa:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    99ac:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    99b0:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    99b4:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    99b8:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    99bc:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    99c0:	ldrh.w	r0, [r3, #392]	; 0x188
    99c4:	uxth	r0, r0
    99c6:	orr.w	r0, r0, #240	; 0xf0
    99ca:	strh.w	r0, [r3, #392]	; 0x188
    99ce:	add.w	r0, r1, r1, lsl #1
    99d2:	ldr	r3, [pc, #580]	; (9c18 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    99d4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    99d6:	movs	r5, #0
    99d8:	lsls	r0, r0, #5
    99da:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    99dc:	cmp	r1, #4
    99de:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    99e0:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    99e4:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    99e6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    99e8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    99ea:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    99ec:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    99ee:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    99f0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    99f2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    99f4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    99f6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    99f8:	bne.n	99ce <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    99fa:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    99fe:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9a02:	ldr	r3, [pc, #540]	; (9c20 <pwm_init+0x2a0>)
    9a04:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a08:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9a0a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9a0c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9a10:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a12:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9a16:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a1a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9a1e:	ldrh.w	r0, [r4, #392]	; 0x188
    9a22:	uxth	r0, r0
    9a24:	orr.w	r0, r0, #3840	; 0xf00
    9a28:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9a2c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9a30:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9a34:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9a38:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9a3c:	ldrh.w	r0, [r3, #392]	; 0x188
    9a40:	uxth	r0, r0
    9a42:	orr.w	r0, r0, #240	; 0xf0
    9a46:	strh.w	r0, [r3, #392]	; 0x188
    9a4a:	add.w	r0, r1, r1, lsl #1
    9a4e:	ldr	r3, [pc, #464]	; (9c20 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9a50:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9a52:	movs	r5, #0
    9a54:	lsls	r0, r0, #5
    9a56:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9a58:	cmp	r1, #4
    9a5a:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9a5c:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9a5e:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9a62:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9a64:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9a66:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9a68:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9a6a:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9a6c:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9a6e:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9a70:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9a72:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9a74:	bne.n	9a4a <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a76:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9a7a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9a7e:	ldr	r3, [pc, #420]	; (9c24 <pwm_init+0x2a4>)
    9a80:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a84:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9a86:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9a88:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9a8c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a8e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9a92:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9a96:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9a9a:	ldrh.w	r0, [r4, #392]	; 0x188
    9a9e:	uxth	r0, r0
    9aa0:	orr.w	r0, r0, #3840	; 0xf00
    9aa4:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9aa8:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9aac:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9ab0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9ab4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9ab8:	ldrh.w	r0, [r3, #392]	; 0x188
    9abc:	uxth	r0, r0
    9abe:	orr.w	r0, r0, #240	; 0xf0
    9ac2:	strh.w	r0, [r3, #392]	; 0x188
    9ac6:	add.w	r0, r1, r1, lsl #1
    9aca:	ldr	r3, [pc, #344]	; (9c24 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9acc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9ace:	movs	r5, #0
    9ad0:	lsls	r0, r0, #5
    9ad2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ad4:	cmp	r1, #4
    9ad6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9ad8:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ada:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9ade:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9ae0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9ae2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9ae4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9ae6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9ae8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9aea:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9aec:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9aee:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9af0:	bne.n	9ac6 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9af2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9af6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9afa:	ldr	r3, [pc, #300]	; (9c28 <pwm_init+0x2a8>)
    9afc:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b00:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b02:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9b04:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9b08:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b0a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9b0e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b12:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9b16:	ldrh.w	r0, [r4, #392]	; 0x188
    9b1a:	uxth	r0, r0
    9b1c:	orr.w	r0, r0, #3840	; 0xf00
    9b20:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9b24:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9b28:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9b2c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9b30:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9b34:	ldrh.w	r0, [r3, #392]	; 0x188
    9b38:	uxth	r0, r0
    9b3a:	orr.w	r0, r0, #240	; 0xf0
    9b3e:	strh.w	r0, [r3, #392]	; 0x188
    9b42:	add.w	r0, r1, r1, lsl #1
    9b46:	ldr	r3, [pc, #224]	; (9c28 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9b48:	adds	r1, #1
    9b4a:	lsls	r0, r0, #5
    9b4c:	mov	r4, r3
    9b4e:	cmp	r1, #4
    9b50:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9b52:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9b54:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9b58:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9b5a:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9b5c:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9b5e:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9b60:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9b62:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9b64:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9b66:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9b68:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b6a:	bne.n	9b42 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b6c:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9b70:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9b72:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9b74:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b78:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9b7a:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9b7e:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9b80:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b84:	orrs	r3, r7
    9b86:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9b8a:	ldrh.w	r3, [r4, #392]	; 0x188
    9b8e:	uxth	r3, r3
    9b90:	orr.w	r3, r3, #3840	; 0xf00
    9b94:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9b98:	lsls	r0, r2, #5
    9b9a:	ldr	r3, [pc, #144]	; (9c2c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9b9c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9b9e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ba0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9ba2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9ba4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9ba6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9ba8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9baa:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9bae:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9bb0:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9bb2:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9bb4:	bne.n	9b98 <pwm_init+0x218>
    9bb6:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9bb8:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9bba:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9bbe:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9bc2:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9bc4:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9bc8:	lsls	r0, r2, #5
    9bca:	ldr	r3, [pc, #100]	; (9c30 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9bcc:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9bce:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9bd0:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9bd2:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9bd4:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9bd6:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9bd8:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9bda:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9bdc:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9bde:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9be0:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9be2:	bne.n	9bc8 <pwm_init+0x248>
    9be4:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9be6:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9be8:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9bec:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9bf0:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9bf2:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9bf6:	lsls	r0, r2, #5
    9bf8:	ldr	r3, [pc, #56]	; (9c34 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9bfa:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9bfc:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9bfe:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9c00:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9c02:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9c04:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9c06:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9c08:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9c0a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9c0c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9c0e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9c10:	bne.n	9bf6 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9c12:	pop	{r4, r5, r6, r7, pc}
    9c14:	.word	0x400fc000
    9c18:	.word	0x403dc000
    9c1c:	.word	0xfc030000
    9c20:	.word	0x403e0000
    9c24:	.word	0x403e4000
    9c28:	.word	0x403e8000
    9c2c:	.word	0x401dc000
    9c30:	.word	0x401e0000
    9c34:	.word	0x401e4000

00009c38 <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9c38:	lsls	r0, r0, #4
    9c3a:	ldr	r3, [pc, #28]	; (9c58 <digitalWrite.part.0+0x20>)
    9c3c:	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    9c3e:	ldr	r3, [r3, r0]
	mask = p->mask;
    9c40:	ldr	r2, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    9c42:	ldr	r0, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    9c44:	tst	r0, r2
    9c46:	beq.n	9c4e <digitalWrite.part.0+0x16>
		// pin is configured for output mode
		if (val) {
    9c48:	cbnz	r1, 9c50 <digitalWrite.part.0+0x18>
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    9c4a:	str.w	r2, [r3, #136]	; 0x88
    9c4e:	bx	lr
	pinmode = *(p->reg + 1);
	mask = p->mask;
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
    9c50:	str.w	r2, [r3, #132]	; 0x84
    9c54:	bx	lr
    9c56:	nop
    9c58:	.word	0x200002a4

00009c5c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9c5c:	cmp	r0, #39	; 0x27
    9c5e:	bhi.n	9c64 <digitalWrite+0x8>
    9c60:	b.w	9c38 <digitalWrite.part.0>
    9c64:	bx	lr
    9c66:	nop

00009c68 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9c68:	cmp	r0, #39	; 0x27
    9c6a:	bhi.n	9ca6 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9c6c:	lsls	r0, r0, #4
    9c6e:	ldr	r2, [pc, #104]	; (9cd8 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9c70:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9c72:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9c76:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9c78:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9c7a:	beq.n	9ca8 <pinMode+0x40>
    9c7c:	cmp	r1, #4
    9c7e:	beq.n	9ca8 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9c80:	ldr	r4, [r3, #12]
    9c82:	ldr	r2, [r0, #4]
    9c84:	bic.w	r2, r2, r4
    9c88:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9c8a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9c8c:	cbz	r1, 9cca <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9c8e:	cmp	r1, #2
    9c90:	beq.n	9cd0 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9c92:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9c94:	ldr	r3, [r3, #4]
}
    9c96:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9c9a:	ite	eq
    9c9c:	ldreq	r1, [pc, #60]	; (9cdc <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9c9e:	ldrne	r1, [pc, #64]	; (9ce0 <pinMode+0x78>)
    9ca0:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9ca2:	movs	r2, #21
    9ca4:	str	r2, [r3, #0]
}
    9ca6:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9ca8:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9caa:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9cac:	ldr	r4, [r0, #4]
    9cae:	orr.w	r2, r2, r4
    9cb2:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9cb4:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    9cb6:	beq.n	9cca <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9cb8:	movw	r1, #2104	; 0x838
    9cbc:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9cbe:	ldr	r3, [r3, #4]
    9cc0:	movs	r2, #21
}
    9cc2:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9cc6:	str	r2, [r3, #0]
}
    9cc8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9cca:	movs	r1, #56	; 0x38
    9ccc:	str	r1, [r2, #0]
    9cce:	b.n	9cbe <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9cd0:	ldr	r1, [pc, #16]	; (9ce4 <pinMode+0x7c>)
    9cd2:	str	r1, [r2, #0]
    9cd4:	b.n	9cbe <pinMode+0x56>
    9cd6:	nop
    9cd8:	.word	0x200002a4
    9cdc:	.word	0x00013038
    9ce0:	.word	0x00010038
    9ce4:	.word	0x0001f038

00009ce8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9ce8:	ldr	r2, [pc, #72]	; (9d34 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9cea:	ldr	r3, [pc, #76]	; (9d38 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9cec:	ldr.w	r0, [r2, #544]	; 0x220
    9cf0:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9cf4:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    9cf6:	push	{r4, lr}
    9cf8:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9cfa:	bhi.n	9d02 <usb_init_serialnumber+0x1a>
    9cfc:	add.w	r0, r0, r0, lsl #2
    9d00:	lsls	r0, r0, #1
    9d02:	ldr	r4, [pc, #56]	; (9d3c <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    9d04:	add	r1, sp, #4
    9d06:	movs	r2, #10
    9d08:	bl	9d40 <ultoa>
    9d0c:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    9d0e:	movs	r3, #0
    9d10:	mov	r0, r4
		char c = buf[i];
    9d12:	ldrb.w	r2, [r1], #1
    9d16:	adds	r3, #1
		if (!c) break;
    9d18:	cbz	r2, 9d2a <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9d1a:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9d1c:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9d20:	bne.n	9d12 <usb_init_serialnumber+0x2a>
    9d22:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9d24:	strb	r3, [r4, #0]
}
    9d26:	add	sp, #16
    9d28:	pop	{r4, pc}
    9d2a:	lsls	r3, r3, #1
    9d2c:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9d2e:	strb	r3, [r4, #0]
}
    9d30:	add	sp, #16
    9d32:	pop	{r4, pc}
    9d34:	.word	0x401f4400
    9d38:	.word	0x0098967f
    9d3c:	.word	0x200008d0

00009d40 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9d40:	push	{r4, r5, r6, r7}
    9d42:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9d44:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9d46:	mov	r7, r6
    9d48:	b.n	9d4c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    9d4a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    9d4c:	udiv	r3, r0, r2
    9d50:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d54:	add.w	r4, r0, #55	; 0x37
    9d58:	cmp	r0, #9
    9d5a:	add.w	r0, r0, #48	; 0x30
    9d5e:	uxtb	r4, r4
    9d60:	it	ls
    9d62:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9d64:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9d66:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    9d6a:	cmp	r3, #0
    9d6c:	bne.n	9d4a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    9d6e:	adds	r2, r1, r5
    9d70:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9d72:	cbz	r5, 9d88 <ultoa+0x48>
    9d74:	adds	r3, #1
		t = buf[j];
    9d76:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    9d7a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9d7c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    9d7e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9d80:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9d82:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9d86:	blt.n	9d74 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    9d88:	mov	r0, r1
    9d8a:	pop	{r4, r5, r6, r7}
    9d8c:	bx	lr
    9d8e:	nop

00009d90 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9d90:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9d92:	bl	1ec <setup>
	while (1) {
		loop();
    9d96:	bl	248 <loop>
		yield();
    9d9a:	bl	9da0 <yield>
    9d9e:	b.n	9d96 <main+0x6>

00009da0 <yield>:

extern uint8_t usb_enable_serial_event_processing; // from usb_inst.cpp

void yield(void) __attribute__ ((weak));
void yield(void)
{
    9da0:	push	{r4, r5, r6, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    9da2:	ldr	r4, [pc, #132]	; (9e28 <yield+0x88>)
    9da4:	ldrb	r3, [r4, #0]
    9da6:	cbnz	r3, 9dca <yield+0x2a>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9da8:	ldr	r3, [pc, #128]	; (9e2c <yield+0x8c>)
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9daa:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9dac:	ldrb	r3, [r3, #0]
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    9dae:	strb	r2, [r4, #0]


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9db0:	cbnz	r3, 9dfa <yield+0x5a>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9db2:	ldr	r3, [pc, #124]	; (9e30 <yield+0x90>)
    9db4:	ldrb	r3, [r3, #0]
    9db6:	cmp	r3, #0
    9db8:	bne.n	9e0e <yield+0x6e>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;
    9dba:	ldr	r3, [pc, #120]	; (9e34 <yield+0x94>)

	running = 0;
    9dbc:	movs	r1, #0
    9dbe:	ldr	r2, [r3, #0]
    9dc0:	strb	r1, [r4, #0]
    9dc2:	cbz	r2, 9dca <yield+0x2a>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9dc4:	mrs	r2, IPSR
		if (ipsr != 0) return;
    9dc8:	cbz	r2, 9dcc <yield+0x2c>
    9dca:	pop	{r4, r5, r6, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9dcc:	mrs	r0, PRIMASK
		__disable_irq();
    9dd0:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    9dd2:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    9dd4:	cbz	r2, 9e14 <yield+0x74>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    9dd6:	ldr	r4, [pc, #96]	; (9e38 <yield+0x98>)
    9dd8:	ldrb	r1, [r4, #0]
    9dda:	cbnz	r1, 9e14 <yield+0x74>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9ddc:	movs	r6, #1
		firstYield = first->_next;
    9dde:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    9de0:	strb	r6, [r4, #0]
		firstYield = first->_next;
    9de2:	str	r5, [r3, #0]
		if (firstYield) {
    9de4:	cbz	r5, 9e1c <yield+0x7c>
			firstYield->_prev = nullptr;
    9de6:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9de8:	cbnz	r0, 9dec <yield+0x4c>
    9dea:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9dec:	movs	r5, #0
		(*(first->_function))(*first);
    9dee:	ldr	r3, [r2, #8]
    9df0:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    9df2:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    9df4:	blx	r3
		runningFromYield = false;
    9df6:	strb	r5, [r4, #0]
    9df8:	pop	{r4, r5, r6, pc}
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9dfa:	bl	8a90 <usb_serial_available>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (usb_enable_serial_event_processing && Serial.available()) serialEvent();
    9dfe:	cmp	r0, #0
    9e00:	beq.n	9db2 <yield+0x12>
    9e02:	bl	a050 <serialEvent()>

	// Current workaround until integrate with EventResponder.
	if (HardwareSerial::serial_event_handlers_active) HardwareSerial::processSerialEvents();
    9e06:	ldr	r3, [pc, #40]	; (9e30 <yield+0x90>)
    9e08:	ldrb	r3, [r3, #0]
    9e0a:	cmp	r3, #0
    9e0c:	beq.n	9dba <yield+0x1a>
    9e0e:	bl	a130 <HardwareSerial::processSerialEvents()>
    9e12:	b.n	9dba <yield+0x1a>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9e14:	cmp	r0, #0
    9e16:	bne.n	9dca <yield+0x2a>
    9e18:	cpsie	i
    9e1a:	pop	{r4, r5, r6, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    9e1c:	ldr	r3, [pc, #28]	; (9e3c <yield+0x9c>)
    9e1e:	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9e20:	cmp	r0, #0
    9e22:	bne.n	9dec <yield+0x4c>
    9e24:	b.n	9dea <yield+0x4a>
    9e26:	nop
    9e28:	.word	0x20004a3c
    9e2c:	.word	0x200008e6
    9e30:	.word	0x20004a78
    9e34:	.word	0x20004a50
    9e38:	.word	0x20004a54
    9e3c:	.word	0x20004a4c

00009e40 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    9e40:	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9e42:	mrs	r2, PRIMASK
		__disable_irq();
    9e46:	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9e48:	ldrb	r3, [r0, #29]
    9e4a:	cbnz	r3, 9e5a <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    9e4c:	ldrb	r1, [r0, #28]
    9e4e:	cmp	r1, #1
    9e50:	beq.n	9e64 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9e52:	cmp	r1, #3
    9e54:	beq.n	9e78 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9e56:	movs	r3, #1
    9e58:	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9e5a:	cbnz	r2, 9e5e <EventResponder::triggerEventNotImmediate()+0x1e>
    9e5c:	cpsie	i
	}
	enableInterrupts(irq);
}
    9e5e:	ldr.w	r4, [sp], #4
    9e62:	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    9e64:	ldr	r4, [pc, #68]	; (9eac <EventResponder::triggerEventNotImmediate()+0x6c>)
    9e66:	ldr	r1, [r4, #0]
    9e68:	cbz	r1, 9e94 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9e6a:	ldr	r1, [pc, #68]	; (9eb0 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    9e6c:	str	r3, [r0, #20]
				_prev = lastYield;
    9e6e:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastYield = this;
    9e70:	str	r0, [r1, #0]
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    9e72:	str	r3, [r0, #24]
				_prev->_next = this;
    9e74:	str	r0, [r3, #20]
    9e76:	b.n	9e56 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    9e78:	ldr	r4, [pc, #56]	; (9eb4 <EventResponder::triggerEventNotImmediate()+0x74>)
    9e7a:	ldr	r1, [r4, #0]
    9e7c:	cbz	r1, 9ea0 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9e7e:	ldr	r1, [pc, #56]	; (9eb8 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    9e80:	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9e82:	ldr	r3, [r1, #0]
				_prev->_next = this;
				lastInterrupt = this;
    9e84:	str	r0, [r1, #0]
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    9e86:	str	r3, [r0, #24]
				_prev->_next = this;
    9e88:	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9e8a:	ldr	r3, [pc, #48]	; (9ebc <EventResponder::triggerEventNotImmediate()+0x7c>)
    9e8c:	mov.w	r1, #268435456	; 0x10000000
    9e90:	str	r1, [r3, #0]
    9e92:	b.n	9e56 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    9e94:	ldr	r3, [pc, #24]	; (9eb0 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    9e96:	str	r1, [r0, #20]
				_prev = nullptr;
    9e98:	str	r1, [r0, #24]
				firstYield = this;
    9e9a:	str	r0, [r4, #0]
				lastYield = this;
    9e9c:	str	r0, [r3, #0]
    9e9e:	b.n	9e56 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    9ea0:	ldr	r3, [pc, #20]	; (9eb8 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    9ea2:	str	r1, [r0, #20]
				_prev = nullptr;
    9ea4:	str	r1, [r0, #24]
				firstInterrupt = this;
    9ea6:	str	r0, [r4, #0]
				lastInterrupt = this;
    9ea8:	str	r0, [r3, #0]
    9eaa:	b.n	9e8a <EventResponder::triggerEventNotImmediate()+0x4a>
    9eac:	.word	0x20004a50
    9eb0:	.word	0x20004a4c
    9eb4:	.word	0x20004a40
    9eb8:	.word	0x20004a44
    9ebc:	.word	0xe000ed04

00009ec0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9ec0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9ec2:	mrs	r1, PRIMASK
		__disable_irq();
    9ec6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9ec8:	ldr	r4, [pc, #48]	; (9efc <EventResponder::runFromInterrupt()+0x3c>)
    9eca:	ldr	r3, [r4, #0]
		if (first) {
    9ecc:	cbz	r3, 9ef2 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9ece:	ldr	r6, [pc, #48]	; (9f00 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    9ed0:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    9ed2:	ldr	r2, [r3, #20]
    9ed4:	str	r2, [r4, #0]
			if (firstInterrupt) {
    9ed6:	cbz	r2, 9ef8 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    9ed8:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9eda:	cbnz	r1, 9ede <EventResponder::runFromInterrupt()+0x1e>
    9edc:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    9ede:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    9ee0:	mov	r0, r3
    9ee2:	ldr	r3, [r3, #8]
    9ee4:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9ee6:	mrs	r1, PRIMASK
		__disable_irq();
    9eea:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9eec:	ldr	r3, [r4, #0]
		if (first) {
    9eee:	cmp	r3, #0
    9ef0:	bne.n	9ed2 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    9ef2:	cbnz	r1, 9ef6 <EventResponder::runFromInterrupt()+0x36>
    9ef4:	cpsie	i
    9ef6:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9ef8:	str	r2, [r6, #0]
    9efa:	b.n	9eda <EventResponder::runFromInterrupt()+0x1a>
    9efc:	.word	0x20004a40
    9f00:	.word	0x20004a44

00009f04 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    9f04:	b.w	9ec0 <EventResponder::runFromInterrupt()>

00009f08 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    9f08:	ldr	r2, [pc, #96]	; (9f6c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    9f0a:	push	{r4, r5}
	if (listActive == nullptr) {
    9f0c:	ldr	r4, [r2, #0]
    9f0e:	cmp	r4, #0
    9f10:	beq.n	9f64 <MillisTimer::addToActiveList()+0x5c>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    9f12:	ldr	r3, [r0, #0]
    9f14:	ldr	r1, [r4, #0]
    9f16:	cmp	r3, r1
    9f18:	bcs.n	9f3a <MillisTimer::addToActiveList()+0x32>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9f1a:	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    9f1c:	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    9f1e:	str	r4, [r0, #8]
		_prev = nullptr;
    9f20:	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    9f22:	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    9f24:	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    9f26:	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9f28:	movs	r3, #2
}
    9f2a:	pop	{r4, r5}
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    9f2c:	strb	r3, [r0, #20]
}
    9f2e:	bx	lr
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
    9f30:	str	r3, [r0, #0]
    9f32:	mov	r4, r2
			timer = timer->_next;
			if (_ms < timer->_ms) {
    9f34:	ldr	r1, [r2, #0]
    9f36:	cmp	r3, r1
    9f38:	bcc.n	9f4c <MillisTimer::addToActiveList()+0x44>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9f3a:	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9f3c:	subs	r3, r3, r1
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    9f3e:	cmp	r2, #0
    9f40:	bne.n	9f30 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    9f42:	str	r2, [r0, #8]
		_prev = timer;
    9f44:	str	r4, [r0, #12]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    9f46:	str	r3, [r0, #0]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
    9f48:	str	r0, [r4, #8]
    9f4a:	b.n	9f28 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9f4c:	ldr	r5, [r2, #12]
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
    9f4e:	subs	r3, r1, r3
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    9f50:	str	r2, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
				timer->_ms -= _ms;
				_state = TimerActive;
    9f52:	movs	r2, #2
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    9f54:	str	r5, [r0, #12]
				timer->_prev = this;
    9f56:	str	r0, [r4, #12]
				_prev->_next = this;
    9f58:	ldr	r1, [r0, #12]
    9f5a:	str	r0, [r1, #8]
				timer->_ms -= _ms;
    9f5c:	str	r3, [r4, #0]
				_state = TimerActive;
    9f5e:	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    9f60:	pop	{r4, r5}
    9f62:	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    9f64:	str	r4, [r0, #8]
		_prev = nullptr;
    9f66:	str	r4, [r0, #12]
		listActive = this;
    9f68:	str	r0, [r2, #0]
    9f6a:	b.n	9f28 <MillisTimer::addToActiveList()+0x20>
    9f6c:	.word	0x20004a48

00009f70 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    9f70:	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    9f72:	ldr	r6, [pc, #136]	; (9ffc <MillisTimer::runFromTimer()+0x8c>)
    9f74:	ldr	r4, [r6, #0]
	while (timer) {
    9f76:	cbz	r4, 9fc4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9f78:	ldr	r3, [r4, #0]
    9f7a:	cmp	r3, #0
    9f7c:	bne.n	9ff4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    9f7e:	mov	r5, r3
    9f80:	ldr	r7, [pc, #124]	; (a000 <MillisTimer::runFromTimer()+0x90>)
    9f82:	b.n	9f8e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    9f84:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9f86:	cbz	r4, 9fc4 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    9f88:	ldr	r3, [r4, #0]
    9f8a:	cmp	r3, #0
    9f8c:	bne.n	9ff4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    9f8e:	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    9f90:	cbz	r3, 9f94 <MillisTimer::runFromTimer()+0x24>
    9f92:	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    9f94:	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    9f96:	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9f98:	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    9f9a:	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9f9c:	ldr	r3, [r3, #0]
    9f9e:	cmp	r3, r7
    9fa0:	bne.n	9fe6 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9fa2:	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    9fa4:	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    9fa6:	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    9fa8:	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    9faa:	beq.n	9fee <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    9fac:	bl	9e40 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    9fb0:	ldr	r3, [r4, #4]
    9fb2:	cmp	r3, #0
    9fb4:	beq.n	9f84 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    9fb6:	str	r3, [r4, #0]
				timer->addToActiveList();
    9fb8:	mov	r0, r4
    9fba:	bl	9f08 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    9fbe:	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    9fc0:	cmp	r4, #0
    9fc2:	bne.n	9f88 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9fc4:	mrs	r3, PRIMASK
		__disable_irq();
    9fc8:	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9fca:	ldr	r2, [pc, #56]	; (a004 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9fcc:	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    9fce:	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    9fd0:	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    9fd2:	cbnz	r3, 9fd6 <MillisTimer::runFromTimer()+0x66>
    9fd4:	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    9fd6:	cbz	r0, 9fe4 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    9fd8:	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    9fda:	bl	9f08 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    9fde:	mov	r0, r4
    9fe0:	cmp	r0, #0
    9fe2:	bne.n	9fd8 <MillisTimer::runFromTimer()+0x68>
    9fe4:	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    9fe6:	mov	r2, r4
    9fe8:	movs	r1, #0
    9fea:	blx	r3
    9fec:	b.n	9fb0 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    9fee:	ldr	r3, [r0, #8]
    9ff0:	blx	r3
    9ff2:	b.n	9fb0 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    9ff4:	subs	r3, #1
    9ff6:	str	r3, [r4, #0]
			break;
    9ff8:	b.n	9fc4 <MillisTimer::runFromTimer()+0x54>
    9ffa:	nop
    9ffc:	.word	0x20004a48
    a000:	.word	0x00007ae9
    a004:	.word	0x20004a58

0000a008 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a008:	ldr	r2, [pc, #16]	; (a01c <systick_isr+0x14>)
    a00a:	ldr	r3, [pc, #20]	; (a020 <systick_isr+0x18>)
    a00c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    a00e:	ldr	r2, [pc, #20]	; (a024 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a010:	str	r1, [r3, #0]
	systick_millis_count++;
    a012:	ldr	r3, [r2, #0]
    a014:	adds	r3, #1
    a016:	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    a018:	b.w	9f70 <MillisTimer::runFromTimer()>
    a01c:	.word	0xe0001004
    a020:	.word	0x20004a1c
    a024:	.word	0x20004a24

0000a028 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a028:	b.w	8a9c <usb_serial_flush_input>

0000a02c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a02c:	b.w	8a4c <usb_serial_peekchar>

0000a030 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a030:	b.w	8b10 <usb_serial_getchar>

0000a034 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a034:	b.w	8a90 <usb_serial_available>

0000a038 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a038:	b.w	8bc0 <usb_serial_flush_output>

0000a03c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a03c:	b.w	8b74 <usb_serial_write_buffer_free>

0000a040 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a040:	mov	r0, r1
    a042:	mov	r1, r2
    a044:	b.w	8b5c <usb_serial_write>

0000a048 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a048:	mov	r0, r1
    a04a:	b.w	8b30 <usb_serial_putchar>
    a04e:	nop

0000a050 <serialEvent()>:
#endif

#endif // F_CPU
uint8_t usb_enable_serial_event_processing = 1;
void serialEvent() __attribute__((weak));
void serialEvent() {usb_enable_serial_event_processing = 0;}
    a050:	ldr	r3, [pc, #4]	; (a058 <serialEvent()+0x8>)
    a052:	movs	r2, #0
    a054:	strb	r2, [r3, #0]
    a056:	bx	lr
    a058:	.word	0x200008e6

0000a05c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a05c:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a05e:	ldr	r4, [pc, #24]	; (a078 <Print::println()+0x1c>)
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    a060:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a062:	ldr	r3, [r0, #0]
    a064:	movs	r2, #2
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a066:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a068:	add	r1, sp, #4
    a06a:	ldr	r3, [r3, #4]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a06c:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a070:	blx	r3
}
    a072:	add	sp, #8
    a074:	pop	{r4, pc}
    a076:	nop
    a078:	.word	0x200005c4

0000a07c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    a07c:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a07e:	push	{r4, lr}
    a080:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a082:	ldr	r3, [r3, #4]
    a084:	blx	r3
	return len;
}
    a086:	mov	r0, r4
    a088:	pop	{r4, pc}
    a08a:	nop

0000a08c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a08c:	push	{r1, r2, r3}
    a08e:	push	{lr}
    a090:	sub	sp, #8
    a092:	add	r3, sp, #12
    a094:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a098:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    a09a:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a09c:	bl	bd08 <vdprintf>
#endif
}
    a0a0:	add	sp, #8
    a0a2:	ldr.w	lr, [sp], #4
    a0a6:	add	sp, #12
    a0a8:	bx	lr
    a0aa:	nop

0000a0ac <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a0ac:	push	{r4, r5, r6, r7, lr}
    a0ae:	mov	r6, r0
    a0b0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a0b2:	cmp	r2, #0
    a0b4:	beq.n	a11e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a0b6:	cmp	r2, #1
    a0b8:	it	eq
    a0ba:	moveq	r2, #10
	}


	if (n == 0) {
    a0bc:	cbz	r1, a114 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a0be:	movs	r5, #33	; 0x21
    a0c0:	b.n	a0c4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a0c2:	uxtb	r5, r7
    a0c4:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a0c6:	udiv	r4, r1, r2
    a0ca:	mls	r1, r2, r4, r1
    a0ce:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a0d0:	cmp	r1, #9
    a0d2:	add.w	r1, r0, #55	; 0x37
    a0d6:	add.w	r0, r0, #48	; 0x30
    a0da:	it	hi
    a0dc:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a0de:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a0e0:	add	r4, sp, #40	; 0x28
    a0e2:	it	ls
    a0e4:	uxtbls	r0, r0
    a0e6:	add	r4, r5
    a0e8:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a0ec:	cmp	r1, #0
    a0ee:	bne.n	a0c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a0f0:	cbz	r3, a100 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a0f2:	subs	r5, #1
		buf[i] = '-';
    a0f4:	add	r3, sp, #40	; 0x28
    a0f6:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a0f8:	uxtb	r5, r5
		buf[i] = '-';
    a0fa:	add	r3, r5
    a0fc:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a100:	ldr	r3, [r6, #0]
    a102:	add	r1, sp, #4
    a104:	rsb	r2, r5, #34	; 0x22
    a108:	mov	r0, r6
    a10a:	add	r1, r5
    a10c:	ldr	r3, [r3, #4]
    a10e:	blx	r3
}
    a110:	add	sp, #44	; 0x2c
    a112:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a114:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a116:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a118:	strb.w	r2, [sp, #37]	; 0x25
    a11c:	b.n	a0f0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a11e:	ldr	r3, [r0, #0]
    a120:	uxtb	r1, r1
    a122:	ldr	r3, [r3, #0]
    a124:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a126:	add	sp, #44	; 0x2c
    a128:	pop	{r4, r5, r6, r7, pc}
    a12a:	nop

0000a12c <operator delete(void*, unsigned int)>:
    a12c:	b.w	ae14 <free>

0000a130 <HardwareSerial::processSerialEvents()>:
	//digitalWrite(4, LOW);
}


void HardwareSerial::processSerialEvents()
{
    a130:	push	{r3, r4, r5, lr}
	if (!serial_event_handlers_active) return;	// bail quick if no one processing SerialEvents.
    a132:	ldr	r3, [pc, #28]	; (a150 <HardwareSerial::processSerialEvents()+0x20>)
    a134:	ldrb	r4, [r3, #0]
    a136:	cbz	r4, a14c <HardwareSerial::processSerialEvents()+0x1c>
    a138:	ldr	r5, [pc, #24]	; (a154 <HardwareSerial::processSerialEvents()+0x24>)
	uint8_t handlers_still_to_process = serial_event_handlers_active;
	for (uint8_t i = 0; i < 8; i++) {
		if (serial_event_handler_checks[i]) {
    a13a:	ldr.w	r3, [r5, #4]!
    a13e:	cmp	r3, #0
    a140:	beq.n	a13a <HardwareSerial::processSerialEvents()+0xa>
			(*serial_event_handler_checks[i])();
    a142:	blx	r3
			if (--handlers_still_to_process == 0) return;
    a144:	subs	r3, r4, #1
    a146:	ands.w	r4, r3, #255	; 0xff
    a14a:	bne.n	a13a <HardwareSerial::processSerialEvents()+0xa>
    a14c:	pop	{r3, r4, r5, pc}
    a14e:	nop
    a150:	.word	0x20004a78
    a154:	.word	0x20004a58

0000a158 <__aeabi_atexit>:
    a158:	mov	r3, r1
    a15a:	mov	r1, r0
    a15c:	mov	r0, r3
    a15e:	b.w	ad9c <__cxa_atexit>
    a162:	nop

0000a164 <__aeabi_drsub>:
    a164:	eor.w	r1, r1, #2147483648	; 0x80000000
    a168:	b.n	a170 <__adddf3>
    a16a:	nop

0000a16c <__aeabi_dsub>:
    a16c:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a170 <__adddf3>:
    a170:	push	{r4, r5, lr}
    a172:	mov.w	r4, r1, lsl #1
    a176:	mov.w	r5, r3, lsl #1
    a17a:	teq	r4, r5
    a17e:	it	eq
    a180:	teqeq	r0, r2
    a184:	itttt	ne
    a186:	orrsne.w	ip, r4, r0
    a18a:	orrsne.w	ip, r5, r2
    a18e:	mvnsne.w	ip, r4, asr #21
    a192:	mvnsne.w	ip, r5, asr #21
    a196:	beq.w	a35e <__adddf3+0x1ee>
    a19a:	mov.w	r4, r4, lsr #21
    a19e:	rsbs	r5, r4, r5, lsr #21
    a1a2:	it	lt
    a1a4:	neglt	r5, r5
    a1a6:	ble.n	a1c2 <__adddf3+0x52>
    a1a8:	add	r4, r5
    a1aa:	eor.w	r2, r0, r2
    a1ae:	eor.w	r3, r1, r3
    a1b2:	eor.w	r0, r2, r0
    a1b6:	eor.w	r1, r3, r1
    a1ba:	eor.w	r2, r0, r2
    a1be:	eor.w	r3, r1, r3
    a1c2:	cmp	r5, #54	; 0x36
    a1c4:	it	hi
    a1c6:	pophi	{r4, r5, pc}
    a1c8:	tst.w	r1, #2147483648	; 0x80000000
    a1cc:	mov.w	r1, r1, lsl #12
    a1d0:	mov.w	ip, #1048576	; 0x100000
    a1d4:	orr.w	r1, ip, r1, lsr #12
    a1d8:	beq.n	a1e0 <__adddf3+0x70>
    a1da:	negs	r0, r0
    a1dc:	sbc.w	r1, r1, r1, lsl #1
    a1e0:	tst.w	r3, #2147483648	; 0x80000000
    a1e4:	mov.w	r3, r3, lsl #12
    a1e8:	orr.w	r3, ip, r3, lsr #12
    a1ec:	beq.n	a1f4 <__adddf3+0x84>
    a1ee:	negs	r2, r2
    a1f0:	sbc.w	r3, r3, r3, lsl #1
    a1f4:	teq	r4, r5
    a1f8:	beq.w	a34a <__adddf3+0x1da>
    a1fc:	sub.w	r4, r4, #1
    a200:	rsbs	lr, r5, #32
    a204:	blt.n	a222 <__adddf3+0xb2>
    a206:	lsl.w	ip, r2, lr
    a20a:	lsr.w	r2, r2, r5
    a20e:	adds	r0, r0, r2
    a210:	adc.w	r1, r1, #0
    a214:	lsl.w	r2, r3, lr
    a218:	adds	r0, r0, r2
    a21a:	asr.w	r3, r3, r5
    a21e:	adcs	r1, r3
    a220:	b.n	a240 <__adddf3+0xd0>
    a222:	sub.w	r5, r5, #32
    a226:	add.w	lr, lr, #32
    a22a:	cmp	r2, #1
    a22c:	lsl.w	ip, r3, lr
    a230:	it	cs
    a232:	orrcs.w	ip, ip, #2
    a236:	asr.w	r3, r3, r5
    a23a:	adds	r0, r0, r3
    a23c:	adcs.w	r1, r1, r3, asr #31
    a240:	and.w	r5, r1, #2147483648	; 0x80000000
    a244:	bpl.n	a256 <__adddf3+0xe6>
    a246:	mov.w	lr, #0
    a24a:	rsbs	ip, ip, #0
    a24e:	sbcs.w	r0, lr, r0
    a252:	sbc.w	r1, lr, r1
    a256:	cmp.w	r1, #1048576	; 0x100000
    a25a:	bcc.n	a294 <__adddf3+0x124>
    a25c:	cmp.w	r1, #2097152	; 0x200000
    a260:	bcc.n	a27c <__adddf3+0x10c>
    a262:	lsrs	r1, r1, #1
    a264:	movs.w	r0, r0, rrx
    a268:	mov.w	ip, ip, rrx
    a26c:	add.w	r4, r4, #1
    a270:	mov.w	r2, r4, lsl #21
    a274:	cmn.w	r2, #4194304	; 0x400000
    a278:	bcs.w	a3b0 <__adddf3+0x240>
    a27c:	cmp.w	ip, #2147483648	; 0x80000000
    a280:	it	eq
    a282:	movseq.w	ip, r0, lsr #1
    a286:	adcs.w	r0, r0, #0
    a28a:	adc.w	r1, r1, r4, lsl #20
    a28e:	orr.w	r1, r1, r5
    a292:	pop	{r4, r5, pc}
    a294:	movs.w	ip, ip, lsl #1
    a298:	adcs	r0, r0
    a29a:	adc.w	r1, r1, r1
    a29e:	tst.w	r1, #1048576	; 0x100000
    a2a2:	sub.w	r4, r4, #1
    a2a6:	bne.n	a27c <__adddf3+0x10c>
    a2a8:	teq	r1, #0
    a2ac:	itt	eq
    a2ae:	moveq	r1, r0
    a2b0:	moveq	r0, #0
    a2b2:	clz	r3, r1
    a2b6:	it	eq
    a2b8:	addeq	r3, #32
    a2ba:	sub.w	r3, r3, #11
    a2be:	subs.w	r2, r3, #32
    a2c2:	bge.n	a2de <__adddf3+0x16e>
    a2c4:	adds	r2, #12
    a2c6:	ble.n	a2da <__adddf3+0x16a>
    a2c8:	add.w	ip, r2, #20
    a2cc:	rsb	r2, r2, #12
    a2d0:	lsl.w	r0, r1, ip
    a2d4:	lsr.w	r1, r1, r2
    a2d8:	b.n	a2f4 <__adddf3+0x184>
    a2da:	add.w	r2, r2, #20
    a2de:	it	le
    a2e0:	rsble	ip, r2, #32
    a2e4:	lsl.w	r1, r1, r2
    a2e8:	lsr.w	ip, r0, ip
    a2ec:	itt	le
    a2ee:	orrle.w	r1, r1, ip
    a2f2:	lslle	r0, r2
    a2f4:	subs	r4, r4, r3
    a2f6:	ittt	ge
    a2f8:	addge.w	r1, r1, r4, lsl #20
    a2fc:	orrge	r1, r5
    a2fe:	popge	{r4, r5, pc}
    a300:	mvn.w	r4, r4
    a304:	subs	r4, #31
    a306:	bge.n	a342 <__adddf3+0x1d2>
    a308:	adds	r4, #12
    a30a:	bgt.n	a32a <__adddf3+0x1ba>
    a30c:	add.w	r4, r4, #20
    a310:	rsb	r2, r4, #32
    a314:	lsr.w	r0, r0, r4
    a318:	lsl.w	r3, r1, r2
    a31c:	orr.w	r0, r0, r3
    a320:	lsr.w	r3, r1, r4
    a324:	orr.w	r1, r5, r3
    a328:	pop	{r4, r5, pc}
    a32a:	rsb	r4, r4, #12
    a32e:	rsb	r2, r4, #32
    a332:	lsr.w	r0, r0, r2
    a336:	lsl.w	r3, r1, r4
    a33a:	orr.w	r0, r0, r3
    a33e:	mov	r1, r5
    a340:	pop	{r4, r5, pc}
    a342:	lsr.w	r0, r1, r4
    a346:	mov	r1, r5
    a348:	pop	{r4, r5, pc}
    a34a:	teq	r4, #0
    a34e:	eor.w	r3, r3, #1048576	; 0x100000
    a352:	itte	eq
    a354:	eoreq.w	r1, r1, #1048576	; 0x100000
    a358:	addeq	r4, #1
    a35a:	subne	r5, #1
    a35c:	b.n	a1fc <__adddf3+0x8c>
    a35e:	mvns.w	ip, r4, asr #21
    a362:	it	ne
    a364:	mvnsne.w	ip, r5, asr #21
    a368:	beq.n	a3be <__adddf3+0x24e>
    a36a:	teq	r4, r5
    a36e:	it	eq
    a370:	teqeq	r0, r2
    a374:	beq.n	a382 <__adddf3+0x212>
    a376:	orrs.w	ip, r4, r0
    a37a:	itt	eq
    a37c:	moveq	r1, r3
    a37e:	moveq	r0, r2
    a380:	pop	{r4, r5, pc}
    a382:	teq	r1, r3
    a386:	ittt	ne
    a388:	movne	r1, #0
    a38a:	movne	r0, #0
    a38c:	popne	{r4, r5, pc}
    a38e:	movs.w	ip, r4, lsr #21
    a392:	bne.n	a3a0 <__adddf3+0x230>
    a394:	lsls	r0, r0, #1
    a396:	adcs	r1, r1
    a398:	it	cs
    a39a:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a39e:	pop	{r4, r5, pc}
    a3a0:	adds.w	r4, r4, #4194304	; 0x400000
    a3a4:	itt	cc
    a3a6:	addcc.w	r1, r1, #1048576	; 0x100000
    a3aa:	popcc	{r4, r5, pc}
    a3ac:	and.w	r5, r1, #2147483648	; 0x80000000
    a3b0:	orr.w	r1, r5, #2130706432	; 0x7f000000
    a3b4:	orr.w	r1, r1, #15728640	; 0xf00000
    a3b8:	mov.w	r0, #0
    a3bc:	pop	{r4, r5, pc}
    a3be:	mvns.w	ip, r4, asr #21
    a3c2:	itte	ne
    a3c4:	movne	r1, r3
    a3c6:	movne	r0, r2
    a3c8:	mvnseq.w	ip, r5, asr #21
    a3cc:	itt	ne
    a3ce:	movne	r3, r1
    a3d0:	movne	r2, r0
    a3d2:	orrs.w	r4, r0, r1, lsl #12
    a3d6:	itte	eq
    a3d8:	orrseq.w	r5, r2, r3, lsl #12
    a3dc:	teqeq	r1, r3
    a3e0:	orrne.w	r1, r1, #524288	; 0x80000
    a3e4:	pop	{r4, r5, pc}
    a3e6:	nop

0000a3e8 <__aeabi_ui2d>:
    a3e8:	teq	r0, #0
    a3ec:	itt	eq
    a3ee:	moveq	r1, #0
    a3f0:	bxeq	lr
    a3f2:	push	{r4, r5, lr}
    a3f4:	mov.w	r4, #1024	; 0x400
    a3f8:	add.w	r4, r4, #50	; 0x32
    a3fc:	mov.w	r5, #0
    a400:	mov.w	r1, #0
    a404:	b.n	a2a8 <__adddf3+0x138>
    a406:	nop

0000a408 <__aeabi_i2d>:
    a408:	teq	r0, #0
    a40c:	itt	eq
    a40e:	moveq	r1, #0
    a410:	bxeq	lr
    a412:	push	{r4, r5, lr}
    a414:	mov.w	r4, #1024	; 0x400
    a418:	add.w	r4, r4, #50	; 0x32
    a41c:	ands.w	r5, r0, #2147483648	; 0x80000000
    a420:	it	mi
    a422:	negmi	r0, r0
    a424:	mov.w	r1, #0
    a428:	b.n	a2a8 <__adddf3+0x138>
    a42a:	nop

0000a42c <__aeabi_f2d>:
    a42c:	lsls	r2, r0, #1
    a42e:	mov.w	r1, r2, asr #3
    a432:	mov.w	r1, r1, rrx
    a436:	mov.w	r0, r2, lsl #28
    a43a:	itttt	ne
    a43c:	andsne.w	r3, r2, #4278190080	; 0xff000000
    a440:	teqne	r3, #4278190080	; 0xff000000
    a444:	eorne.w	r1, r1, #939524096	; 0x38000000
    a448:	bxne	lr
    a44a:	teq	r2, #0
    a44e:	ite	ne
    a450:	teqne	r3, #4278190080	; 0xff000000
    a454:	bxeq	lr
    a456:	push	{r4, r5, lr}
    a458:	mov.w	r4, #896	; 0x380
    a45c:	and.w	r5, r1, #2147483648	; 0x80000000
    a460:	bic.w	r1, r1, #2147483648	; 0x80000000
    a464:	b.n	a2a8 <__adddf3+0x138>
    a466:	nop

0000a468 <__aeabi_ul2d>:
    a468:	orrs.w	r2, r0, r1
    a46c:	it	eq
    a46e:	bxeq	lr
    a470:	push	{r4, r5, lr}
    a472:	mov.w	r5, #0
    a476:	b.n	a48e <__aeabi_l2d+0x16>

0000a478 <__aeabi_l2d>:
    a478:	orrs.w	r2, r0, r1
    a47c:	it	eq
    a47e:	bxeq	lr
    a480:	push	{r4, r5, lr}
    a482:	ands.w	r5, r1, #2147483648	; 0x80000000
    a486:	bpl.n	a48e <__aeabi_l2d+0x16>
    a488:	negs	r0, r0
    a48a:	sbc.w	r1, r1, r1, lsl #1
    a48e:	mov.w	r4, #1024	; 0x400
    a492:	add.w	r4, r4, #50	; 0x32
    a496:	movs.w	ip, r1, lsr #22
    a49a:	beq.w	a256 <__adddf3+0xe6>
    a49e:	mov.w	r2, #3
    a4a2:	movs.w	ip, ip, lsr #3
    a4a6:	it	ne
    a4a8:	addne	r2, #3
    a4aa:	movs.w	ip, ip, lsr #3
    a4ae:	it	ne
    a4b0:	addne	r2, #3
    a4b2:	add.w	r2, r2, ip, lsr #3
    a4b6:	rsb	r3, r2, #32
    a4ba:	lsl.w	ip, r0, r3
    a4be:	lsr.w	r0, r0, r2
    a4c2:	lsl.w	lr, r1, r3
    a4c6:	orr.w	r0, r0, lr
    a4ca:	lsr.w	r1, r1, r2
    a4ce:	add	r4, r2
    a4d0:	b.n	a256 <__adddf3+0xe6>
    a4d2:	nop

0000a4d4 <__aeabi_dmul>:
    a4d4:	push	{r4, r5, r6, lr}
    a4d6:	mov.w	ip, #255	; 0xff
    a4da:	orr.w	ip, ip, #1792	; 0x700
    a4de:	ands.w	r4, ip, r1, lsr #20
    a4e2:	ittte	ne
    a4e4:	andsne.w	r5, ip, r3, lsr #20
    a4e8:	teqne	r4, ip
    a4ec:	teqne	r5, ip
    a4f0:	bleq	a6b0 <__aeabi_dmul+0x1dc>
    a4f4:	add	r4, r5
    a4f6:	eor.w	r6, r1, r3
    a4fa:	bic.w	r1, r1, ip, lsl #21
    a4fe:	bic.w	r3, r3, ip, lsl #21
    a502:	orrs.w	r5, r0, r1, lsl #12
    a506:	it	ne
    a508:	orrsne.w	r5, r2, r3, lsl #12
    a50c:	orr.w	r1, r1, #1048576	; 0x100000
    a510:	orr.w	r3, r3, #1048576	; 0x100000
    a514:	beq.n	a588 <__aeabi_dmul+0xb4>
    a516:	umull	ip, lr, r0, r2
    a51a:	mov.w	r5, #0
    a51e:	umlal	lr, r5, r1, r2
    a522:	and.w	r2, r6, #2147483648	; 0x80000000
    a526:	umlal	lr, r5, r0, r3
    a52a:	mov.w	r6, #0
    a52e:	umlal	r5, r6, r1, r3
    a532:	teq	ip, #0
    a536:	it	ne
    a538:	orrne.w	lr, lr, #1
    a53c:	sub.w	r4, r4, #255	; 0xff
    a540:	cmp.w	r6, #512	; 0x200
    a544:	sbc.w	r4, r4, #768	; 0x300
    a548:	bcs.n	a554 <__aeabi_dmul+0x80>
    a54a:	movs.w	lr, lr, lsl #1
    a54e:	adcs	r5, r5
    a550:	adc.w	r6, r6, r6
    a554:	orr.w	r1, r2, r6, lsl #11
    a558:	orr.w	r1, r1, r5, lsr #21
    a55c:	mov.w	r0, r5, lsl #11
    a560:	orr.w	r0, r0, lr, lsr #21
    a564:	mov.w	lr, lr, lsl #11
    a568:	subs.w	ip, r4, #253	; 0xfd
    a56c:	it	hi
    a56e:	cmphi.w	ip, #1792	; 0x700
    a572:	bhi.n	a5b2 <__aeabi_dmul+0xde>
    a574:	cmp.w	lr, #2147483648	; 0x80000000
    a578:	it	eq
    a57a:	movseq.w	lr, r0, lsr #1
    a57e:	adcs.w	r0, r0, #0
    a582:	adc.w	r1, r1, r4, lsl #20
    a586:	pop	{r4, r5, r6, pc}
    a588:	and.w	r6, r6, #2147483648	; 0x80000000
    a58c:	orr.w	r1, r6, r1
    a590:	orr.w	r0, r0, r2
    a594:	eor.w	r1, r1, r3
    a598:	subs.w	r4, r4, ip, lsr #1
    a59c:	ittt	gt
    a59e:	rsbsgt	r5, r4, ip
    a5a2:	orrgt.w	r1, r1, r4, lsl #20
    a5a6:	popgt	{r4, r5, r6, pc}
    a5a8:	orr.w	r1, r1, #1048576	; 0x100000
    a5ac:	mov.w	lr, #0
    a5b0:	subs	r4, #1
    a5b2:	bgt.w	a70c <__aeabi_dmul+0x238>
    a5b6:	cmn.w	r4, #54	; 0x36
    a5ba:	ittt	le
    a5bc:	movle	r0, #0
    a5be:	andle.w	r1, r1, #2147483648	; 0x80000000
    a5c2:	pople	{r4, r5, r6, pc}
    a5c4:	rsb	r4, r4, #0
    a5c8:	subs	r4, #32
    a5ca:	bge.n	a638 <__aeabi_dmul+0x164>
    a5cc:	adds	r4, #12
    a5ce:	bgt.n	a608 <__aeabi_dmul+0x134>
    a5d0:	add.w	r4, r4, #20
    a5d4:	rsb	r5, r4, #32
    a5d8:	lsl.w	r3, r0, r5
    a5dc:	lsr.w	r0, r0, r4
    a5e0:	lsl.w	r2, r1, r5
    a5e4:	orr.w	r0, r0, r2
    a5e8:	and.w	r2, r1, #2147483648	; 0x80000000
    a5ec:	bic.w	r1, r1, #2147483648	; 0x80000000
    a5f0:	adds.w	r0, r0, r3, lsr #31
    a5f4:	lsr.w	r6, r1, r4
    a5f8:	adc.w	r1, r2, r6
    a5fc:	orrs.w	lr, lr, r3, lsl #1
    a600:	it	eq
    a602:	biceq.w	r0, r0, r3, lsr #31
    a606:	pop	{r4, r5, r6, pc}
    a608:	rsb	r4, r4, #12
    a60c:	rsb	r5, r4, #32
    a610:	lsl.w	r3, r0, r4
    a614:	lsr.w	r0, r0, r5
    a618:	lsl.w	r2, r1, r4
    a61c:	orr.w	r0, r0, r2
    a620:	and.w	r1, r1, #2147483648	; 0x80000000
    a624:	adds.w	r0, r0, r3, lsr #31
    a628:	adc.w	r1, r1, #0
    a62c:	orrs.w	lr, lr, r3, lsl #1
    a630:	it	eq
    a632:	biceq.w	r0, r0, r3, lsr #31
    a636:	pop	{r4, r5, r6, pc}
    a638:	rsb	r5, r4, #32
    a63c:	lsl.w	r2, r0, r5
    a640:	orr.w	lr, lr, r2
    a644:	lsr.w	r3, r0, r4
    a648:	lsl.w	r2, r1, r5
    a64c:	orr.w	r3, r3, r2
    a650:	lsr.w	r0, r1, r4
    a654:	and.w	r1, r1, #2147483648	; 0x80000000
    a658:	lsr.w	r2, r1, r4
    a65c:	bic.w	r0, r0, r2
    a660:	add.w	r0, r0, r3, lsr #31
    a664:	orrs.w	lr, lr, r3, lsl #1
    a668:	it	eq
    a66a:	biceq.w	r0, r0, r3, lsr #31
    a66e:	pop	{r4, r5, r6, pc}
    a670:	teq	r4, #0
    a674:	bne.n	a696 <__aeabi_dmul+0x1c2>
    a676:	and.w	r6, r1, #2147483648	; 0x80000000
    a67a:	lsls	r0, r0, #1
    a67c:	adc.w	r1, r1, r1
    a680:	tst.w	r1, #1048576	; 0x100000
    a684:	it	eq
    a686:	subeq	r4, #1
    a688:	beq.n	a67a <__aeabi_dmul+0x1a6>
    a68a:	orr.w	r1, r1, r6
    a68e:	teq	r5, #0
    a692:	it	ne
    a694:	bxne	lr
    a696:	and.w	r6, r3, #2147483648	; 0x80000000
    a69a:	lsls	r2, r2, #1
    a69c:	adc.w	r3, r3, r3
    a6a0:	tst.w	r3, #1048576	; 0x100000
    a6a4:	it	eq
    a6a6:	subeq	r5, #1
    a6a8:	beq.n	a69a <__aeabi_dmul+0x1c6>
    a6aa:	orr.w	r3, r3, r6
    a6ae:	bx	lr
    a6b0:	teq	r4, ip
    a6b4:	and.w	r5, ip, r3, lsr #20
    a6b8:	it	ne
    a6ba:	teqne	r5, ip
    a6be:	beq.n	a6da <__aeabi_dmul+0x206>
    a6c0:	orrs.w	r6, r0, r1, lsl #1
    a6c4:	it	ne
    a6c6:	orrsne.w	r6, r2, r3, lsl #1
    a6ca:	bne.n	a670 <__aeabi_dmul+0x19c>
    a6cc:	eor.w	r1, r1, r3
    a6d0:	and.w	r1, r1, #2147483648	; 0x80000000
    a6d4:	mov.w	r0, #0
    a6d8:	pop	{r4, r5, r6, pc}
    a6da:	orrs.w	r6, r0, r1, lsl #1
    a6de:	itte	eq
    a6e0:	moveq	r0, r2
    a6e2:	moveq	r1, r3
    a6e4:	orrsne.w	r6, r2, r3, lsl #1
    a6e8:	beq.n	a71e <__aeabi_dmul+0x24a>
    a6ea:	teq	r4, ip
    a6ee:	bne.n	a6f6 <__aeabi_dmul+0x222>
    a6f0:	orrs.w	r6, r0, r1, lsl #12
    a6f4:	bne.n	a71e <__aeabi_dmul+0x24a>
    a6f6:	teq	r5, ip
    a6fa:	bne.n	a708 <__aeabi_dmul+0x234>
    a6fc:	orrs.w	r6, r2, r3, lsl #12
    a700:	itt	ne
    a702:	movne	r0, r2
    a704:	movne	r1, r3
    a706:	bne.n	a71e <__aeabi_dmul+0x24a>
    a708:	eor.w	r1, r1, r3
    a70c:	and.w	r1, r1, #2147483648	; 0x80000000
    a710:	orr.w	r1, r1, #2130706432	; 0x7f000000
    a714:	orr.w	r1, r1, #15728640	; 0xf00000
    a718:	mov.w	r0, #0
    a71c:	pop	{r4, r5, r6, pc}
    a71e:	orr.w	r1, r1, #2130706432	; 0x7f000000
    a722:	orr.w	r1, r1, #16252928	; 0xf80000
    a726:	pop	{r4, r5, r6, pc}

0000a728 <__aeabi_ddiv>:
    a728:	push	{r4, r5, r6, lr}
    a72a:	mov.w	ip, #255	; 0xff
    a72e:	orr.w	ip, ip, #1792	; 0x700
    a732:	ands.w	r4, ip, r1, lsr #20
    a736:	ittte	ne
    a738:	andsne.w	r5, ip, r3, lsr #20
    a73c:	teqne	r4, ip
    a740:	teqne	r5, ip
    a744:	bleq	a896 <__aeabi_ddiv+0x16e>
    a748:	sub.w	r4, r4, r5
    a74c:	eor.w	lr, r1, r3
    a750:	orrs.w	r5, r2, r3, lsl #12
    a754:	mov.w	r1, r1, lsl #12
    a758:	beq.w	a86c <__aeabi_ddiv+0x144>
    a75c:	mov.w	r3, r3, lsl #12
    a760:	mov.w	r5, #268435456	; 0x10000000
    a764:	orr.w	r3, r5, r3, lsr #4
    a768:	orr.w	r3, r3, r2, lsr #24
    a76c:	mov.w	r2, r2, lsl #8
    a770:	orr.w	r5, r5, r1, lsr #4
    a774:	orr.w	r5, r5, r0, lsr #24
    a778:	mov.w	r6, r0, lsl #8
    a77c:	and.w	r1, lr, #2147483648	; 0x80000000
    a780:	cmp	r5, r3
    a782:	it	eq
    a784:	cmpeq	r6, r2
    a786:	adc.w	r4, r4, #253	; 0xfd
    a78a:	add.w	r4, r4, #768	; 0x300
    a78e:	bcs.n	a796 <__aeabi_ddiv+0x6e>
    a790:	lsrs	r3, r3, #1
    a792:	mov.w	r2, r2, rrx
    a796:	subs	r6, r6, r2
    a798:	sbc.w	r5, r5, r3
    a79c:	lsrs	r3, r3, #1
    a79e:	mov.w	r2, r2, rrx
    a7a2:	mov.w	r0, #1048576	; 0x100000
    a7a6:	mov.w	ip, #524288	; 0x80000
    a7aa:	subs.w	lr, r6, r2
    a7ae:	sbcs.w	lr, r5, r3
    a7b2:	ittt	cs
    a7b4:	subcs	r6, r6, r2
    a7b6:	movcs	r5, lr
    a7b8:	orrcs.w	r0, r0, ip
    a7bc:	lsrs	r3, r3, #1
    a7be:	mov.w	r2, r2, rrx
    a7c2:	subs.w	lr, r6, r2
    a7c6:	sbcs.w	lr, r5, r3
    a7ca:	ittt	cs
    a7cc:	subcs	r6, r6, r2
    a7ce:	movcs	r5, lr
    a7d0:	orrcs.w	r0, r0, ip, lsr #1
    a7d4:	lsrs	r3, r3, #1
    a7d6:	mov.w	r2, r2, rrx
    a7da:	subs.w	lr, r6, r2
    a7de:	sbcs.w	lr, r5, r3
    a7e2:	ittt	cs
    a7e4:	subcs	r6, r6, r2
    a7e6:	movcs	r5, lr
    a7e8:	orrcs.w	r0, r0, ip, lsr #2
    a7ec:	lsrs	r3, r3, #1
    a7ee:	mov.w	r2, r2, rrx
    a7f2:	subs.w	lr, r6, r2
    a7f6:	sbcs.w	lr, r5, r3
    a7fa:	ittt	cs
    a7fc:	subcs	r6, r6, r2
    a7fe:	movcs	r5, lr
    a800:	orrcs.w	r0, r0, ip, lsr #3
    a804:	orrs.w	lr, r5, r6
    a808:	beq.n	a83c <__aeabi_ddiv+0x114>
    a80a:	mov.w	r5, r5, lsl #4
    a80e:	orr.w	r5, r5, r6, lsr #28
    a812:	mov.w	r6, r6, lsl #4
    a816:	mov.w	r3, r3, lsl #3
    a81a:	orr.w	r3, r3, r2, lsr #29
    a81e:	mov.w	r2, r2, lsl #3
    a822:	movs.w	ip, ip, lsr #4
    a826:	bne.n	a7aa <__aeabi_ddiv+0x82>
    a828:	tst.w	r1, #1048576	; 0x100000
    a82c:	bne.n	a846 <__aeabi_ddiv+0x11e>
    a82e:	orr.w	r1, r1, r0
    a832:	mov.w	r0, #0
    a836:	mov.w	ip, #2147483648	; 0x80000000
    a83a:	b.n	a7aa <__aeabi_ddiv+0x82>
    a83c:	tst.w	r1, #1048576	; 0x100000
    a840:	itt	eq
    a842:	orreq	r1, r0
    a844:	moveq	r0, #0
    a846:	subs.w	ip, r4, #253	; 0xfd
    a84a:	it	hi
    a84c:	cmphi.w	ip, #1792	; 0x700
    a850:	bhi.w	a5b2 <__aeabi_dmul+0xde>
    a854:	subs.w	ip, r5, r3
    a858:	itt	eq
    a85a:	subseq.w	ip, r6, r2
    a85e:	movseq.w	ip, r0, lsr #1
    a862:	adcs.w	r0, r0, #0
    a866:	adc.w	r1, r1, r4, lsl #20
    a86a:	pop	{r4, r5, r6, pc}
    a86c:	and.w	lr, lr, #2147483648	; 0x80000000
    a870:	orr.w	r1, lr, r1, lsr #12
    a874:	adds.w	r4, r4, ip, lsr #1
    a878:	ittt	gt
    a87a:	rsbsgt	r5, r4, ip
    a87e:	orrgt.w	r1, r1, r4, lsl #20
    a882:	popgt	{r4, r5, r6, pc}
    a884:	orr.w	r1, r1, #1048576	; 0x100000
    a888:	mov.w	lr, #0
    a88c:	subs	r4, #1
    a88e:	b.n	a5b2 <__aeabi_dmul+0xde>
    a890:	orr.w	lr, r5, r6
    a894:	b.n	a5b2 <__aeabi_dmul+0xde>
    a896:	and.w	r5, ip, r3, lsr #20
    a89a:	teq	r4, ip
    a89e:	it	eq
    a8a0:	teqeq	r5, ip
    a8a4:	beq.w	a71e <__aeabi_dmul+0x24a>
    a8a8:	teq	r4, ip
    a8ac:	bne.n	a8c4 <__aeabi_ddiv+0x19c>
    a8ae:	orrs.w	r4, r0, r1, lsl #12
    a8b2:	bne.w	a71e <__aeabi_dmul+0x24a>
    a8b6:	teq	r5, ip
    a8ba:	bne.w	a708 <__aeabi_dmul+0x234>
    a8be:	mov	r0, r2
    a8c0:	mov	r1, r3
    a8c2:	b.n	a71e <__aeabi_dmul+0x24a>
    a8c4:	teq	r5, ip
    a8c8:	bne.n	a8d8 <__aeabi_ddiv+0x1b0>
    a8ca:	orrs.w	r5, r2, r3, lsl #12
    a8ce:	beq.w	a6cc <__aeabi_dmul+0x1f8>
    a8d2:	mov	r0, r2
    a8d4:	mov	r1, r3
    a8d6:	b.n	a71e <__aeabi_dmul+0x24a>
    a8d8:	orrs.w	r6, r0, r1, lsl #1
    a8dc:	it	ne
    a8de:	orrsne.w	r6, r2, r3, lsl #1
    a8e2:	bne.w	a670 <__aeabi_dmul+0x19c>
    a8e6:	orrs.w	r4, r0, r1, lsl #1
    a8ea:	bne.w	a708 <__aeabi_dmul+0x234>
    a8ee:	orrs.w	r5, r2, r3, lsl #1
    a8f2:	bne.w	a6cc <__aeabi_dmul+0x1f8>
    a8f6:	b.n	a71e <__aeabi_dmul+0x24a>

0000a8f8 <__gedf2>:
    a8f8:	mov.w	ip, #4294967295
    a8fc:	b.n	a90c <__cmpdf2+0x4>
    a8fe:	nop

0000a900 <__ledf2>:
    a900:	mov.w	ip, #1
    a904:	b.n	a90c <__cmpdf2+0x4>
    a906:	nop

0000a908 <__cmpdf2>:
    a908:	mov.w	ip, #1
    a90c:	str.w	ip, [sp, #-4]!
    a910:	mov.w	ip, r1, lsl #1
    a914:	mvns.w	ip, ip, asr #21
    a918:	mov.w	ip, r3, lsl #1
    a91c:	it	ne
    a91e:	mvnsne.w	ip, ip, asr #21
    a922:	beq.n	a95c <__cmpdf2+0x54>
    a924:	add	sp, #4
    a926:	orrs.w	ip, r0, r1, lsl #1
    a92a:	ite	eq
    a92c:	orrseq.w	ip, r2, r3, lsl #1
    a930:	teqne	r1, r3
    a934:	ittt	eq
    a936:	teqeq	r0, r2
    a93a:	moveq	r0, #0
    a93c:	bxeq	lr
    a93e:	cmn.w	r0, #0
    a942:	teq	r1, r3
    a946:	it	pl
    a948:	cmppl	r1, r3
    a94a:	it	eq
    a94c:	cmpeq	r0, r2
    a94e:	ite	cs
    a950:	asrcs	r0, r3, #31
    a952:	mvncc.w	r0, r3, asr #31
    a956:	orr.w	r0, r0, #1
    a95a:	bx	lr
    a95c:	mov.w	ip, r1, lsl #1
    a960:	mvns.w	ip, ip, asr #21
    a964:	bne.n	a96c <__cmpdf2+0x64>
    a966:	orrs.w	ip, r0, r1, lsl #12
    a96a:	bne.n	a97c <__cmpdf2+0x74>
    a96c:	mov.w	ip, r3, lsl #1
    a970:	mvns.w	ip, ip, asr #21
    a974:	bne.n	a924 <__cmpdf2+0x1c>
    a976:	orrs.w	ip, r2, r3, lsl #12
    a97a:	beq.n	a924 <__cmpdf2+0x1c>
    a97c:	ldr.w	r0, [sp], #4
    a980:	bx	lr
    a982:	nop

0000a984 <__aeabi_cdrcmple>:
    a984:	mov	ip, r0
    a986:	mov	r0, r2
    a988:	mov	r2, ip
    a98a:	mov	ip, r1
    a98c:	mov	r1, r3
    a98e:	mov	r3, ip
    a990:	b.n	a994 <__aeabi_cdcmpeq>
    a992:	nop

0000a994 <__aeabi_cdcmpeq>:
    a994:	push	{r0, lr}
    a996:	bl	a908 <__cmpdf2>
    a99a:	cmp	r0, #0
    a99c:	it	mi
    a99e:	cmnmi.w	r0, #0
    a9a2:	pop	{r0, pc}

0000a9a4 <__aeabi_dcmpeq>:
    a9a4:	str.w	lr, [sp, #-8]!
    a9a8:	bl	a994 <__aeabi_cdcmpeq>
    a9ac:	ite	eq
    a9ae:	moveq	r0, #1
    a9b0:	movne	r0, #0
    a9b2:	ldr.w	pc, [sp], #8
    a9b6:	nop

0000a9b8 <__aeabi_dcmplt>:
    a9b8:	str.w	lr, [sp, #-8]!
    a9bc:	bl	a994 <__aeabi_cdcmpeq>
    a9c0:	ite	cc
    a9c2:	movcc	r0, #1
    a9c4:	movcs	r0, #0
    a9c6:	ldr.w	pc, [sp], #8
    a9ca:	nop

0000a9cc <__aeabi_dcmple>:
    a9cc:	str.w	lr, [sp, #-8]!
    a9d0:	bl	a994 <__aeabi_cdcmpeq>
    a9d4:	ite	ls
    a9d6:	movls	r0, #1
    a9d8:	movhi	r0, #0
    a9da:	ldr.w	pc, [sp], #8
    a9de:	nop

0000a9e0 <__aeabi_dcmpge>:
    a9e0:	str.w	lr, [sp, #-8]!
    a9e4:	bl	a984 <__aeabi_cdrcmple>
    a9e8:	ite	ls
    a9ea:	movls	r0, #1
    a9ec:	movhi	r0, #0
    a9ee:	ldr.w	pc, [sp], #8
    a9f2:	nop

0000a9f4 <__aeabi_dcmpgt>:
    a9f4:	str.w	lr, [sp, #-8]!
    a9f8:	bl	a984 <__aeabi_cdrcmple>
    a9fc:	ite	cc
    a9fe:	movcc	r0, #1
    aa00:	movcs	r0, #0
    aa02:	ldr.w	pc, [sp], #8
    aa06:	nop

0000aa08 <__aeabi_dcmpun>:
    aa08:	mov.w	ip, r1, lsl #1
    aa0c:	mvns.w	ip, ip, asr #21
    aa10:	bne.n	aa18 <__aeabi_dcmpun+0x10>
    aa12:	orrs.w	ip, r0, r1, lsl #12
    aa16:	bne.n	aa2e <__aeabi_dcmpun+0x26>
    aa18:	mov.w	ip, r3, lsl #1
    aa1c:	mvns.w	ip, ip, asr #21
    aa20:	bne.n	aa28 <__aeabi_dcmpun+0x20>
    aa22:	orrs.w	ip, r2, r3, lsl #12
    aa26:	bne.n	aa2e <__aeabi_dcmpun+0x26>
    aa28:	mov.w	r0, #0
    aa2c:	bx	lr
    aa2e:	mov.w	r0, #1
    aa32:	bx	lr

0000aa34 <__aeabi_d2iz>:
    aa34:	mov.w	r2, r1, lsl #1
    aa38:	adds.w	r2, r2, #2097152	; 0x200000
    aa3c:	bcs.n	aa6a <__aeabi_d2iz+0x36>
    aa3e:	bpl.n	aa64 <__aeabi_d2iz+0x30>
    aa40:	mvn.w	r3, #992	; 0x3e0
    aa44:	subs.w	r2, r3, r2, asr #21
    aa48:	bls.n	aa70 <__aeabi_d2iz+0x3c>
    aa4a:	mov.w	r3, r1, lsl #11
    aa4e:	orr.w	r3, r3, #2147483648	; 0x80000000
    aa52:	orr.w	r3, r3, r0, lsr #21
    aa56:	tst.w	r1, #2147483648	; 0x80000000
    aa5a:	lsr.w	r0, r3, r2
    aa5e:	it	ne
    aa60:	negne	r0, r0
    aa62:	bx	lr
    aa64:	mov.w	r0, #0
    aa68:	bx	lr
    aa6a:	orrs.w	r0, r0, r1, lsl #12
    aa6e:	bne.n	aa7c <__aeabi_d2iz+0x48>
    aa70:	ands.w	r0, r1, #2147483648	; 0x80000000
    aa74:	it	eq
    aa76:	mvneq.w	r0, #2147483648	; 0x80000000
    aa7a:	bx	lr
    aa7c:	mov.w	r0, #0
    aa80:	bx	lr
    aa82:	nop

0000aa84 <__aeabi_uldivmod>:
    aa84:	cbnz	r3, aa9c <__aeabi_uldivmod+0x18>
    aa86:	cbnz	r2, aa9c <__aeabi_uldivmod+0x18>
    aa88:	cmp	r1, #0
    aa8a:	it	eq
    aa8c:	cmpeq	r0, #0
    aa8e:	itt	ne
    aa90:	movne.w	r1, #4294967295
    aa94:	movne.w	r0, #4294967295
    aa98:	b.w	ad98 <__aeabi_idiv0>
    aa9c:	sub.w	ip, sp, #8
    aaa0:	strd	ip, lr, [sp, #-16]!
    aaa4:	bl	aab4 <__udivmoddi4>
    aaa8:	ldr.w	lr, [sp, #4]
    aaac:	ldrd	r2, r3, [sp, #8]
    aab0:	add	sp, #16
    aab2:	bx	lr

0000aab4 <__udivmoddi4>:
    aab4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aab8:	mov	ip, r1
    aaba:	mov	r6, r1
    aabc:	mov	r4, r0
    aabe:	ldr	r5, [sp, #32]
    aac0:	cmp	r3, #0
    aac2:	bne.n	ab66 <__udivmoddi4+0xb2>
    aac4:	cmp	r2, r1
    aac6:	mov	r7, r2
    aac8:	bls.n	aba4 <__udivmoddi4+0xf0>
    aaca:	clz	lr, r2
    aace:	cmp.w	lr, #0
    aad2:	beq.n	aaec <__udivmoddi4+0x38>
    aad4:	rsb	r4, lr, #32
    aad8:	lsr.w	r4, r0, r4
    aadc:	lsl.w	r6, r1, lr
    aae0:	orr.w	ip, r4, r6
    aae4:	lsl.w	r7, r2, lr
    aae8:	lsl.w	r4, r0, lr
    aaec:	mov.w	r9, r7, lsr #16
    aaf0:	lsrs	r2, r4, #16
    aaf2:	udiv	r0, ip, r9
    aaf6:	uxth.w	r8, r7
    aafa:	mls	r6, r9, r0, ip
    aafe:	orr.w	r6, r2, r6, lsl #16
    ab02:	mul.w	r3, r0, r8
    ab06:	cmp	r3, r6
    ab08:	bls.n	ab1e <__udivmoddi4+0x6a>
    ab0a:	adds	r6, r6, r7
    ab0c:	add.w	r2, r0, #4294967295
    ab10:	bcs.w	ad58 <__udivmoddi4+0x2a4>
    ab14:	cmp	r3, r6
    ab16:	bls.w	ad58 <__udivmoddi4+0x2a4>
    ab1a:	subs	r0, #2
    ab1c:	add	r6, r7
    ab1e:	subs	r6, r6, r3
    ab20:	uxth	r2, r4
    ab22:	udiv	r3, r6, r9
    ab26:	mls	r6, r9, r3, r6
    ab2a:	orr.w	r4, r2, r6, lsl #16
    ab2e:	mul.w	r8, r3, r8
    ab32:	cmp	r8, r4
    ab34:	bls.n	ab4a <__udivmoddi4+0x96>
    ab36:	adds	r4, r4, r7
    ab38:	add.w	r2, r3, #4294967295
    ab3c:	bcs.w	ad54 <__udivmoddi4+0x2a0>
    ab40:	cmp	r8, r4
    ab42:	bls.w	ad54 <__udivmoddi4+0x2a0>
    ab46:	subs	r3, #2
    ab48:	add	r4, r7
    ab4a:	rsb	r4, r8, r4
    ab4e:	orr.w	r0, r3, r0, lsl #16
    ab52:	movs	r1, #0
    ab54:	cmp	r5, #0
    ab56:	beq.n	ac1e <__udivmoddi4+0x16a>
    ab58:	lsr.w	r4, r4, lr
    ab5c:	movs	r3, #0
    ab5e:	str	r4, [r5, #0]
    ab60:	str	r3, [r5, #4]
    ab62:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab66:	cmp	r3, r1
    ab68:	bls.n	ab7a <__udivmoddi4+0xc6>
    ab6a:	cmp	r5, #0
    ab6c:	beq.n	ac1a <__udivmoddi4+0x166>
    ab6e:	movs	r1, #0
    ab70:	stmia.w	r5, {r0, r6}
    ab74:	mov	r0, r1
    ab76:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab7a:	clz	r1, r3
    ab7e:	cmp	r1, #0
    ab80:	bne.w	aca4 <__udivmoddi4+0x1f0>
    ab84:	cmp	r3, r6
    ab86:	bcc.n	ab8e <__udivmoddi4+0xda>
    ab88:	cmp	r2, r0
    ab8a:	bhi.w	ad7e <__udivmoddi4+0x2ca>
    ab8e:	subs	r4, r0, r2
    ab90:	sbc.w	r6, r6, r3
    ab94:	movs	r0, #1
    ab96:	mov	ip, r6
    ab98:	cmp	r5, #0
    ab9a:	beq.n	ac1e <__udivmoddi4+0x16a>
    ab9c:	stmia.w	r5, {r4, ip}
    aba0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aba4:	cbnz	r2, abac <__udivmoddi4+0xf8>
    aba6:	movs	r7, #1
    aba8:	udiv	r7, r7, r2
    abac:	clz	lr, r7
    abb0:	cmp.w	lr, #0
    abb4:	bne.n	ac22 <__udivmoddi4+0x16e>
    abb6:	subs	r3, r6, r7
    abb8:	mov.w	r8, r7, lsr #16
    abbc:	uxth.w	ip, r7
    abc0:	movs	r1, #1
    abc2:	udiv	r0, r3, r8
    abc6:	lsrs	r2, r4, #16
    abc8:	mls	r6, r8, r0, r3
    abcc:	orr.w	r6, r2, r6, lsl #16
    abd0:	mul.w	r3, ip, r0
    abd4:	cmp	r3, r6
    abd6:	bls.n	abe8 <__udivmoddi4+0x134>
    abd8:	adds	r6, r6, r7
    abda:	add.w	r2, r0, #4294967295
    abde:	bcs.n	abe6 <__udivmoddi4+0x132>
    abe0:	cmp	r3, r6
    abe2:	bhi.w	ad82 <__udivmoddi4+0x2ce>
    abe6:	mov	r0, r2
    abe8:	subs	r6, r6, r3
    abea:	uxth	r2, r4
    abec:	udiv	r3, r6, r8
    abf0:	mls	r6, r8, r3, r6
    abf4:	orr.w	r4, r2, r6, lsl #16
    abf8:	mul.w	ip, ip, r3
    abfc:	cmp	ip, r4
    abfe:	bls.n	ac10 <__udivmoddi4+0x15c>
    ac00:	adds	r4, r4, r7
    ac02:	add.w	r2, r3, #4294967295
    ac06:	bcs.n	ac0e <__udivmoddi4+0x15a>
    ac08:	cmp	ip, r4
    ac0a:	bhi.w	ad78 <__udivmoddi4+0x2c4>
    ac0e:	mov	r3, r2
    ac10:	rsb	r4, ip, r4
    ac14:	orr.w	r0, r3, r0, lsl #16
    ac18:	b.n	ab54 <__udivmoddi4+0xa0>
    ac1a:	mov	r1, r5
    ac1c:	mov	r0, r5
    ac1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac22:	rsb	r1, lr, #32
    ac26:	lsl.w	r3, r6, lr
    ac2a:	lsl.w	r7, r7, lr
    ac2e:	lsr.w	r9, r0, r1
    ac32:	mov.w	r8, r7, lsr #16
    ac36:	lsrs	r6, r1
    ac38:	orr.w	r9, r9, r3
    ac3c:	udiv	sl, r6, r8
    ac40:	mov.w	r4, r9, lsr #16
    ac44:	mls	r6, r8, sl, r6
    ac48:	uxth.w	ip, r7
    ac4c:	orr.w	r3, r4, r6, lsl #16
    ac50:	mul.w	r2, sl, ip
    ac54:	cmp	r2, r3
    ac56:	lsl.w	r4, r0, lr
    ac5a:	bls.n	ac72 <__udivmoddi4+0x1be>
    ac5c:	adds	r3, r3, r7
    ac5e:	add.w	r1, sl, #4294967295
    ac62:	bcs.w	ad74 <__udivmoddi4+0x2c0>
    ac66:	cmp	r2, r3
    ac68:	bls.w	ad74 <__udivmoddi4+0x2c0>
    ac6c:	sub.w	sl, sl, #2
    ac70:	add	r3, r7
    ac72:	subs	r3, r3, r2
    ac74:	uxth.w	r9, r9
    ac78:	udiv	r1, r3, r8
    ac7c:	mls	r3, r8, r1, r3
    ac80:	orr.w	r3, r9, r3, lsl #16
    ac84:	mul.w	r6, r1, ip
    ac88:	cmp	r6, r3
    ac8a:	bls.n	ac9c <__udivmoddi4+0x1e8>
    ac8c:	adds	r3, r3, r7
    ac8e:	add.w	r2, r1, #4294967295
    ac92:	bcs.n	ad6c <__udivmoddi4+0x2b8>
    ac94:	cmp	r6, r3
    ac96:	bls.n	ad6c <__udivmoddi4+0x2b8>
    ac98:	subs	r1, #2
    ac9a:	add	r3, r7
    ac9c:	subs	r3, r3, r6
    ac9e:	orr.w	r1, r1, sl, lsl #16
    aca2:	b.n	abc2 <__udivmoddi4+0x10e>
    aca4:	rsb	lr, r1, #32
    aca8:	lsr.w	r4, r2, lr
    acac:	lsls	r3, r1
    acae:	orrs	r3, r4
    acb0:	lsr.w	r7, r0, lr
    acb4:	lsl.w	r4, r6, r1
    acb8:	mov.w	ip, r3, lsr #16
    acbc:	lsr.w	r6, r6, lr
    acc0:	orrs	r4, r7
    acc2:	udiv	r9, r6, ip
    acc6:	lsrs	r7, r4, #16
    acc8:	mls	r6, ip, r9, r6
    accc:	uxth.w	r8, r3
    acd0:	orr.w	r6, r7, r6, lsl #16
    acd4:	mul.w	r7, r9, r8
    acd8:	cmp	r7, r6
    acda:	lsl.w	r2, r2, r1
    acde:	lsl.w	sl, r0, r1
    ace2:	bls.n	acf6 <__udivmoddi4+0x242>
    ace4:	adds	r6, r6, r3
    ace6:	add.w	r0, r9, #4294967295
    acea:	bcs.n	ad70 <__udivmoddi4+0x2bc>
    acec:	cmp	r7, r6
    acee:	bls.n	ad70 <__udivmoddi4+0x2bc>
    acf0:	sub.w	r9, r9, #2
    acf4:	add	r6, r3
    acf6:	subs	r6, r6, r7
    acf8:	uxth	r0, r4
    acfa:	udiv	r4, r6, ip
    acfe:	mls	r6, ip, r4, r6
    ad02:	orr.w	r7, r0, r6, lsl #16
    ad06:	mul.w	r8, r4, r8
    ad0a:	cmp	r8, r7
    ad0c:	bls.n	ad1e <__udivmoddi4+0x26a>
    ad0e:	adds	r7, r7, r3
    ad10:	add.w	r0, r4, #4294967295
    ad14:	bcs.n	ad68 <__udivmoddi4+0x2b4>
    ad16:	cmp	r8, r7
    ad18:	bls.n	ad68 <__udivmoddi4+0x2b4>
    ad1a:	subs	r4, #2
    ad1c:	add	r7, r3
    ad1e:	orr.w	r0, r4, r9, lsl #16
    ad22:	rsb	r7, r8, r7
    ad26:	umull	r8, r9, r0, r2
    ad2a:	cmp	r7, r9
    ad2c:	mov	r4, r8
    ad2e:	mov	r6, r9
    ad30:	bcc.n	ad5c <__udivmoddi4+0x2a8>
    ad32:	beq.n	ad88 <__udivmoddi4+0x2d4>
    ad34:	cbz	r5, ad90 <__udivmoddi4+0x2dc>
    ad36:	subs.w	r3, sl, r4
    ad3a:	sbc.w	r7, r7, r6
    ad3e:	lsl.w	lr, r7, lr
    ad42:	lsrs	r3, r1
    ad44:	lsrs	r7, r1
    ad46:	orr.w	r3, lr, r3
    ad4a:	stmia.w	r5, {r3, r7}
    ad4e:	movs	r1, #0
    ad50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad54:	mov	r3, r2
    ad56:	b.n	ab4a <__udivmoddi4+0x96>
    ad58:	mov	r0, r2
    ad5a:	b.n	ab1e <__udivmoddi4+0x6a>
    ad5c:	subs.w	r4, r8, r2
    ad60:	sbc.w	r6, r9, r3
    ad64:	subs	r0, #1
    ad66:	b.n	ad34 <__udivmoddi4+0x280>
    ad68:	mov	r4, r0
    ad6a:	b.n	ad1e <__udivmoddi4+0x26a>
    ad6c:	mov	r1, r2
    ad6e:	b.n	ac9c <__udivmoddi4+0x1e8>
    ad70:	mov	r9, r0
    ad72:	b.n	acf6 <__udivmoddi4+0x242>
    ad74:	mov	sl, r1
    ad76:	b.n	ac72 <__udivmoddi4+0x1be>
    ad78:	subs	r3, #2
    ad7a:	add	r4, r7
    ad7c:	b.n	ac10 <__udivmoddi4+0x15c>
    ad7e:	mov	r0, r1
    ad80:	b.n	ab98 <__udivmoddi4+0xe4>
    ad82:	subs	r0, #2
    ad84:	add	r6, r7
    ad86:	b.n	abe8 <__udivmoddi4+0x134>
    ad88:	cmp	sl, r8
    ad8a:	bcc.n	ad5c <__udivmoddi4+0x2a8>
    ad8c:	mov	r6, r7
    ad8e:	b.n	ad34 <__udivmoddi4+0x280>
    ad90:	mov	r1, r5
    ad92:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad96:	nop

0000ad98 <__aeabi_idiv0>:
    ad98:	bx	lr
    ad9a:	nop

0000ad9c <__cxa_atexit>:
    ad9c:	mov	r3, r2
    ad9e:	mov	r2, r1
    ada0:	mov	r1, r0
    ada2:	movs	r0, #2
    ada4:	b.w	bd68 <__register_exitproc>

0000ada8 <__errno>:
    ada8:	ldr	r3, [pc, #4]	; (adb0 <__errno+0x8>)
    adaa:	ldr	r0, [r3, #0]
    adac:	bx	lr
    adae:	nop
    adb0:	.word	0x20000d20

0000adb4 <__libc_init_array>:
    adb4:	push	{r4, r5, r6, lr}
    adb6:	ldr	r6, [pc, #60]	; (adf4 <__libc_init_array+0x40>)
    adb8:	ldr	r5, [pc, #60]	; (adf8 <__libc_init_array+0x44>)
    adba:	subs	r6, r6, r5
    adbc:	asrs	r6, r6, #2
    adbe:	it	ne
    adc0:	movne	r4, #0
    adc2:	beq.n	add0 <__libc_init_array+0x1c>
    adc4:	adds	r4, #1
    adc6:	ldr.w	r3, [r5], #4
    adca:	blx	r3
    adcc:	cmp	r6, r4
    adce:	bne.n	adc4 <__libc_init_array+0x10>
    add0:	ldr	r6, [pc, #40]	; (adfc <__libc_init_array+0x48>)
    add2:	ldr	r5, [pc, #44]	; (ae00 <__libc_init_array+0x4c>)
    add4:	subs	r6, r6, r5
    add6:	bl	eec0 <___init_veneer>
    adda:	asrs	r6, r6, #2
    addc:	it	ne
    adde:	movne	r4, #0
    ade0:	beq.n	adf0 <__libc_init_array+0x3c>
    ade2:	adds	r4, #1
    ade4:	ldr.w	r3, [r5], #4
    ade8:	blx	r3
    adea:	cmp	r6, r4
    adec:	bne.n	ade2 <__libc_init_array+0x2e>
    adee:	pop	{r4, r5, r6, pc}
    adf0:	pop	{r4, r5, r6, pc}
    adf2:	nop
    adf4:	.word	0x600017b0
    adf8:	.word	0x600017b0
    adfc:	.word	0x600017bc
    ae00:	.word	0x600017b0

0000ae04 <malloc>:
    ae04:	ldr	r3, [pc, #8]	; (ae10 <malloc+0xc>)
    ae06:	mov	r1, r0
    ae08:	ldr	r0, [r3, #0]
    ae0a:	b.w	ae24 <_malloc_r>
    ae0e:	nop
    ae10:	.word	0x20000d20

0000ae14 <free>:
    ae14:	ldr	r3, [pc, #8]	; (ae20 <free+0xc>)
    ae16:	mov	r1, r0
    ae18:	ldr	r0, [r3, #0]
    ae1a:	b.w	bea8 <_free_r>
    ae1e:	nop
    ae20:	.word	0x20000d20

0000ae24 <_malloc_r>:
    ae24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae28:	add.w	r5, r1, #11
    ae2c:	cmp	r5, #22
    ae2e:	sub	sp, #12
    ae30:	mov	r6, r0
    ae32:	bls.w	af74 <_malloc_r+0x150>
    ae36:	bics.w	r5, r5, #7
    ae3a:	bmi.w	afbc <_malloc_r+0x198>
    ae3e:	cmp	r1, r5
    ae40:	bhi.w	afbc <_malloc_r+0x198>
    ae44:	bl	b628 <__malloc_lock>
    ae48:	cmp.w	r5, #504	; 0x1f8
    ae4c:	bcc.w	b388 <_malloc_r+0x564>
    ae50:	lsrs	r3, r5, #9
    ae52:	beq.w	afca <_malloc_r+0x1a6>
    ae56:	cmp	r3, #4
    ae58:	bhi.w	b162 <_malloc_r+0x33e>
    ae5c:	lsrs	r0, r5, #6
    ae5e:	add.w	lr, r0, #57	; 0x39
    ae62:	mov.w	r3, lr, lsl #1
    ae66:	adds	r0, #56	; 0x38
    ae68:	ldr	r7, [pc, #784]	; (b17c <_malloc_r+0x358>)
    ae6a:	add.w	r3, r7, r3, lsl #2
    ae6e:	sub.w	r1, r3, #8
    ae72:	ldr	r4, [r3, #4]
    ae74:	cmp	r1, r4
    ae76:	bne.n	ae88 <_malloc_r+0x64>
    ae78:	b.n	afd4 <_malloc_r+0x1b0>
    ae7a:	cmp	r2, #0
    ae7c:	bge.w	afd8 <_malloc_r+0x1b4>
    ae80:	ldr	r4, [r4, #12]
    ae82:	cmp	r1, r4
    ae84:	beq.w	afd4 <_malloc_r+0x1b0>
    ae88:	ldr	r3, [r4, #4]
    ae8a:	bic.w	r3, r3, #3
    ae8e:	subs	r2, r3, r5
    ae90:	cmp	r2, #15
    ae92:	ble.n	ae7a <_malloc_r+0x56>
    ae94:	ldr	r1, [pc, #740]	; (b17c <_malloc_r+0x358>)
    ae96:	ldr	r4, [r7, #16]
    ae98:	add.w	lr, r1, #8
    ae9c:	cmp	r4, lr
    ae9e:	beq.w	b208 <_malloc_r+0x3e4>
    aea2:	ldr	r3, [r4, #4]
    aea4:	bic.w	r3, r3, #3
    aea8:	subs	r2, r3, r5
    aeaa:	cmp	r2, #15
    aeac:	bgt.w	b1e2 <_malloc_r+0x3be>
    aeb0:	cmp	r2, #0
    aeb2:	str.w	lr, [r1, #20]
    aeb6:	str.w	lr, [r1, #16]
    aeba:	bge.w	affa <_malloc_r+0x1d6>
    aebe:	cmp.w	r3, #512	; 0x200
    aec2:	bcs.w	b194 <_malloc_r+0x370>
    aec6:	lsrs	r3, r3, #3
    aec8:	add.w	ip, r3, #1
    aecc:	movs	r2, #1
    aece:	asrs	r3, r3, #2
    aed0:	lsl.w	r3, r2, r3
    aed4:	ldr	r2, [r1, #4]
    aed6:	ldr.w	r8, [r1, ip, lsl #3]
    aeda:	str.w	r8, [r4, #8]
    aede:	add.w	r9, r1, ip, lsl #3
    aee2:	orrs	r2, r3
    aee4:	sub.w	r3, r9, #8
    aee8:	str	r3, [r4, #12]
    aeea:	str	r2, [r1, #4]
    aeec:	str.w	r4, [r1, ip, lsl #3]
    aef0:	str.w	r4, [r8, #12]
    aef4:	asrs	r3, r0, #2
    aef6:	movs	r4, #1
    aef8:	lsls	r4, r3
    aefa:	cmp	r4, r2
    aefc:	bhi.w	b014 <_malloc_r+0x1f0>
    af00:	tst	r4, r2
    af02:	bne.n	af12 <_malloc_r+0xee>
    af04:	bic.w	r0, r0, #3
    af08:	lsls	r4, r4, #1
    af0a:	tst	r4, r2
    af0c:	add.w	r0, r0, #4
    af10:	beq.n	af08 <_malloc_r+0xe4>
    af12:	add.w	r9, r7, r0, lsl #3
    af16:	mov	ip, r9
    af18:	mov	r8, r0
    af1a:	ldr.w	r1, [ip, #12]
    af1e:	cmp	ip, r1
    af20:	bne.n	af32 <_malloc_r+0x10e>
    af22:	b.n	b20c <_malloc_r+0x3e8>
    af24:	cmp	r2, #0
    af26:	bge.w	b22c <_malloc_r+0x408>
    af2a:	ldr	r1, [r1, #12]
    af2c:	cmp	ip, r1
    af2e:	beq.w	b20c <_malloc_r+0x3e8>
    af32:	ldr	r3, [r1, #4]
    af34:	bic.w	r3, r3, #3
    af38:	subs	r2, r3, r5
    af3a:	cmp	r2, #15
    af3c:	ble.n	af24 <_malloc_r+0x100>
    af3e:	mov	r4, r1
    af40:	ldr.w	ip, [r1, #12]
    af44:	ldr.w	r8, [r4, #8]!
    af48:	adds	r3, r1, r5
    af4a:	orr.w	r5, r5, #1
    af4e:	str	r5, [r1, #4]
    af50:	orr.w	r1, r2, #1
    af54:	str.w	ip, [r8, #12]
    af58:	mov	r0, r6
    af5a:	str.w	r8, [ip, #8]
    af5e:	str	r3, [r7, #20]
    af60:	str	r3, [r7, #16]
    af62:	str.w	lr, [r3, #12]
    af66:	str.w	lr, [r3, #8]
    af6a:	str	r1, [r3, #4]
    af6c:	str	r2, [r3, r2]
    af6e:	bl	b62c <__malloc_unlock>
    af72:	b.n	afb4 <_malloc_r+0x190>
    af74:	cmp	r1, #16
    af76:	bhi.n	afbc <_malloc_r+0x198>
    af78:	bl	b628 <__malloc_lock>
    af7c:	movs	r5, #16
    af7e:	movs	r3, #6
    af80:	movs	r0, #2
    af82:	ldr	r7, [pc, #504]	; (b17c <_malloc_r+0x358>)
    af84:	add.w	r3, r7, r3, lsl #2
    af88:	sub.w	r2, r3, #8
    af8c:	ldr	r4, [r3, #4]
    af8e:	cmp	r4, r2
    af90:	beq.w	b21e <_malloc_r+0x3fa>
    af94:	ldr	r3, [r4, #4]
    af96:	ldr	r1, [r4, #12]
    af98:	ldr	r5, [r4, #8]
    af9a:	bic.w	r3, r3, #3
    af9e:	add	r3, r4
    afa0:	mov	r0, r6
    afa2:	ldr	r2, [r3, #4]
    afa4:	str	r1, [r5, #12]
    afa6:	orr.w	r2, r2, #1
    afaa:	str	r5, [r1, #8]
    afac:	str	r2, [r3, #4]
    afae:	bl	b62c <__malloc_unlock>
    afb2:	adds	r4, #8
    afb4:	mov	r0, r4
    afb6:	add	sp, #12
    afb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afbc:	movs	r4, #0
    afbe:	movs	r3, #12
    afc0:	mov	r0, r4
    afc2:	str	r3, [r6, #0]
    afc4:	add	sp, #12
    afc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afca:	movs	r3, #128	; 0x80
    afcc:	mov.w	lr, #64	; 0x40
    afd0:	movs	r0, #63	; 0x3f
    afd2:	b.n	ae68 <_malloc_r+0x44>
    afd4:	mov	r0, lr
    afd6:	b.n	ae94 <_malloc_r+0x70>
    afd8:	add	r3, r4
    afda:	ldr	r1, [r4, #12]
    afdc:	ldr	r2, [r3, #4]
    afde:	ldr	r5, [r4, #8]
    afe0:	orr.w	r2, r2, #1
    afe4:	str	r1, [r5, #12]
    afe6:	mov	r0, r6
    afe8:	str	r5, [r1, #8]
    afea:	str	r2, [r3, #4]
    afec:	bl	b62c <__malloc_unlock>
    aff0:	adds	r4, #8
    aff2:	mov	r0, r4
    aff4:	add	sp, #12
    aff6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    affa:	add	r3, r4
    affc:	mov	r0, r6
    affe:	ldr	r2, [r3, #4]
    b000:	orr.w	r2, r2, #1
    b004:	str	r2, [r3, #4]
    b006:	bl	b62c <__malloc_unlock>
    b00a:	adds	r4, #8
    b00c:	mov	r0, r4
    b00e:	add	sp, #12
    b010:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b014:	ldr	r4, [r7, #8]
    b016:	ldr	r3, [r4, #4]
    b018:	bic.w	r8, r3, #3
    b01c:	cmp	r8, r5
    b01e:	bcc.n	b02a <_malloc_r+0x206>
    b020:	rsb	r3, r5, r8
    b024:	cmp	r3, #15
    b026:	bgt.w	b142 <_malloc_r+0x31e>
    b02a:	ldr	r3, [pc, #340]	; (b180 <_malloc_r+0x35c>)
    b02c:	ldr.w	r9, [pc, #352]	; b190 <_malloc_r+0x36c>
    b030:	ldr	r2, [r3, #0]
    b032:	ldr.w	r3, [r9]
    b036:	adds	r3, #1
    b038:	add	r2, r5
    b03a:	add.w	sl, r4, r8
    b03e:	beq.w	b302 <_malloc_r+0x4de>
    b042:	add.w	r2, r2, #4096	; 0x1000
    b046:	adds	r2, #15
    b048:	bic.w	r2, r2, #4080	; 0xff0
    b04c:	bic.w	r2, r2, #15
    b050:	mov	r1, r2
    b052:	mov	r0, r6
    b054:	str	r2, [sp, #4]
    b056:	bl	ba10 <_sbrk_r>
    b05a:	cmp.w	r0, #4294967295
    b05e:	mov	fp, r0
    b060:	ldr	r2, [sp, #4]
    b062:	beq.w	b316 <_malloc_r+0x4f2>
    b066:	cmp	sl, r0
    b068:	bhi.w	b264 <_malloc_r+0x440>
    b06c:	ldr	r3, [pc, #276]	; (b184 <_malloc_r+0x360>)
    b06e:	ldr	r1, [r3, #0]
    b070:	cmp	sl, fp
    b072:	add	r1, r2
    b074:	str	r1, [r3, #0]
    b076:	beq.w	b320 <_malloc_r+0x4fc>
    b07a:	ldr.w	r0, [r9]
    b07e:	ldr.w	lr, [pc, #272]	; b190 <_malloc_r+0x36c>
    b082:	adds	r0, #1
    b084:	ittet	ne
    b086:	rsbne	sl, sl, fp
    b08a:	addne	r1, sl
    b08c:	streq.w	fp, [lr]
    b090:	strne	r1, [r3, #0]
    b092:	ands.w	r1, fp, #7
    b096:	beq.w	b2c8 <_malloc_r+0x4a4>
    b09a:	rsb	r0, r1, #8
    b09e:	rsb	r1, r1, #4096	; 0x1000
    b0a2:	add	fp, r0
    b0a4:	adds	r1, #8
    b0a6:	add	r2, fp
    b0a8:	ubfx	r2, r2, #0, #12
    b0ac:	rsb	r9, r2, r1
    b0b0:	mov	r1, r9
    b0b2:	mov	r0, r6
    b0b4:	str	r3, [sp, #4]
    b0b6:	bl	ba10 <_sbrk_r>
    b0ba:	adds	r3, r0, #1
    b0bc:	ldr	r3, [sp, #4]
    b0be:	beq.w	b340 <_malloc_r+0x51c>
    b0c2:	rsb	r2, fp, r0
    b0c6:	add	r2, r9
    b0c8:	orr.w	r2, r2, #1
    b0cc:	ldr	r1, [r3, #0]
    b0ce:	str.w	fp, [r7, #8]
    b0d2:	add	r1, r9
    b0d4:	cmp	r4, r7
    b0d6:	str.w	r2, [fp, #4]
    b0da:	str	r1, [r3, #0]
    b0dc:	ldr.w	r9, [pc, #164]	; b184 <_malloc_r+0x360>
    b0e0:	beq.n	b110 <_malloc_r+0x2ec>
    b0e2:	cmp.w	r8, #15
    b0e6:	bls.w	b2e4 <_malloc_r+0x4c0>
    b0ea:	ldr	r2, [r4, #4]
    b0ec:	sub.w	r3, r8, #12
    b0f0:	bic.w	r3, r3, #7
    b0f4:	adds	r0, r4, r3
    b0f6:	and.w	r2, r2, #1
    b0fa:	mov.w	lr, #5
    b0fe:	orrs	r2, r3
    b100:	cmp	r3, #15
    b102:	str	r2, [r4, #4]
    b104:	str.w	lr, [r0, #4]
    b108:	str.w	lr, [r0, #8]
    b10c:	bhi.w	b348 <_malloc_r+0x524>
    b110:	ldr	r3, [pc, #116]	; (b188 <_malloc_r+0x364>)
    b112:	ldr	r4, [r7, #8]
    b114:	ldr	r2, [r3, #0]
    b116:	cmp	r1, r2
    b118:	it	hi
    b11a:	strhi	r1, [r3, #0]
    b11c:	ldr	r3, [pc, #108]	; (b18c <_malloc_r+0x368>)
    b11e:	ldr	r2, [r3, #0]
    b120:	cmp	r1, r2
    b122:	ldr	r2, [r4, #4]
    b124:	it	hi
    b126:	strhi	r1, [r3, #0]
    b128:	bic.w	r2, r2, #3
    b12c:	cmp	r5, r2
    b12e:	sub.w	r3, r2, r5
    b132:	bhi.n	b138 <_malloc_r+0x314>
    b134:	cmp	r3, #15
    b136:	bgt.n	b142 <_malloc_r+0x31e>
    b138:	mov	r0, r6
    b13a:	bl	b62c <__malloc_unlock>
    b13e:	movs	r4, #0
    b140:	b.n	afb4 <_malloc_r+0x190>
    b142:	adds	r2, r4, r5
    b144:	orr.w	r3, r3, #1
    b148:	orr.w	r5, r5, #1
    b14c:	str	r5, [r4, #4]
    b14e:	mov	r0, r6
    b150:	str	r2, [r7, #8]
    b152:	str	r3, [r2, #4]
    b154:	bl	b62c <__malloc_unlock>
    b158:	adds	r4, #8
    b15a:	mov	r0, r4
    b15c:	add	sp, #12
    b15e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b162:	cmp	r3, #20
    b164:	bls.n	b24a <_malloc_r+0x426>
    b166:	cmp	r3, #84	; 0x54
    b168:	bhi.w	b2b4 <_malloc_r+0x490>
    b16c:	lsrs	r0, r5, #12
    b16e:	add.w	lr, r0, #111	; 0x6f
    b172:	mov.w	r3, lr, lsl #1
    b176:	adds	r0, #110	; 0x6e
    b178:	b.n	ae68 <_malloc_r+0x44>
    b17a:	nop
    b17c:	.word	0x20000e90
    b180:	.word	0x20004a84
    b184:	.word	0x20004a88
    b188:	.word	0x20004a80
    b18c:	.word	0x20004a7c
    b190:	.word	0x2000129c
    b194:	lsrs	r2, r3, #9
    b196:	cmp	r2, #4
    b198:	bls.n	b258 <_malloc_r+0x434>
    b19a:	cmp	r2, #20
    b19c:	bhi.w	b306 <_malloc_r+0x4e2>
    b1a0:	add.w	r1, r2, #92	; 0x5c
    b1a4:	lsls	r1, r1, #1
    b1a6:	adds	r2, #91	; 0x5b
    b1a8:	add.w	ip, r7, r1, lsl #2
    b1ac:	ldr.w	r1, [r7, r1, lsl #2]
    b1b0:	ldr.w	r8, [pc, #476]	; b390 <_malloc_r+0x56c>
    b1b4:	sub.w	ip, ip, #8
    b1b8:	cmp	ip, r1
    b1ba:	beq.w	b2ce <_malloc_r+0x4aa>
    b1be:	ldr	r2, [r1, #4]
    b1c0:	bic.w	r2, r2, #3
    b1c4:	cmp	r3, r2
    b1c6:	bcs.n	b1ce <_malloc_r+0x3aa>
    b1c8:	ldr	r1, [r1, #8]
    b1ca:	cmp	ip, r1
    b1cc:	bne.n	b1be <_malloc_r+0x39a>
    b1ce:	ldr.w	ip, [r1, #12]
    b1d2:	ldr	r2, [r7, #4]
    b1d4:	str.w	ip, [r4, #12]
    b1d8:	str	r1, [r4, #8]
    b1da:	str.w	r4, [ip, #8]
    b1de:	str	r4, [r1, #12]
    b1e0:	b.n	aef4 <_malloc_r+0xd0>
    b1e2:	adds	r3, r4, r5
    b1e4:	orr.w	r7, r2, #1
    b1e8:	orr.w	r5, r5, #1
    b1ec:	str	r5, [r4, #4]
    b1ee:	mov	r0, r6
    b1f0:	str	r3, [r1, #20]
    b1f2:	str	r3, [r1, #16]
    b1f4:	str.w	lr, [r3, #12]
    b1f8:	str.w	lr, [r3, #8]
    b1fc:	str	r7, [r3, #4]
    b1fe:	str	r2, [r3, r2]
    b200:	adds	r4, #8
    b202:	bl	b62c <__malloc_unlock>
    b206:	b.n	afb4 <_malloc_r+0x190>
    b208:	ldr	r2, [r1, #4]
    b20a:	b.n	aef4 <_malloc_r+0xd0>
    b20c:	add.w	r8, r8, #1
    b210:	tst.w	r8, #3
    b214:	add.w	ip, ip, #8
    b218:	bne.w	af1a <_malloc_r+0xf6>
    b21c:	b.n	b280 <_malloc_r+0x45c>
    b21e:	ldr	r4, [r3, #12]
    b220:	cmp	r3, r4
    b222:	it	eq
    b224:	addeq	r0, #2
    b226:	beq.w	ae94 <_malloc_r+0x70>
    b22a:	b.n	af94 <_malloc_r+0x170>
    b22c:	add	r3, r1
    b22e:	mov	r4, r1
    b230:	ldr	r2, [r3, #4]
    b232:	ldr	r1, [r1, #12]
    b234:	ldr.w	r5, [r4, #8]!
    b238:	orr.w	r2, r2, #1
    b23c:	str	r2, [r3, #4]
    b23e:	mov	r0, r6
    b240:	str	r1, [r5, #12]
    b242:	str	r5, [r1, #8]
    b244:	bl	b62c <__malloc_unlock>
    b248:	b.n	afb4 <_malloc_r+0x190>
    b24a:	add.w	lr, r3, #92	; 0x5c
    b24e:	add.w	r0, r3, #91	; 0x5b
    b252:	mov.w	r3, lr, lsl #1
    b256:	b.n	ae68 <_malloc_r+0x44>
    b258:	lsrs	r2, r3, #6
    b25a:	add.w	r1, r2, #57	; 0x39
    b25e:	lsls	r1, r1, #1
    b260:	adds	r2, #56	; 0x38
    b262:	b.n	b1a8 <_malloc_r+0x384>
    b264:	cmp	r4, r7
    b266:	ldr	r3, [pc, #296]	; (b390 <_malloc_r+0x56c>)
    b268:	beq.w	b06c <_malloc_r+0x248>
    b26c:	ldr	r4, [r3, #8]
    b26e:	ldr	r2, [r4, #4]
    b270:	bic.w	r2, r2, #3
    b274:	b.n	b12c <_malloc_r+0x308>
    b276:	ldr.w	r3, [r9], #-8
    b27a:	cmp	r9, r3
    b27c:	bne.w	b384 <_malloc_r+0x560>
    b280:	tst.w	r0, #3
    b284:	add.w	r0, r0, #4294967295
    b288:	bne.n	b276 <_malloc_r+0x452>
    b28a:	ldr	r3, [r7, #4]
    b28c:	bic.w	r3, r3, r4
    b290:	str	r3, [r7, #4]
    b292:	lsls	r4, r4, #1
    b294:	cmp	r4, r3
    b296:	bhi.w	b014 <_malloc_r+0x1f0>
    b29a:	cmp	r4, #0
    b29c:	beq.w	b014 <_malloc_r+0x1f0>
    b2a0:	tst	r4, r3
    b2a2:	mov	r0, r8
    b2a4:	bne.w	af12 <_malloc_r+0xee>
    b2a8:	lsls	r4, r4, #1
    b2aa:	tst	r4, r3
    b2ac:	add.w	r0, r0, #4
    b2b0:	beq.n	b2a8 <_malloc_r+0x484>
    b2b2:	b.n	af12 <_malloc_r+0xee>
    b2b4:	cmp.w	r3, #340	; 0x154
    b2b8:	bhi.n	b2ec <_malloc_r+0x4c8>
    b2ba:	lsrs	r0, r5, #15
    b2bc:	add.w	lr, r0, #120	; 0x78
    b2c0:	mov.w	r3, lr, lsl #1
    b2c4:	adds	r0, #119	; 0x77
    b2c6:	b.n	ae68 <_malloc_r+0x44>
    b2c8:	mov.w	r1, #4096	; 0x1000
    b2cc:	b.n	b0a6 <_malloc_r+0x282>
    b2ce:	movs	r1, #1
    b2d0:	ldr.w	r3, [r8, #4]
    b2d4:	asrs	r2, r2, #2
    b2d6:	lsl.w	r2, r1, r2
    b2da:	orrs	r2, r3
    b2dc:	str.w	r2, [r8, #4]
    b2e0:	mov	r1, ip
    b2e2:	b.n	b1d4 <_malloc_r+0x3b0>
    b2e4:	movs	r3, #1
    b2e6:	str.w	r3, [fp, #4]
    b2ea:	b.n	b138 <_malloc_r+0x314>
    b2ec:	movw	r2, #1364	; 0x554
    b2f0:	cmp	r3, r2
    b2f2:	bhi.n	b336 <_malloc_r+0x512>
    b2f4:	lsrs	r0, r5, #18
    b2f6:	add.w	lr, r0, #125	; 0x7d
    b2fa:	mov.w	r3, lr, lsl #1
    b2fe:	adds	r0, #124	; 0x7c
    b300:	b.n	ae68 <_malloc_r+0x44>
    b302:	adds	r2, #16
    b304:	b.n	b050 <_malloc_r+0x22c>
    b306:	cmp	r2, #84	; 0x54
    b308:	bhi.n	b358 <_malloc_r+0x534>
    b30a:	lsrs	r2, r3, #12
    b30c:	add.w	r1, r2, #111	; 0x6f
    b310:	lsls	r1, r1, #1
    b312:	adds	r2, #110	; 0x6e
    b314:	b.n	b1a8 <_malloc_r+0x384>
    b316:	ldr	r4, [r7, #8]
    b318:	ldr	r2, [r4, #4]
    b31a:	bic.w	r2, r2, #3
    b31e:	b.n	b12c <_malloc_r+0x308>
    b320:	ubfx	r0, sl, #0, #12
    b324:	cmp	r0, #0
    b326:	bne.w	b07a <_malloc_r+0x256>
    b32a:	add	r2, r8
    b32c:	ldr	r3, [r7, #8]
    b32e:	orr.w	r2, r2, #1
    b332:	str	r2, [r3, #4]
    b334:	b.n	b110 <_malloc_r+0x2ec>
    b336:	movs	r3, #254	; 0xfe
    b338:	mov.w	lr, #127	; 0x7f
    b33c:	movs	r0, #126	; 0x7e
    b33e:	b.n	ae68 <_malloc_r+0x44>
    b340:	movs	r2, #1
    b342:	mov.w	r9, #0
    b346:	b.n	b0cc <_malloc_r+0x2a8>
    b348:	add.w	r1, r4, #8
    b34c:	mov	r0, r6
    b34e:	bl	bea8 <_free_r>
    b352:	ldr.w	r1, [r9]
    b356:	b.n	b110 <_malloc_r+0x2ec>
    b358:	cmp.w	r2, #340	; 0x154
    b35c:	bhi.n	b36a <_malloc_r+0x546>
    b35e:	lsrs	r2, r3, #15
    b360:	add.w	r1, r2, #120	; 0x78
    b364:	lsls	r1, r1, #1
    b366:	adds	r2, #119	; 0x77
    b368:	b.n	b1a8 <_malloc_r+0x384>
    b36a:	movw	r1, #1364	; 0x554
    b36e:	cmp	r2, r1
    b370:	bhi.n	b37e <_malloc_r+0x55a>
    b372:	lsrs	r2, r3, #18
    b374:	add.w	r1, r2, #125	; 0x7d
    b378:	lsls	r1, r1, #1
    b37a:	adds	r2, #124	; 0x7c
    b37c:	b.n	b1a8 <_malloc_r+0x384>
    b37e:	movs	r1, #254	; 0xfe
    b380:	movs	r2, #126	; 0x7e
    b382:	b.n	b1a8 <_malloc_r+0x384>
    b384:	ldr	r3, [r7, #4]
    b386:	b.n	b292 <_malloc_r+0x46e>
    b388:	lsrs	r0, r5, #3
    b38a:	adds	r3, r0, #1
    b38c:	lsls	r3, r3, #1
    b38e:	b.n	af82 <_malloc_r+0x15e>
    b390:	.word	0x20000e90

0000b394 <__ascii_mbtowc>:
    b394:	sub	sp, #8
    b396:	cbz	r1, b3ac <__ascii_mbtowc+0x18>
    b398:	cbz	r2, b3b2 <__ascii_mbtowc+0x1e>
    b39a:	cbz	r3, b3b8 <__ascii_mbtowc+0x24>
    b39c:	ldrb	r3, [r2, #0]
    b39e:	str	r3, [r1, #0]
    b3a0:	ldrb	r2, [r2, #0]
    b3a2:	adds	r0, r2, #0
    b3a4:	it	ne
    b3a6:	movne	r0, #1
    b3a8:	add	sp, #8
    b3aa:	bx	lr
    b3ac:	add	r1, sp, #4
    b3ae:	cmp	r2, #0
    b3b0:	bne.n	b39a <__ascii_mbtowc+0x6>
    b3b2:	mov	r0, r2
    b3b4:	add	sp, #8
    b3b6:	bx	lr
    b3b8:	mvn.w	r0, #1
    b3bc:	b.n	b3a8 <__ascii_mbtowc+0x14>
    b3be:	nop

0000b3c0 <memchr>:
    b3c0:	and.w	r1, r1, #255	; 0xff
    b3c4:	cmp	r2, #16
    b3c6:	blt.n	b420 <memchr+0x60>
    b3c8:	tst.w	r0, #7
    b3cc:	beq.n	b3e0 <memchr+0x20>
    b3ce:	ldrb.w	r3, [r0], #1
    b3d2:	subs	r2, #1
    b3d4:	cmp	r3, r1
    b3d6:	beq.n	b434 <memchr+0x74>
    b3d8:	tst.w	r0, #7
    b3dc:	cbz	r2, b430 <memchr+0x70>
    b3de:	bne.n	b3ce <memchr+0xe>
    b3e0:	push	{r4, r5, r6, r7}
    b3e2:	orr.w	r1, r1, r1, lsl #8
    b3e6:	orr.w	r1, r1, r1, lsl #16
    b3ea:	bic.w	r4, r2, #7
    b3ee:	mvns.w	r7, #0
    b3f2:	movs	r3, #0
    b3f4:	ldrd	r5, r6, [r0], #8
    b3f8:	subs	r4, #8
    b3fa:	eor.w	r5, r5, r1
    b3fe:	eor.w	r6, r6, r1
    b402:	uadd8	r5, r5, r7
    b406:	sel	r5, r3, r7
    b40a:	uadd8	r6, r6, r7
    b40e:	sel	r6, r5, r7
    b412:	cbnz	r6, b438 <memchr+0x78>
    b414:	bne.n	b3f4 <memchr+0x34>
    b416:	pop	{r4, r5, r6, r7}
    b418:	and.w	r1, r1, #255	; 0xff
    b41c:	and.w	r2, r2, #7
    b420:	cbz	r2, b430 <memchr+0x70>
    b422:	ldrb.w	r3, [r0], #1
    b426:	subs	r2, #1
    b428:	eor.w	r3, r3, r1
    b42c:	cbz	r3, b434 <memchr+0x74>
    b42e:	bne.n	b422 <memchr+0x62>
    b430:	movs	r0, #0
    b432:	bx	lr
    b434:	subs	r0, #1
    b436:	bx	lr
    b438:	cmp	r5, #0
    b43a:	itte	eq
    b43c:	moveq	r5, r6
    b43e:	subeq	r0, #3
    b440:	subne	r0, #7
    b442:	tst.w	r5, #1
    b446:	bne.n	b458 <memchr+0x98>
    b448:	adds	r0, #1
    b44a:	tst.w	r5, #256	; 0x100
    b44e:	ittt	eq
    b450:	addeq	r0, #1
    b452:	tsteq.w	r5, #98304	; 0x18000
    b456:	addeq	r0, #1
    b458:	pop	{r4, r5, r6, r7}
    b45a:	subs	r0, #1
    b45c:	bx	lr
    b45e:	nop

0000b460 <memcmp>:
    b460:	cmp	r2, #3
    b462:	push	{r4, r5, r6}
    b464:	bls.n	b4b4 <memcmp+0x54>
    b466:	orr.w	r3, r0, r1
    b46a:	lsls	r3, r3, #30
    b46c:	beq.n	b492 <memcmp+0x32>
    b46e:	ldrb	r4, [r0, #0]
    b470:	ldrb	r5, [r1, #0]
    b472:	cmp	r4, r5
    b474:	bne.n	b4bc <memcmp+0x5c>
    b476:	add	r2, r0
    b478:	adds	r3, r0, #1
    b47a:	b.n	b488 <memcmp+0x28>
    b47c:	ldrb.w	r4, [r3], #1
    b480:	ldrb.w	r5, [r1, #1]!
    b484:	cmp	r4, r5
    b486:	bne.n	b4bc <memcmp+0x5c>
    b488:	cmp	r3, r2
    b48a:	bne.n	b47c <memcmp+0x1c>
    b48c:	movs	r0, #0
    b48e:	pop	{r4, r5, r6}
    b490:	bx	lr
    b492:	mov	r4, r1
    b494:	mov	r3, r0
    b496:	ldr	r6, [r3, #0]
    b498:	ldr	r5, [r4, #0]
    b49a:	cmp	r6, r5
    b49c:	mov	r0, r3
    b49e:	mov	r1, r4
    b4a0:	add.w	r3, r3, #4
    b4a4:	add.w	r4, r4, #4
    b4a8:	bne.n	b46e <memcmp+0xe>
    b4aa:	subs	r2, #4
    b4ac:	cmp	r2, #3
    b4ae:	mov	r0, r3
    b4b0:	mov	r1, r4
    b4b2:	bhi.n	b496 <memcmp+0x36>
    b4b4:	cmp	r2, #0
    b4b6:	bne.n	b46e <memcmp+0xe>
    b4b8:	mov	r0, r2
    b4ba:	b.n	b48e <memcmp+0x2e>
    b4bc:	subs	r0, r4, r5
    b4be:	pop	{r4, r5, r6}
    b4c0:	bx	lr
    b4c2:	nop

0000b4c4 <memmove>:
    b4c4:	cmp	r0, r1
    b4c6:	push	{r4, r5, r6, r7, lr}
    b4c8:	bls.n	b4e6 <memmove+0x22>
    b4ca:	adds	r3, r1, r2
    b4cc:	cmp	r0, r3
    b4ce:	bcs.n	b4e6 <memmove+0x22>
    b4d0:	adds	r1, r0, r2
    b4d2:	cmp	r2, #0
    b4d4:	beq.n	b57a <memmove+0xb6>
    b4d6:	subs	r2, r3, r2
    b4d8:	ldrb.w	r4, [r3, #-1]!
    b4dc:	strb.w	r4, [r1, #-1]!
    b4e0:	cmp	r3, r2
    b4e2:	bne.n	b4d8 <memmove+0x14>
    b4e4:	pop	{r4, r5, r6, r7, pc}
    b4e6:	cmp	r2, #15
    b4e8:	bls.n	b57c <memmove+0xb8>
    b4ea:	orr.w	r3, r1, r0
    b4ee:	lsls	r3, r3, #30
    b4f0:	bne.n	b580 <memmove+0xbc>
    b4f2:	add.w	r4, r0, #16
    b4f6:	add.w	r3, r1, #16
    b4fa:	mov	r5, r2
    b4fc:	ldr.w	r6, [r3, #-16]
    b500:	str.w	r6, [r4, #-16]
    b504:	ldr.w	r6, [r3, #-12]
    b508:	str.w	r6, [r4, #-12]
    b50c:	ldr.w	r6, [r3, #-8]
    b510:	str.w	r6, [r4, #-8]
    b514:	subs	r5, #16
    b516:	ldr.w	r6, [r3, #-4]
    b51a:	str.w	r6, [r4, #-4]
    b51e:	cmp	r5, #15
    b520:	add.w	r3, r3, #16
    b524:	add.w	r4, r4, #16
    b528:	bhi.n	b4fc <memmove+0x38>
    b52a:	sub.w	r3, r2, #16
    b52e:	bic.w	r3, r3, #15
    b532:	and.w	lr, r2, #15
    b536:	adds	r3, #16
    b538:	cmp.w	lr, #3
    b53c:	add	r1, r3
    b53e:	add	r3, r0
    b540:	bls.n	b586 <memmove+0xc2>
    b542:	subs	r6, r3, #4
    b544:	mov	r5, r1
    b546:	mov	r4, lr
    b548:	subs	r4, #4
    b54a:	ldr.w	r7, [r5], #4
    b54e:	str.w	r7, [r6, #4]!
    b552:	cmp	r4, #3
    b554:	bhi.n	b548 <memmove+0x84>
    b556:	sub.w	r4, lr, #4
    b55a:	bic.w	r4, r4, #3
    b55e:	adds	r4, #4
    b560:	add	r3, r4
    b562:	add	r1, r4
    b564:	and.w	r2, r2, #3
    b568:	cbz	r2, b584 <memmove+0xc0>
    b56a:	subs	r3, #1
    b56c:	add	r2, r1
    b56e:	ldrb.w	r4, [r1], #1
    b572:	strb.w	r4, [r3, #1]!
    b576:	cmp	r2, r1
    b578:	bne.n	b56e <memmove+0xaa>
    b57a:	pop	{r4, r5, r6, r7, pc}
    b57c:	mov	r3, r0
    b57e:	b.n	b568 <memmove+0xa4>
    b580:	mov	r3, r0
    b582:	b.n	b56a <memmove+0xa6>
    b584:	pop	{r4, r5, r6, r7, pc}
    b586:	mov	r2, lr
    b588:	b.n	b568 <memmove+0xa4>
    b58a:	nop

0000b58c <memset>:
    b58c:	push	{r4, r5, r6}
    b58e:	lsls	r4, r0, #30
    b590:	beq.n	b620 <memset+0x94>
    b592:	subs	r4, r2, #1
    b594:	cmp	r2, #0
    b596:	beq.n	b61c <memset+0x90>
    b598:	uxtb	r5, r1
    b59a:	mov	r3, r0
    b59c:	b.n	b5a4 <memset+0x18>
    b59e:	subs	r2, r4, #1
    b5a0:	cbz	r4, b61c <memset+0x90>
    b5a2:	mov	r4, r2
    b5a4:	strb.w	r5, [r3], #1
    b5a8:	lsls	r2, r3, #30
    b5aa:	bne.n	b59e <memset+0x12>
    b5ac:	cmp	r4, #3
    b5ae:	bls.n	b60e <memset+0x82>
    b5b0:	uxtb	r5, r1
    b5b2:	orr.w	r5, r5, r5, lsl #8
    b5b6:	cmp	r4, #15
    b5b8:	orr.w	r5, r5, r5, lsl #16
    b5bc:	bls.n	b5f2 <memset+0x66>
    b5be:	add.w	r2, r3, #16
    b5c2:	mov	r6, r4
    b5c4:	subs	r6, #16
    b5c6:	cmp	r6, #15
    b5c8:	str.w	r5, [r2, #-16]
    b5cc:	str.w	r5, [r2, #-12]
    b5d0:	str.w	r5, [r2, #-8]
    b5d4:	str.w	r5, [r2, #-4]
    b5d8:	add.w	r2, r2, #16
    b5dc:	bhi.n	b5c4 <memset+0x38>
    b5de:	sub.w	r2, r4, #16
    b5e2:	bic.w	r2, r2, #15
    b5e6:	and.w	r4, r4, #15
    b5ea:	adds	r2, #16
    b5ec:	cmp	r4, #3
    b5ee:	add	r3, r2
    b5f0:	bls.n	b60e <memset+0x82>
    b5f2:	mov	r6, r3
    b5f4:	mov	r2, r4
    b5f6:	subs	r2, #4
    b5f8:	cmp	r2, #3
    b5fa:	str.w	r5, [r6], #4
    b5fe:	bhi.n	b5f6 <memset+0x6a>
    b600:	subs	r2, r4, #4
    b602:	bic.w	r2, r2, #3
    b606:	adds	r2, #4
    b608:	add	r3, r2
    b60a:	and.w	r4, r4, #3
    b60e:	cbz	r4, b61c <memset+0x90>
    b610:	uxtb	r1, r1
    b612:	add	r4, r3
    b614:	strb.w	r1, [r3], #1
    b618:	cmp	r3, r4
    b61a:	bne.n	b614 <memset+0x88>
    b61c:	pop	{r4, r5, r6}
    b61e:	bx	lr
    b620:	mov	r4, r2
    b622:	mov	r3, r0
    b624:	b.n	b5ac <memset+0x20>
    b626:	nop

0000b628 <__malloc_lock>:
    b628:	bx	lr
    b62a:	nop

0000b62c <__malloc_unlock>:
    b62c:	bx	lr
    b62e:	nop

0000b630 <_realloc_r>:
    b630:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b634:	mov	r7, r2
    b636:	sub	sp, #12
    b638:	cmp	r1, #0
    b63a:	beq.w	b7c0 <_realloc_r+0x190>
    b63e:	mov	r6, r1
    b640:	mov	r9, r0
    b642:	add.w	r5, r7, #11
    b646:	bl	b628 <__malloc_lock>
    b64a:	ldr.w	lr, [r6, #-4]
    b64e:	cmp	r5, #22
    b650:	bic.w	r4, lr, #3
    b654:	sub.w	r8, r6, #8
    b658:	bhi.n	b6dc <_realloc_r+0xac>
    b65a:	movs	r2, #16
    b65c:	mov	r5, r2
    b65e:	cmp	r7, r5
    b660:	bhi.n	b6e6 <_realloc_r+0xb6>
    b662:	cmp	r4, r2
    b664:	bge.n	b752 <_realloc_r+0x122>
    b666:	ldr	r3, [pc, #804]	; (b98c <_realloc_r+0x35c>)
    b668:	ldr	r1, [r3, #8]
    b66a:	add.w	r0, r8, r4
    b66e:	cmp	r0, r1
    b670:	ldr	r1, [r0, #4]
    b672:	beq.w	b828 <_realloc_r+0x1f8>
    b676:	bic.w	r3, r1, #1
    b67a:	add	r3, r0
    b67c:	ldr	r3, [r3, #4]
    b67e:	lsls	r3, r3, #31
    b680:	bpl.n	b77e <_realloc_r+0x14e>
    b682:	tst.w	lr, #1
    b686:	beq.n	b6f4 <_realloc_r+0xc4>
    b688:	mov	r1, r7
    b68a:	mov	r0, r9
    b68c:	bl	ae24 <_malloc_r>
    b690:	mov	r7, r0
    b692:	cbz	r0, b6ce <_realloc_r+0x9e>
    b694:	ldr.w	r3, [r6, #-4]
    b698:	bic.w	r3, r3, #1
    b69c:	add	r3, r8
    b69e:	sub.w	r2, r0, #8
    b6a2:	cmp	r2, r3
    b6a4:	beq.w	b930 <_realloc_r+0x300>
    b6a8:	subs	r2, r4, #4
    b6aa:	cmp	r2, #36	; 0x24
    b6ac:	bhi.w	b912 <_realloc_r+0x2e2>
    b6b0:	cmp	r2, #19
    b6b2:	bhi.w	b8be <_realloc_r+0x28e>
    b6b6:	mov	r3, r0
    b6b8:	mov	r2, r6
    b6ba:	ldr	r1, [r2, #0]
    b6bc:	str	r1, [r3, #0]
    b6be:	ldr	r1, [r2, #4]
    b6c0:	str	r1, [r3, #4]
    b6c2:	ldr	r2, [r2, #8]
    b6c4:	str	r2, [r3, #8]
    b6c6:	mov	r1, r6
    b6c8:	mov	r0, r9
    b6ca:	bl	bea8 <_free_r>
    b6ce:	mov	r0, r9
    b6d0:	bl	b62c <__malloc_unlock>
    b6d4:	mov	r0, r7
    b6d6:	add	sp, #12
    b6d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6dc:	bic.w	r5, r5, #7
    b6e0:	cmp	r5, #0
    b6e2:	mov	r2, r5
    b6e4:	bge.n	b65e <_realloc_r+0x2e>
    b6e6:	movs	r3, #12
    b6e8:	movs	r0, #0
    b6ea:	str.w	r3, [r9]
    b6ee:	add	sp, #12
    b6f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6f4:	ldr.w	r3, [r6, #-8]
    b6f8:	rsb	sl, r3, r8
    b6fc:	ldr.w	r3, [sl, #4]
    b700:	bic.w	ip, r3, #3
    b704:	add.w	r3, r4, ip
    b708:	cmp	r3, r2
    b70a:	blt.n	b688 <_realloc_r+0x58>
    b70c:	mov	r7, sl
    b70e:	ldr.w	r1, [sl, #12]
    b712:	ldr.w	r0, [r7, #8]!
    b716:	subs	r2, r4, #4
    b718:	cmp	r2, #36	; 0x24
    b71a:	str	r1, [r0, #12]
    b71c:	str	r0, [r1, #8]
    b71e:	bhi.w	b950 <_realloc_r+0x320>
    b722:	cmp	r2, #19
    b724:	bls.w	b94c <_realloc_r+0x31c>
    b728:	ldr	r1, [r6, #0]
    b72a:	str.w	r1, [sl, #8]
    b72e:	ldr	r1, [r6, #4]
    b730:	str.w	r1, [sl, #12]
    b734:	cmp	r2, #27
    b736:	bhi.w	b990 <_realloc_r+0x360>
    b73a:	adds	r6, #8
    b73c:	add.w	r2, sl, #16
    b740:	ldr	r1, [r6, #0]
    b742:	str	r1, [r2, #0]
    b744:	ldr	r1, [r6, #4]
    b746:	str	r1, [r2, #4]
    b748:	ldr	r1, [r6, #8]
    b74a:	str	r1, [r2, #8]
    b74c:	mov	r6, r7
    b74e:	mov	r4, r3
    b750:	mov	r8, sl
    b752:	subs	r3, r4, r5
    b754:	cmp	r3, #15
    b756:	bhi.n	b794 <_realloc_r+0x164>
    b758:	ldr.w	r3, [r8, #4]
    b75c:	and.w	r3, r3, #1
    b760:	orrs	r3, r4
    b762:	add	r4, r8
    b764:	str.w	r3, [r8, #4]
    b768:	ldr	r3, [r4, #4]
    b76a:	orr.w	r3, r3, #1
    b76e:	str	r3, [r4, #4]
    b770:	mov	r0, r9
    b772:	bl	b62c <__malloc_unlock>
    b776:	mov	r0, r6
    b778:	add	sp, #12
    b77a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b77e:	bic.w	r1, r1, #3
    b782:	add	r1, r4
    b784:	cmp	r1, r2
    b786:	blt.n	b7cc <_realloc_r+0x19c>
    b788:	ldr	r3, [r0, #12]
    b78a:	ldr	r2, [r0, #8]
    b78c:	mov	r4, r1
    b78e:	str	r3, [r2, #12]
    b790:	str	r2, [r3, #8]
    b792:	b.n	b752 <_realloc_r+0x122>
    b794:	ldr.w	r2, [r8, #4]
    b798:	add.w	r1, r8, r5
    b79c:	and.w	r2, r2, #1
    b7a0:	orrs	r5, r2
    b7a2:	orr.w	r2, r3, #1
    b7a6:	add	r3, r1
    b7a8:	str.w	r5, [r8, #4]
    b7ac:	str	r2, [r1, #4]
    b7ae:	ldr	r2, [r3, #4]
    b7b0:	orr.w	r2, r2, #1
    b7b4:	adds	r1, #8
    b7b6:	str	r2, [r3, #4]
    b7b8:	mov	r0, r9
    b7ba:	bl	bea8 <_free_r>
    b7be:	b.n	b770 <_realloc_r+0x140>
    b7c0:	mov	r1, r2
    b7c2:	add	sp, #12
    b7c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7c8:	b.w	ae24 <_malloc_r>
    b7cc:	tst.w	lr, #1
    b7d0:	bne.w	b688 <_realloc_r+0x58>
    b7d4:	ldr.w	r3, [r6, #-8]
    b7d8:	rsb	sl, r3, r8
    b7dc:	ldr.w	r3, [sl, #4]
    b7e0:	bic.w	ip, r3, #3
    b7e4:	add.w	lr, r1, ip
    b7e8:	cmp	lr, r2
    b7ea:	blt.n	b704 <_realloc_r+0xd4>
    b7ec:	ldr	r3, [r0, #12]
    b7ee:	ldr	r2, [r0, #8]
    b7f0:	mov	r7, sl
    b7f2:	str	r3, [r2, #12]
    b7f4:	str	r2, [r3, #8]
    b7f6:	ldr.w	r1, [r7, #8]!
    b7fa:	ldr.w	r3, [sl, #12]
    b7fe:	str	r3, [r1, #12]
    b800:	subs	r2, r4, #4
    b802:	cmp	r2, #36	; 0x24
    b804:	str	r1, [r3, #8]
    b806:	bhi.w	b93c <_realloc_r+0x30c>
    b80a:	cmp	r2, #19
    b80c:	bls.n	b8d4 <_realloc_r+0x2a4>
    b80e:	ldr	r3, [r6, #0]
    b810:	str.w	r3, [sl, #8]
    b814:	ldr	r3, [r6, #4]
    b816:	str.w	r3, [sl, #12]
    b81a:	cmp	r2, #27
    b81c:	bhi.w	b960 <_realloc_r+0x330>
    b820:	adds	r6, #8
    b822:	add.w	r3, sl, #16
    b826:	b.n	b8d6 <_realloc_r+0x2a6>
    b828:	bic.w	fp, r1, #3
    b82c:	add	fp, r4
    b82e:	add.w	r0, r5, #16
    b832:	cmp	fp, r0
    b834:	bge.n	b8ea <_realloc_r+0x2ba>
    b836:	tst.w	lr, #1
    b83a:	bne.w	b688 <_realloc_r+0x58>
    b83e:	ldr.w	r1, [r6, #-8]
    b842:	rsb	sl, r1, r8
    b846:	ldr.w	r1, [sl, #4]
    b84a:	bic.w	ip, r1, #3
    b84e:	add	fp, ip
    b850:	cmp	r0, fp
    b852:	bgt.w	b704 <_realloc_r+0xd4>
    b856:	mov	r7, sl
    b858:	ldr.w	r1, [sl, #12]
    b85c:	ldr.w	r0, [r7, #8]!
    b860:	subs	r2, r4, #4
    b862:	cmp	r2, #36	; 0x24
    b864:	str	r1, [r0, #12]
    b866:	str	r0, [r1, #8]
    b868:	bhi.w	b9d4 <_realloc_r+0x3a4>
    b86c:	cmp	r2, #19
    b86e:	bls.w	b9bc <_realloc_r+0x38c>
    b872:	ldr	r1, [r6, #0]
    b874:	str.w	r1, [sl, #8]
    b878:	ldr	r1, [r6, #4]
    b87a:	str.w	r1, [sl, #12]
    b87e:	cmp	r2, #27
    b880:	bhi.w	b9e2 <_realloc_r+0x3b2>
    b884:	adds	r6, #8
    b886:	add.w	r2, sl, #16
    b88a:	ldr	r1, [r6, #0]
    b88c:	str	r1, [r2, #0]
    b88e:	ldr	r1, [r6, #4]
    b890:	str	r1, [r2, #4]
    b892:	ldr	r1, [r6, #8]
    b894:	str	r1, [r2, #8]
    b896:	add.w	r1, sl, r5
    b89a:	rsb	r2, r5, fp
    b89e:	orr.w	r2, r2, #1
    b8a2:	str	r1, [r3, #8]
    b8a4:	str	r2, [r1, #4]
    b8a6:	ldr.w	r3, [sl, #4]
    b8aa:	and.w	r3, r3, #1
    b8ae:	orrs	r5, r3
    b8b0:	mov	r0, r9
    b8b2:	str.w	r5, [sl, #4]
    b8b6:	bl	b62c <__malloc_unlock>
    b8ba:	mov	r0, r7
    b8bc:	b.n	b778 <_realloc_r+0x148>
    b8be:	ldr	r3, [r6, #0]
    b8c0:	str	r3, [r0, #0]
    b8c2:	ldr	r3, [r6, #4]
    b8c4:	str	r3, [r0, #4]
    b8c6:	cmp	r2, #27
    b8c8:	bhi.n	b91a <_realloc_r+0x2ea>
    b8ca:	add.w	r3, r0, #8
    b8ce:	add.w	r2, r6, #8
    b8d2:	b.n	b6ba <_realloc_r+0x8a>
    b8d4:	mov	r3, r7
    b8d6:	ldr	r2, [r6, #0]
    b8d8:	str	r2, [r3, #0]
    b8da:	ldr	r2, [r6, #4]
    b8dc:	str	r2, [r3, #4]
    b8de:	ldr	r2, [r6, #8]
    b8e0:	str	r2, [r3, #8]
    b8e2:	mov	r6, r7
    b8e4:	mov	r4, lr
    b8e6:	mov	r8, sl
    b8e8:	b.n	b752 <_realloc_r+0x122>
    b8ea:	add.w	r1, r8, r5
    b8ee:	rsb	fp, r5, fp
    b8f2:	orr.w	r2, fp, #1
    b8f6:	str	r1, [r3, #8]
    b8f8:	str	r2, [r1, #4]
    b8fa:	ldr.w	r3, [r6, #-4]
    b8fe:	and.w	r3, r3, #1
    b902:	orrs	r5, r3
    b904:	mov	r0, r9
    b906:	str.w	r5, [r6, #-4]
    b90a:	bl	b62c <__malloc_unlock>
    b90e:	mov	r0, r6
    b910:	b.n	b778 <_realloc_r+0x148>
    b912:	mov	r1, r6
    b914:	bl	b4c4 <memmove>
    b918:	b.n	b6c6 <_realloc_r+0x96>
    b91a:	ldr	r3, [r6, #8]
    b91c:	str	r3, [r0, #8]
    b91e:	ldr	r3, [r6, #12]
    b920:	str	r3, [r0, #12]
    b922:	cmp	r2, #36	; 0x24
    b924:	beq.n	b978 <_realloc_r+0x348>
    b926:	add.w	r3, r0, #16
    b92a:	add.w	r2, r6, #16
    b92e:	b.n	b6ba <_realloc_r+0x8a>
    b930:	ldr.w	r3, [r0, #-4]
    b934:	bic.w	r3, r3, #3
    b938:	add	r4, r3
    b93a:	b.n	b752 <_realloc_r+0x122>
    b93c:	mov	r1, r6
    b93e:	mov	r0, r7
    b940:	mov	r4, lr
    b942:	mov	r8, sl
    b944:	bl	b4c4 <memmove>
    b948:	mov	r6, r7
    b94a:	b.n	b752 <_realloc_r+0x122>
    b94c:	mov	r2, r7
    b94e:	b.n	b740 <_realloc_r+0x110>
    b950:	mov	r1, r6
    b952:	mov	r0, r7
    b954:	mov	r4, r3
    b956:	mov	r8, sl
    b958:	bl	b4c4 <memmove>
    b95c:	mov	r6, r7
    b95e:	b.n	b752 <_realloc_r+0x122>
    b960:	ldr	r3, [r6, #8]
    b962:	str.w	r3, [sl, #16]
    b966:	ldr	r3, [r6, #12]
    b968:	str.w	r3, [sl, #20]
    b96c:	cmp	r2, #36	; 0x24
    b96e:	beq.n	b9a8 <_realloc_r+0x378>
    b970:	adds	r6, #16
    b972:	add.w	r3, sl, #24
    b976:	b.n	b8d6 <_realloc_r+0x2a6>
    b978:	ldr	r3, [r6, #16]
    b97a:	str	r3, [r0, #16]
    b97c:	ldr	r3, [r6, #20]
    b97e:	str	r3, [r0, #20]
    b980:	add.w	r2, r6, #24
    b984:	add.w	r3, r0, #24
    b988:	b.n	b6ba <_realloc_r+0x8a>
    b98a:	nop
    b98c:	.word	0x20000e90
    b990:	ldr	r1, [r6, #8]
    b992:	str.w	r1, [sl, #16]
    b996:	ldr	r1, [r6, #12]
    b998:	str.w	r1, [sl, #20]
    b99c:	cmp	r2, #36	; 0x24
    b99e:	beq.n	b9c0 <_realloc_r+0x390>
    b9a0:	adds	r6, #16
    b9a2:	add.w	r2, sl, #24
    b9a6:	b.n	b740 <_realloc_r+0x110>
    b9a8:	ldr	r3, [r6, #16]
    b9aa:	str.w	r3, [sl, #24]
    b9ae:	ldr	r3, [r6, #20]
    b9b0:	str.w	r3, [sl, #28]
    b9b4:	adds	r6, #24
    b9b6:	add.w	r3, sl, #32
    b9ba:	b.n	b8d6 <_realloc_r+0x2a6>
    b9bc:	mov	r2, r7
    b9be:	b.n	b88a <_realloc_r+0x25a>
    b9c0:	ldr	r2, [r6, #16]
    b9c2:	str.w	r2, [sl, #24]
    b9c6:	ldr	r2, [r6, #20]
    b9c8:	str.w	r2, [sl, #28]
    b9cc:	adds	r6, #24
    b9ce:	add.w	r2, sl, #32
    b9d2:	b.n	b740 <_realloc_r+0x110>
    b9d4:	mov	r1, r6
    b9d6:	mov	r0, r7
    b9d8:	str	r3, [sp, #4]
    b9da:	bl	b4c4 <memmove>
    b9de:	ldr	r3, [sp, #4]
    b9e0:	b.n	b896 <_realloc_r+0x266>
    b9e2:	ldr	r1, [r6, #8]
    b9e4:	str.w	r1, [sl, #16]
    b9e8:	ldr	r1, [r6, #12]
    b9ea:	str.w	r1, [sl, #20]
    b9ee:	cmp	r2, #36	; 0x24
    b9f0:	beq.n	b9fa <_realloc_r+0x3ca>
    b9f2:	adds	r6, #16
    b9f4:	add.w	r2, sl, #24
    b9f8:	b.n	b88a <_realloc_r+0x25a>
    b9fa:	ldr	r2, [r6, #16]
    b9fc:	str.w	r2, [sl, #24]
    ba00:	ldr	r2, [r6, #20]
    ba02:	str.w	r2, [sl, #28]
    ba06:	adds	r6, #24
    ba08:	add.w	r2, sl, #32
    ba0c:	b.n	b88a <_realloc_r+0x25a>
    ba0e:	nop

0000ba10 <_sbrk_r>:
    ba10:	push	{r3, r4, r5, lr}
    ba12:	ldr	r4, [pc, #28]	; (ba30 <_sbrk_r+0x20>)
    ba14:	movs	r3, #0
    ba16:	mov	r5, r0
    ba18:	mov	r0, r1
    ba1a:	str	r3, [r4, #0]
    ba1c:	bl	84f0 <_sbrk>
    ba20:	adds	r3, r0, #1
    ba22:	beq.n	ba26 <_sbrk_r+0x16>
    ba24:	pop	{r3, r4, r5, pc}
    ba26:	ldr	r3, [r4, #0]
    ba28:	cmp	r3, #0
    ba2a:	beq.n	ba24 <_sbrk_r+0x14>
    ba2c:	str	r3, [r5, #0]
    ba2e:	pop	{r3, r4, r5, pc}
    ba30:	.word	0x20006304

0000ba34 <strcat>:
    ba34:	lsls	r3, r0, #30
    ba36:	push	{r4, lr}
    ba38:	mov	r4, r0
    ba3a:	bne.n	ba5e <strcat+0x2a>
    ba3c:	ldr	r2, [r0, #0]
    ba3e:	sub.w	r3, r2, #16843009	; 0x1010101
    ba42:	bic.w	r3, r3, r2
    ba46:	tst.w	r3, #2155905152	; 0x80808080
    ba4a:	bne.n	ba5e <strcat+0x2a>
    ba4c:	ldr.w	r2, [r0, #4]!
    ba50:	sub.w	r3, r2, #16843009	; 0x1010101
    ba54:	bic.w	r3, r3, r2
    ba58:	tst.w	r3, #2155905152	; 0x80808080
    ba5c:	beq.n	ba4c <strcat+0x18>
    ba5e:	ldrb	r3, [r0, #0]
    ba60:	cbz	r3, ba6a <strcat+0x36>
    ba62:	ldrb.w	r3, [r0, #1]!
    ba66:	cmp	r3, #0
    ba68:	bne.n	ba62 <strcat+0x2e>
    ba6a:	bl	ba74 <strcpy>
    ba6e:	mov	r0, r4
    ba70:	pop	{r4, pc}
    ba72:	nop

0000ba74 <strcpy>:
    ba74:	eor.w	r2, r0, r1
    ba78:	mov	ip, r0
    ba7a:	tst.w	r2, #3
    ba7e:	bne.n	bb20 <strcpy+0xac>
    ba80:	tst.w	r1, #3
    ba84:	bne.n	baec <strcpy+0x78>
    ba86:	str.w	r4, [sp, #-4]!
    ba8a:	tst.w	r1, #4
    ba8e:	ldr.w	r3, [r1], #4
    ba92:	beq.n	baac <strcpy+0x38>
    ba94:	sub.w	r2, r3, #16843009	; 0x1010101
    ba98:	bics	r2, r3
    ba9a:	tst.w	r2, #2155905152	; 0x80808080
    ba9e:	itt	eq
    baa0:	streq.w	r3, [ip], #4
    baa4:	ldreq.w	r3, [r1], #4
    baa8:	bne.n	bad8 <strcpy+0x64>
    baaa:	nop
    baac:	ldr.w	r4, [r1], #4
    bab0:	sub.w	r2, r3, #16843009	; 0x1010101
    bab4:	bics	r2, r3
    bab6:	tst.w	r2, #2155905152	; 0x80808080
    baba:	sub.w	r2, r4, #16843009	; 0x1010101
    babe:	bne.n	bad8 <strcpy+0x64>
    bac0:	str.w	r3, [ip], #4
    bac4:	bics	r2, r4
    bac6:	tst.w	r2, #2155905152	; 0x80808080
    baca:	itt	eq
    bacc:	ldreq.w	r3, [r1], #4
    bad0:	streq.w	r4, [ip], #4
    bad4:	beq.n	baac <strcpy+0x38>
    bad6:	mov	r3, r4
    bad8:	strb.w	r3, [ip], #1
    badc:	tst.w	r3, #255	; 0xff
    bae0:	mov.w	r3, r3, ror #8
    bae4:	bne.n	bad8 <strcpy+0x64>
    bae6:	ldr.w	r4, [sp], #4
    baea:	bx	lr
    baec:	tst.w	r1, #1
    baf0:	beq.n	bb00 <strcpy+0x8c>
    baf2:	ldrb.w	r2, [r1], #1
    baf6:	strb.w	r2, [ip], #1
    bafa:	cmp	r2, #0
    bafc:	it	eq
    bafe:	bxeq	lr
    bb00:	tst.w	r1, #2
    bb04:	beq.n	ba86 <strcpy+0x12>
    bb06:	ldrh.w	r2, [r1], #2
    bb0a:	tst.w	r2, #255	; 0xff
    bb0e:	itet	ne
    bb10:	strhne.w	r2, [ip], #2
    bb14:	strbeq.w	r2, [ip]
    bb18:	tstne.w	r2, #65280	; 0xff00
    bb1c:	bne.n	ba86 <strcpy+0x12>
    bb1e:	bx	lr
    bb20:	ldrb.w	r2, [r1], #1
    bb24:	strb.w	r2, [ip], #1
    bb28:	cmp	r2, #0
    bb2a:	bne.n	bb20 <strcpy+0xac>
    bb2c:	bx	lr
    bb2e:	nop
	...

0000bb40 <strlen>:
    bb40:	pld	[r0]
    bb44:	strd	r4, r5, [sp, #-8]!
    bb48:	bic.w	r1, r0, #7
    bb4c:	mvn.w	ip, #0
    bb50:	ands.w	r4, r0, #7
    bb54:	pld	[r1, #32]
    bb58:	bne.w	bbee <strlen+0xae>
    bb5c:	mov.w	r4, #0
    bb60:	mvn.w	r0, #7
    bb64:	ldrd	r2, r3, [r1]
    bb68:	pld	[r1, #64]	; 0x40
    bb6c:	add.w	r0, r0, #8
    bb70:	uadd8	r2, r2, ip
    bb74:	sel	r2, r4, ip
    bb78:	uadd8	r3, r3, ip
    bb7c:	sel	r3, r2, ip
    bb80:	cbnz	r3, bbd6 <strlen+0x96>
    bb82:	ldrd	r2, r3, [r1, #8]
    bb86:	uadd8	r2, r2, ip
    bb8a:	add.w	r0, r0, #8
    bb8e:	sel	r2, r4, ip
    bb92:	uadd8	r3, r3, ip
    bb96:	sel	r3, r2, ip
    bb9a:	cbnz	r3, bbd6 <strlen+0x96>
    bb9c:	ldrd	r2, r3, [r1, #16]
    bba0:	uadd8	r2, r2, ip
    bba4:	add.w	r0, r0, #8
    bba8:	sel	r2, r4, ip
    bbac:	uadd8	r3, r3, ip
    bbb0:	sel	r3, r2, ip
    bbb4:	cbnz	r3, bbd6 <strlen+0x96>
    bbb6:	ldrd	r2, r3, [r1, #24]
    bbba:	add.w	r1, r1, #32
    bbbe:	uadd8	r2, r2, ip
    bbc2:	add.w	r0, r0, #8
    bbc6:	sel	r2, r4, ip
    bbca:	uadd8	r3, r3, ip
    bbce:	sel	r3, r2, ip
    bbd2:	cmp	r3, #0
    bbd4:	beq.n	bb64 <strlen+0x24>
    bbd6:	cmp	r2, #0
    bbd8:	itt	eq
    bbda:	addeq	r0, #4
    bbdc:	moveq	r2, r3
    bbde:	rev	r2, r2
    bbe0:	clz	r2, r2
    bbe4:	ldrd	r4, r5, [sp], #8
    bbe8:	add.w	r0, r0, r2, lsr #3
    bbec:	bx	lr
    bbee:	ldrd	r2, r3, [r1]
    bbf2:	and.w	r5, r4, #3
    bbf6:	rsb	r0, r4, #0
    bbfa:	mov.w	r5, r5, lsl #3
    bbfe:	tst.w	r4, #4
    bc02:	pld	[r1, #64]	; 0x40
    bc06:	lsl.w	r5, ip, r5
    bc0a:	orn	r2, r2, r5
    bc0e:	itt	ne
    bc10:	ornne	r3, r3, r5
    bc14:	movne	r2, ip
    bc16:	mov.w	r4, #0
    bc1a:	b.n	bb70 <strlen+0x30>

0000bc1c <strncmp>:
    bc1c:	cmp	r2, #0
    bc1e:	beq.n	bca4 <strncmp+0x88>
    bc20:	orr.w	r3, r0, r1
    bc24:	ands.w	r3, r3, #3
    bc28:	push	{r4, r5, r6, r7}
    bc2a:	bne.n	bc78 <strncmp+0x5c>
    bc2c:	cmp	r2, #3
    bc2e:	bls.n	bc78 <strncmp+0x5c>
    bc30:	ldr	r4, [r0, #0]
    bc32:	ldr	r5, [r1, #0]
    bc34:	cmp	r4, r5
    bc36:	bne.n	bc78 <strncmp+0x5c>
    bc38:	subs	r2, #4
    bc3a:	beq.n	bca8 <strncmp+0x8c>
    bc3c:	sub.w	r5, r4, #16843009	; 0x1010101
    bc40:	bic.w	r4, r5, r4
    bc44:	tst.w	r4, #2155905152	; 0x80808080
    bc48:	bne.n	bcae <strncmp+0x92>
    bc4a:	adds	r7, r0, #4
    bc4c:	adds	r5, r1, #4
    bc4e:	b.n	bc6c <strncmp+0x50>
    bc50:	ldr.w	r3, [r7], #4
    bc54:	ldr	r6, [r1, #0]
    bc56:	sub.w	r4, r3, #16843009	; 0x1010101
    bc5a:	cmp	r3, r6
    bc5c:	bic.w	r4, r4, r3
    bc60:	bne.n	bc78 <strncmp+0x5c>
    bc62:	subs	r2, #4
    bc64:	beq.n	bca8 <strncmp+0x8c>
    bc66:	tst.w	r4, #2155905152	; 0x80808080
    bc6a:	bne.n	bcb4 <strncmp+0x98>
    bc6c:	cmp	r2, #3
    bc6e:	mov	r1, r5
    bc70:	mov	r0, r7
    bc72:	add.w	r5, r5, #4
    bc76:	bhi.n	bc50 <strncmp+0x34>
    bc78:	ldrb	r3, [r0, #0]
    bc7a:	ldrb	r4, [r1, #0]
    bc7c:	cmp	r4, r3
    bc7e:	add.w	r2, r2, #4294967295
    bc82:	bne.n	bc9e <strncmp+0x82>
    bc84:	cbz	r2, bca8 <strncmp+0x8c>
    bc86:	cbnz	r4, bc8e <strncmp+0x72>
    bc88:	b.n	bcb8 <strncmp+0x9c>
    bc8a:	cbz	r2, bca8 <strncmp+0x8c>
    bc8c:	cbz	r3, bcae <strncmp+0x92>
    bc8e:	ldrb.w	r3, [r0, #1]!
    bc92:	ldrb.w	r4, [r1, #1]!
    bc96:	cmp	r3, r4
    bc98:	add.w	r2, r2, #4294967295
    bc9c:	beq.n	bc8a <strncmp+0x6e>
    bc9e:	subs	r0, r3, r4
    bca0:	pop	{r4, r5, r6, r7}
    bca2:	bx	lr
    bca4:	mov	r0, r2
    bca6:	bx	lr
    bca8:	mov	r0, r2
    bcaa:	pop	{r4, r5, r6, r7}
    bcac:	bx	lr
    bcae:	mov	r0, r3
    bcb0:	pop	{r4, r5, r6, r7}
    bcb2:	bx	lr
    bcb4:	movs	r0, #0
    bcb6:	b.n	bca0 <strncmp+0x84>
    bcb8:	mov	r0, r4
    bcba:	b.n	bca0 <strncmp+0x84>

0000bcbc <_vdprintf_r>:
    bcbc:	push	{r4, r5, r6, r7, lr}
    bcbe:	sub.w	sp, sp, #532	; 0x214
    bcc2:	add	r5, sp, #16
    bcc4:	str	r3, [sp, #0]
    bcc6:	mov	r7, r1
    bcc8:	mov	r3, r2
    bcca:	mov.w	r4, #512	; 0x200
    bcce:	add	r2, sp, #12
    bcd0:	mov	r1, r5
    bcd2:	str	r4, [sp, #12]
    bcd4:	mov	r6, r0
    bcd6:	bl	c6b8 <_vasnprintf_r>
    bcda:	cbz	r0, bd00 <_vdprintf_r+0x44>
    bcdc:	mov	r4, r0
    bcde:	mov	r2, r0
    bce0:	mov	r1, r7
    bce2:	ldr	r3, [sp, #12]
    bce4:	mov	r0, r6
    bce6:	bl	bd3c <_write_r>
    bcea:	cmp	r4, r5
    bcec:	str	r0, [sp, #12]
    bcee:	beq.n	bcfa <_vdprintf_r+0x3e>
    bcf0:	mov	r0, r6
    bcf2:	mov	r1, r4
    bcf4:	bl	bea8 <_free_r>
    bcf8:	ldr	r0, [sp, #12]
    bcfa:	add.w	sp, sp, #532	; 0x214
    bcfe:	pop	{r4, r5, r6, r7, pc}
    bd00:	mov.w	r0, #4294967295
    bd04:	b.n	bcfa <_vdprintf_r+0x3e>
    bd06:	nop

0000bd08 <vdprintf>:
    bd08:	push	{r4}
    bd0a:	ldr	r4, [pc, #16]	; (bd1c <vdprintf+0x14>)
    bd0c:	mov	r3, r2
    bd0e:	mov	r2, r1
    bd10:	mov	r1, r0
    bd12:	ldr	r0, [r4, #0]
    bd14:	ldr.w	r4, [sp], #4
    bd18:	b.w	bcbc <_vdprintf_r>
    bd1c:	.word	0x20000d20

0000bd20 <__ascii_wctomb>:
    bd20:	cbz	r1, bd2c <__ascii_wctomb+0xc>
    bd22:	cmp	r2, #255	; 0xff
    bd24:	bhi.n	bd30 <__ascii_wctomb+0x10>
    bd26:	strb	r2, [r1, #0]
    bd28:	movs	r0, #1
    bd2a:	bx	lr
    bd2c:	mov	r0, r1
    bd2e:	bx	lr
    bd30:	movs	r3, #138	; 0x8a
    bd32:	str	r3, [r0, #0]
    bd34:	mov.w	r0, #4294967295
    bd38:	bx	lr
    bd3a:	nop

0000bd3c <_write_r>:
    bd3c:	push	{r4, r5, r6, lr}
    bd3e:	mov	r5, r1
    bd40:	ldr	r4, [pc, #32]	; (bd64 <_write_r+0x28>)
    bd42:	mov	r1, r2
    bd44:	mov	r6, r0
    bd46:	mov	r2, r3
    bd48:	mov	r0, r5
    bd4a:	movs	r3, #0
    bd4c:	str	r3, [r4, #0]
    bd4e:	bl	a07c <_write>
    bd52:	adds	r3, r0, #1
    bd54:	beq.n	bd58 <_write_r+0x1c>
    bd56:	pop	{r4, r5, r6, pc}
    bd58:	ldr	r3, [r4, #0]
    bd5a:	cmp	r3, #0
    bd5c:	beq.n	bd56 <_write_r+0x1a>
    bd5e:	str	r3, [r6, #0]
    bd60:	pop	{r4, r5, r6, pc}
    bd62:	nop
    bd64:	.word	0x20006304

0000bd68 <__register_exitproc>:
    bd68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd6c:	ldr	r4, [pc, #148]	; (be04 <__register_exitproc+0x9c>)
    bd6e:	ldr	r5, [r4, #0]
    bd70:	ldr.w	r4, [r5, #328]	; 0x148
    bd74:	mov	r6, r0
    bd76:	mov	r8, r1
    bd78:	mov	sl, r2
    bd7a:	mov	r9, r3
    bd7c:	cbz	r4, bdf0 <__register_exitproc+0x88>
    bd7e:	ldr	r0, [r4, #4]
    bd80:	cmp	r0, #31
    bd82:	bgt.n	bdb4 <__register_exitproc+0x4c>
    bd84:	adds	r3, r0, #1
    bd86:	cbz	r6, bda6 <__register_exitproc+0x3e>
    bd88:	add.w	r5, r4, r0, lsl #2
    bd8c:	movs	r2, #1
    bd8e:	str.w	sl, [r5, #136]	; 0x88
    bd92:	ldr.w	r1, [r4, #392]	; 0x188
    bd96:	lsls	r2, r0
    bd98:	orrs	r1, r2
    bd9a:	cmp	r6, #2
    bd9c:	str.w	r1, [r4, #392]	; 0x188
    bda0:	str.w	r9, [r5, #264]	; 0x108
    bda4:	beq.n	bde4 <__register_exitproc+0x7c>
    bda6:	adds	r0, #2
    bda8:	str	r3, [r4, #4]
    bdaa:	str.w	r8, [r4, r0, lsl #2]
    bdae:	movs	r0, #0
    bdb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdb4:	ldr	r3, [pc, #80]	; (be08 <__register_exitproc+0xa0>)
    bdb6:	cbz	r3, bdfa <__register_exitproc+0x92>
    bdb8:	mov.w	r0, #400	; 0x190
    bdbc:	bl	ae04 <malloc>
    bdc0:	mov	r4, r0
    bdc2:	cbz	r0, bdfa <__register_exitproc+0x92>
    bdc4:	ldr.w	r3, [r5, #328]	; 0x148
    bdc8:	movs	r7, #0
    bdca:	stmia.w	r0, {r3, r7}
    bdce:	str.w	r4, [r5, #328]	; 0x148
    bdd2:	mov	r0, r7
    bdd4:	movs	r3, #1
    bdd6:	str.w	r7, [r4, #392]	; 0x188
    bdda:	str.w	r7, [r4, #396]	; 0x18c
    bdde:	cmp	r6, #0
    bde0:	beq.n	bda6 <__register_exitproc+0x3e>
    bde2:	b.n	bd88 <__register_exitproc+0x20>
    bde4:	ldr.w	r1, [r4, #396]	; 0x18c
    bde8:	orrs	r2, r1
    bdea:	str.w	r2, [r4, #396]	; 0x18c
    bdee:	b.n	bda6 <__register_exitproc+0x3e>
    bdf0:	add.w	r4, r5, #332	; 0x14c
    bdf4:	str.w	r4, [r5, #328]	; 0x148
    bdf8:	b.n	bd7e <__register_exitproc+0x16>
    bdfa:	mov.w	r0, #4294967295
    bdfe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be02:	nop
    be04:	.word	0x200005c8
    be08:	.word	0x0000ae05

0000be0c <_malloc_trim_r>:
    be0c:	push	{r3, r4, r5, r6, r7, lr}
    be0e:	ldr	r7, [pc, #140]	; (be9c <_malloc_trim_r+0x90>)
    be10:	mov	r4, r1
    be12:	mov	r6, r0
    be14:	bl	b628 <__malloc_lock>
    be18:	ldr	r3, [r7, #8]
    be1a:	ldr	r5, [r3, #4]
    be1c:	bic.w	r5, r5, #3
    be20:	subs	r1, r5, r4
    be22:	addw	r1, r1, #4079	; 0xfef
    be26:	bic.w	r1, r1, #4080	; 0xff0
    be2a:	bic.w	r1, r1, #15
    be2e:	sub.w	r4, r1, #4096	; 0x1000
    be32:	cmp.w	r4, #4096	; 0x1000
    be36:	blt.n	be48 <_malloc_trim_r+0x3c>
    be38:	movs	r1, #0
    be3a:	mov	r0, r6
    be3c:	bl	ba10 <_sbrk_r>
    be40:	ldr	r3, [r7, #8]
    be42:	add	r3, r5
    be44:	cmp	r0, r3
    be46:	beq.n	be52 <_malloc_trim_r+0x46>
    be48:	mov	r0, r6
    be4a:	bl	b62c <__malloc_unlock>
    be4e:	movs	r0, #0
    be50:	pop	{r3, r4, r5, r6, r7, pc}
    be52:	negs	r1, r4
    be54:	mov	r0, r6
    be56:	bl	ba10 <_sbrk_r>
    be5a:	adds	r0, #1
    be5c:	beq.n	be7a <_malloc_trim_r+0x6e>
    be5e:	ldr	r3, [pc, #64]	; (bea0 <_malloc_trim_r+0x94>)
    be60:	ldr	r2, [r7, #8]
    be62:	ldr	r1, [r3, #0]
    be64:	subs	r5, r5, r4
    be66:	orr.w	r5, r5, #1
    be6a:	mov	r0, r6
    be6c:	subs	r1, r1, r4
    be6e:	str	r5, [r2, #4]
    be70:	str	r1, [r3, #0]
    be72:	bl	b62c <__malloc_unlock>
    be76:	movs	r0, #1
    be78:	pop	{r3, r4, r5, r6, r7, pc}
    be7a:	movs	r1, #0
    be7c:	mov	r0, r6
    be7e:	bl	ba10 <_sbrk_r>
    be82:	ldr	r2, [r7, #8]
    be84:	subs	r3, r0, r2
    be86:	cmp	r3, #15
    be88:	ble.n	be48 <_malloc_trim_r+0x3c>
    be8a:	ldr	r4, [pc, #24]	; (bea4 <_malloc_trim_r+0x98>)
    be8c:	ldr	r1, [pc, #16]	; (bea0 <_malloc_trim_r+0x94>)
    be8e:	ldr	r4, [r4, #0]
    be90:	orr.w	r3, r3, #1
    be94:	subs	r0, r0, r4
    be96:	str	r3, [r2, #4]
    be98:	str	r0, [r1, #0]
    be9a:	b.n	be48 <_malloc_trim_r+0x3c>
    be9c:	.word	0x20000e90
    bea0:	.word	0x20004a88
    bea4:	.word	0x2000129c

0000bea8 <_free_r>:
    bea8:	cmp	r1, #0
    beaa:	beq.n	bf38 <_free_r+0x90>
    beac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    beb0:	mov	r5, r1
    beb2:	mov	r8, r0
    beb4:	bl	b628 <__malloc_lock>
    beb8:	ldr.w	r7, [r5, #-4]
    bebc:	ldr	r1, [pc, #424]	; (c068 <_free_r+0x1c0>)
    bebe:	bic.w	r3, r7, #1
    bec2:	sub.w	r4, r5, #8
    bec6:	adds	r2, r4, r3
    bec8:	ldr	r6, [r1, #8]
    beca:	ldr	r0, [r2, #4]
    becc:	cmp	r2, r6
    bece:	bic.w	r0, r0, #3
    bed2:	beq.n	bf9a <_free_r+0xf2>
    bed4:	lsls	r6, r7, #31
    bed6:	str	r0, [r2, #4]
    bed8:	bmi.n	bef2 <_free_r+0x4a>
    beda:	ldr.w	r7, [r5, #-8]
    bede:	subs	r4, r4, r7
    bee0:	add.w	lr, r1, #8
    bee4:	ldr	r5, [r4, #8]
    bee6:	cmp	r5, lr
    bee8:	add	r3, r7
    beea:	beq.n	bfcc <_free_r+0x124>
    beec:	ldr	r7, [r4, #12]
    beee:	str	r7, [r5, #12]
    bef0:	str	r5, [r7, #8]
    bef2:	adds	r5, r2, r0
    bef4:	ldr	r5, [r5, #4]
    bef6:	lsls	r5, r5, #31
    bef8:	bpl.n	bf80 <_free_r+0xd8>
    befa:	orr.w	r2, r3, #1
    befe:	str	r2, [r4, #4]
    bf00:	str	r3, [r4, r3]
    bf02:	cmp.w	r3, #512	; 0x200
    bf06:	bcs.n	bf3a <_free_r+0x92>
    bf08:	lsrs	r3, r3, #3
    bf0a:	adds	r2, r3, #1
    bf0c:	ldr	r5, [r1, #4]
    bf0e:	ldr.w	r7, [r1, r2, lsl #3]
    bf12:	str	r7, [r4, #8]
    bf14:	movs	r0, #1
    bf16:	asrs	r3, r3, #2
    bf18:	lsl.w	r3, r0, r3
    bf1c:	add.w	r0, r1, r2, lsl #3
    bf20:	orrs	r5, r3
    bf22:	subs	r0, #8
    bf24:	str	r0, [r4, #12]
    bf26:	str	r5, [r1, #4]
    bf28:	str.w	r4, [r1, r2, lsl #3]
    bf2c:	str	r4, [r7, #12]
    bf2e:	mov	r0, r8
    bf30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf34:	b.w	b62c <__malloc_unlock>
    bf38:	bx	lr
    bf3a:	lsrs	r2, r3, #9
    bf3c:	cmp	r2, #4
    bf3e:	bhi.n	bfe8 <_free_r+0x140>
    bf40:	lsrs	r2, r3, #6
    bf42:	add.w	r7, r2, #57	; 0x39
    bf46:	lsls	r7, r7, #1
    bf48:	add.w	r5, r2, #56	; 0x38
    bf4c:	add.w	r0, r1, r7, lsl #2
    bf50:	ldr.w	r2, [r1, r7, lsl #2]
    bf54:	ldr	r1, [pc, #272]	; (c068 <_free_r+0x1c0>)
    bf56:	subs	r0, #8
    bf58:	cmp	r0, r2
    bf5a:	beq.n	bff8 <_free_r+0x150>
    bf5c:	ldr	r1, [r2, #4]
    bf5e:	bic.w	r1, r1, #3
    bf62:	cmp	r3, r1
    bf64:	bcs.n	bf6c <_free_r+0xc4>
    bf66:	ldr	r2, [r2, #8]
    bf68:	cmp	r0, r2
    bf6a:	bne.n	bf5c <_free_r+0xb4>
    bf6c:	ldr	r0, [r2, #12]
    bf6e:	str	r0, [r4, #12]
    bf70:	str	r2, [r4, #8]
    bf72:	str	r4, [r0, #8]
    bf74:	str	r4, [r2, #12]
    bf76:	mov	r0, r8
    bf78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bf7c:	b.w	b62c <__malloc_unlock>
    bf80:	ldr	r5, [r2, #8]
    bf82:	ldr	r7, [pc, #232]	; (c06c <_free_r+0x1c4>)
    bf84:	cmp	r5, r7
    bf86:	add	r3, r0
    bf88:	beq.n	c00a <_free_r+0x162>
    bf8a:	ldr	r0, [r2, #12]
    bf8c:	str	r0, [r5, #12]
    bf8e:	orr.w	r2, r3, #1
    bf92:	str	r5, [r0, #8]
    bf94:	str	r2, [r4, #4]
    bf96:	str	r3, [r4, r3]
    bf98:	b.n	bf02 <_free_r+0x5a>
    bf9a:	lsls	r7, r7, #31
    bf9c:	add	r3, r0
    bf9e:	bmi.n	bfb0 <_free_r+0x108>
    bfa0:	ldr.w	r2, [r5, #-8]
    bfa4:	subs	r4, r4, r2
    bfa6:	add	r3, r2
    bfa8:	ldr	r0, [r4, #8]
    bfaa:	ldr	r2, [r4, #12]
    bfac:	str	r2, [r0, #12]
    bfae:	str	r0, [r2, #8]
    bfb0:	ldr	r2, [pc, #188]	; (c070 <_free_r+0x1c8>)
    bfb2:	ldr	r2, [r2, #0]
    bfb4:	orr.w	r0, r3, #1
    bfb8:	cmp	r3, r2
    bfba:	str	r0, [r4, #4]
    bfbc:	str	r4, [r1, #8]
    bfbe:	bcc.n	bf2e <_free_r+0x86>
    bfc0:	ldr	r3, [pc, #176]	; (c074 <_free_r+0x1cc>)
    bfc2:	mov	r0, r8
    bfc4:	ldr	r1, [r3, #0]
    bfc6:	bl	be0c <_malloc_trim_r>
    bfca:	b.n	bf2e <_free_r+0x86>
    bfcc:	adds	r1, r2, r0
    bfce:	ldr	r1, [r1, #4]
    bfd0:	lsls	r1, r1, #31
    bfd2:	bmi.n	c05e <_free_r+0x1b6>
    bfd4:	ldr	r1, [r2, #8]
    bfd6:	ldr	r2, [r2, #12]
    bfd8:	str	r2, [r1, #12]
    bfda:	add	r3, r0
    bfdc:	orr.w	r0, r3, #1
    bfe0:	str	r1, [r2, #8]
    bfe2:	str	r0, [r4, #4]
    bfe4:	str	r3, [r4, r3]
    bfe6:	b.n	bf2e <_free_r+0x86>
    bfe8:	cmp	r2, #20
    bfea:	bhi.n	c01c <_free_r+0x174>
    bfec:	add.w	r7, r2, #92	; 0x5c
    bff0:	lsls	r7, r7, #1
    bff2:	add.w	r5, r2, #91	; 0x5b
    bff6:	b.n	bf4c <_free_r+0xa4>
    bff8:	asrs	r2, r5, #2
    bffa:	ldr	r3, [r1, #4]
    bffc:	movs	r5, #1
    bffe:	lsl.w	r2, r5, r2
    c002:	orrs	r3, r2
    c004:	str	r3, [r1, #4]
    c006:	mov	r2, r0
    c008:	b.n	bf6e <_free_r+0xc6>
    c00a:	orr.w	r2, r3, #1
    c00e:	str	r4, [r1, #20]
    c010:	str	r4, [r1, #16]
    c012:	str	r5, [r4, #12]
    c014:	str	r5, [r4, #8]
    c016:	str	r2, [r4, #4]
    c018:	str	r3, [r4, r3]
    c01a:	b.n	bf2e <_free_r+0x86>
    c01c:	cmp	r2, #84	; 0x54
    c01e:	bhi.n	c02e <_free_r+0x186>
    c020:	lsrs	r2, r3, #12
    c022:	add.w	r7, r2, #111	; 0x6f
    c026:	lsls	r7, r7, #1
    c028:	add.w	r5, r2, #110	; 0x6e
    c02c:	b.n	bf4c <_free_r+0xa4>
    c02e:	cmp.w	r2, #340	; 0x154
    c032:	bhi.n	c042 <_free_r+0x19a>
    c034:	lsrs	r2, r3, #15
    c036:	add.w	r7, r2, #120	; 0x78
    c03a:	lsls	r7, r7, #1
    c03c:	add.w	r5, r2, #119	; 0x77
    c040:	b.n	bf4c <_free_r+0xa4>
    c042:	movw	r0, #1364	; 0x554
    c046:	cmp	r2, r0
    c048:	bhi.n	c058 <_free_r+0x1b0>
    c04a:	lsrs	r2, r3, #18
    c04c:	add.w	r7, r2, #125	; 0x7d
    c050:	lsls	r7, r7, #1
    c052:	add.w	r5, r2, #124	; 0x7c
    c056:	b.n	bf4c <_free_r+0xa4>
    c058:	movs	r7, #254	; 0xfe
    c05a:	movs	r5, #126	; 0x7e
    c05c:	b.n	bf4c <_free_r+0xa4>
    c05e:	orr.w	r2, r3, #1
    c062:	str	r2, [r4, #4]
    c064:	str	r3, [r4, r3]
    c066:	b.n	bf2e <_free_r+0x86>
    c068:	.word	0x20000e90
    c06c:	.word	0x20000e98
    c070:	.word	0x20001298
    c074:	.word	0x20004a84

0000c078 <_localeconv_r>:
    c078:	ldr	r2, [pc, #16]	; (c08c <_localeconv_r+0x14>)
    c07a:	ldr	r3, [pc, #20]	; (c090 <_localeconv_r+0x18>)
    c07c:	ldr	r2, [r2, #0]
    c07e:	ldr	r0, [r2, #52]	; 0x34
    c080:	cmp	r0, #0
    c082:	it	eq
    c084:	moveq	r0, r3
    c086:	adds	r0, #240	; 0xf0
    c088:	bx	lr
    c08a:	nop
    c08c:	.word	0x20000d20
    c090:	.word	0x20000d24

0000c094 <_Balloc>:
    c094:	ldr	r3, [r0, #76]	; 0x4c
    c096:	push	{r4, r5, r6, lr}
    c098:	mov	r5, r0
    c09a:	mov	r4, r1
    c09c:	cbz	r3, c0b2 <_Balloc+0x1e>
    c09e:	ldr.w	r0, [r3, r4, lsl #2]
    c0a2:	cbz	r0, c0c6 <_Balloc+0x32>
    c0a4:	ldr	r2, [r0, #0]
    c0a6:	str.w	r2, [r3, r4, lsl #2]
    c0aa:	movs	r3, #0
    c0ac:	str	r3, [r0, #16]
    c0ae:	str	r3, [r0, #12]
    c0b0:	pop	{r4, r5, r6, pc}
    c0b2:	movs	r2, #33	; 0x21
    c0b4:	movs	r1, #4
    c0b6:	bl	c718 <_calloc_r>
    c0ba:	str	r0, [r5, #76]	; 0x4c
    c0bc:	mov	r3, r0
    c0be:	cmp	r0, #0
    c0c0:	bne.n	c09e <_Balloc+0xa>
    c0c2:	movs	r0, #0
    c0c4:	pop	{r4, r5, r6, pc}
    c0c6:	movs	r1, #1
    c0c8:	lsl.w	r6, r1, r4
    c0cc:	adds	r2, r6, #5
    c0ce:	mov	r0, r5
    c0d0:	lsls	r2, r2, #2
    c0d2:	bl	c718 <_calloc_r>
    c0d6:	cmp	r0, #0
    c0d8:	beq.n	c0c2 <_Balloc+0x2e>
    c0da:	str	r4, [r0, #4]
    c0dc:	str	r6, [r0, #8]
    c0de:	b.n	c0aa <_Balloc+0x16>

0000c0e0 <_Bfree>:
    c0e0:	cbz	r1, c0f0 <_Bfree+0x10>
    c0e2:	ldr	r3, [r0, #76]	; 0x4c
    c0e4:	ldr	r2, [r1, #4]
    c0e6:	ldr.w	r0, [r3, r2, lsl #2]
    c0ea:	str	r0, [r1, #0]
    c0ec:	str.w	r1, [r3, r2, lsl #2]
    c0f0:	bx	lr
    c0f2:	nop

0000c0f4 <__multadd>:
    c0f4:	push	{r4, r5, r6, r7, lr}
    c0f6:	ldr	r4, [r1, #16]
    c0f8:	sub	sp, #12
    c0fa:	mov	r5, r1
    c0fc:	mov	r6, r0
    c0fe:	add.w	lr, r1, #20
    c102:	movs	r7, #0
    c104:	ldr.w	r0, [lr]
    c108:	uxth	r1, r0
    c10a:	mla	r1, r2, r1, r3
    c10e:	lsrs	r3, r1, #16
    c110:	lsrs	r0, r0, #16
    c112:	mla	r3, r2, r0, r3
    c116:	uxth	r1, r1
    c118:	adds	r7, #1
    c11a:	add.w	r1, r1, r3, lsl #16
    c11e:	cmp	r4, r7
    c120:	str.w	r1, [lr], #4
    c124:	mov.w	r3, r3, lsr #16
    c128:	bgt.n	c104 <__multadd+0x10>
    c12a:	cbz	r3, c13c <__multadd+0x48>
    c12c:	ldr	r2, [r5, #8]
    c12e:	cmp	r4, r2
    c130:	bge.n	c142 <__multadd+0x4e>
    c132:	add.w	r2, r5, r4, lsl #2
    c136:	adds	r4, #1
    c138:	str	r3, [r2, #20]
    c13a:	str	r4, [r5, #16]
    c13c:	mov	r0, r5
    c13e:	add	sp, #12
    c140:	pop	{r4, r5, r6, r7, pc}
    c142:	ldr	r1, [r5, #4]
    c144:	str	r3, [sp, #4]
    c146:	adds	r1, #1
    c148:	mov	r0, r6
    c14a:	bl	c094 <_Balloc>
    c14e:	ldr	r2, [r5, #16]
    c150:	adds	r2, #2
    c152:	add.w	r1, r5, #12
    c156:	mov	r7, r0
    c158:	lsls	r2, r2, #2
    c15a:	adds	r0, #12
    c15c:	bl	8310 <memcpy>
    c160:	ldr	r2, [r6, #76]	; 0x4c
    c162:	ldr	r1, [r5, #4]
    c164:	ldr	r3, [sp, #4]
    c166:	ldr.w	r0, [r2, r1, lsl #2]
    c16a:	str	r0, [r5, #0]
    c16c:	str.w	r5, [r2, r1, lsl #2]
    c170:	mov	r5, r7
    c172:	b.n	c132 <__multadd+0x3e>

0000c174 <__hi0bits>:
    c174:	lsrs	r3, r0, #16
    c176:	lsls	r3, r3, #16
    c178:	cbnz	r3, c1a8 <__hi0bits+0x34>
    c17a:	lsls	r0, r0, #16
    c17c:	movs	r3, #16
    c17e:	tst.w	r0, #4278190080	; 0xff000000
    c182:	itt	eq
    c184:	lsleq	r0, r0, #8
    c186:	addeq	r3, #8
    c188:	tst.w	r0, #4026531840	; 0xf0000000
    c18c:	itt	eq
    c18e:	lsleq	r0, r0, #4
    c190:	addeq	r3, #4
    c192:	tst.w	r0, #3221225472	; 0xc0000000
    c196:	itt	eq
    c198:	lsleq	r0, r0, #2
    c19a:	addeq	r3, #2
    c19c:	cmp	r0, #0
    c19e:	blt.n	c1b0 <__hi0bits+0x3c>
    c1a0:	lsls	r2, r0, #1
    c1a2:	bmi.n	c1ac <__hi0bits+0x38>
    c1a4:	movs	r0, #32
    c1a6:	bx	lr
    c1a8:	movs	r3, #0
    c1aa:	b.n	c17e <__hi0bits+0xa>
    c1ac:	adds	r0, r3, #1
    c1ae:	bx	lr
    c1b0:	mov	r0, r3
    c1b2:	bx	lr

0000c1b4 <__lo0bits>:
    c1b4:	ldr	r3, [r0, #0]
    c1b6:	ands.w	r2, r3, #7
    c1ba:	beq.n	c1cc <__lo0bits+0x18>
    c1bc:	lsls	r1, r3, #31
    c1be:	bmi.n	c202 <__lo0bits+0x4e>
    c1c0:	lsls	r2, r3, #30
    c1c2:	bmi.n	c206 <__lo0bits+0x52>
    c1c4:	lsrs	r3, r3, #2
    c1c6:	str	r3, [r0, #0]
    c1c8:	movs	r0, #2
    c1ca:	bx	lr
    c1cc:	uxth	r1, r3
    c1ce:	cbnz	r1, c1d4 <__lo0bits+0x20>
    c1d0:	lsrs	r3, r3, #16
    c1d2:	movs	r2, #16
    c1d4:	tst.w	r3, #255	; 0xff
    c1d8:	itt	eq
    c1da:	lsreq	r3, r3, #8
    c1dc:	addeq	r2, #8
    c1de:	lsls	r1, r3, #28
    c1e0:	itt	eq
    c1e2:	lsreq	r3, r3, #4
    c1e4:	addeq	r2, #4
    c1e6:	lsls	r1, r3, #30
    c1e8:	itt	eq
    c1ea:	lsreq	r3, r3, #2
    c1ec:	addeq	r2, #2
    c1ee:	lsls	r1, r3, #31
    c1f0:	bmi.n	c1fc <__lo0bits+0x48>
    c1f2:	lsrs	r3, r3, #1
    c1f4:	bne.n	c1fa <__lo0bits+0x46>
    c1f6:	movs	r0, #32
    c1f8:	bx	lr
    c1fa:	adds	r2, #1
    c1fc:	str	r3, [r0, #0]
    c1fe:	mov	r0, r2
    c200:	bx	lr
    c202:	movs	r0, #0
    c204:	bx	lr
    c206:	lsrs	r3, r3, #1
    c208:	str	r3, [r0, #0]
    c20a:	movs	r0, #1
    c20c:	bx	lr
    c20e:	nop

0000c210 <__i2b>:
    c210:	push	{r4, lr}
    c212:	mov	r4, r1
    c214:	movs	r1, #1
    c216:	bl	c094 <_Balloc>
    c21a:	movs	r2, #1
    c21c:	str	r4, [r0, #20]
    c21e:	str	r2, [r0, #16]
    c220:	pop	{r4, pc}
    c222:	nop

0000c224 <__multiply>:
    c224:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c228:	ldr	r5, [r1, #16]
    c22a:	ldr	r7, [r2, #16]
    c22c:	cmp	r5, r7
    c22e:	sub	sp, #12
    c230:	mov	r4, r1
    c232:	mov	r6, r2
    c234:	bge.n	c240 <__multiply+0x1c>
    c236:	mov	r2, r5
    c238:	mov	r4, r6
    c23a:	mov	r5, r7
    c23c:	mov	r6, r1
    c23e:	mov	r7, r2
    c240:	ldr	r3, [r4, #8]
    c242:	ldr	r1, [r4, #4]
    c244:	add.w	r8, r5, r7
    c248:	cmp	r8, r3
    c24a:	it	gt
    c24c:	addgt	r1, #1
    c24e:	bl	c094 <_Balloc>
    c252:	add.w	ip, r0, #20
    c256:	add.w	r9, ip, r8, lsl #2
    c25a:	cmp	ip, r9
    c25c:	str	r0, [sp, #0]
    c25e:	bcs.n	c26c <__multiply+0x48>
    c260:	mov	r3, ip
    c262:	movs	r1, #0
    c264:	str.w	r1, [r3], #4
    c268:	cmp	r9, r3
    c26a:	bhi.n	c264 <__multiply+0x40>
    c26c:	add.w	r2, r6, #20
    c270:	add.w	sl, r2, r7, lsl #2
    c274:	add.w	r3, r4, #20
    c278:	cmp	r2, sl
    c27a:	add.w	lr, r3, r5, lsl #2
    c27e:	bcs.n	c32a <__multiply+0x106>
    c280:	str.w	r9, [sp, #4]
    c284:	mov	r9, r3
    c286:	ldr.w	r3, [r2], #4
    c28a:	uxth.w	fp, r3
    c28e:	cmp.w	fp, #0
    c292:	beq.n	c2d6 <__multiply+0xb2>
    c294:	movs	r0, #0
    c296:	mov	r7, r9
    c298:	mov	r6, ip
    c29a:	mov	r5, r0
    c29c:	b.n	c2a0 <__multiply+0x7c>
    c29e:	mov	r6, r3
    c2a0:	ldr.w	r4, [r7], #4
    c2a4:	ldr	r0, [r6, #0]
    c2a6:	uxth	r1, r4
    c2a8:	uxth	r3, r0
    c2aa:	mla	r1, fp, r1, r3
    c2ae:	lsrs	r4, r4, #16
    c2b0:	lsrs	r0, r0, #16
    c2b2:	adds	r3, r1, r5
    c2b4:	mla	r0, fp, r4, r0
    c2b8:	add.w	r0, r0, r3, lsr #16
    c2bc:	uxth	r1, r3
    c2be:	mov	r3, r6
    c2c0:	orr.w	r1, r1, r0, lsl #16
    c2c4:	cmp	lr, r7
    c2c6:	mov.w	r5, r0, lsr #16
    c2ca:	str.w	r1, [r3], #4
    c2ce:	bhi.n	c29e <__multiply+0x7a>
    c2d0:	str	r5, [r6, #4]
    c2d2:	ldr.w	r3, [r2, #-4]
    c2d6:	movs.w	fp, r3, lsr #16
    c2da:	beq.n	c31e <__multiply+0xfa>
    c2dc:	ldr.w	r3, [ip]
    c2e0:	mov	r7, ip
    c2e2:	mov	r0, r3
    c2e4:	mov	r5, r9
    c2e6:	movs	r1, #0
    c2e8:	b.n	c2ec <__multiply+0xc8>
    c2ea:	mov	r7, r6
    c2ec:	ldrh	r4, [r5, #0]
    c2ee:	lsrs	r0, r0, #16
    c2f0:	mla	r0, fp, r4, r0
    c2f4:	add	r1, r0
    c2f6:	uxth	r4, r3
    c2f8:	mov	r6, r7
    c2fa:	orr.w	r3, r4, r1, lsl #16
    c2fe:	str.w	r3, [r6], #4
    c302:	ldr	r0, [r7, #4]
    c304:	ldr.w	r4, [r5], #4
    c308:	uxth	r3, r0
    c30a:	lsrs	r4, r4, #16
    c30c:	mla	r4, fp, r4, r3
    c310:	add.w	r3, r4, r1, lsr #16
    c314:	cmp	lr, r5
    c316:	mov.w	r1, r3, lsr #16
    c31a:	bhi.n	c2ea <__multiply+0xc6>
    c31c:	str	r3, [r7, #4]
    c31e:	cmp	sl, r2
    c320:	add.w	ip, ip, #4
    c324:	bhi.n	c286 <__multiply+0x62>
    c326:	ldr.w	r9, [sp, #4]
    c32a:	cmp.w	r8, #0
    c32e:	ble.n	c348 <__multiply+0x124>
    c330:	ldr.w	r3, [r9, #-4]
    c334:	sub.w	r9, r9, #4
    c338:	cbz	r3, c342 <__multiply+0x11e>
    c33a:	b.n	c348 <__multiply+0x124>
    c33c:	ldr.w	r3, [r9, #-4]!
    c340:	cbnz	r3, c348 <__multiply+0x124>
    c342:	subs.w	r8, r8, #1
    c346:	bne.n	c33c <__multiply+0x118>
    c348:	ldr	r0, [sp, #0]
    c34a:	str.w	r8, [r0, #16]
    c34e:	add	sp, #12
    c350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c354 <__pow5mult>:
    c354:	ands.w	r3, r2, #3
    c358:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c35c:	mov	r4, r2
    c35e:	mov	r7, r0
    c360:	bne.n	c3c0 <__pow5mult+0x6c>
    c362:	mov	r6, r1
    c364:	asrs	r4, r4, #2
    c366:	beq.n	c3a2 <__pow5mult+0x4e>
    c368:	ldr	r5, [r7, #72]	; 0x48
    c36a:	cbz	r5, c3d2 <__pow5mult+0x7e>
    c36c:	lsls	r3, r4, #31
    c36e:	mov.w	r8, #0
    c372:	bmi.n	c382 <__pow5mult+0x2e>
    c374:	asrs	r4, r4, #1
    c376:	beq.n	c3a2 <__pow5mult+0x4e>
    c378:	ldr	r0, [r5, #0]
    c37a:	cbz	r0, c3a8 <__pow5mult+0x54>
    c37c:	mov	r5, r0
    c37e:	lsls	r3, r4, #31
    c380:	bpl.n	c374 <__pow5mult+0x20>
    c382:	mov	r2, r5
    c384:	mov	r1, r6
    c386:	mov	r0, r7
    c388:	bl	c224 <__multiply>
    c38c:	cbz	r6, c3bc <__pow5mult+0x68>
    c38e:	ldr	r2, [r6, #4]
    c390:	ldr	r3, [r7, #76]	; 0x4c
    c392:	asrs	r4, r4, #1
    c394:	ldr.w	r1, [r3, r2, lsl #2]
    c398:	str	r1, [r6, #0]
    c39a:	str.w	r6, [r3, r2, lsl #2]
    c39e:	mov	r6, r0
    c3a0:	bne.n	c378 <__pow5mult+0x24>
    c3a2:	mov	r0, r6
    c3a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3a8:	mov	r2, r5
    c3aa:	mov	r1, r5
    c3ac:	mov	r0, r7
    c3ae:	bl	c224 <__multiply>
    c3b2:	str	r0, [r5, #0]
    c3b4:	str.w	r8, [r0]
    c3b8:	mov	r5, r0
    c3ba:	b.n	c37e <__pow5mult+0x2a>
    c3bc:	mov	r6, r0
    c3be:	b.n	c374 <__pow5mult+0x20>
    c3c0:	subs	r2, r3, #1
    c3c2:	ldr	r5, [pc, #44]	; (c3f0 <__pow5mult+0x9c>)
    c3c4:	movs	r3, #0
    c3c6:	ldr.w	r2, [r5, r2, lsl #2]
    c3ca:	bl	c0f4 <__multadd>
    c3ce:	mov	r6, r0
    c3d0:	b.n	c364 <__pow5mult+0x10>
    c3d2:	movs	r1, #1
    c3d4:	mov	r0, r7
    c3d6:	bl	c094 <_Balloc>
    c3da:	movw	r1, #625	; 0x271
    c3de:	movs	r2, #1
    c3e0:	movs	r3, #0
    c3e2:	str	r1, [r0, #20]
    c3e4:	str	r2, [r0, #16]
    c3e6:	mov	r5, r0
    c3e8:	str	r0, [r7, #72]	; 0x48
    c3ea:	str	r3, [r0, #0]
    c3ec:	b.n	c36c <__pow5mult+0x18>
    c3ee:	nop
    c3f0:	.word	0x200007d0

0000c3f4 <__lshift>:
    c3f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3f8:	mov	r9, r2
    c3fa:	ldr	r2, [r1, #16]
    c3fc:	ldr	r3, [r1, #8]
    c3fe:	mov.w	r4, r9, asr #5
    c402:	add.w	r8, r4, r2
    c406:	add.w	r5, r8, #1
    c40a:	cmp	r5, r3
    c40c:	mov	r6, r1
    c40e:	mov	sl, r0
    c410:	ldr	r1, [r1, #4]
    c412:	ble.n	c41e <__lshift+0x2a>
    c414:	lsls	r3, r3, #1
    c416:	cmp	r5, r3
    c418:	add.w	r1, r1, #1
    c41c:	bgt.n	c414 <__lshift+0x20>
    c41e:	mov	r0, sl
    c420:	bl	c094 <_Balloc>
    c424:	cmp	r4, #0
    c426:	add.w	r2, r0, #20
    c42a:	ble.n	c49e <__lshift+0xaa>
    c42c:	add.w	r3, r2, r4, lsl #2
    c430:	movs	r1, #0
    c432:	str.w	r1, [r2], #4
    c436:	cmp	r3, r2
    c438:	bne.n	c432 <__lshift+0x3e>
    c43a:	ldr	r4, [r6, #16]
    c43c:	add.w	r1, r6, #20
    c440:	ands.w	r9, r9, #31
    c444:	add.w	lr, r1, r4, lsl #2
    c448:	beq.n	c48e <__lshift+0x9a>
    c44a:	rsb	r2, r9, #32
    c44e:	movs	r4, #0
    c450:	ldr	r7, [r1, #0]
    c452:	lsl.w	ip, r7, r9
    c456:	orr.w	r4, ip, r4
    c45a:	mov	ip, r3
    c45c:	str.w	r4, [r3], #4
    c460:	ldr.w	r4, [r1], #4
    c464:	cmp	lr, r1
    c466:	lsr.w	r4, r4, r2
    c46a:	bhi.n	c450 <__lshift+0x5c>
    c46c:	str.w	r4, [ip, #4]
    c470:	cbz	r4, c476 <__lshift+0x82>
    c472:	add.w	r5, r8, #2
    c476:	ldr.w	r3, [sl, #76]	; 0x4c
    c47a:	ldr	r2, [r6, #4]
    c47c:	subs	r5, #1
    c47e:	ldr.w	r1, [r3, r2, lsl #2]
    c482:	str	r5, [r0, #16]
    c484:	str	r1, [r6, #0]
    c486:	str.w	r6, [r3, r2, lsl #2]
    c48a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c48e:	subs	r3, #4
    c490:	ldr.w	r2, [r1], #4
    c494:	str.w	r2, [r3, #4]!
    c498:	cmp	lr, r1
    c49a:	bhi.n	c490 <__lshift+0x9c>
    c49c:	b.n	c476 <__lshift+0x82>
    c49e:	mov	r3, r2
    c4a0:	b.n	c43a <__lshift+0x46>
    c4a2:	nop

0000c4a4 <__mcmp>:
    c4a4:	ldr	r2, [r0, #16]
    c4a6:	ldr	r3, [r1, #16]
    c4a8:	subs	r2, r2, r3
    c4aa:	bne.n	c4d4 <__mcmp+0x30>
    c4ac:	lsls	r3, r3, #2
    c4ae:	adds	r0, #20
    c4b0:	adds	r1, #20
    c4b2:	add	r1, r3
    c4b4:	push	{r4}
    c4b6:	add	r3, r0
    c4b8:	b.n	c4be <__mcmp+0x1a>
    c4ba:	cmp	r0, r3
    c4bc:	bcs.n	c4d8 <__mcmp+0x34>
    c4be:	ldr.w	r4, [r3, #-4]!
    c4c2:	ldr.w	r2, [r1, #-4]!
    c4c6:	cmp	r4, r2
    c4c8:	beq.n	c4ba <__mcmp+0x16>
    c4ca:	bcc.n	c4e0 <__mcmp+0x3c>
    c4cc:	movs	r0, #1
    c4ce:	ldr.w	r4, [sp], #4
    c4d2:	bx	lr
    c4d4:	mov	r0, r2
    c4d6:	bx	lr
    c4d8:	movs	r0, #0
    c4da:	ldr.w	r4, [sp], #4
    c4de:	bx	lr
    c4e0:	mov.w	r0, #4294967295
    c4e4:	b.n	c4ce <__mcmp+0x2a>
    c4e6:	nop

0000c4e8 <__mdiff>:
    c4e8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4ec:	ldr	r3, [r1, #16]
    c4ee:	mov	r7, r1
    c4f0:	ldr	r1, [r2, #16]
    c4f2:	subs	r3, r3, r1
    c4f4:	cmp	r3, #0
    c4f6:	mov	r8, r2
    c4f8:	bne.n	c52a <__mdiff+0x42>
    c4fa:	lsls	r1, r1, #2
    c4fc:	add.w	r2, r7, #20
    c500:	add.w	r5, r8, #20
    c504:	adds	r3, r2, r1
    c506:	add	r1, r5
    c508:	b.n	c50e <__mdiff+0x26>
    c50a:	cmp	r2, r3
    c50c:	bcs.n	c5cc <__mdiff+0xe4>
    c50e:	ldr.w	r6, [r3, #-4]!
    c512:	ldr.w	r4, [r1, #-4]!
    c516:	cmp	r6, r4
    c518:	beq.n	c50a <__mdiff+0x22>
    c51a:	bcs.n	c5de <__mdiff+0xf6>
    c51c:	mov	r3, r7
    c51e:	mov	r4, r2
    c520:	mov	r7, r8
    c522:	mov.w	r9, #1
    c526:	mov	r8, r3
    c528:	b.n	c538 <__mdiff+0x50>
    c52a:	blt.n	c5e8 <__mdiff+0x100>
    c52c:	add.w	r5, r7, #20
    c530:	add.w	r4, r2, #20
    c534:	mov.w	r9, #0
    c538:	ldr	r1, [r7, #4]
    c53a:	bl	c094 <_Balloc>
    c53e:	ldr.w	r3, [r8, #16]
    c542:	ldr	r6, [r7, #16]
    c544:	str.w	r9, [r0, #12]
    c548:	add.w	ip, r4, r3, lsl #2
    c54c:	mov	lr, r4
    c54e:	add.w	r7, r5, r6, lsl #2
    c552:	add.w	r4, r0, #20
    c556:	movs	r3, #0
    c558:	ldr.w	r1, [lr], #4
    c55c:	ldr.w	r8, [r5], #4
    c560:	uxth	r2, r1
    c562:	uxtah	r3, r3, r8
    c566:	lsrs	r1, r1, #16
    c568:	subs	r2, r3, r2
    c56a:	rsb	r3, r1, r8, lsr #16
    c56e:	add.w	r3, r3, r2, asr #16
    c572:	uxth	r2, r2
    c574:	orr.w	r2, r2, r3, lsl #16
    c578:	cmp	ip, lr
    c57a:	str.w	r2, [r4], #4
    c57e:	mov.w	r3, r3, asr #16
    c582:	bhi.n	c558 <__mdiff+0x70>
    c584:	cmp	r7, r5
    c586:	bls.n	c5b8 <__mdiff+0xd0>
    c588:	mov	ip, r4
    c58a:	mov	r1, r5
    c58c:	ldr.w	lr, [r1], #4
    c590:	uxtah	r2, r3, lr
    c594:	asrs	r3, r2, #16
    c596:	add.w	r3, r3, lr, lsr #16
    c59a:	uxth	r2, r2
    c59c:	orr.w	r2, r2, r3, lsl #16
    c5a0:	cmp	r7, r1
    c5a2:	str.w	r2, [ip], #4
    c5a6:	mov.w	r3, r3, asr #16
    c5aa:	bhi.n	c58c <__mdiff+0xa4>
    c5ac:	mvns	r5, r5
    c5ae:	add	r5, r7
    c5b0:	bic.w	r5, r5, #3
    c5b4:	adds	r5, #4
    c5b6:	add	r4, r5
    c5b8:	subs	r4, #4
    c5ba:	cbnz	r2, c5c6 <__mdiff+0xde>
    c5bc:	ldr.w	r3, [r4, #-4]!
    c5c0:	subs	r6, #1
    c5c2:	cmp	r3, #0
    c5c4:	beq.n	c5bc <__mdiff+0xd4>
    c5c6:	str	r6, [r0, #16]
    c5c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c5cc:	movs	r1, #0
    c5ce:	bl	c094 <_Balloc>
    c5d2:	movs	r2, #1
    c5d4:	movs	r3, #0
    c5d6:	str	r2, [r0, #16]
    c5d8:	str	r3, [r0, #20]
    c5da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c5de:	mov	r4, r5
    c5e0:	mov.w	r9, #0
    c5e4:	mov	r5, r2
    c5e6:	b.n	c538 <__mdiff+0x50>
    c5e8:	mov	r3, r7
    c5ea:	add.w	r4, r7, #20
    c5ee:	add.w	r5, r8, #20
    c5f2:	mov	r7, r8
    c5f4:	mov.w	r9, #1
    c5f8:	mov	r8, r3
    c5fa:	b.n	c538 <__mdiff+0x50>

0000c5fc <__d2b>:
    c5fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c600:	vmov	r6, r7, d0
    c604:	sub	sp, #12
    c606:	mov	r8, r1
    c608:	movs	r1, #1
    c60a:	mov	r4, r7
    c60c:	ubfx	r5, r7, #20, #11
    c610:	mov	r7, r2
    c612:	bl	c094 <_Balloc>
    c616:	ubfx	r4, r4, #0, #20
    c61a:	mov	r9, r0
    c61c:	cbz	r5, c622 <__d2b+0x26>
    c61e:	orr.w	r4, r4, #1048576	; 0x100000
    c622:	str	r4, [sp, #4]
    c624:	cbz	r6, c66e <__d2b+0x72>
    c626:	add	r0, sp, #8
    c628:	str.w	r6, [r0, #-8]!
    c62c:	bl	c1b4 <__lo0bits>
    c630:	cmp	r0, #0
    c632:	bne.n	c69e <__d2b+0xa2>
    c634:	ldmia.w	sp, {r2, r3}
    c638:	str.w	r2, [r9, #20]
    c63c:	cmp	r3, #0
    c63e:	ite	eq
    c640:	moveq	r1, #1
    c642:	movne	r1, #2
    c644:	str.w	r3, [r9, #24]
    c648:	str.w	r1, [r9, #16]
    c64c:	cbnz	r5, c686 <__d2b+0x8a>
    c64e:	add.w	r3, r9, r1, lsl #2
    c652:	subw	r0, r0, #1074	; 0x432
    c656:	str.w	r0, [r8]
    c65a:	ldr	r0, [r3, #16]
    c65c:	bl	c174 <__hi0bits>
    c660:	rsb	r0, r0, r1, lsl #5
    c664:	str	r0, [r7, #0]
    c666:	mov	r0, r9
    c668:	add	sp, #12
    c66a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c66e:	add	r0, sp, #4
    c670:	bl	c1b4 <__lo0bits>
    c674:	ldr	r3, [sp, #4]
    c676:	str.w	r3, [r9, #20]
    c67a:	movs	r1, #1
    c67c:	adds	r0, #32
    c67e:	str.w	r1, [r9, #16]
    c682:	cmp	r5, #0
    c684:	beq.n	c64e <__d2b+0x52>
    c686:	subw	r5, r5, #1075	; 0x433
    c68a:	add	r5, r0
    c68c:	rsb	r0, r0, #53	; 0x35
    c690:	str.w	r5, [r8]
    c694:	str	r0, [r7, #0]
    c696:	mov	r0, r9
    c698:	add	sp, #12
    c69a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c69e:	ldmia.w	sp, {r2, r3}
    c6a2:	rsb	r1, r0, #32
    c6a6:	lsl.w	r1, r3, r1
    c6aa:	orrs	r2, r1
    c6ac:	lsrs	r3, r0
    c6ae:	str	r3, [sp, #4]
    c6b0:	str.w	r2, [r9, #20]
    c6b4:	b.n	c63c <__d2b+0x40>
    c6b6:	nop

0000c6b8 <_vasnprintf_r>:
    c6b8:	push	{r4, r5, r6, lr}
    c6ba:	mov	r5, r2
    c6bc:	sub	sp, #104	; 0x68
    c6be:	ldr	r4, [r2, #0]
    c6c0:	cbz	r1, c6c6 <_vasnprintf_r+0xe>
    c6c2:	cmp	r4, #0
    c6c4:	bne.n	c6fc <_vasnprintf_r+0x44>
    c6c6:	movs	r4, #0
    c6c8:	mov.w	r2, #648	; 0x288
    c6cc:	strh.w	r2, [sp, #12]
    c6d0:	str	r4, [sp, #0]
    c6d2:	str	r4, [sp, #16]
    c6d4:	mov	r2, r3
    c6d6:	movw	r6, #65535	; 0xffff
    c6da:	ldr	r3, [sp, #120]	; 0x78
    c6dc:	str	r4, [sp, #8]
    c6de:	mov	r1, sp
    c6e0:	str	r4, [sp, #20]
    c6e2:	strh.w	r6, [sp, #14]
    c6e6:	bl	d6d8 <_svfprintf_r>
    c6ea:	cmp	r0, #0
    c6ec:	blt.n	c712 <_vasnprintf_r+0x5a>
    c6ee:	ldr	r3, [sp, #0]
    c6f0:	str	r0, [r5, #0]
    c6f2:	movs	r2, #0
    c6f4:	strb	r2, [r3, #0]
    c6f6:	ldr	r0, [sp, #16]
    c6f8:	add	sp, #104	; 0x68
    c6fa:	pop	{r4, r5, r6, pc}
    c6fc:	mov.w	r2, #1544	; 0x608
    c700:	str	r1, [sp, #0]
    c702:	str	r1, [sp, #16]
    c704:	strh.w	r2, [sp, #12]
    c708:	bge.n	c6d4 <_vasnprintf_r+0x1c>
    c70a:	movs	r3, #139	; 0x8b
    c70c:	str	r3, [r0, #0]
    c70e:	movs	r0, #0
    c710:	b.n	c6f8 <_vasnprintf_r+0x40>
    c712:	movs	r0, #0
    c714:	b.n	c6f8 <_vasnprintf_r+0x40>
    c716:	nop

0000c718 <_calloc_r>:
    c718:	push	{r4, lr}
    c71a:	mul.w	r1, r2, r1
    c71e:	bl	ae24 <_malloc_r>
    c722:	mov	r4, r0
    c724:	cbz	r0, c75e <_calloc_r+0x46>
    c726:	ldr.w	r2, [r0, #-4]
    c72a:	bic.w	r2, r2, #3
    c72e:	subs	r2, #4
    c730:	cmp	r2, #36	; 0x24
    c732:	bhi.n	c766 <_calloc_r+0x4e>
    c734:	cmp	r2, #19
    c736:	bls.n	c762 <_calloc_r+0x4a>
    c738:	movs	r3, #0
    c73a:	cmp	r2, #27
    c73c:	str	r3, [r0, #0]
    c73e:	str	r3, [r0, #4]
    c740:	bls.n	c770 <_calloc_r+0x58>
    c742:	cmp	r2, #36	; 0x24
    c744:	str	r3, [r0, #8]
    c746:	str	r3, [r0, #12]
    c748:	iteee	ne
    c74a:	addne.w	r2, r0, #16
    c74e:	streq	r3, [r0, #16]
    c750:	streq	r3, [r0, #20]
    c752:	addeq.w	r2, r0, #24
    c756:	movs	r3, #0
    c758:	str	r3, [r2, #0]
    c75a:	str	r3, [r2, #4]
    c75c:	str	r3, [r2, #8]
    c75e:	mov	r0, r4
    c760:	pop	{r4, pc}
    c762:	mov	r2, r0
    c764:	b.n	c756 <_calloc_r+0x3e>
    c766:	movs	r1, #0
    c768:	bl	b58c <memset>
    c76c:	mov	r0, r4
    c76e:	pop	{r4, pc}
    c770:	add.w	r2, r0, #8
    c774:	b.n	c756 <_calloc_r+0x3e>
    c776:	nop

0000c778 <quorem>:
    c778:	ldr	r2, [r0, #16]
    c77a:	ldr	r3, [r1, #16]
    c77c:	cmp	r3, r2
    c77e:	bgt.w	c89c <quorem+0x124>
    c782:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c786:	add.w	r8, r3, #4294967295
    c78a:	add.w	r7, r1, #20
    c78e:	add.w	fp, r0, #20
    c792:	ldr.w	r2, [r7, r8, lsl #2]
    c796:	ldr.w	r3, [fp, r8, lsl #2]
    c79a:	mov.w	r4, r8, lsl #2
    c79e:	sub	sp, #12
    c7a0:	adds	r2, #1
    c7a2:	udiv	r9, r3, r2
    c7a6:	add.w	r3, fp, r4
    c7aa:	str	r4, [sp, #0]
    c7ac:	add.w	sl, r7, r4
    c7b0:	str	r3, [sp, #4]
    c7b2:	cmp.w	r9, #0
    c7b6:	beq.n	c82c <quorem+0xb4>
    c7b8:	movs	r5, #0
    c7ba:	mov	ip, r7
    c7bc:	mov	lr, fp
    c7be:	mov	r3, r5
    c7c0:	ldr.w	r6, [ip], #4
    c7c4:	ldr.w	r2, [lr]
    c7c8:	uxth	r4, r6
    c7ca:	mla	r5, r9, r4, r5
    c7ce:	lsrs	r6, r6, #16
    c7d0:	lsrs	r4, r5, #16
    c7d2:	mla	r4, r9, r6, r4
    c7d6:	uxth	r5, r5
    c7d8:	subs	r3, r3, r5
    c7da:	uxth	r6, r4
    c7dc:	uxtah	r3, r3, r2
    c7e0:	rsb	r6, r6, r2, lsr #16
    c7e4:	add.w	r6, r6, r3, asr #16
    c7e8:	uxth	r3, r3
    c7ea:	orr.w	r3, r3, r6, lsl #16
    c7ee:	cmp	sl, ip
    c7f0:	str.w	r3, [lr], #4
    c7f4:	mov.w	r5, r4, lsr #16
    c7f8:	mov.w	r3, r6, asr #16
    c7fc:	bcs.n	c7c0 <quorem+0x48>
    c7fe:	ldr	r3, [sp, #0]
    c800:	ldr.w	r3, [fp, r3]
    c804:	cbnz	r3, c82c <quorem+0xb4>
    c806:	ldr	r4, [sp, #4]
    c808:	subs	r3, r4, #4
    c80a:	cmp	fp, r3
    c80c:	bcs.n	c828 <quorem+0xb0>
    c80e:	ldr.w	r3, [r4, #-4]
    c812:	cbnz	r3, c828 <quorem+0xb0>
    c814:	sub.w	r3, r4, #8
    c818:	b.n	c820 <quorem+0xa8>
    c81a:	ldr	r2, [r3, #0]
    c81c:	subs	r3, #4
    c81e:	cbnz	r2, c828 <quorem+0xb0>
    c820:	cmp	fp, r3
    c822:	add.w	r8, r8, #4294967295
    c826:	bcc.n	c81a <quorem+0xa2>
    c828:	str.w	r8, [r0, #16]
    c82c:	mov	r4, r0
    c82e:	bl	c4a4 <__mcmp>
    c832:	cmp	r0, #0
    c834:	blt.n	c894 <quorem+0x11c>
    c836:	add.w	r9, r9, #1
    c83a:	mov	r5, fp
    c83c:	movs	r3, #0
    c83e:	ldr.w	r1, [r7], #4
    c842:	ldr	r0, [r5, #0]
    c844:	uxth	r2, r1
    c846:	subs	r2, r3, r2
    c848:	lsrs	r1, r1, #16
    c84a:	uxtah	r2, r2, r0
    c84e:	rsb	r3, r1, r0, lsr #16
    c852:	add.w	r3, r3, r2, asr #16
    c856:	uxth	r1, r2
    c858:	orr.w	r1, r1, r3, lsl #16
    c85c:	cmp	sl, r7
    c85e:	str.w	r1, [r5], #4
    c862:	mov.w	r3, r3, asr #16
    c866:	bcs.n	c83e <quorem+0xc6>
    c868:	ldr.w	r2, [fp, r8, lsl #2]
    c86c:	add.w	r3, fp, r8, lsl #2
    c870:	cbnz	r2, c894 <quorem+0x11c>
    c872:	subs	r2, r3, #4
    c874:	cmp	fp, r2
    c876:	bcs.n	c890 <quorem+0x118>
    c878:	ldr.w	r2, [r3, #-4]
    c87c:	cbnz	r2, c890 <quorem+0x118>
    c87e:	subs	r3, #8
    c880:	b.n	c888 <quorem+0x110>
    c882:	ldr	r2, [r3, #0]
    c884:	subs	r3, #4
    c886:	cbnz	r2, c890 <quorem+0x118>
    c888:	cmp	fp, r3
    c88a:	add.w	r8, r8, #4294967295
    c88e:	bcc.n	c882 <quorem+0x10a>
    c890:	str.w	r8, [r4, #16]
    c894:	mov	r0, r9
    c896:	add	sp, #12
    c898:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c89c:	movs	r0, #0
    c89e:	bx	lr

0000c8a0 <_dtoa_r>:
    c8a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8a4:	vmov	r6, r7, d0
    c8a8:	sub	sp, #108	; 0x6c
    c8aa:	ldr	r4, [r0, #64]	; 0x40
    c8ac:	ldr	r5, [sp, #144]	; 0x90
    c8ae:	str	r1, [sp, #0]
    c8b0:	mov	r9, r0
    c8b2:	str	r2, [sp, #20]
    c8b4:	str	r3, [sp, #12]
    c8b6:	vmov	sl, s0
    c8ba:	mov	fp, r7
    c8bc:	cbz	r4, c8d4 <_dtoa_r+0x34>
    c8be:	ldr	r2, [r0, #68]	; 0x44
    c8c0:	str	r2, [r4, #4]
    c8c2:	movs	r3, #1
    c8c4:	lsls	r3, r2
    c8c6:	str	r3, [r4, #8]
    c8c8:	mov	r1, r4
    c8ca:	bl	c0e0 <_Bfree>
    c8ce:	movs	r3, #0
    c8d0:	str.w	r3, [r9, #64]	; 0x40
    c8d4:	cmp.w	fp, #0
    c8d8:	mov	r4, fp
    c8da:	blt.n	c946 <_dtoa_r+0xa6>
    c8dc:	movs	r3, #0
    c8de:	str	r3, [r5, #0]
    c8e0:	ldr	r3, [pc, #644]	; (cb68 <_dtoa_r+0x2c8>)
    c8e2:	mov	r2, r3
    c8e4:	ands	r3, r4
    c8e6:	cmp	r3, r2
    c8e8:	beq.n	c918 <_dtoa_r+0x78>
    c8ea:	movs	r2, #0
    c8ec:	movs	r3, #0
    c8ee:	mov	r0, sl
    c8f0:	mov	r1, fp
    c8f2:	bl	a9a4 <__aeabi_dcmpeq>
    c8f6:	mov	r6, sl
    c8f8:	mov	r7, fp
    c8fa:	mov	r8, r0
    c8fc:	cbz	r0, c952 <_dtoa_r+0xb2>
    c8fe:	ldr	r2, [sp, #12]
    c900:	movs	r3, #1
    c902:	str	r3, [r2, #0]
    c904:	ldr	r3, [sp, #148]	; 0x94
    c906:	cmp	r3, #0
    c908:	beq.w	ca88 <_dtoa_r+0x1e8>
    c90c:	ldr	r0, [pc, #604]	; (cb6c <_dtoa_r+0x2cc>)
    c90e:	str	r0, [r3, #0]
    c910:	subs	r0, #1
    c912:	add	sp, #108	; 0x6c
    c914:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c918:	ldr	r2, [sp, #12]
    c91a:	movw	r3, #9999	; 0x270f
    c91e:	str	r3, [r2, #0]
    c920:	cmp.w	sl, #0
    c924:	beq.w	ca5c <_dtoa_r+0x1bc>
    c928:	ldr	r0, [pc, #580]	; (cb70 <_dtoa_r+0x2d0>)
    c92a:	ldr	r3, [sp, #148]	; 0x94
    c92c:	cmp	r3, #0
    c92e:	beq.n	c912 <_dtoa_r+0x72>
    c930:	ldrb	r3, [r0, #3]
    c932:	cmp	r3, #0
    c934:	beq.w	ca8c <_dtoa_r+0x1ec>
    c938:	add.w	r3, r0, #8
    c93c:	ldr	r2, [sp, #148]	; 0x94
    c93e:	str	r3, [r2, #0]
    c940:	add	sp, #108	; 0x6c
    c942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c946:	movs	r3, #1
    c948:	bic.w	r4, fp, #2147483648	; 0x80000000
    c94c:	str	r3, [r5, #0]
    c94e:	mov	fp, r4
    c950:	b.n	c8e0 <_dtoa_r+0x40>
    c952:	add	r2, sp, #96	; 0x60
    c954:	add	r1, sp, #100	; 0x64
    c956:	vmov	d0, r6, r7
    c95a:	mov	r0, r9
    c95c:	bl	c5fc <__d2b>
    c960:	lsrs	r5, r4, #20
    c962:	str	r0, [sp, #40]	; 0x28
    c964:	bne.w	ca6e <_dtoa_r+0x1ce>
    c968:	ldr	r5, [sp, #96]	; 0x60
    c96a:	ldr	r6, [sp, #100]	; 0x64
    c96c:	add	r6, r5
    c96e:	addw	r3, r6, #1074	; 0x432
    c972:	cmp	r3, #32
    c974:	ble.w	ce88 <_dtoa_r+0x5e8>
    c978:	rsb	r3, r3, #64	; 0x40
    c97c:	addw	r0, r6, #1042	; 0x412
    c980:	lsls	r4, r3
    c982:	lsr.w	r0, sl, r0
    c986:	orrs	r0, r4
    c988:	bl	a3e8 <__aeabi_ui2d>
    c98c:	movs	r3, #1
    c98e:	subs	r4, r6, #1
    c990:	sub.w	r1, r1, #32505856	; 0x1f00000
    c994:	str	r3, [sp, #60]	; 0x3c
    c996:	movs	r2, #0
    c998:	ldr	r3, [pc, #472]	; (cb74 <_dtoa_r+0x2d4>)
    c99a:	bl	a16c <__aeabi_dsub>
    c99e:	add	r3, pc, #432	; (adr r3, cb50 <_dtoa_r+0x2b0>)
    c9a0:	ldrd	r2, r3, [r3]
    c9a4:	bl	a4d4 <__aeabi_dmul>
    c9a8:	add	r3, pc, #428	; (adr r3, cb58 <_dtoa_r+0x2b8>)
    c9aa:	ldrd	r2, r3, [r3]
    c9ae:	bl	a170 <__adddf3>
    c9b2:	mov	r6, r0
    c9b4:	mov	r0, r4
    c9b6:	mov	r7, r1
    c9b8:	bl	a408 <__aeabi_i2d>
    c9bc:	add	r3, pc, #416	; (adr r3, cb60 <_dtoa_r+0x2c0>)
    c9be:	ldrd	r2, r3, [r3]
    c9c2:	bl	a4d4 <__aeabi_dmul>
    c9c6:	mov	r2, r0
    c9c8:	mov	r3, r1
    c9ca:	mov	r0, r6
    c9cc:	mov	r1, r7
    c9ce:	bl	a170 <__adddf3>
    c9d2:	mov	r6, r0
    c9d4:	mov	r7, r1
    c9d6:	bl	aa34 <__aeabi_d2iz>
    c9da:	movs	r2, #0
    c9dc:	str	r0, [sp, #16]
    c9de:	movs	r3, #0
    c9e0:	mov	r0, r6
    c9e2:	mov	r1, r7
    c9e4:	bl	a9b8 <__aeabi_dcmplt>
    c9e8:	cmp	r0, #0
    c9ea:	bne.w	ce3e <_dtoa_r+0x59e>
    c9ee:	ldr	r6, [sp, #16]
    c9f0:	cmp	r6, #22
    c9f2:	bhi.w	ce38 <_dtoa_r+0x598>
    c9f6:	ldr	r3, [pc, #384]	; (cb78 <_dtoa_r+0x2d8>)
    c9f8:	add.w	r3, r3, r6, lsl #3
    c9fc:	ldrd	r0, r1, [r3]
    ca00:	mov	r2, sl
    ca02:	mov	r3, fp
    ca04:	bl	a9f4 <__aeabi_dcmpgt>
    ca08:	cmp	r0, #0
    ca0a:	beq.w	ce92 <_dtoa_r+0x5f2>
    ca0e:	subs	r3, r6, #1
    ca10:	str	r3, [sp, #16]
    ca12:	movs	r3, #0
    ca14:	str	r3, [sp, #52]	; 0x34
    ca16:	subs	r5, r5, r4
    ca18:	subs.w	r8, r5, #1
    ca1c:	bmi.w	ce74 <_dtoa_r+0x5d4>
    ca20:	movs	r3, #0
    ca22:	str	r3, [sp, #28]
    ca24:	ldr	r3, [sp, #16]
    ca26:	cmp	r3, #0
    ca28:	blt.w	ce62 <_dtoa_r+0x5c2>
    ca2c:	add	r8, r3
    ca2e:	str	r3, [sp, #48]	; 0x30
    ca30:	movs	r3, #0
    ca32:	str	r3, [sp, #24]
    ca34:	ldr	r3, [sp, #0]
    ca36:	cmp	r3, #9
    ca38:	bhi.n	ca90 <_dtoa_r+0x1f0>
    ca3a:	cmp	r3, #5
    ca3c:	ble.w	d6c8 <_dtoa_r+0xe28>
    ca40:	subs	r3, #4
    ca42:	str	r3, [sp, #0]
    ca44:	movs	r6, #0
    ca46:	ldr	r3, [sp, #0]
    ca48:	subs	r3, #2
    ca4a:	cmp	r3, #3
    ca4c:	bhi.w	d696 <_dtoa_r+0xdf6>
    ca50:	tbh	[pc, r3, lsl #1]
    ca54:	.word	0x0224032b
    ca58:	.word	0x04500336
    ca5c:	ldr	r3, [pc, #272]	; (cb70 <_dtoa_r+0x2d0>)
    ca5e:	ldr	r2, [pc, #284]	; (cb7c <_dtoa_r+0x2dc>)
    ca60:	ubfx	r0, r4, #0, #20
    ca64:	cmp	r0, #0
    ca66:	ite	ne
    ca68:	movne	r0, r3
    ca6a:	moveq	r0, r2
    ca6c:	b.n	c92a <_dtoa_r+0x8a>
    ca6e:	ubfx	r3, fp, #0, #20
    ca72:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ca76:	subw	r4, r5, #1023	; 0x3ff
    ca7a:	mov	r0, sl
    ca7c:	str.w	r8, [sp, #60]	; 0x3c
    ca80:	orr.w	r1, r1, #3145728	; 0x300000
    ca84:	ldr	r5, [sp, #96]	; 0x60
    ca86:	b.n	c996 <_dtoa_r+0xf6>
    ca88:	ldr	r0, [pc, #244]	; (cb80 <_dtoa_r+0x2e0>)
    ca8a:	b.n	c912 <_dtoa_r+0x72>
    ca8c:	adds	r3, r0, #3
    ca8e:	b.n	c93c <_dtoa_r+0x9c>
    ca90:	movs	r1, #0
    ca92:	str.w	r1, [r9, #68]	; 0x44
    ca96:	mov	r0, r9
    ca98:	mov	r4, r1
    ca9a:	str	r1, [sp, #0]
    ca9c:	bl	c094 <_Balloc>
    caa0:	mov.w	r3, #4294967295
    caa4:	str	r3, [sp, #32]
    caa6:	str	r3, [sp, #56]	; 0x38
    caa8:	movs	r3, #1
    caaa:	str	r0, [sp, #36]	; 0x24
    caac:	str.w	r0, [r9, #64]	; 0x40
    cab0:	str	r4, [sp, #20]
    cab2:	str	r3, [sp, #44]	; 0x2c
    cab4:	ldr	r3, [sp, #100]	; 0x64
    cab6:	cmp	r3, #0
    cab8:	blt.w	cc5c <_dtoa_r+0x3bc>
    cabc:	ldr	r2, [sp, #16]
    cabe:	cmp	r2, #14
    cac0:	bgt.w	cc5c <_dtoa_r+0x3bc>
    cac4:	ldr	r3, [pc, #176]	; (cb78 <_dtoa_r+0x2d8>)
    cac6:	add.w	r3, r3, r2, lsl #3
    caca:	vldr	d7, [r3]
    cace:	ldr	r3, [sp, #20]
    cad0:	cmp	r3, #0
    cad2:	vstr	d7, [sp]
    cad6:	blt.w	d0d6 <_dtoa_r+0x836>
    cada:	mov	r6, sl
    cadc:	mov	r7, fp
    cade:	ldrd	sl, fp, [sp]
    cae2:	mov	r0, r6
    cae4:	mov	r2, sl
    cae6:	mov	r3, fp
    cae8:	mov	r1, r7
    caea:	bl	a728 <__aeabi_ddiv>
    caee:	bl	aa34 <__aeabi_d2iz>
    caf2:	mov	r4, r0
    caf4:	bl	a408 <__aeabi_i2d>
    caf8:	mov	r2, sl
    cafa:	mov	r3, fp
    cafc:	bl	a4d4 <__aeabi_dmul>
    cb00:	mov	r3, r1
    cb02:	mov	r2, r0
    cb04:	mov	r1, r7
    cb06:	mov	r0, r6
    cb08:	bl	a16c <__aeabi_dsub>
    cb0c:	ldr	r5, [sp, #36]	; 0x24
    cb0e:	add.w	r3, r4, #48	; 0x30
    cb12:	strb	r3, [r5, #0]
    cb14:	ldr	r3, [sp, #32]
    cb16:	cmp	r3, #1
    cb18:	mov	r6, r0
    cb1a:	mov	r7, r1
    cb1c:	add.w	r5, r5, #1
    cb20:	beq.n	cbe6 <_dtoa_r+0x346>
    cb22:	movs	r2, #0
    cb24:	ldr	r3, [pc, #92]	; (cb84 <_dtoa_r+0x2e4>)
    cb26:	bl	a4d4 <__aeabi_dmul>
    cb2a:	movs	r2, #0
    cb2c:	movs	r3, #0
    cb2e:	mov	r6, r0
    cb30:	mov	r7, r1
    cb32:	bl	a9a4 <__aeabi_dcmpeq>
    cb36:	cmp	r0, #0
    cb38:	bne.n	cc36 <_dtoa_r+0x396>
    cb3a:	str.w	r9, [sp, #20]
    cb3e:	ldr.w	sl, [sp, #32]
    cb42:	ldr.w	fp, [sp, #36]	; 0x24
    cb46:	ldrd	r8, r9, [sp]
    cb4a:	b.n	cb9e <_dtoa_r+0x2fe>
    cb4c:	nop.w
    cb50:	.word	0x636f4361
    cb54:	.word	0x3fd287a7
    cb58:	.word	0x8b60c8b3
    cb5c:	.word	0x3fc68a28
    cb60:	.word	0x509f79fb
    cb64:	.word	0x3fd34413
    cb68:	.word	0x7ff00000
    cb6c:	.word	0x200007ed
    cb70:	.word	0x200007e8
    cb74:	.word	0x3ff80000
    cb78:	.word	0x200006e0
    cb7c:	.word	0x200007dc
    cb80:	.word	0x200007ec
    cb84:	.word	0x40240000
    cb88:	bl	a4d4 <__aeabi_dmul>
    cb8c:	movs	r2, #0
    cb8e:	movs	r3, #0
    cb90:	mov	r6, r0
    cb92:	mov	r7, r1
    cb94:	bl	a9a4 <__aeabi_dcmpeq>
    cb98:	cmp	r0, #0
    cb9a:	bne.w	d2fa <_dtoa_r+0xa5a>
    cb9e:	mov	r2, r8
    cba0:	mov	r3, r9
    cba2:	mov	r0, r6
    cba4:	mov	r1, r7
    cba6:	bl	a728 <__aeabi_ddiv>
    cbaa:	bl	aa34 <__aeabi_d2iz>
    cbae:	mov	r4, r0
    cbb0:	bl	a408 <__aeabi_i2d>
    cbb4:	mov	r2, r8
    cbb6:	mov	r3, r9
    cbb8:	bl	a4d4 <__aeabi_dmul>
    cbbc:	mov	r2, r0
    cbbe:	mov	r3, r1
    cbc0:	mov	r0, r6
    cbc2:	mov	r1, r7
    cbc4:	bl	a16c <__aeabi_dsub>
    cbc8:	add.w	lr, r4, #48	; 0x30
    cbcc:	strb.w	lr, [r5], #1
    cbd0:	rsb	lr, fp, r5
    cbd4:	cmp	lr, sl
    cbd6:	mov	r6, r0
    cbd8:	mov	r7, r1
    cbda:	mov.w	r2, #0
    cbde:	ldr	r3, [pc, #696]	; (ce98 <_dtoa_r+0x5f8>)
    cbe0:	bne.n	cb88 <_dtoa_r+0x2e8>
    cbe2:	ldr.w	r9, [sp, #20]
    cbe6:	mov	r2, r6
    cbe8:	mov	r3, r7
    cbea:	mov	r0, r6
    cbec:	mov	r1, r7
    cbee:	bl	a170 <__adddf3>
    cbf2:	mov	r6, r0
    cbf4:	mov	r7, r1
    cbf6:	mov	r2, r0
    cbf8:	mov	r3, r1
    cbfa:	ldrd	r0, r1, [sp]
    cbfe:	bl	a9b8 <__aeabi_dcmplt>
    cc02:	cbnz	r0, cc16 <_dtoa_r+0x376>
    cc04:	mov	r2, r6
    cc06:	mov	r3, r7
    cc08:	ldrd	r0, r1, [sp]
    cc0c:	bl	a9a4 <__aeabi_dcmpeq>
    cc10:	cbz	r0, cc36 <_dtoa_r+0x396>
    cc12:	lsls	r3, r4, #31
    cc14:	bpl.n	cc36 <_dtoa_r+0x396>
    cc16:	ldrb.w	r4, [r5, #-1]
    cc1a:	ldr	r2, [sp, #36]	; 0x24
    cc1c:	subs	r3, r5, #1
    cc1e:	b.n	cc2a <_dtoa_r+0x38a>
    cc20:	cmp	r2, r3
    cc22:	beq.w	d41e <_dtoa_r+0xb7e>
    cc26:	ldrb.w	r4, [r3, #-1]!
    cc2a:	cmp	r4, #57	; 0x39
    cc2c:	add.w	r5, r3, #1
    cc30:	beq.n	cc20 <_dtoa_r+0x380>
    cc32:	adds	r4, #1
    cc34:	strb	r4, [r3, #0]
    cc36:	ldr	r1, [sp, #40]	; 0x28
    cc38:	mov	r0, r9
    cc3a:	bl	c0e0 <_Bfree>
    cc3e:	movs	r2, #0
    cc40:	ldr	r3, [sp, #16]
    cc42:	strb	r2, [r5, #0]
    cc44:	ldr	r2, [sp, #12]
    cc46:	adds	r3, #1
    cc48:	str	r3, [r2, #0]
    cc4a:	ldr	r3, [sp, #148]	; 0x94
    cc4c:	cmp	r3, #0
    cc4e:	beq.w	d388 <_dtoa_r+0xae8>
    cc52:	ldr	r0, [sp, #36]	; 0x24
    cc54:	str	r5, [r3, #0]
    cc56:	add	sp, #108	; 0x6c
    cc58:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc5c:	ldr	r2, [sp, #44]	; 0x2c
    cc5e:	cmp	r2, #0
    cc60:	beq.w	ce80 <_dtoa_r+0x5e0>
    cc64:	ldr	r2, [sp, #0]
    cc66:	cmp	r2, #1
    cc68:	ble.w	d11a <_dtoa_r+0x87a>
    cc6c:	ldr	r3, [sp, #32]
    cc6e:	ldr	r2, [sp, #24]
    cc70:	subs	r7, r3, #1
    cc72:	cmp	r2, r7
    cc74:	blt.w	d38e <_dtoa_r+0xaee>
    cc78:	subs	r7, r2, r7
    cc7a:	ldr	r3, [sp, #32]
    cc7c:	cmp	r3, #0
    cc7e:	blt.w	d582 <_dtoa_r+0xce2>
    cc82:	ldr	r5, [sp, #28]
    cc84:	ldr	r3, [sp, #32]
    cc86:	ldr	r2, [sp, #28]
    cc88:	movs	r1, #1
    cc8a:	add	r2, r3
    cc8c:	mov	r0, r9
    cc8e:	str	r2, [sp, #28]
    cc90:	add	r8, r3
    cc92:	bl	c210 <__i2b>
    cc96:	mov	r6, r0
    cc98:	cbz	r5, ccb4 <_dtoa_r+0x414>
    cc9a:	cmp.w	r8, #0
    cc9e:	ble.n	ccb4 <_dtoa_r+0x414>
    cca0:	cmp	r5, r8
    cca2:	ldr	r2, [sp, #28]
    cca4:	mov	r3, r5
    cca6:	it	ge
    cca8:	movge	r3, r8
    ccaa:	subs	r2, r2, r3
    ccac:	str	r2, [sp, #28]
    ccae:	subs	r5, r5, r3
    ccb0:	rsb	r8, r3, r8
    ccb4:	ldr	r3, [sp, #24]
    ccb6:	cmp	r3, #0
    ccb8:	ble.w	d2a6 <_dtoa_r+0xa06>
    ccbc:	ldr	r2, [sp, #44]	; 0x2c
    ccbe:	cmp	r2, #0
    ccc0:	beq.w	d0c8 <_dtoa_r+0x828>
    ccc4:	cmp	r7, #0
    ccc6:	beq.w	d0c8 <_dtoa_r+0x828>
    ccca:	mov	r1, r6
    cccc:	mov	r2, r7
    ccce:	mov	r0, r9
    ccd0:	bl	c354 <__pow5mult>
    ccd4:	ldr	r2, [sp, #40]	; 0x28
    ccd6:	mov	r1, r0
    ccd8:	mov	r6, r0
    ccda:	mov	r0, r9
    ccdc:	bl	c224 <__multiply>
    cce0:	ldr	r1, [sp, #40]	; 0x28
    cce2:	mov	r4, r0
    cce4:	mov	r0, r9
    cce6:	bl	c0e0 <_Bfree>
    ccea:	ldr	r3, [sp, #24]
    ccec:	subs	r3, r3, r7
    ccee:	str	r3, [sp, #24]
    ccf0:	bne.w	d0c6 <_dtoa_r+0x826>
    ccf4:	movs	r1, #1
    ccf6:	mov	r0, r9
    ccf8:	bl	c210 <__i2b>
    ccfc:	ldr	r3, [sp, #48]	; 0x30
    ccfe:	str	r0, [sp, #24]
    cd00:	cmp	r3, #0
    cd02:	beq.w	d130 <_dtoa_r+0x890>
    cd06:	mov	r1, r0
    cd08:	mov	r2, r3
    cd0a:	mov	r0, r9
    cd0c:	bl	c354 <__pow5mult>
    cd10:	ldr	r3, [sp, #0]
    cd12:	str	r0, [sp, #24]
    cd14:	cmp	r3, #1
    cd16:	ble.w	d300 <_dtoa_r+0xa60>
    cd1a:	movs	r7, #0
    cd1c:	ldr	r2, [sp, #24]
    cd1e:	ldr	r3, [r2, #16]
    cd20:	add.w	r3, r2, r3, lsl #2
    cd24:	ldr	r0, [r3, #16]
    cd26:	bl	c174 <__hi0bits>
    cd2a:	rsb	r0, r0, #32
    cd2e:	add	r0, r8
    cd30:	ands.w	r0, r0, #31
    cd34:	beq.w	d12c <_dtoa_r+0x88c>
    cd38:	rsb	r3, r0, #32
    cd3c:	cmp	r3, #4
    cd3e:	ble.w	d6bc <_dtoa_r+0xe1c>
    cd42:	rsb	r0, r0, #28
    cd46:	ldr	r3, [sp, #28]
    cd48:	add	r3, r0
    cd4a:	str	r3, [sp, #28]
    cd4c:	add	r5, r0
    cd4e:	add	r8, r0
    cd50:	ldr	r3, [sp, #28]
    cd52:	cmp	r3, #0
    cd54:	ble.n	cd62 <_dtoa_r+0x4c2>
    cd56:	mov	r1, r4
    cd58:	mov	r2, r3
    cd5a:	mov	r0, r9
    cd5c:	bl	c3f4 <__lshift>
    cd60:	mov	r4, r0
    cd62:	cmp.w	r8, #0
    cd66:	ble.n	cd74 <_dtoa_r+0x4d4>
    cd68:	mov	r2, r8
    cd6a:	ldr	r1, [sp, #24]
    cd6c:	mov	r0, r9
    cd6e:	bl	c3f4 <__lshift>
    cd72:	str	r0, [sp, #24]
    cd74:	ldr	r3, [sp, #52]	; 0x34
    cd76:	cmp	r3, #0
    cd78:	bne.w	d270 <_dtoa_r+0x9d0>
    cd7c:	ldr	r3, [sp, #32]
    cd7e:	cmp	r3, #0
    cd80:	ble.w	d2aa <_dtoa_r+0xa0a>
    cd84:	ldr	r3, [sp, #44]	; 0x2c
    cd86:	cmp	r3, #0
    cd88:	bne.w	d174 <_dtoa_r+0x8d4>
    cd8c:	ldr.w	fp, [sp, #36]	; 0x24
    cd90:	ldr	r7, [sp, #32]
    cd92:	ldr.w	r8, [sp, #24]
    cd96:	mov	r5, fp
    cd98:	b.n	cda0 <_dtoa_r+0x500>
    cd9a:	bl	c0f4 <__multadd>
    cd9e:	mov	r4, r0
    cda0:	mov	r1, r8
    cda2:	mov	r0, r4
    cda4:	bl	c778 <quorem>
    cda8:	add.w	sl, r0, #48	; 0x30
    cdac:	strb.w	sl, [r5], #1
    cdb0:	rsb	r3, fp, r5
    cdb4:	cmp	r3, r7
    cdb6:	mov.w	r2, #10
    cdba:	mov.w	r3, #0
    cdbe:	mov	r1, r4
    cdc0:	mov	r0, r9
    cdc2:	blt.n	cd9a <_dtoa_r+0x4fa>
    cdc4:	ldr	r3, [sp, #36]	; 0x24
    cdc6:	ldr	r2, [sp, #32]
    cdc8:	cmp	r2, #1
    cdca:	ite	ge
    cdcc:	addge	r3, r3, r2
    cdce:	addlt	r3, #1
    cdd0:	mov	r5, r3
    cdd2:	mov.w	fp, #0
    cdd6:	mov	r1, r4
    cdd8:	movs	r2, #1
    cdda:	mov	r0, r9
    cddc:	bl	c3f4 <__lshift>
    cde0:	ldr	r1, [sp, #24]
    cde2:	str	r0, [sp, #40]	; 0x28
    cde4:	bl	c4a4 <__mcmp>
    cde8:	cmp	r0, #0
    cdea:	ble.w	d3f8 <_dtoa_r+0xb58>
    cdee:	ldrb.w	r2, [r5, #-1]
    cdf2:	ldr	r1, [sp, #36]	; 0x24
    cdf4:	subs	r3, r5, #1
    cdf6:	b.n	ce02 <_dtoa_r+0x562>
    cdf8:	cmp	r3, r1
    cdfa:	beq.w	d2e6 <_dtoa_r+0xa46>
    cdfe:	ldrb.w	r2, [r3, #-1]!
    ce02:	cmp	r2, #57	; 0x39
    ce04:	add.w	r5, r3, #1
    ce08:	beq.n	cdf8 <_dtoa_r+0x558>
    ce0a:	adds	r2, #1
    ce0c:	strb	r2, [r3, #0]
    ce0e:	ldr	r1, [sp, #24]
    ce10:	mov	r0, r9
    ce12:	bl	c0e0 <_Bfree>
    ce16:	cmp	r6, #0
    ce18:	beq.w	cc36 <_dtoa_r+0x396>
    ce1c:	cmp.w	fp, #0
    ce20:	beq.n	ce2e <_dtoa_r+0x58e>
    ce22:	cmp	fp, r6
    ce24:	beq.n	ce2e <_dtoa_r+0x58e>
    ce26:	mov	r1, fp
    ce28:	mov	r0, r9
    ce2a:	bl	c0e0 <_Bfree>
    ce2e:	mov	r1, r6
    ce30:	mov	r0, r9
    ce32:	bl	c0e0 <_Bfree>
    ce36:	b.n	cc36 <_dtoa_r+0x396>
    ce38:	movs	r3, #1
    ce3a:	str	r3, [sp, #52]	; 0x34
    ce3c:	b.n	ca16 <_dtoa_r+0x176>
    ce3e:	ldr.w	r8, [sp, #16]
    ce42:	mov	r0, r8
    ce44:	bl	a408 <__aeabi_i2d>
    ce48:	mov	r2, r0
    ce4a:	mov	r3, r1
    ce4c:	mov	r0, r6
    ce4e:	mov	r1, r7
    ce50:	bl	a9a4 <__aeabi_dcmpeq>
    ce54:	cmp	r0, #0
    ce56:	bne.w	c9ee <_dtoa_r+0x14e>
    ce5a:	add.w	r3, r8, #4294967295
    ce5e:	str	r3, [sp, #16]
    ce60:	b.n	c9ee <_dtoa_r+0x14e>
    ce62:	ldr	r2, [sp, #28]
    ce64:	ldr	r3, [sp, #16]
    ce66:	subs	r2, r2, r3
    ce68:	negs	r3, r3
    ce6a:	str	r3, [sp, #24]
    ce6c:	movs	r3, #0
    ce6e:	str	r2, [sp, #28]
    ce70:	str	r3, [sp, #48]	; 0x30
    ce72:	b.n	ca34 <_dtoa_r+0x194>
    ce74:	rsb	r3, r8, #0
    ce78:	str	r3, [sp, #28]
    ce7a:	mov.w	r8, #0
    ce7e:	b.n	ca24 <_dtoa_r+0x184>
    ce80:	ldr	r7, [sp, #24]
    ce82:	ldr	r5, [sp, #28]
    ce84:	ldr	r6, [sp, #44]	; 0x2c
    ce86:	b.n	cc98 <_dtoa_r+0x3f8>
    ce88:	rsb	r4, r3, #32
    ce8c:	lsl.w	r0, sl, r4
    ce90:	b.n	c988 <_dtoa_r+0xe8>
    ce92:	str	r0, [sp, #52]	; 0x34
    ce94:	b.n	ca16 <_dtoa_r+0x176>
    ce96:	nop
    ce98:	.word	0x40240000
    ce9c:	movs	r3, #0
    ce9e:	str	r3, [sp, #44]	; 0x2c
    cea0:	ldr	r3, [sp, #16]
    cea2:	ldr	r2, [sp, #20]
    cea4:	add	r3, r2
    cea6:	str	r3, [sp, #56]	; 0x38
    cea8:	adds	r3, #1
    ceaa:	cmp	r3, #0
    ceac:	str	r3, [sp, #32]
    ceae:	ble.w	d3ac <_dtoa_r+0xb0c>
    ceb2:	ldr	r4, [sp, #32]
    ceb4:	mov	r5, r4
    ceb6:	movs	r1, #0
    ceb8:	cmp	r5, #23
    ceba:	str.w	r1, [r9, #68]	; 0x44
    cebe:	bls.n	ced8 <_dtoa_r+0x638>
    cec0:	movs	r2, #1
    cec2:	movs	r3, #4
    cec4:	lsls	r3, r3, #1
    cec6:	add.w	r0, r3, #20
    ceca:	cmp	r0, r5
    cecc:	mov	r1, r2
    cece:	add.w	r2, r2, #1
    ced2:	bls.n	cec4 <_dtoa_r+0x624>
    ced4:	str.w	r1, [r9, #68]	; 0x44
    ced8:	mov	r0, r9
    ceda:	bl	c094 <_Balloc>
    cede:	cmp	r4, #14
    cee0:	str	r0, [sp, #36]	; 0x24
    cee2:	str.w	r0, [r9, #64]	; 0x40
    cee6:	bhi.w	cab4 <_dtoa_r+0x214>
    ceea:	cmp	r6, #0
    ceec:	beq.w	cab4 <_dtoa_r+0x214>
    cef0:	ldr	r1, [sp, #16]
    cef2:	cmp	r1, #0
    cef4:	strd	sl, fp, [sp, #64]	; 0x40
    cef8:	ble.w	d430 <_dtoa_r+0xb90>
    cefc:	ldr	r3, [pc, #576]	; (d140 <_dtoa_r+0x8a0>)
    cefe:	and.w	r2, r1, #15
    cf02:	asrs	r6, r1, #4
    cf04:	add.w	r3, r3, r2, lsl #3
    cf08:	lsls	r0, r6, #27
    cf0a:	ldrd	r4, r5, [r3]
    cf0e:	bpl.w	d39e <_dtoa_r+0xafe>
    cf12:	ldr	r3, [pc, #560]	; (d144 <_dtoa_r+0x8a4>)
    cf14:	mov	r0, sl
    cf16:	mov	r1, fp
    cf18:	ldrd	r2, r3, [r3, #32]
    cf1c:	bl	a728 <__aeabi_ddiv>
    cf20:	strd	r0, r1, [sp, #72]	; 0x48
    cf24:	and.w	r6, r6, #15
    cf28:	mov.w	sl, #3
    cf2c:	cbz	r6, cf50 <_dtoa_r+0x6b0>
    cf2e:	ldr	r7, [pc, #532]	; (d144 <_dtoa_r+0x8a4>)
    cf30:	lsls	r1, r6, #31
    cf32:	bpl.n	cf48 <_dtoa_r+0x6a8>
    cf34:	mov	r0, r4
    cf36:	mov	r1, r5
    cf38:	ldrd	r2, r3, [r7]
    cf3c:	bl	a4d4 <__aeabi_dmul>
    cf40:	add.w	sl, sl, #1
    cf44:	mov	r4, r0
    cf46:	mov	r5, r1
    cf48:	asrs	r6, r6, #1
    cf4a:	add.w	r7, r7, #8
    cf4e:	bne.n	cf30 <_dtoa_r+0x690>
    cf50:	mov	r2, r4
    cf52:	mov	r3, r5
    cf54:	ldrd	r0, r1, [sp, #72]	; 0x48
    cf58:	bl	a728 <__aeabi_ddiv>
    cf5c:	mov	r6, r0
    cf5e:	mov	r7, r1
    cf60:	ldr	r3, [sp, #52]	; 0x34
    cf62:	cbz	r3, cf76 <_dtoa_r+0x6d6>
    cf64:	movs	r2, #0
    cf66:	ldr	r3, [pc, #480]	; (d148 <_dtoa_r+0x8a8>)
    cf68:	mov	r0, r6
    cf6a:	mov	r1, r7
    cf6c:	bl	a9b8 <__aeabi_dcmplt>
    cf70:	cmp	r0, #0
    cf72:	bne.w	d5aa <_dtoa_r+0xd0a>
    cf76:	mov	r0, sl
    cf78:	bl	a408 <__aeabi_i2d>
    cf7c:	mov	r2, r6
    cf7e:	mov	r3, r7
    cf80:	bl	a4d4 <__aeabi_dmul>
    cf84:	ldr	r3, [pc, #452]	; (d14c <_dtoa_r+0x8ac>)
    cf86:	movs	r2, #0
    cf88:	bl	a170 <__adddf3>
    cf8c:	ldr	r3, [sp, #32]
    cf8e:	mov	r4, r0
    cf90:	sub.w	r5, r1, #54525952	; 0x3400000
    cf94:	cmp	r3, #0
    cf96:	beq.w	d350 <_dtoa_r+0xab0>
    cf9a:	ldr	r3, [sp, #16]
    cf9c:	str	r3, [sp, #88]	; 0x58
    cf9e:	ldr	r3, [sp, #32]
    cfa0:	str	r3, [sp, #72]	; 0x48
    cfa2:	ldr	r3, [sp, #44]	; 0x2c
    cfa4:	cmp	r3, #0
    cfa6:	beq.w	d4d2 <_dtoa_r+0xc32>
    cfaa:	ldr	r2, [sp, #72]	; 0x48
    cfac:	ldr	r3, [pc, #400]	; (d140 <_dtoa_r+0x8a0>)
    cfae:	ldr	r1, [pc, #416]	; (d150 <_dtoa_r+0x8b0>)
    cfb0:	add.w	r3, r3, r2, lsl #3
    cfb4:	ldrd	r2, r3, [r3, #-8]
    cfb8:	movs	r0, #0
    cfba:	bl	a728 <__aeabi_ddiv>
    cfbe:	mov	r2, r4
    cfc0:	mov	r3, r5
    cfc2:	bl	a16c <__aeabi_dsub>
    cfc6:	mov	sl, r0
    cfc8:	mov	fp, r1
    cfca:	mov	r0, r6
    cfcc:	mov	r1, r7
    cfce:	bl	aa34 <__aeabi_d2iz>
    cfd2:	mov	r4, r0
    cfd4:	bl	a408 <__aeabi_i2d>
    cfd8:	mov	r2, r0
    cfda:	mov	r3, r1
    cfdc:	mov	r0, r6
    cfde:	mov	r1, r7
    cfe0:	bl	a16c <__aeabi_dsub>
    cfe4:	adds	r4, #48	; 0x30
    cfe6:	ldr	r5, [sp, #36]	; 0x24
    cfe8:	uxtb	r4, r4
    cfea:	mov	r6, r0
    cfec:	mov	r7, r1
    cfee:	strb	r4, [r5, #0]
    cff0:	mov	r2, r0
    cff2:	mov	r3, r1
    cff4:	mov	r0, sl
    cff6:	mov	r1, fp
    cff8:	adds	r5, #1
    cffa:	bl	a9f4 <__aeabi_dcmpgt>
    cffe:	cmp	r0, #0
    d000:	bne.n	d0a4 <_dtoa_r+0x804>
    d002:	mov	r2, r6
    d004:	mov	r3, r7
    d006:	movs	r0, #0
    d008:	ldr	r1, [pc, #316]	; (d148 <_dtoa_r+0x8a8>)
    d00a:	bl	a16c <__aeabi_dsub>
    d00e:	mov	r2, r0
    d010:	mov	r3, r1
    d012:	mov	r0, sl
    d014:	mov	r1, fp
    d016:	bl	a9f4 <__aeabi_dcmpgt>
    d01a:	cmp	r0, #0
    d01c:	bne.w	d630 <_dtoa_r+0xd90>
    d020:	ldr	r2, [sp, #72]	; 0x48
    d022:	cmp	r2, #1
    d024:	ble.w	d416 <_dtoa_r+0xb76>
    d028:	ldr	r3, [sp, #72]	; 0x48
    d02a:	ldr	r2, [sp, #36]	; 0x24
    d02c:	str.w	r8, [sp, #72]	; 0x48
    d030:	add	r3, r2
    d032:	mov	r8, r3
    d034:	b.n	d052 <_dtoa_r+0x7b2>
    d036:	movs	r0, #0
    d038:	ldr	r1, [pc, #268]	; (d148 <_dtoa_r+0x8a8>)
    d03a:	bl	a16c <__aeabi_dsub>
    d03e:	mov	r2, sl
    d040:	mov	r3, fp
    d042:	bl	a9b8 <__aeabi_dcmplt>
    d046:	cmp	r0, #0
    d048:	bne.w	d630 <_dtoa_r+0xd90>
    d04c:	cmp	r5, r8
    d04e:	beq.w	d412 <_dtoa_r+0xb72>
    d052:	mov	r0, sl
    d054:	mov	r1, fp
    d056:	movs	r2, #0
    d058:	ldr	r3, [pc, #248]	; (d154 <_dtoa_r+0x8b4>)
    d05a:	bl	a4d4 <__aeabi_dmul>
    d05e:	movs	r2, #0
    d060:	ldr	r3, [pc, #240]	; (d154 <_dtoa_r+0x8b4>)
    d062:	mov	sl, r0
    d064:	mov	fp, r1
    d066:	mov	r0, r6
    d068:	mov	r1, r7
    d06a:	bl	a4d4 <__aeabi_dmul>
    d06e:	mov	r7, r1
    d070:	mov	r6, r0
    d072:	bl	aa34 <__aeabi_d2iz>
    d076:	mov	r4, r0
    d078:	bl	a408 <__aeabi_i2d>
    d07c:	mov	r2, r0
    d07e:	mov	r3, r1
    d080:	mov	r0, r6
    d082:	mov	r1, r7
    d084:	bl	a16c <__aeabi_dsub>
    d088:	adds	r4, #48	; 0x30
    d08a:	uxtb	r4, r4
    d08c:	mov	r2, sl
    d08e:	mov	r3, fp
    d090:	strb.w	r4, [r5], #1
    d094:	mov	r6, r0
    d096:	mov	r7, r1
    d098:	bl	a9b8 <__aeabi_dcmplt>
    d09c:	mov	r2, r6
    d09e:	mov	r3, r7
    d0a0:	cmp	r0, #0
    d0a2:	beq.n	d036 <_dtoa_r+0x796>
    d0a4:	ldr	r3, [sp, #88]	; 0x58
    d0a6:	str	r3, [sp, #16]
    d0a8:	b.n	cc36 <_dtoa_r+0x396>
    d0aa:	movs	r3, #0
    d0ac:	str	r3, [sp, #44]	; 0x2c
    d0ae:	ldr	r3, [sp, #20]
    d0b0:	cmp	r3, #0
    d0b2:	ble.w	d3b6 <_dtoa_r+0xb16>
    d0b6:	mov	r5, r3
    d0b8:	mov	r4, r3
    d0ba:	str	r3, [sp, #56]	; 0x38
    d0bc:	str	r3, [sp, #32]
    d0be:	b.n	ceb6 <_dtoa_r+0x616>
    d0c0:	movs	r3, #1
    d0c2:	str	r3, [sp, #44]	; 0x2c
    d0c4:	b.n	d0ae <_dtoa_r+0x80e>
    d0c6:	str	r4, [sp, #40]	; 0x28
    d0c8:	ldr	r2, [sp, #24]
    d0ca:	ldr	r1, [sp, #40]	; 0x28
    d0cc:	mov	r0, r9
    d0ce:	bl	c354 <__pow5mult>
    d0d2:	mov	r4, r0
    d0d4:	b.n	ccf4 <_dtoa_r+0x454>
    d0d6:	ldr	r3, [sp, #32]
    d0d8:	cmp	r3, #0
    d0da:	bgt.w	cada <_dtoa_r+0x23a>
    d0de:	bne.w	d380 <_dtoa_r+0xae0>
    d0e2:	movs	r2, #0
    d0e4:	ldr	r3, [pc, #112]	; (d158 <_dtoa_r+0x8b8>)
    d0e6:	ldrd	r0, r1, [sp]
    d0ea:	bl	a4d4 <__aeabi_dmul>
    d0ee:	mov	r3, fp
    d0f0:	mov	r2, sl
    d0f2:	bl	a9e0 <__aeabi_dcmpge>
    d0f6:	ldr	r3, [sp, #32]
    d0f8:	str	r3, [sp, #24]
    d0fa:	mov	r6, r3
    d0fc:	cmp	r0, #0
    d0fe:	beq.w	d2d6 <_dtoa_r+0xa36>
    d102:	ldr	r3, [sp, #20]
    d104:	ldr	r5, [sp, #36]	; 0x24
    d106:	mvns	r3, r3
    d108:	str	r3, [sp, #16]
    d10a:	ldr	r1, [sp, #24]
    d10c:	mov	r0, r9
    d10e:	bl	c0e0 <_Bfree>
    d112:	cmp	r6, #0
    d114:	beq.w	cc36 <_dtoa_r+0x396>
    d118:	b.n	ce2e <_dtoa_r+0x58e>
    d11a:	ldr	r2, [sp, #60]	; 0x3c
    d11c:	cmp	r2, #0
    d11e:	beq.w	d592 <_dtoa_r+0xcf2>
    d122:	addw	r3, r3, #1075	; 0x433
    d126:	ldr	r7, [sp, #24]
    d128:	ldr	r5, [sp, #28]
    d12a:	b.n	cc86 <_dtoa_r+0x3e6>
    d12c:	movs	r0, #28
    d12e:	b.n	cd46 <_dtoa_r+0x4a6>
    d130:	ldr	r3, [sp, #0]
    d132:	cmp	r3, #1
    d134:	ble.w	d638 <_dtoa_r+0xd98>
    d138:	ldr	r7, [sp, #48]	; 0x30
    d13a:	movs	r0, #1
    d13c:	b.n	cd2e <_dtoa_r+0x48e>
    d13e:	nop
    d140:	.word	0x200006e0
    d144:	.word	0x200007a8
    d148:	.word	0x3ff00000
    d14c:	.word	0x401c0000
    d150:	.word	0x3fe00000
    d154:	.word	0x40240000
    d158:	.word	0x40140000
    d15c:	mov	r1, r6
    d15e:	movs	r3, #0
    d160:	movs	r2, #10
    d162:	mov	r0, r9
    d164:	bl	c0f4 <__multadd>
    d168:	ldr	r3, [sp, #56]	; 0x38
    d16a:	cmp	r3, #0
    d16c:	mov	r6, r0
    d16e:	ble.w	d68c <_dtoa_r+0xdec>
    d172:	str	r3, [sp, #32]
    d174:	cmp	r5, #0
    d176:	ble.n	d184 <_dtoa_r+0x8e4>
    d178:	mov	r1, r6
    d17a:	mov	r2, r5
    d17c:	mov	r0, r9
    d17e:	bl	c3f4 <__lshift>
    d182:	mov	r6, r0
    d184:	cmp	r7, #0
    d186:	bne.w	d482 <_dtoa_r+0xbe2>
    d18a:	mov	r8, r6
    d18c:	ldr	r3, [sp, #32]
    d18e:	ldr	r2, [sp, #36]	; 0x24
    d190:	subs	r3, #1
    d192:	adds	r3, r2, r3
    d194:	str	r3, [sp, #32]
    d196:	and.w	r3, sl, #1
    d19a:	str	r3, [sp, #40]	; 0x28
    d19c:	mov	r7, r2
    d19e:	ldr.w	fp, [sp, #24]
    d1a2:	mov	r0, r4
    d1a4:	mov	r1, fp
    d1a6:	bl	c778 <quorem>
    d1aa:	mov	r1, r6
    d1ac:	mov	r5, r0
    d1ae:	mov	r0, r4
    d1b0:	bl	c4a4 <__mcmp>
    d1b4:	mov	r2, r8
    d1b6:	mov	r1, fp
    d1b8:	mov	sl, r0
    d1ba:	mov	r0, r9
    d1bc:	bl	c4e8 <__mdiff>
    d1c0:	ldr	r2, [r0, #12]
    d1c2:	mov	fp, r0
    d1c4:	add.w	r3, r5, #48	; 0x30
    d1c8:	cmp	r2, #0
    d1ca:	bne.n	d260 <_dtoa_r+0x9c0>
    d1cc:	mov	r1, r0
    d1ce:	mov	r0, r4
    d1d0:	str	r3, [sp, #28]
    d1d2:	bl	c4a4 <__mcmp>
    d1d6:	mov	r1, fp
    d1d8:	str	r0, [sp, #20]
    d1da:	mov	r0, r9
    d1dc:	bl	c0e0 <_Bfree>
    d1e0:	ldr	r2, [sp, #20]
    d1e2:	ldr	r3, [sp, #28]
    d1e4:	cbnz	r2, d1f2 <_dtoa_r+0x952>
    d1e6:	ldr	r1, [sp, #0]
    d1e8:	cbnz	r1, d1f2 <_dtoa_r+0x952>
    d1ea:	ldr	r1, [sp, #40]	; 0x28
    d1ec:	cmp	r1, #0
    d1ee:	beq.w	d65c <_dtoa_r+0xdbc>
    d1f2:	cmp.w	sl, #0
    d1f6:	blt.w	d3c0 <_dtoa_r+0xb20>
    d1fa:	bne.n	d208 <_dtoa_r+0x968>
    d1fc:	ldr	r1, [sp, #0]
    d1fe:	cbnz	r1, d208 <_dtoa_r+0x968>
    d200:	ldr	r1, [sp, #40]	; 0x28
    d202:	cmp	r1, #0
    d204:	beq.w	d3c0 <_dtoa_r+0xb20>
    d208:	cmp	r2, #0
    d20a:	bgt.w	d4aa <_dtoa_r+0xc0a>
    d20e:	ldr	r2, [sp, #32]
    d210:	strb	r3, [r7, #0]
    d212:	add.w	sl, r7, #1
    d216:	cmp	r7, r2
    d218:	mov	r5, sl
    d21a:	beq.w	d4c2 <_dtoa_r+0xc22>
    d21e:	mov	r1, r4
    d220:	movs	r3, #0
    d222:	movs	r2, #10
    d224:	mov	r0, r9
    d226:	bl	c0f4 <__multadd>
    d22a:	cmp	r6, r8
    d22c:	mov	r4, r0
    d22e:	mov	r1, r6
    d230:	mov.w	r3, #0
    d234:	mov.w	r2, #10
    d238:	mov	r0, r9
    d23a:	beq.n	d254 <_dtoa_r+0x9b4>
    d23c:	bl	c0f4 <__multadd>
    d240:	mov	r1, r8
    d242:	mov	r6, r0
    d244:	movs	r3, #0
    d246:	movs	r2, #10
    d248:	mov	r0, r9
    d24a:	bl	c0f4 <__multadd>
    d24e:	mov	r7, sl
    d250:	mov	r8, r0
    d252:	b.n	d19e <_dtoa_r+0x8fe>
    d254:	bl	c0f4 <__multadd>
    d258:	mov	r7, sl
    d25a:	mov	r6, r0
    d25c:	mov	r8, r0
    d25e:	b.n	d19e <_dtoa_r+0x8fe>
    d260:	mov	r1, r0
    d262:	mov	r0, r9
    d264:	str	r3, [sp, #20]
    d266:	bl	c0e0 <_Bfree>
    d26a:	movs	r2, #1
    d26c:	ldr	r3, [sp, #20]
    d26e:	b.n	d1f2 <_dtoa_r+0x952>
    d270:	ldr	r1, [sp, #24]
    d272:	mov	r0, r4
    d274:	bl	c4a4 <__mcmp>
    d278:	cmp	r0, #0
    d27a:	bge.w	cd7c <_dtoa_r+0x4dc>
    d27e:	mov	r1, r4
    d280:	ldr	r4, [sp, #16]
    d282:	movs	r3, #0
    d284:	subs	r4, #1
    d286:	movs	r2, #10
    d288:	mov	r0, r9
    d28a:	str	r4, [sp, #16]
    d28c:	bl	c0f4 <__multadd>
    d290:	ldr	r3, [sp, #44]	; 0x2c
    d292:	mov	r4, r0
    d294:	cmp	r3, #0
    d296:	bne.w	d15c <_dtoa_r+0x8bc>
    d29a:	ldr	r3, [sp, #56]	; 0x38
    d29c:	cmp	r3, #0
    d29e:	ble.w	d67c <_dtoa_r+0xddc>
    d2a2:	str	r3, [sp, #32]
    d2a4:	b.n	cd8c <_dtoa_r+0x4ec>
    d2a6:	ldr	r4, [sp, #40]	; 0x28
    d2a8:	b.n	ccf4 <_dtoa_r+0x454>
    d2aa:	ldr	r3, [sp, #0]
    d2ac:	cmp	r3, #2
    d2ae:	ble.w	cd84 <_dtoa_r+0x4e4>
    d2b2:	ldr	r3, [sp, #32]
    d2b4:	cmp	r3, #0
    d2b6:	bne.w	d5f4 <_dtoa_r+0xd54>
    d2ba:	ldr	r1, [sp, #24]
    d2bc:	movs	r2, #5
    d2be:	mov	r0, r9
    d2c0:	bl	c0f4 <__multadd>
    d2c4:	mov	r1, r0
    d2c6:	str	r0, [sp, #24]
    d2c8:	mov	r0, r4
    d2ca:	bl	c4a4 <__mcmp>
    d2ce:	cmp	r0, #0
    d2d0:	str	r4, [sp, #40]	; 0x28
    d2d2:	ble.w	d102 <_dtoa_r+0x862>
    d2d6:	ldr	r2, [sp, #16]
    d2d8:	ldr	r1, [sp, #36]	; 0x24
    d2da:	movs	r3, #49	; 0x31
    d2dc:	adds	r2, #1
    d2de:	str	r2, [sp, #16]
    d2e0:	strb	r3, [r1, #0]
    d2e2:	adds	r5, r1, #1
    d2e4:	b.n	d10a <_dtoa_r+0x86a>
    d2e6:	ldr	r2, [sp, #16]
    d2e8:	adds	r2, #1
    d2ea:	str	r2, [sp, #16]
    d2ec:	ldr	r2, [sp, #36]	; 0x24
    d2ee:	movs	r3, #49	; 0x31
    d2f0:	strb	r3, [r2, #0]
    d2f2:	b.n	ce0e <_dtoa_r+0x56e>
    d2f4:	movs	r3, #1
    d2f6:	str	r3, [sp, #44]	; 0x2c
    d2f8:	b.n	cea0 <_dtoa_r+0x600>
    d2fa:	ldr.w	r9, [sp, #20]
    d2fe:	b.n	cc36 <_dtoa_r+0x396>
    d300:	cmp.w	sl, #0
    d304:	bne.w	cd1a <_dtoa_r+0x47a>
    d308:	ubfx	r3, fp, #0, #20
    d30c:	cmp	r3, #0
    d30e:	bne.w	d58e <_dtoa_r+0xcee>
    d312:	bic.w	r7, fp, #2147483648	; 0x80000000
    d316:	lsrs	r7, r7, #20
    d318:	lsls	r7, r7, #20
    d31a:	cbz	r7, d328 <_dtoa_r+0xa88>
    d31c:	ldr	r3, [sp, #28]
    d31e:	adds	r3, #1
    d320:	str	r3, [sp, #28]
    d322:	add.w	r8, r8, #1
    d326:	movs	r7, #1
    d328:	ldr	r3, [sp, #48]	; 0x30
    d32a:	movs	r0, #1
    d32c:	cmp	r3, #0
    d32e:	beq.w	cd2e <_dtoa_r+0x48e>
    d332:	b.n	cd1c <_dtoa_r+0x47c>
    d334:	mov	r0, sl
    d336:	bl	a408 <__aeabi_i2d>
    d33a:	mov	r2, r6
    d33c:	mov	r3, r7
    d33e:	bl	a4d4 <__aeabi_dmul>
    d342:	movs	r2, #0
    d344:	ldr	r3, [pc, #764]	; (d644 <_dtoa_r+0xda4>)
    d346:	bl	a170 <__adddf3>
    d34a:	mov	r4, r0
    d34c:	sub.w	r5, r1, #54525952	; 0x3400000
    d350:	mov	r0, r6
    d352:	mov	r1, r7
    d354:	movs	r2, #0
    d356:	ldr	r3, [pc, #752]	; (d648 <_dtoa_r+0xda8>)
    d358:	bl	a16c <__aeabi_dsub>
    d35c:	mov	r2, r4
    d35e:	mov	r3, r5
    d360:	mov	r6, r0
    d362:	mov	r7, r1
    d364:	bl	a9f4 <__aeabi_dcmpgt>
    d368:	cmp	r0, #0
    d36a:	bne.w	d4ca <_dtoa_r+0xc2a>
    d36e:	mov	r2, r4
    d370:	add.w	r3, r5, #2147483648	; 0x80000000
    d374:	mov	r0, r6
    d376:	mov	r1, r7
    d378:	bl	a9b8 <__aeabi_dcmplt>
    d37c:	cmp	r0, #0
    d37e:	beq.n	d416 <_dtoa_r+0xb76>
    d380:	movs	r3, #0
    d382:	str	r3, [sp, #24]
    d384:	mov	r6, r3
    d386:	b.n	d102 <_dtoa_r+0x862>
    d388:	ldr	r0, [sp, #36]	; 0x24
    d38a:	b.w	c912 <_dtoa_r+0x72>
    d38e:	ldr	r3, [sp, #24]
    d390:	ldr	r2, [sp, #48]	; 0x30
    d392:	str	r7, [sp, #24]
    d394:	subs	r3, r7, r3
    d396:	add	r2, r3
    d398:	str	r2, [sp, #48]	; 0x30
    d39a:	movs	r7, #0
    d39c:	b.n	cc7a <_dtoa_r+0x3da>
    d39e:	vldr	d7, [sp, #64]	; 0x40
    d3a2:	mov.w	sl, #2
    d3a6:	vstr	d7, [sp, #72]	; 0x48
    d3aa:	b.n	cf2c <_dtoa_r+0x68c>
    d3ac:	mov	r4, r3
    d3ae:	movs	r1, #0
    d3b0:	str.w	r1, [r9, #68]	; 0x44
    d3b4:	b.n	ced8 <_dtoa_r+0x638>
    d3b6:	movs	r4, #1
    d3b8:	str	r4, [sp, #56]	; 0x38
    d3ba:	str	r4, [sp, #32]
    d3bc:	str	r4, [sp, #20]
    d3be:	b.n	d3ae <_dtoa_r+0xb0e>
    d3c0:	cmp	r2, #0
    d3c2:	mov	sl, r3
    d3c4:	ble.n	d3ea <_dtoa_r+0xb4a>
    d3c6:	mov	r1, r4
    d3c8:	movs	r2, #1
    d3ca:	mov	r0, r9
    d3cc:	bl	c3f4 <__lshift>
    d3d0:	ldr	r1, [sp, #24]
    d3d2:	mov	r4, r0
    d3d4:	bl	c4a4 <__mcmp>
    d3d8:	cmp	r0, #0
    d3da:	ble.w	d66e <_dtoa_r+0xdce>
    d3de:	cmp.w	sl, #57	; 0x39
    d3e2:	beq.w	d5f8 <_dtoa_r+0xd58>
    d3e6:	add.w	sl, r5, #49	; 0x31
    d3ea:	mov	fp, r6
    d3ec:	strb.w	sl, [r7]
    d3f0:	adds	r5, r7, #1
    d3f2:	mov	r6, r8
    d3f4:	str	r4, [sp, #40]	; 0x28
    d3f6:	b.n	ce0e <_dtoa_r+0x56e>
    d3f8:	bne.n	d404 <_dtoa_r+0xb64>
    d3fa:	tst.w	sl, #1
    d3fe:	beq.n	d404 <_dtoa_r+0xb64>
    d400:	b.n	cdee <_dtoa_r+0x54e>
    d402:	mov	r5, r2
    d404:	ldrb.w	r3, [r5, #-1]
    d408:	cmp	r3, #48	; 0x30
    d40a:	add.w	r2, r5, #4294967295
    d40e:	beq.n	d402 <_dtoa_r+0xb62>
    d410:	b.n	ce0e <_dtoa_r+0x56e>
    d412:	ldr.w	r8, [sp, #72]	; 0x48
    d416:	ldrd	sl, fp, [sp, #64]	; 0x40
    d41a:	b.w	cab4 <_dtoa_r+0x214>
    d41e:	ldr	r1, [sp, #36]	; 0x24
    d420:	movs	r2, #48	; 0x30
    d422:	strb	r2, [r1, #0]
    d424:	ldr	r2, [sp, #16]
    d426:	ldrb.w	r4, [r5, #-1]
    d42a:	adds	r2, #1
    d42c:	str	r2, [sp, #16]
    d42e:	b.n	cc32 <_dtoa_r+0x392>
    d430:	ldr	r3, [sp, #16]
    d432:	negs	r4, r3
    d434:	cmp	r4, #0
    d436:	beq.w	d5a0 <_dtoa_r+0xd00>
    d43a:	ldr	r3, [pc, #528]	; (d64c <_dtoa_r+0xdac>)
    d43c:	and.w	r2, r4, #15
    d440:	add.w	r3, r3, r2, lsl #3
    d444:	ldrd	r2, r3, [r3]
    d448:	ldrd	r0, r1, [sp, #64]	; 0x40
    d44c:	bl	a4d4 <__aeabi_dmul>
    d450:	asrs	r4, r4, #4
    d452:	mov	r6, r0
    d454:	mov	r7, r1
    d456:	beq.w	d686 <_dtoa_r+0xde6>
    d45a:	ldr	r5, [pc, #500]	; (d650 <_dtoa_r+0xdb0>)
    d45c:	mov.w	sl, #2
    d460:	lsls	r2, r4, #31
    d462:	bpl.n	d478 <_dtoa_r+0xbd8>
    d464:	mov	r0, r6
    d466:	mov	r1, r7
    d468:	ldrd	r2, r3, [r5]
    d46c:	bl	a4d4 <__aeabi_dmul>
    d470:	add.w	sl, sl, #1
    d474:	mov	r6, r0
    d476:	mov	r7, r1
    d478:	asrs	r4, r4, #1
    d47a:	add.w	r5, r5, #8
    d47e:	bne.n	d460 <_dtoa_r+0xbc0>
    d480:	b.n	cf60 <_dtoa_r+0x6c0>
    d482:	ldr	r1, [r6, #4]
    d484:	mov	r0, r9
    d486:	bl	c094 <_Balloc>
    d48a:	ldr	r3, [r6, #16]
    d48c:	adds	r2, r3, #2
    d48e:	mov	r5, r0
    d490:	lsls	r2, r2, #2
    d492:	add.w	r1, r6, #12
    d496:	adds	r0, #12
    d498:	bl	8310 <memcpy>
    d49c:	mov	r1, r5
    d49e:	movs	r2, #1
    d4a0:	mov	r0, r9
    d4a2:	bl	c3f4 <__lshift>
    d4a6:	mov	r8, r0
    d4a8:	b.n	d18c <_dtoa_r+0x8ec>
    d4aa:	cmp	r3, #57	; 0x39
    d4ac:	beq.w	d5f8 <_dtoa_r+0xd58>
    d4b0:	add.w	sl, r3, #1
    d4b4:	mov	fp, r6
    d4b6:	strb.w	sl, [r7]
    d4ba:	adds	r5, r7, #1
    d4bc:	mov	r6, r8
    d4be:	str	r4, [sp, #40]	; 0x28
    d4c0:	b.n	ce0e <_dtoa_r+0x56e>
    d4c2:	mov	fp, r6
    d4c4:	mov	sl, r3
    d4c6:	mov	r6, r8
    d4c8:	b.n	cdd6 <_dtoa_r+0x536>
    d4ca:	movs	r3, #0
    d4cc:	str	r3, [sp, #24]
    d4ce:	mov	r6, r3
    d4d0:	b.n	d2d6 <_dtoa_r+0xa36>
    d4d2:	ldr	r3, [sp, #72]	; 0x48
    d4d4:	ldr	r1, [pc, #372]	; (d64c <_dtoa_r+0xdac>)
    d4d6:	subs	r2, r3, #1
    d4d8:	add.w	r1, r1, r2, lsl #3
    d4dc:	mov	r3, r5
    d4de:	str	r2, [sp, #92]	; 0x5c
    d4e0:	ldrd	r0, r1, [r1]
    d4e4:	mov	r2, r4
    d4e6:	bl	a4d4 <__aeabi_dmul>
    d4ea:	strd	r0, r1, [sp, #80]	; 0x50
    d4ee:	mov	r1, r7
    d4f0:	mov	r0, r6
    d4f2:	bl	aa34 <__aeabi_d2iz>
    d4f6:	mov	r4, r0
    d4f8:	bl	a408 <__aeabi_i2d>
    d4fc:	mov	r3, r1
    d4fe:	mov	r2, r0
    d500:	mov	r1, r7
    d502:	mov	r0, r6
    d504:	bl	a16c <__aeabi_dsub>
    d508:	ldr	r3, [sp, #72]	; 0x48
    d50a:	mov	r7, r1
    d50c:	ldr	r1, [sp, #36]	; 0x24
    d50e:	adds	r4, #48	; 0x30
    d510:	cmp	r3, #1
    d512:	mov	r6, r0
    d514:	strb	r4, [r1, #0]
    d516:	add.w	r5, r1, #1
    d51a:	beq.n	d55e <_dtoa_r+0xcbe>
    d51c:	ldr	r3, [sp, #72]	; 0x48
    d51e:	ldr	r2, [sp, #36]	; 0x24
    d520:	add	r3, r2
    d522:	mov	sl, r3
    d524:	mov	fp, r5
    d526:	movs	r2, #0
    d528:	ldr	r3, [pc, #296]	; (d654 <_dtoa_r+0xdb4>)
    d52a:	mov	r0, r6
    d52c:	mov	r1, r7
    d52e:	bl	a4d4 <__aeabi_dmul>
    d532:	mov	r7, r1
    d534:	mov	r6, r0
    d536:	bl	aa34 <__aeabi_d2iz>
    d53a:	mov	r4, r0
    d53c:	bl	a408 <__aeabi_i2d>
    d540:	adds	r4, #48	; 0x30
    d542:	mov	r2, r0
    d544:	mov	r3, r1
    d546:	mov	r0, r6
    d548:	mov	r1, r7
    d54a:	bl	a16c <__aeabi_dsub>
    d54e:	strb.w	r4, [fp], #1
    d552:	cmp	sl, fp
    d554:	mov	r6, r0
    d556:	mov	r7, r1
    d558:	bne.n	d526 <_dtoa_r+0xc86>
    d55a:	ldr	r3, [sp, #92]	; 0x5c
    d55c:	add	r5, r3
    d55e:	movs	r2, #0
    d560:	ldr	r3, [pc, #244]	; (d658 <_dtoa_r+0xdb8>)
    d562:	ldrd	r0, r1, [sp, #80]	; 0x50
    d566:	bl	a170 <__adddf3>
    d56a:	mov	r2, r6
    d56c:	mov	r3, r7
    d56e:	bl	a9b8 <__aeabi_dcmplt>
    d572:	cmp	r0, #0
    d574:	beq.n	d608 <_dtoa_r+0xd68>
    d576:	ldr	r3, [sp, #88]	; 0x58
    d578:	str	r3, [sp, #16]
    d57a:	ldrb.w	r4, [r5, #-1]
    d57e:	b.w	cc1a <_dtoa_r+0x37a>
    d582:	ldr	r3, [sp, #28]
    d584:	ldr	r2, [sp, #32]
    d586:	subs	r5, r3, r2
    d588:	movs	r3, #0
    d58a:	b.w	cc86 <_dtoa_r+0x3e6>
    d58e:	movs	r7, #0
    d590:	b.n	d328 <_dtoa_r+0xa88>
    d592:	ldr	r3, [sp, #96]	; 0x60
    d594:	ldr	r7, [sp, #24]
    d596:	ldr	r5, [sp, #28]
    d598:	rsb	r3, r3, #54	; 0x36
    d59c:	b.w	cc86 <_dtoa_r+0x3e6>
    d5a0:	ldrd	r6, r7, [sp, #64]	; 0x40
    d5a4:	mov.w	sl, #2
    d5a8:	b.n	cf60 <_dtoa_r+0x6c0>
    d5aa:	ldr	r3, [sp, #32]
    d5ac:	cmp	r3, #0
    d5ae:	beq.w	d334 <_dtoa_r+0xa94>
    d5b2:	ldr	r3, [sp, #56]	; 0x38
    d5b4:	cmp	r3, #0
    d5b6:	ble.w	d416 <_dtoa_r+0xb76>
    d5ba:	movs	r2, #0
    d5bc:	ldr	r3, [pc, #148]	; (d654 <_dtoa_r+0xdb4>)
    d5be:	mov	r0, r6
    d5c0:	mov	r1, r7
    d5c2:	bl	a4d4 <__aeabi_dmul>
    d5c6:	mov	r6, r0
    d5c8:	mov	r7, r1
    d5ca:	add.w	r0, sl, #1
    d5ce:	bl	a408 <__aeabi_i2d>
    d5d2:	mov	r2, r6
    d5d4:	mov	r3, r7
    d5d6:	bl	a4d4 <__aeabi_dmul>
    d5da:	movs	r2, #0
    d5dc:	ldr	r3, [pc, #100]	; (d644 <_dtoa_r+0xda4>)
    d5de:	bl	a170 <__adddf3>
    d5e2:	ldr	r2, [sp, #16]
    d5e4:	ldr	r3, [sp, #56]	; 0x38
    d5e6:	str	r3, [sp, #72]	; 0x48
    d5e8:	subs	r2, #1
    d5ea:	mov	r4, r0
    d5ec:	sub.w	r5, r1, #54525952	; 0x3400000
    d5f0:	str	r2, [sp, #88]	; 0x58
    d5f2:	b.n	cfa2 <_dtoa_r+0x702>
    d5f4:	str	r4, [sp, #40]	; 0x28
    d5f6:	b.n	d102 <_dtoa_r+0x862>
    d5f8:	movs	r2, #57	; 0x39
    d5fa:	mov	fp, r6
    d5fc:	str	r4, [sp, #40]	; 0x28
    d5fe:	mov	r6, r8
    d600:	strb	r2, [r7, #0]
    d602:	adds	r5, r7, #1
    d604:	b.w	cdf2 <_dtoa_r+0x552>
    d608:	ldrd	r2, r3, [sp, #80]	; 0x50
    d60c:	movs	r0, #0
    d60e:	ldr	r1, [pc, #72]	; (d658 <_dtoa_r+0xdb8>)
    d610:	bl	a16c <__aeabi_dsub>
    d614:	mov	r2, r6
    d616:	mov	r3, r7
    d618:	bl	a9f4 <__aeabi_dcmpgt>
    d61c:	cbnz	r0, d622 <_dtoa_r+0xd82>
    d61e:	b.n	d416 <_dtoa_r+0xb76>
    d620:	mov	r5, r2
    d622:	ldrb.w	r3, [r5, #-1]
    d626:	cmp	r3, #48	; 0x30
    d628:	add.w	r2, r5, #4294967295
    d62c:	beq.n	d620 <_dtoa_r+0xd80>
    d62e:	b.n	d0a4 <_dtoa_r+0x804>
    d630:	ldr	r3, [sp, #88]	; 0x58
    d632:	str	r3, [sp, #16]
    d634:	b.w	cc1a <_dtoa_r+0x37a>
    d638:	cmp.w	sl, #0
    d63c:	bne.w	d138 <_dtoa_r+0x898>
    d640:	b.n	d308 <_dtoa_r+0xa68>
    d642:	nop
    d644:	.word	0x401c0000
    d648:	.word	0x40140000
    d64c:	.word	0x200006e0
    d650:	.word	0x200007a8
    d654:	.word	0x40240000
    d658:	.word	0x3fe00000
    d65c:	cmp	r3, #57	; 0x39
    d65e:	mov	fp, sl
    d660:	mov	sl, r3
    d662:	beq.n	d5f8 <_dtoa_r+0xd58>
    d664:	cmp.w	fp, #0
    d668:	bgt.w	d3e6 <_dtoa_r+0xb46>
    d66c:	b.n	d3ea <_dtoa_r+0xb4a>
    d66e:	bne.w	d3ea <_dtoa_r+0xb4a>
    d672:	tst.w	sl, #1
    d676:	beq.w	d3ea <_dtoa_r+0xb4a>
    d67a:	b.n	d3de <_dtoa_r+0xb3e>
    d67c:	ldr	r3, [sp, #0]
    d67e:	cmp	r3, #2
    d680:	bgt.n	d6ce <_dtoa_r+0xe2e>
    d682:	ldr	r3, [sp, #56]	; 0x38
    d684:	b.n	d2a2 <_dtoa_r+0xa02>
    d686:	mov.w	sl, #2
    d68a:	b.n	cf60 <_dtoa_r+0x6c0>
    d68c:	ldr	r3, [sp, #0]
    d68e:	cmp	r3, #2
    d690:	bgt.n	d6ce <_dtoa_r+0xe2e>
    d692:	ldr	r3, [sp, #56]	; 0x38
    d694:	b.n	d172 <_dtoa_r+0x8d2>
    d696:	movs	r4, #0
    d698:	str.w	r4, [r9, #68]	; 0x44
    d69c:	mov	r1, r4
    d69e:	mov	r0, r9
    d6a0:	bl	c094 <_Balloc>
    d6a4:	mov.w	r3, #4294967295
    d6a8:	str	r3, [sp, #32]
    d6aa:	str	r3, [sp, #56]	; 0x38
    d6ac:	movs	r3, #1
    d6ae:	str	r0, [sp, #36]	; 0x24
    d6b0:	str	r4, [sp, #20]
    d6b2:	str.w	r0, [r9, #64]	; 0x40
    d6b6:	str	r3, [sp, #44]	; 0x2c
    d6b8:	b.w	cab4 <_dtoa_r+0x214>
    d6bc:	beq.w	cd50 <_dtoa_r+0x4b0>
    d6c0:	rsb	r0, r0, #60	; 0x3c
    d6c4:	b.w	cd46 <_dtoa_r+0x4a6>
    d6c8:	movs	r6, #1
    d6ca:	b.w	ca46 <_dtoa_r+0x1a6>
    d6ce:	ldr	r3, [sp, #56]	; 0x38
    d6d0:	str	r3, [sp, #32]
    d6d2:	b.n	d2b2 <_dtoa_r+0xa12>
    d6d4:	movs	r0, r0
	...

0000d6d8 <_svfprintf_r>:
    d6d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6dc:	sub	sp, #260	; 0x104
    d6de:	mov	r4, r1
    d6e0:	str	r1, [sp, #20]
    d6e2:	mov	r5, r2
    d6e4:	str	r3, [sp, #40]	; 0x28
    d6e6:	str	r0, [sp, #24]
    d6e8:	bl	c078 <_localeconv_r>
    d6ec:	ldr	r3, [r0, #0]
    d6ee:	str	r3, [sp, #76]	; 0x4c
    d6f0:	mov	r0, r3
    d6f2:	bl	bb40 <strlen>
    d6f6:	ldrh	r3, [r4, #12]
    d6f8:	str	r0, [sp, #72]	; 0x48
    d6fa:	lsls	r6, r3, #24
    d6fc:	bpl.n	d706 <_svfprintf_r+0x2e>
    d6fe:	ldr	r3, [r4, #16]
    d700:	cmp	r3, #0
    d702:	beq.w	e968 <_svfprintf_r+0x1290>
    d706:	vldr	d7, [pc, #664]	; d9a0 <_svfprintf_r+0x2c8>
    d70a:	movs	r3, #0
    d70c:	vstr	d7, [sp, #64]	; 0x40
    d710:	str	r3, [sp, #56]	; 0x38
    d712:	str	r3, [sp, #148]	; 0x94
    d714:	str	r3, [sp, #144]	; 0x90
    d716:	str	r3, [sp, #84]	; 0x54
    d718:	str	r3, [sp, #28]
    d71a:	ldr.w	sl, [pc, #656]	; d9ac <_svfprintf_r+0x2d4>
    d71e:	add	r3, sp, #192	; 0xc0
    d720:	str	r3, [sp, #140]	; 0x8c
    d722:	mov	r9, r3
    d724:	mov	r8, r5
    d726:	ldrb.w	r3, [r8]
    d72a:	mov	r4, r8
    d72c:	cbz	r3, d76a <_svfprintf_r+0x92>
    d72e:	cmp	r3, #37	; 0x25
    d730:	bne.n	d738 <_svfprintf_r+0x60>
    d732:	b.n	d76a <_svfprintf_r+0x92>
    d734:	cmp	r3, #37	; 0x25
    d736:	beq.n	d740 <_svfprintf_r+0x68>
    d738:	ldrb.w	r3, [r4, #1]!
    d73c:	cmp	r3, #0
    d73e:	bne.n	d734 <_svfprintf_r+0x5c>
    d740:	rsb	r5, r8, r4
    d744:	cbz	r5, d76a <_svfprintf_r+0x92>
    d746:	ldr	r3, [sp, #144]	; 0x90
    d748:	ldr	r2, [sp, #148]	; 0x94
    d74a:	str.w	r8, [r9]
    d74e:	adds	r3, #1
    d750:	add	r2, r5
    d752:	cmp	r3, #7
    d754:	str.w	r5, [r9, #4]
    d758:	str	r2, [sp, #148]	; 0x94
    d75a:	str	r3, [sp, #144]	; 0x90
    d75c:	bgt.w	d8ac <_svfprintf_r+0x1d4>
    d760:	add.w	r9, r9, #8
    d764:	ldr	r3, [sp, #28]
    d766:	add	r3, r5
    d768:	str	r3, [sp, #28]
    d76a:	ldrb	r3, [r4, #0]
    d76c:	cmp	r3, #0
    d76e:	beq.w	d8be <_svfprintf_r+0x1e6>
    d772:	movs	r3, #0
    d774:	mov	r2, r3
    d776:	strb.w	r3, [sp, #111]	; 0x6f
    d77a:	mov	r1, r3
    d77c:	str	r3, [sp, #32]
    d77e:	str	r3, [sp, #12]
    d780:	mov.w	fp, #4294967295
    d784:	ldrb	r3, [r4, #1]
    d786:	add.w	r8, r4, #1
    d78a:	mov	r5, fp
    d78c:	add.w	r8, r8, #1
    d790:	sub.w	r0, r3, #32
    d794:	cmp	r0, #88	; 0x58
    d796:	bhi.w	e002 <_svfprintf_r+0x92a>
    d79a:	tbh	[pc, r0, lsl #1]
    d79e:	.short	0x03a0
    d7a0:	.word	0x04320432
    d7a4:	.word	0x043203a8
    d7a8:	.word	0x04320432
    d7ac:	.word	0x04320432
    d7b0:	.word	0x03af0432
    d7b4:	.word	0x043203bd
    d7b8:	.word	0x00e2005d
    d7bc:	.word	0x01090432
    d7c0:	.word	0x01100110
    d7c4:	.word	0x01100110
    d7c8:	.word	0x01100110
    d7cc:	.word	0x01100110
    d7d0:	.word	0x04320110
    d7d4:	.word	0x04320432
    d7d8:	.word	0x04320432
    d7dc:	.word	0x04320432
    d7e0:	.word	0x04320432
    d7e4:	.word	0x01200432
    d7e8:	.word	0x04320286
    d7ec:	.word	0x04320286
    d7f0:	.word	0x04320432
    d7f4:	.word	0x02d40432
    d7f8:	.word	0x04320432
    d7fc:	.word	0x043202e5
    d800:	.word	0x04320432
    d804:	.word	0x04320432
    d808:	.word	0x0432030f
    d80c:	.word	0x033d0432
    d810:	.word	0x04320432
    d814:	.word	0x04320432
    d818:	.word	0x04320432
    d81c:	.word	0x04320432
    d820:	.word	0x04320432
    d824:	.word	0x0391037e
    d828:	.word	0x02860286
    d82c:	.word	0x03990286
    d830:	.word	0x04320391
    d834:	.word	0x04070432
    d838:	.word	0x04120432
    d83c:	.word	0x006400a3
    d840:	.word	0x043203c2
    d844:	.word	0x043203c9
    d848:	.word	0x043203ea
    d84c:	.word	0x03f20432
    d850:	ldr	r0, [sp, #32]
    d852:	str	r3, [sp, #40]	; 0x28
    d854:	negs	r0, r0
    d856:	str	r0, [sp, #32]
    d858:	ldr	r3, [sp, #12]
    d85a:	orr.w	r3, r3, #4
    d85e:	str	r3, [sp, #12]
    d860:	ldrb.w	r3, [r8]
    d864:	b.n	d78c <_svfprintf_r+0xb4>
    d866:	ldr	r0, [sp, #40]	; 0x28
    d868:	mov	fp, r5
    d86a:	movs	r1, #0
    d86c:	ldr	r4, [r0, #0]
    d86e:	strb.w	r1, [sp, #111]	; 0x6f
    d872:	adds	r7, r0, #4
    d874:	ldr	r0, [sp, #12]
    d876:	movs	r3, #48	; 0x30
    d878:	movs	r2, #120	; 0x78
    d87a:	cmp	fp, r1
    d87c:	strb.w	r3, [sp, #112]	; 0x70
    d880:	mov.w	r5, #0
    d884:	strb.w	r2, [sp, #113]	; 0x71
    d888:	orr.w	r3, r0, #2
    d88c:	blt.w	e03c <_svfprintf_r+0x964>
    d890:	bic.w	r3, r0, #128	; 0x80
    d894:	orr.w	r3, r3, #2
    d898:	str	r3, [sp, #12]
    d89a:	orrs.w	r3, r4, r5
    d89e:	str	r7, [sp, #40]	; 0x28
    d8a0:	beq.w	dfe8 <_svfprintf_r+0x910>
    d8a4:	mov	r7, r1
    d8a6:	str	r2, [sp, #52]	; 0x34
    d8a8:	ldr	r0, [pc, #252]	; (d9a8 <_svfprintf_r+0x2d0>)
    d8aa:	b.n	de7a <_svfprintf_r+0x7a2>
    d8ac:	add	r2, sp, #140	; 0x8c
    d8ae:	ldr	r1, [sp, #20]
    d8b0:	ldr	r0, [sp, #24]
    d8b2:	bl	edbc <__ssprint_r>
    d8b6:	cbnz	r0, d8cc <_svfprintf_r+0x1f4>
    d8b8:	add.w	r9, sp, #192	; 0xc0
    d8bc:	b.n	d764 <_svfprintf_r+0x8c>
    d8be:	ldr	r3, [sp, #148]	; 0x94
    d8c0:	cbz	r3, d8cc <_svfprintf_r+0x1f4>
    d8c2:	ldr	r0, [sp, #24]
    d8c4:	ldr	r1, [sp, #20]
    d8c6:	add	r2, sp, #140	; 0x8c
    d8c8:	bl	edbc <__ssprint_r>
    d8cc:	ldr	r3, [sp, #20]
    d8ce:	ldrh	r3, [r3, #12]
    d8d0:	tst.w	r3, #64	; 0x40
    d8d4:	ldr	r3, [sp, #28]
    d8d6:	it	ne
    d8d8:	movne.w	r3, #4294967295
    d8dc:	mov	r0, r3
    d8de:	add	sp, #260	; 0x104
    d8e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8e4:	str	r3, [sp, #52]	; 0x34
    d8e6:	mov	fp, r5
    d8e8:	cmp	r2, #0
    d8ea:	bne.w	ed54 <_svfprintf_r+0x167c>
    d8ee:	ldr	r2, [sp, #12]
    d8f0:	ands.w	r3, r2, #32
    d8f4:	beq.w	dd84 <_svfprintf_r+0x6ac>
    d8f8:	ldr	r7, [sp, #40]	; 0x28
    d8fa:	adds	r7, #7
    d8fc:	bic.w	r3, r7, #7
    d900:	movs	r7, #0
    d902:	add.w	r1, r3, #8
    d906:	cmp	fp, r7
    d908:	str	r1, [sp, #40]	; 0x28
    d90a:	ldrd	r4, r5, [r3]
    d90e:	strb.w	r7, [sp, #111]	; 0x6f
    d912:	blt.w	e7da <_svfprintf_r+0x1102>
    d916:	bic.w	r3, r2, #128	; 0x80
    d91a:	str	r3, [sp, #12]
    d91c:	orrs.w	r3, r4, r5
    d920:	beq.w	e02c <_svfprintf_r+0x954>
    d924:	add	r6, sp, #192	; 0xc0
    d926:	lsrs	r2, r4, #3
    d928:	orr.w	r2, r2, r5, lsl #29
    d92c:	lsrs	r1, r5, #3
    d92e:	and.w	r3, r4, #7
    d932:	mov	r5, r1
    d934:	mov	r4, r2
    d936:	adds	r3, #48	; 0x30
    d938:	orrs.w	r2, r4, r5
    d93c:	strb.w	r3, [r6, #-1]!
    d940:	bne.n	d926 <_svfprintf_r+0x24e>
    d942:	ldr	r2, [sp, #12]
    d944:	lsls	r1, r2, #31
    d946:	bpl.w	da68 <_svfprintf_r+0x390>
    d94a:	cmp	r3, #48	; 0x30
    d94c:	beq.w	da68 <_svfprintf_r+0x390>
    d950:	movs	r2, #48	; 0x30
    d952:	subs	r3, r6, #1
    d954:	strb.w	r2, [r6, #-1]
    d958:	add	r2, sp, #192	; 0xc0
    d95a:	subs	r2, r2, r3
    d95c:	str	r2, [sp, #36]	; 0x24
    d95e:	mov	r6, r3
    d960:	b.n	da6e <_svfprintf_r+0x396>
    d962:	ldrb.w	r3, [r8]
    d966:	cmp	r3, #42	; 0x2a
    d968:	add.w	r4, r8, #1
    d96c:	beq.w	ed38 <_svfprintf_r+0x1660>
    d970:	sub.w	r0, r3, #48	; 0x30
    d974:	cmp	r0, #9
    d976:	it	ls
    d978:	movls	r5, #0
    d97a:	bhi.w	ec8a <_svfprintf_r+0x15b2>
    d97e:	ldrb.w	r3, [r4], #1
    d982:	add.w	r5, r5, r5, lsl #2
    d986:	add.w	r5, r0, r5, lsl #1
    d98a:	sub.w	r0, r3, #48	; 0x30
    d98e:	cmp	r0, #9
    d990:	bls.n	d97e <_svfprintf_r+0x2a6>
    d992:	orr.w	r5, r5, r5, asr #31
    d996:	mov	r8, r4
    d998:	b.n	d790 <_svfprintf_r+0xb8>
    d99a:	nop
    d99c:	nop.w
	...
    d9a8:	.word	0x20000824
    d9ac:	.word	0x200007f0
    d9b0:	ldr	r3, [sp, #12]
    d9b2:	orr.w	r3, r3, #128	; 0x80
    d9b6:	str	r3, [sp, #12]
    d9b8:	ldrb.w	r3, [r8]
    d9bc:	b.n	d78c <_svfprintf_r+0xb4>
    d9be:	sub.w	r0, r3, #48	; 0x30
    d9c2:	movs	r3, #0
    d9c4:	mov	r4, r3
    d9c6:	ldrb.w	r3, [r8], #1
    d9ca:	add.w	r4, r4, r4, lsl #2
    d9ce:	add.w	r4, r0, r4, lsl #1
    d9d2:	sub.w	r0, r3, #48	; 0x30
    d9d6:	cmp	r0, #9
    d9d8:	bls.n	d9c6 <_svfprintf_r+0x2ee>
    d9da:	str	r4, [sp, #32]
    d9dc:	b.n	d790 <_svfprintf_r+0xb8>
    d9de:	str	r3, [sp, #52]	; 0x34
    d9e0:	mov	fp, r5
    d9e2:	cmp	r2, #0
    d9e4:	bne.w	ed70 <_svfprintf_r+0x1698>
    d9e8:	ldr	r3, [sp, #12]
    d9ea:	orr.w	r3, r3, #16
    d9ee:	str	r3, [sp, #12]
    d9f0:	ldr	r3, [sp, #12]
    d9f2:	lsls	r4, r3, #26
    d9f4:	bpl.w	e466 <_svfprintf_r+0xd8e>
    d9f8:	ldr	r7, [sp, #40]	; 0x28
    d9fa:	adds	r7, #7
    d9fc:	bic.w	r7, r7, #7
    da00:	ldrd	r2, r3, [r7]
    da04:	add.w	r1, r7, #8
    da08:	str	r1, [sp, #40]	; 0x28
    da0a:	mov	r4, r2
    da0c:	mov	r5, r3
    da0e:	cmp	r2, #0
    da10:	sbcs.w	r3, r3, #0
    da14:	blt.w	e4dc <_svfprintf_r+0xe04>
    da18:	cmp.w	fp, #0
    da1c:	ldrb.w	r7, [sp, #111]	; 0x6f
    da20:	blt.w	e4a2 <_svfprintf_r+0xdca>
    da24:	ldr	r3, [sp, #12]
    da26:	bic.w	r3, r3, #128	; 0x80
    da2a:	str	r3, [sp, #12]
    da2c:	orrs.w	r3, r4, r5
    da30:	beq.w	de04 <_svfprintf_r+0x72c>
    da34:	cmp	r5, #0
    da36:	it	eq
    da38:	cmpeq	r4, #10
    da3a:	bcc.w	de0e <_svfprintf_r+0x736>
    da3e:	add	r6, sp, #192	; 0xc0
    da40:	mov	r0, r4
    da42:	mov	r1, r5
    da44:	movs	r2, #10
    da46:	movs	r3, #0
    da48:	bl	aa84 <__aeabi_uldivmod>
    da4c:	adds	r2, #48	; 0x30
    da4e:	strb.w	r2, [r6, #-1]!
    da52:	mov	r0, r4
    da54:	mov	r1, r5
    da56:	movs	r3, #0
    da58:	movs	r2, #10
    da5a:	bl	aa84 <__aeabi_uldivmod>
    da5e:	mov	r4, r0
    da60:	mov	r5, r1
    da62:	orrs.w	r3, r4, r5
    da66:	bne.n	da40 <_svfprintf_r+0x368>
    da68:	add	r3, sp, #192	; 0xc0
    da6a:	subs	r3, r3, r6
    da6c:	str	r3, [sp, #36]	; 0x24
    da6e:	ldr	r3, [sp, #36]	; 0x24
    da70:	cmp	r3, fp
    da72:	it	lt
    da74:	movlt	r3, fp
    da76:	str	r3, [sp, #16]
    da78:	movs	r3, #0
    da7a:	str	r3, [sp, #60]	; 0x3c
    da7c:	cbz	r7, da84 <_svfprintf_r+0x3ac>
    da7e:	ldr	r3, [sp, #16]
    da80:	adds	r3, #1
    da82:	str	r3, [sp, #16]
    da84:	ldr	r3, [sp, #12]
    da86:	ands.w	r3, r3, #2
    da8a:	str	r3, [sp, #44]	; 0x2c
    da8c:	beq.n	da94 <_svfprintf_r+0x3bc>
    da8e:	ldr	r3, [sp, #16]
    da90:	adds	r3, #2
    da92:	str	r3, [sp, #16]
    da94:	ldr	r3, [sp, #12]
    da96:	ands.w	r3, r3, #132	; 0x84
    da9a:	str	r3, [sp, #48]	; 0x30
    da9c:	bne.w	e056 <_svfprintf_r+0x97e>
    daa0:	ldr	r3, [sp, #32]
    daa2:	ldr	r2, [sp, #16]
    daa4:	subs	r5, r3, r2
    daa6:	cmp	r5, #0
    daa8:	ble.w	e056 <_svfprintf_r+0x97e>
    daac:	cmp	r5, #16
    daae:	ldr	r1, [sp, #148]	; 0x94
    dab0:	ldr	r2, [sp, #144]	; 0x90
    dab2:	ldr	r7, [pc, #672]	; (dd54 <_svfprintf_r+0x67c>)
    dab4:	ble.n	db06 <_svfprintf_r+0x42e>
    dab6:	str	r6, [sp, #80]	; 0x50
    dab8:	mov	r0, r9
    daba:	movs	r4, #16
    dabc:	mov	r9, r7
    dabe:	ldr	r6, [sp, #20]
    dac0:	mov	r7, r5
    dac2:	ldr	r5, [sp, #24]
    dac4:	b.n	dad0 <_svfprintf_r+0x3f8>
    dac6:	subs	r7, #16
    dac8:	cmp	r7, #16
    daca:	add.w	r0, r0, #8
    dace:	ble.n	dafe <_svfprintf_r+0x426>
    dad0:	adds	r2, #1
    dad2:	ldr	r3, [pc, #640]	; (dd54 <_svfprintf_r+0x67c>)
    dad4:	str	r2, [sp, #144]	; 0x90
    dad6:	adds	r1, #16
    dad8:	cmp	r2, #7
    dada:	str	r1, [sp, #148]	; 0x94
    dadc:	stmia.w	r0, {r3, r4}
    dae0:	ble.n	dac6 <_svfprintf_r+0x3ee>
    dae2:	add	r2, sp, #140	; 0x8c
    dae4:	mov	r1, r6
    dae6:	mov	r0, r5
    dae8:	bl	edbc <__ssprint_r>
    daec:	cmp	r0, #0
    daee:	bne.w	d8cc <_svfprintf_r+0x1f4>
    daf2:	subs	r7, #16
    daf4:	cmp	r7, #16
    daf6:	ldr	r1, [sp, #148]	; 0x94
    daf8:	ldr	r2, [sp, #144]	; 0x90
    dafa:	add	r0, sp, #192	; 0xc0
    dafc:	bgt.n	dad0 <_svfprintf_r+0x3f8>
    dafe:	ldr	r6, [sp, #80]	; 0x50
    db00:	mov	r5, r7
    db02:	mov	r7, r9
    db04:	mov	r9, r0
    db06:	adds	r2, #1
    db08:	adds	r4, r5, r1
    db0a:	cmp	r2, #7
    db0c:	str	r4, [sp, #148]	; 0x94
    db0e:	str	r2, [sp, #144]	; 0x90
    db10:	str.w	r7, [r9]
    db14:	str.w	r5, [r9, #4]
    db18:	bgt.w	e376 <_svfprintf_r+0xc9e>
    db1c:	ldrb.w	r7, [sp, #111]	; 0x6f
    db20:	add.w	r9, r9, #8
    db24:	cbz	r7, db44 <_svfprintf_r+0x46c>
    db26:	ldr	r3, [sp, #144]	; 0x90
    db28:	adds	r3, #1
    db2a:	adds	r4, #1
    db2c:	add.w	r1, sp, #111	; 0x6f
    db30:	movs	r2, #1
    db32:	cmp	r3, #7
    db34:	str	r4, [sp, #148]	; 0x94
    db36:	str	r3, [sp, #144]	; 0x90
    db38:	stmia.w	r9, {r1, r2}
    db3c:	bgt.w	e28a <_svfprintf_r+0xbb2>
    db40:	add.w	r9, r9, #8
    db44:	ldr	r3, [sp, #44]	; 0x2c
    db46:	cbz	r3, db64 <_svfprintf_r+0x48c>
    db48:	ldr	r3, [sp, #144]	; 0x90
    db4a:	adds	r3, #1
    db4c:	adds	r4, #2
    db4e:	add	r1, sp, #112	; 0x70
    db50:	movs	r2, #2
    db52:	cmp	r3, #7
    db54:	str	r4, [sp, #148]	; 0x94
    db56:	str	r3, [sp, #144]	; 0x90
    db58:	stmia.w	r9, {r1, r2}
    db5c:	bgt.w	e2a2 <_svfprintf_r+0xbca>
    db60:	add.w	r9, r9, #8
    db64:	ldr	r3, [sp, #48]	; 0x30
    db66:	cmp	r3, #128	; 0x80
    db68:	beq.w	e12e <_svfprintf_r+0xa56>
    db6c:	ldr	r3, [sp, #36]	; 0x24
    db6e:	rsb	r7, r3, fp
    db72:	cmp	r7, #0
    db74:	ble.n	dbde <_svfprintf_r+0x506>
    db76:	ldr	r2, [pc, #480]	; (dd58 <_svfprintf_r+0x680>)
    db78:	ldr	r3, [sp, #144]	; 0x90
    db7a:	str	r2, [sp, #44]	; 0x2c
    db7c:	cmp	r7, #16
    db7e:	ble.n	dbc6 <_svfprintf_r+0x4ee>
    db80:	mov	r2, r4
    db82:	mov.w	fp, #16
    db86:	ldr	r5, [sp, #24]
    db88:	ldr	r4, [sp, #20]
    db8a:	b.n	db96 <_svfprintf_r+0x4be>
    db8c:	subs	r7, #16
    db8e:	cmp	r7, #16
    db90:	add.w	r9, r9, #8
    db94:	ble.n	dbc4 <_svfprintf_r+0x4ec>
    db96:	adds	r3, #1
    db98:	adds	r2, #16
    db9a:	cmp	r3, #7
    db9c:	str	r2, [sp, #148]	; 0x94
    db9e:	str	r3, [sp, #144]	; 0x90
    dba0:	stmia.w	r9, {sl, fp}
    dba4:	ble.n	db8c <_svfprintf_r+0x4b4>
    dba6:	add	r2, sp, #140	; 0x8c
    dba8:	mov	r1, r4
    dbaa:	mov	r0, r5
    dbac:	bl	edbc <__ssprint_r>
    dbb0:	cmp	r0, #0
    dbb2:	bne.w	d8cc <_svfprintf_r+0x1f4>
    dbb6:	subs	r7, #16
    dbb8:	cmp	r7, #16
    dbba:	ldr	r2, [sp, #148]	; 0x94
    dbbc:	ldr	r3, [sp, #144]	; 0x90
    dbbe:	add.w	r9, sp, #192	; 0xc0
    dbc2:	bgt.n	db96 <_svfprintf_r+0x4be>
    dbc4:	mov	r4, r2
    dbc6:	adds	r3, #1
    dbc8:	ldr	r2, [sp, #44]	; 0x2c
    dbca:	str	r3, [sp, #144]	; 0x90
    dbcc:	add	r4, r7
    dbce:	cmp	r3, #7
    dbd0:	str	r4, [sp, #148]	; 0x94
    dbd2:	stmia.w	r9, {r2, r7}
    dbd6:	bgt.w	e272 <_svfprintf_r+0xb9a>
    dbda:	add.w	r9, r9, #8
    dbde:	ldr	r3, [sp, #12]
    dbe0:	lsls	r2, r3, #23
    dbe2:	bmi.w	e05a <_svfprintf_r+0x982>
    dbe6:	ldr	r3, [sp, #144]	; 0x90
    dbe8:	ldr	r1, [sp, #36]	; 0x24
    dbea:	str.w	r6, [r9]
    dbee:	adds	r3, #1
    dbf0:	add	r4, r1
    dbf2:	cmp	r3, #7
    dbf4:	str	r4, [sp, #148]	; 0x94
    dbf6:	str.w	r1, [r9, #4]
    dbfa:	str	r3, [sp, #144]	; 0x90
    dbfc:	bgt.w	e246 <_svfprintf_r+0xb6e>
    dc00:	add.w	r9, r9, #8
    dc04:	ldr	r3, [sp, #12]
    dc06:	lsls	r1, r3, #29
    dc08:	bpl.n	dc8a <_svfprintf_r+0x5b2>
    dc0a:	ldr	r3, [sp, #32]
    dc0c:	ldr	r2, [sp, #16]
    dc0e:	subs	r5, r3, r2
    dc10:	cmp	r5, #0
    dc12:	ble.n	dc8a <_svfprintf_r+0x5b2>
    dc14:	cmp	r5, #16
    dc16:	ldr	r3, [sp, #144]	; 0x90
    dc18:	ldr	r7, [pc, #312]	; (dd54 <_svfprintf_r+0x67c>)
    dc1a:	ble.n	dc64 <_svfprintf_r+0x58c>
    dc1c:	mov	r2, r4
    dc1e:	movs	r6, #16
    dc20:	ldr.w	fp, [sp, #24]
    dc24:	ldr	r4, [sp, #20]
    dc26:	b.n	dc32 <_svfprintf_r+0x55a>
    dc28:	subs	r5, #16
    dc2a:	cmp	r5, #16
    dc2c:	add.w	r9, r9, #8
    dc30:	ble.n	dc62 <_svfprintf_r+0x58a>
    dc32:	adds	r3, #1
    dc34:	ldr	r1, [pc, #284]	; (dd54 <_svfprintf_r+0x67c>)
    dc36:	str	r3, [sp, #144]	; 0x90
    dc38:	adds	r2, #16
    dc3a:	cmp	r3, #7
    dc3c:	str	r2, [sp, #148]	; 0x94
    dc3e:	stmia.w	r9, {r1, r6}
    dc42:	ble.n	dc28 <_svfprintf_r+0x550>
    dc44:	add	r2, sp, #140	; 0x8c
    dc46:	mov	r1, r4
    dc48:	mov	r0, fp
    dc4a:	bl	edbc <__ssprint_r>
    dc4e:	cmp	r0, #0
    dc50:	bne.w	d8cc <_svfprintf_r+0x1f4>
    dc54:	subs	r5, #16
    dc56:	cmp	r5, #16
    dc58:	ldr	r2, [sp, #148]	; 0x94
    dc5a:	ldr	r3, [sp, #144]	; 0x90
    dc5c:	add.w	r9, sp, #192	; 0xc0
    dc60:	bgt.n	dc32 <_svfprintf_r+0x55a>
    dc62:	mov	r4, r2
    dc64:	adds	r3, #1
    dc66:	add	r4, r5
    dc68:	cmp	r3, #7
    dc6a:	str	r4, [sp, #148]	; 0x94
    dc6c:	str	r3, [sp, #144]	; 0x90
    dc6e:	str.w	r7, [r9]
    dc72:	str.w	r5, [r9, #4]
    dc76:	ble.n	dc8a <_svfprintf_r+0x5b2>
    dc78:	add	r2, sp, #140	; 0x8c
    dc7a:	ldr	r1, [sp, #20]
    dc7c:	ldr	r0, [sp, #24]
    dc7e:	bl	edbc <__ssprint_r>
    dc82:	cmp	r0, #0
    dc84:	bne.w	d8cc <_svfprintf_r+0x1f4>
    dc88:	ldr	r4, [sp, #148]	; 0x94
    dc8a:	ldr	r3, [sp, #28]
    dc8c:	ldr	r2, [sp, #32]
    dc8e:	ldr	r1, [sp, #16]
    dc90:	cmp	r2, r1
    dc92:	ite	ge
    dc94:	addge	r3, r3, r2
    dc96:	addlt	r3, r3, r1
    dc98:	str	r3, [sp, #28]
    dc9a:	cmp	r4, #0
    dc9c:	bne.w	e25e <_svfprintf_r+0xb86>
    dca0:	movs	r3, #0
    dca2:	str	r3, [sp, #144]	; 0x90
    dca4:	add.w	r9, sp, #192	; 0xc0
    dca8:	b.n	d726 <_svfprintf_r+0x4e>
    dcaa:	str	r3, [sp, #52]	; 0x34
    dcac:	mov	fp, r5
    dcae:	cmp	r2, #0
    dcb0:	bne.w	ed78 <_svfprintf_r+0x16a0>
    dcb4:	ldr	r3, [sp, #12]
    dcb6:	ldr	r7, [sp, #40]	; 0x28
    dcb8:	lsls	r2, r3, #28
    dcba:	add.w	r7, r7, #7
    dcbe:	bpl.w	e7aa <_svfprintf_r+0x10d2>
    dcc2:	bic.w	r3, r7, #7
    dcc6:	vldr	d7, [r3]
    dcca:	vstr	d7, [sp, #64]	; 0x40
    dcce:	add.w	r2, r3, #8
    dcd2:	str	r2, [sp, #40]	; 0x28
    dcd4:	ldrd	r1, r2, [sp, #64]	; 0x40
    dcd8:	bic.w	r3, r2, #2147483648	; 0x80000000
    dcdc:	str	r1, [sp, #88]	; 0x58
    dcde:	str	r3, [sp, #92]	; 0x5c
    dce0:	ldrd	r4, r5, [sp, #88]	; 0x58
    dce4:	mov.w	r2, #4294967295
    dce8:	mov	r0, r4
    dcea:	mov	r1, r5
    dcec:	ldr	r3, [pc, #108]	; (dd5c <_svfprintf_r+0x684>)
    dcee:	bl	aa08 <__aeabi_dcmpun>
    dcf2:	cmp	r0, #0
    dcf4:	bne.w	e6ac <_svfprintf_r+0xfd4>
    dcf8:	mov.w	r2, #4294967295
    dcfc:	ldr	r3, [pc, #92]	; (dd5c <_svfprintf_r+0x684>)
    dcfe:	mov	r0, r4
    dd00:	mov	r1, r5
    dd02:	bl	a9cc <__aeabi_dcmple>
    dd06:	cmp	r0, #0
    dd08:	bne.w	e6ac <_svfprintf_r+0xfd4>
    dd0c:	movs	r2, #0
    dd0e:	movs	r3, #0
    dd10:	ldrd	r0, r1, [sp, #64]	; 0x40
    dd14:	bl	a9b8 <__aeabi_dcmplt>
    dd18:	cmp	r0, #0
    dd1a:	bne.w	ebc2 <_svfprintf_r+0x14ea>
    dd1e:	ldrb.w	r7, [sp, #111]	; 0x6f
    dd22:	ldr	r6, [pc, #60]	; (dd60 <_svfprintf_r+0x688>)
    dd24:	ldr	r3, [pc, #60]	; (dd64 <_svfprintf_r+0x68c>)
    dd26:	ldr	r1, [sp, #12]
    dd28:	bic.w	r1, r1, #128	; 0x80
    dd2c:	str	r1, [sp, #12]
    dd2e:	ldr	r1, [sp, #52]	; 0x34
    dd30:	movs	r2, #3
    dd32:	mov.w	fp, #0
    dd36:	str	r2, [sp, #16]
    dd38:	cmp	r1, #71	; 0x47
    dd3a:	it	le
    dd3c:	movle	r6, r3
    dd3e:	str	r2, [sp, #36]	; 0x24
    dd40:	str.w	fp, [sp, #60]	; 0x3c
    dd44:	b.n	da7c <_svfprintf_r+0x3a4>
    dd46:	ldr	r3, [sp, #12]
    dd48:	orr.w	r3, r3, #8
    dd4c:	str	r3, [sp, #12]
    dd4e:	ldrb.w	r3, [r8]
    dd52:	b.n	d78c <_svfprintf_r+0xb4>
    dd54:	.word	0x20000840
    dd58:	.word	0x200007f0
    dd5c:	.word	0x7fefffff
    dd60:	.word	0x20000804
    dd64:	.word	0x20000800
    dd68:	str	r3, [sp, #52]	; 0x34
    dd6a:	mov	fp, r5
    dd6c:	cmp	r2, #0
    dd6e:	bne.w	ed90 <_svfprintf_r+0x16b8>
    dd72:	ldr	r3, [sp, #12]
    dd74:	orr.w	r3, r3, #16
    dd78:	str	r3, [sp, #12]
    dd7a:	ldr	r2, [sp, #12]
    dd7c:	ands.w	r3, r2, #32
    dd80:	bne.w	d8f8 <_svfprintf_r+0x220>
    dd84:	ldr	r1, [sp, #12]
    dd86:	ands.w	r2, r1, #16
    dd8a:	beq.w	e644 <_svfprintf_r+0xf6c>
    dd8e:	ldr	r0, [sp, #40]	; 0x28
    dd90:	strb.w	r3, [sp, #111]	; 0x6f
    dd94:	cmp.w	fp, #0
    dd98:	ldr	r4, [r0, #0]
    dd9a:	add.w	r7, r0, #4
    dd9e:	mov.w	r5, #0
    dda2:	blt.w	e7d8 <_svfprintf_r+0x1100>
    dda6:	mov	r2, r1
    dda8:	bic.w	r2, r2, #128	; 0x80
    ddac:	str	r2, [sp, #12]
    ddae:	orrs.w	r2, r4, r5
    ddb2:	str	r7, [sp, #40]	; 0x28
    ddb4:	beq.w	e02c <_svfprintf_r+0x954>
    ddb8:	mov	r7, r3
    ddba:	b.n	d924 <_svfprintf_r+0x24c>
    ddbc:	str	r3, [sp, #52]	; 0x34
    ddbe:	mov	fp, r5
    ddc0:	cmp	r2, #0
    ddc2:	bne.w	ed88 <_svfprintf_r+0x16b0>
    ddc6:	ldr	r3, [sp, #12]
    ddc8:	orr.w	r3, r3, #16
    ddcc:	str	r3, [sp, #12]
    ddce:	ldr	r2, [sp, #12]
    ddd0:	ands.w	r3, r2, #32
    ddd4:	beq.w	e430 <_svfprintf_r+0xd58>
    ddd8:	ldr	r7, [sp, #40]	; 0x28
    ddda:	adds	r7, #7
    dddc:	bic.w	r3, r7, #7
    dde0:	movs	r7, #0
    dde2:	add.w	r1, r3, #8
    dde6:	cmp	fp, r7
    dde8:	str	r1, [sp, #40]	; 0x28
    ddea:	ldrd	r4, r5, [r3]
    ddee:	strb.w	r7, [sp, #111]	; 0x6f
    ddf2:	blt.w	e4a2 <_svfprintf_r+0xdca>
    ddf6:	bic.w	r3, r2, #128	; 0x80
    ddfa:	str	r3, [sp, #12]
    ddfc:	orrs.w	r3, r4, r5
    de00:	bne.w	da34 <_svfprintf_r+0x35c>
    de04:	cmp.w	fp, #0
    de08:	beq.w	dff6 <_svfprintf_r+0x91e>
    de0c:	movs	r4, #0
    de0e:	add	r6, sp, #256	; 0x100
    de10:	adds	r4, #48	; 0x30
    de12:	strb.w	r4, [r6, #-65]!
    de16:	b.n	da68 <_svfprintf_r+0x390>
    de18:	str	r3, [sp, #52]	; 0x34
    de1a:	mov	fp, r5
    de1c:	cmp	r2, #0
    de1e:	bne.w	ed80 <_svfprintf_r+0x16a8>
    de22:	ldr	r3, [sp, #12]
    de24:	ldr	r0, [pc, #700]	; (e0e4 <_svfprintf_r+0xa0c>)
    de26:	lsls	r5, r3, #26
    de28:	bpl.w	df96 <_svfprintf_r+0x8be>
    de2c:	ldr	r7, [sp, #40]	; 0x28
    de2e:	adds	r7, #7
    de30:	bic.w	r3, r7, #7
    de34:	ldrd	r4, r5, [r3]
    de38:	add.w	r2, r3, #8
    de3c:	str	r2, [sp, #40]	; 0x28
    de3e:	ldr	r2, [sp, #12]
    de40:	ands.w	r7, r2, #1
    de44:	beq.w	e2ba <_svfprintf_r+0xbe2>
    de48:	orrs.w	r3, r4, r5
    de4c:	beq.w	e854 <_svfprintf_r+0x117c>
    de50:	ldrb.w	r2, [sp, #52]	; 0x34
    de54:	strb.w	r2, [sp, #113]	; 0x71
    de58:	movs	r7, #0
    de5a:	ldr	r2, [sp, #12]
    de5c:	strb.w	r7, [sp, #111]	; 0x6f
    de60:	movs	r3, #48	; 0x30
    de62:	cmp	fp, r7
    de64:	strb.w	r3, [sp, #112]	; 0x70
    de68:	orr.w	r3, r2, #2
    de6c:	blt.w	ebcc <_svfprintf_r+0x14f4>
    de70:	bic.w	r3, r2, #128	; 0x80
    de74:	orr.w	r3, r3, #2
    de78:	str	r3, [sp, #12]
    de7a:	add	r6, sp, #192	; 0xc0
    de7c:	lsrs	r3, r4, #4
    de7e:	and.w	r1, r4, #15
    de82:	orr.w	r3, r3, r5, lsl #28
    de86:	lsrs	r2, r5, #4
    de88:	mov	r4, r3
    de8a:	mov	r5, r2
    de8c:	ldrb	r3, [r0, r1]
    de8e:	strb.w	r3, [r6, #-1]!
    de92:	orrs.w	r3, r4, r5
    de96:	bne.n	de7c <_svfprintf_r+0x7a4>
    de98:	b.n	da68 <_svfprintf_r+0x390>
    de9a:	ldr	r1, [sp, #40]	; 0x28
    de9c:	str	r3, [sp, #52]	; 0x34
    de9e:	ldr	r2, [r1, #0]
    dea0:	strb.w	r2, [sp, #152]	; 0x98
    dea4:	movs	r3, #0
    dea6:	mov	r2, r1
    dea8:	mov	r7, r3
    deaa:	strb.w	r3, [sp, #111]	; 0x6f
    deae:	adds	r2, #4
    deb0:	movs	r3, #1
    deb2:	str	r3, [sp, #16]
    deb4:	mov	fp, r7
    deb6:	str	r7, [sp, #60]	; 0x3c
    deb8:	str	r2, [sp, #40]	; 0x28
    deba:	str	r3, [sp, #36]	; 0x24
    debc:	add	r6, sp, #152	; 0x98
    debe:	b.n	da84 <_svfprintf_r+0x3ac>
    dec0:	str	r3, [sp, #52]	; 0x34
    dec2:	mov	fp, r5
    dec4:	cmp	r2, #0
    dec6:	beq.w	d9f0 <_svfprintf_r+0x318>
    deca:	strb.w	r1, [sp, #111]	; 0x6f
    dece:	b.n	d9f0 <_svfprintf_r+0x318>
    ded0:	ldr	r3, [sp, #12]
    ded2:	orr.w	r3, r3, #64	; 0x40
    ded6:	str	r3, [sp, #12]
    ded8:	ldrb.w	r3, [r8]
    dedc:	b.n	d78c <_svfprintf_r+0xb4>
    dede:	ldrb.w	r3, [r8]
    dee2:	cmp	r1, #0
    dee4:	bne.w	d78c <_svfprintf_r+0xb4>
    dee8:	movs	r2, #1
    deea:	movs	r1, #32
    deec:	b.n	d78c <_svfprintf_r+0xb4>
    deee:	ldr	r3, [sp, #12]
    def0:	orr.w	r3, r3, #1
    def4:	str	r3, [sp, #12]
    def6:	ldrb.w	r3, [r8]
    defa:	b.n	d78c <_svfprintf_r+0xb4>
    defc:	ldr	r4, [sp, #40]	; 0x28
    defe:	ldr	r3, [r4, #0]
    df00:	str	r3, [sp, #32]
    df02:	mov	r0, r3
    df04:	cmp	r0, #0
    df06:	mov	r3, r4
    df08:	add.w	r3, r3, #4
    df0c:	blt.w	d850 <_svfprintf_r+0x178>
    df10:	str	r3, [sp, #40]	; 0x28
    df12:	ldrb.w	r3, [r8]
    df16:	b.n	d78c <_svfprintf_r+0xb4>
    df18:	ldrb.w	r3, [r8]
    df1c:	movs	r2, #1
    df1e:	movs	r1, #43	; 0x2b
    df20:	b.n	d78c <_svfprintf_r+0xb4>
    df22:	ldr	r3, [sp, #12]
    df24:	orr.w	r3, r3, #32
    df28:	str	r3, [sp, #12]
    df2a:	ldrb.w	r3, [r8]
    df2e:	b.n	d78c <_svfprintf_r+0xb4>
    df30:	ldr	r2, [sp, #40]	; 0x28
    df32:	str	r3, [sp, #52]	; 0x34
    df34:	ldr	r6, [r2, #0]
    df36:	movs	r4, #0
    df38:	strb.w	r4, [sp, #111]	; 0x6f
    df3c:	adds	r7, r2, #4
    df3e:	cmp	r6, #0
    df40:	beq.w	eb7c <_svfprintf_r+0x14a4>
    df44:	cmp	r5, #0
    df46:	blt.w	ea0c <_svfprintf_r+0x1334>
    df4a:	mov	r2, r5
    df4c:	mov	r1, r4
    df4e:	mov	r0, r6
    df50:	bl	b3c0 <memchr>
    df54:	cmp	r0, #0
    df56:	beq.w	ec20 <_svfprintf_r+0x1548>
    df5a:	subs	r3, r0, r6
    df5c:	str	r3, [sp, #36]	; 0x24
    df5e:	mov	fp, r4
    df60:	bic.w	r3, r3, r3, asr #31
    df64:	str	r7, [sp, #40]	; 0x28
    df66:	str	r3, [sp, #16]
    df68:	str.w	fp, [sp, #60]	; 0x3c
    df6c:	ldrb.w	r7, [sp, #111]	; 0x6f
    df70:	b.n	da7c <_svfprintf_r+0x3a4>
    df72:	str	r3, [sp, #52]	; 0x34
    df74:	mov	fp, r5
    df76:	cmp	r2, #0
    df78:	beq.w	ddce <_svfprintf_r+0x6f6>
    df7c:	strb.w	r1, [sp, #111]	; 0x6f
    df80:	b.n	ddce <_svfprintf_r+0x6f6>
    df82:	str	r3, [sp, #52]	; 0x34
    df84:	mov	fp, r5
    df86:	cmp	r2, #0
    df88:	bne.w	eda8 <_svfprintf_r+0x16d0>
    df8c:	ldr	r3, [sp, #12]
    df8e:	ldr	r0, [pc, #344]	; (e0e8 <_svfprintf_r+0xa10>)
    df90:	lsls	r5, r3, #26
    df92:	bmi.w	de2c <_svfprintf_r+0x754>
    df96:	ldr	r3, [sp, #12]
    df98:	lsls	r4, r3, #27
    df9a:	bpl.w	e81a <_svfprintf_r+0x1142>
    df9e:	ldr	r2, [sp, #40]	; 0x28
    dfa0:	mov	r3, r2
    dfa2:	adds	r3, #4
    dfa4:	ldr	r4, [r2, #0]
    dfa6:	str	r3, [sp, #40]	; 0x28
    dfa8:	movs	r5, #0
    dfaa:	b.n	de3e <_svfprintf_r+0x766>
    dfac:	ldrb.w	r3, [r8]
    dfb0:	cmp	r3, #108	; 0x6c
    dfb2:	beq.w	e93a <_svfprintf_r+0x1262>
    dfb6:	ldr	r0, [sp, #12]
    dfb8:	orr.w	r0, r0, #16
    dfbc:	str	r0, [sp, #12]
    dfbe:	b.w	d78c <_svfprintf_r+0xb4>
    dfc2:	cmp	r2, #0
    dfc4:	bne.w	eda0 <_svfprintf_r+0x16c8>
    dfc8:	ldr	r3, [sp, #12]
    dfca:	lsls	r3, r3, #26
    dfcc:	bpl.w	e67e <_svfprintf_r+0xfa6>
    dfd0:	ldr	r2, [sp, #40]	; 0x28
    dfd2:	ldr	r1, [sp, #28]
    dfd4:	ldr	r3, [r2, #0]
    dfd6:	asrs	r5, r1, #31
    dfd8:	mov	r0, r1
    dfda:	adds	r2, #4
    dfdc:	mov	r1, r5
    dfde:	str	r2, [sp, #40]	; 0x28
    dfe0:	strd	r0, r1, [r3]
    dfe4:	b.w	d726 <_svfprintf_r+0x4e>
    dfe8:	ldr	r0, [pc, #252]	; (e0e8 <_svfprintf_r+0xa10>)
    dfea:	str	r2, [sp, #52]	; 0x34
    dfec:	cmp.w	fp, #0
    dff0:	bne.w	e2dc <_svfprintf_r+0xc04>
    dff4:	mov	r7, fp
    dff6:	mov.w	fp, #0
    dffa:	str.w	fp, [sp, #36]	; 0x24
    dffe:	add	r6, sp, #192	; 0xc0
    e000:	b.n	da6e <_svfprintf_r+0x396>
    e002:	str	r3, [sp, #52]	; 0x34
    e004:	cmp	r2, #0
    e006:	bne.w	ed98 <_svfprintf_r+0x16c0>
    e00a:	ldr	r2, [sp, #52]	; 0x34
    e00c:	cmp	r2, #0
    e00e:	beq.w	d8be <_svfprintf_r+0x1e6>
    e012:	movs	r3, #0
    e014:	movs	r1, #1
    e016:	mov	r7, r3
    e018:	str	r1, [sp, #16]
    e01a:	strb.w	r2, [sp, #152]	; 0x98
    e01e:	strb.w	r3, [sp, #111]	; 0x6f
    e022:	mov	fp, r3
    e024:	str	r3, [sp, #60]	; 0x3c
    e026:	str	r1, [sp, #36]	; 0x24
    e028:	add	r6, sp, #152	; 0x98
    e02a:	b.n	da84 <_svfprintf_r+0x3ac>
    e02c:	cmp.w	fp, #0
    e030:	beq.w	ec50 <_svfprintf_r+0x1578>
    e034:	movs	r7, #0
    e036:	movs	r4, #0
    e038:	movs	r5, #0
    e03a:	b.n	d924 <_svfprintf_r+0x24c>
    e03c:	ldr	r0, [pc, #168]	; (e0e8 <_svfprintf_r+0xa10>)
    e03e:	str	r3, [sp, #12]
    e040:	str	r2, [sp, #52]	; 0x34
    e042:	orrs.w	r3, r4, r5
    e046:	str	r7, [sp, #40]	; 0x28
    e048:	mov.w	r7, #0
    e04c:	bne.w	de7a <_svfprintf_r+0x7a2>
    e050:	movs	r4, #0
    e052:	movs	r5, #0
    e054:	b.n	de7a <_svfprintf_r+0x7a2>
    e056:	ldr	r4, [sp, #148]	; 0x94
    e058:	b.n	db24 <_svfprintf_r+0x44c>
    e05a:	ldr	r3, [sp, #52]	; 0x34
    e05c:	cmp	r3, #101	; 0x65
    e05e:	ble.w	e1b6 <_svfprintf_r+0xade>
    e062:	movs	r2, #0
    e064:	movs	r3, #0
    e066:	ldrd	r0, r1, [sp, #64]	; 0x40
    e06a:	bl	a9a4 <__aeabi_dcmpeq>
    e06e:	cmp	r0, #0
    e070:	beq.w	e2e0 <_svfprintf_r+0xc08>
    e074:	ldr	r3, [sp, #144]	; 0x90
    e076:	ldr	r2, [pc, #116]	; (e0ec <_svfprintf_r+0xa14>)
    e078:	str.w	r2, [r9]
    e07c:	adds	r3, #1
    e07e:	adds	r4, #1
    e080:	movs	r2, #1
    e082:	cmp	r3, #7
    e084:	str	r4, [sp, #148]	; 0x94
    e086:	str	r3, [sp, #144]	; 0x90
    e088:	str.w	r2, [r9, #4]
    e08c:	bgt.w	e86c <_svfprintf_r+0x1194>
    e090:	add.w	r9, r9, #8
    e094:	ldr	r3, [sp, #116]	; 0x74
    e096:	ldr	r2, [sp, #56]	; 0x38
    e098:	cmp	r3, r2
    e09a:	blt.n	e0a4 <_svfprintf_r+0x9cc>
    e09c:	ldr	r3, [sp, #12]
    e09e:	lsls	r3, r3, #31
    e0a0:	bpl.w	dc04 <_svfprintf_r+0x52c>
    e0a4:	ldr	r3, [sp, #144]	; 0x90
    e0a6:	ldr	r1, [sp, #72]	; 0x48
    e0a8:	ldr	r2, [sp, #76]	; 0x4c
    e0aa:	str.w	r2, [r9]
    e0ae:	adds	r3, #1
    e0b0:	add	r4, r1
    e0b2:	cmp	r3, #7
    e0b4:	str	r4, [sp, #148]	; 0x94
    e0b6:	str.w	r1, [r9, #4]
    e0ba:	str	r3, [sp, #144]	; 0x90
    e0bc:	bgt.w	e94e <_svfprintf_r+0x1276>
    e0c0:	add.w	r9, r9, #8
    e0c4:	ldr	r3, [sp, #56]	; 0x38
    e0c6:	subs	r5, r3, #1
    e0c8:	cmp	r5, #0
    e0ca:	ble.w	dc04 <_svfprintf_r+0x52c>
    e0ce:	ldr	r2, [pc, #32]	; (e0f0 <_svfprintf_r+0xa18>)
    e0d0:	ldr	r3, [sp, #144]	; 0x90
    e0d2:	str	r2, [sp, #44]	; 0x2c
    e0d4:	cmp	r5, #16
    e0d6:	ble.w	e4ac <_svfprintf_r+0xdd4>
    e0da:	movs	r6, #16
    e0dc:	ldr	r7, [sp, #24]
    e0de:	ldr.w	fp, [sp, #20]
    e0e2:	b.n	e100 <_svfprintf_r+0xa28>
    e0e4:	.word	0x20000810
    e0e8:	.word	0x20000824
    e0ec:	.word	0x200007ec
    e0f0:	.word	0x200007f0
    e0f4:	add.w	r9, r9, #8
    e0f8:	subs	r5, #16
    e0fa:	cmp	r5, #16
    e0fc:	ble.w	e4ac <_svfprintf_r+0xdd4>
    e100:	adds	r3, #1
    e102:	adds	r4, #16
    e104:	cmp	r3, #7
    e106:	str	r4, [sp, #148]	; 0x94
    e108:	str	r3, [sp, #144]	; 0x90
    e10a:	str.w	sl, [r9]
    e10e:	str.w	r6, [r9, #4]
    e112:	ble.n	e0f4 <_svfprintf_r+0xa1c>
    e114:	add	r2, sp, #140	; 0x8c
    e116:	mov	r1, fp
    e118:	mov	r0, r7
    e11a:	bl	edbc <__ssprint_r>
    e11e:	cmp	r0, #0
    e120:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e124:	ldr	r4, [sp, #148]	; 0x94
    e126:	ldr	r3, [sp, #144]	; 0x90
    e128:	add.w	r9, sp, #192	; 0xc0
    e12c:	b.n	e0f8 <_svfprintf_r+0xa20>
    e12e:	ldr	r3, [sp, #32]
    e130:	ldr	r2, [sp, #16]
    e132:	subs	r7, r3, r2
    e134:	cmp	r7, #0
    e136:	ble.w	db6c <_svfprintf_r+0x494>
    e13a:	ldr	r2, [pc, #752]	; (e42c <_svfprintf_r+0xd54>)
    e13c:	ldr	r3, [sp, #144]	; 0x90
    e13e:	str	r2, [sp, #44]	; 0x2c
    e140:	cmp	r7, #16
    e142:	ble.n	e19c <_svfprintf_r+0xac4>
    e144:	mov	r2, r9
    e146:	mov	r1, r4
    e148:	mov	r9, r7
    e14a:	movs	r5, #16
    e14c:	mov	r7, r6
    e14e:	ldr	r4, [sp, #24]
    e150:	ldr	r6, [sp, #20]
    e152:	b.n	e162 <_svfprintf_r+0xa8a>
    e154:	sub.w	r9, r9, #16
    e158:	cmp.w	r9, #16
    e15c:	add.w	r2, r2, #8
    e160:	ble.n	e194 <_svfprintf_r+0xabc>
    e162:	adds	r3, #1
    e164:	adds	r1, #16
    e166:	cmp	r3, #7
    e168:	str	r1, [sp, #148]	; 0x94
    e16a:	str	r3, [sp, #144]	; 0x90
    e16c:	str.w	sl, [r2]
    e170:	str	r5, [r2, #4]
    e172:	ble.n	e154 <_svfprintf_r+0xa7c>
    e174:	add	r2, sp, #140	; 0x8c
    e176:	mov	r1, r6
    e178:	mov	r0, r4
    e17a:	bl	edbc <__ssprint_r>
    e17e:	cmp	r0, #0
    e180:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e184:	sub.w	r9, r9, #16
    e188:	cmp.w	r9, #16
    e18c:	ldr	r1, [sp, #148]	; 0x94
    e18e:	ldr	r3, [sp, #144]	; 0x90
    e190:	add	r2, sp, #192	; 0xc0
    e192:	bgt.n	e162 <_svfprintf_r+0xa8a>
    e194:	mov	r6, r7
    e196:	mov	r4, r1
    e198:	mov	r7, r9
    e19a:	mov	r9, r2
    e19c:	adds	r3, #1
    e19e:	ldr	r2, [sp, #44]	; 0x2c
    e1a0:	str	r3, [sp, #144]	; 0x90
    e1a2:	add	r4, r7
    e1a4:	cmp	r3, #7
    e1a6:	str	r4, [sp, #148]	; 0x94
    e1a8:	stmia.w	r9, {r2, r7}
    e1ac:	bgt.w	e62a <_svfprintf_r+0xf52>
    e1b0:	add.w	r9, r9, #8
    e1b4:	b.n	db6c <_svfprintf_r+0x494>
    e1b6:	ldr	r3, [sp, #56]	; 0x38
    e1b8:	ldr	r5, [sp, #144]	; 0x90
    e1ba:	cmp	r3, #1
    e1bc:	ble.w	e5d4 <_svfprintf_r+0xefc>
    e1c0:	adds	r5, #1
    e1c2:	adds	r4, #1
    e1c4:	movs	r3, #1
    e1c6:	cmp	r5, #7
    e1c8:	str	r4, [sp, #148]	; 0x94
    e1ca:	str	r5, [sp, #144]	; 0x90
    e1cc:	str.w	r6, [r9]
    e1d0:	str.w	r3, [r9, #4]
    e1d4:	bgt.w	e5f6 <_svfprintf_r+0xf1e>
    e1d8:	add.w	r9, r9, #8
    e1dc:	ldr	r2, [sp, #72]	; 0x48
    e1de:	ldr	r3, [sp, #76]	; 0x4c
    e1e0:	str.w	r3, [r9]
    e1e4:	adds	r5, #1
    e1e6:	add	r4, r2
    e1e8:	cmp	r5, #7
    e1ea:	str	r4, [sp, #148]	; 0x94
    e1ec:	str	r5, [sp, #144]	; 0x90
    e1ee:	str.w	r2, [r9, #4]
    e1f2:	bgt.w	e610 <_svfprintf_r+0xf38>
    e1f6:	add.w	r9, r9, #8
    e1fa:	movs	r3, #0
    e1fc:	movs	r2, #0
    e1fe:	ldrd	r0, r1, [sp, #64]	; 0x40
    e202:	bl	a9a4 <__aeabi_dcmpeq>
    e206:	ldr	r3, [sp, #56]	; 0x38
    e208:	cmp	r0, #0
    e20a:	bne.w	e394 <_svfprintf_r+0xcbc>
    e20e:	subs	r3, #1
    e210:	adds	r5, #1
    e212:	adds	r6, #1
    e214:	add	r4, r3
    e216:	cmp	r5, #7
    e218:	str	r5, [sp, #144]	; 0x90
    e21a:	str	r4, [sp, #148]	; 0x94
    e21c:	str.w	r6, [r9]
    e220:	str.w	r3, [r9, #4]
    e224:	bgt.w	e412 <_svfprintf_r+0xd3a>
    e228:	add.w	r9, r9, #8
    e22c:	ldr	r2, [sp, #84]	; 0x54
    e22e:	str.w	r2, [r9, #4]
    e232:	adds	r5, #1
    e234:	add	r4, r2
    e236:	add	r3, sp, #124	; 0x7c
    e238:	cmp	r5, #7
    e23a:	str	r4, [sp, #148]	; 0x94
    e23c:	str	r5, [sp, #144]	; 0x90
    e23e:	str.w	r3, [r9]
    e242:	ble.w	dc00 <_svfprintf_r+0x528>
    e246:	add	r2, sp, #140	; 0x8c
    e248:	ldr	r1, [sp, #20]
    e24a:	ldr	r0, [sp, #24]
    e24c:	bl	edbc <__ssprint_r>
    e250:	cmp	r0, #0
    e252:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e256:	ldr	r4, [sp, #148]	; 0x94
    e258:	add.w	r9, sp, #192	; 0xc0
    e25c:	b.n	dc04 <_svfprintf_r+0x52c>
    e25e:	add	r2, sp, #140	; 0x8c
    e260:	ldr	r1, [sp, #20]
    e262:	ldr	r0, [sp, #24]
    e264:	bl	edbc <__ssprint_r>
    e268:	cmp	r0, #0
    e26a:	beq.w	dca0 <_svfprintf_r+0x5c8>
    e26e:	b.w	d8cc <_svfprintf_r+0x1f4>
    e272:	add	r2, sp, #140	; 0x8c
    e274:	ldr	r1, [sp, #20]
    e276:	ldr	r0, [sp, #24]
    e278:	bl	edbc <__ssprint_r>
    e27c:	cmp	r0, #0
    e27e:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e282:	ldr	r4, [sp, #148]	; 0x94
    e284:	add.w	r9, sp, #192	; 0xc0
    e288:	b.n	dbde <_svfprintf_r+0x506>
    e28a:	add	r2, sp, #140	; 0x8c
    e28c:	ldr	r1, [sp, #20]
    e28e:	ldr	r0, [sp, #24]
    e290:	bl	edbc <__ssprint_r>
    e294:	cmp	r0, #0
    e296:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e29a:	ldr	r4, [sp, #148]	; 0x94
    e29c:	add.w	r9, sp, #192	; 0xc0
    e2a0:	b.n	db44 <_svfprintf_r+0x46c>
    e2a2:	add	r2, sp, #140	; 0x8c
    e2a4:	ldr	r1, [sp, #20]
    e2a6:	ldr	r0, [sp, #24]
    e2a8:	bl	edbc <__ssprint_r>
    e2ac:	cmp	r0, #0
    e2ae:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e2b2:	ldr	r4, [sp, #148]	; 0x94
    e2b4:	add.w	r9, sp, #192	; 0xc0
    e2b8:	b.n	db64 <_svfprintf_r+0x48c>
    e2ba:	cmp.w	fp, #0
    e2be:	strb.w	r7, [sp, #111]	; 0x6f
    e2c2:	blt.w	e884 <_svfprintf_r+0x11ac>
    e2c6:	bic.w	r3, r2, #128	; 0x80
    e2ca:	str	r3, [sp, #12]
    e2cc:	orrs.w	r3, r4, r5
    e2d0:	bne.w	de7a <_svfprintf_r+0x7a2>
    e2d4:	cmp.w	fp, #0
    e2d8:	beq.w	dff4 <_svfprintf_r+0x91c>
    e2dc:	movs	r7, #0
    e2de:	b.n	e050 <_svfprintf_r+0x978>
    e2e0:	ldr	r5, [sp, #116]	; 0x74
    e2e2:	cmp	r5, #0
    e2e4:	ble.w	e88a <_svfprintf_r+0x11b2>
    e2e8:	ldr	r3, [sp, #60]	; 0x3c
    e2ea:	ldr	r2, [sp, #56]	; 0x38
    e2ec:	cmp	r3, r2
    e2ee:	it	ge
    e2f0:	movge	r3, r2
    e2f2:	cmp	r3, #0
    e2f4:	mov	r5, r3
    e2f6:	ble.n	e314 <_svfprintf_r+0xc3c>
    e2f8:	ldr	r3, [sp, #144]	; 0x90
    e2fa:	str.w	r6, [r9]
    e2fe:	adds	r3, #1
    e300:	add	r4, r5
    e302:	cmp	r3, #7
    e304:	str	r4, [sp, #148]	; 0x94
    e306:	str.w	r5, [r9, #4]
    e30a:	str	r3, [sp, #144]	; 0x90
    e30c:	bgt.w	ea62 <_svfprintf_r+0x138a>
    e310:	add.w	r9, r9, #8
    e314:	ldr	r3, [sp, #60]	; 0x3c
    e316:	cmp	r5, #0
    e318:	it	ge
    e31a:	subge	r3, r3, r5
    e31c:	cmp	r3, #0
    e31e:	mov	r5, r3
    e320:	ble.w	e514 <_svfprintf_r+0xe3c>
    e324:	ldr	r2, [pc, #260]	; (e42c <_svfprintf_r+0xd54>)
    e326:	ldr	r3, [sp, #144]	; 0x90
    e328:	str	r2, [sp, #44]	; 0x2c
    e32a:	cmp	r5, #16
    e32c:	ble.w	e836 <_svfprintf_r+0x115e>
    e330:	mov	r2, r4
    e332:	movs	r7, #16
    e334:	ldr.w	fp, [sp, #24]
    e338:	ldr	r4, [sp, #20]
    e33a:	b.n	e348 <_svfprintf_r+0xc70>
    e33c:	add.w	r9, r9, #8
    e340:	subs	r5, #16
    e342:	cmp	r5, #16
    e344:	ble.w	e834 <_svfprintf_r+0x115c>
    e348:	adds	r3, #1
    e34a:	adds	r2, #16
    e34c:	cmp	r3, #7
    e34e:	str	r2, [sp, #148]	; 0x94
    e350:	str	r3, [sp, #144]	; 0x90
    e352:	str.w	sl, [r9]
    e356:	str.w	r7, [r9, #4]
    e35a:	ble.n	e33c <_svfprintf_r+0xc64>
    e35c:	add	r2, sp, #140	; 0x8c
    e35e:	mov	r1, r4
    e360:	mov	r0, fp
    e362:	bl	edbc <__ssprint_r>
    e366:	cmp	r0, #0
    e368:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e36c:	ldr	r2, [sp, #148]	; 0x94
    e36e:	ldr	r3, [sp, #144]	; 0x90
    e370:	add.w	r9, sp, #192	; 0xc0
    e374:	b.n	e340 <_svfprintf_r+0xc68>
    e376:	add	r2, sp, #140	; 0x8c
    e378:	ldr	r1, [sp, #20]
    e37a:	ldr	r0, [sp, #24]
    e37c:	bl	edbc <__ssprint_r>
    e380:	cmp	r0, #0
    e382:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e386:	ldrb.w	r7, [sp, #111]	; 0x6f
    e38a:	ldr	r4, [sp, #148]	; 0x94
    e38c:	add.w	r9, sp, #192	; 0xc0
    e390:	b.w	db24 <_svfprintf_r+0x44c>
    e394:	subs	r6, r3, #1
    e396:	cmp	r6, #0
    e398:	ble.w	e22c <_svfprintf_r+0xb54>
    e39c:	ldr	r3, [pc, #140]	; (e42c <_svfprintf_r+0xd54>)
    e39e:	str	r3, [sp, #44]	; 0x2c
    e3a0:	cmp	r6, #16
    e3a2:	ble.n	e3fe <_svfprintf_r+0xd26>
    e3a4:	str.w	r8, [sp, #36]	; 0x24
    e3a8:	movs	r7, #16
    e3aa:	mov	r8, r6
    e3ac:	ldr.w	fp, [sp, #24]
    e3b0:	ldr	r6, [sp, #20]
    e3b2:	b.n	e3c2 <_svfprintf_r+0xcea>
    e3b4:	sub.w	r8, r8, #16
    e3b8:	cmp.w	r8, #16
    e3bc:	add.w	r9, r9, #8
    e3c0:	ble.n	e3f8 <_svfprintf_r+0xd20>
    e3c2:	adds	r5, #1
    e3c4:	adds	r4, #16
    e3c6:	cmp	r5, #7
    e3c8:	str	r4, [sp, #148]	; 0x94
    e3ca:	str	r5, [sp, #144]	; 0x90
    e3cc:	str.w	sl, [r9]
    e3d0:	str.w	r7, [r9, #4]
    e3d4:	ble.n	e3b4 <_svfprintf_r+0xcdc>
    e3d6:	add	r2, sp, #140	; 0x8c
    e3d8:	mov	r1, r6
    e3da:	mov	r0, fp
    e3dc:	bl	edbc <__ssprint_r>
    e3e0:	cmp	r0, #0
    e3e2:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e3e6:	sub.w	r8, r8, #16
    e3ea:	cmp.w	r8, #16
    e3ee:	ldr	r4, [sp, #148]	; 0x94
    e3f0:	ldr	r5, [sp, #144]	; 0x90
    e3f2:	add.w	r9, sp, #192	; 0xc0
    e3f6:	bgt.n	e3c2 <_svfprintf_r+0xcea>
    e3f8:	mov	r6, r8
    e3fa:	ldr.w	r8, [sp, #36]	; 0x24
    e3fe:	ldr	r3, [sp, #44]	; 0x2c
    e400:	adds	r5, #1
    e402:	add	r4, r6
    e404:	cmp	r5, #7
    e406:	str	r4, [sp, #148]	; 0x94
    e408:	str	r5, [sp, #144]	; 0x90
    e40a:	stmia.w	r9, {r3, r6}
    e40e:	ble.w	e228 <_svfprintf_r+0xb50>
    e412:	add	r2, sp, #140	; 0x8c
    e414:	ldr	r1, [sp, #20]
    e416:	ldr	r0, [sp, #24]
    e418:	bl	edbc <__ssprint_r>
    e41c:	cmp	r0, #0
    e41e:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e422:	ldr	r4, [sp, #148]	; 0x94
    e424:	ldr	r5, [sp, #144]	; 0x90
    e426:	add.w	r9, sp, #192	; 0xc0
    e42a:	b.n	e22c <_svfprintf_r+0xb54>
    e42c:	.word	0x200007f0
    e430:	ldr	r1, [sp, #12]
    e432:	ands.w	r2, r1, #16
    e436:	beq.w	e7e0 <_svfprintf_r+0x1108>
    e43a:	ldr	r0, [sp, #40]	; 0x28
    e43c:	strb.w	r3, [sp, #111]	; 0x6f
    e440:	cmp.w	fp, #0
    e444:	ldr	r4, [r0, #0]
    e446:	add.w	r7, r0, #4
    e44a:	mov.w	r5, #0
    e44e:	blt.n	e49e <_svfprintf_r+0xdc6>
    e450:	mov	r2, r1
    e452:	bic.w	r2, r2, #128	; 0x80
    e456:	str	r2, [sp, #12]
    e458:	orrs.w	r2, r4, r5
    e45c:	str	r7, [sp, #40]	; 0x28
    e45e:	mov	r7, r3
    e460:	bne.w	da34 <_svfprintf_r+0x35c>
    e464:	b.n	de04 <_svfprintf_r+0x72c>
    e466:	ldr	r3, [sp, #12]
    e468:	lsls	r0, r3, #27
    e46a:	bmi.n	e4c2 <_svfprintf_r+0xdea>
    e46c:	ldr	r3, [sp, #12]
    e46e:	lsls	r1, r3, #25
    e470:	bpl.n	e4c2 <_svfprintf_r+0xdea>
    e472:	ldr	r1, [sp, #40]	; 0x28
    e474:	ldrsh.w	r4, [r1]
    e478:	adds	r1, #4
    e47a:	asrs	r5, r4, #31
    e47c:	mov	r2, r4
    e47e:	mov	r3, r5
    e480:	str	r1, [sp, #40]	; 0x28
    e482:	b.w	da0e <_svfprintf_r+0x336>
    e486:	ldr	r1, [sp, #40]	; 0x28
    e488:	strb.w	r3, [sp, #111]	; 0x6f
    e48c:	cmp.w	fp, #0
    e490:	ldr	r4, [r1, #0]
    e492:	add.w	r7, r1, #4
    e496:	mov.w	r5, #0
    e49a:	bge.w	e936 <_svfprintf_r+0x125e>
    e49e:	str	r7, [sp, #40]	; 0x28
    e4a0:	mov	r7, r3
    e4a2:	orrs.w	r3, r4, r5
    e4a6:	bne.w	da34 <_svfprintf_r+0x35c>
    e4aa:	b.n	de0e <_svfprintf_r+0x736>
    e4ac:	adds	r3, #1
    e4ae:	ldr	r2, [sp, #44]	; 0x2c
    e4b0:	str	r3, [sp, #144]	; 0x90
    e4b2:	add	r4, r5
    e4b4:	cmp	r3, #7
    e4b6:	str	r4, [sp, #148]	; 0x94
    e4b8:	stmia.w	r9, {r2, r5}
    e4bc:	ble.w	dc00 <_svfprintf_r+0x528>
    e4c0:	b.n	e246 <_svfprintf_r+0xb6e>
    e4c2:	ldr	r2, [sp, #40]	; 0x28
    e4c4:	ldr	r4, [r2, #0]
    e4c6:	mov	r3, r2
    e4c8:	adds	r3, #4
    e4ca:	asrs	r5, r4, #31
    e4cc:	mov	r2, r4
    e4ce:	str	r3, [sp, #40]	; 0x28
    e4d0:	cmp	r2, #0
    e4d2:	mov	r3, r5
    e4d4:	sbcs.w	r3, r3, #0
    e4d8:	bge.w	da18 <_svfprintf_r+0x340>
    e4dc:	negs	r4, r4
    e4de:	mov.w	r7, #45	; 0x2d
    e4e2:	sbc.w	r5, r5, r5, lsl #1
    e4e6:	cmp.w	fp, #0
    e4ea:	strb.w	r7, [sp, #111]	; 0x6f
    e4ee:	blt.w	da34 <_svfprintf_r+0x35c>
    e4f2:	ldr	r3, [sp, #12]
    e4f4:	bic.w	r3, r3, #128	; 0x80
    e4f8:	str	r3, [sp, #12]
    e4fa:	b.w	da34 <_svfprintf_r+0x35c>
    e4fe:	add	r2, sp, #140	; 0x8c
    e500:	ldr	r1, [sp, #20]
    e502:	ldr	r0, [sp, #24]
    e504:	bl	edbc <__ssprint_r>
    e508:	cmp	r0, #0
    e50a:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e50e:	ldr	r4, [sp, #148]	; 0x94
    e510:	add.w	r9, sp, #192	; 0xc0
    e514:	ldr	r2, [sp, #60]	; 0x3c
    e516:	ldr	r3, [sp, #116]	; 0x74
    e518:	add	r2, r6
    e51a:	mov	r7, r2
    e51c:	ldr	r2, [sp, #56]	; 0x38
    e51e:	cmp	r3, r2
    e520:	blt.n	e5b2 <_svfprintf_r+0xeda>
    e522:	ldr	r2, [sp, #12]
    e524:	lsls	r5, r2, #31
    e526:	bmi.n	e5b2 <_svfprintf_r+0xeda>
    e528:	ldr	r1, [sp, #56]	; 0x38
    e52a:	add	r6, r1
    e52c:	subs	r5, r6, r7
    e52e:	subs	r3, r1, r3
    e530:	cmp	r5, r3
    e532:	it	ge
    e534:	movge	r5, r3
    e536:	cmp	r5, #0
    e538:	mov	r6, r5
    e53a:	ble.n	e558 <_svfprintf_r+0xe80>
    e53c:	ldr	r2, [sp, #144]	; 0x90
    e53e:	str.w	r7, [r9]
    e542:	adds	r2, #1
    e544:	add	r4, r5
    e546:	cmp	r2, #7
    e548:	str	r4, [sp, #148]	; 0x94
    e54a:	str.w	r5, [r9, #4]
    e54e:	str	r2, [sp, #144]	; 0x90
    e550:	bgt.w	eb50 <_svfprintf_r+0x1478>
    e554:	add.w	r9, r9, #8
    e558:	cmp	r6, #0
    e55a:	ite	ge
    e55c:	subge	r5, r3, r6
    e55e:	movlt	r5, r3
    e560:	cmp	r5, #0
    e562:	ble.w	dc04 <_svfprintf_r+0x52c>
    e566:	ldr	r2, [pc, #744]	; (e850 <_svfprintf_r+0x1178>)
    e568:	ldr	r3, [sp, #144]	; 0x90
    e56a:	str	r2, [sp, #44]	; 0x2c
    e56c:	cmp	r5, #16
    e56e:	ble.n	e4ac <_svfprintf_r+0xdd4>
    e570:	movs	r6, #16
    e572:	ldr	r7, [sp, #24]
    e574:	ldr.w	fp, [sp, #20]
    e578:	b.n	e584 <_svfprintf_r+0xeac>
    e57a:	add.w	r9, r9, #8
    e57e:	subs	r5, #16
    e580:	cmp	r5, #16
    e582:	ble.n	e4ac <_svfprintf_r+0xdd4>
    e584:	adds	r3, #1
    e586:	adds	r4, #16
    e588:	cmp	r3, #7
    e58a:	str	r4, [sp, #148]	; 0x94
    e58c:	str	r3, [sp, #144]	; 0x90
    e58e:	str.w	sl, [r9]
    e592:	str.w	r6, [r9, #4]
    e596:	ble.n	e57a <_svfprintf_r+0xea2>
    e598:	add	r2, sp, #140	; 0x8c
    e59a:	mov	r1, fp
    e59c:	mov	r0, r7
    e59e:	bl	edbc <__ssprint_r>
    e5a2:	cmp	r0, #0
    e5a4:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e5a8:	ldr	r4, [sp, #148]	; 0x94
    e5aa:	ldr	r3, [sp, #144]	; 0x90
    e5ac:	add.w	r9, sp, #192	; 0xc0
    e5b0:	b.n	e57e <_svfprintf_r+0xea6>
    e5b2:	ldr	r2, [sp, #144]	; 0x90
    e5b4:	ldr	r0, [sp, #72]	; 0x48
    e5b6:	ldr	r1, [sp, #76]	; 0x4c
    e5b8:	str.w	r1, [r9]
    e5bc:	adds	r2, #1
    e5be:	add	r4, r0
    e5c0:	cmp	r2, #7
    e5c2:	str	r4, [sp, #148]	; 0x94
    e5c4:	str.w	r0, [r9, #4]
    e5c8:	str	r2, [sp, #144]	; 0x90
    e5ca:	bgt.w	eb36 <_svfprintf_r+0x145e>
    e5ce:	add.w	r9, r9, #8
    e5d2:	b.n	e528 <_svfprintf_r+0xe50>
    e5d4:	ldr	r3, [sp, #12]
    e5d6:	lsls	r0, r3, #31
    e5d8:	bmi.w	e1c0 <_svfprintf_r+0xae8>
    e5dc:	adds	r5, #1
    e5de:	adds	r4, #1
    e5e0:	movs	r3, #1
    e5e2:	cmp	r5, #7
    e5e4:	str	r4, [sp, #148]	; 0x94
    e5e6:	str	r5, [sp, #144]	; 0x90
    e5e8:	str.w	r6, [r9]
    e5ec:	str.w	r3, [r9, #4]
    e5f0:	ble.w	e228 <_svfprintf_r+0xb50>
    e5f4:	b.n	e412 <_svfprintf_r+0xd3a>
    e5f6:	add	r2, sp, #140	; 0x8c
    e5f8:	ldr	r1, [sp, #20]
    e5fa:	ldr	r0, [sp, #24]
    e5fc:	bl	edbc <__ssprint_r>
    e600:	cmp	r0, #0
    e602:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e606:	ldr	r4, [sp, #148]	; 0x94
    e608:	ldr	r5, [sp, #144]	; 0x90
    e60a:	add.w	r9, sp, #192	; 0xc0
    e60e:	b.n	e1dc <_svfprintf_r+0xb04>
    e610:	add	r2, sp, #140	; 0x8c
    e612:	ldr	r1, [sp, #20]
    e614:	ldr	r0, [sp, #24]
    e616:	bl	edbc <__ssprint_r>
    e61a:	cmp	r0, #0
    e61c:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e620:	ldr	r4, [sp, #148]	; 0x94
    e622:	ldr	r5, [sp, #144]	; 0x90
    e624:	add.w	r9, sp, #192	; 0xc0
    e628:	b.n	e1fa <_svfprintf_r+0xb22>
    e62a:	add	r2, sp, #140	; 0x8c
    e62c:	ldr	r1, [sp, #20]
    e62e:	ldr	r0, [sp, #24]
    e630:	bl	edbc <__ssprint_r>
    e634:	cmp	r0, #0
    e636:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e63a:	ldr	r4, [sp, #148]	; 0x94
    e63c:	add.w	r9, sp, #192	; 0xc0
    e640:	b.w	db6c <_svfprintf_r+0x494>
    e644:	ldr	r1, [sp, #12]
    e646:	ands.w	r3, r1, #64	; 0x40
    e64a:	beq.w	e7c0 <_svfprintf_r+0x10e8>
    e64e:	ldr	r0, [sp, #40]	; 0x28
    e650:	strb.w	r2, [sp, #111]	; 0x6f
    e654:	mov	r3, r0
    e656:	cmp.w	fp, #0
    e65a:	add.w	r3, r3, #4
    e65e:	ldrh	r4, [r0, #0]
    e660:	mov.w	r5, #0
    e664:	blt.w	e9e8 <_svfprintf_r+0x1310>
    e668:	bic.w	r1, r1, #128	; 0x80
    e66c:	str	r1, [sp, #12]
    e66e:	orrs.w	r1, r4, r5
    e672:	str	r3, [sp, #40]	; 0x28
    e674:	beq.w	e02c <_svfprintf_r+0x954>
    e678:	mov	r7, r2
    e67a:	b.w	d924 <_svfprintf_r+0x24c>
    e67e:	ldr	r3, [sp, #12]
    e680:	lsls	r7, r3, #27
    e682:	bmi.n	e69c <_svfprintf_r+0xfc4>
    e684:	ldr	r3, [sp, #12]
    e686:	lsls	r6, r3, #25
    e688:	bpl.n	e69c <_svfprintf_r+0xfc4>
    e68a:	ldr	r2, [sp, #40]	; 0x28
    e68c:	ldr	r3, [r2, #0]
    e68e:	adds	r2, #4
    e690:	str	r2, [sp, #40]	; 0x28
    e692:	ldrh.w	r2, [sp, #28]
    e696:	strh	r2, [r3, #0]
    e698:	b.w	d726 <_svfprintf_r+0x4e>
    e69c:	ldr	r2, [sp, #40]	; 0x28
    e69e:	ldr	r3, [r2, #0]
    e6a0:	adds	r2, #4
    e6a2:	str	r2, [sp, #40]	; 0x28
    e6a4:	ldr	r2, [sp, #28]
    e6a6:	str	r2, [r3, #0]
    e6a8:	b.w	d726 <_svfprintf_r+0x4e>
    e6ac:	ldrd	r0, r1, [sp, #64]	; 0x40
    e6b0:	mov	r2, r0
    e6b2:	mov	r3, r1
    e6b4:	bl	aa08 <__aeabi_dcmpun>
    e6b8:	cmp	r0, #0
    e6ba:	bne.w	ecb8 <_svfprintf_r+0x15e0>
    e6be:	ldr	r3, [sp, #52]	; 0x34
    e6c0:	cmp.w	fp, #4294967295
    e6c4:	bic.w	r7, r3, #32
    e6c8:	beq.w	eb9a <_svfprintf_r+0x14c2>
    e6cc:	cmp	r7, #71	; 0x47
    e6ce:	beq.w	e9d6 <_svfprintf_r+0x12fe>
    e6d2:	ldr	r3, [sp, #68]	; 0x44
    e6d4:	ldr	r2, [sp, #12]
    e6d6:	cmp	r3, #0
    e6d8:	orr.w	r2, r2, #256	; 0x100
    e6dc:	str	r2, [sp, #44]	; 0x2c
    e6de:	blt.w	ebd2 <_svfprintf_r+0x14fa>
    e6e2:	vldr	d7, [sp, #64]	; 0x40
    e6e6:	vstr	d7, [sp, #96]	; 0x60
    e6ea:	movs	r3, #0
    e6ec:	str	r3, [sp, #16]
    e6ee:	ldr	r3, [sp, #52]	; 0x34
    e6f0:	cmp	r3, #102	; 0x66
    e6f2:	beq.w	eba0 <_svfprintf_r+0x14c8>
    e6f6:	cmp	r3, #70	; 0x46
    e6f8:	beq.w	e986 <_svfprintf_r+0x12ae>
    e6fc:	cmp	r7, #69	; 0x45
    e6fe:	ite	eq
    e700:	addeq.w	r5, fp, #1
    e704:	movne	r5, fp
    e706:	add	r2, sp, #132	; 0x84
    e708:	add	r3, sp, #120	; 0x78
    e70a:	str	r2, [sp, #4]
    e70c:	str	r3, [sp, #0]
    e70e:	mov	r2, r5
    e710:	add	r3, sp, #116	; 0x74
    e712:	movs	r1, #2
    e714:	vldr	d0, [sp, #96]	; 0x60
    e718:	ldr	r0, [sp, #24]
    e71a:	bl	c8a0 <_dtoa_r>
    e71e:	ldr	r3, [sp, #52]	; 0x34
    e720:	cmp	r3, #103	; 0x67
    e722:	mov	r6, r0
    e724:	bne.w	ebfe <_svfprintf_r+0x1526>
    e728:	ldr	r3, [sp, #12]
    e72a:	lsls	r2, r3, #31
    e72c:	bpl.w	eca2 <_svfprintf_r+0x15ca>
    e730:	adds	r4, r6, r5
    e732:	movs	r2, #0
    e734:	movs	r3, #0
    e736:	ldrd	r0, r1, [sp, #96]	; 0x60
    e73a:	bl	a9a4 <__aeabi_dcmpeq>
    e73e:	cmp	r0, #0
    e740:	bne.w	ea5e <_svfprintf_r+0x1386>
    e744:	ldr	r3, [sp, #132]	; 0x84
    e746:	cmp	r4, r3
    e748:	bls.n	e758 <_svfprintf_r+0x1080>
    e74a:	movs	r1, #48	; 0x30
    e74c:	adds	r2, r3, #1
    e74e:	str	r2, [sp, #132]	; 0x84
    e750:	strb	r1, [r3, #0]
    e752:	ldr	r3, [sp, #132]	; 0x84
    e754:	cmp	r4, r3
    e756:	bhi.n	e74c <_svfprintf_r+0x1074>
    e758:	subs	r3, r3, r6
    e75a:	cmp	r7, #71	; 0x47
    e75c:	str	r3, [sp, #56]	; 0x38
    e75e:	beq.w	ea50 <_svfprintf_r+0x1378>
    e762:	ldr	r3, [sp, #52]	; 0x34
    e764:	cmp	r3, #101	; 0x65
    e766:	ble.w	ec1c <_svfprintf_r+0x1544>
    e76a:	ldr	r3, [sp, #52]	; 0x34
    e76c:	cmp	r3, #102	; 0x66
    e76e:	ldr	r3, [sp, #116]	; 0x74
    e770:	str	r3, [sp, #60]	; 0x3c
    e772:	beq.w	ec36 <_svfprintf_r+0x155e>
    e776:	ldr	r2, [sp, #60]	; 0x3c
    e778:	ldr	r1, [sp, #56]	; 0x38
    e77a:	cmp	r2, r1
    e77c:	blt.w	ebe4 <_svfprintf_r+0x150c>
    e780:	ldr	r3, [sp, #12]
    e782:	lsls	r1, r3, #31
    e784:	bmi.w	eca6 <_svfprintf_r+0x15ce>
    e788:	bic.w	r3, r2, r2, asr #31
    e78c:	str	r2, [sp, #36]	; 0x24
    e78e:	movs	r2, #103	; 0x67
    e790:	str	r2, [sp, #52]	; 0x34
    e792:	ldr	r2, [sp, #16]
    e794:	cmp	r2, #0
    e796:	bne.w	e9f8 <_svfprintf_r+0x1320>
    e79a:	str	r3, [sp, #16]
    e79c:	ldr	r3, [sp, #44]	; 0x2c
    e79e:	str	r3, [sp, #12]
    e7a0:	mov	fp, r2
    e7a2:	ldrb.w	r7, [sp, #111]	; 0x6f
    e7a6:	b.w	da7c <_svfprintf_r+0x3a4>
    e7aa:	bic.w	r7, r7, #7
    e7ae:	vldr	d7, [r7]
    e7b2:	add.w	r3, r7, #8
    e7b6:	vstr	d7, [sp, #64]	; 0x40
    e7ba:	str	r3, [sp, #40]	; 0x28
    e7bc:	b.w	dcd4 <_svfprintf_r+0x5fc>
    e7c0:	ldr	r1, [sp, #40]	; 0x28
    e7c2:	strb.w	r3, [sp, #111]	; 0x6f
    e7c6:	cmp.w	fp, #0
    e7ca:	ldr	r4, [r1, #0]
    e7cc:	add.w	r7, r1, #4
    e7d0:	mov.w	r5, #0
    e7d4:	bge.w	e930 <_svfprintf_r+0x1258>
    e7d8:	str	r7, [sp, #40]	; 0x28
    e7da:	movs	r7, #0
    e7dc:	b.w	d924 <_svfprintf_r+0x24c>
    e7e0:	ldr	r1, [sp, #12]
    e7e2:	ands.w	r3, r1, #64	; 0x40
    e7e6:	beq.w	e486 <_svfprintf_r+0xdae>
    e7ea:	ldr	r0, [sp, #40]	; 0x28
    e7ec:	strb.w	r2, [sp, #111]	; 0x6f
    e7f0:	mov	r3, r0
    e7f2:	cmp.w	fp, #0
    e7f6:	add.w	r3, r3, #4
    e7fa:	ldrh	r4, [r0, #0]
    e7fc:	mov.w	r5, #0
    e800:	blt.w	e9e2 <_svfprintf_r+0x130a>
    e804:	bic.w	r1, r1, #128	; 0x80
    e808:	str	r1, [sp, #12]
    e80a:	orrs.w	r1, r4, r5
    e80e:	str	r3, [sp, #40]	; 0x28
    e810:	mov	r7, r2
    e812:	bne.w	da34 <_svfprintf_r+0x35c>
    e816:	b.w	de04 <_svfprintf_r+0x72c>
    e81a:	ldr	r3, [sp, #12]
    e81c:	ldr	r2, [sp, #40]	; 0x28
    e81e:	tst.w	r3, #64	; 0x40
    e822:	mov	r3, r2
    e824:	beq.w	e9ec <_svfprintf_r+0x1314>
    e828:	adds	r3, #4
    e82a:	ldrh	r4, [r2, #0]
    e82c:	str	r3, [sp, #40]	; 0x28
    e82e:	movs	r5, #0
    e830:	b.w	de3e <_svfprintf_r+0x766>
    e834:	mov	r4, r2
    e836:	adds	r3, #1
    e838:	ldr	r2, [sp, #44]	; 0x2c
    e83a:	str	r3, [sp, #144]	; 0x90
    e83c:	add	r4, r5
    e83e:	cmp	r3, #7
    e840:	str	r4, [sp, #148]	; 0x94
    e842:	stmia.w	r9, {r2, r5}
    e846:	bgt.w	e4fe <_svfprintf_r+0xe26>
    e84a:	add.w	r9, r9, #8
    e84e:	b.n	e514 <_svfprintf_r+0xe3c>
    e850:	.word	0x200007f0
    e854:	movs	r7, #0
    e856:	cmp	fp, r7
    e858:	strb.w	r7, [sp, #111]	; 0x6f
    e85c:	blt.w	e050 <_svfprintf_r+0x978>
    e860:	ldr	r3, [sp, #12]
    e862:	bic.w	r3, r3, #128	; 0x80
    e866:	str	r3, [sp, #12]
    e868:	b.w	dfec <_svfprintf_r+0x914>
    e86c:	add	r2, sp, #140	; 0x8c
    e86e:	ldr	r1, [sp, #20]
    e870:	ldr	r0, [sp, #24]
    e872:	bl	edbc <__ssprint_r>
    e876:	cmp	r0, #0
    e878:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e87c:	ldr	r4, [sp, #148]	; 0x94
    e87e:	add.w	r9, sp, #192	; 0xc0
    e882:	b.n	e094 <_svfprintf_r+0x9bc>
    e884:	ldr	r7, [sp, #40]	; 0x28
    e886:	b.w	e042 <_svfprintf_r+0x96a>
    e88a:	ldr	r3, [sp, #144]	; 0x90
    e88c:	ldr	r2, [pc, #736]	; (eb70 <_svfprintf_r+0x1498>)
    e88e:	str.w	r2, [r9]
    e892:	adds	r3, #1
    e894:	adds	r4, #1
    e896:	movs	r2, #1
    e898:	cmp	r3, #7
    e89a:	str	r4, [sp, #148]	; 0x94
    e89c:	str	r3, [sp, #144]	; 0x90
    e89e:	str.w	r2, [r9, #4]
    e8a2:	bgt.w	e9bc <_svfprintf_r+0x12e4>
    e8a6:	add.w	r9, r9, #8
    e8aa:	cbnz	r5, e8b8 <_svfprintf_r+0x11e0>
    e8ac:	ldr	r3, [sp, #56]	; 0x38
    e8ae:	cbnz	r3, e8b8 <_svfprintf_r+0x11e0>
    e8b0:	ldr	r3, [sp, #12]
    e8b2:	lsls	r7, r3, #31
    e8b4:	bpl.w	dc04 <_svfprintf_r+0x52c>
    e8b8:	ldr	r3, [sp, #144]	; 0x90
    e8ba:	ldr	r1, [sp, #72]	; 0x48
    e8bc:	ldr	r2, [sp, #76]	; 0x4c
    e8be:	str.w	r2, [r9]
    e8c2:	adds	r3, #1
    e8c4:	add	r4, r1
    e8c6:	cmp	r3, #7
    e8c8:	str	r4, [sp, #148]	; 0x94
    e8ca:	str.w	r1, [r9, #4]
    e8ce:	str	r3, [sp, #144]	; 0x90
    e8d0:	bgt.w	ec6e <_svfprintf_r+0x1596>
    e8d4:	add.w	r9, r9, #8
    e8d8:	negs	r5, r5
    e8da:	cmp	r5, #0
    e8dc:	ble.w	ea34 <_svfprintf_r+0x135c>
    e8e0:	ldr	r2, [pc, #656]	; (eb74 <_svfprintf_r+0x149c>)
    e8e2:	str	r2, [sp, #44]	; 0x2c
    e8e4:	cmp	r5, #16
    e8e6:	ble.w	ea7c <_svfprintf_r+0x13a4>
    e8ea:	mov	r2, r4
    e8ec:	movs	r7, #16
    e8ee:	ldr.w	fp, [sp, #24]
    e8f2:	ldr	r4, [sp, #20]
    e8f4:	b.n	e902 <_svfprintf_r+0x122a>
    e8f6:	add.w	r9, r9, #8
    e8fa:	subs	r5, #16
    e8fc:	cmp	r5, #16
    e8fe:	ble.w	ea7a <_svfprintf_r+0x13a2>
    e902:	adds	r3, #1
    e904:	adds	r2, #16
    e906:	cmp	r3, #7
    e908:	str	r2, [sp, #148]	; 0x94
    e90a:	str	r3, [sp, #144]	; 0x90
    e90c:	str.w	sl, [r9]
    e910:	str.w	r7, [r9, #4]
    e914:	ble.n	e8f6 <_svfprintf_r+0x121e>
    e916:	add	r2, sp, #140	; 0x8c
    e918:	mov	r1, r4
    e91a:	mov	r0, fp
    e91c:	bl	edbc <__ssprint_r>
    e920:	cmp	r0, #0
    e922:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e926:	ldr	r2, [sp, #148]	; 0x94
    e928:	ldr	r3, [sp, #144]	; 0x90
    e92a:	add.w	r9, sp, #192	; 0xc0
    e92e:	b.n	e8fa <_svfprintf_r+0x1222>
    e930:	ldr	r2, [sp, #12]
    e932:	b.w	dda8 <_svfprintf_r+0x6d0>
    e936:	ldr	r2, [sp, #12]
    e938:	b.n	e452 <_svfprintf_r+0xd7a>
    e93a:	ldr	r3, [sp, #12]
    e93c:	orr.w	r3, r3, #32
    e940:	str	r3, [sp, #12]
    e942:	add.w	r8, r8, #1
    e946:	ldrb.w	r3, [r8]
    e94a:	b.w	d78c <_svfprintf_r+0xb4>
    e94e:	add	r2, sp, #140	; 0x8c
    e950:	ldr	r1, [sp, #20]
    e952:	ldr	r0, [sp, #24]
    e954:	bl	edbc <__ssprint_r>
    e958:	cmp	r0, #0
    e95a:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e95e:	ldr	r4, [sp, #148]	; 0x94
    e960:	add.w	r9, sp, #192	; 0xc0
    e964:	b.w	e0c4 <_svfprintf_r+0x9ec>
    e968:	movs	r1, #64	; 0x40
    e96a:	ldr	r0, [sp, #24]
    e96c:	bl	ae24 <_malloc_r>
    e970:	ldr	r2, [sp, #20]
    e972:	str	r0, [r2, #0]
    e974:	str	r0, [r2, #16]
    e976:	cmp	r0, #0
    e978:	beq.w	ed62 <_svfprintf_r+0x168a>
    e97c:	ldr	r2, [sp, #20]
    e97e:	movs	r3, #64	; 0x40
    e980:	str	r3, [r2, #20]
    e982:	b.w	d706 <_svfprintf_r+0x2e>
    e986:	add	r2, sp, #132	; 0x84
    e988:	add	r3, sp, #120	; 0x78
    e98a:	str	r2, [sp, #4]
    e98c:	str	r3, [sp, #0]
    e98e:	mov	r2, fp
    e990:	add	r3, sp, #116	; 0x74
    e992:	movs	r1, #3
    e994:	vldr	d0, [sp, #96]	; 0x60
    e998:	ldr	r0, [sp, #24]
    e99a:	bl	c8a0 <_dtoa_r>
    e99e:	mov	r5, fp
    e9a0:	mov	r6, r0
    e9a2:	ldr	r3, [sp, #52]	; 0x34
    e9a4:	cmp	r3, #70	; 0x46
    e9a6:	add.w	r4, r6, r5
    e9aa:	bne.w	e732 <_svfprintf_r+0x105a>
    e9ae:	ldrb	r3, [r6, #0]
    e9b0:	cmp	r3, #48	; 0x30
    e9b2:	beq.w	ecc4 <_svfprintf_r+0x15ec>
    e9b6:	ldr	r5, [sp, #116]	; 0x74
    e9b8:	add	r4, r5
    e9ba:	b.n	e732 <_svfprintf_r+0x105a>
    e9bc:	add	r2, sp, #140	; 0x8c
    e9be:	ldr	r1, [sp, #20]
    e9c0:	ldr	r0, [sp, #24]
    e9c2:	bl	edbc <__ssprint_r>
    e9c6:	cmp	r0, #0
    e9c8:	bne.w	d8cc <_svfprintf_r+0x1f4>
    e9cc:	ldr	r5, [sp, #116]	; 0x74
    e9ce:	ldr	r4, [sp, #148]	; 0x94
    e9d0:	add.w	r9, sp, #192	; 0xc0
    e9d4:	b.n	e8aa <_svfprintf_r+0x11d2>
    e9d6:	cmp.w	fp, #0
    e9da:	it	eq
    e9dc:	moveq.w	fp, #1
    e9e0:	b.n	e6d2 <_svfprintf_r+0xffa>
    e9e2:	str	r3, [sp, #40]	; 0x28
    e9e4:	mov	r7, r2
    e9e6:	b.n	e4a2 <_svfprintf_r+0xdca>
    e9e8:	str	r3, [sp, #40]	; 0x28
    e9ea:	b.n	e7da <_svfprintf_r+0x1102>
    e9ec:	adds	r3, #4
    e9ee:	ldr	r4, [r2, #0]
    e9f0:	str	r3, [sp, #40]	; 0x28
    e9f2:	movs	r5, #0
    e9f4:	b.w	de3e <_svfprintf_r+0x766>
    e9f8:	movs	r7, #45	; 0x2d
    e9fa:	str	r3, [sp, #16]
    e9fc:	ldr	r3, [sp, #44]	; 0x2c
    e9fe:	str	r3, [sp, #12]
    ea00:	strb.w	r7, [sp, #111]	; 0x6f
    ea04:	mov.w	fp, #0
    ea08:	b.w	da7e <_svfprintf_r+0x3a6>
    ea0c:	mov	r0, r6
    ea0e:	bl	bb40 <strlen>
    ea12:	mov	fp, r4
    ea14:	mov	r3, r0
    ea16:	str	r0, [sp, #36]	; 0x24
    ea18:	b.w	df60 <_svfprintf_r+0x888>
    ea1c:	add	r2, sp, #140	; 0x8c
    ea1e:	ldr	r1, [sp, #20]
    ea20:	ldr	r0, [sp, #24]
    ea22:	bl	edbc <__ssprint_r>
    ea26:	cmp	r0, #0
    ea28:	bne.w	d8cc <_svfprintf_r+0x1f4>
    ea2c:	ldr	r4, [sp, #148]	; 0x94
    ea2e:	ldr	r3, [sp, #144]	; 0x90
    ea30:	add.w	r9, sp, #192	; 0xc0
    ea34:	ldr	r1, [sp, #56]	; 0x38
    ea36:	str.w	r6, [r9]
    ea3a:	adds	r3, #1
    ea3c:	add	r4, r1
    ea3e:	cmp	r3, #7
    ea40:	str	r4, [sp, #148]	; 0x94
    ea42:	str	r3, [sp, #144]	; 0x90
    ea44:	str.w	r1, [r9, #4]
    ea48:	ble.w	dc00 <_svfprintf_r+0x528>
    ea4c:	b.w	e246 <_svfprintf_r+0xb6e>
    ea50:	ldr	r3, [sp, #116]	; 0x74
    ea52:	adds	r5, r3, #3
    ea54:	blt.n	ea94 <_svfprintf_r+0x13bc>
    ea56:	cmp	fp, r3
    ea58:	blt.n	ea94 <_svfprintf_r+0x13bc>
    ea5a:	str	r3, [sp, #60]	; 0x3c
    ea5c:	b.n	e776 <_svfprintf_r+0x109e>
    ea5e:	mov	r3, r4
    ea60:	b.n	e758 <_svfprintf_r+0x1080>
    ea62:	add	r2, sp, #140	; 0x8c
    ea64:	ldr	r1, [sp, #20]
    ea66:	ldr	r0, [sp, #24]
    ea68:	bl	edbc <__ssprint_r>
    ea6c:	cmp	r0, #0
    ea6e:	bne.w	d8cc <_svfprintf_r+0x1f4>
    ea72:	ldr	r4, [sp, #148]	; 0x94
    ea74:	add.w	r9, sp, #192	; 0xc0
    ea78:	b.n	e314 <_svfprintf_r+0xc3c>
    ea7a:	mov	r4, r2
    ea7c:	adds	r3, #1
    ea7e:	ldr	r2, [sp, #44]	; 0x2c
    ea80:	str	r3, [sp, #144]	; 0x90
    ea82:	add	r4, r5
    ea84:	cmp	r3, #7
    ea86:	str	r4, [sp, #148]	; 0x94
    ea88:	stmia.w	r9, {r2, r5}
    ea8c:	bgt.n	ea1c <_svfprintf_r+0x1344>
    ea8e:	add.w	r9, r9, #8
    ea92:	b.n	ea34 <_svfprintf_r+0x135c>
    ea94:	ldr	r2, [sp, #52]	; 0x34
    ea96:	subs	r2, #2
    ea98:	str	r2, [sp, #52]	; 0x34
    ea9a:	subs	r3, #1
    ea9c:	cmp	r3, #0
    ea9e:	ldrb.w	r2, [sp, #52]	; 0x34
    eaa2:	str	r3, [sp, #116]	; 0x74
    eaa4:	it	lt
    eaa6:	neglt	r3, r3
    eaa8:	strb.w	r2, [sp, #124]	; 0x7c
    eaac:	ite	lt
    eaae:	movlt	r2, #45	; 0x2d
    eab0:	movge	r2, #43	; 0x2b
    eab2:	cmp	r3, #9
    eab4:	strb.w	r2, [sp, #125]	; 0x7d
    eab8:	ble.w	ec92 <_svfprintf_r+0x15ba>
    eabc:	add.w	r0, sp, #139	; 0x8b
    eac0:	mov	r4, r0
    eac2:	ldr	r2, [pc, #180]	; (eb78 <_svfprintf_r+0x14a0>)
    eac4:	smull	r2, r1, r2, r3
    eac8:	asrs	r2, r3, #31
    eaca:	rsb	r2, r2, r1, asr #2
    eace:	add.w	r1, r2, r2, lsl #2
    ead2:	sub.w	r3, r3, r1, lsl #1
    ead6:	add.w	r1, r3, #48	; 0x30
    eada:	cmp	r2, #9
    eadc:	mov	r3, r2
    eade:	strb.w	r1, [r4, #-1]!
    eae2:	bgt.n	eac2 <_svfprintf_r+0x13ea>
    eae4:	mov	r1, r4
    eae6:	adds	r3, #48	; 0x30
    eae8:	uxtb	r2, r3
    eaea:	strb.w	r2, [r1, #-1]!
    eaee:	cmp	r0, r1
    eaf0:	bls.w	ed5c <_svfprintf_r+0x1684>
    eaf4:	add.w	r1, sp, #126	; 0x7e
    eaf8:	mov	r3, r4
    eafa:	b.n	eb00 <_svfprintf_r+0x1428>
    eafc:	ldrb.w	r2, [r3], #1
    eb00:	strb.w	r2, [r1], #1
    eb04:	cmp	r0, r3
    eb06:	bne.n	eafc <_svfprintf_r+0x1424>
    eb08:	adds	r3, r0, #1
    eb0a:	subs	r3, r3, r4
    eb0c:	add.w	r2, sp, #126	; 0x7e
    eb10:	add	r3, r2
    eb12:	add	r2, sp, #124	; 0x7c
    eb14:	subs	r3, r3, r2
    eb16:	ldr	r2, [sp, #56]	; 0x38
    eb18:	str	r3, [sp, #84]	; 0x54
    eb1a:	cmp	r2, #1
    eb1c:	add	r3, r2
    eb1e:	str	r3, [sp, #36]	; 0x24
    eb20:	ble.w	ecf2 <_svfprintf_r+0x161a>
    eb24:	ldr	r3, [sp, #36]	; 0x24
    eb26:	ldr	r2, [sp, #72]	; 0x48
    eb28:	add	r3, r2
    eb2a:	movs	r2, #0
    eb2c:	str	r3, [sp, #36]	; 0x24
    eb2e:	str	r2, [sp, #60]	; 0x3c
    eb30:	bic.w	r3, r3, r3, asr #31
    eb34:	b.n	e792 <_svfprintf_r+0x10ba>
    eb36:	add	r2, sp, #140	; 0x8c
    eb38:	ldr	r1, [sp, #20]
    eb3a:	ldr	r0, [sp, #24]
    eb3c:	bl	edbc <__ssprint_r>
    eb40:	cmp	r0, #0
    eb42:	bne.w	d8cc <_svfprintf_r+0x1f4>
    eb46:	ldr	r3, [sp, #116]	; 0x74
    eb48:	ldr	r4, [sp, #148]	; 0x94
    eb4a:	add.w	r9, sp, #192	; 0xc0
    eb4e:	b.n	e528 <_svfprintf_r+0xe50>
    eb50:	add	r2, sp, #140	; 0x8c
    eb52:	ldr	r1, [sp, #20]
    eb54:	ldr	r0, [sp, #24]
    eb56:	bl	edbc <__ssprint_r>
    eb5a:	cmp	r0, #0
    eb5c:	bne.w	d8cc <_svfprintf_r+0x1f4>
    eb60:	ldr	r3, [sp, #116]	; 0x74
    eb62:	ldr	r2, [sp, #56]	; 0x38
    eb64:	ldr	r4, [sp, #148]	; 0x94
    eb66:	subs	r3, r2, r3
    eb68:	add.w	r9, sp, #192	; 0xc0
    eb6c:	b.n	e558 <_svfprintf_r+0xe80>
    eb6e:	nop
    eb70:	.word	0x200007ec
    eb74:	.word	0x200007f0
    eb78:	.word	0x66666667
    eb7c:	cmp	r5, #6
    eb7e:	mov	r3, r5
    eb80:	it	cs
    eb82:	movcs	r3, #6
    eb84:	str	r3, [sp, #36]	; 0x24
    eb86:	bic.w	r3, r3, r3, asr #31
    eb8a:	mov	fp, r6
    eb8c:	str	r7, [sp, #40]	; 0x28
    eb8e:	str	r6, [sp, #60]	; 0x3c
    eb90:	mov	r7, r6
    eb92:	str	r3, [sp, #16]
    eb94:	ldr	r6, [pc, #536]	; (edb0 <_svfprintf_r+0x16d8>)
    eb96:	b.w	da7c <_svfprintf_r+0x3a4>
    eb9a:	mov.w	fp, #6
    eb9e:	b.n	e6d2 <_svfprintf_r+0xffa>
    eba0:	add	r2, sp, #132	; 0x84
    eba2:	add	r3, sp, #120	; 0x78
    eba4:	str	r2, [sp, #4]
    eba6:	str	r3, [sp, #0]
    eba8:	mov	r2, fp
    ebaa:	add	r3, sp, #116	; 0x74
    ebac:	movs	r1, #3
    ebae:	vldr	d0, [sp, #96]	; 0x60
    ebb2:	ldr	r0, [sp, #24]
    ebb4:	bl	c8a0 <_dtoa_r>
    ebb8:	mov	r5, fp
    ebba:	mov	r6, r0
    ebbc:	add.w	r4, r0, fp
    ebc0:	b.n	e9ae <_svfprintf_r+0x12d6>
    ebc2:	movs	r7, #45	; 0x2d
    ebc4:	strb.w	r7, [sp, #111]	; 0x6f
    ebc8:	b.w	dd22 <_svfprintf_r+0x64a>
    ebcc:	str	r3, [sp, #12]
    ebce:	b.w	de7a <_svfprintf_r+0x7a2>
    ebd2:	ldrd	r1, r2, [sp, #64]	; 0x40
    ebd6:	add.w	r3, r2, #2147483648	; 0x80000000
    ebda:	str	r3, [sp, #100]	; 0x64
    ebdc:	movs	r3, #45	; 0x2d
    ebde:	str	r1, [sp, #96]	; 0x60
    ebe0:	str	r3, [sp, #16]
    ebe2:	b.n	e6ee <_svfprintf_r+0x1016>
    ebe4:	ldr	r2, [sp, #72]	; 0x48
    ebe6:	ldr	r3, [sp, #56]	; 0x38
    ebe8:	add	r3, r2
    ebea:	ldr	r2, [sp, #60]	; 0x3c
    ebec:	str	r3, [sp, #36]	; 0x24
    ebee:	cmp	r2, #0
    ebf0:	ble.w	ed06 <_svfprintf_r+0x162e>
    ebf4:	movs	r2, #103	; 0x67
    ebf6:	bic.w	r3, r3, r3, asr #31
    ebfa:	str	r2, [sp, #52]	; 0x34
    ebfc:	b.n	e792 <_svfprintf_r+0x10ba>
    ebfe:	ldr	r3, [sp, #52]	; 0x34
    ec00:	cmp	r3, #71	; 0x47
    ec02:	bne.w	e730 <_svfprintf_r+0x1058>
    ec06:	ldr	r3, [sp, #12]
    ec08:	lsls	r3, r3, #31
    ec0a:	bmi.w	e9a2 <_svfprintf_r+0x12ca>
    ec0e:	ldr	r3, [sp, #132]	; 0x84
    ec10:	cmp	r7, #71	; 0x47
    ec12:	sub.w	r3, r3, r6
    ec16:	str	r3, [sp, #56]	; 0x38
    ec18:	beq.w	ea50 <_svfprintf_r+0x1378>
    ec1c:	ldr	r3, [sp, #116]	; 0x74
    ec1e:	b.n	ea9a <_svfprintf_r+0x13c2>
    ec20:	bic.w	r3, r5, r5, asr #31
    ec24:	str	r7, [sp, #40]	; 0x28
    ec26:	str	r3, [sp, #16]
    ec28:	str	r5, [sp, #36]	; 0x24
    ec2a:	mov	fp, r0
    ec2c:	str	r0, [sp, #60]	; 0x3c
    ec2e:	ldrb.w	r7, [sp, #111]	; 0x6f
    ec32:	b.w	da7c <_svfprintf_r+0x3a4>
    ec36:	cmp	r3, #0
    ec38:	ble.n	ed16 <_svfprintf_r+0x163e>
    ec3a:	cmp.w	fp, #0
    ec3e:	bne.n	ece0 <_svfprintf_r+0x1608>
    ec40:	ldr	r2, [sp, #12]
    ec42:	lsls	r4, r2, #31
    ec44:	bmi.n	ece0 <_svfprintf_r+0x1608>
    ec46:	mov	r2, r3
    ec48:	str	r2, [sp, #36]	; 0x24
    ec4a:	bic.w	r3, r3, r3, asr #31
    ec4e:	b.n	e792 <_svfprintf_r+0x10ba>
    ec50:	ldr	r3, [sp, #12]
    ec52:	lsls	r3, r3, #31
    ec54:	mov	r7, fp
    ec56:	bpl.n	ec64 <_svfprintf_r+0x158c>
    ec58:	add	r6, sp, #256	; 0x100
    ec5a:	movs	r3, #48	; 0x30
    ec5c:	strb.w	r3, [r6, #-65]!
    ec60:	b.w	da68 <_svfprintf_r+0x390>
    ec64:	str.w	fp, [sp, #36]	; 0x24
    ec68:	add	r6, sp, #192	; 0xc0
    ec6a:	b.w	da6e <_svfprintf_r+0x396>
    ec6e:	add	r2, sp, #140	; 0x8c
    ec70:	ldr	r1, [sp, #20]
    ec72:	ldr	r0, [sp, #24]
    ec74:	bl	edbc <__ssprint_r>
    ec78:	cmp	r0, #0
    ec7a:	bne.w	d8cc <_svfprintf_r+0x1f4>
    ec7e:	ldr	r5, [sp, #116]	; 0x74
    ec80:	ldr	r4, [sp, #148]	; 0x94
    ec82:	ldr	r3, [sp, #144]	; 0x90
    ec84:	add.w	r9, sp, #192	; 0xc0
    ec88:	b.n	e8d8 <_svfprintf_r+0x1200>
    ec8a:	mov	r8, r4
    ec8c:	movs	r5, #0
    ec8e:	b.w	d790 <_svfprintf_r+0xb8>
    ec92:	adds	r3, #48	; 0x30
    ec94:	movs	r2, #48	; 0x30
    ec96:	strb.w	r3, [sp, #127]	; 0x7f
    ec9a:	strb.w	r2, [sp, #126]	; 0x7e
    ec9e:	add	r3, sp, #128	; 0x80
    eca0:	b.n	eb12 <_svfprintf_r+0x143a>
    eca2:	ldr	r3, [sp, #132]	; 0x84
    eca4:	b.n	e758 <_svfprintf_r+0x1080>
    eca6:	ldr	r2, [sp, #72]	; 0x48
    eca8:	ldr	r3, [sp, #60]	; 0x3c
    ecaa:	add	r3, r2
    ecac:	movs	r2, #103	; 0x67
    ecae:	str	r3, [sp, #36]	; 0x24
    ecb0:	str	r2, [sp, #52]	; 0x34
    ecb2:	bic.w	r3, r3, r3, asr #31
    ecb6:	b.n	e792 <_svfprintf_r+0x10ba>
    ecb8:	ldr	r6, [pc, #248]	; (edb4 <_svfprintf_r+0x16dc>)
    ecba:	ldr	r3, [pc, #252]	; (edb8 <_svfprintf_r+0x16e0>)
    ecbc:	ldrb.w	r7, [sp, #111]	; 0x6f
    ecc0:	b.w	dd26 <_svfprintf_r+0x64e>
    ecc4:	movs	r2, #0
    ecc6:	movs	r3, #0
    ecc8:	ldrd	r0, r1, [sp, #96]	; 0x60
    eccc:	bl	a9a4 <__aeabi_dcmpeq>
    ecd0:	cmp	r0, #0
    ecd2:	bne.w	e9b6 <_svfprintf_r+0x12de>
    ecd6:	rsb	r5, r5, #1
    ecda:	str	r5, [sp, #116]	; 0x74
    ecdc:	add	r4, r5
    ecde:	b.n	e732 <_svfprintf_r+0x105a>
    ece0:	ldr	r3, [sp, #60]	; 0x3c
    ece2:	ldr	r2, [sp, #72]	; 0x48
    ece4:	adds	r5, r3, r2
    ece6:	add.w	r3, r5, fp
    ecea:	str	r3, [sp, #36]	; 0x24
    ecec:	bic.w	r3, r3, r3, asr #31
    ecf0:	b.n	e792 <_svfprintf_r+0x10ba>
    ecf2:	ldr	r3, [sp, #12]
    ecf4:	ands.w	r3, r3, #1
    ecf8:	bne.w	eb24 <_svfprintf_r+0x144c>
    ecfc:	str	r3, [sp, #60]	; 0x3c
    ecfe:	ldr	r3, [sp, #36]	; 0x24
    ed00:	bic.w	r3, r3, r3, asr #31
    ed04:	b.n	e792 <_svfprintf_r+0x10ba>
    ed06:	ldr	r3, [sp, #60]	; 0x3c
    ed08:	ldr	r2, [sp, #36]	; 0x24
    ed0a:	rsb	r3, r3, #1
    ed0e:	add	r2, r3
    ed10:	mov	r3, r2
    ed12:	str	r2, [sp, #36]	; 0x24
    ed14:	b.n	ebf4 <_svfprintf_r+0x151c>
    ed16:	cmp.w	fp, #0
    ed1a:	bne.n	ed22 <_svfprintf_r+0x164a>
    ed1c:	ldr	r3, [sp, #12]
    ed1e:	lsls	r0, r3, #31
    ed20:	bpl.n	ed32 <_svfprintf_r+0x165a>
    ed22:	ldr	r3, [sp, #72]	; 0x48
    ed24:	adds	r5, r3, #1
    ed26:	add.w	r3, r5, fp
    ed2a:	str	r3, [sp, #36]	; 0x24
    ed2c:	bic.w	r3, r3, r3, asr #31
    ed30:	b.n	e792 <_svfprintf_r+0x10ba>
    ed32:	movs	r3, #1
    ed34:	str	r3, [sp, #36]	; 0x24
    ed36:	b.n	e792 <_svfprintf_r+0x10ba>
    ed38:	ldr	r0, [sp, #40]	; 0x28
    ed3a:	ldrb.w	r3, [r8, #1]
    ed3e:	ldr	r5, [r0, #0]
    ed40:	adds	r0, #4
    ed42:	cmp	r5, #0
    ed44:	str	r0, [sp, #40]	; 0x28
    ed46:	mov	r8, r4
    ed48:	bge.w	d78c <_svfprintf_r+0xb4>
    ed4c:	mov.w	r5, #4294967295
    ed50:	b.w	d78c <_svfprintf_r+0xb4>
    ed54:	strb.w	r1, [sp, #111]	; 0x6f
    ed58:	b.w	d8ee <_svfprintf_r+0x216>
    ed5c:	add.w	r3, sp, #126	; 0x7e
    ed60:	b.n	eb12 <_svfprintf_r+0x143a>
    ed62:	ldr	r2, [sp, #24]
    ed64:	movs	r3, #12
    ed66:	str	r3, [r2, #0]
    ed68:	mov.w	r0, #4294967295
    ed6c:	b.w	d8de <_svfprintf_r+0x206>
    ed70:	strb.w	r1, [sp, #111]	; 0x6f
    ed74:	b.w	d9e8 <_svfprintf_r+0x310>
    ed78:	strb.w	r1, [sp, #111]	; 0x6f
    ed7c:	b.w	dcb4 <_svfprintf_r+0x5dc>
    ed80:	strb.w	r1, [sp, #111]	; 0x6f
    ed84:	b.w	de22 <_svfprintf_r+0x74a>
    ed88:	strb.w	r1, [sp, #111]	; 0x6f
    ed8c:	b.w	ddc6 <_svfprintf_r+0x6ee>
    ed90:	strb.w	r1, [sp, #111]	; 0x6f
    ed94:	b.w	dd72 <_svfprintf_r+0x69a>
    ed98:	strb.w	r1, [sp, #111]	; 0x6f
    ed9c:	b.w	e00a <_svfprintf_r+0x932>
    eda0:	strb.w	r1, [sp, #111]	; 0x6f
    eda4:	b.w	dfc8 <_svfprintf_r+0x8f0>
    eda8:	strb.w	r1, [sp, #111]	; 0x6f
    edac:	b.w	df8c <_svfprintf_r+0x8b4>
    edb0:	.word	0x20000838
    edb4:	.word	0x2000080c
    edb8:	.word	0x20000808

0000edbc <__ssprint_r>:
    edbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edc0:	ldr	r3, [r2, #8]
    edc2:	sub	sp, #12
    edc4:	mov	r8, r2
    edc6:	cmp	r3, #0
    edc8:	beq.n	eeb0 <__ssprint_r+0xf4>
    edca:	mov	fp, r0
    edcc:	mov.w	r9, #0
    edd0:	ldr	r6, [r2, #0]
    edd2:	ldr	r0, [r1, #0]
    edd4:	ldr	r3, [r1, #8]
    edd6:	mov	r5, r1
    edd8:	mov	r4, r9
    edda:	cmp	r4, #0
    eddc:	beq.n	ee6a <__ssprint_r+0xae>
    edde:	cmp	r4, r3
    ede0:	mov	r7, r3
    ede2:	mov	sl, r3
    ede4:	bcc.n	ee74 <__ssprint_r+0xb8>
    ede6:	ldrh	r3, [r5, #12]
    ede8:	tst.w	r3, #1152	; 0x480
    edec:	beq.n	ee4a <__ssprint_r+0x8e>
    edee:	ldr	r7, [r5, #20]
    edf0:	ldr	r1, [r5, #16]
    edf2:	add.w	r7, r7, r7, lsl #1
    edf6:	rsb	sl, r1, r0
    edfa:	add.w	r7, r7, r7, lsr #31
    edfe:	adds	r0, r4, #1
    ee00:	asrs	r7, r7, #1
    ee02:	add	r0, sl
    ee04:	cmp	r0, r7
    ee06:	mov	r2, r7
    ee08:	itt	hi
    ee0a:	movhi	r7, r0
    ee0c:	movhi	r2, r7
    ee0e:	lsls	r3, r3, #21
    ee10:	bpl.n	ee7a <__ssprint_r+0xbe>
    ee12:	mov	r1, r2
    ee14:	mov	r0, fp
    ee16:	bl	ae24 <_malloc_r>
    ee1a:	cmp	r0, #0
    ee1c:	beq.n	ee8e <__ssprint_r+0xd2>
    ee1e:	mov	r2, sl
    ee20:	ldr	r1, [r5, #16]
    ee22:	str	r0, [sp, #4]
    ee24:	bl	8310 <memcpy>
    ee28:	ldrh	r2, [r5, #12]
    ee2a:	ldr	r3, [sp, #4]
    ee2c:	bic.w	r2, r2, #1152	; 0x480
    ee30:	orr.w	r2, r2, #128	; 0x80
    ee34:	strh	r2, [r5, #12]
    ee36:	rsb	r2, sl, r7
    ee3a:	add.w	r0, r3, sl
    ee3e:	str	r7, [r5, #20]
    ee40:	str	r3, [r5, #16]
    ee42:	str	r0, [r5, #0]
    ee44:	str	r2, [r5, #8]
    ee46:	mov	r7, r4
    ee48:	mov	sl, r4
    ee4a:	mov	r2, sl
    ee4c:	mov	r1, r9
    ee4e:	bl	b4c4 <memmove>
    ee52:	ldr.w	r2, [r8, #8]
    ee56:	ldr	r3, [r5, #8]
    ee58:	ldr	r0, [r5, #0]
    ee5a:	subs	r3, r3, r7
    ee5c:	add	r0, sl
    ee5e:	subs	r4, r2, r4
    ee60:	str	r3, [r5, #8]
    ee62:	str	r0, [r5, #0]
    ee64:	str.w	r4, [r8, #8]
    ee68:	cbz	r4, eeb0 <__ssprint_r+0xf4>
    ee6a:	ldr.w	r9, [r6]
    ee6e:	ldr	r4, [r6, #4]
    ee70:	adds	r6, #8
    ee72:	b.n	edda <__ssprint_r+0x1e>
    ee74:	mov	r7, r4
    ee76:	mov	sl, r4
    ee78:	b.n	ee4a <__ssprint_r+0x8e>
    ee7a:	mov	r0, fp
    ee7c:	bl	b630 <_realloc_r>
    ee80:	mov	r3, r0
    ee82:	cmp	r0, #0
    ee84:	bne.n	ee36 <__ssprint_r+0x7a>
    ee86:	ldr	r1, [r5, #16]
    ee88:	mov	r0, fp
    ee8a:	bl	bea8 <_free_r>
    ee8e:	movs	r3, #12
    ee90:	str.w	r3, [fp]
    ee94:	ldrh	r3, [r5, #12]
    ee96:	movs	r2, #0
    ee98:	orr.w	r3, r3, #64	; 0x40
    ee9c:	mov.w	r0, #4294967295
    eea0:	strh	r3, [r5, #12]
    eea2:	str.w	r2, [r8, #8]
    eea6:	str.w	r2, [r8, #4]
    eeaa:	add	sp, #12
    eeac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeb0:	movs	r0, #0
    eeb2:	str.w	r0, [r8, #4]
    eeb6:	add	sp, #12
    eeb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eebc:	movs	r0, r0
	...

0000eec0 <___init_veneer>:
    eec0:	ldr.w	pc, [pc]	; eec4 <___init_veneer+0x4>
    eec4:	.word	0x60001759
	...

Disassembly of section .fini:

0000eed0 <_fini>:
    eed0:	push	{r3, r4, r5, r6, r7, lr}
    eed2:	nop
